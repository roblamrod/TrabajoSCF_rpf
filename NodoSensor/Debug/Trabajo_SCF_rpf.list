
Trabajo_SCF_rpf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aa4  08013c98  08013c98  00023c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801573c  0801573c  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0801573c  0801573c  0002573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015744  08015744  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015744  08015744  00025744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015748  08015748  00025748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801574c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003810  20000200  0801594c  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a10  0801594c  00033a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f7fd  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062f2  00000000  00000000  0005fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002810  00000000  00000000  00065d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f1d  00000000  00000000  00068578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000085a0  00000000  00000000  0006a495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e8d3  00000000  00000000  00072a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106653  00000000  00000000  000a1308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c10c  00000000  00000000  001a795c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001b3a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013c80 	.word	0x08013c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08013c80 	.word	0x08013c80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
extern UART_HandleTypeDef hDiscoUart;
#endif /* TERMINAL_USE */

static  uint8_t  IP_Addr[4];

int _write(int file, char *ptr, int len){
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffc9 	bl	8000ff0 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
	}
	return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f001 fadb 	bl	8002636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f860 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fa28 	bl	80014d8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001088:	f000 f8be 	bl	8001208 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108c:	f000 f8f4 	bl	8001278 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001090:	f000 f930 	bl	80012f4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001094:	f000 f954 	bl	8001340 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001098:	f000 f990 	bl	80013bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109c:	f000 f9be 	bl	800141c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a0:	f000 f9ec 	bl	800147c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <main+0xa8>)
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <main+0xac>)
 80010a8:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <main+0xa8>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <main+0xa8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <main+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <main+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <main+0xa8>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <main+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <main+0xa8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <main+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <main+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 80010e2:	490f      	ldr	r1, [pc, #60]	; (8001120 <main+0xa8>)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f006 ff7b 	bl	8007fe0 <BSP_COM_Init>

#endif /* TERMINAL_USE */

BSP_TSENSOR_Init();
 80010ea:	f007 f935 	bl	8008358 <BSP_TSENSOR_Init>

printf("****** Sistemas Ciberfisicos ****** \n\r");
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <main+0xb0>)
 80010f0:	f00f f854 	bl	801019c <iprintf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010f4:	f00b fb96 	bl	800c824 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f8:	4a0c      	ldr	r2, [pc, #48]	; (800112c <main+0xb4>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <main+0xb8>)
 80010fe:	f00b fbdb 	bl	800c8b8 <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <main+0xbc>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <main+0xc0>)
 800110a:	2100      	movs	r1, #0
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <main+0xc4>)
 800110e:	f00b fbd3 	bl	800c8b8 <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <main+0xc8>)
 8001116:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001118:	f00b fba8 	bl	800c86c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800111c:	e7fe      	b.n	800111c <main+0xa4>
 800111e:	bf00      	nop
 8001120:	20000de8 	.word	0x20000de8
 8001124:	40013800 	.word	0x40013800
 8001128:	08013cb0 	.word	0x08013cb0
 800112c:	0801502c 	.word	0x0801502c
 8001130:	0800184d 	.word	0x0800184d
 8001134:	2000096c 	.word	0x2000096c
 8001138:	08015050 	.word	0x08015050
 800113c:	08001a65 	.word	0x08001a65
 8001140:	20000970 	.word	0x20000970

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	; 0x58
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2244      	movs	r2, #68	; 0x44
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00f f9b2 	bl	80104bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001166:	f44f 7000 	mov.w	r0, #512	; 0x200
 800116a:	f003 f823 	bl	80041b4 <HAL_PWREx_ControlVoltageScaling>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001174:	f000 fc82 	bl	8001a7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001178:	f002 fffe 	bl	8004178 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <SystemClock_Config+0xc0>)
 800117e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001182:	4a20      	ldr	r2, [pc, #128]	; (8001204 <SystemClock_Config+0xc0>)
 8001184:	f023 0318 	bic.w	r3, r3, #24
 8001188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800118c:	2314      	movs	r3, #20
 800118e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011ac:	2328      	movs	r3, #40	; 0x28
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 f919 	bl	80043f8 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011cc:	f000 fc56 	bl	8001a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2303      	movs	r3, #3
 80011d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2104      	movs	r1, #4
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fce1 	bl	8004bb0 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011f4:	f000 fc42 	bl	8001a7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011f8:	f004 f9e8 	bl	80055cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80011fc:	bf00      	nop
 80011fe:	3758      	adds	r7, #88	; 0x58
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000

08001208 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_DFSDM1_Init+0x68>)
 800120e:	4a19      	ldr	r2, [pc, #100]	; (8001274 <MX_DFSDM1_Init+0x6c>)
 8001210:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001214:	2201      	movs	r2, #1
 8001216:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_DFSDM1_Init+0x68>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001220:	2202      	movs	r2, #2
 8001222:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_DFSDM1_Init+0x68>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_DFSDM1_Init+0x68>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001240:	2204      	movs	r2, #4
 8001242:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_DFSDM1_Init+0x68>)
 800124c:	2201      	movs	r2, #1
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_DFSDM1_Init+0x68>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_DFSDM1_Init+0x68>)
 800125e:	f001 fbc7 	bl	80029f0 <HAL_DFSDM_ChannelInit>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001268:	f000 fc08 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000021c 	.word	0x2000021c
 8001274:	40016020 	.word	0x40016020

08001278 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_I2C2_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_I2C2_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_I2C2_Init+0x74>)
 8001284:	f640 6214 	movw	r2, #3604	; 0xe14
 8001288:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_I2C2_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_I2C2_Init+0x74>)
 8001292:	2201      	movs	r2, #1
 8001294:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_I2C2_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_I2C2_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_I2C2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C2_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <MX_I2C2_Init+0x74>)
 80012b6:	f001 ffcf 	bl	8003258 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fbdc 	bl	8001a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_I2C2_Init+0x74>)
 80012c8:	f002 fd76 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012d2:	f000 fbd3 	bl	8001a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C2_Init+0x74>)
 80012da:	f002 fdb8 	bl	8003e4e <HAL_I2CEx_ConfigDigitalFilter>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012e4:	f000 fbca 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000254 	.word	0x20000254
 80012f0:	40005800 	.word	0x40005800

080012f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_QUADSPI_Init+0x44>)
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <MX_QUADSPI_Init+0x48>)
 80012fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_QUADSPI_Init+0x44>)
 8001300:	2202      	movs	r2, #2
 8001302:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_QUADSPI_Init+0x44>)
 8001306:	2204      	movs	r2, #4
 8001308:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_QUADSPI_Init+0x44>)
 800130c:	2210      	movs	r2, #16
 800130e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_QUADSPI_Init+0x44>)
 8001312:	2217      	movs	r2, #23
 8001314:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_QUADSPI_Init+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_QUADSPI_Init+0x44>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_QUADSPI_Init+0x44>)
 8001324:	f002 ffac 	bl	8004280 <HAL_QSPI_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800132e:	f000 fba5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002a8 	.word	0x200002a8
 800133c:	a0001000 	.word	0xa0001000

08001340 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <MX_SPI3_Init+0x78>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_SPI3_Init+0x74>)
 800134c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_SPI3_Init+0x74>)
 800135a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800135e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_SPI3_Init+0x74>)
 800136e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001372:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_SPI3_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_SPI3_Init+0x74>)
 800138e:	2207      	movs	r2, #7
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_SPI3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_SPI3_Init+0x74>)
 800139a:	2208      	movs	r2, #8
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_SPI3_Init+0x74>)
 80013a0:	f004 faf6 	bl	8005990 <HAL_SPI_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fb67 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002ec 	.word	0x200002ec
 80013b8:	40003c00 	.word	0x40003c00

080013bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART1_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART1_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART1_UART_Init+0x58>)
 8001400:	f005 fdfb 	bl	8006ffa <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f000 fb37 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000350 	.word	0x20000350
 8001418:	40013800 	.word	0x40013800

0800141c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <MX_USART3_UART_Init+0x5c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART3_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART3_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART3_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001460:	f005 fdcb 	bl	8006ffa <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 fb07 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200003d8 	.word	0x200003d8
 8001478:	40004800 	.word	0x40004800

0800147c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148a:	2206      	movs	r2, #6
 800148c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001490:	2202      	movs	r2, #2
 8001492:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001496:	2202      	movs	r2, #2
 8001498:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c0:	f002 fd11 	bl	8003ee6 <HAL_PCD_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014ca:	f000 fad7 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000460 	.word	0x20000460

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	4bbd      	ldr	r3, [pc, #756]	; (80017e4 <MX_GPIO_Init+0x30c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4abc      	ldr	r2, [pc, #752]	; (80017e4 <MX_GPIO_Init+0x30c>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4bba      	ldr	r3, [pc, #744]	; (80017e4 <MX_GPIO_Init+0x30c>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4bb7      	ldr	r3, [pc, #732]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4ab6      	ldr	r2, [pc, #728]	; (80017e4 <MX_GPIO_Init+0x30c>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4bb4      	ldr	r3, [pc, #720]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4bb1      	ldr	r3, [pc, #708]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4ab0      	ldr	r2, [pc, #704]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4bae      	ldr	r3, [pc, #696]	; (80017e4 <MX_GPIO_Init+0x30c>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4bab      	ldr	r3, [pc, #684]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4aaa      	ldr	r2, [pc, #680]	; (80017e4 <MX_GPIO_Init+0x30c>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4ba8      	ldr	r3, [pc, #672]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	4ba5      	ldr	r3, [pc, #660]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4aa4      	ldr	r2, [pc, #656]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4ba2      	ldr	r3, [pc, #648]	; (80017e4 <MX_GPIO_Init+0x30c>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 718a 	mov.w	r1, #276	; 0x114
 800156c:	489e      	ldr	r0, [pc, #632]	; (80017e8 <MX_GPIO_Init+0x310>)
 800156e:	f001 fe43 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f248 1104 	movw	r1, #33028	; 0x8104
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f001 fe3c 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001580:	2200      	movs	r2, #0
 8001582:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001586:	4899      	ldr	r0, [pc, #612]	; (80017ec <MX_GPIO_Init+0x314>)
 8001588:	f001 fe36 	bl	80031f8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001592:	4897      	ldr	r0, [pc, #604]	; (80017f0 <MX_GPIO_Init+0x318>)
 8001594:	f001 fe30 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159e:	4894      	ldr	r0, [pc, #592]	; (80017f0 <MX_GPIO_Init+0x318>)
 80015a0:	f001 fe2a 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80015aa:	4892      	ldr	r0, [pc, #584]	; (80017f4 <MX_GPIO_Init+0x31c>)
 80015ac:	f001 fe24 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2120      	movs	r1, #32
 80015b4:	488d      	ldr	r0, [pc, #564]	; (80017ec <MX_GPIO_Init+0x314>)
 80015b6:	f001 fe1f 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2101      	movs	r1, #1
 80015be:	488a      	ldr	r0, [pc, #552]	; (80017e8 <MX_GPIO_Init+0x310>)
 80015c0:	f001 fe1a 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015c4:	f240 1315 	movw	r3, #277	; 0x115
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4882      	ldr	r0, [pc, #520]	; (80017e8 <MX_GPIO_Init+0x310>)
 80015de:	f001 fb55 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015e2:	236a      	movs	r3, #106	; 0x6a
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	487c      	ldr	r0, [pc, #496]	; (80017e8 <MX_GPIO_Init+0x310>)
 80015f8:	f001 fb48 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4878      	ldr	r0, [pc, #480]	; (80017f4 <MX_GPIO_Init+0x31c>)
 8001614:	f001 fb3a 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001618:	233f      	movs	r3, #63	; 0x3f
 800161a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800161c:	230b      	movs	r3, #11
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4872      	ldr	r0, [pc, #456]	; (80017f4 <MX_GPIO_Init+0x31c>)
 800162c:	f001 fb2e 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001630:	2303      	movs	r3, #3
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001640:	2308      	movs	r3, #8
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f001 fb1d 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001652:	f248 1304 	movw	r3, #33028	; 0x8104
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f001 fb0d 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001672:	2308      	movs	r3, #8
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001682:	2301      	movs	r3, #1
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f001 fafc 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001694:	2310      	movs	r3, #16
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001698:	230b      	movs	r3, #11
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f001 faef 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80016ae:	23e0      	movs	r3, #224	; 0xe0
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016be:	2305      	movs	r3, #5
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f001 fade 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016d0:	2301      	movs	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4841      	ldr	r0, [pc, #260]	; (80017ec <MX_GPIO_Init+0x314>)
 80016e6:	f001 fad1 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016ea:	2302      	movs	r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ee:	230b      	movs	r3, #11
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	483b      	ldr	r0, [pc, #236]	; (80017ec <MX_GPIO_Init+0x314>)
 80016fe:	f001 fac5 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001702:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001706:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4834      	ldr	r0, [pc, #208]	; (80017ec <MX_GPIO_Init+0x314>)
 800171c:	f001 fab6 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001720:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001724:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	482e      	ldr	r0, [pc, #184]	; (80017f0 <MX_GPIO_Init+0x318>)
 8001738:	f001 faa8 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800173c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <MX_GPIO_Init+0x318>)
 8001756:	f001 fa99 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800175a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4820      	ldr	r0, [pc, #128]	; (80017f4 <MX_GPIO_Init+0x31c>)
 8001774:	f001 fa8a 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001778:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <MX_GPIO_Init+0x31c>)
 8001790:	f001 fa7c 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001794:	2302      	movs	r3, #2
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a4:	2305      	movs	r3, #5
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4810      	ldr	r0, [pc, #64]	; (80017f0 <MX_GPIO_Init+0x318>)
 80017b0:	f001 fa6c 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017b4:	2378      	movs	r3, #120	; 0x78
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c4:	2307      	movs	r3, #7
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_GPIO_Init+0x318>)
 80017d0:	f001 fa5c 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	e00a      	b.n	80017f8 <MX_GPIO_Init+0x320>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48001000 	.word	0x48001000
 80017ec:	48000400 	.word	0x48000400
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	48000800 	.word	0x48000800
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fe:	2304      	movs	r3, #4
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <MX_GPIO_Init+0x370>)
 800180a:	f001 fa3f 	bl	8002c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2105      	movs	r1, #5
 8001812:	2007      	movs	r0, #7
 8001814:	f001 f8a7 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001818:	2007      	movs	r0, #7
 800181a:	f001 f8c0 	bl	800299e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	2017      	movs	r0, #23
 8001824:	f001 f89f 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001828:	2017      	movs	r0, #23
 800182a:	f001 f8b8 	bl	800299e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	2028      	movs	r0, #40	; 0x28
 8001834:	f001 f897 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001838:	2028      	movs	r0, #40	; 0x28
 800183a:	f001 f8b0 	bl	800299e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	48000400 	.word	0x48000400

0800184c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f00b f8c1 	bl	800c9dc <osDelay>
 800185a:	e7fb      	b.n	8001854 <StartDefaultTask+0x8>

0800185c <wifi_start>:
* @param argument: Not used
* @retval None
*/

static int wifi_start(void)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af04      	add	r7, sp, #16
  printf("Wifi Start Function. \n\r");
 8001862:	4819      	ldr	r0, [pc, #100]	; (80018c8 <wifi_start+0x6c>)
 8001864:	f00e fc9a 	bl	801019c <iprintf>
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001868:	f008 f9bc 	bl	8009be4 <WIFI_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d124      	bne.n	80018bc <wifi_start+0x60>
  {
    printf("ES-WIFI Initialized.\n\r");
 8001872:	4816      	ldr	r0, [pc, #88]	; (80018cc <wifi_start+0x70>)
 8001874:	f00e fc92 	bl	801019c <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	2106      	movs	r1, #6
 800187c:	4618      	mov	r0, r3
 800187e:	f008 f9ff 	bl	8009c80 <WIFI_GetMAC_Address>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d113      	bne.n	80018b0 <wifi_start+0x54>
    {
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
               MAC_Addr[0],
 8001888:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800188a:	4618      	mov	r0, r3
               MAC_Addr[1],
 800188c:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800188e:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001890:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001892:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001894:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001896:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001898:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 800189a:	9102      	str	r1, [sp, #8]
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	462b      	mov	r3, r5
 80018a2:	4622      	mov	r2, r4
 80018a4:	4601      	mov	r1, r0
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <wifi_start+0x74>)
 80018a8:	f00e fc78 	bl	801019c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e007      	b.n	80018c0 <wifi_start+0x64>
      printf("> ERROR : CANNOT get MAC address.\n\r");
 80018b0:	4808      	ldr	r0, [pc, #32]	; (80018d4 <wifi_start+0x78>)
 80018b2:	f00e fc73 	bl	801019c <iprintf>
      return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e001      	b.n	80018c0 <wifi_start+0x64>
    return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bdb0      	pop	{r4, r5, r7, pc}
 80018c8:	08013cd8 	.word	0x08013cd8
 80018cc:	08013cf0 	.word	0x08013cf0
 80018d0:	08013d08 	.word	0x08013d08
 80018d4:	08013d48 	.word	0x08013d48

080018d8 <MQTTTask>:


void MQTTTask(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b09e      	sub	sp, #120	; 0x78
 80018dc:	af00      	add	r7, sp, #0
const uint32_t ulMaxPublishCount = 5UL;
 80018de:	2305      	movs	r3, #5
 80018e0:	677b      	str	r3, [r7, #116]	; 0x74
NetworkContext_t xNetworkContext = { 0 };
 80018e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
TransportStatus_t xNetworkStatus;
float ftemp;
char payLoad[16];
 /* Attempt to connect to the MQTT broker. The socket is returned in
 * the network context structure. */
 xNetworkStatus = prvConnectToServer( &xNetworkContext );
 80018ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8c9 	bl	8001a88 <prvConnectToServer>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 80018fc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001900:	2b01      	cmp	r3, #1
 8001902:	d00a      	beq.n	800191a <MQTTTask+0x42>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001908:	f383 8811 	msr	BASEPRI, r3
 800190c:	f3bf 8f6f 	isb	sy
 8001910:	f3bf 8f4f 	dsb	sy
 8001914:	66bb      	str	r3, [r7, #104]	; 0x68
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001916:	bf00      	nop
 8001918:	e7fe      	b.n	8001918 <MQTTTask+0x40>
 //LOG(("Trying to create an MQTT connection\n"));
 prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 800191a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f8f9 	bl	8001b1c <prvCreateMQTTConnectionWithBroker>
for( ; ; )
 {
 /* Publicar cada 5 segundos */
 osDelay(5000);
 800192a:	f241 3088 	movw	r0, #5000	; 0x1388
 800192e:	f00b f855 	bl	800c9dc <osDelay>
 ftemp=BSP_TSENSOR_ReadTemp();
 8001932:	f006 fd2d 	bl	8008390 <BSP_TSENSOR_ReadTemp>
 8001936:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
 sprintf(payLoad,"%02.2f",ftemp);
 800193a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800193c:	f7fe fe04 	bl	8000548 <__aeabi_f2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4638      	mov	r0, r7
 8001946:	4905      	ldr	r1, [pc, #20]	; (800195c <MQTTTask+0x84>)
 8001948:	f00e fc96 	bl	8010278 <siprintf>
 prvMQTTPublishToTopic(&xMQTTContext,pcTempTopic,payLoad);
 800194c:	463a      	mov	r2, r7
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4903      	ldr	r1, [pc, #12]	; (8001960 <MQTTTask+0x88>)
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f95b 	bl	8001c10 <prvMQTTPublishToTopic>
 osDelay(5000);
 800195a:	e7e6      	b.n	800192a <MQTTTask+0x52>
 800195c:	08013d6c 	.word	0x08013d6c
 8001960:	08013d74 	.word	0x08013d74

08001964 <wifi_connect>:
 }
}

int wifi_connect(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af02      	add	r7, sp, #8
    uint8_t MAX_tries = 3;
 800196a:	2303      	movs	r3, #3
 800196c:	717b      	strb	r3, [r7, #5]
    uint8_t return_value=-1;
 800196e:	23ff      	movs	r3, #255	; 0xff
 8001970:	71fb      	strb	r3, [r7, #7]
    uint8_t try=1;
 8001972:	2301      	movs	r3, #1
 8001974:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001976:	e03f      	b.n	80019f8 <wifi_connect+0x94>
	  printf("Wifi connect function.. try %d/%d\n\r", try,MAX_tries);
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	797a      	ldrb	r2, [r7, #5]
 800197c:	4619      	mov	r1, r3
 800197e:	4824      	ldr	r0, [pc, #144]	; (8001a10 <wifi_connect+0xac>)
 8001980:	f00e fc0c 	bl	801019c <iprintf>
	  wifi_start();
 8001984:	f7ff ff6a 	bl	800185c <wifi_start>
	  printf("Connecting to %s , %s.\n\r",SSID,PASSWORD);
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <wifi_connect+0xb0>)
 800198a:	4923      	ldr	r1, [pc, #140]	; (8001a18 <wifi_connect+0xb4>)
 800198c:	4823      	ldr	r0, [pc, #140]	; (8001a1c <wifi_connect+0xb8>)
 800198e:	f00e fc05 	bl	801019c <iprintf>
	  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001992:	2200      	movs	r2, #0
 8001994:	491f      	ldr	r1, [pc, #124]	; (8001a14 <wifi_connect+0xb0>)
 8001996:	4820      	ldr	r0, [pc, #128]	; (8001a18 <wifi_connect+0xb4>)
 8001998:	f008 f950 	bl	8009c3c <WIFI_Connect>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d122      	bne.n	80019e8 <wifi_connect+0x84>
	  {
		if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 80019a2:	2104      	movs	r1, #4
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <wifi_connect+0xbc>)
 80019a6:	f008 f98b 	bl	8009cc0 <WIFI_GetIP_Address>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d115      	bne.n	80019dc <wifi_connect+0x78>
		{
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
				   IP_Addr[0],
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <wifi_connect+0xbc>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 80019b4:	4619      	mov	r1, r3
				   IP_Addr[1],
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <wifi_connect+0xbc>)
 80019b8:	785b      	ldrb	r3, [r3, #1]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 80019ba:	461a      	mov	r2, r3
				   IP_Addr[2],
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <wifi_connect+0xbc>)
 80019be:	789b      	ldrb	r3, [r3, #2]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 80019c0:	4618      	mov	r0, r3
				   IP_Addr[3]);
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <wifi_connect+0xbc>)
 80019c4:	78db      	ldrb	r3, [r3, #3]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4603      	mov	r3, r0
 80019ca:	4816      	ldr	r0, [pc, #88]	; (8001a24 <wifi_connect+0xc0>)
 80019cc:	f00e fbe6 	bl	801019c <iprintf>
		  return_value=0; //TODO CORRECTO
 80019d0:	2300      	movs	r3, #0
 80019d2:	71fb      	strb	r3, [r7, #7]
		  try=MAX_tries+1;
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	3301      	adds	r3, #1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	e00a      	b.n	80019f2 <wifi_connect+0x8e>
		  //osThreadFlagsSet(wifiStartHandle, 0x0001U);
		}
		else
		{
		  printf("ERROR : es-wifi module CANNOT get IP address\n\r");
 80019dc:	4812      	ldr	r0, [pc, #72]	; (8001a28 <wifi_connect+0xc4>)
 80019de:	f00e fbdd 	bl	801019c <iprintf>
		  return_value= -1;
 80019e2:	23ff      	movs	r3, #255	; 0xff
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e004      	b.n	80019f2 <wifi_connect+0x8e>
		}
	  }
	  else
	  {
		  printf("ERROR : es-wifi module NOT connected\n\r");
 80019e8:	4810      	ldr	r0, [pc, #64]	; (8001a2c <wifi_connect+0xc8>)
 80019ea:	f00e fbd7 	bl	801019c <iprintf>
		  return_value= -1;
 80019ee:	23ff      	movs	r3, #255	; 0xff
 80019f0:	71fb      	strb	r3, [r7, #7]
	  }
	  try=try+1;
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	3301      	adds	r3, #1
 80019f6:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 80019f8:	79ba      	ldrb	r2, [r7, #6]
 80019fa:	797b      	ldrb	r3, [r7, #5]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d9bb      	bls.n	8001978 <wifi_connect+0x14>
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1b8      	bne.n	8001978 <wifi_connect+0x14>
	}
  return return_value;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	08013da0 	.word	0x08013da0
 8001a14:	08013dc4 	.word	0x08013dc4
 8001a18:	08013dc8 	.word	0x08013dc8
 8001a1c:	08013dd4 	.word	0x08013dd4
 8001a20:	20000974 	.word	0x20000974
 8001a24:	08013df0 	.word	0x08013df0
 8001a28:	08013e2c 	.word	0x08013e2c
 8001a2c:	08013e5c 	.word	0x08013e5c

08001a30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d102      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      //printf("GPIO_Pin.\n\r");
      SPI_WIFI_ISR();
 8001a40:	f008 f8c0 	bl	8009bc4 <SPI_WIFI_ISR>
      break;
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001a46:	bf00      	nop
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <SPI3_IRQHandler+0x10>)
 8001a56:	f004 fda7 	bl	80065a8 <HAL_SPI_IRQHandler>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000e78 	.word	0x20000e78

08001a64 <wifiStartTask>:

/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	wifi_connect();
 8001a6c:	f7ff ff7a 	bl	8001964 <wifi_connect>
	for(;;)
	{
		MQTTTask();
 8001a70:	f7ff ff32 	bl	80018d8 <MQTTTask>
		osDelay(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f00a ffb1 	bl	800c9dc <osDelay>
		MQTTTask();
 8001a7a:	e7f9      	b.n	8001a70 <wifiStartTask+0xc>

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <prvConnectToServer+0x80>)
 8001a92:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 8001a94:	f240 725b 	movw	r2, #1883	; 0x75b
 8001a98:	491c      	ldr	r1, [pc, #112]	; (8001b0c <prvConnectToServer+0x84>)
 8001a9a:	481d      	ldr	r0, [pc, #116]	; (8001b10 <prvConnectToServer+0x88>)
 8001a9c:	f00e fb7e 	bl	801019c <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	9201      	str	r2, [sp, #4]
 8001aa8:	f240 725b 	movw	r2, #1883	; 0x75b
 8001aac:	9200      	str	r2, [sp, #0]
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <prvConnectToServer+0x8c>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f008 f928 	bl	8009d08 <WIFI_OpenClientConnection>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <prvConnectToServer+0x4e>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4814      	ldr	r0, [pc, #80]	; (8001b18 <prvConnectToServer+0x90>)
 8001ac8:	f00e fb68 	bl	801019c <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8001acc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ad0:	f00a ff84 	bl	800c9dc <osDelay>
 8001ad4:	e00f      	b.n	8001af6 <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f240 725b 	movw	r2, #1883	; 0x75b
 8001af0:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8001af2:	2301      	movs	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1cb      	bne.n	8001a94 <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2ea035a9 	.word	0x2ea035a9
 8001b0c:	08013eb0 	.word	0x08013eb0
 8001b10:	08013ecc 	.word	0x08013ecc
 8001b14:	08013ef0 	.word	0x08013ef0
 8001b18:	08013ef8 	.word	0x08013ef8

08001b1c <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	7818      	ldrb	r0, [r3, #0]
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	f00a fe1d 	bl	800c770 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8001b36:	f107 010c 	add.w	r1, r7, #12
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <prvCreateMQTTConnectionWithBroker+0xd8>)
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <prvCreateMQTTConnectionWithBroker+0xdc>)
 8001b40:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <prvCreateMQTTConnectionWithBroker+0xe0>)
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f009 f836 	bl	800abb4 <MQTT_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8001b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
}
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 8001b6c:	4824      	ldr	r0, [pc, #144]	; (8001c00 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8001b6e:	f00e fb7b 	bl	8010268 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	221c      	movs	r2, #28
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00e fc9e 	bl	80104bc <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8001b8a:	2317      	movs	r3, #23
 8001b8c:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <prvCreateMQTTConnectionWithBroker+0xec>)
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8001b92:	2323      	movs	r3, #35	; 0x23
 8001b94:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7fe fb68 	bl	8000270 <strlen>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8001ba6:	233c      	movs	r3, #60	; 0x3c
 8001ba8:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8001baa:	f107 0120 	add.w	r1, r7, #32
 8001bae:	f107 031f 	add.w	r3, r7, #31
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f009 f84f 	bl	800ac5e <MQTT_Connect>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8001bc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <prvCreateMQTTConnectionWithBroker+0xc8>
	__asm volatile
 8001bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd2:	f383 8811 	msr	BASEPRI, r3
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	f3bf 8f4f 	dsb	sy
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8001be0:	bf00      	nop
 8001be2:	e7fe      	b.n	8001be2 <prvCreateMQTTConnectionWithBroker+0xc6>
    LOG(("MQTT connected to broker\n"));
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <prvCreateMQTTConnectionWithBroker+0xf0>)
 8001be6:	f00e fb3f 	bl	8010268 <puts>

}
 8001bea:	bf00      	nop
 8001bec:	3748      	adds	r7, #72	; 0x48
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	08001d9d 	.word	0x08001d9d
 8001bfc:	08001d6d 	.word	0x08001d6d
 8001c00:	08013f20 	.word	0x08013f20
 8001c04:	08013f34 	.word	0x08013f34
 8001c08:	08013f4c 	.word	0x08013f4c
 8001c0c:	08013f70 	.word	0x08013f70

08001c10 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2214      	movs	r2, #20
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00e fc49 	bl	80104bc <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8001c36:	68b8      	ldr	r0, [r7, #8]
 8001c38:	f7fe fb1a 	bl	8000270 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fb12 	bl	8000270 <strlen>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f009 f878 	bl	800ad4e <MQTT_Publish>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
 8001c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d104      	bne.n	8001c76 <prvMQTTPublishToTopic+0x66>
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <prvMQTTPublishToTopic+0x70>)
 8001c72:	f00e fa93 	bl	801019c <iprintf>
    //configASSERT( xResult == MQTTSuccess );
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08013f8c 	.word	0x08013f8c

08001c84 <prvMQTTProcessIncomingPublish>:

    } while( xFailedSubscribeToTopic == true  );
}

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0c2      	sub	sp, #264	; 0x108
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c92:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8001c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68d9      	ldr	r1, [r3, #12]
 8001ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b7f      	cmp	r3, #127	; 0x7f
 8001cae:	bf28      	it	cs
 8001cb0:	237f      	movcs	r3, #127	; 0x7f
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00e fd16 	bl	80106ea <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8001cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	bf28      	it	cs
 8001cd2:	4613      	movcs	r3, r2
 8001cd4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001cd8:	443b      	add	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8001ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	891b      	ldrh	r3, [r3, #8]
 8001cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfa:	bf28      	it	cs
 8001cfc:	237f      	movcs	r3, #127	; 0x7f
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00e fcef 	bl	80106ea <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8001d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	891b      	ldrh	r3, [r3, #8]
 8001d18:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf28      	it	cs
 8001d20:	4613      	movcs	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d2e:	2100      	movs	r1, #0
 8001d30:	5499      	strb	r1, [r3, r2]

	LOG(("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1));
 8001d32:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480a      	ldr	r0, [pc, #40]	; (8001d68 <prvMQTTProcessIncomingPublish+0xe4>)
 8001d3e:	f00e fa2d 	bl	801019c <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') BSP_LED_On(LED2);
 8001d42:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d46:	2b31      	cmp	r3, #49	; 0x31
 8001d48:	d102      	bne.n	8001d50 <prvMQTTProcessIncomingPublish+0xcc>
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f006 f91c 	bl	8007f88 <BSP_LED_On>
	if(buffer1[0]=='0') BSP_LED_Off(LED2);
 8001d50:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d54:	2b30      	cmp	r3, #48	; 0x30
 8001d56:	d102      	bne.n	8001d5e <prvMQTTProcessIncomingPublish+0xda>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f006 f92b 	bl	8007fb4 <BSP_LED_Off>

}
 8001d5e:	bf00      	nop
 8001d60:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08013ffc 	.word	0x08013ffc

08001d6c <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8001d7a:	f00b ff07 	bl	800db8c <xTaskGetTickCount>
 8001d7e:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <prvGetTimeMs+0x2c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8001d8e:	683b      	ldr	r3, [r7, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000d60 	.word	0x20000d60

08001d9c <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db0:	2b30      	cmp	r3, #48	; 0x30
 8001db2:	d104      	bne.n	8001dbe <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff63 	bl	8001c84 <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_MspInit+0x4c>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_MspInit+0x4c>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_MspInit+0x4c>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_MspInit+0x4c>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	210f      	movs	r1, #15
 8001e02:	f06f 0001 	mvn.w	r0, #1
 8001e06:	f000 fdae 	bl	8002966 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0ac      	sub	sp, #176	; 0xb0
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2288      	movs	r2, #136	; 0x88
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00e fb3f 	bl	80104bc <memset>
  if(DFSDM1_Init == 0)
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d142      	bne.n	8001ecc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 f8ce 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e62:	f7ff fe0b 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e66:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e70:	6613      	str	r3, [r2, #96]	; 0x60
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001e96:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001eb0:	2306      	movs	r3, #6
 8001eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001ebe:	f000 fee5 	bl	8002c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	4a02      	ldr	r2, [pc, #8]	; (8001ed4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001eca:	6013      	str	r3, [r2, #0]
  }

}
 8001ecc:	bf00      	nop
 8001ece:	37b0      	adds	r7, #176	; 0xb0
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000d64 	.word	0x20000d64
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	48001000 	.word	0x48001000

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0ac      	sub	sp, #176	; 0xb0
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2288      	movs	r2, #136	; 0x88
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f00e fadb 	bl	80104bc <memset>
  if(hi2c->Instance==I2C2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_I2C_MspInit+0xb0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d13b      	bne.n	8001f88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f86b 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f28:	f7ff fda8 	bl	8001a7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_I2C_MspInit+0xb4>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_I2C_MspInit+0xb4>)
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_I2C_MspInit+0xb4>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4c:	2312      	movs	r3, #18
 8001f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <HAL_I2C_MspInit+0xb8>)
 8001f6c:	f000 fe8e 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_I2C_MspInit+0xb4>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_I2C_MspInit+0xb4>)
 8001f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_I2C_MspInit+0xb4>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f88:	bf00      	nop
 8001f8a:	37b0      	adds	r7, #176	; 0xb0
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40005800 	.word	0x40005800
 8001f94:	40021000 	.word	0x40021000
 8001f98:	48000400 	.word	0x48000400

08001f9c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_I2C_MspDeInit+0x3c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10f      	bne.n	8001fce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_I2C_MspDeInit+0x40>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_I2C_MspDeInit+0x40>)
 8001fb4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbe:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <HAL_I2C_MspDeInit+0x44>)
 8001fc0:	f001 f80e 	bl	8002fe0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <HAL_I2C_MspDeInit+0x44>)
 8001fca:	f001 f809 	bl	8002fe0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000400 	.word	0x48000400

08001fe4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_QSPI_MspInit+0x7c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d128      	bne.n	8002058 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_QSPI_MspInit+0x80>)
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_QSPI_MspInit+0x80>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6513      	str	r3, [r2, #80]	; 0x50
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_QSPI_MspInit+0x80>)
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_QSPI_MspInit+0x80>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_QSPI_MspInit+0x80>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_QSPI_MspInit+0x80>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002036:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800203a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002048:	230a      	movs	r3, #10
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_QSPI_MspInit+0x84>)
 8002054:	f000 fe1a 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	a0001000 	.word	0xa0001000
 8002064:	40021000 	.word	0x40021000
 8002068:	48001000 	.word	0x48001000

0800206c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_SPI_MspInit+0x8c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d130      	bne.n	80020f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_SPI_MspInit+0x90>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_SPI_MspInit+0x90>)
 8002094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_SPI_MspInit+0x90>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_SPI_MspInit+0x90>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_SPI_MspInit+0x90>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_SPI_MspInit+0x90>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80020be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020d0:	2306      	movs	r3, #6
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <HAL_SPI_MspInit+0x94>)
 80020dc:	f000 fdd6 	bl	8002c8c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2105      	movs	r1, #5
 80020e4:	2033      	movs	r0, #51	; 0x33
 80020e6:	f000 fc3e 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80020ea:	2033      	movs	r0, #51	; 0x33
 80020ec:	f000 fc57 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40003c00 	.word	0x40003c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	48000800 	.word	0x48000800

08002104 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_SPI_MspDeInit+0x38>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10d      	bne.n	8002132 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_SPI_MspDeInit+0x3c>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_SPI_MspDeInit+0x3c>)
 800211c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002120:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002122:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002126:	4807      	ldr	r0, [pc, #28]	; (8002144 <HAL_SPI_MspDeInit+0x40>)
 8002128:	f000 ff5a 	bl	8002fe0 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 800212c:	2033      	movs	r0, #51	; 0x33
 800212e:	f000 fc44 	bl	80029ba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40003c00 	.word	0x40003c00
 8002140:	40021000 	.word	0x40021000
 8002144:	48000800 	.word	0x48000800

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0ae      	sub	sp, #184	; 0xb8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2288      	movs	r2, #136	; 0x88
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f00e f9a7 	bl	80104bc <memset>
  if(huart->Instance==USART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <HAL_UART_MspInit+0x134>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d13b      	bne.n	80021f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800217c:	2300      	movs	r3, #0
 800217e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4618      	mov	r0, r3
 8002186:	f002 ff37 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002190:	f7ff fc74 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_UART_MspInit+0x138>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	4a39      	ldr	r2, [pc, #228]	; (8002280 <HAL_UART_MspInit+0x138>)
 800219a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219e:	6613      	str	r3, [r2, #96]	; 0x60
 80021a0:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_UART_MspInit+0x138>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_UART_MspInit+0x138>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	4a33      	ldr	r2, [pc, #204]	; (8002280 <HAL_UART_MspInit+0x138>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_UART_MspInit+0x138>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80021c4:	23c0      	movs	r3, #192	; 0xc0
 80021c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021dc:	2307      	movs	r3, #7
 80021de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4826      	ldr	r0, [pc, #152]	; (8002284 <HAL_UART_MspInit+0x13c>)
 80021ea:	f000 fd4f 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021ee:	e040      	b.n	8002272 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <HAL_UART_MspInit+0x140>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d13b      	bne.n	8002272 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021fa:	2304      	movs	r3, #4
 80021fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021fe:	2300      	movs	r3, #0
 8002200:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fef6 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002212:	f7ff fc33 	bl	8001a7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_UART_MspInit+0x138>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_UART_MspInit+0x138>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_UART_MspInit+0x138>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_UART_MspInit+0x138>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_UART_MspInit+0x138>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_UART_MspInit+0x138>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002260:	2307      	movs	r3, #7
 8002262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002266:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <HAL_UART_MspInit+0x144>)
 800226e:	f000 fd0d 	bl	8002c8c <HAL_GPIO_Init>
}
 8002272:	bf00      	nop
 8002274:	37b8      	adds	r7, #184	; 0xb8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40013800 	.word	0x40013800
 8002280:	40021000 	.word	0x40021000
 8002284:	48000400 	.word	0x48000400
 8002288:	40004800 	.word	0x40004800
 800228c:	48000c00 	.word	0x48000c00

08002290 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ac      	sub	sp, #176	; 0xb0
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2288      	movs	r2, #136	; 0x88
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00e f903 	bl	80104bc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022be:	d17c      	bne.n	80023ba <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80022c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80022d6:	2318      	movs	r3, #24
 80022d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80022da:	2307      	movs	r3, #7
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022de:	2302      	movs	r3, #2
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80022e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fe81 	bl	8004ff8 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80022fc:	f7ff fbbe 	bl	8001a7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	4a2f      	ldr	r2, [pc, #188]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002336:	f000 fca9 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800233a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800233e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002354:	230a      	movs	r3, #10
 8002356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f000 fc92 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 800236e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d114      	bne.n	80023b6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80023a4:	f001 ff5c 	bl	8004260 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_PCD_MspInit+0x134>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023b4:	e001      	b.n	80023ba <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80023b6:	f001 ff53 	bl	8004260 <HAL_PWREx_EnableVddUSB>
}
 80023ba:	bf00      	nop
 80023bc:	37b0      	adds	r7, #176	; 0xb0
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 f972 	bl	80026e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80023fc:	f00b fefc 	bl	800e1f8 <xTaskGetSchedulerState>
 8002400:	4603      	mov	r3, r0
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002406:	f00c fce7 	bl	800edd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}

0800240e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002412:	2002      	movs	r0, #2
 8002414:	f000 ff08 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002420:	2020      	movs	r0, #32
 8002422:	f000 ff01 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002426:	2040      	movs	r0, #64	; 0x40
 8002428:	f000 fefe 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800242c:	2080      	movs	r0, #128	; 0x80
 800242e:	f000 fefb 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002432:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002436:	f000 fef7 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}

0800243e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002442:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002446:	f000 feef 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800244a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800244e:	f000 feeb 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002452:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002456:	f000 fee7 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800245a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800245e:	f000 fee3 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002462:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002466:	f000 fedf 	bl	8003228 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}

0800246e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  return 1;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_kill>:

int _kill(int pid, int sig)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002488:	f00e f902 	bl	8010690 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	2216      	movs	r2, #22
 8002490:	601a      	str	r2, [r3, #0]
  return -1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_exit>:

void _exit (int status)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024a6:	f04f 31ff 	mov.w	r1, #4294967295
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffe7 	bl	800247e <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b0:	e7fe      	b.n	80024b0 <_exit+0x12>

080024b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e00a      	b.n	80024da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024c4:	f3af 8000 	nop.w
 80024c8:	4601      	mov	r1, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	b2ca      	uxtb	r2, r1
 80024d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf0      	blt.n	80024c4 <_read+0x12>
  }

  return len;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002514:	605a      	str	r2, [r3, #4]
  return 0;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_isatty>:

int _isatty(int file)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f00e f884 	bl	8010690 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20018000 	.word	0x20018000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	20000d68 	.word	0x20000d68
 80025bc:	20003a10 	.word	0x20003a10

080025c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <SystemInit+0x20>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <SystemInit+0x20>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800261c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025e8:	f7ff ffea 	bl	80025c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002612:	f00e f843 	bl	801069c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002616:	f7fe fd2f 	bl	8001078 <main>

0800261a <LoopForever>:

LoopForever:
    b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800261c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002628:	0801574c 	.word	0x0801574c
  ldr r2, =_sbss
 800262c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002630:	20003a10 	.word	0x20003a10

08002634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_2_IRQHandler>

08002636 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f985 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002646:	200f      	movs	r0, #15
 8002648:	f000 f80e 	bl	8002668 <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	e001      	b.n	800265c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002658:	f7ff fbb6 	bl	8001dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800265c:	79fb      	ldrb	r3, [r7, #7]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_InitTick+0x6c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_InitTick+0x70>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_InitTick+0x6c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f99f 	bl	80029d6 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d809      	bhi.n	80026b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 f95b 	bl	8002966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_InitTick+0x74>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e007      	b.n	80026c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e004      	b.n	80026c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e001      	b.n	80026c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000010 	.word	0x20000010
 80026d8:	20000008 	.word	0x20000008
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000010 	.word	0x20000010
 8002704:	20000d6c 	.word	0x20000d6c

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000d6c 	.word	0x20000d6c

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffde 	bl	8002708 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000010 	.word	0x20000010

08002768 <__NVIC_SetPriorityGrouping>:
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_DisableIRQ>:
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db12      	blt.n	8002840 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	490a      	ldr	r1, [pc, #40]	; (800284c <__NVIC_DisableIRQ+0x44>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	3320      	adds	r3, #32
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002834:	f3bf 8f4f 	dsb	sy
}
 8002838:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800283a:	f3bf 8f6f 	isb	sy
}
 800283e:	bf00      	nop
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff05 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff ff1a 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff8e 	bl	80028a4 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5d 	bl	8002850 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff0d 	bl	80027cc <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff1d 	bl	8002808 <__NVIC_DisableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ff94 	bl	800290c <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0ac      	b.n	8002b5c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f8b2 	bl	8002b70 <DFSDM_GetChannelFromInstance>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <HAL_DFSDM_ChannelInit+0x174>)
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e09f      	b.n	8002b5c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff f9fb 	bl	8001e18 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a22:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_DFSDM_ChannelInit+0x178>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a4f      	ldr	r2, [pc, #316]	; (8002b68 <HAL_DFSDM_ChannelInit+0x178>)
 8002a2a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a2c:	4b4e      	ldr	r3, [pc, #312]	; (8002b68 <HAL_DFSDM_ChannelInit+0x178>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d125      	bne.n	8002a80 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a34:	4b4d      	ldr	r3, [pc, #308]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a3e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a40:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4948      	ldr	r1, [pc, #288]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a54:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002a58:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	791b      	ldrb	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d108      	bne.n	8002a74 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002a62:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	493f      	ldr	r1, [pc, #252]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a7e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002a8e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a9e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002aa4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 020f 	bic.w	r2, r2, #15
 8002abc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ae4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f002 0207 	and.w	r2, r2, #7
 8002b10:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f810 	bl	8002b70 <DFSDM_GetChannelFromInstance>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4904      	ldr	r1, [pc, #16]	; (8002b64 <HAL_DFSDM_ChannelInit+0x174>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000d74 	.word	0x20000d74
 8002b68:	20000d70 	.word	0x20000d70
 8002b6c:	40016000 	.word	0x40016000

08002b70 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <DFSDM_GetChannelFromInstance+0x7c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e02b      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <DFSDM_GetChannelFromInstance+0x80>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d102      	bne.n	8002b94 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e024      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <DFSDM_GetChannelFromInstance+0x84>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d102      	bne.n	8002ba2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e01d      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <DFSDM_GetChannelFromInstance+0x88>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d102      	bne.n	8002bb0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002baa:	2304      	movs	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e016      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <DFSDM_GetChannelFromInstance+0x8c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002bb8:	2305      	movs	r3, #5
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e00f      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <DFSDM_GetChannelFromInstance+0x90>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d102      	bne.n	8002bcc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e008      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <DFSDM_GetChannelFromInstance+0x94>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d102      	bne.n	8002bda <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e001      	b.n	8002bde <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40016000 	.word	0x40016000
 8002bf0:	40016020 	.word	0x40016020
 8002bf4:	40016040 	.word	0x40016040
 8002bf8:	40016080 	.word	0x40016080
 8002bfc:	400160a0 	.word	0x400160a0
 8002c00:	400160c0 	.word	0x400160c0
 8002c04:	400160e0 	.word	0x400160e0

08002c08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d005      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2204      	movs	r2, #4
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	e029      	b.n	8002c80 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 020e 	bic.w	r2, r2, #14
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	f003 021c 	and.w	r2, r3, #28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
    }
  }
  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	e17f      	b.n	8002f9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8171 	beq.w	8002f96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d005      	beq.n	8002ccc <HAL_GPIO_Init+0x40>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d130      	bne.n	8002d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d02:	2201      	movs	r2, #1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 0201 	and.w	r2, r3, #1
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d118      	bne.n	8002d6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d40:	2201      	movs	r2, #1
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f003 0201 	and.w	r2, r3, #1
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d017      	beq.n	8002da8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d123      	bne.n	8002dfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	6939      	ldr	r1, [r7, #16]
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80ac 	beq.w	8002f96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	4b5f      	ldr	r3, [pc, #380]	; (8002fbc <HAL_GPIO_Init+0x330>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	4a5e      	ldr	r2, [pc, #376]	; (8002fbc <HAL_GPIO_Init+0x330>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4a:	4b5c      	ldr	r3, [pc, #368]	; (8002fbc <HAL_GPIO_Init+0x330>)
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e56:	4a5a      	ldr	r2, [pc, #360]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e80:	d025      	beq.n	8002ece <HAL_GPIO_Init+0x242>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <HAL_GPIO_Init+0x338>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01f      	beq.n	8002eca <HAL_GPIO_Init+0x23e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4e      	ldr	r2, [pc, #312]	; (8002fc8 <HAL_GPIO_Init+0x33c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <HAL_GPIO_Init+0x23a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4d      	ldr	r2, [pc, #308]	; (8002fcc <HAL_GPIO_Init+0x340>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_GPIO_Init+0x236>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4c      	ldr	r2, [pc, #304]	; (8002fd0 <HAL_GPIO_Init+0x344>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00d      	beq.n	8002ebe <HAL_GPIO_Init+0x232>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	; (8002fd4 <HAL_GPIO_Init+0x348>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <HAL_GPIO_Init+0x22e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <HAL_GPIO_Init+0x34c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_GPIO_Init+0x22a>
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	e00c      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	e00a      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002eba:	2305      	movs	r3, #5
 8002ebc:	e008      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e004      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_GPIO_Init+0x244>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	f002 0203 	and.w	r2, r2, #3
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4093      	lsls	r3, r2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ee0:	4937      	ldr	r1, [pc, #220]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f12:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f18:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f42:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_GPIO_Init+0x350>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f47f ae78 	bne.w	8002c9c <HAL_GPIO_Init+0x10>
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	48000800 	.word	0x48000800
 8002fcc:	48000c00 	.word	0x48000c00
 8002fd0:	48001000 	.word	0x48001000
 8002fd4:	48001400 	.word	0x48001400
 8002fd8:	48001800 	.word	0x48001800
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002fee:	e0cd      	b.n	800318c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80c0 	beq.w	8003186 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003006:	4a68      	ldr	r2, [pc, #416]	; (80031a8 <HAL_GPIO_DeInit+0x1c8>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800302e:	d025      	beq.n	800307c <HAL_GPIO_DeInit+0x9c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <HAL_GPIO_DeInit+0x1cc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d01f      	beq.n	8003078 <HAL_GPIO_DeInit+0x98>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a5d      	ldr	r2, [pc, #372]	; (80031b0 <HAL_GPIO_DeInit+0x1d0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d019      	beq.n	8003074 <HAL_GPIO_DeInit+0x94>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a5c      	ldr	r2, [pc, #368]	; (80031b4 <HAL_GPIO_DeInit+0x1d4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_GPIO_DeInit+0x90>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a5b      	ldr	r2, [pc, #364]	; (80031b8 <HAL_GPIO_DeInit+0x1d8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_DeInit+0x8c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a5a      	ldr	r2, [pc, #360]	; (80031bc <HAL_GPIO_DeInit+0x1dc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_DeInit+0x88>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_GPIO_DeInit+0x1e0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_DeInit+0x84>
 8003060:	2306      	movs	r3, #6
 8003062:	e00c      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 8003064:	2307      	movs	r3, #7
 8003066:	e00a      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 8003068:	2305      	movs	r3, #5
 800306a:	e008      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 800306c:	2304      	movs	r3, #4
 800306e:	e006      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 8003070:	2303      	movs	r3, #3
 8003072:	e004      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 8003074:	2302      	movs	r3, #2
 8003076:	e002      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_GPIO_DeInit+0x9e>
 800307c:	2300      	movs	r3, #0
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	f002 0203 	and.w	r2, r2, #3
 8003084:	0092      	lsls	r2, r2, #2
 8003086:	4093      	lsls	r3, r2
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	429a      	cmp	r2, r3
 800308c:	d132      	bne.n	80030f4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800308e:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	43db      	mvns	r3, r3
 8003096:	494b      	ldr	r1, [pc, #300]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 8003098:	4013      	ands	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800309c:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	4947      	ldr	r1, [pc, #284]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	4944      	ldr	r1, [pc, #272]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80030b8:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	43db      	mvns	r3, r3
 80030c0:	4940      	ldr	r1, [pc, #256]	; (80031c4 <HAL_GPIO_DeInit+0x1e4>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	220f      	movs	r2, #15
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80030d6:	4a34      	ldr	r2, [pc, #208]	; (80031a8 <HAL_GPIO_DeInit+0x1c8>)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	3302      	adds	r3, #2
 80030de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	4830      	ldr	r0, [pc, #192]	; (80031a8 <HAL_GPIO_DeInit+0x1c8>)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	400a      	ands	r2, r1
 80030ee:	3302      	adds	r3, #2
 80030f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2103      	movs	r1, #3
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	220f      	movs	r2, #15
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	08d2      	lsrs	r2, r2, #3
 8003128:	4019      	ands	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2103      	movs	r1, #3
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	401a      	ands	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	2101      	movs	r1, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2103      	movs	r1, #3
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	401a      	ands	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003176:	2101      	movs	r1, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	f47f af2b 	bne.w	8002ff0 <HAL_GPIO_DeInit+0x10>
  }
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40010000 	.word	0x40010000
 80031ac:	48000400 	.word	0x48000400
 80031b0:	48000800 	.word	0x48000800
 80031b4:	48000c00 	.word	0x48000c00
 80031b8:	48001000 	.word	0x48001000
 80031bc:	48001400 	.word	0x48001400
 80031c0:	48001800 	.word	0x48001800
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e001      	b.n	80031ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
 8003204:	4613      	mov	r3, r2
 8003206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003214:	e002      	b.n	800321c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fbf2 	bl	8001a30 <HAL_GPIO_EXTI_Callback>
  }
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e08d      	b.n	8003386 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fe2e 	bl	8001ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	; 0x24
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	e006      	b.n	80032e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d108      	bne.n	80032fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	e007      	b.n	800330a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69d9      	ldr	r1, [r3, #28]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e021      	b.n	80033e4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fe fdef 	bl	8001f9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 80f9 	bne.w	8003606 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_I2C_Mem_Write+0x34>
 800341a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0ed      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2C_Mem_Write+0x4e>
 8003436:	2302      	movs	r3, #2
 8003438:	e0e6      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003442:	f7ff f961 	bl	8002708 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2319      	movs	r3, #25
 800344e:	2201      	movs	r2, #1
 8003450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fac3 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d1      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	; 0x21
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800348c:	88f8      	ldrh	r0, [r7, #6]
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4603      	mov	r3, r0
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f9d3 	bl	8003848 <I2C_RequestMemoryWrite>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0a9      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2bff      	cmp	r3, #255	; 0xff
 80034bc:	d90e      	bls.n	80034dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	2300      	movs	r3, #0
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fc3d 	bl	8003d54 <I2C_TransferConfig>
 80034da:	e00f      	b.n	80034fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	8979      	ldrh	r1, [r7, #10]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fc2c 	bl	8003d54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fabc 	bl	8003a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e07b      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d034      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x1c8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d130      	bne.n	80035b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	; 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fa3f 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e04d      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d90e      	bls.n	8003594 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	b2da      	uxtb	r2, r3
 8003582:	8979      	ldrh	r1, [r7, #10]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fbe1 	bl	8003d54 <I2C_TransferConfig>
 8003592:	e00f      	b.n	80035b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fbd0 	bl	8003d54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d19e      	bne.n	80034fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 faa2 	bl	8003b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e01a      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2220      	movs	r2, #32
 80035d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_I2C_Mem_Write+0x224>)
 80035e6:	400b      	ands	r3, r1
 80035e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	fe00e800 	.word	0xfe00e800

08003614 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	f040 80fd 	bne.w	8003836 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_I2C_Mem_Read+0x34>
 8003642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0f1      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Mem_Read+0x4e>
 800365e:	2302      	movs	r3, #2
 8003660:	e0ea      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800366a:	f7ff f84d 	bl	8002708 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2319      	movs	r3, #25
 8003676:	2201      	movs	r2, #1
 8003678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f9af 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0d5      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2222      	movs	r2, #34	; 0x22
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b4:	88f8      	ldrh	r0, [r7, #6]
 80036b6:	893a      	ldrh	r2, [r7, #8]
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4603      	mov	r3, r0
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f913 	bl	80038f0 <I2C_RequestMemoryRead>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0ad      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2bff      	cmp	r3, #255	; 0xff
 80036e4:	d90e      	bls.n	8003704 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_I2C_Mem_Read+0x22c>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fb29 	bl	8003d54 <I2C_TransferConfig>
 8003702:	e00f      	b.n	8003724 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	b2da      	uxtb	r2, r3
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_I2C_Mem_Read+0x22c>)
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb18 	bl	8003d54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	2200      	movs	r2, #0
 800372c:	2104      	movs	r1, #4
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f956 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07c      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d034      	beq.n	80037e4 <HAL_I2C_Mem_Read+0x1d0>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	2b00      	cmp	r3, #0
 8003780:	d130      	bne.n	80037e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2200      	movs	r2, #0
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f927 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e04d      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2bff      	cmp	r3, #255	; 0xff
 80037a4:	d90e      	bls.n	80037c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	2300      	movs	r3, #0
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fac9 	bl	8003d54 <I2C_TransferConfig>
 80037c2:	e00f      	b.n	80037e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fab8 	bl	8003d54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d19a      	bne.n	8003724 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f98a 	bl	8003b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e01a      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_I2C_Mem_Read+0x230>)
 8003816:	400b      	ands	r3, r1
 8003818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	80002400 	.word	0x80002400
 8003844:	fe00e800 	.word	0xfe00e800

08003848 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <I2C_RequestMemoryWrite+0xa4>)
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa6f 	bl	8003d54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f8ff 	bl	8003a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02c      	b.n	80038e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
 800389a:	e015      	b.n	80038c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8e5 	bl	8003a7e <I2C_WaitOnTXISFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e012      	b.n	80038e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038be:	893b      	ldrh	r3, [r7, #8]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f884 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	80002000 	.word	0x80002000

080038f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <I2C_RequestMemoryRead+0xa4>)
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa1c 	bl	8003d54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f8ac 	bl	8003a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e02c      	b.n	800398a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
 8003940:	e015      	b.n	800396e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	b29b      	uxth	r3, r3
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f892 	bl	8003a7e <I2C_WaitOnTXISFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e012      	b.n	800398a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003964:	893b      	ldrh	r3, [r7, #8]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2200      	movs	r2, #0
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f831 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	80002000 	.word	0x80002000

08003998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d103      	bne.n	80039b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d007      	beq.n	80039d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	619a      	str	r2, [r3, #24]
  }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f0:	e031      	b.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d02d      	beq.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7fe fe85 	bl	8002708 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d122      	bne.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d113      	bne.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00f      	b.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d0be      	beq.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a8a:	e033      	b.n	8003af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f87f 	bl	8003b94 <I2C_IsErrorOccurred>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e031      	b.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d025      	beq.n	8003af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa8:	f7fe fe2e 	bl	8002708 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d11a      	bne.n	8003af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d013      	beq.n	8003af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e007      	b.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d1c4      	bne.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b18:	e02f      	b.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f838 	bl	8003b94 <I2C_IsErrorOccurred>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e02d      	b.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2e:	f7fe fdeb 	bl	8002708 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11a      	bne.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d013      	beq.n	8003b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e007      	b.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d1c8      	bne.n	8003b1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d068      	beq.n	8003c92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bc8:	e049      	b.n	8003c5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d045      	beq.n	8003c5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fd99 	bl	8002708 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_IsErrorOccurred+0x54>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d13a      	bne.n	8003c5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0a:	d121      	bne.n	8003c50 <I2C_IsErrorOccurred+0xbc>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c12:	d01d      	beq.n	8003c50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d01a      	beq.n	8003c50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c2a:	f7fe fd6d 	bl	8002708 <HAL_GetTick>
 8003c2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c30:	e00e      	b.n	8003c50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c32:	f7fe fd69 	bl	8002708 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b19      	cmp	r3, #25
 8003c3e:	d907      	bls.n	8003c50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f043 0320 	orr.w	r3, r3, #32
 8003c46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c4e:	e006      	b.n	8003c5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d1e9      	bne.n	8003c32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d003      	beq.n	8003c74 <I2C_IsErrorOccurred+0xe0>
 8003c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0aa      	beq.n	8003bca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d103      	bne.n	8003c84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f043 0308 	orr.w	r3, r3, #8
 8003ccc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	f043 0302 	orr.w	r3, r3, #2
 8003cee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01c      	beq.n	8003d42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fe45 	bl	8003998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <I2C_IsErrorOccurred+0x1bc>)
 8003d1a:	400b      	ands	r3, r1
 8003d1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3728      	adds	r7, #40	; 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	4613      	mov	r3, r2
 8003d64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d6c:	7a7b      	ldrb	r3, [r7, #9]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	0d5b      	lsrs	r3, r3, #21
 8003d8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <I2C_TransferConfig+0x60>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	43db      	mvns	r3, r3
 8003d98:	ea02 0103 	and.w	r1, r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	03ff63ff 	.word	0x03ff63ff

08003db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d138      	bne.n	8003e40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e032      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d139      	bne.n	8003ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e033      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	; 0x24
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ea0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee8:	b08f      	sub	sp, #60	; 0x3c
 8003eea:	af0a      	add	r7, sp, #40	; 0x28
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e116      	b.n	8004126 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe f9bc 	bl	8002290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fda7 	bl	8007a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	687e      	ldr	r6, [r7, #4]
 8003f44:	466d      	mov	r5, sp
 8003f46:	f106 0410 	add.w	r4, r6, #16
 8003f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5a:	1d33      	adds	r3, r6, #4
 8003f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f003 fd67 	bl	8007a32 <USB_CoreInit>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0d7      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 fd95 	bl	8007aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e04a      	b.n	800401e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	333d      	adds	r3, #61	; 0x3d
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	b298      	uxth	r0, r3
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3356      	adds	r3, #86	; 0x56
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3340      	adds	r3, #64	; 0x40
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3344      	adds	r3, #68	; 0x44
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3348      	adds	r3, #72	; 0x48
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	334c      	adds	r3, #76	; 0x4c
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	3301      	adds	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d3af      	bcc.n	8003f88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e044      	b.n	80040b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	3301      	adds	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	7bfa      	ldrb	r2, [r7, #15]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3b5      	bcc.n	800402e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	687e      	ldr	r6, [r7, #4]
 80040ca:	466d      	mov	r5, sp
 80040cc:	f106 0410 	add.w	r4, r6, #16
 80040d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e0:	1d33      	adds	r3, r6, #4
 80040e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f003 fd2d 	bl	8007b44 <USB_DevInit>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e014      	b.n	8004126 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f80a 	bl	800412e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f003 fecf 	bl	8007ec2 <USB_DevDisconnect>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800412e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	f043 0303 	orr.w	r3, r3, #3
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000

080041b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c2:	d130      	bne.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c4:	4b23      	ldr	r3, [pc, #140]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d0:	d038      	beq.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2232      	movs	r2, #50	; 0x32
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	0c9b      	lsrs	r3, r3, #18
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f8:	e002      	b.n	8004200 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d102      	bne.n	8004214 <HAL_PWREx_ControlVoltageScaling+0x60>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f2      	bne.n	80041fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004220:	d110      	bne.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e00f      	b.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	d007      	beq.n	8004244 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004234:	4b07      	ldr	r3, [pc, #28]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423c:	4a05      	ldr	r2, [pc, #20]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004242:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40007000 	.word	0x40007000
 8004258:	20000008 	.word	0x20000008
 800425c:	431bde83 	.word	0x431bde83

08004260 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_PWREx_EnableVddUSB+0x1c>)
 800426a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426e:	6053      	str	r3, [r2, #4]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40007000 	.word	0x40007000

08004280 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004288:	f7fe fa3e 	bl	8002708 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e063      	b.n	8004360 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fd fe99 	bl	8001fe4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f858 	bl	800436c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	2120      	movs	r1, #32
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f850 	bl	8004388 <QSPI_WaitFlagStateUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d131      	bne.n	8004356 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6852      	ldr	r2, [r2, #4]
 8004304:	0611      	lsls	r1, r2, #24
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_QSPI_Init+0xe8>)
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6912      	ldr	r2, [r2, #16]
 8004322:	0411      	lsls	r1, r2, #16
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6952      	ldr	r2, [r2, #20]
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6992      	ldr	r2, [r2, #24]
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	430b      	orrs	r3, r1
 8004336:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800435e:	7afb      	ldrb	r3, [r7, #11]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	ffe0f8fe 	.word	0xffe0f8fe

0800436c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004398:	e01a      	b.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d016      	beq.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7fe f9b1 	bl	8002708 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2204      	movs	r2, #4
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e00e      	b.n	80043ee <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1d6      	bne.n	800439a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e3ca      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4b97      	ldr	r3, [pc, #604]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004414:	4b94      	ldr	r3, [pc, #592]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80e4 	beq.w	80045f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_RCC_OscConfig+0x4a>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	f040 808b 	bne.w	8004550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 8087 	bne.w	8004550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004442:	4b89      	ldr	r3, [pc, #548]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x62>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e3a2      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	4b82      	ldr	r3, [pc, #520]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_RCC_OscConfig+0x7c>
 800446a:	4b7f      	ldr	r3, [pc, #508]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004472:	e005      	b.n	8004480 <HAL_RCC_OscConfig+0x88>
 8004474:	4b7c      	ldr	r3, [pc, #496]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	4293      	cmp	r3, r2
 8004482:	d223      	bcs.n	80044cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd55 	bl	8004f38 <RCC_SetFlashLatencyFromMSIRange>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e383      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004498:	4b73      	ldr	r3, [pc, #460]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a72      	ldr	r2, [pc, #456]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b70      	ldr	r3, [pc, #448]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	496d      	ldr	r1, [pc, #436]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b6:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	4968      	ldr	r1, [pc, #416]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
 80044ca:	e025      	b.n	8004518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044cc:	4b66      	ldr	r3, [pc, #408]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a65      	ldr	r2, [pc, #404]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044d2:	f043 0308 	orr.w	r3, r3, #8
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b63      	ldr	r3, [pc, #396]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4960      	ldr	r1, [pc, #384]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ea:	4b5f      	ldr	r3, [pc, #380]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	495b      	ldr	r1, [pc, #364]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fd15 	bl	8004f38 <RCC_SetFlashLatencyFromMSIRange>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e343      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004518:	f000 fc4a 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b52      	ldr	r3, [pc, #328]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	4950      	ldr	r1, [pc, #320]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	4a4e      	ldr	r2, [pc, #312]	; (8004670 <HAL_RCC_OscConfig+0x278>)
 8004536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004538:	4b4e      	ldr	r3, [pc, #312]	; (8004674 <HAL_RCC_OscConfig+0x27c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fe f893 	bl	8002668 <HAL_InitTick>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d052      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	e327      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d032      	beq.n	80045be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a42      	ldr	r2, [pc, #264]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004564:	f7fe f8d0 	bl	8002708 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800456c:	f7fe f8cc 	bl	8002708 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e310      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a36      	ldr	r2, [pc, #216]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4931      	ldr	r1, [pc, #196]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a8:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	492c      	ldr	r1, [pc, #176]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	e01a      	b.n	80045f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a29      	ldr	r2, [pc, #164]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ca:	f7fe f89d 	bl	8002708 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d2:	f7fe f899 	bl	8002708 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e2dd      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x1da>
 80045f0:	e000      	b.n	80045f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d074      	beq.n	80046ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b08      	cmp	r3, #8
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x21a>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b0c      	cmp	r3, #12
 800460a:	d10e      	bne.n	800462a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d10b      	bne.n	800462a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d064      	beq.n	80046e8 <HAL_RCC_OscConfig+0x2f0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d160      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e2ba      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x24a>
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800463a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e026      	b.n	8004690 <HAL_RCC_OscConfig+0x298>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464a:	d115      	bne.n	8004678 <HAL_RCC_OscConfig+0x280>
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a05      	ldr	r2, [pc, #20]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 8004652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a02      	ldr	r2, [pc, #8]	; (8004668 <HAL_RCC_OscConfig+0x270>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e014      	b.n	8004690 <HAL_RCC_OscConfig+0x298>
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000
 800466c:	08015074 	.word	0x08015074
 8004670:	20000008 	.word	0x20000008
 8004674:	2000000c 	.word	0x2000000c
 8004678:	4ba0      	ldr	r3, [pc, #640]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a9f      	ldr	r2, [pc, #636]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b9d      	ldr	r3, [pc, #628]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a9c      	ldr	r2, [pc, #624]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe f836 	bl	8002708 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7fe f832 	bl	8002708 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e276      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b2:	4b92      	ldr	r3, [pc, #584]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2a8>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe f822 	bl	8002708 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c8:	f7fe f81e 	bl	8002708 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e262      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046da:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2d0>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d060      	beq.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x310>
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d119      	bne.n	8004736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d116      	bne.n	8004736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004708:	4b7c      	ldr	r3, [pc, #496]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x328>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e23f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b76      	ldr	r3, [pc, #472]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	4973      	ldr	r1, [pc, #460]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004734:	e040      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d023      	beq.n	8004786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473e:	4b6f      	ldr	r3, [pc, #444]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd ffdd 	bl	8002708 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd ffd9 	bl	8002708 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e21d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004764:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	495f      	ldr	r1, [pc, #380]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e018      	b.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004786:	4b5d      	ldr	r3, [pc, #372]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a5c      	ldr	r2, [pc, #368]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800478c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd ffb9 	bl	8002708 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fd ffb5 	bl	8002708 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1f9      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03c      	beq.n	800483e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01c      	beq.n	8004806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047cc:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	4a4a      	ldr	r2, [pc, #296]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fd ff94 	bl	8002708 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fd ff90 	bl	8002708 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e1d4      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047f6:	4b41      	ldr	r3, [pc, #260]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80047f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ef      	beq.n	80047e4 <HAL_RCC_OscConfig+0x3ec>
 8004804:	e01b      	b.n	800483e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004806:	4b3d      	ldr	r3, [pc, #244]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480c:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fd ff77 	bl	8002708 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481e:	f7fd ff73 	bl	8002708 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1b7      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004830:	4b32      	ldr	r3, [pc, #200]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ef      	bne.n	800481e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80a6 	beq.w	8004998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004850:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 8004862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004866:	6593      	str	r3, [r2, #88]	; 0x58
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d118      	bne.n	80048b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004890:	f7fd ff3a 	bl	8002708 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fd ff36 	bl	8002708 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e17a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x508>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d108      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4d8>
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ce:	e029      	b.n	8004924 <HAL_RCC_OscConfig+0x52c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d115      	bne.n	8004904 <HAL_RCC_OscConfig+0x50c>
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a03      	ldr	r2, [pc, #12]	; (80048fc <HAL_RCC_OscConfig+0x504>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f8:	e014      	b.n	8004924 <HAL_RCC_OscConfig+0x52c>
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	40007000 	.word	0x40007000
 8004904:	4b9c      	ldr	r3, [pc, #624]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	4a9b      	ldr	r2, [pc, #620]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004914:	4b98      	ldr	r3, [pc, #608]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	4a97      	ldr	r2, [pc, #604]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d016      	beq.n	800495a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fd feec 	bl	8002708 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fd fee8 	bl	8002708 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e12a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494a:	4b8b      	ldr	r3, [pc, #556]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ed      	beq.n	8004934 <HAL_RCC_OscConfig+0x53c>
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fd fed5 	bl	8002708 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fd fed1 	bl	8002708 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e113      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004978:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ed      	bne.n	8004962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498c:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	4a79      	ldr	r2, [pc, #484]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004996:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80fe 	beq.w	8004b9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	f040 80d0 	bne.w	8004b4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ac:	4b72      	ldr	r3, [pc, #456]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0203 	and.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d130      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d127      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d11f      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ec:	2a07      	cmp	r2, #7
 80049ee:	bf14      	ite	ne
 80049f0:	2201      	movne	r2, #1
 80049f2:	2200      	moveq	r2, #0
 80049f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d113      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	3b01      	subs	r3, #1
 8004a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d06e      	beq.n	8004b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	d069      	beq.n	8004afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0ad      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a44:	4b4c      	ldr	r3, [pc, #304]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a4b      	ldr	r2, [pc, #300]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a50:	f7fd fe5a 	bl	8002708 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd fe56 	bl	8002708 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e09a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6a:	4b43      	ldr	r3, [pc, #268]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a76:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <HAL_RCC_OscConfig+0x784>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0112      	lsls	r2, r2, #4
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a90:	0212      	lsls	r2, r2, #8
 8004a92:	4311      	orrs	r1, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a98:	0852      	lsrs	r2, r2, #1
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	0552      	lsls	r2, r2, #21
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aa4:	0852      	lsrs	r2, r2, #1
 8004aa6:	3a01      	subs	r2, #1
 8004aa8:	0652      	lsls	r2, r2, #25
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab0:	0912      	lsrs	r2, r2, #4
 8004ab2:	0452      	lsls	r2, r2, #17
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	4930      	ldr	r1, [pc, #192]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004abc:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad4:	f7fd fe18 	bl	8002708 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd fe14 	bl	8002708 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e058      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afa:	e050      	b.n	8004b9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b00:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d148      	bne.n	8004b9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b18:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b24:	f7fd fdf0 	bl	8002708 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fd fdec 	bl	8002708 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e030      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x734>
 8004b4a:	e028      	b.n	8004b9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d023      	beq.n	8004b9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <HAL_RCC_OscConfig+0x780>)
 8004b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd fdd3 	bl	8002708 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b64:	e00c      	b.n	8004b80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fd fdcf 	bl	8002708 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d905      	bls.n	8004b80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e013      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCC_OscConfig+0x7b0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ec      	bne.n	8004b66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_OscConfig+0x7b0>)
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	4905      	ldr	r1, [pc, #20]	; (8004ba8 <HAL_RCC_OscConfig+0x7b0>)
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_OscConfig+0x7b4>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	60cb      	str	r3, [r1, #12]
 8004b98:	e001      	b.n	8004b9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	feeefffc 	.word	0xfeeefffc

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0e7      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b75      	ldr	r3, [pc, #468]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d910      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b72      	ldr	r3, [pc, #456]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 0207 	bic.w	r2, r3, #7
 8004bda:	4970      	ldr	r1, [pc, #448]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	4b6e      	ldr	r3, [pc, #440]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0cf      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b66      	ldr	r3, [pc, #408]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d908      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c10:	4b63      	ldr	r3, [pc, #396]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4960      	ldr	r1, [pc, #384]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d04c      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c36:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d121      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0a6      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4e:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d115      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e09a      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c66:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e08e      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c76:	4b4a      	ldr	r3, [pc, #296]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e086      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b46      	ldr	r3, [pc, #280]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4943      	ldr	r1, [pc, #268]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fd fd36 	bl	8002708 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd fd32 	bl	8002708 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e06e      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d208      	bcs.n	8004cf6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	492b      	ldr	r1, [pc, #172]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf6:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d210      	bcs.n	8004d26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 0207 	bic.w	r2, r3, #7
 8004d0c:	4923      	ldr	r1, [pc, #140]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d14:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <HAL_RCC_ClockConfig+0x1ec>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d001      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e036      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d32:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4918      	ldr	r1, [pc, #96]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4910      	ldr	r1, [pc, #64]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d64:	f000 f824 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	490b      	ldr	r1, [pc, #44]	; (8004da4 <HAL_RCC_ClockConfig+0x1f4>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d80:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <HAL_RCC_ClockConfig+0x1f8>)
 8004d82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_ClockConfig+0x1fc>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fd fc6d 	bl	8002668 <HAL_InitTick>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d92:	7afb      	ldrb	r3, [r7, #11]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40022000 	.word	0x40022000
 8004da0:	40021000 	.word	0x40021000
 8004da4:	08015074 	.word	0x08015074
 8004da8:	20000008 	.word	0x20000008
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d121      	bne.n	8004e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d11e      	bne.n	8004e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004de4:	4b34      	ldr	r3, [pc, #208]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e005      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e00:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d102      	bne.n	8004e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e004      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e34:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d134      	bne.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d003      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0xac>
 8004e54:	e005      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e58:	617b      	str	r3, [r7, #20]
      break;
 8004e5a:	e005      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e5e:	617b      	str	r3, [r7, #20]
      break;
 8004e60:	e002      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	617b      	str	r3, [r7, #20]
      break;
 8004e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	3301      	adds	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	fb03 f202 	mul.w	r2, r3, r2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	0e5b      	lsrs	r3, r3, #25
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	3301      	adds	r3, #1
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3724      	adds	r7, #36	; 0x24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	0801508c 	.word	0x0801508c
 8004ec0:	00f42400 	.word	0x00f42400
 8004ec4:	007a1200 	.word	0x007a1200

08004ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ece:	681b      	ldr	r3, [r3, #0]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000008 	.word	0x20000008

08004ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ee4:	f7ff fff0 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4904      	ldr	r1, [pc, #16]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ef6:	5ccb      	ldrb	r3, [r1, r3]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000
 8004f08:	08015084 	.word	0x08015084

08004f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f10:	f7ff ffda 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0adb      	lsrs	r3, r3, #11
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4904      	ldr	r1, [pc, #16]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f22:	5ccb      	ldrb	r3, [r1, r3]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	08015084 	.word	0x08015084

08004f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f50:	f7ff f922 	bl	8004198 <HAL_PWREx_GetVoltageRange>
 8004f54:	6178      	str	r0, [r7, #20]
 8004f56:	e014      	b.n	8004f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	4a24      	ldr	r2, [pc, #144]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f62:	6593      	str	r3, [r2, #88]	; 0x58
 8004f64:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f70:	f7ff f912 	bl	8004198 <HAL_PWREx_GetVoltageRange>
 8004f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f76:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f88:	d10b      	bne.n	8004fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d919      	bls.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2ba0      	cmp	r3, #160	; 0xa0
 8004f94:	d902      	bls.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f96:	2302      	movs	r3, #2
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e013      	b.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	e010      	b.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d902      	bls.n	8004fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fa8:	2303      	movs	r3, #3
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	e00a      	b.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b80      	cmp	r3, #128	; 0x80
 8004fb2:	d102      	bne.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	e004      	b.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d101      	bne.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 0207 	bic.w	r2, r3, #7
 8004fcc:	4909      	ldr	r1, [pc, #36]	; (8004ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40022000 	.word	0x40022000

08004ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005000:	2300      	movs	r3, #0
 8005002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005004:	2300      	movs	r3, #0
 8005006:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005010:	2b00      	cmp	r3, #0
 8005012:	d041      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800501c:	d02a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800501e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005022:	d824      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005028:	d008      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800502a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800502e:	d81e      	bhi.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005038:	d010      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800503a:	e018      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800503c:	4b86      	ldr	r3, [pc, #536]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a85      	ldr	r2, [pc, #532]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005046:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005048:	e015      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3304      	adds	r3, #4
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f000 facb 	bl	80055ec <RCCEx_PLLSAI1_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800505a:	e00c      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3320      	adds	r3, #32
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fbb6 	bl	80057d4 <RCCEx_PLLSAI2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800506c:	e003      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	74fb      	strb	r3, [r7, #19]
      break;
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005076:	7cfb      	ldrb	r3, [r7, #19]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800507c:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508a:	4973      	ldr	r1, [pc, #460]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005092:	e001      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d041      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ac:	d02a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050b2:	d824      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050b8:	d008      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050be:	d81e      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c8:	d010      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050ca:	e018      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050cc:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a61      	ldr	r2, [pc, #388]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050d8:	e015      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	2100      	movs	r1, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fa83 	bl	80055ec <RCCEx_PLLSAI1_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ea:	e00c      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3320      	adds	r3, #32
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fb6e 	bl	80057d4 <RCCEx_PLLSAI2_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	74fb      	strb	r3, [r7, #19]
      break;
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005106:	7cfb      	ldrb	r3, [r7, #19]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800510c:	4b52      	ldr	r3, [pc, #328]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800511a:	494f      	ldr	r1, [pc, #316]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005122:	e001      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a0 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005150:	4b41      	ldr	r3, [pc, #260]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	4a40      	ldr	r2, [pc, #256]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515a:	6593      	str	r3, [r2, #88]	; 0x58
 800515c:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005168:	2301      	movs	r3, #1
 800516a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800516c:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3a      	ldr	r2, [pc, #232]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005178:	f7fd fac6 	bl	8002708 <HAL_GetTick>
 800517c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800517e:	e009      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005180:	f7fd fac2 	bl	8002708 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d902      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	74fb      	strb	r3, [r7, #19]
        break;
 8005192:	e005      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005194:	4b31      	ldr	r3, [pc, #196]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ef      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d15c      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051a6:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01f      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d019      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051c4:	4b24      	ldr	r3, [pc, #144]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051d0:	4b21      	ldr	r3, [pc, #132]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	4a20      	ldr	r2, [pc, #128]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fd fa81 	bl	8002708 <HAL_GetTick>
 8005206:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005208:	e00b      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fd fa7d 	bl	8002708 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d902      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	74fb      	strb	r3, [r7, #19]
            break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ec      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005246:	4904      	ldr	r1, [pc, #16]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800524e:	e009      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	74bb      	strb	r3, [r7, #18]
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005260:	7cfb      	ldrb	r3, [r7, #19]
 8005262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005264:	7c7b      	ldrb	r3, [r7, #17]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d105      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800526a:	4b9e      	ldr	r3, [pc, #632]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526e:	4a9d      	ldr	r2, [pc, #628]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005282:	4b98      	ldr	r3, [pc, #608]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f023 0203 	bic.w	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	4994      	ldr	r1, [pc, #592]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a4:	4b8f      	ldr	r3, [pc, #572]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f023 020c 	bic.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	498c      	ldr	r1, [pc, #560]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052c6:	4b87      	ldr	r3, [pc, #540]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	4983      	ldr	r1, [pc, #524]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052e8:	4b7e      	ldr	r3, [pc, #504]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	497b      	ldr	r1, [pc, #492]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800530a:	4b76      	ldr	r3, [pc, #472]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005318:	4972      	ldr	r1, [pc, #456]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800532c:	4b6d      	ldr	r3, [pc, #436]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	496a      	ldr	r1, [pc, #424]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800534e:	4b65      	ldr	r3, [pc, #404]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535c:	4961      	ldr	r1, [pc, #388]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005370:	4b5c      	ldr	r3, [pc, #368]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537e:	4959      	ldr	r1, [pc, #356]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a0:	4950      	ldr	r1, [pc, #320]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053b4:	4b4b      	ldr	r3, [pc, #300]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	4948      	ldr	r1, [pc, #288]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053d6:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	493f      	ldr	r1, [pc, #252]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d028      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f8:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005406:	4937      	ldr	r1, [pc, #220]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005416:	d106      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005418:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005422:	60d3      	str	r3, [r2, #12]
 8005424:	e011      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800542e:	d10c      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f8d8 	bl	80055ec <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d028      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005456:	4b23      	ldr	r3, [pc, #140]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	491f      	ldr	r1, [pc, #124]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005474:	d106      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005480:	60d3      	str	r3, [r2, #12]
 8005482:	e011      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f8a9 	bl	80055ec <RCCEx_PLLSAI1_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d02b      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c2:	4908      	ldr	r1, [pc, #32]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054d2:	d109      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4a02      	ldr	r2, [pc, #8]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054de:	60d3      	str	r3, [r2, #12]
 80054e0:	e014      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f877 	bl	80055ec <RCCEx_PLLSAI1_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005526:	4928      	ldr	r1, [pc, #160]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005536:	d10d      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f854 	bl	80055ec <RCCEx_PLLSAI1_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d014      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800554e:	7cfb      	ldrb	r3, [r7, #19]
 8005550:	74bb      	strb	r3, [r7, #18]
 8005552:	e011      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555c:	d10c      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3320      	adds	r3, #32
 8005562:	2102      	movs	r1, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f000 f935 	bl	80057d4 <RCCEx_PLLSAI2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005584:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005592:	490d      	ldr	r1, [pc, #52]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b6:	4904      	ldr	r1, [pc, #16]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055be:	7cbb      	ldrb	r3, [r7, #18]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000

080055cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055d6:	f043 0304 	orr.w	r3, r3, #4
 80055da:	6013      	str	r3, [r2, #0]
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000

080055ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055fa:	4b75      	ldr	r3, [pc, #468]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d018      	beq.n	8005638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005606:	4b72      	ldr	r3, [pc, #456]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0203 	and.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d10d      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
       ||
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800561e:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
       ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d047      	beq.n	80056c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
 8005636:	e044      	b.n	80056c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d018      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0x86>
 8005640:	2b03      	cmp	r3, #3
 8005642:	d825      	bhi.n	8005690 <RCCEx_PLLSAI1_Config+0xa4>
 8005644:	2b01      	cmp	r3, #1
 8005646:	d002      	beq.n	800564e <RCCEx_PLLSAI1_Config+0x62>
 8005648:	2b02      	cmp	r3, #2
 800564a:	d009      	beq.n	8005660 <RCCEx_PLLSAI1_Config+0x74>
 800564c:	e020      	b.n	8005690 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800564e:	4b60      	ldr	r3, [pc, #384]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d11d      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565e:	e01a      	b.n	8005696 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005660:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005670:	e013      	b.n	800569a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005672:	4b57      	ldr	r3, [pc, #348]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800567e:	4b54      	ldr	r3, [pc, #336]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800568e:	e006      	b.n	800569e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      break;
 8005694:	e004      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800569e:	bf00      	nop
    }

    if(status == HAL_OK)
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056a6:	4b4a      	ldr	r3, [pc, #296]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6819      	ldr	r1, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	430b      	orrs	r3, r1
 80056bc:	4944      	ldr	r1, [pc, #272]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d17d      	bne.n	80057c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056c8:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a40      	ldr	r2, [pc, #256]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d4:	f7fd f818 	bl	8002708 <HAL_GetTick>
 80056d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056da:	e009      	b.n	80056f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056dc:	f7fd f814 	bl	8002708 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d902      	bls.n	80056f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	73fb      	strb	r3, [r7, #15]
        break;
 80056ee:	e005      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056f0:	4b37      	ldr	r3, [pc, #220]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ef      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d160      	bne.n	80057c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6892      	ldr	r2, [r2, #8]
 8005718:	0211      	lsls	r1, r2, #8
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68d2      	ldr	r2, [r2, #12]
 800571e:	0912      	lsrs	r2, r2, #4
 8005720:	0452      	lsls	r2, r2, #17
 8005722:	430a      	orrs	r2, r1
 8005724:	492a      	ldr	r1, [pc, #168]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005726:	4313      	orrs	r3, r2
 8005728:	610b      	str	r3, [r1, #16]
 800572a:	e027      	b.n	800577c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d112      	bne.n	8005758 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005732:	4b27      	ldr	r3, [pc, #156]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800573a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6892      	ldr	r2, [r2, #8]
 8005742:	0211      	lsls	r1, r2, #8
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6912      	ldr	r2, [r2, #16]
 8005748:	0852      	lsrs	r2, r2, #1
 800574a:	3a01      	subs	r2, #1
 800574c:	0552      	lsls	r2, r2, #21
 800574e:	430a      	orrs	r2, r1
 8005750:	491f      	ldr	r1, [pc, #124]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005752:	4313      	orrs	r3, r2
 8005754:	610b      	str	r3, [r1, #16]
 8005756:	e011      	b.n	800577c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6892      	ldr	r2, [r2, #8]
 8005768:	0211      	lsls	r1, r2, #8
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6952      	ldr	r2, [r2, #20]
 800576e:	0852      	lsrs	r2, r2, #1
 8005770:	3a01      	subs	r2, #1
 8005772:	0652      	lsls	r2, r2, #25
 8005774:	430a      	orrs	r2, r1
 8005776:	4916      	ldr	r1, [pc, #88]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fc ffbe 	bl	8002708 <HAL_GetTick>
 800578c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800578e:	e009      	b.n	80057a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005790:	f7fc ffba 	bl	8002708 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d902      	bls.n	80057a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	73fb      	strb	r3, [r7, #15]
          break;
 80057a2:	e005      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ef      	beq.n	8005790 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	4904      	ldr	r1, [pc, #16]	; (80057d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000

080057d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057e2:	4b6a      	ldr	r3, [pc, #424]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d018      	beq.n	8005820 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ee:	4b67      	ldr	r3, [pc, #412]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0203 	and.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d10d      	bne.n	800581a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
       ||
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005806:	4b61      	ldr	r3, [pc, #388]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	091b      	lsrs	r3, r3, #4
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
       ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d047      	beq.n	80058aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
 800581e:	e044      	b.n	80058aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b03      	cmp	r3, #3
 8005826:	d018      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x86>
 8005828:	2b03      	cmp	r3, #3
 800582a:	d825      	bhi.n	8005878 <RCCEx_PLLSAI2_Config+0xa4>
 800582c:	2b01      	cmp	r3, #1
 800582e:	d002      	beq.n	8005836 <RCCEx_PLLSAI2_Config+0x62>
 8005830:	2b02      	cmp	r3, #2
 8005832:	d009      	beq.n	8005848 <RCCEx_PLLSAI2_Config+0x74>
 8005834:	e020      	b.n	8005878 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005836:	4b55      	ldr	r3, [pc, #340]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d11d      	bne.n	800587e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005846:	e01a      	b.n	800587e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005848:	4b50      	ldr	r3, [pc, #320]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005850:	2b00      	cmp	r3, #0
 8005852:	d116      	bne.n	8005882 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005858:	e013      	b.n	8005882 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800585a:	4b4c      	ldr	r3, [pc, #304]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005866:	4b49      	ldr	r3, [pc, #292]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005876:	e006      	b.n	8005886 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e004      	b.n	8005888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005886:	bf00      	nop
    }

    if(status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800588e:	4b3f      	ldr	r3, [pc, #252]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	3b01      	subs	r3, #1
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	430b      	orrs	r3, r1
 80058a4:	4939      	ldr	r1, [pc, #228]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d167      	bne.n	8005980 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058b0:	4b36      	ldr	r3, [pc, #216]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a35      	ldr	r2, [pc, #212]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058bc:	f7fc ff24 	bl	8002708 <HAL_GetTick>
 80058c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058c2:	e009      	b.n	80058d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058c4:	f7fc ff20 	bl	8002708 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d902      	bls.n	80058d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	73fb      	strb	r3, [r7, #15]
        break;
 80058d6:	e005      	b.n	80058e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058d8:	4b2c      	ldr	r3, [pc, #176]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ef      	bne.n	80058c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d14a      	bne.n	8005980 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d111      	bne.n	8005914 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058f0:	4b26      	ldr	r3, [pc, #152]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6892      	ldr	r2, [r2, #8]
 8005900:	0211      	lsls	r1, r2, #8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68d2      	ldr	r2, [r2, #12]
 8005906:	0912      	lsrs	r2, r2, #4
 8005908:	0452      	lsls	r2, r2, #17
 800590a:	430a      	orrs	r2, r1
 800590c:	491f      	ldr	r1, [pc, #124]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 800590e:	4313      	orrs	r3, r2
 8005910:	614b      	str	r3, [r1, #20]
 8005912:	e011      	b.n	8005938 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800591c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6892      	ldr	r2, [r2, #8]
 8005924:	0211      	lsls	r1, r2, #8
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6912      	ldr	r2, [r2, #16]
 800592a:	0852      	lsrs	r2, r2, #1
 800592c:	3a01      	subs	r2, #1
 800592e:	0652      	lsls	r2, r2, #25
 8005930:	430a      	orrs	r2, r1
 8005932:	4916      	ldr	r1, [pc, #88]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005934:	4313      	orrs	r3, r2
 8005936:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005938:	4b14      	ldr	r3, [pc, #80]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005942:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fc fee0 	bl	8002708 <HAL_GetTick>
 8005948:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800594a:	e009      	b.n	8005960 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800594c:	f7fc fedc 	bl	8002708 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d902      	bls.n	8005960 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	73fb      	strb	r3, [r7, #15]
          break;
 800595e:	e005      	b.n	800596c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ef      	beq.n	800594c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4904      	ldr	r1, [pc, #16]	; (800598c <RCCEx_PLLSAI2_Config+0x1b8>)
 800597c:	4313      	orrs	r3, r2
 800597e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000

08005990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e095      	b.n	8005ace <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d108      	bne.n	80059bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b2:	d009      	beq.n	80059c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	61da      	str	r2, [r3, #28]
 80059ba:	e005      	b.n	80059c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fc fb42 	bl	800206c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a08:	d902      	bls.n	8005a10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e002      	b.n	8005a16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a1e:	d007      	beq.n	8005a30 <HAL_SPI_Init+0xa0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	ea42 0103 	orr.w	r1, r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	0c1b      	lsrs	r3, r3, #16
 8005a8c:	f003 0204 	and.w	r2, r3, #4
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005aac:	ea42 0103 	orr.w	r1, r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e01a      	b.n	8005b1e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fc faff 	bl	8002104 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af02      	add	r7, sp, #8
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d002      	beq.n	8005b4c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
 8005b48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b4a:	e11a      	b.n	8005d82 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b54:	d112      	bne.n	8005b7c <HAL_SPI_Receive+0x56>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10e      	bne.n	8005b7c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2204      	movs	r2, #4
 8005b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f90e 	bl	8005d94 <HAL_SPI_TransmitReceive>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	e107      	b.n	8005d8c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_SPI_Receive+0x64>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e100      	b.n	8005d8c <HAL_SPI_Receive+0x266>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b92:	f7fc fdb9 	bl	8002708 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_Receive+0x7e>
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ba8:	e0eb      	b.n	8005d82 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2204      	movs	r2, #4
 8005bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf4:	d908      	bls.n	8005c08 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e007      	b.n	8005c18 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c16:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c20:	d10f      	bne.n	8005c42 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d007      	beq.n	8005c60 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c68:	d86f      	bhi.n	8005d4a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c6a:	e034      	b.n	8005cd6 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d117      	bne.n	8005caa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f103 020c 	add.w	r2, r3, #12
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ca8:	e015      	b.n	8005cd6 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005caa:	f7fc fd2d 	bl	8002708 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d803      	bhi.n	8005cc2 <HAL_SPI_Receive+0x19c>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d102      	bne.n	8005cc8 <HAL_SPI_Receive+0x1a2>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005cd4:	e055      	b.n	8005d82 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1c4      	bne.n	8005c6c <HAL_SPI_Receive+0x146>
 8005ce2:	e038      	b.n	8005d56 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d115      	bne.n	8005d1e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d1c:	e015      	b.n	8005d4a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d1e:	f7fc fcf3 	bl	8002708 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d803      	bhi.n	8005d36 <HAL_SPI_Receive+0x210>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d102      	bne.n	8005d3c <HAL_SPI_Receive+0x216>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005d48:	e01b      	b.n	8005d82 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1c6      	bne.n	8005ce4 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fffe 	bl	8006d5c <SPI_EndRxTransaction>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
 8005d78:	e003      	b.n	8005d82 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005da2:	2301      	movs	r3, #1
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_SPI_TransmitReceive+0x26>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e20a      	b.n	80061d0 <HAL_SPI_TransmitReceive+0x43c>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc2:	f7fc fca1 	bl	8002708 <HAL_GetTick>
 8005dc6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dd6:	887b      	ldrh	r3, [r7, #2]
 8005dd8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dde:	7efb      	ldrb	r3, [r7, #27]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d00e      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x6e>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dea:	d106      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x66>
 8005df4:	7efb      	ldrb	r3, [r7, #27]
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d003      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e00:	e1e0      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x80>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x80>
 8005e0e:	887b      	ldrh	r3, [r7, #2]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e1a:	e1d3      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d003      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2205      	movs	r2, #5
 8005e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	887a      	ldrh	r2, [r7, #2]
 8005e40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	887a      	ldrh	r2, [r7, #2]
 8005e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e72:	d802      	bhi.n	8005e7a <HAL_SPI_TransmitReceive+0xe6>
 8005e74:	8a3b      	ldrh	r3, [r7, #16]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d908      	bls.n	8005e8c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	e007      	b.n	8005e9c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d007      	beq.n	8005eba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ec2:	f240 8081 	bls.w	8005fc8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_TransmitReceive+0x140>
 8005ece:	8a7b      	ldrh	r3, [r7, #18]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d16d      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	1c9a      	adds	r2, r3, #2
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef8:	e05a      	b.n	8005fb0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d11b      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x1ac>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0x1ac>
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d113      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	881a      	ldrh	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	1c9a      	adds	r2, r3, #2
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d11c      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x1f4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	b292      	uxth	r2, r2
 8005f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	1c9a      	adds	r2, r3, #2
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f84:	2301      	movs	r3, #1
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f88:	f7fc fbbe 	bl	8002708 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d80b      	bhi.n	8005fb0 <HAL_SPI_TransmitReceive+0x21c>
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d007      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005fae:	e109      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d19f      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x166>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d199      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x166>
 8005fc6:	e0e3      	b.n	8006190 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x244>
 8005fd0:	8a7b      	ldrh	r3, [r7, #18]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	f040 80cf 	bne.w	8006176 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d912      	bls.n	8006008 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	881a      	ldrh	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	1c9a      	adds	r2, r3, #2
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b02      	subs	r3, #2
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006006:	e0b6      	b.n	8006176 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602e:	e0a2      	b.n	8006176 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d134      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x314>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02f      	beq.n	80060a8 <HAL_SPI_TransmitReceive+0x314>
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	2b01      	cmp	r3, #1
 800604c:	d12c      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d912      	bls.n	800607e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	1c9a      	adds	r2, r3, #2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b02      	subs	r3, #2
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800607c:	e012      	b.n	80060a4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	330c      	adds	r3, #12
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d148      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x3b4>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d042      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d923      	bls.n	8006116 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	b292      	uxth	r2, r2
 80060da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b02      	subs	r3, #2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d81f      	bhi.n	8006144 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	e016      	b.n	8006144 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f103 020c 	add.w	r2, r3, #12
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006144:	2301      	movs	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006148:	f7fc fade 	bl	8002708 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006154:	429a      	cmp	r2, r3
 8006156:	d803      	bhi.n	8006160 <HAL_SPI_TransmitReceive+0x3cc>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d102      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x3d2>
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006174:	e026      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f af57 	bne.w	8006030 <HAL_SPI_TransmitReceive+0x29c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	f47f af50 	bne.w	8006030 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fe39 	bl	8006e0c <SPI_EndRxTxTransaction>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ba:	e003      	b.n	80061c4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_Transmit_IT+0x1e>
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061fa:	e06d      	b.n	80062d8 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d002      	beq.n	800620e <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8006208:	2302      	movs	r3, #2
 800620a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800620c:	e064      	b.n	80062d8 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_SPI_Transmit_IT+0x44>
 8006218:	2302      	movs	r3, #2
 800621a:	e05e      	b.n	80062da <HAL_SPI_Transmit_IT+0x102>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006268:	d903      	bls.n	8006272 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <HAL_SPI_Transmit_IT+0x110>)
 800626e:	651a      	str	r2, [r3, #80]	; 0x50
 8006270:	e002      	b.n	8006278 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <HAL_SPI_Transmit_IT+0x114>)
 8006276:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006280:	d10f      	bne.n	80062a2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d007      	beq.n	80062c0 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80062d6:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	08006adb 	.word	0x08006adb
 80062ec:	08006a95 	.word	0x08006a95

080062f0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800630e:	2302      	movs	r3, #2
 8006310:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006312:	e092      	b.n	800643a <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <HAL_SPI_Receive_IT+0x4e>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006324:	d10b      	bne.n	800633e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2204      	movs	r2, #4
 800632a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f889 	bl	800644c <HAL_SPI_TransmitReceive_IT>
 800633a:	4603      	mov	r3, r0
 800633c:	e07e      	b.n	800643c <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_SPI_Receive_IT+0x5a>
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800634e:	e074      	b.n	800643a <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_SPI_Receive_IT+0x6e>
 800635a:	2302      	movs	r3, #2
 800635c:	e06e      	b.n	800643c <HAL_SPI_Receive_IT+0x14c>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2204      	movs	r2, #4
 800636a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	88fa      	ldrh	r2, [r7, #6]
 8006386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063aa:	d90b      	bls.n	80063c4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063ba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <HAL_SPI_Receive_IT+0x154>)
 80063c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80063c2:	e00a      	b.n	80063da <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063d2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_SPI_Receive_IT+0x158>)
 80063d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	d10f      	bne.n	8006404 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006402:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	d007      	beq.n	8006422 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006420:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006438:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	08006a49 	.word	0x08006a49
 8006448:	080069f9 	.word	0x080069f9

0800644c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006464:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800646c:	7dbb      	ldrb	r3, [r7, #22]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d00d      	beq.n	800648e <HAL_SPI_TransmitReceive_IT+0x42>
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006478:	d106      	bne.n	8006488 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006482:	7dbb      	ldrb	r3, [r7, #22]
 8006484:	2b04      	cmp	r3, #4
 8006486:	d002      	beq.n	800648e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006488:	2302      	movs	r3, #2
 800648a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800648c:	e07d      	b.n	800658a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_SPI_TransmitReceive_IT+0x54>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_SPI_TransmitReceive_IT+0x54>
 800649a:	887b      	ldrh	r3, [r7, #2]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064a4:	e071      	b.n	800658a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_SPI_TransmitReceive_IT+0x68>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e06b      	b.n	800658c <HAL_SPI_TransmitReceive_IT+0x140>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d003      	beq.n	80064d0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2205      	movs	r2, #5
 80064cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	887a      	ldrh	r2, [r7, #2]
 80064e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006506:	d906      	bls.n	8006516 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4a23      	ldr	r2, [pc, #140]	; (8006598 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800650c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <HAL_SPI_TransmitReceive_IT+0x150>)
 8006512:	651a      	str	r2, [r3, #80]	; 0x50
 8006514:	e005      	b.n	8006522 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800651a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a21      	ldr	r2, [pc, #132]	; (80065a4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006520:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800652a:	d802      	bhi.n	8006532 <HAL_SPI_TransmitReceive_IT+0xe6>
 800652c:	887b      	ldrh	r3, [r7, #2]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d908      	bls.n	8006544 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e007      	b.n	8006554 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006552:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d007      	beq.n	8006572 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006588:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	08006933 	.word	0x08006933
 800659c:	08006999 	.word	0x08006999
 80065a0:	080067e3 	.word	0x080067e3
 80065a4:	080068a1 	.word	0x080068a1

080065a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10e      	bne.n	80065e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d009      	beq.n	80065e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4798      	blx	r3
    return;
 80065e6:	e0ce      	b.n	8006786 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_SPI_IRQHandler+0x5e>
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
    return;
 8006604:	e0bf      	b.n	8006786 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <HAL_SPI_IRQHandler+0x7e>
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80b0 	beq.w	8006786 <HAL_SPI_IRQHandler+0x1de>
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80aa 	beq.w	8006786 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d023      	beq.n	8006684 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b03      	cmp	r3, #3
 8006646:	d011      	beq.n	800666c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664c:	f043 0204 	orr.w	r2, r3, #4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	e00b      	b.n	8006684 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
        return;
 8006682:	e080      	b.n	8006786 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d014      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c6:	f043 0208 	orr.w	r2, r3, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066ce:	2300      	movs	r3, #0
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d04f      	beq.n	8006784 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <HAL_SPI_IRQHandler+0x168>
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d034      	beq.n	800677a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0203 	bic.w	r2, r2, #3
 800671e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	2b00      	cmp	r3, #0
 8006726:	d011      	beq.n	800674c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	4a17      	ldr	r2, [pc, #92]	; (800678c <HAL_SPI_IRQHandler+0x1e4>)
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006734:	4618      	mov	r0, r3
 8006736:	f7fc fa67 	bl	8002c08 <HAL_DMA_Abort_IT>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	2b00      	cmp	r3, #0
 8006752:	d016      	beq.n	8006782 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	4a0c      	ldr	r2, [pc, #48]	; (800678c <HAL_SPI_IRQHandler+0x1e4>)
 800675a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	4618      	mov	r0, r3
 8006762:	f7fc fa51 	bl	8002c08 <HAL_DMA_Abort_IT>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006770:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006778:	e003      	b.n	8006782 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f812 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006780:	e000      	b.n	8006784 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006782:	bf00      	nop
    return;
 8006784:	bf00      	nop
  }
}
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	080067b9 	.word	0x080067b9

08006790 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff ffe5 	bl	80067a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d923      	bls.n	800683e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	b292      	uxth	r2, r2
 8006802:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b02      	subs	r3, #2
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d11f      	bne.n	800686c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	e016      	b.n	800686c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f103 020c 	add.w	r2, r3, #12
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10f      	bne.n	8006898 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006886:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fb00 	bl	8006e98 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d912      	bls.n	80068d8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	881a      	ldrh	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	1c9a      	adds	r2, r3, #2
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b02      	subs	r3, #2
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068d6:	e012      	b.n	80068fe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	7812      	ldrb	r2, [r2, #0]
 80068e4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d110      	bne.n	800692a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006916:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fab7 	bl	8006e98 <SPI_CloseRxTx_ISR>
    }
  }
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	b292      	uxth	r2, r2
 8006946:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10f      	bne.n	8006990 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa84 	bl	8006e98 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	881a      	ldrh	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d110      	bne.n	80069f0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069dc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa54 	bl	8006e98 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f103 020c 	add.w	r2, r3, #12
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa6e 	bl	8006f1c <SPI_CloseRx_ISR>
  }
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa48 	bl	8006f1c <SPI_CloseRx_ISR>
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	7812      	ldrb	r2, [r2, #0]
 8006aa8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fa55 	bl	8006f7c <SPI_CloseTx_ISR>
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	881a      	ldrh	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	1c9a      	adds	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa33 	bl	8006f7c <SPI_CloseTx_ISR>
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b30:	f7fb fdea 	bl	8002708 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b40:	f7fb fde2 	bl	8002708 <HAL_GetTick>
 8006b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b46:	4b39      	ldr	r3, [pc, #228]	; (8006c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	015b      	lsls	r3, r3, #5
 8006b4c:	0d1b      	lsrs	r3, r3, #20
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	fb02 f303 	mul.w	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b56:	e054      	b.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d050      	beq.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b60:	f7fb fdd2 	bl	8002708 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d902      	bls.n	8006b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d13d      	bne.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b8e:	d111      	bne.n	8006bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b98:	d004      	beq.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba2:	d107      	bne.n	8006bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbc:	d10f      	bne.n	8006bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e017      	b.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d19b      	bne.n	8006b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000008 	.word	0x20000008

08006c30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c42:	f7fb fd61 	bl	8002708 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	4413      	add	r3, r2
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c52:	f7fb fd59 	bl	8002708 <HAL_GetTick>
 8006c56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c60:	4b3d      	ldr	r3, [pc, #244]	; (8006d58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	00da      	lsls	r2, r3, #3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	0d1b      	lsrs	r3, r3, #20
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c78:	e060      	b.n	8006d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c80:	d107      	bne.n	8006c92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d050      	beq.n	8006d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c9a:	f7fb fd35 	bl	8002708 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d902      	bls.n	8006cb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d13d      	bne.n	8006d2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc8:	d111      	bne.n	8006cee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd2:	d004      	beq.n	8006cde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d107      	bne.n	8006cee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	d10f      	bne.n	8006d18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e010      	b.n	8006d4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d196      	bne.n	8006c7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000008 	.word	0x20000008

08006d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d70:	d111      	bne.n	8006d96 <SPI_EndRxTransaction+0x3a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d004      	beq.n	8006d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d84:	d107      	bne.n	8006d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff febd 	bl	8006b20 <SPI_WaitFlagStateUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db0:	f043 0220 	orr.w	r2, r3, #32
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e023      	b.n	8006e04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc4:	d11d      	bne.n	8006e02 <SPI_EndRxTransaction+0xa6>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dce:	d004      	beq.n	8006dda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d113      	bne.n	8006e02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff ff22 	bl	8006c30 <SPI_WaitFifoStateUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e000      	b.n	8006e04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff ff03 	bl	8006c30 <SPI_WaitFifoStateUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e027      	b.n	8006e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2200      	movs	r2, #0
 8006e48:	2180      	movs	r1, #128	; 0x80
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff fe68 	bl	8006b20 <SPI_WaitFlagStateUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d007      	beq.n	8006e66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5a:	f043 0220 	orr.w	r2, r3, #32
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e014      	b.n	8006e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fedc 	bl	8006c30 <SPI_WaitFifoStateUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e000      	b.n	8006e90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ea0:	f7fb fc32 	bl	8002708 <HAL_GetTick>
 8006ea4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0220 	bic.w	r2, r2, #32
 8006eb4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	2164      	movs	r1, #100	; 0x64
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff ffa6 	bl	8006e0c <SPI_EndRxTxTransaction>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d115      	bne.n	8006f06 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d107      	bne.n	8006ef6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 fe40 	bl	8009b74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006ef4:	e00e      	b.n	8006f14 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff fc46 	bl	8006790 <HAL_SPI_TxRxCpltCallback>
}
 8006f04:	e006      	b.n	8006f14 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fc48 	bl	80067a4 <HAL_SPI_ErrorCallback>
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f32:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006f34:	f7fb fbe8 	bl	8002708 <HAL_GetTick>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2164      	movs	r1, #100	; 0x64
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff ff0c 	bl	8006d5c <SPI_EndRxTransaction>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d103      	bne.n	8006f6e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f002 fe04 	bl	8009b74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006f6c:	e002      	b.n	8006f74 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fc18 	bl	80067a4 <HAL_SPI_ErrorCallback>
}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f84:	f7fb fbc0 	bl	8002708 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f98:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	2164      	movs	r1, #100	; 0x64
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff ff34 	bl	8006e0c <SPI_EndRxTxTransaction>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	60bb      	str	r3, [r7, #8]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fbdd 	bl	80067a4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006fea:	e002      	b.n	8006ff2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 fdd5 	bl	8009b9c <HAL_SPI_TxCpltCallback>
}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e040      	b.n	800708e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d106      	bne.n	8007022 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fb f893 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2224      	movs	r2, #36	; 0x24
 8007026:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fae1 	bl	8007608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f826 	bl	8007098 <UART_SetConfig>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e01b      	b.n	800708e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0201 	orr.w	r2, r2, #1
 8007084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fb60 	bl	800774c <UART_CheckIdleState>
 800708c:	4603      	mov	r3, r0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800709c:	b08a      	sub	sp, #40	; 0x28
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	4313      	orrs	r3, r2
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4ba4      	ldr	r3, [pc, #656]	; (8007358 <UART_SetConfig+0x2c0>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a99      	ldr	r2, [pc, #612]	; (800735c <UART_SetConfig+0x2c4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	4313      	orrs	r3, r2
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007114:	430a      	orrs	r2, r1
 8007116:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a90      	ldr	r2, [pc, #576]	; (8007360 <UART_SetConfig+0x2c8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d126      	bne.n	8007170 <UART_SetConfig+0xd8>
 8007122:	4b90      	ldr	r3, [pc, #576]	; (8007364 <UART_SetConfig+0x2cc>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b03      	cmp	r3, #3
 800712e:	d81b      	bhi.n	8007168 <UART_SetConfig+0xd0>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <UART_SetConfig+0xa0>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	08007149 	.word	0x08007149
 800713c:	08007159 	.word	0x08007159
 8007140:	08007151 	.word	0x08007151
 8007144:	08007161 	.word	0x08007161
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800714e:	e116      	b.n	800737e <UART_SetConfig+0x2e6>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007156:	e112      	b.n	800737e <UART_SetConfig+0x2e6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800715e:	e10e      	b.n	800737e <UART_SetConfig+0x2e6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007166:	e10a      	b.n	800737e <UART_SetConfig+0x2e6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e106      	b.n	800737e <UART_SetConfig+0x2e6>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7c      	ldr	r2, [pc, #496]	; (8007368 <UART_SetConfig+0x2d0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d138      	bne.n	80071ec <UART_SetConfig+0x154>
 800717a:	4b7a      	ldr	r3, [pc, #488]	; (8007364 <UART_SetConfig+0x2cc>)
 800717c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007180:	f003 030c 	and.w	r3, r3, #12
 8007184:	2b0c      	cmp	r3, #12
 8007186:	d82d      	bhi.n	80071e4 <UART_SetConfig+0x14c>
 8007188:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0xf8>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071c5 	.word	0x080071c5
 8007194:	080071e5 	.word	0x080071e5
 8007198:	080071e5 	.word	0x080071e5
 800719c:	080071e5 	.word	0x080071e5
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071e5 	.word	0x080071e5
 80071a8:	080071e5 	.word	0x080071e5
 80071ac:	080071e5 	.word	0x080071e5
 80071b0:	080071cd 	.word	0x080071cd
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ca:	e0d8      	b.n	800737e <UART_SetConfig+0x2e6>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d2:	e0d4      	b.n	800737e <UART_SetConfig+0x2e6>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071da:	e0d0      	b.n	800737e <UART_SetConfig+0x2e6>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e2:	e0cc      	b.n	800737e <UART_SetConfig+0x2e6>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ea:	e0c8      	b.n	800737e <UART_SetConfig+0x2e6>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a5e      	ldr	r2, [pc, #376]	; (800736c <UART_SetConfig+0x2d4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d125      	bne.n	8007242 <UART_SetConfig+0x1aa>
 80071f6:	4b5b      	ldr	r3, [pc, #364]	; (8007364 <UART_SetConfig+0x2cc>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007200:	2b30      	cmp	r3, #48	; 0x30
 8007202:	d016      	beq.n	8007232 <UART_SetConfig+0x19a>
 8007204:	2b30      	cmp	r3, #48	; 0x30
 8007206:	d818      	bhi.n	800723a <UART_SetConfig+0x1a2>
 8007208:	2b20      	cmp	r3, #32
 800720a:	d00a      	beq.n	8007222 <UART_SetConfig+0x18a>
 800720c:	2b20      	cmp	r3, #32
 800720e:	d814      	bhi.n	800723a <UART_SetConfig+0x1a2>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <UART_SetConfig+0x182>
 8007214:	2b10      	cmp	r3, #16
 8007216:	d008      	beq.n	800722a <UART_SetConfig+0x192>
 8007218:	e00f      	b.n	800723a <UART_SetConfig+0x1a2>
 800721a:	2300      	movs	r3, #0
 800721c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007220:	e0ad      	b.n	800737e <UART_SetConfig+0x2e6>
 8007222:	2302      	movs	r3, #2
 8007224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007228:	e0a9      	b.n	800737e <UART_SetConfig+0x2e6>
 800722a:	2304      	movs	r3, #4
 800722c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007230:	e0a5      	b.n	800737e <UART_SetConfig+0x2e6>
 8007232:	2308      	movs	r3, #8
 8007234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007238:	e0a1      	b.n	800737e <UART_SetConfig+0x2e6>
 800723a:	2310      	movs	r3, #16
 800723c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007240:	e09d      	b.n	800737e <UART_SetConfig+0x2e6>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a4a      	ldr	r2, [pc, #296]	; (8007370 <UART_SetConfig+0x2d8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d125      	bne.n	8007298 <UART_SetConfig+0x200>
 800724c:	4b45      	ldr	r3, [pc, #276]	; (8007364 <UART_SetConfig+0x2cc>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007256:	2bc0      	cmp	r3, #192	; 0xc0
 8007258:	d016      	beq.n	8007288 <UART_SetConfig+0x1f0>
 800725a:	2bc0      	cmp	r3, #192	; 0xc0
 800725c:	d818      	bhi.n	8007290 <UART_SetConfig+0x1f8>
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d00a      	beq.n	8007278 <UART_SetConfig+0x1e0>
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d814      	bhi.n	8007290 <UART_SetConfig+0x1f8>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <UART_SetConfig+0x1d8>
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d008      	beq.n	8007280 <UART_SetConfig+0x1e8>
 800726e:	e00f      	b.n	8007290 <UART_SetConfig+0x1f8>
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007276:	e082      	b.n	800737e <UART_SetConfig+0x2e6>
 8007278:	2302      	movs	r3, #2
 800727a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727e:	e07e      	b.n	800737e <UART_SetConfig+0x2e6>
 8007280:	2304      	movs	r3, #4
 8007282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007286:	e07a      	b.n	800737e <UART_SetConfig+0x2e6>
 8007288:	2308      	movs	r3, #8
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800728e:	e076      	b.n	800737e <UART_SetConfig+0x2e6>
 8007290:	2310      	movs	r3, #16
 8007292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007296:	e072      	b.n	800737e <UART_SetConfig+0x2e6>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a35      	ldr	r2, [pc, #212]	; (8007374 <UART_SetConfig+0x2dc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d12a      	bne.n	80072f8 <UART_SetConfig+0x260>
 80072a2:	4b30      	ldr	r3, [pc, #192]	; (8007364 <UART_SetConfig+0x2cc>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b0:	d01a      	beq.n	80072e8 <UART_SetConfig+0x250>
 80072b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b6:	d81b      	bhi.n	80072f0 <UART_SetConfig+0x258>
 80072b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072bc:	d00c      	beq.n	80072d8 <UART_SetConfig+0x240>
 80072be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c2:	d815      	bhi.n	80072f0 <UART_SetConfig+0x258>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <UART_SetConfig+0x238>
 80072c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072cc:	d008      	beq.n	80072e0 <UART_SetConfig+0x248>
 80072ce:	e00f      	b.n	80072f0 <UART_SetConfig+0x258>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d6:	e052      	b.n	800737e <UART_SetConfig+0x2e6>
 80072d8:	2302      	movs	r3, #2
 80072da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072de:	e04e      	b.n	800737e <UART_SetConfig+0x2e6>
 80072e0:	2304      	movs	r3, #4
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e6:	e04a      	b.n	800737e <UART_SetConfig+0x2e6>
 80072e8:	2308      	movs	r3, #8
 80072ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ee:	e046      	b.n	800737e <UART_SetConfig+0x2e6>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f6:	e042      	b.n	800737e <UART_SetConfig+0x2e6>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a17      	ldr	r2, [pc, #92]	; (800735c <UART_SetConfig+0x2c4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d13a      	bne.n	8007378 <UART_SetConfig+0x2e0>
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <UART_SetConfig+0x2cc>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800730c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007310:	d01a      	beq.n	8007348 <UART_SetConfig+0x2b0>
 8007312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007316:	d81b      	bhi.n	8007350 <UART_SetConfig+0x2b8>
 8007318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731c:	d00c      	beq.n	8007338 <UART_SetConfig+0x2a0>
 800731e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007322:	d815      	bhi.n	8007350 <UART_SetConfig+0x2b8>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <UART_SetConfig+0x298>
 8007328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800732c:	d008      	beq.n	8007340 <UART_SetConfig+0x2a8>
 800732e:	e00f      	b.n	8007350 <UART_SetConfig+0x2b8>
 8007330:	2300      	movs	r3, #0
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007336:	e022      	b.n	800737e <UART_SetConfig+0x2e6>
 8007338:	2302      	movs	r3, #2
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	e01e      	b.n	800737e <UART_SetConfig+0x2e6>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007346:	e01a      	b.n	800737e <UART_SetConfig+0x2e6>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734e:	e016      	b.n	800737e <UART_SetConfig+0x2e6>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007356:	e012      	b.n	800737e <UART_SetConfig+0x2e6>
 8007358:	efff69f3 	.word	0xefff69f3
 800735c:	40008000 	.word	0x40008000
 8007360:	40013800 	.word	0x40013800
 8007364:	40021000 	.word	0x40021000
 8007368:	40004400 	.word	0x40004400
 800736c:	40004800 	.word	0x40004800
 8007370:	40004c00 	.word	0x40004c00
 8007374:	40005000 	.word	0x40005000
 8007378:	2310      	movs	r3, #16
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a9f      	ldr	r2, [pc, #636]	; (8007600 <UART_SetConfig+0x568>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d17a      	bne.n	800747e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800738c:	2b08      	cmp	r3, #8
 800738e:	d824      	bhi.n	80073da <UART_SetConfig+0x342>
 8007390:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <UART_SetConfig+0x300>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	080073bd 	.word	0x080073bd
 800739c:	080073db 	.word	0x080073db
 80073a0:	080073c5 	.word	0x080073c5
 80073a4:	080073db 	.word	0x080073db
 80073a8:	080073cb 	.word	0x080073cb
 80073ac:	080073db 	.word	0x080073db
 80073b0:	080073db 	.word	0x080073db
 80073b4:	080073db 	.word	0x080073db
 80073b8:	080073d3 	.word	0x080073d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073bc:	f7fd fd90 	bl	8004ee0 <HAL_RCC_GetPCLK1Freq>
 80073c0:	61f8      	str	r0, [r7, #28]
        break;
 80073c2:	e010      	b.n	80073e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c4:	4b8f      	ldr	r3, [pc, #572]	; (8007604 <UART_SetConfig+0x56c>)
 80073c6:	61fb      	str	r3, [r7, #28]
        break;
 80073c8:	e00d      	b.n	80073e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ca:	f7fd fcf1 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 80073ce:	61f8      	str	r0, [r7, #28]
        break;
 80073d0:	e009      	b.n	80073e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d6:	61fb      	str	r3, [r7, #28]
        break;
 80073d8:	e005      	b.n	80073e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80fb 	beq.w	80075e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d305      	bcc.n	800740a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007410:	e0e8      	b.n	80075e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2200      	movs	r2, #0
 8007416:	461c      	mov	r4, r3
 8007418:	4615      	mov	r5, r2
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	022b      	lsls	r3, r5, #8
 8007424:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007428:	0222      	lsls	r2, r4, #8
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	6849      	ldr	r1, [r1, #4]
 800742e:	0849      	lsrs	r1, r1, #1
 8007430:	2000      	movs	r0, #0
 8007432:	4688      	mov	r8, r1
 8007434:	4681      	mov	r9, r0
 8007436:	eb12 0a08 	adds.w	sl, r2, r8
 800743a:	eb43 0b09 	adc.w	fp, r3, r9
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744c:	4650      	mov	r0, sl
 800744e:	4659      	mov	r1, fp
 8007450:	f7f9 fc1a 	bl	8000c88 <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4613      	mov	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007462:	d308      	bcc.n	8007476 <UART_SetConfig+0x3de>
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746a:	d204      	bcs.n	8007476 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e0b6      	b.n	80075e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800747c:	e0b2      	b.n	80075e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	d15e      	bne.n	8007546 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800748c:	2b08      	cmp	r3, #8
 800748e:	d828      	bhi.n	80074e2 <UART_SetConfig+0x44a>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <UART_SetConfig+0x400>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074bd 	.word	0x080074bd
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	080074e3 	.word	0x080074e3
 80074a8:	080074d3 	.word	0x080074d3
 80074ac:	080074e3 	.word	0x080074e3
 80074b0:	080074e3 	.word	0x080074e3
 80074b4:	080074e3 	.word	0x080074e3
 80074b8:	080074db 	.word	0x080074db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074bc:	f7fd fd10 	bl	8004ee0 <HAL_RCC_GetPCLK1Freq>
 80074c0:	61f8      	str	r0, [r7, #28]
        break;
 80074c2:	e014      	b.n	80074ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074c4:	f7fd fd22 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 80074c8:	61f8      	str	r0, [r7, #28]
        break;
 80074ca:	e010      	b.n	80074ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074cc:	4b4d      	ldr	r3, [pc, #308]	; (8007604 <UART_SetConfig+0x56c>)
 80074ce:	61fb      	str	r3, [r7, #28]
        break;
 80074d0:	e00d      	b.n	80074ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074d2:	f7fd fc6d 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 80074d6:	61f8      	str	r0, [r7, #28]
        break;
 80074d8:	e009      	b.n	80074ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074de:	61fb      	str	r3, [r7, #28]
        break;
 80074e0:	e005      	b.n	80074ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d077      	beq.n	80075e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	005a      	lsls	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	085b      	lsrs	r3, r3, #1
 80074fe:	441a      	add	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	fbb2 f3f3 	udiv	r3, r2, r3
 8007508:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b0f      	cmp	r3, #15
 800750e:	d916      	bls.n	800753e <UART_SetConfig+0x4a6>
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007516:	d212      	bcs.n	800753e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f023 030f 	bic.w	r3, r3, #15
 8007520:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	085b      	lsrs	r3, r3, #1
 8007526:	b29b      	uxth	r3, r3
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	b29a      	uxth	r2, r3
 800752e:	8afb      	ldrh	r3, [r7, #22]
 8007530:	4313      	orrs	r3, r2
 8007532:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	8afa      	ldrh	r2, [r7, #22]
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	e052      	b.n	80075e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007544:	e04e      	b.n	80075e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800754a:	2b08      	cmp	r3, #8
 800754c:	d827      	bhi.n	800759e <UART_SetConfig+0x506>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x4bc>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	08007589 	.word	0x08007589
 8007560:	0800759f 	.word	0x0800759f
 8007564:	0800758f 	.word	0x0800758f
 8007568:	0800759f 	.word	0x0800759f
 800756c:	0800759f 	.word	0x0800759f
 8007570:	0800759f 	.word	0x0800759f
 8007574:	08007597 	.word	0x08007597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fd fcb2 	bl	8004ee0 <HAL_RCC_GetPCLK1Freq>
 800757c:	61f8      	str	r0, [r7, #28]
        break;
 800757e:	e014      	b.n	80075aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fd fcc4 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 8007584:	61f8      	str	r0, [r7, #28]
        break;
 8007586:	e010      	b.n	80075aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007588:	4b1e      	ldr	r3, [pc, #120]	; (8007604 <UART_SetConfig+0x56c>)
 800758a:	61fb      	str	r3, [r7, #28]
        break;
 800758c:	e00d      	b.n	80075aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758e:	f7fd fc0f 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8007592:	61f8      	str	r0, [r7, #28]
        break;
 8007594:	e009      	b.n	80075aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800759a:	61fb      	str	r3, [r7, #28]
        break;
 800759c:	e005      	b.n	80075aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075a8:	bf00      	nop
    }

    if (pclk != 0U)
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d019      	beq.n	80075e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	085a      	lsrs	r2, r3, #1
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	441a      	add	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d909      	bls.n	80075de <UART_SetConfig+0x546>
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d0:	d205      	bcs.n	80075de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60da      	str	r2, [r3, #12]
 80075dc:	e002      	b.n	80075e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80075f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075fe:	bf00      	nop
 8007600:	40008000 	.word	0x40008000
 8007604:	00f42400 	.word	0x00f42400

08007608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01a      	beq.n	800771e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007706:	d10a      	bne.n	800771e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b098      	sub	sp, #96	; 0x60
 8007750:	af02      	add	r7, sp, #8
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800775c:	f7fa ffd4 	bl	8002708 <HAL_GetTick>
 8007760:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b08      	cmp	r3, #8
 800776e:	d12e      	bne.n	80077ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007778:	2200      	movs	r2, #0
 800777a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f88c 	bl	800789c <UART_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d021      	beq.n	80077ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800779e:	653b      	str	r3, [r7, #80]	; 0x50
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a8:	647b      	str	r3, [r7, #68]	; 0x44
 80077aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e062      	b.n	8007894 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d149      	bne.n	8007870 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e4:	2200      	movs	r2, #0
 80077e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f856 	bl	800789c <UART_WaitOnFlagUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d03c      	beq.n	8007870 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	623b      	str	r3, [r7, #32]
   return(result);
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800780a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	633b      	str	r3, [r7, #48]	; 0x30
 8007816:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800781a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e6      	bne.n	80077f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3308      	adds	r3, #8
 800782e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60fb      	str	r3, [r7, #12]
   return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007848:	61fa      	str	r2, [r7, #28]
 800784a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	617b      	str	r3, [r7, #20]
   return(result);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e5      	bne.n	8007828 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e011      	b.n	8007894 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3758      	adds	r7, #88	; 0x58
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ac:	e049      	b.n	8007942 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d045      	beq.n	8007942 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b6:	f7fa ff27 	bl	8002708 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d302      	bcc.n	80078cc <UART_WaitOnFlagUntilTimeout+0x30>
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e048      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0304 	and.w	r3, r3, #4
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d031      	beq.n	8007942 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d110      	bne.n	800790e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2208      	movs	r2, #8
 80078f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f838 	bl	800796a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2208      	movs	r2, #8
 80078fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e029      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791c:	d111      	bne.n	8007942 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f81e 	bl	800796a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00f      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4013      	ands	r3, r2
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	429a      	cmp	r2, r3
 8007950:	bf0c      	ite	eq
 8007952:	2301      	moveq	r3, #1
 8007954:	2300      	movne	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	429a      	cmp	r2, r3
 800795e:	d0a6      	beq.n	80078ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800796a:	b480      	push	{r7}
 800796c:	b095      	sub	sp, #84	; 0x54
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007990:	643b      	str	r3, [r7, #64]	; 0x40
 8007992:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e6      	bne.n	8007972 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3308      	adds	r3, #8
 80079aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e5      	bne.n	80079a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d118      	bne.n	8007a12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f023 0310 	bic.w	r3, r3, #16
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6979      	ldr	r1, [r7, #20]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e6      	bne.n	80079e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a26:	bf00      	nop
 8007a28:	3754      	adds	r7, #84	; 0x54
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a32:	b084      	sub	sp, #16
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	f107 001c 	add.w	r0, r7, #28
 8007a40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa65 	bl	8007f20 <USB_CoreReset>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a6c:	e005      	b.n	8007a7a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a86:	b004      	add	sp, #16
 8007a88:	4770      	bx	lr

08007a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d115      	bne.n	8007afa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ada:	2001      	movs	r0, #1
 8007adc:	f7fa fe20 	bl	8002720 <HAL_Delay>
      ms++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa0c 	bl	8007f04 <USB_GetMode>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d01e      	beq.n	8007b30 <USB_SetCurrentMode+0x84>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b31      	cmp	r3, #49	; 0x31
 8007af6:	d9f0      	bls.n	8007ada <USB_SetCurrentMode+0x2e>
 8007af8:	e01a      	b.n	8007b30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d115      	bne.n	8007b2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	f7fa fe07 	bl	8002720 <HAL_Delay>
      ms++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9f3 	bl	8007f04 <USB_GetMode>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <USB_SetCurrentMode+0x84>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b31      	cmp	r3, #49	; 0x31
 8007b28:	d9f0      	bls.n	8007b0c <USB_SetCurrentMode+0x60>
 8007b2a:	e001      	b.n	8007b30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e005      	b.n	8007b3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b32      	cmp	r3, #50	; 0x32
 8007b34:	d101      	bne.n	8007b3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b44:	b084      	sub	sp, #16
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	e009      	b.n	8007b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3340      	adds	r3, #64	; 0x40
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b0e      	cmp	r3, #14
 8007b7c:	d9f2      	bls.n	8007b64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11c      	bne.n	8007bbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f043 0302 	orr.w	r3, r3, #2
 8007b96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e005      	b.n	8007bca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bd6:	2103      	movs	r1, #3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f959 	bl	8007e90 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bde:	2110      	movs	r1, #16
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8f1 	bl	8007dc8 <USB_FlushTxFifo>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f91d 	bl	8007e30 <USB_FlushRxFifo>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c06:	461a      	mov	r2, r3
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	461a      	mov	r2, r3
 8007c14:	2300      	movs	r3, #0
 8007c16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1e:	461a      	mov	r2, r3
 8007c20:	2300      	movs	r3, #0
 8007c22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	e043      	b.n	8007cb2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c40:	d118      	bne.n	8007c74 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c54:	461a      	mov	r2, r3
 8007c56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	e013      	b.n	8007c86 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e008      	b.n	8007c86 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c92:	461a      	mov	r2, r3
 8007c94:	2300      	movs	r3, #0
 8007c96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007caa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d3b7      	bcc.n	8007c2a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cba:	2300      	movs	r3, #0
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	e043      	b.n	8007d48 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd6:	d118      	bne.n	8007d0a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10a      	bne.n	8007cf4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cea:	461a      	mov	r2, r3
 8007cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e013      	b.n	8007d1c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d00:	461a      	mov	r2, r3
 8007d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e008      	b.n	8007d1c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	461a      	mov	r2, r3
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3301      	adds	r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d3b7      	bcc.n	8007cc0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f043 0210 	orr.w	r2, r3, #16
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <USB_DevInit+0x280>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f043 0208 	orr.w	r2, r3, #8
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d107      	bne.n	8007db2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007daa:	f043 0304 	orr.w	r3, r3, #4
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dbe:	b004      	add	sp, #16
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	803c3800 	.word	0x803c3800

08007dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <USB_FlushTxFifo+0x64>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e01b      	b.n	8007e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	daf2      	bge.n	8007dd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	019b      	lsls	r3, r3, #6
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a08      	ldr	r2, [pc, #32]	; (8007e2c <USB_FlushTxFifo+0x64>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d901      	bls.n	8007e12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e006      	b.n	8007e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d0f0      	beq.n	8007e00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	00030d40 	.word	0x00030d40

08007e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <USB_FlushRxFifo+0x5c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d901      	bls.n	8007e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e018      	b.n	8007e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	daf2      	bge.n	8007e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2210      	movs	r2, #16
 8007e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <USB_FlushRxFifo+0x5c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d901      	bls.n	8007e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e006      	b.n	8007e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d0f0      	beq.n	8007e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	00030d40 	.word	0x00030d40

08007e90 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007edc:	f023 0303 	bic.w	r3, r3, #3
 8007ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0301 	and.w	r3, r3, #1
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <USB_CoreReset+0x64>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e01b      	b.n	8007f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	daf2      	bge.n	8007f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f043 0201 	orr.w	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a09      	ldr	r2, [pc, #36]	; (8007f84 <USB_CoreReset+0x64>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d901      	bls.n	8007f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e006      	b.n	8007f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d0f0      	beq.n	8007f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	00030d40 	.word	0x00030d40

08007f88 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	4a06      	ldr	r2, [pc, #24]	; (8007fb0 <BSP_LED_On+0x28>)
 8007f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f9e:	b291      	uxth	r1, r2
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fb f928 	bl	80031f8 <HAL_GPIO_WritePin>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000014 	.word	0x20000014

08007fb4 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	4a06      	ldr	r2, [pc, #24]	; (8007fdc <BSP_LED_Off+0x28>)
 8007fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fca:	b291      	uxth	r1, r2
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fb f912 	bl	80031f8 <HAL_GPIO_WritePin>
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000014 	.word	0x20000014

08007fe0 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <BSP_COM_Init+0x2a>
 8007ff2:	4b2d      	ldr	r3, [pc, #180]	; (80080a8 <BSP_COM_Init+0xc8>)
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	4a2c      	ldr	r2, [pc, #176]	; (80080a8 <BSP_COM_Init+0xc8>)
 8007ff8:	f043 0302 	orr.w	r3, r3, #2
 8007ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ffe:	4b2a      	ldr	r3, [pc, #168]	; (80080a8 <BSP_COM_Init+0xc8>)
 8008000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10b      	bne.n	8008028 <BSP_COM_Init+0x48>
 8008010:	4b25      	ldr	r3, [pc, #148]	; (80080a8 <BSP_COM_Init+0xc8>)
 8008012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008014:	4a24      	ldr	r2, [pc, #144]	; (80080a8 <BSP_COM_Init+0xc8>)
 8008016:	f043 0302 	orr.w	r3, r3, #2
 800801a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800801c:	4b22      	ldr	r3, [pc, #136]	; (80080a8 <BSP_COM_Init+0xc8>)
 800801e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <BSP_COM_Init+0x66>
 800802e:	4b1e      	ldr	r3, [pc, #120]	; (80080a8 <BSP_COM_Init+0xc8>)
 8008030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008032:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <BSP_COM_Init+0xc8>)
 8008034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008038:	6613      	str	r3, [r2, #96]	; 0x60
 800803a:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <BSP_COM_Init+0xc8>)
 800803c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8008046:	2340      	movs	r3, #64	; 0x40
 8008048:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800804a:	2302      	movs	r3, #2
 800804c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800804e:	2302      	movs	r3, #2
 8008050:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8008056:	2307      	movs	r3, #7
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	4a13      	ldr	r2, [pc, #76]	; (80080ac <BSP_COM_Init+0xcc>)
 800805e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008062:	f107 0214 	add.w	r2, r7, #20
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f7fa fe0f 	bl	8002c8c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800806e:	2380      	movs	r3, #128	; 0x80
 8008070:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008072:	2302      	movs	r3, #2
 8008074:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8008076:	2307      	movs	r3, #7
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	4a0c      	ldr	r2, [pc, #48]	; (80080b0 <BSP_COM_Init+0xd0>)
 800807e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008082:	f107 0214 	add.w	r2, r7, #20
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f7fa fdff 	bl	8002c8c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	4a08      	ldr	r2, [pc, #32]	; (80080b4 <BSP_COM_Init+0xd4>)
 8008092:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800809a:	6838      	ldr	r0, [r7, #0]
 800809c:	f7fe ffad 	bl	8006ffa <HAL_UART_Init>
}
 80080a0:	bf00      	nop
 80080a2:	3728      	adds	r7, #40	; 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	40021000 	.word	0x40021000
 80080ac:	2000001c 	.word	0x2000001c
 80080b0:	20000020 	.word	0x20000020
 80080b4:	20000018 	.word	0x20000018

080080b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	; 0x28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80080c0:	4b27      	ldr	r3, [pc, #156]	; (8008160 <I2Cx_MspInit+0xa8>)
 80080c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c4:	4a26      	ldr	r2, [pc, #152]	; (8008160 <I2Cx_MspInit+0xa8>)
 80080c6:	f043 0302 	orr.w	r3, r3, #2
 80080ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080cc:	4b24      	ldr	r3, [pc, #144]	; (8008160 <I2Cx_MspInit+0xa8>)
 80080ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80080d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080dc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80080de:	2312      	movs	r3, #18
 80080e0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80080e2:	2301      	movs	r3, #1
 80080e4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e6:	2303      	movs	r3, #3
 80080e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80080ea:	2304      	movs	r3, #4
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80080ee:	f107 0314 	add.w	r3, r7, #20
 80080f2:	4619      	mov	r1, r3
 80080f4:	481b      	ldr	r0, [pc, #108]	; (8008164 <I2Cx_MspInit+0xac>)
 80080f6:	f7fa fdc9 	bl	8002c8c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80080fa:	f107 0314 	add.w	r3, r7, #20
 80080fe:	4619      	mov	r1, r3
 8008100:	4818      	ldr	r0, [pc, #96]	; (8008164 <I2Cx_MspInit+0xac>)
 8008102:	f7fa fdc3 	bl	8002c8c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008106:	4b16      	ldr	r3, [pc, #88]	; (8008160 <I2Cx_MspInit+0xa8>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	4a15      	ldr	r2, [pc, #84]	; (8008160 <I2Cx_MspInit+0xa8>)
 800810c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008110:	6593      	str	r3, [r2, #88]	; 0x58
 8008112:	4b13      	ldr	r3, [pc, #76]	; (8008160 <I2Cx_MspInit+0xa8>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800811e:	4b10      	ldr	r3, [pc, #64]	; (8008160 <I2Cx_MspInit+0xa8>)
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	4a0f      	ldr	r2, [pc, #60]	; (8008160 <I2Cx_MspInit+0xa8>)
 8008124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008128:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <I2Cx_MspInit+0xa8>)
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <I2Cx_MspInit+0xa8>)
 8008130:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008134:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8008136:	2200      	movs	r2, #0
 8008138:	210f      	movs	r1, #15
 800813a:	2021      	movs	r0, #33	; 0x21
 800813c:	f7fa fc13 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008140:	2021      	movs	r0, #33	; 0x21
 8008142:	f7fa fc2c 	bl	800299e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008146:	2200      	movs	r2, #0
 8008148:	210f      	movs	r1, #15
 800814a:	2022      	movs	r0, #34	; 0x22
 800814c:	f7fa fc0b 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8008150:	2022      	movs	r0, #34	; 0x22
 8008152:	f7fa fc24 	bl	800299e <HAL_NVIC_EnableIRQ>
}
 8008156:	bf00      	nop
 8008158:	3728      	adds	r7, #40	; 0x28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	40021000 	.word	0x40021000
 8008164:	48000400 	.word	0x48000400

08008168 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a12      	ldr	r2, [pc, #72]	; (80081bc <I2Cx_Init+0x54>)
 8008174:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a11      	ldr	r2, [pc, #68]	; (80081c0 <I2Cx_Init+0x58>)
 800817a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff89 	bl	80080b8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7fb f856 	bl	8003258 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80081ac:	2100      	movs	r1, #0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fb fe02 	bl	8003db8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40005800 	.word	0x40005800
 80081c0:	00702681 	.word	0x00702681

080081c4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af04      	add	r7, sp, #16
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	4608      	mov	r0, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	72fb      	strb	r3, [r7, #11]
 80081d6:	460b      	mov	r3, r1
 80081d8:	813b      	strh	r3, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80081e2:	7afb      	ldrb	r3, [r7, #11]
 80081e4:	b299      	uxth	r1, r3
 80081e6:	88f8      	ldrh	r0, [r7, #6]
 80081e8:	893a      	ldrh	r2, [r7, #8]
 80081ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081ee:	9302      	str	r3, [sp, #8]
 80081f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4603      	mov	r3, r0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7fb fa0a 	bl	8003614 <HAL_I2C_Mem_Read>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800820a:	7afb      	ldrb	r3, [r7, #11]
 800820c:	4619      	mov	r1, r3
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f832 	bl	8008278 <I2Cx_Error>
  }
  return status;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b08a      	sub	sp, #40	; 0x28
 8008222:	af04      	add	r7, sp, #16
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	461a      	mov	r2, r3
 800822c:	4603      	mov	r3, r0
 800822e:	72fb      	strb	r3, [r7, #11]
 8008230:	460b      	mov	r3, r1
 8008232:	813b      	strh	r3, [r7, #8]
 8008234:	4613      	mov	r3, r2
 8008236:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	b299      	uxth	r1, r3
 8008240:	88f8      	ldrh	r0, [r7, #6]
 8008242:	893a      	ldrh	r2, [r7, #8]
 8008244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008248:	9302      	str	r3, [sp, #8]
 800824a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	4603      	mov	r3, r0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7fb f8c9 	bl	80033ec <HAL_I2C_Mem_Write>
 800825a:	4603      	mov	r3, r0
 800825c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f805 	bl	8008278 <I2Cx_Error>
  }
  return status;
 800826e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fb f882 	bl	800338e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ff6c 	bl	8008168 <I2Cx_Init>
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800829c:	4802      	ldr	r0, [pc, #8]	; (80082a8 <SENSOR_IO_Init+0x10>)
 800829e:	f7ff ff63 	bl	8008168 <I2Cx_Init>
}
 80082a2:	bf00      	nop
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000d94 	.word	0x20000d94

080082ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]
 80082b6:	460b      	mov	r3, r1
 80082b8:	71bb      	strb	r3, [r7, #6]
 80082ba:	4613      	mov	r3, r2
 80082bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80082be:	79bb      	ldrb	r3, [r7, #6]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	79f9      	ldrb	r1, [r7, #7]
 80082c4:	2301      	movs	r3, #1
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	1d7b      	adds	r3, r7, #5
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2301      	movs	r3, #1
 80082ce:	4803      	ldr	r0, [pc, #12]	; (80082dc <SENSOR_IO_Write+0x30>)
 80082d0:	f7ff ffa5 	bl	800821e <I2Cx_WriteMultiple>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000d94 	.word	0x20000d94

080082e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	4603      	mov	r3, r0
 80082e8:	460a      	mov	r2, r1
 80082ea:	71fb      	strb	r3, [r7, #7]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80082f4:	79bb      	ldrb	r3, [r7, #6]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	79f9      	ldrb	r1, [r7, #7]
 80082fa:	2301      	movs	r3, #1
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	f107 030f 	add.w	r3, r7, #15
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2301      	movs	r3, #1
 8008306:	4804      	ldr	r0, [pc, #16]	; (8008318 <SENSOR_IO_Read+0x38>)
 8008308:	f7ff ff5c 	bl	80081c4 <I2Cx_ReadMultiple>

  return read_value;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000d94 	.word	0x20000d94

0800831c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af02      	add	r7, sp, #8
 8008322:	603a      	str	r2, [r7, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
 800832a:	460b      	mov	r3, r1
 800832c:	71bb      	strb	r3, [r7, #6]
 800832e:	4613      	mov	r3, r2
 8008330:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8008332:	79bb      	ldrb	r3, [r7, #6]
 8008334:	b29a      	uxth	r2, r3
 8008336:	79f9      	ldrb	r1, [r7, #7]
 8008338:	88bb      	ldrh	r3, [r7, #4]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	2301      	movs	r3, #1
 8008342:	4804      	ldr	r0, [pc, #16]	; (8008354 <SENSOR_IO_ReadMultiple+0x38>)
 8008344:	f7ff ff3e 	bl	80081c4 <I2Cx_ReadMultiple>
 8008348:	4603      	mov	r3, r0
 800834a:	b29b      	uxth	r3, r3
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000d94 	.word	0x20000d94

08008358 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <BSP_TSENSOR_Init+0x30>)
 8008364:	4a09      	ldr	r2, [pc, #36]	; (800838c <BSP_TSENSOR_Init+0x34>)
 8008366:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8008368:	f7ff ff96 	bl	8008298 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <BSP_TSENSOR_Init+0x30>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2100      	movs	r1, #0
 8008374:	20be      	movs	r0, #190	; 0xbe
 8008376:	4798      	blx	r3

  ret = TSENSOR_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800837c:	79fb      	ldrb	r3, [r7, #7]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000e70 	.word	0x20000e70
 800838c:	20000024 	.word	0x20000024

08008390 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8008394:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <BSP_TSENSOR_ReadTemp+0x18>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	20be      	movs	r0, #190	; 0xbe
 800839c:	4798      	blx	r3
 800839e:	eef0 7a40 	vmov.f32	s15, s0
}
 80083a2:	eeb0 0a67 	vmov.f32	s0, s15
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000e70 	.word	0x20000e70

080083ac <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2120      	movs	r1, #32
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff ff8e 	bl	80082e0 <SENSOR_IO_Read>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	f023 0304 	bic.w	r3, r3, #4
 80083ce:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	f043 0304 	orr.w	r3, r3, #4
 80083d6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083ee:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	7bfa      	ldrb	r2, [r7, #15]
 80083f6:	2120      	movs	r1, #32
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff ff57 	bl	80082ac <SENSOR_IO_Write>
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b088      	sub	sp, #32
 800840a:	af00      	add	r7, sp, #0
 800840c:	4603      	mov	r3, r0
 800840e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	b2d8      	uxtb	r0, r3
 8008414:	f107 0208 	add.w	r2, r7, #8
 8008418:	2302      	movs	r3, #2
 800841a:	21b2      	movs	r1, #178	; 0xb2
 800841c:	f7ff ff7e 	bl	800831c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8008420:	88fb      	ldrh	r3, [r7, #6]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2135      	movs	r1, #53	; 0x35
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff ff5a 	bl	80082e0 <SENSOR_IO_Read>
 800842c:	4603      	mov	r3, r0
 800842e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8008430:	7ffb      	ldrb	r3, [r7, #31]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	b21b      	sxth	r3, r3
 8008436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800843a:	b21a      	sxth	r2, r3
 800843c:	7a3b      	ldrb	r3, [r7, #8]
 800843e:	b21b      	sxth	r3, r3
 8008440:	4313      	orrs	r3, r2
 8008442:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8008444:	7ffb      	ldrb	r3, [r7, #31]
 8008446:	019b      	lsls	r3, r3, #6
 8008448:	b21b      	sxth	r3, r3
 800844a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844e:	b21a      	sxth	r2, r3
 8008450:	7a7b      	ldrb	r3, [r7, #9]
 8008452:	b21b      	sxth	r3, r3
 8008454:	4313      	orrs	r3, r2
 8008456:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8008458:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800845c:	10db      	asrs	r3, r3, #3
 800845e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8008460:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008464:	10db      	asrs	r3, r3, #3
 8008466:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	b2d8      	uxtb	r0, r3
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	2304      	movs	r3, #4
 8008472:	21bc      	movs	r1, #188	; 0xbc
 8008474:	f7ff ff52 	bl	800831c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008478:	7a7b      	ldrb	r3, [r7, #9]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	b21a      	sxth	r2, r3
 800847e:	7a3b      	ldrb	r3, [r7, #8]
 8008480:	b21b      	sxth	r3, r3
 8008482:	4313      	orrs	r3, r2
 8008484:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	b21a      	sxth	r2, r3
 800848c:	7abb      	ldrb	r3, [r7, #10]
 800848e:	b21b      	sxth	r3, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8008494:	88fb      	ldrh	r3, [r7, #6]
 8008496:	b2d8      	uxtb	r0, r3
 8008498:	f107 0208 	add.w	r2, r7, #8
 800849c:	2302      	movs	r3, #2
 800849e:	21aa      	movs	r1, #170	; 0xaa
 80084a0:	f7ff ff3c 	bl	800831c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80084a4:	7a7b      	ldrb	r3, [r7, #9]
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	b21a      	sxth	r2, r3
 80084aa:	7a3b      	ldrb	r3, [r7, #8]
 80084ac:	b21b      	sxth	r3, r3
 80084ae:	4313      	orrs	r3, r2
 80084b0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80084b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80084b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	ee07 3a90 	vmov	s15, r3
 80084c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80084c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80084da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80084de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008500:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	ee07 3a90 	vmov	s15, r3
}
 800850a:	eeb0 0a67 	vmov.f32	s0, s15
 800850e:	3720      	adds	r7, #32
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	2b2f      	cmp	r3, #47	; 0x2f
 8008522:	d906      	bls.n	8008532 <Hex2Num+0x1e>
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b39      	cmp	r3, #57	; 0x39
 8008528:	d803      	bhi.n	8008532 <Hex2Num+0x1e>
        return a - '0';
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	3b30      	subs	r3, #48	; 0x30
 800852e:	b2db      	uxtb	r3, r3
 8008530:	e014      	b.n	800855c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	2b60      	cmp	r3, #96	; 0x60
 8008536:	d906      	bls.n	8008546 <Hex2Num+0x32>
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b66      	cmp	r3, #102	; 0x66
 800853c:	d803      	bhi.n	8008546 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	3b57      	subs	r3, #87	; 0x57
 8008542:	b2db      	uxtb	r3, r3
 8008544:	e00a      	b.n	800855c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8008546:	79fb      	ldrb	r3, [r7, #7]
 8008548:	2b40      	cmp	r3, #64	; 0x40
 800854a:	d906      	bls.n	800855a <Hex2Num+0x46>
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	2b46      	cmp	r3, #70	; 0x46
 8008550:	d803      	bhi.n	800855a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	3b37      	subs	r3, #55	; 0x37
 8008556:	b2db      	uxtb	r3, r3
 8008558:	e000      	b.n	800855c <Hex2Num+0x48>
    }

    return 0;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800857a:	e012      	b.n	80085a2 <ParseHexNumber+0x3a>
        sum <<= 4;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ffc4 	bl	8008514 <Hex2Num>
 800858c:	4603      	mov	r3, r0
 800858e:	461a      	mov	r2, r3
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	4413      	add	r3, r2
 8008594:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3301      	adds	r3, #1
 800859a:	607b      	str	r3, [r7, #4]
        done_count++;
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	3301      	adds	r3, #1
 80085a0:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b2f      	cmp	r3, #47	; 0x2f
 80085a8:	d903      	bls.n	80085b2 <ParseHexNumber+0x4a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b39      	cmp	r3, #57	; 0x39
 80085b0:	d90f      	bls.n	80085d2 <ParseHexNumber+0x6a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b60      	cmp	r3, #96	; 0x60
 80085b8:	d903      	bls.n	80085c2 <ParseHexNumber+0x5a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b66      	cmp	r3, #102	; 0x66
 80085c0:	d907      	bls.n	80085d2 <ParseHexNumber+0x6a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d906      	bls.n	80085d8 <ParseHexNumber+0x70>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b46      	cmp	r3, #70	; 0x46
 80085d0:	d802      	bhi.n	80085d8 <ParseHexNumber+0x70>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d9d1      	bls.n	800857c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	7bba      	ldrb	r2, [r7, #14]
 80085e2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b2d      	cmp	r3, #45	; 0x2d
 800860a:	d119      	bne.n	8008640 <ParseNumber+0x52>
        minus = 1;
 800860c:	2301      	movs	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3301      	adds	r3, #1
 8008614:	607b      	str	r3, [r7, #4]
        done_count++;
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	3301      	adds	r3, #1
 800861a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 800861c:	e010      	b.n	8008640 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	4413      	add	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]
        ptr++;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3301      	adds	r3, #1
 8008638:	607b      	str	r3, [r7, #4]
        done_count++;
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	3301      	adds	r3, #1
 800863e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	2b2f      	cmp	r3, #47	; 0x2f
 8008646:	d903      	bls.n	8008650 <ParseNumber+0x62>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b39      	cmp	r3, #57	; 0x39
 800864e:	d9e6      	bls.n	800861e <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <ParseNumber+0x6e>
        *cnt = done_count;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	7bba      	ldrb	r2, [r7, #14]
 800865a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <ParseNumber+0x7a>
        return 0 - sum;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	425b      	negs	r3, r3
 8008666:	e000      	b.n	800866a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8008668:	68bb      	ldr	r3, [r7, #8]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8008676:	b590      	push	{r4, r7, lr}
 8008678:	b087      	sub	sp, #28
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d027      	beq.n	80086dc <ParseMAC+0x66>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d024      	beq.n	80086dc <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8008692:	e018      	b.n	80086c6 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8008694:	2301      	movs	r3, #1
 8008696:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b3a      	cmp	r3, #58	; 0x3a
 800869e:	d00d      	beq.n	80086bc <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	75fa      	strb	r2, [r7, #23]
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	189c      	adds	r4, r3, r2
 80086ac:	f107 0316 	add.w	r3, r7, #22
 80086b0:	4619      	mov	r1, r3
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7ff ff58 	bl	8008568 <ParseHexNumber>
 80086b8:	4603      	mov	r3, r0
 80086ba:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80086bc:	7dbb      	ldrb	r3, [r7, #22]
 80086be:	461a      	mov	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d906      	bls.n	80086dc <ParseMAC+0x66>
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	2b05      	cmp	r3, #5
 80086d2:	d803      	bhi.n	80086dc <ParseMAC+0x66>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1db      	bne.n	8008694 <ParseMAC+0x1e>
   }
  }
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd90      	pop	{r4, r7, pc}

080086e4 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d027      	beq.n	800874a <ParseIP+0x66>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d024      	beq.n	800874a <ParseIP+0x66>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b03      	cmp	r3, #3
 8008704:	d921      	bls.n	800874a <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8008706:	e019      	b.n	800873c <ParseIP+0x58>
    uint8_t done_count = 1;
 8008708:	2301      	movs	r3, #1
 800870a:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b2e      	cmp	r3, #46	; 0x2e
 8008712:	d00e      	beq.n	8008732 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8008714:	f107 0316 	add.w	r3, r7, #22
 8008718:	4619      	mov	r1, r3
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff ff67 	bl	80085ee <ParseNumber>
 8008720:	4601      	mov	r1, r0
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	75fa      	strb	r2, [r7, #23]
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	b2ca      	uxtb	r2, r1
 8008730:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8008732:	7dbb      	ldrb	r3, [r7, #22]
 8008734:	461a      	mov	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d803      	bhi.n	800874a <ParseIP+0x66>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1de      	bne.n	8008708 <ParseIP+0x24>
   }
  }
}
 800874a:	bf00      	nop
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	3302      	adds	r3, #2
 8008766:	4940      	ldr	r1, [pc, #256]	; (8008868 <AT_ParseInfo+0x114>)
 8008768:	4618      	mov	r0, r3
 800876a:	f007 fed5 	bl	8010518 <strtok>
 800876e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8008770:	e071      	b.n	8008856 <AT_ParseInfo+0x102>
    switch (num++) {
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	72fa      	strb	r2, [r7, #11]
 8008778:	2b06      	cmp	r3, #6
 800877a:	d866      	bhi.n	800884a <AT_ParseInfo+0xf6>
 800877c:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <AT_ParseInfo+0x30>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080087a1 	.word	0x080087a1
 8008788:	080087b5 	.word	0x080087b5
 800878c:	080087cd 	.word	0x080087cd
 8008790:	080087e5 	.word	0x080087e5
 8008794:	080087fd 	.word	0x080087fd
 8008798:	08008815 	.word	0x08008815
 800879c:	08008829 	.word	0x08008829
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	221f      	movs	r2, #31
 80087a4:	68f9      	ldr	r1, [r7, #12]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f007 fea2 	bl	80104f0 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	77da      	strb	r2, [r3, #31]
      break;
 80087b2:	e04b      	b.n	800884c <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3320      	adds	r3, #32
 80087b8:	2217      	movs	r2, #23
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	4618      	mov	r0, r3
 80087be:	f007 fe97 	bl	80104f0 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80087ca:	e03f      	b.n	800884c <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3338      	adds	r3, #56	; 0x38
 80087d0:	220f      	movs	r2, #15
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f007 fe8b 	bl	80104f0 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80087e2:	e033      	b.n	800884c <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3348      	adds	r3, #72	; 0x48
 80087e8:	220f      	movs	r2, #15
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f007 fe7f 	bl	80104f0 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 80087fa:	e027      	b.n	800884c <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3358      	adds	r3, #88	; 0x58
 8008800:	220f      	movs	r2, #15
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	4618      	mov	r0, r3
 8008806:	f007 fe73 	bl	80104f0 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8008812:	e01b      	b.n	800884c <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8008814:	2100      	movs	r1, #0
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fee9 	bl	80085ee <ParseNumber>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8008826:	e011      	b.n	800884c <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8008828:	4910      	ldr	r1, [pc, #64]	; (800886c <AT_ParseInfo+0x118>)
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f007 fe74 	bl	8010518 <strtok>
 8008830:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3368      	adds	r3, #104	; 0x68
 8008836:	221f      	movs	r2, #31
 8008838:	68f9      	ldr	r1, [r7, #12]
 800883a:	4618      	mov	r0, r3
 800883c:	f007 fe58 	bl	80104f0 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8008848:	e000      	b.n	800884c <AT_ParseInfo+0xf8>

    default: break;
 800884a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800884c:	4906      	ldr	r1, [pc, #24]	; (8008868 <AT_ParseInfo+0x114>)
 800884e:	2000      	movs	r0, #0
 8008850:	f007 fe62 	bl	8010518 <strtok>
 8008854:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d18a      	bne.n	8008772 <AT_ParseInfo+0x1e>
  }
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	08014104 	.word	0x08014104
 800886c:	08014108 	.word	0x08014108

08008870 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3302      	adds	r3, #2
 8008882:	4959      	ldr	r1, [pc, #356]	; (80089e8 <AT_ParseConnSettings+0x178>)
 8008884:	4618      	mov	r0, r3
 8008886:	f007 fe47 	bl	8010518 <strtok>
 800888a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800888c:	e0a2      	b.n	80089d4 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	73fa      	strb	r2, [r7, #15]
 8008894:	2b0b      	cmp	r3, #11
 8008896:	f200 808c 	bhi.w	80089b2 <AT_ParseConnSettings+0x142>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <AT_ParseConnSettings+0x30>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	080088e7 	.word	0x080088e7
 80088a8:	080088ff 	.word	0x080088ff
 80088ac:	08008913 	.word	0x08008913
 80088b0:	08008927 	.word	0x08008927
 80088b4:	0800893b 	.word	0x0800893b
 80088b8:	0800894b 	.word	0x0800894b
 80088bc:	0800895b 	.word	0x0800895b
 80088c0:	0800896b 	.word	0x0800896b
 80088c4:	0800897b 	.word	0x0800897b
 80088c8:	0800898b 	.word	0x0800898b
 80088cc:	0800899f 	.word	0x0800899f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2220      	movs	r2, #32
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f007 fe0a 	bl	80104f0 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80088e4:	e066      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	3321      	adds	r3, #33	; 0x21
 80088ea:	2220      	movs	r2, #32
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f007 fdfe 	bl	80104f0 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 80088fc:	e05a      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80088fe:	2100      	movs	r1, #0
 8008900:	68b8      	ldr	r0, [r7, #8]
 8008902:	f7ff fe74 	bl	80085ee <ParseNumber>
 8008906:	4603      	mov	r3, r0
 8008908:	b2da      	uxtb	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8008910:	e050      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8008912:	2100      	movs	r1, #0
 8008914:	68b8      	ldr	r0, [r7, #8]
 8008916:	f7ff fe6a 	bl	80085ee <ParseNumber>
 800891a:	4603      	mov	r3, r0
 800891c:	b2da      	uxtb	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8008924:	e046      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8008926:	2100      	movs	r1, #0
 8008928:	68b8      	ldr	r0, [r7, #8]
 800892a:	f7ff fe60 	bl	80085ee <ParseNumber>
 800892e:	4603      	mov	r3, r0
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8008938:	e03c      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	3348      	adds	r3, #72	; 0x48
 800893e:	2204      	movs	r2, #4
 8008940:	4619      	mov	r1, r3
 8008942:	68b8      	ldr	r0, [r7, #8]
 8008944:	f7ff fece 	bl	80086e4 <ParseIP>
      break;
 8008948:	e034      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	334c      	adds	r3, #76	; 0x4c
 800894e:	2204      	movs	r2, #4
 8008950:	4619      	mov	r1, r3
 8008952:	68b8      	ldr	r0, [r7, #8]
 8008954:	f7ff fec6 	bl	80086e4 <ParseIP>
      break;
 8008958:	e02c      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	3350      	adds	r3, #80	; 0x50
 800895e:	2204      	movs	r2, #4
 8008960:	4619      	mov	r1, r3
 8008962:	68b8      	ldr	r0, [r7, #8]
 8008964:	f7ff febe 	bl	80086e4 <ParseIP>
      break;
 8008968:	e024      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	3354      	adds	r3, #84	; 0x54
 800896e:	2204      	movs	r2, #4
 8008970:	4619      	mov	r1, r3
 8008972:	68b8      	ldr	r0, [r7, #8]
 8008974:	f7ff feb6 	bl	80086e4 <ParseIP>
      break;
 8008978:	e01c      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	3358      	adds	r3, #88	; 0x58
 800897e:	2204      	movs	r2, #4
 8008980:	4619      	mov	r1, r3
 8008982:	68b8      	ldr	r0, [r7, #8]
 8008984:	f7ff feae 	bl	80086e4 <ParseIP>
      break;
 8008988:	e014      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800898a:	2100      	movs	r1, #0
 800898c:	68b8      	ldr	r0, [r7, #8]
 800898e:	f7ff fe2e 	bl	80085ee <ParseNumber>
 8008992:	4603      	mov	r3, r0
 8008994:	b2da      	uxtb	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800899c:	e00a      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 800899e:	2100      	movs	r1, #0
 80089a0:	68b8      	ldr	r0, [r7, #8]
 80089a2:	f7ff fe24 	bl	80085ee <ParseNumber>
 80089a6:	4603      	mov	r3, r0
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80089b0:	e000      	b.n	80089b4 <AT_ParseConnSettings+0x144>

    default:
      break;
 80089b2:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80089b4:	490c      	ldr	r1, [pc, #48]	; (80089e8 <AT_ParseConnSettings+0x178>)
 80089b6:	2000      	movs	r0, #0
 80089b8:	f007 fdae 	bl	8010518 <strtok>
 80089bc:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <AT_ParseConnSettings+0x164>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b2c      	cmp	r3, #44	; 0x2c
 80089cc:	d102      	bne.n	80089d4 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	3301      	adds	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f47f af59 	bne.w	800888e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	08014104 	.word	0x08014104

080089ec <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d056      	beq.n	8008ab8 <AT_ExecuteCommand+0xcc>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d051      	beq.n	8008ab8 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008a1a:	68b8      	ldr	r0, [r7, #8]
 8008a1c:	f7f7 fc28 	bl	8000270 <strlen>
 8008a20:	4603      	mov	r3, r0
 8008a22:	b299      	uxth	r1, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	68b8      	ldr	r0, [r7, #8]
 8008a2e:	47a0      	blx	r4
 8008a30:	4603      	mov	r3, r0
 8008a32:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd3e      	ble.n	8008ab8 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008a46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8008a52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dd27      	ble.n	8008aaa <AT_ExecuteCommand+0xbe>
 8008a5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a62:	dc22      	bgt.n	8008aaa <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8008a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a6c:	d105      	bne.n	8008a7a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8008a6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8008a7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8008a86:	490f      	ldr	r1, [pc, #60]	; (8008ac4 <AT_ExecuteCommand+0xd8>)
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f007 fda1 	bl	80105d0 <strstr>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	e010      	b.n	8008aba <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8008a98:	490b      	ldr	r1, [pc, #44]	; (8008ac8 <AT_ExecuteCommand+0xdc>)
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f007 fd98 	bl	80105d0 <strstr>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008aa6:	2305      	movs	r3, #5
 8008aa8:	e007      	b.n	8008aba <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8008aaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008aae:	f113 0f04 	cmn.w	r3, #4
 8008ab2:	d101      	bne.n	8008ab8 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	e000      	b.n	8008aba <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8008ab8:	2304      	movs	r3, #4
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd90      	pop	{r4, r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	0801411c 	.word	0x0801411c
 8008ac8:	08014128 	.word	0x08014128

08008acc <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8008ae6:	68b8      	ldr	r0, [r7, #8]
 8008ae8:	f7f7 fbc2 	bl	8000270 <strlen>
 8008aec:	4603      	mov	r3, r0
 8008aee:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8008af0:	8a7b      	ldrh	r3, [r7, #18]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <AT_RequestSendData+0x32>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e05d      	b.n	8008bba <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d057      	beq.n	8008bb8 <AT_RequestSendData+0xec>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d052      	beq.n	8008bb8 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008b1e:	8a79      	ldrh	r1, [r7, #18]
 8008b20:	68b8      	ldr	r0, [r7, #8]
 8008b22:	4798      	blx	r3
 8008b24:	4603      	mov	r3, r0
 8008b26:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8008b28:	8a3a      	ldrh	r2, [r7, #16]
 8008b2a:	8a7b      	ldrh	r3, [r7, #18]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d143      	bne.n	8008bb8 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008b3c:	8879      	ldrh	r1, [r7, #2]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8008b46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b4a:	887b      	ldrh	r3, [r7, #2]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d131      	bne.n	8008bb4 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6a38      	ldr	r0, [r7, #32]
 8008b60:	4798      	blx	r3
 8008b62:	4603      	mov	r3, r0
 8008b64:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8008b66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dd19      	ble.n	8008ba2 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8008b6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	4413      	add	r3, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8008b7a:	4912      	ldr	r1, [pc, #72]	; (8008bc4 <AT_RequestSendData+0xf8>)
 8008b7c:	6a38      	ldr	r0, [r7, #32]
 8008b7e:	f007 fd27 	bl	80105d0 <strstr>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e016      	b.n	8008bba <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8008b8c:	490e      	ldr	r1, [pc, #56]	; (8008bc8 <AT_RequestSendData+0xfc>)
 8008b8e:	6a38      	ldr	r0, [r7, #32]
 8008b90:	f007 fd1e 	bl	80105d0 <strstr>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008b9a:	2305      	movs	r3, #5
 8008b9c:	e00d      	b.n	8008bba <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	e00b      	b.n	8008bba <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8008ba2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008ba6:	f113 0f04 	cmn.w	r3, #4
 8008baa:	d101      	bne.n	8008bb0 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8008bac:	2306      	movs	r3, #6
 8008bae:	e004      	b.n	8008bba <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e002      	b.n	8008bba <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e000      	b.n	8008bba <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8008bb8:	2304      	movs	r3, #4
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0801411c 	.word	0x0801411c
 8008bc8:	08014128 	.word	0x08014128

08008bcc <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8008bcc:	b590      	push	{r4, r7, lr}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008be0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8087 	beq.w	8008cfc <AT_RequestReceiveData+0x130>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8081 	beq.w	8008cfc <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8008c00:	68b8      	ldr	r0, [r7, #8]
 8008c02:	f7f7 fb35 	bl	8000270 <strlen>
 8008c06:	4603      	mov	r3, r0
 8008c08:	b299      	uxth	r1, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8008c10:	461a      	mov	r2, r3
 8008c12:	68b8      	ldr	r0, [r7, #8]
 8008c14:	47a0      	blx	r4
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dd6f      	ble.n	8008cfc <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6938      	ldr	r0, [r7, #16]
 8008c2c:	4798      	blx	r3
 8008c2e:	4603      	mov	r3, r0
 8008c30:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b0d      	cmp	r3, #13
 8008c38:	d104      	bne.n	8008c44 <AT_RequestReceiveData+0x78>
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b0a      	cmp	r3, #10
 8008c42:	d001      	beq.n	8008c48 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8008c44:	2304      	movs	r3, #4
 8008c46:	e05a      	b.n	8008cfe <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	3b02      	subs	r3, #2
 8008c4c:	617b      	str	r3, [r7, #20]
    p += 2;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	3302      	adds	r3, #2
 8008c52:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2b07      	cmp	r3, #7
 8008c58:	d94a      	bls.n	8008cf0 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8008c5a:	e002      	b.n	8008c62 <AT_RequestReceiveData+0x96>
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <AT_RequestReceiveData+0xaa>
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4413      	add	r3, r2
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b15      	cmp	r3, #21
 8008c74:	d0f2      	beq.n	8008c5c <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	3b08      	subs	r3, #8
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4413      	add	r3, r2
 8008c88:	491f      	ldr	r1, [pc, #124]	; (8008d08 <AT_RequestReceiveData+0x13c>)
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f007 fca0 	bl	80105d0 <strstr>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d016      	beq.n	8008cc4 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	3b08      	subs	r3, #8
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	887a      	ldrh	r2, [r7, #2]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d202      	bcs.n	8008cb2 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	887a      	ldrh	r2, [r7, #2]
 8008cb0:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6939      	ldr	r1, [r7, #16]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f007 fd15 	bl	80106ea <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e01c      	b.n	8008cfe <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	3b04      	subs	r3, #4
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4413      	add	r3, r2
 8008ccc:	2204      	movs	r2, #4
 8008cce:	490f      	ldr	r1, [pc, #60]	; (8008d0c <AT_RequestReceiveData+0x140>)
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f007 fbc9 	bl	8010468 <memcmp>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	2200      	movs	r2, #0
 8008ce0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008ce2:	2305      	movs	r3, #5
 8008ce4:	e00b      	b.n	8008cfe <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	2200      	movs	r2, #0
 8008cea:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008cec:	2305      	movs	r3, #5
 8008cee:	e006      	b.n	8008cfe <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f113 0f04 	cmn.w	r3, #4
 8008cf6:	d101      	bne.n	8008cfc <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8008cf8:	2306      	movs	r3, #6
 8008cfa:	e000      	b.n	8008cfe <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8008cfc:	2304      	movs	r3, #4
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd90      	pop	{r4, r7, pc}
 8008d06:	bf00      	nop
 8008d08:	0801411c 	.word	0x0801411c
 8008d0c:	08014130 	.word	0x08014130

08008d10 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f247 5230 	movw	r2, #30000	; 0x7530
 8008d22:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d01b      	beq.n	8008d68 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008d36:	2000      	movs	r0, #0
 8008d38:	4798      	blx	r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d113      	bne.n	8008d68 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d46:	461a      	mov	r2, r3
 8008d48:	490a      	ldr	r1, [pc, #40]	; (8008d74 <ES_WIFI_Init+0x64>)
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fe4e 	bl	80089ec <AT_ExecuteCommand>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff fcf6 	bl	8008754 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	08014138 	.word	0x08014138

08008d78 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <ES_WIFI_RegisterBusIO+0x2c>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d008      	beq.n	8008da4 <ES_WIFI_RegisterBusIO+0x2c>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <ES_WIFI_RegisterBusIO+0x2c>
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <ES_WIFI_RegisterBusIO+0x2c>
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8008da4:	2302      	movs	r3, #2
 8008da6:	e014      	b.n	8008dd2 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	4932      	ldr	r1, [pc, #200]	; (8008ec0 <ES_WIFI_Connect+0xe0>)
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f007 fa3d 	bl	8010278 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff fded 	bl	80089ec <AT_ExecuteCommand>
 8008e12:	4603      	mov	r3, r0
 8008e14:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d14b      	bne.n	8008eb4 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4927      	ldr	r1, [pc, #156]	; (8008ec4 <ES_WIFI_Connect+0xe4>)
 8008e26:	4618      	mov	r0, r3
 8008e28:	f007 fa26 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fdd6 	bl	80089ec <AT_ExecuteCommand>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d134      	bne.n	8008eb4 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	78fa      	ldrb	r2, [r7, #3]
 8008e4e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	491b      	ldr	r1, [pc, #108]	; (8008ec8 <ES_WIFI_Connect+0xe8>)
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f007 fa0b 	bl	8010278 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e6e:	461a      	mov	r2, r3
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f7ff fdbb 	bl	80089ec <AT_ExecuteCommand>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d119      	bne.n	8008eb4 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e86:	4911      	ldr	r1, [pc, #68]	; (8008ecc <ES_WIFI_Connect+0xec>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f007 f9f5 	bl	8010278 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fda5 	bl	80089ec <AT_ExecuteCommand>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	08014150 	.word	0x08014150
 8008ec4:	08014158 	.word	0x08014158
 8008ec8:	08014160 	.word	0x08014160
 8008ecc:	08014168 	.word	0x08014168

08008ed0 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ede:	4913      	ldr	r1, [pc, #76]	; (8008f2c <ES_WIFI_IsConnected+0x5c>)
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f007 f9c9 	bl	8010278 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7ff fd79 	bl	80089ec <AT_ExecuteCommand>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10b      	bne.n	8008f1c <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8008f0a:	2b31      	cmp	r3, #49	; 0x31
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2301      	moveq	r3, #1
 8008f10:	2300      	movne	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	0801416c 	.word	0x0801416c

08008f30 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008f3e:	4910      	ldr	r1, [pc, #64]	; (8008f80 <ES_WIFI_GetNetworkSettings+0x50>)
 8008f40:	4618      	mov	r0, r3
 8008f42:	f007 f999 	bl	8010278 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008f52:	461a      	mov	r2, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fd49 	bl	80089ec <AT_ExecuteCommand>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d108      	bne.n	8008f76 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	338d      	adds	r3, #141	; 0x8d
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7ff fc7d 	bl	8008870 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	08014174 	.word	0x08014174

08008f84 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008f98:	4913      	ldr	r1, [pc, #76]	; (8008fe8 <ES_WIFI_GetMACAddress+0x64>)
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f007 f96c 	bl	8010278 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008fac:	461a      	mov	r2, r3
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff fd1c 	bl	80089ec <AT_ExecuteCommand>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10e      	bne.n	8008fdc <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	4909      	ldr	r1, [pc, #36]	; (8008fec <ES_WIFI_GetMACAddress+0x68>)
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f007 faa5 	bl	8010518 <strtok>
 8008fce:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	6938      	ldr	r0, [r7, #16]
 8008fd8:	f7ff fb4d 	bl	8008676 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	080141c4 	.word	0x080141c4
 8008fec:	080141c8 	.word	0x080141c8

08008ff0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <ES_WIFI_StartClientConnection+0x1e>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d105      	bne.n	800901a <ES_WIFI_StartClientConnection+0x2a>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <ES_WIFI_StartClientConnection+0x2a>
 8009016:	2302      	movs	r3, #2
 8009018:	e0c1      	b.n	800919e <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	461a      	mov	r2, r3
 8009026:	4960      	ldr	r1, [pc, #384]	; (80091a8 <ES_WIFI_StartClientConnection+0x1b8>)
 8009028:	f007 f926 	bl	8010278 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009038:	461a      	mov	r2, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fcd6 	bl	80089ec <AT_ExecuteCommand>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d114      	bne.n	8009074 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	4955      	ldr	r1, [pc, #340]	; (80091ac <ES_WIFI_StartClientConnection+0x1bc>)
 8009058:	f007 f90e 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009068:	461a      	mov	r2, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff fcbe 	bl	80089ec <AT_ExecuteCommand>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d114      	bne.n	80090a4 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	889b      	ldrh	r3, [r3, #4]
 8009084:	461a      	mov	r2, r3
 8009086:	494a      	ldr	r1, [pc, #296]	; (80091b0 <ES_WIFI_StartClientConnection+0x1c0>)
 8009088:	f007 f8f6 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009098:	461a      	mov	r2, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fca6 	bl	80089ec <AT_ExecuteCommand>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d11c      	bne.n	80090e4 <ES_WIFI_StartClientConnection+0xf4>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <ES_WIFI_StartClientConnection+0xca>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d114      	bne.n	80090e4 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	461a      	mov	r2, r3
 80090c6:	493b      	ldr	r1, [pc, #236]	; (80091b4 <ES_WIFI_StartClientConnection+0x1c4>)
 80090c8:	f007 f8d6 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80090d8:	461a      	mov	r2, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff fc86 	bl	80089ec <AT_ExecuteCommand>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d128      	bne.n	800913c <ES_WIFI_StartClientConnection+0x14c>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <ES_WIFI_StartClientConnection+0x10a>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d120      	bne.n	800913c <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	799b      	ldrb	r3, [r3, #6]
 8009104:	4619      	mov	r1, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	79db      	ldrb	r3, [r3, #7]
 800910a:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8009110:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	9200      	str	r2, [sp, #0]
 800911a:	4623      	mov	r3, r4
 800911c:	460a      	mov	r2, r1
 800911e:	4926      	ldr	r1, [pc, #152]	; (80091b8 <ES_WIFI_StartClientConnection+0x1c8>)
 8009120:	f007 f8aa 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009130:	461a      	mov	r2, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff fc5a 	bl	80089ec <AT_ExecuteCommand>
 8009138:	4603      	mov	r3, r0
 800913a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d116      	bne.n	8009170 <ES_WIFI_StartClientConnection+0x180>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b03      	cmp	r3, #3
 8009148:	d112      	bne.n	8009170 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009150:	491a      	ldr	r1, [pc, #104]	; (80091bc <ES_WIFI_StartClientConnection+0x1cc>)
 8009152:	4618      	mov	r0, r3
 8009154:	f007 f890 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009164:	461a      	mov	r2, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff fc40 	bl	80089ec <AT_ExecuteCommand>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d112      	bne.n	800919c <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800917c:	4910      	ldr	r1, [pc, #64]	; (80091c0 <ES_WIFI_StartClientConnection+0x1d0>)
 800917e:	4618      	mov	r0, r3
 8009180:	f007 f87a 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009190:	461a      	mov	r2, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff fc2a 	bl	80089ec <AT_ExecuteCommand>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd90      	pop	{r4, r7, pc}
 80091a6:	bf00      	nop
 80091a8:	0801422c 	.word	0x0801422c
 80091ac:	08014234 	.word	0x08014234
 80091b0:	0801423c 	.word	0x0801423c
 80091b4:	08014244 	.word	0x08014244
 80091b8:	0801424c 	.word	0x0801424c
 80091bc:	0801425c 	.word	0x0801425c
 80091c0:	08014264 	.word	0x08014264

080091c4 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607a      	str	r2, [r7, #4]
 80091ce:	461a      	mov	r2, r3
 80091d0:	460b      	mov	r3, r1
 80091d2:	72fb      	strb	r3, [r7, #11]
 80091d4:	4613      	mov	r3, r2
 80091d6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80091d8:	2302      	movs	r3, #2
 80091da:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d102      	bne.n	80091e8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80091e2:	2301      	movs	r3, #1
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e001      	b.n	80091ec <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80091ec:	893b      	ldrh	r3, [r7, #8]
 80091ee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80091f2:	d302      	bcc.n	80091fa <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 80091f4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80091f8:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	893a      	ldrh	r2, [r7, #8]
 80091fe:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009206:	7afa      	ldrb	r2, [r7, #11]
 8009208:	4942      	ldr	r1, [pc, #264]	; (8009314 <ES_WIFI_SendData+0x150>)
 800920a:	4618      	mov	r0, r3
 800920c:	f007 f834 	bl	8010278 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800921c:	461a      	mov	r2, r3
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff fbe4 	bl	80089ec <AT_ExecuteCommand>
 8009224:	4603      	mov	r3, r0
 8009226:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8009228:	7cfb      	ldrb	r3, [r7, #19]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d15e      	bne.n	80092ec <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4938      	ldr	r1, [pc, #224]	; (8009318 <ES_WIFI_SendData+0x154>)
 8009238:	4618      	mov	r0, r3
 800923a:	f007 f81d 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800924a:	461a      	mov	r2, r3
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7ff fbcd 	bl	80089ec <AT_ExecuteCommand>
 8009252:	4603      	mov	r3, r0
 8009254:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8009256:	7cfb      	ldrb	r3, [r7, #19]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d13d      	bne.n	80092d8 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009262:	893a      	ldrh	r2, [r7, #8]
 8009264:	492d      	ldr	r1, [pc, #180]	; (800931c <ES_WIFI_SendData+0x158>)
 8009266:	4618      	mov	r0, r3
 8009268:	f007 f806 	bl	8010278 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009278:	893a      	ldrh	r2, [r7, #8]
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff fc23 	bl	8008acc <AT_RequestSendData>
 8009286:	4603      	mov	r3, r0
 8009288:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800928a:	7cfb      	ldrb	r3, [r7, #19]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d119      	bne.n	80092c4 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009296:	4922      	ldr	r1, [pc, #136]	; (8009320 <ES_WIFI_SendData+0x15c>)
 8009298:	4618      	mov	r0, r3
 800929a:	f007 f999 	bl	80105d0 <strstr>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d02c      	beq.n	80092fe <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80092a4:	f640 1201 	movw	r2, #2305	; 0x901
 80092a8:	491e      	ldr	r1, [pc, #120]	; (8009324 <ES_WIFI_SendData+0x160>)
 80092aa:	481f      	ldr	r0, [pc, #124]	; (8009328 <ES_WIFI_SendData+0x164>)
 80092ac:	f006 ff76 	bl	801019c <iprintf>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80092b6:	4619      	mov	r1, r3
 80092b8:	481c      	ldr	r0, [pc, #112]	; (800932c <ES_WIFI_SendData+0x168>)
 80092ba:	f006 ff6f 	bl	801019c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80092be:	2302      	movs	r3, #2
 80092c0:	74fb      	strb	r3, [r7, #19]
 80092c2:	e01c      	b.n	80092fe <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80092c4:	f640 1207 	movw	r2, #2311	; 0x907
 80092c8:	4916      	ldr	r1, [pc, #88]	; (8009324 <ES_WIFI_SendData+0x160>)
 80092ca:	4817      	ldr	r0, [pc, #92]	; (8009328 <ES_WIFI_SendData+0x164>)
 80092cc:	f006 ff66 	bl	801019c <iprintf>
 80092d0:	4817      	ldr	r0, [pc, #92]	; (8009330 <ES_WIFI_SendData+0x16c>)
 80092d2:	f006 ffc9 	bl	8010268 <puts>
 80092d6:	e012      	b.n	80092fe <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80092d8:	f640 120c 	movw	r2, #2316	; 0x90c
 80092dc:	4911      	ldr	r1, [pc, #68]	; (8009324 <ES_WIFI_SendData+0x160>)
 80092de:	4812      	ldr	r0, [pc, #72]	; (8009328 <ES_WIFI_SendData+0x164>)
 80092e0:	f006 ff5c 	bl	801019c <iprintf>
 80092e4:	4813      	ldr	r0, [pc, #76]	; (8009334 <ES_WIFI_SendData+0x170>)
 80092e6:	f006 ffbf 	bl	8010268 <puts>
 80092ea:	e008      	b.n	80092fe <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80092ec:	f640 1211 	movw	r2, #2321	; 0x911
 80092f0:	490c      	ldr	r1, [pc, #48]	; (8009324 <ES_WIFI_SendData+0x160>)
 80092f2:	480d      	ldr	r0, [pc, #52]	; (8009328 <ES_WIFI_SendData+0x164>)
 80092f4:	f006 ff52 	bl	801019c <iprintf>
 80092f8:	480f      	ldr	r0, [pc, #60]	; (8009338 <ES_WIFI_SendData+0x174>)
 80092fa:	f006 ffb5 	bl	8010268 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80092fe:	7cfb      	ldrb	r3, [r7, #19]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d102      	bne.n	800930a <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2200      	movs	r2, #0
 8009308:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 800930a:	7cfb      	ldrb	r3, [r7, #19]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	0801422c 	.word	0x0801422c
 8009318:	080143e4 	.word	0x080143e4
 800931c:	080143ec 	.word	0x080143ec
 8009320:	080143f8 	.word	0x080143f8
 8009324:	080142bc 	.word	0x080142bc
 8009328:	080142d8 	.word	0x080142d8
 800932c:	08014400 	.word	0x08014400
 8009330:	0801441c 	.word	0x0801441c
 8009334:	08014438 	.word	0x08014438
 8009338:	0801444c 	.word	0x0801444c

0800933c <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af02      	add	r7, sp, #8
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	461a      	mov	r2, r3
 8009348:	460b      	mov	r3, r1
 800934a:	72fb      	strb	r3, [r7, #11]
 800934c:	4613      	mov	r3, r2
 800934e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8009350:	2302      	movs	r3, #2
 8009352:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800935a:	2301      	movs	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
 800935e:	e001      	b.n	8009364 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8009364:	893b      	ldrh	r3, [r7, #8]
 8009366:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800936a:	f200 808b 	bhi.w	8009484 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8009374:	7afa      	ldrb	r2, [r7, #11]
 8009376:	4946      	ldr	r1, [pc, #280]	; (8009490 <ES_WIFI_ReceiveData+0x154>)
 8009378:	4618      	mov	r0, r3
 800937a:	f006 ff7d 	bl	8010278 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800938a:	461a      	mov	r2, r3
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff fb2d 	bl	80089ec <AT_ExecuteCommand>
 8009392:	4603      	mov	r3, r0
 8009394:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8009396:	7cfb      	ldrb	r3, [r7, #19]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d165      	bne.n	8009468 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093a2:	893a      	ldrh	r2, [r7, #8]
 80093a4:	493b      	ldr	r1, [pc, #236]	; (8009494 <ES_WIFI_ReceiveData+0x158>)
 80093a6:	4618      	mov	r0, r3
 80093a8:	f006 ff66 	bl	8010278 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093b8:	461a      	mov	r2, r3
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7ff fb16 	bl	80089ec <AT_ExecuteCommand>
 80093c0:	4603      	mov	r3, r0
 80093c2:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 80093c4:	7cfb      	ldrb	r3, [r7, #19]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d141      	bne.n	800944e <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4931      	ldr	r1, [pc, #196]	; (8009498 <ES_WIFI_ReceiveData+0x15c>)
 80093d4:	4618      	mov	r0, r3
 80093d6:	f006 ff4f 	bl	8010278 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093e6:	461a      	mov	r2, r3
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff faff 	bl	80089ec <AT_ExecuteCommand>
 80093ee:	4603      	mov	r3, r0
 80093f0:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 80093f2:	7cfb      	ldrb	r3, [r7, #19]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d120      	bne.n	800943a <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80093fe:	4927      	ldr	r1, [pc, #156]	; (800949c <ES_WIFI_ReceiveData+0x160>)
 8009400:	4618      	mov	r0, r3
 8009402:	f006 ff39 	bl	8010278 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800940c:	893a      	ldrh	r2, [r7, #8]
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	4613      	mov	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff fbd8 	bl	8008bcc <AT_RequestReceiveData>
 800941c:	4603      	mov	r3, r0
 800941e:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8009420:	7cfb      	ldrb	r3, [r7, #19]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d02e      	beq.n	8009484 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8009426:	f640 12a9 	movw	r2, #2473	; 0x9a9
 800942a:	491d      	ldr	r1, [pc, #116]	; (80094a0 <ES_WIFI_ReceiveData+0x164>)
 800942c:	481d      	ldr	r0, [pc, #116]	; (80094a4 <ES_WIFI_ReceiveData+0x168>)
 800942e:	f006 feb5 	bl	801019c <iprintf>
 8009432:	481d      	ldr	r0, [pc, #116]	; (80094a8 <ES_WIFI_ReceiveData+0x16c>)
 8009434:	f006 ff18 	bl	8010268 <puts>
 8009438:	e024      	b.n	8009484 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 800943a:	f640 12ae 	movw	r2, #2478	; 0x9ae
 800943e:	4918      	ldr	r1, [pc, #96]	; (80094a0 <ES_WIFI_ReceiveData+0x164>)
 8009440:	4818      	ldr	r0, [pc, #96]	; (80094a4 <ES_WIFI_ReceiveData+0x168>)
 8009442:	f006 feab 	bl	801019c <iprintf>
 8009446:	4819      	ldr	r0, [pc, #100]	; (80094ac <ES_WIFI_ReceiveData+0x170>)
 8009448:	f006 ff0e 	bl	8010268 <puts>
 800944c:	e01a      	b.n	8009484 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 800944e:	f640 12b3 	movw	r2, #2483	; 0x9b3
 8009452:	4913      	ldr	r1, [pc, #76]	; (80094a0 <ES_WIFI_ReceiveData+0x164>)
 8009454:	4813      	ldr	r0, [pc, #76]	; (80094a4 <ES_WIFI_ReceiveData+0x168>)
 8009456:	f006 fea1 	bl	801019c <iprintf>
 800945a:	4815      	ldr	r0, [pc, #84]	; (80094b0 <ES_WIFI_ReceiveData+0x174>)
 800945c:	f006 ff04 	bl	8010268 <puts>
        *Receivedlen = 0;
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	2200      	movs	r2, #0
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	e00d      	b.n	8009484 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8009468:	f640 12b9 	movw	r2, #2489	; 0x9b9
 800946c:	490c      	ldr	r1, [pc, #48]	; (80094a0 <ES_WIFI_ReceiveData+0x164>)
 800946e:	480d      	ldr	r0, [pc, #52]	; (80094a4 <ES_WIFI_ReceiveData+0x168>)
 8009470:	f006 fe94 	bl	801019c <iprintf>
 8009474:	480f      	ldr	r0, [pc, #60]	; (80094b4 <ES_WIFI_ReceiveData+0x178>)
 8009476:	f006 fef7 	bl	8010268 <puts>
      issue15++;
 800947a:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <ES_WIFI_ReceiveData+0x17c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3301      	adds	r3, #1
 8009480:	4a0d      	ldr	r2, [pc, #52]	; (80094b8 <ES_WIFI_ReceiveData+0x17c>)
 8009482:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8009484:	7cfb      	ldrb	r3, [r7, #19]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	0801422c 	.word	0x0801422c
 8009494:	08014470 	.word	0x08014470
 8009498:	08014478 	.word	0x08014478
 800949c:	08014480 	.word	0x08014480
 80094a0:	080142bc 	.word	0x080142bc
 80094a4:	080142d8 	.word	0x080142d8
 80094a8:	08014484 	.word	0x08014484
 80094ac:	080144a4 	.word	0x080144a4
 80094b0:	080144bc 	.word	0x080144bc
 80094b4:	080144dc 	.word	0x080144dc
 80094b8:	20000e74 	.word	0x20000e74

080094bc <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80094c4:	4b57      	ldr	r3, [pc, #348]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c8:	4a56      	ldr	r2, [pc, #344]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ce:	6593      	str	r3, [r2, #88]	; 0x58
 80094d0:	4b54      	ldr	r3, [pc, #336]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094dc:	4b51      	ldr	r3, [pc, #324]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e0:	4a50      	ldr	r2, [pc, #320]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094e2:	f043 0302 	orr.w	r3, r3, #2
 80094e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094e8:	4b4e      	ldr	r3, [pc, #312]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80094f4:	4b4b      	ldr	r3, [pc, #300]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f8:	4a4a      	ldr	r2, [pc, #296]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 80094fa:	f043 0304 	orr.w	r3, r3, #4
 80094fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009500:	4b48      	ldr	r3, [pc, #288]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 8009502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800950c:	4b45      	ldr	r3, [pc, #276]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 800950e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009510:	4a44      	ldr	r2, [pc, #272]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 8009512:	f043 0310 	orr.w	r3, r3, #16
 8009516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009518:	4b42      	ldr	r3, [pc, #264]	; (8009624 <SPI_WIFI_MspInit+0x168>)
 800951a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8009524:	2200      	movs	r2, #0
 8009526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800952a:	483f      	ldr	r0, [pc, #252]	; (8009628 <SPI_WIFI_MspInit+0x16c>)
 800952c:	f7f9 fe64 	bl	80031f8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8009530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009534:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009536:	2301      	movs	r3, #1
 8009538:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800953a:	2300      	movs	r3, #0
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800953e:	2300      	movs	r3, #0
 8009540:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8009542:	f107 031c 	add.w	r3, r7, #28
 8009546:	4619      	mov	r1, r3
 8009548:	4837      	ldr	r0, [pc, #220]	; (8009628 <SPI_WIFI_MspInit+0x16c>)
 800954a:	f7f9 fb9f 	bl	8002c8c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800954e:	2302      	movs	r3, #2
 8009550:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8009552:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009556:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009558:	2300      	movs	r3, #0
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800955c:	2300      	movs	r3, #0
 800955e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8009560:	f107 031c 	add.w	r3, r7, #28
 8009564:	4619      	mov	r1, r3
 8009566:	4831      	ldr	r0, [pc, #196]	; (800962c <SPI_WIFI_MspInit+0x170>)
 8009568:	f7f9 fb90 	bl	8002c8c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800956c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009570:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8009572:	2301      	movs	r3, #1
 8009574:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8009576:	2300      	movs	r3, #0
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800957a:	2300      	movs	r3, #0
 800957c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8009582:	f107 031c 	add.w	r3, r7, #28
 8009586:	4619      	mov	r1, r3
 8009588:	4828      	ldr	r0, [pc, #160]	; (800962c <SPI_WIFI_MspInit+0x170>)
 800958a:	f7f9 fb7f 	bl	8002c8c <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800958e:	2201      	movs	r2, #1
 8009590:	2101      	movs	r1, #1
 8009592:	4826      	ldr	r0, [pc, #152]	; (800962c <SPI_WIFI_MspInit+0x170>)
 8009594:	f7f9 fe30 	bl	80031f8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8009598:	2301      	movs	r3, #1
 800959a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800959c:	2301      	movs	r3, #1
 800959e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80095a4:	2301      	movs	r3, #1
 80095a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80095a8:	f107 031c 	add.w	r3, r7, #28
 80095ac:	4619      	mov	r1, r3
 80095ae:	481f      	ldr	r0, [pc, #124]	; (800962c <SPI_WIFI_MspInit+0x170>)
 80095b0:	f7f9 fb6c 	bl	8002c8c <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80095b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80095ba:	2302      	movs	r3, #2
 80095bc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80095c2:	2301      	movs	r3, #1
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80095c6:	2306      	movs	r3, #6
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80095ca:	f107 031c 	add.w	r3, r7, #28
 80095ce:	4619      	mov	r1, r3
 80095d0:	4817      	ldr	r0, [pc, #92]	; (8009630 <SPI_WIFI_MspInit+0x174>)
 80095d2:	f7f9 fb5b 	bl	8002c8c <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80095d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095da:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80095dc:	2302      	movs	r3, #2
 80095de:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80095e4:	2301      	movs	r3, #1
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80095e8:	2306      	movs	r3, #6
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80095ec:	f107 031c 	add.w	r3, r7, #28
 80095f0:	4619      	mov	r1, r3
 80095f2:	480f      	ldr	r0, [pc, #60]	; (8009630 <SPI_WIFI_MspInit+0x174>)
 80095f4:	f7f9 fb4a 	bl	8002c8c <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80095f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095fc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80095fe:	2302      	movs	r3, #2
 8009600:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8009602:	2301      	movs	r3, #1
 8009604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8009606:	2301      	movs	r3, #1
 8009608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800960a:	2306      	movs	r3, #6
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800960e:	f107 031c 	add.w	r3, r7, #28
 8009612:	4619      	mov	r1, r3
 8009614:	4806      	ldr	r0, [pc, #24]	; (8009630 <SPI_WIFI_MspInit+0x174>)
 8009616:	f7f9 fb39 	bl	8002c8c <HAL_GPIO_Init>
}
 800961a:	bf00      	nop
 800961c:	3730      	adds	r7, #48	; 0x30
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	40021000 	.word	0x40021000
 8009628:	48000400 	.word	0x48000400
 800962c:	48001000 	.word	0x48001000
 8009630:	48000800 	.word	0x48000800

08009634 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d145      	bne.n	80096d4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8009648:	4b27      	ldr	r3, [pc, #156]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 800964a:	4a28      	ldr	r2, [pc, #160]	; (80096ec <SPI_WIFI_Init+0xb8>)
 800964c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800964e:	4826      	ldr	r0, [pc, #152]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009650:	f7ff ff34 	bl	80094bc <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8009654:	4b24      	ldr	r3, [pc, #144]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009656:	f44f 7282 	mov.w	r2, #260	; 0x104
 800965a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800965c:	4b22      	ldr	r3, [pc, #136]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 800965e:	2200      	movs	r2, #0
 8009660:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8009662:	4b21      	ldr	r3, [pc, #132]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009664:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009668:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800966a:	4b1f      	ldr	r3, [pc, #124]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 800966c:	2200      	movs	r2, #0
 800966e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8009670:	4b1d      	ldr	r3, [pc, #116]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009672:	2200      	movs	r2, #0
 8009674:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8009676:	4b1c      	ldr	r3, [pc, #112]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800967c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800967e:	4b1a      	ldr	r3, [pc, #104]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009680:	2210      	movs	r2, #16
 8009682:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8009684:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009686:	2200      	movs	r2, #0
 8009688:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800968a:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 800968c:	2200      	movs	r2, #0
 800968e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8009690:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009692:	2200      	movs	r2, #0
 8009694:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 8009698:	2200      	movs	r2, #0
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800969c:	4812      	ldr	r0, [pc, #72]	; (80096e8 <SPI_WIFI_Init+0xb4>)
 800969e:	f7fc f977 	bl	8005990 <HAL_SPI_Init>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80096a8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ac:	e018      	b.n	80096e0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	2007      	movs	r0, #7
 80096b4:	f7f9 f957 	bl	8002966 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80096b8:	2007      	movs	r0, #7
 80096ba:	f7f9 f970 	bl	800299e <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80096be:	2200      	movs	r2, #0
 80096c0:	2100      	movs	r1, #0
 80096c2:	2033      	movs	r0, #51	; 0x33
 80096c4:	f7f9 f94f 	bl	8002966 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80096c8:	2033      	movs	r0, #51	; 0x33
 80096ca:	f7f9 f968 	bl	800299e <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80096ce:	200a      	movs	r0, #10
 80096d0:	f000 f9fe 	bl	8009ad0 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 80096d4:	f000 f80c 	bl	80096f0 <SPI_WIFI_ResetModule>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]

  return rc;
 80096dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000e78 	.word	0x20000e78
 80096ec:	40003c00 	.word	0x40003c00

080096f0 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80096f6:	f7f9 f807 	bl	8002708 <HAL_GetTick>
 80096fa:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8009700:	2200      	movs	r2, #0
 8009702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009706:	4830      	ldr	r0, [pc, #192]	; (80097c8 <SPI_WIFI_ResetModule+0xd8>)
 8009708:	f7f9 fd76 	bl	80031f8 <HAL_GPIO_WritePin>
 800970c:	200a      	movs	r0, #10
 800970e:	f7f9 f807 	bl	8002720 <HAL_Delay>
 8009712:	2201      	movs	r2, #1
 8009714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009718:	482b      	ldr	r0, [pc, #172]	; (80097c8 <SPI_WIFI_ResetModule+0xd8>)
 800971a:	f7f9 fd6d 	bl	80031f8 <HAL_GPIO_WritePin>
 800971e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009722:	f7f8 fffd 	bl	8002720 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8009726:	2200      	movs	r2, #0
 8009728:	2101      	movs	r1, #1
 800972a:	4827      	ldr	r0, [pc, #156]	; (80097c8 <SPI_WIFI_ResetModule+0xd8>)
 800972c:	f7f9 fd64 	bl	80031f8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009730:	200f      	movs	r0, #15
 8009732:	f000 f9cd 	bl	8009ad0 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8009736:	e020      	b.n	800977a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	463a      	mov	r2, r7
 800973c:	18d1      	adds	r1, r2, r3
 800973e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009742:	2201      	movs	r2, #1
 8009744:	4821      	ldr	r0, [pc, #132]	; (80097cc <SPI_WIFI_ResetModule+0xdc>)
 8009746:	f7fc f9ee 	bl	8005b26 <HAL_SPI_Receive>
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	3302      	adds	r3, #2
 8009752:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8009754:	f7f8 ffd8 	bl	8002708 <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009762:	d202      	bcs.n	800976a <SPI_WIFI_ResetModule+0x7a>
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800976a:	2201      	movs	r2, #1
 800976c:	2101      	movs	r1, #1
 800976e:	4816      	ldr	r0, [pc, #88]	; (80097c8 <SPI_WIFI_ResetModule+0xd8>)
 8009770:	f7f9 fd42 	bl	80031f8 <HAL_GPIO_WritePin>
      return -1;
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	e021      	b.n	80097be <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800977a:	2102      	movs	r1, #2
 800977c:	4812      	ldr	r0, [pc, #72]	; (80097c8 <SPI_WIFI_ResetModule+0xd8>)
 800977e:	f7f9 fd23 	bl	80031c8 <HAL_GPIO_ReadPin>
 8009782:	4603      	mov	r3, r0
 8009784:	2b01      	cmp	r3, #1
 8009786:	d0d7      	beq.n	8009738 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8009788:	2201      	movs	r2, #1
 800978a:	2101      	movs	r1, #1
 800978c:	480e      	ldr	r0, [pc, #56]	; (80097c8 <SPI_WIFI_ResetModule+0xd8>)
 800978e:	f7f9 fd33 	bl	80031f8 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8009792:	783b      	ldrb	r3, [r7, #0]
 8009794:	2b15      	cmp	r3, #21
 8009796:	d10e      	bne.n	80097b6 <SPI_WIFI_ResetModule+0xc6>
 8009798:	787b      	ldrb	r3, [r7, #1]
 800979a:	2b15      	cmp	r3, #21
 800979c:	d10b      	bne.n	80097b6 <SPI_WIFI_ResetModule+0xc6>
 800979e:	78bb      	ldrb	r3, [r7, #2]
 80097a0:	2b0d      	cmp	r3, #13
 80097a2:	d108      	bne.n	80097b6 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80097a4:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80097a6:	2b0a      	cmp	r3, #10
 80097a8:	d105      	bne.n	80097b6 <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80097aa:	793b      	ldrb	r3, [r7, #4]
 80097ac:	2b3e      	cmp	r3, #62	; 0x3e
 80097ae:	d102      	bne.n	80097b6 <SPI_WIFI_ResetModule+0xc6>
 80097b0:	797b      	ldrb	r3, [r7, #5]
 80097b2:	2b20      	cmp	r3, #32
 80097b4:	d002      	beq.n	80097bc <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80097b6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ba:	e000      	b.n	80097be <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	48001000 	.word	0x48001000
 80097cc:	20000e78 	.word	0x20000e78

080097d0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80097d4:	4802      	ldr	r0, [pc, #8]	; (80097e0 <SPI_WIFI_DeInit+0x10>)
 80097d6:	f7fc f97e 	bl	8005ad6 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20000e78 	.word	0x20000e78

080097e4 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80097ec:	f7f8 ff8c 	bl	8002708 <HAL_GetTick>
 80097f0:	4603      	mov	r3, r0
 80097f2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 80097f4:	e00a      	b.n	800980c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80097f6:	f7f8 ff87 	bl	8002708 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d902      	bls.n	800980c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8009806:	f04f 33ff 	mov.w	r3, #4294967295
 800980a:	e007      	b.n	800981c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 800980c:	2102      	movs	r1, #2
 800980e:	4805      	ldr	r0, [pc, #20]	; (8009824 <wait_cmddata_rdy_high+0x40>)
 8009810:	f7f9 fcda 	bl	80031c8 <HAL_GPIO_ReadPin>
 8009814:	4603      	mov	r3, r0
 8009816:	2b01      	cmp	r3, #1
 8009818:	d1ed      	bne.n	80097f6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	48001000 	.word	0x48001000

08009828 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009830:	f7f8 ff6a 	bl	8002708 <HAL_GetTick>
 8009834:	4603      	mov	r3, r0
 8009836:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8009838:	e00a      	b.n	8009850 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800983a:	f7f8 ff65 	bl	8002708 <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d902      	bls.n	8009850 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800984a:	f04f 33ff 	mov.w	r3, #4294967295
 800984e:	e004      	b.n	800985a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <wait_cmddata_rdy_rising_event+0x3c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d0f0      	beq.n	800983a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8009858:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000ee4 	.word	0x20000ee4

08009868 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8009870:	f7f8 ff4a 	bl	8002708 <HAL_GetTick>
 8009874:	4603      	mov	r3, r0
 8009876:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8009878:	e00a      	b.n	8009890 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800987a:	f7f8 ff45 	bl	8002708 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	1ad2      	subs	r2, r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	429a      	cmp	r2, r3
 8009888:	d902      	bls.n	8009890 <wait_spi_rx_event+0x28>
    {
      return -1;
 800988a:	f04f 33ff 	mov.w	r3, #4294967295
 800988e:	e004      	b.n	800989a <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8009890:	4b04      	ldr	r3, [pc, #16]	; (80098a4 <wait_spi_rx_event+0x3c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d0f0      	beq.n	800987a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8009898:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20000edc 	.word	0x20000edc

080098a8 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80098b0:	f7f8 ff2a 	bl	8002708 <HAL_GetTick>
 80098b4:	4603      	mov	r3, r0
 80098b6:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80098b8:	e00a      	b.n	80098d0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80098ba:	f7f8 ff25 	bl	8002708 <HAL_GetTick>
 80098be:	4602      	mov	r2, r0
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	1ad2      	subs	r2, r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d902      	bls.n	80098d0 <wait_spi_tx_event+0x28>
    {
      return -1;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	e004      	b.n	80098da <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 80098d0:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <wait_spi_tx_event+0x3c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d0f0      	beq.n	80098ba <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80098d8:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000ee0 	.word	0x20000ee0

080098e8 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	460b      	mov	r3, r1
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 80098fa:	2201      	movs	r2, #1
 80098fc:	2101      	movs	r1, #1
 80098fe:	4834      	ldr	r0, [pc, #208]	; (80099d0 <SPI_WIFI_ReceiveData+0xe8>)
 8009900:	f7f9 fc7a 	bl	80031f8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8009904:	2003      	movs	r0, #3
 8009906:	f000 f8e3 	bl	8009ad0 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff ff8b 	bl	8009828 <wait_cmddata_rdy_rising_event>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	da02      	bge.n	800991e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8009918:	f06f 0302 	mvn.w	r3, #2
 800991c:	e054      	b.n	80099c8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800991e:	2200      	movs	r2, #0
 8009920:	2101      	movs	r1, #1
 8009922:	482b      	ldr	r0, [pc, #172]	; (80099d0 <SPI_WIFI_ReceiveData+0xe8>)
 8009924:	f7f9 fc68 	bl	80031f8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009928:	200f      	movs	r0, #15
 800992a:	f000 f8d1 	bl	8009ad0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800992e:	e03d      	b.n	80099ac <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8009930:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009934:	897b      	ldrh	r3, [r7, #10]
 8009936:	429a      	cmp	r2, r3
 8009938:	db02      	blt.n	8009940 <SPI_WIFI_ReceiveData+0x58>
 800993a:	897b      	ldrh	r3, [r7, #10]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d13c      	bne.n	80099ba <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8009940:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <SPI_WIFI_ReceiveData+0xec>)
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8009946:	f107 0314 	add.w	r3, r7, #20
 800994a:	2201      	movs	r2, #1
 800994c:	4619      	mov	r1, r3
 800994e:	4822      	ldr	r0, [pc, #136]	; (80099d8 <SPI_WIFI_ReceiveData+0xf0>)
 8009950:	f7fc fcce 	bl	80062f0 <HAL_SPI_Receive_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d007      	beq.n	800996a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800995a:	2201      	movs	r2, #1
 800995c:	2101      	movs	r1, #1
 800995e:	481c      	ldr	r0, [pc, #112]	; (80099d0 <SPI_WIFI_ReceiveData+0xe8>)
 8009960:	f7f9 fc4a 	bl	80031f8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8009964:	f04f 33ff 	mov.w	r3, #4294967295
 8009968:	e02e      	b.n	80099c8 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff ff7b 	bl	8009868 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8009972:	7d3a      	ldrb	r2, [r7, #20]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3301      	adds	r3, #1
 800997c:	7d7a      	ldrb	r2, [r7, #21]
 800997e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8009980:	8afb      	ldrh	r3, [r7, #22]
 8009982:	3302      	adds	r3, #2
 8009984:	b29b      	uxth	r3, r3
 8009986:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3302      	adds	r3, #2
 800998c:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 800998e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009992:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009996:	db09      	blt.n	80099ac <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8009998:	2201      	movs	r2, #1
 800999a:	2101      	movs	r1, #1
 800999c:	480c      	ldr	r0, [pc, #48]	; (80099d0 <SPI_WIFI_ReceiveData+0xe8>)
 800999e:	f7f9 fc2b 	bl	80031f8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80099a2:	f7ff fea5 	bl	80096f0 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80099a6:	f06f 0303 	mvn.w	r3, #3
 80099aa:	e00d      	b.n	80099c8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80099ac:	2102      	movs	r1, #2
 80099ae:	4808      	ldr	r0, [pc, #32]	; (80099d0 <SPI_WIFI_ReceiveData+0xe8>)
 80099b0:	f7f9 fc0a 	bl	80031c8 <HAL_GPIO_ReadPin>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d0ba      	beq.n	8009930 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80099ba:	2201      	movs	r2, #1
 80099bc:	2101      	movs	r1, #1
 80099be:	4804      	ldr	r0, [pc, #16]	; (80099d0 <SPI_WIFI_ReceiveData+0xe8>)
 80099c0:	f7f9 fc1a 	bl	80031f8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80099c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	48001000 	.word	0x48001000
 80099d4:	20000edc 	.word	0x20000edc
 80099d8:	20000e78 	.word	0x20000e78

080099dc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	460b      	mov	r3, r1
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fef9 	bl	80097e4 <wait_cmddata_rdy_high>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da02      	bge.n	80099fe <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295
 80099fc:	e04f      	b.n	8009a9e <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80099fe:	4b2a      	ldr	r3, [pc, #168]	; (8009aa8 <SPI_WIFI_SendData+0xcc>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8009a04:	2200      	movs	r2, #0
 8009a06:	2101      	movs	r1, #1
 8009a08:	4828      	ldr	r0, [pc, #160]	; (8009aac <SPI_WIFI_SendData+0xd0>)
 8009a0a:	f7f9 fbf5 	bl	80031f8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8009a0e:	200f      	movs	r0, #15
 8009a10:	f000 f85e 	bl	8009ad0 <SPI_WIFI_DelayUs>
  if (len > 1)
 8009a14:	897b      	ldrh	r3, [r7, #10]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d919      	bls.n	8009a4e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8009a1a:	4b25      	ldr	r3, [pc, #148]	; (8009ab0 <SPI_WIFI_SendData+0xd4>)
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8009a20:	897b      	ldrh	r3, [r7, #10]
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	68f9      	ldr	r1, [r7, #12]
 8009a2a:	4822      	ldr	r0, [pc, #136]	; (8009ab4 <SPI_WIFI_SendData+0xd8>)
 8009a2c:	f7fc fbd4 	bl	80061d8 <HAL_SPI_Transmit_IT>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8009a36:	2201      	movs	r2, #1
 8009a38:	2101      	movs	r1, #1
 8009a3a:	481c      	ldr	r0, [pc, #112]	; (8009aac <SPI_WIFI_SendData+0xd0>)
 8009a3c:	f7f9 fbdc 	bl	80031f8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009a40:	f04f 33ff 	mov.w	r3, #4294967295
 8009a44:	e02b      	b.n	8009a9e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ff2d 	bl	80098a8 <wait_spi_tx_event>
  }

  if (len & 1)
 8009a4e:	897b      	ldrh	r3, [r7, #10]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d020      	beq.n	8009a9a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8009a58:	897b      	ldrh	r3, [r7, #10]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8009a64:	230a      	movs	r3, #10
 8009a66:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8009a68:	4b11      	ldr	r3, [pc, #68]	; (8009ab0 <SPI_WIFI_SendData+0xd4>)
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8009a6e:	f107 0314 	add.w	r3, r7, #20
 8009a72:	2201      	movs	r2, #1
 8009a74:	4619      	mov	r1, r3
 8009a76:	480f      	ldr	r0, [pc, #60]	; (8009ab4 <SPI_WIFI_SendData+0xd8>)
 8009a78:	f7fc fbae 	bl	80061d8 <HAL_SPI_Transmit_IT>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8009a82:	2201      	movs	r2, #1
 8009a84:	2101      	movs	r1, #1
 8009a86:	4809      	ldr	r0, [pc, #36]	; (8009aac <SPI_WIFI_SendData+0xd0>)
 8009a88:	f7f9 fbb6 	bl	80031f8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8009a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a90:	e005      	b.n	8009a9e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff ff07 	bl	80098a8 <wait_spi_tx_event>
  }
  return len;
 8009a9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20000ee4 	.word	0x20000ee4
 8009aac:	48001000 	.word	0x48001000
 8009ab0:	20000ee0 	.word	0x20000ee0
 8009ab4:	20000e78 	.word	0x20000e78

08009ab8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7f8 fe2d 	bl	8002720 <HAL_Delay>
}
 8009ac6:	bf00      	nop
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8009ae0:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <SPI_WIFI_DelayUs+0x94>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d122      	bne.n	8009b2e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8009ae8:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <SPI_WIFI_DelayUs+0x98>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1f      	ldr	r2, [pc, #124]	; (8009b6c <SPI_WIFI_DelayUs+0x9c>)
 8009aee:	fba2 2303 	umull	r2, r3, r2, r3
 8009af2:	099b      	lsrs	r3, r3, #6
 8009af4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8009afe:	f7f8 fe03 	bl	8002708 <HAL_GetTick>
 8009b02:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8009b04:	e002      	b.n	8009b0c <SPI_WIFI_DelayUs+0x3c>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	60bb      	str	r3, [r7, #8]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f9      	bne.n	8009b06 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8009b12:	f7f8 fdf9 	bl	8002708 <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	4a11      	ldr	r2, [pc, #68]	; (8009b64 <SPI_WIFI_DelayUs+0x94>)
 8009b1e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8009b20:	4b10      	ldr	r3, [pc, #64]	; (8009b64 <SPI_WIFI_DelayUs+0x94>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <SPI_WIFI_DelayUs+0x5e>
 8009b28:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <SPI_WIFI_DelayUs+0x94>)
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8009b2e:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <SPI_WIFI_DelayUs+0x98>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a0f      	ldr	r2, [pc, #60]	; (8009b70 <SPI_WIFI_DelayUs+0xa0>)
 8009b34:	fba2 2303 	umull	r2, r3, r2, r3
 8009b38:	0c9a      	lsrs	r2, r3, #18
 8009b3a:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <SPI_WIFI_DelayUs+0x94>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b42:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	fb02 f303 	mul.w	r3, r2, r3
 8009b4c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8009b4e:	e002      	b.n	8009b56 <SPI_WIFI_DelayUs+0x86>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f9      	bne.n	8009b50 <SPI_WIFI_DelayUs+0x80>
  return;
 8009b5c:	bf00      	nop
}
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000ee8 	.word	0x20000ee8
 8009b68:	20000008 	.word	0x20000008
 8009b6c:	10624dd3 	.word	0x10624dd3
 8009b70:	431bde83 	.word	0x431bde83

08009b74 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8009b7c:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <HAL_SPI_RxCpltCallback+0x24>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8009b84:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <HAL_SPI_RxCpltCallback+0x24>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	20000edc 	.word	0x20000edc

08009b9c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <HAL_SPI_TxCpltCallback+0x24>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <HAL_SPI_TxCpltCallback+0x24>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	20000ee0 	.word	0x20000ee0

08009bc4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <SPI_WIFI_ISR+0x1c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d102      	bne.n	8009bd6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <SPI_WIFI_ISR+0x1c>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
   }
}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	20000ee4 	.word	0x20000ee4

08009be4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8009bee:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <WIFI_Init+0x40>)
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <WIFI_Init+0x44>)
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <WIFI_Init+0x48>)
 8009bf8:	4a0d      	ldr	r2, [pc, #52]	; (8009c30 <WIFI_Init+0x4c>)
 8009bfa:	490e      	ldr	r1, [pc, #56]	; (8009c34 <WIFI_Init+0x50>)
 8009bfc:	480e      	ldr	r0, [pc, #56]	; (8009c38 <WIFI_Init+0x54>)
 8009bfe:	f7ff f8bb 	bl	8008d78 <ES_WIFI_RegisterBusIO>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d107      	bne.n	8009c18 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009c08:	480b      	ldr	r0, [pc, #44]	; (8009c38 <WIFI_Init+0x54>)
 8009c0a:	f7ff f881 	bl	8008d10 <ES_WIFI_Init>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8009c18:	79fb      	ldrb	r3, [r7, #7]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	080098e9 	.word	0x080098e9
 8009c28:	080099dd 	.word	0x080099dd
 8009c2c:	08009ab9 	.word	0x08009ab9
 8009c30:	080097d1 	.word	0x080097d1
 8009c34:	08009635 	.word	0x08009635
 8009c38:	20000eec 	.word	0x20000eec

08009c3c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	68f9      	ldr	r1, [r7, #12]
 8009c54:	4809      	ldr	r0, [pc, #36]	; (8009c7c <WIFI_Connect+0x40>)
 8009c56:	f7ff f8c3 	bl	8008de0 <ES_WIFI_Connect>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d107      	bne.n	8009c70 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8009c60:	4806      	ldr	r0, [pc, #24]	; (8009c7c <WIFI_Connect+0x40>)
 8009c62:	f7ff f965 	bl	8008f30 <ES_WIFI_GetNetworkSettings>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000eec 	.word	0x20000eec

08009c80 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00d      	beq.n	8009cb2 <WIFI_GetMAC_Address+0x32>
 8009c96:	78fb      	ldrb	r3, [r7, #3]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	4806      	ldr	r0, [pc, #24]	; (8009cbc <WIFI_GetMAC_Address+0x3c>)
 8009ca4:	f7ff f96e 	bl	8008f84 <ES_WIFI_GetMACAddress>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20000eec 	.word	0x20000eec

08009cc0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d010      	beq.n	8009cf8 <WIFI_GetIP_Address+0x38>
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d90d      	bls.n	8009cf8 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8009cdc:	4809      	ldr	r0, [pc, #36]	; (8009d04 <WIFI_GetIP_Address+0x44>)
 8009cde:	f7ff f8f7 	bl	8008ed0 <ES_WIFI_IsConnected>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d107      	bne.n	8009cf8 <WIFI_GetIP_Address+0x38>
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <WIFI_GetIP_Address+0x44>)
 8009cea:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8009cee:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000eec 	.word	0x20000eec

08009d08 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	460b      	mov	r3, r1
 8009d16:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8009d24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009d26:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8009d28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d2a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bf14      	ite	ne
 8009d32:	2301      	movne	r3, #1
 8009d34:	2300      	moveq	r3, #0
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	3302      	adds	r3, #2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	3303      	adds	r3, #3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8009d58:	f107 0310 	add.w	r3, r7, #16
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4807      	ldr	r0, [pc, #28]	; (8009d7c <WIFI_OpenClientConnection+0x74>)
 8009d60:	f7ff f946 	bl	8008ff0 <ES_WIFI_StartClientConnection>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3728      	adds	r7, #40	; 0x28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000eec 	.word	0x20000eec

08009d80 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08a      	sub	sp, #40	; 0x28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t startTime;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d106      	bne.n	8009dac <sendMessageVector+0x2c>
 8009d9e:	4b66      	ldr	r3, [pc, #408]	; (8009f38 <sendMessageVector+0x1b8>)
 8009da0:	4a66      	ldr	r2, [pc, #408]	; (8009f3c <sendMessageVector+0x1bc>)
 8009da2:	f240 3107 	movw	r1, #775	; 0x307
 8009da6:	4866      	ldr	r0, [pc, #408]	; (8009f40 <sendMessageVector+0x1c0>)
 8009da8:	f005 fa90 	bl	800f2cc <__assert_func>
    assert( pIoVec != NULL );
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d106      	bne.n	8009dc0 <sendMessageVector+0x40>
 8009db2:	4b64      	ldr	r3, [pc, #400]	; (8009f44 <sendMessageVector+0x1c4>)
 8009db4:	4a61      	ldr	r2, [pc, #388]	; (8009f3c <sendMessageVector+0x1bc>)
 8009db6:	f44f 7142 	mov.w	r1, #776	; 0x308
 8009dba:	4861      	ldr	r0, [pc, #388]	; (8009f40 <sendMessageVector+0x1c0>)
 8009dbc:	f005 fa86 	bl	800f2cc <__assert_func>
    assert( pContext->getTime != NULL );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d106      	bne.n	8009dd6 <sendMessageVector+0x56>
 8009dc8:	4b5f      	ldr	r3, [pc, #380]	; (8009f48 <sendMessageVector+0x1c8>)
 8009dca:	4a5c      	ldr	r2, [pc, #368]	; (8009f3c <sendMessageVector+0x1bc>)
 8009dcc:	f240 3109 	movw	r1, #777	; 0x309
 8009dd0:	485b      	ldr	r0, [pc, #364]	; (8009f40 <sendMessageVector+0x1c0>)
 8009dd2:	f005 fa7b 	bl	800f2cc <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <sendMessageVector+0x6c>
 8009dde:	4b5b      	ldr	r3, [pc, #364]	; (8009f4c <sendMessageVector+0x1cc>)
 8009de0:	4a56      	ldr	r2, [pc, #344]	; (8009f3c <sendMessageVector+0x1bc>)
 8009de2:	f240 310b 	movw	r1, #779	; 0x30b
 8009de6:	4856      	ldr	r0, [pc, #344]	; (8009f40 <sendMessageVector+0x1c0>)
 8009de8:	f005 fa70 	bl	800f2cc <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	623b      	str	r3, [r7, #32]
 8009df0:	e007      	b.n	8009e02 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	4413      	add	r3, r2
 8009dfa:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	3308      	adds	r3, #8
 8009e00:	623b      	str	r3, [r7, #32]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	4413      	add	r3, r2
 8009e10:	6a3a      	ldr	r2, [r7, #32]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d9ed      	bls.n	8009df2 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	623b      	str	r3, [r7, #32]

    /* Note the start time. */
    startTime = pContext->getTime();
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	4798      	blx	r3
 8009e20:	6138      	str	r0, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 8009e22:	e079      	b.n	8009f18 <sendMessageVector+0x198>
    {
        if( pContext->transportInterface.writev != NULL )
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d008      	beq.n	8009e3e <sendMessageVector+0xbe>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	69d0      	ldr	r0, [r2, #28]
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	6a39      	ldr	r1, [r7, #32]
 8009e38:	4798      	blx	r3
 8009e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e3c:	e009      	b.n	8009e52 <sendMessageVector+0xd2>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	69d0      	ldr	r0, [r2, #28]
 8009e46:	6a3a      	ldr	r2, [r7, #32]
 8009e48:	6811      	ldr	r1, [r2, #0]
 8009e4a:	6a3a      	ldr	r2, [r7, #32]
 8009e4c:	6852      	ldr	r2, [r2, #4]
 8009e4e:	4798      	blx	r3
 8009e50:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dd17      	ble.n	8009e88 <sendMessageVector+0x108>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e60:	429a      	cmp	r2, r3
 8009e62:	dd06      	ble.n	8009e72 <sendMessageVector+0xf2>
 8009e64:	4b3a      	ldr	r3, [pc, #232]	; (8009f50 <sendMessageVector+0x1d0>)
 8009e66:	4a35      	ldr	r2, [pc, #212]	; (8009f3c <sendMessageVector+0x1bc>)
 8009e68:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8009e6c:	4834      	ldr	r0, [pc, #208]	; (8009f40 <sendMessageVector+0x1c0>)
 8009e6e:	f005 fa2d 	bl	800f2cc <__assert_func>

            bytesSentOrError += sendResult;
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	4413      	add	r3, r2
 8009e78:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	4798      	blx	r3
 8009e80:	4602      	mov	r2, r0
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	635a      	str	r2, [r3, #52]	; 0x34
 8009e86:	e004      	b.n	8009e92 <sendMessageVector+0x112>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	da01      	bge.n	8009e92 <sendMessageVector+0x112>
        {
            bytesSentOrError = sendResult;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( calculateElapsedTime( pContext->getTime(), startTime ) > MQTT_SEND_TIMEOUT_MS )
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4798      	blx	r3
 8009e98:	4603      	mov	r3, r0
 8009e9a:	6939      	ldr	r1, [r7, #16]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 f8e7 	bl	800a070 <calculateElapsedTime>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d83e      	bhi.n	8009f2a <sendMessageVector+0x1aa>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 8009eac:	e00b      	b.n	8009ec6 <sendMessageVector+0x146>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	6a3a      	ldr	r2, [r7, #32]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d805      	bhi.n	8009ee6 <sendMessageVector+0x166>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	dae3      	bge.n	8009eae <sendMessageVector+0x12e>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dd15      	ble.n	8009f18 <sendMessageVector+0x198>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 8009efa:	6a3a      	ldr	r2, [r7, #32]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d80b      	bhi.n	8009f18 <sendMessageVector+0x198>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	441a      	add	r2, r3
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	1ad2      	subs	r2, r2, r3
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	da05      	bge.n	8009f2c <sendMessageVector+0x1ac>
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f6bf af7e 	bge.w	8009e24 <sendMessageVector+0xa4>
 8009f28:	e000      	b.n	8009f2c <sendMessageVector+0x1ac>
            break;
 8009f2a:	bf00      	nop
        }
    }

    return bytesSentOrError;
 8009f2c:	697b      	ldr	r3, [r7, #20]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	08014684 	.word	0x08014684
 8009f3c:	080150bc 	.word	0x080150bc
 8009f40:	080145a8 	.word	0x080145a8
 8009f44:	08014698 	.word	0x08014698
 8009f48:	080146a8 	.word	0x080146a8
 8009f4c:	080146c4 	.word	0x080146c4
 8009f50:	080146f0 	.word	0x080146f0

08009f54 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <sendBuffer+0x28>
 8009f6e:	4b39      	ldr	r3, [pc, #228]	; (800a054 <sendBuffer+0x100>)
 8009f70:	4a39      	ldr	r2, [pc, #228]	; (800a058 <sendBuffer+0x104>)
 8009f72:	f44f 715a 	mov.w	r1, #872	; 0x368
 8009f76:	4839      	ldr	r0, [pc, #228]	; (800a05c <sendBuffer+0x108>)
 8009f78:	f005 f9a8 	bl	800f2cc <__assert_func>
    assert( pContext->getTime != NULL );
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <sendBuffer+0x3e>
 8009f84:	4b36      	ldr	r3, [pc, #216]	; (800a060 <sendBuffer+0x10c>)
 8009f86:	4a34      	ldr	r2, [pc, #208]	; (800a058 <sendBuffer+0x104>)
 8009f88:	f240 3169 	movw	r1, #873	; 0x369
 8009f8c:	4833      	ldr	r0, [pc, #204]	; (800a05c <sendBuffer+0x108>)
 8009f8e:	f005 f99d 	bl	800f2cc <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <sendBuffer+0x54>
 8009f9a:	4b32      	ldr	r3, [pc, #200]	; (800a064 <sendBuffer+0x110>)
 8009f9c:	4a2e      	ldr	r2, [pc, #184]	; (800a058 <sendBuffer+0x104>)
 8009f9e:	f240 316a 	movw	r1, #874	; 0x36a
 8009fa2:	482e      	ldr	r0, [pc, #184]	; (800a05c <sendBuffer+0x108>)
 8009fa4:	f005 f992 	bl	800f2cc <__assert_func>
    assert( pIndex != NULL );
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <sendBuffer+0x68>
 8009fae:	4b2e      	ldr	r3, [pc, #184]	; (800a068 <sendBuffer+0x114>)
 8009fb0:	4a29      	ldr	r2, [pc, #164]	; (800a058 <sendBuffer+0x104>)
 8009fb2:	f240 316b 	movw	r1, #875	; 0x36b
 8009fb6:	4829      	ldr	r0, [pc, #164]	; (800a05c <sendBuffer+0x108>)
 8009fb8:	f005 f988 	bl	800f2cc <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	4798      	blx	r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8009fc8:	3320      	adds	r3, #32
 8009fca:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 8009fcc:	e034      	b.n	800a038 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 8009fd6:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	1a8a      	subs	r2, r1, r2
 8009fdc:	69b9      	ldr	r1, [r7, #24]
 8009fde:	4798      	blx	r3
 8009fe0:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd1b      	ble.n	800a020 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	dd06      	ble.n	800a002 <sendBuffer+0xae>
 8009ff4:	4b1d      	ldr	r3, [pc, #116]	; (800a06c <sendBuffer+0x118>)
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <sendBuffer+0x104>)
 8009ff8:	f240 317a 	movw	r1, #890	; 0x37a
 8009ffc:	4817      	ldr	r0, [pc, #92]	; (800a05c <sendBuffer+0x108>)
 8009ffe:	f005 f965 	bl	800f2cc <__assert_func>

            bytesSentOrError += sendResult;
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	4413      	add	r3, r2
 800a008:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	4413      	add	r3, r2
 800a010:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4798      	blx	r3
 800a018:	4602      	mov	r2, r0
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	635a      	str	r2, [r3, #52]	; 0x34
 800a01e:	e004      	b.n	800a02a <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	da01      	bge.n	800a02a <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02e:	4798      	blx	r3
 800a030:	4602      	mov	r2, r0
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	4293      	cmp	r3, r2
 800a036:	d907      	bls.n	800a048 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	da04      	bge.n	800a04a <sendBuffer+0xf6>
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	dac3      	bge.n	8009fce <sendBuffer+0x7a>
 800a046:	e000      	b.n	800a04a <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800a048:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800a04a:	69fb      	ldr	r3, [r7, #28]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	08014684 	.word	0x08014684
 800a058:	080150d0 	.word	0x080150d0
 800a05c:	080145a8 	.word	0x080145a8
 800a060:	080146a8 	.word	0x080146a8
 800a064:	080146c4 	.word	0x080146c4
 800a068:	08014730 	.word	0x08014730
 800a06c:	080146f0 	.word	0x080146f0

0800a070 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
    return later - start;
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	1ad3      	subs	r3, r2, r3
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b62      	cmp	r3, #98	; 0x62
 800a09e:	d00c      	beq.n	800a0ba <getAckFromPacketType+0x2e>
 800a0a0:	2b62      	cmp	r3, #98	; 0x62
 800a0a2:	dc0d      	bgt.n	800a0c0 <getAckFromPacketType+0x34>
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d002      	beq.n	800a0ae <getAckFromPacketType+0x22>
 800a0a8:	2b50      	cmp	r3, #80	; 0x50
 800a0aa:	d003      	beq.n	800a0b4 <getAckFromPacketType+0x28>
 800a0ac:	e008      	b.n	800a0c0 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]
            break;
 800a0b2:	e012      	b.n	800a0da <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	73fb      	strb	r3, [r7, #15]
            break;
 800a0b8:	e00f      	b.n	800a0da <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	73fb      	strb	r3, [r7, #15]
            break;
 800a0be:	e00c      	b.n	800a0da <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b70      	cmp	r3, #112	; 0x70
 800a0c4:	d006      	beq.n	800a0d4 <getAckFromPacketType+0x48>
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <getAckFromPacketType+0x58>)
 800a0c8:	4a07      	ldr	r2, [pc, #28]	; (800a0e8 <getAckFromPacketType+0x5c>)
 800a0ca:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800a0ce:	4807      	ldr	r0, [pc, #28]	; (800a0ec <getAckFromPacketType+0x60>)
 800a0d0:	f005 f8fc 	bl	800f2cc <__assert_func>
            ackType = MQTTPubcomp;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	73fb      	strb	r3, [r7, #15]
            break;
 800a0d8:	bf00      	nop
    }

    return ackType;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	08014740 	.word	0x08014740
 800a0e8:	080150dc 	.word	0x080150dc
 800a0ec:	080145a8 	.word	0x080145a8

0800a0f0 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08c      	sub	sp, #48	; 0x30
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800a102:	2300      	movs	r3, #0
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	623b      	str	r3, [r7, #32]
 800a10a:	2300      	movs	r3, #0
 800a10c:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800a116:	2300      	movs	r3, #0
 800a118:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <recvExact+0x3e>
 800a120:	4b44      	ldr	r3, [pc, #272]	; (800a234 <recvExact+0x144>)
 800a122:	4a45      	ldr	r2, [pc, #276]	; (800a238 <recvExact+0x148>)
 800a124:	f240 31d1 	movw	r1, #977	; 0x3d1
 800a128:	4844      	ldr	r0, [pc, #272]	; (800a23c <recvExact+0x14c>)
 800a12a:	f005 f8cf 	bl	800f2cc <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	429a      	cmp	r2, r3
 800a136:	d906      	bls.n	800a146 <recvExact+0x56>
 800a138:	4b41      	ldr	r3, [pc, #260]	; (800a240 <recvExact+0x150>)
 800a13a:	4a3f      	ldr	r2, [pc, #252]	; (800a238 <recvExact+0x148>)
 800a13c:	f240 31d2 	movw	r1, #978	; 0x3d2
 800a140:	483e      	ldr	r0, [pc, #248]	; (800a23c <recvExact+0x14c>)
 800a142:	f005 f8c3 	bl	800f2cc <__assert_func>
    assert( pContext->getTime != NULL );
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <recvExact+0x6c>
 800a14e:	4b3d      	ldr	r3, [pc, #244]	; (800a244 <recvExact+0x154>)
 800a150:	4a39      	ldr	r2, [pc, #228]	; (800a238 <recvExact+0x148>)
 800a152:	f240 31d3 	movw	r1, #979	; 0x3d3
 800a156:	4839      	ldr	r0, [pc, #228]	; (800a23c <recvExact+0x14c>)
 800a158:	f005 f8b8 	bl	800f2cc <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <recvExact+0x82>
 800a164:	4b38      	ldr	r3, [pc, #224]	; (800a248 <recvExact+0x158>)
 800a166:	4a34      	ldr	r2, [pc, #208]	; (800a238 <recvExact+0x148>)
 800a168:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800a16c:	4833      	ldr	r0, [pc, #204]	; (800a23c <recvExact+0x14c>)
 800a16e:	f005 f8ad 	bl	800f2cc <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <recvExact+0x98>
 800a17a:	4b34      	ldr	r3, [pc, #208]	; (800a24c <recvExact+0x15c>)
 800a17c:	4a2e      	ldr	r2, [pc, #184]	; (800a238 <recvExact+0x148>)
 800a17e:	f240 31d5 	movw	r1, #981	; 0x3d5
 800a182:	482e      	ldr	r0, [pc, #184]	; (800a23c <recvExact+0x14c>)
 800a184:	f005 f8a2 	bl	800f2cc <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	4798      	blx	r3
 800a19e:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800a1a0:	e039      	b.n	800a216 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69d8      	ldr	r0, [r3, #28]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1ac:	4798      	blx	r3
 800a1ae:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da04      	bge.n	800a1c0 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	77fb      	strb	r3, [r7, #31]
 800a1be:	e02a      	b.n	800a216 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd1a      	ble.n	800a1fc <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	4798      	blx	r3
 800a1ca:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d206      	bcs.n	800a1e2 <recvExact+0xf2>
 800a1d4:	4b1e      	ldr	r3, [pc, #120]	; (800a250 <recvExact+0x160>)
 800a1d6:	4a18      	ldr	r2, [pc, #96]	; (800a238 <recvExact+0x148>)
 800a1d8:	f240 31f5 	movw	r1, #1013	; 0x3f5
 800a1dc:	4817      	ldr	r0, [pc, #92]	; (800a23c <recvExact+0x14c>)
 800a1de:	f005 f875 	bl	800f2cc <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f6:	4413      	add	r3, r2
 800a1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1fa:	e00c      	b.n	800a216 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	4798      	blx	r3
 800a200:	4603      	mov	r3, r0
 800a202:	6a39      	ldr	r1, [r7, #32]
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff ff33 	bl	800a070 <calculateElapsedTime>
 800a20a:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	2b09      	cmp	r3, #9
 800a210:	d901      	bls.n	800a216 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800a212:	2301      	movs	r3, #1
 800a214:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <recvExact+0x138>
 800a21c:	7ffb      	ldrb	r3, [r7, #31]
 800a21e:	f083 0301 	eor.w	r3, r3, #1
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1bc      	bne.n	800a1a2 <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3730      	adds	r7, #48	; 0x30
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	08014684 	.word	0x08014684
 800a238:	080150f4 	.word	0x080150f4
 800a23c:	080145a8 	.word	0x080145a8
 800a240:	08014768 	.word	0x08014768
 800a244:	080146a8 	.word	0x080146a8
 800a248:	08014794 	.word	0x08014794
 800a24c:	080147c0 	.word	0x080147c0
 800a250:	080147e8 	.word	0x080147e8

0800a254 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08c      	sub	sp, #48	; 0x30
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800a260:	2304      	movs	r3, #4
 800a262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800a27e:	2300      	movs	r3, #0
 800a280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <discardPacket+0x44>
 800a28a:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <discardPacket+0xf4>)
 800a28c:	4a2f      	ldr	r2, [pc, #188]	; (800a34c <discardPacket+0xf8>)
 800a28e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a292:	482f      	ldr	r0, [pc, #188]	; (800a350 <discardPacket+0xfc>)
 800a294:	f005 f81a 	bl	800f2cc <__assert_func>
    assert( pContext->getTime != NULL );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <discardPacket+0x5a>
 800a2a0:	4b2c      	ldr	r3, [pc, #176]	; (800a354 <discardPacket+0x100>)
 800a2a2:	4a2a      	ldr	r2, [pc, #168]	; (800a34c <discardPacket+0xf8>)
 800a2a4:	f240 4121 	movw	r1, #1057	; 0x421
 800a2a8:	4829      	ldr	r0, [pc, #164]	; (800a350 <discardPacket+0xfc>)
 800a2aa:	f005 f80f 	bl	800f2cc <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4798      	blx	r3
 800a2be:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800a2c0:	e029      	b.n	800a316 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d903      	bls.n	800a2d6 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800a2d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f7ff ff09 	bl	800a0f0 <recvExact>
 800a2de:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	69fa      	ldr	r2, [r7, #28]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d003      	beq.n	800a2f0 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ee:	e012      	b.n	800a316 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f4:	4413      	add	r3, r2
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4798      	blx	r3
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	69b9      	ldr	r1, [r7, #24]
 800a300:	4618      	mov	r0, r3
 800a302:	f7ff feb5 	bl	800a070 <calculateElapsedTime>
 800a306:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800a316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d206      	bcs.n	800a32c <discardPacket+0xd8>
 800a31e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a322:	f083 0301 	eor.w	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1ca      	bne.n	800a2c2 <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800a32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	429a      	cmp	r2, r3
 800a332:	d102      	bne.n	800a33a <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800a334:	2307      	movs	r3, #7
 800a336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800a33a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3730      	adds	r7, #48	; 0x30
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	08014684 	.word	0x08014684
 800a34c:	08015100 	.word	0x08015100
 800a350:	080145a8 	.word	0x080145a8
 800a354:	080146a8 	.word	0x080146a8

0800a358 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800a358:	b084      	sub	sp, #16
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <receivePacket+0x32>
 800a37c:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <receivePacket+0x90>)
 800a37e:	4a1b      	ldr	r2, [pc, #108]	; (800a3ec <receivePacket+0x94>)
 800a380:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800a384:	481a      	ldr	r0, [pc, #104]	; (800a3f0 <receivePacket+0x98>)
 800a386:	f004 ffa1 	bl	800f2cc <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <receivePacket+0x48>
 800a392:	4b18      	ldr	r3, [pc, #96]	; (800a3f4 <receivePacket+0x9c>)
 800a394:	4a15      	ldr	r2, [pc, #84]	; (800a3ec <receivePacket+0x94>)
 800a396:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800a39a:	4815      	ldr	r0, [pc, #84]	; (800a3f0 <receivePacket+0x98>)
 800a39c:	f004 ff96 	bl	800f2cc <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800a3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d908      	bls.n	800a3bc <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff4f 	bl	800a254 <discardPacket>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75fb      	strb	r3, [r7, #23]
 800a3ba:	e00c      	b.n	800a3d6 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800a3c0:	68f9      	ldr	r1, [r7, #12]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff fe94 	bl	800a0f0 <recvExact>
 800a3c8:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d001      	beq.n	800a3d6 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800a3d2:	2304      	movs	r3, #4
 800a3d4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3e2:	b004      	add	sp, #16
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	08014684 	.word	0x08014684
 800a3ec:	08015110 	.word	0x08015110
 800a3f0:	080145a8 	.word	0x080145a8
 800a3f4:	080147c0 	.word	0x080147c0

0800a3f8 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	3b02      	subs	r3, #2
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d816      	bhi.n	800a43c <getAckTypeToSend+0x44>
 800a40e:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <getAckTypeToSend+0x1c>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a425 	.word	0x0800a425
 800a418:	0800a42b 	.word	0x0800a42b
 800a41c:	0800a431 	.word	0x0800a431
 800a420:	0800a437 	.word	0x0800a437
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	73fb      	strb	r3, [r7, #15]
            break;
 800a428:	e009      	b.n	800a43e <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800a42a:	2350      	movs	r3, #80	; 0x50
 800a42c:	73fb      	strb	r3, [r7, #15]
            break;
 800a42e:	e006      	b.n	800a43e <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800a430:	2362      	movs	r3, #98	; 0x62
 800a432:	73fb      	strb	r3, [r7, #15]
            break;
 800a434:	e003      	b.n	800a43e <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800a436:	2370      	movs	r3, #112	; 0x70
 800a438:	73fb      	strb	r3, [r7, #15]
            break;
 800a43a:	e000      	b.n	800a43e <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800a43c:	bf00      	nop
    }

    return packetTypeByte;
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	; 0x28
 800a450:	af02      	add	r7, sp, #8
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	807b      	strh	r3, [r7, #2]
 800a458:	4613      	mov	r3, r2
 800a45a:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800a45c:	2300      	movs	r3, #0
 800a45e:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800a460:	2300      	movs	r3, #0
 800a462:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800a46c:	f107 0308 	add.w	r3, r7, #8
 800a470:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800a472:	2304      	movs	r3, #4
 800a474:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d106      	bne.n	800a48a <sendPublishAcks+0x3e>
 800a47c:	4b21      	ldr	r3, [pc, #132]	; (800a504 <sendPublishAcks+0xb8>)
 800a47e:	4a22      	ldr	r2, [pc, #136]	; (800a508 <sendPublishAcks+0xbc>)
 800a480:	f240 5101 	movw	r1, #1281	; 0x501
 800a484:	4821      	ldr	r0, [pc, #132]	; (800a50c <sendPublishAcks+0xc0>)
 800a486:	f004 ff21 	bl	800f2cc <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800a48a:	787b      	ldrb	r3, [r7, #1]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff ffb3 	bl	800a3f8 <getAckTypeToSend>
 800a492:	4603      	mov	r3, r0
 800a494:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d02d      	beq.n	800a4f8 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff fdf4 	bl	800a08c <getAckFromPacketType>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800a4a8:	887a      	ldrh	r2, [r7, #2]
 800a4aa:	7df9      	ldrb	r1, [r7, #23]
 800a4ac:	f107 030c 	add.w	r3, r7, #12
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f001 f972 	bl	800b79a <MQTT_SerializeAck>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800a4ba:	7ffb      	ldrb	r3, [r7, #31]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800a4c0:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff fd44 	bl	8009f54 <sendBuffer>
 800a4cc:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d10f      	bne.n	800a4f4 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800a4dc:	7dba      	ldrb	r2, [r7, #22]
 800a4de:	8879      	ldrh	r1, [r7, #2]
 800a4e0:	f107 0315 	add.w	r3, r7, #21
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 ff6f 	bl	800c3cc <MQTT_UpdateStateAck>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	77fb      	strb	r3, [r7, #31]
 800a4f2:	e001      	b.n	800a4f8 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800a4f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3720      	adds	r7, #32
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	08014684 	.word	0x08014684
 800a508:	08015120 	.word	0x08015120
 800a50c:	080145a8 	.word	0x080145a8

0800a510 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serializedLength[ CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	4613      	mov	r3, r2
 800a51e:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	61fb      	str	r3, [r7, #28]
    TransportOutVector_t * pLocalIterator = iterator;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	617b      	str	r3, [r7, #20]
    size_t vectorsAdded = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) ? ( string != NULL ) : true );
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <addEncodedStringToVector+0x36>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <addEncodedStringToVector+0x36>
 800a538:	4b1e      	ldr	r3, [pc, #120]	; (800a5b4 <addEncodedStringToVector+0xa4>)
 800a53a:	4a1f      	ldr	r2, [pc, #124]	; (800a5b8 <addEncodedStringToVector+0xa8>)
 800a53c:	f240 7151 	movw	r1, #1873	; 0x751
 800a540:	481e      	ldr	r0, [pc, #120]	; (800a5bc <addEncodedStringToVector+0xac>)
 800a542:	f004 fec3 	bl	800f2cc <__assert_func>

    serializedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800a546:	88fb      	ldrh	r3, [r7, #6]
 800a548:	0a1b      	lsrs	r3, r3, #8
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	701a      	strb	r2, [r3, #0]
    serializedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serializedLength;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2202      	movs	r2, #2
 800a566:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	3301      	adds	r3, #1
 800a56c:	61bb      	str	r3, [r7, #24]
    packetLength = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800a56e:	2302      	movs	r3, #2
 800a570:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d011      	beq.n	800a59c <addEncodedStringToVector+0x8c>
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00e      	beq.n	800a59c <addEncodedStringToVector+0x8c>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	3308      	adds	r3, #8
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	3308      	adds	r3, #8
 800a58a:	88fa      	ldrh	r2, [r7, #6]
 800a58c:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	3301      	adds	r3, #1
 800a592:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	4413      	add	r3, r2
 800a59a:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	441a      	add	r2, r3
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800a5a8:	69bb      	ldr	r3, [r7, #24]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3720      	adds	r7, #32
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0801488c 	.word	0x0801488c
 800a5b8:	08015130 	.word	0x08015130
 800a5bc:	080145a8 	.word	0x080145a8

0800a5c0 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b090      	sub	sp, #64	; 0x40
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     * Packet ID (only when QoS > QoS0)                    + 1 = 3
     * Payload                                             + 1 = 4  */
    TransportOutVector_t pIoVector[ 4U ];

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	613b      	str	r3, [r7, #16]
    pIoVector[ 0U ].iov_len = headerSize;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	617b      	str	r3, [r7, #20]
    totalMessageLength = headerSize;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	637b      	str	r3, [r7, #52]	; 0x34

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	61bb      	str	r3, [r7, #24]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	61fb      	str	r3, [r7, #28]
    totalMessageLength += pPublishInfo->topicNameLength;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	891b      	ldrh	r3, [r3, #8]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f4:	4413      	add	r3, r2
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	63bb      	str	r3, [r7, #56]	; 0x38

    if( pPublishInfo->qos > MQTTQoS0 )
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d020      	beq.n	800a646 <sendPublishWithoutCopy+0x86>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800a604:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a608:	0a1b      	lsrs	r3, r3, #8
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800a612:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	3340      	adds	r3, #64	; 0x40
 800a622:	443b      	add	r3, r7
 800a624:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a628:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = sizeof( serializedPacketID );
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	3340      	adds	r3, #64	; 0x40
 800a632:	443b      	add	r3, r7
 800a634:	2202      	movs	r2, #2
 800a636:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	3301      	adds	r3, #1
 800a63e:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += sizeof( serializedPacketID );
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	3302      	adds	r3, #2
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d017      	beq.n	800a67e <sendPublishWithoutCopy+0xbe>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	3340      	adds	r3, #64	; 0x40
 800a658:	443b      	add	r3, r7
 800a65a:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	691a      	ldr	r2, [r3, #16]
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	3340      	adds	r3, #64	; 0x40
 800a668:	443b      	add	r3, r7
 800a66a:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800a66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a670:	3301      	adds	r3, #1
 800a672:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += pPublishInfo->payloadLength;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a67a:	4413      	add	r3, r2
 800a67c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800a67e:	f107 0310 	add.w	r3, r7, #16
 800a682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a684:	4619      	mov	r1, r3
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff fb7a 	bl	8009d80 <sendMessageVector>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a690:	429a      	cmp	r2, r3
 800a692:	d002      	beq.n	800a69a <sendPublishWithoutCopy+0xda>
    {
        status = MQTTSendFailed;
 800a694:	2303      	movs	r3, #3
 800a696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    return status;
 800a69a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3740      	adds	r7, #64	; 0x40
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b0ac      	sub	sp, #176	; 0xb0
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     * Will payload        + 2 = 7
     * Username            + 2 = 9
     * Password            + 2 = 11 */
    TransportOutVector_t pIoVector[ 11U ];

    iterator = pIoVector;
 800a6c8:	f107 0310 	add.w	r3, r7, #16
 800a6cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    pIndex = connectPacketHeader;
 800a6d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a6d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <sendConnectWithoutCopy+0x46>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d103      	bne.n	800a6ee <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800a6ec:	e0ec      	b.n	800a8c8 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	68b9      	ldr	r1, [r7, #8]
 800a6f4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a6f8:	f000 ff3a 	bl	800b570 <MQTT_SerializeConnectFixedHeader>
 800a6fc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= sizeof( connectPacketHeader ) );
 800a700:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a704:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b0f      	cmp	r3, #15
 800a70c:	d906      	bls.n	800a71c <sendConnectWithoutCopy+0x74>
 800a70e:	4b71      	ldr	r3, [pc, #452]	; (800a8d4 <sendConnectWithoutCopy+0x22c>)
 800a710:	4a71      	ldr	r2, [pc, #452]	; (800a8d8 <sendConnectWithoutCopy+0x230>)
 800a712:	f640 01ad 	movw	r1, #2221	; 0x8ad
 800a716:	4871      	ldr	r0, [pc, #452]	; (800a8dc <sendConnectWithoutCopy+0x234>)
 800a718:	f004 fdd8 	bl	800f2cc <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800a71c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a720:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a724:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800a726:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a72a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	461a      	mov	r2, r3
 800a732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a736:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800a738:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a742:	4413      	add	r3, r2
 800a744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800a748:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a74c:	3308      	adds	r3, #8
 800a74e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800a752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a756:	3301      	adds	r3, #1
 800a758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
                                                 pConnectInfo->pClientIdentifier,
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	6859      	ldr	r1, [r3, #4]
                                                 pConnectInfo->clientIdentifierLength,
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	891a      	ldrh	r2, [r3, #8]
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800a764:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800a768:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a772:	f7ff fecd 	bl	800a510 <addEncodedStringToVector>
 800a776:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800a77a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a77e:	00db      	lsls	r3, r3, #3
 800a780:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a784:	4413      	add	r3, r2
 800a786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800a78a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a78e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a792:	4413      	add	r3, r2
 800a794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d03c      	beq.n	800a818 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
                                                     pWillInfo->pTopicName,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6859      	ldr	r1, [r3, #4]
                                                     pWillInfo->topicNameLength,
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	891a      	ldrh	r2, [r3, #8]
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800a7a6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800a7aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7b4:	f7ff feac 	bl	800a510 <addEncodedStringToVector>
 800a7b8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800a7bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800a7cc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a7d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800a7e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7f2:	f7ff fe8d 	bl	800a510 <addEncodedStringToVector>
 800a7f6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800a7fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a804:	4413      	add	r3, r2
 800a806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800a80a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a80e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a812:	4413      	add	r3, r2
 800a814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01d      	beq.n	800a85c <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
                                                     pConnectInfo->pUserName,
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	68d9      	ldr	r1, [r3, #12]
                                                     pConnectInfo->userNameLength,
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	8a1a      	ldrh	r2, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800a828:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800a82c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a836:	f7ff fe6b 	bl	800a510 <addEncodedStringToVector>
 800a83a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800a83e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a848:	4413      	add	r3, r2
 800a84a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800a84e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a856:	4413      	add	r3, r2
 800a858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01d      	beq.n	800a8a0 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
                                                     pConnectInfo->pPassword,
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	6959      	ldr	r1, [r3, #20]
                                                     pConnectInfo->passwordLength,
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	8b1a      	ldrh	r2, [r3, #24]
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800a86c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800a870:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a87a:	f7ff fe49 	bl	800a510 <addEncodedStringToVector>
 800a87e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800a882:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a88c:	4413      	add	r3, r2
 800a88e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800a892:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a89a:	4413      	add	r3, r2
 800a89c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800a8a0:	f107 0310 	add.w	r3, r7, #16
 800a8a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7ff fa68 	bl	8009d80 <sendMessageVector>
 800a8b0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800a8b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d002      	beq.n	800a8c8 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800a8c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	37a8      	adds	r7, #168	; 0xa8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	080148bc 	.word	0x080148bc
 800a8d8:	0801514c 	.word	0x0801514c
 800a8dc:	080145a8 	.word	0x080145a8

0800a8e0 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	; 0x30
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	2300      	movs	r3, #0
 800a900:	623b      	str	r3, [r7, #32]
 800a902:	2300      	movs	r3, #0
 800a904:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800a906:	2300      	movs	r3, #0
 800a908:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <receiveConnack+0x42>
 800a914:	4b4e      	ldr	r3, [pc, #312]	; (800aa50 <receiveConnack+0x170>)
 800a916:	4a4f      	ldr	r2, [pc, #316]	; (800aa54 <receiveConnack+0x174>)
 800a918:	f640 1115 	movw	r1, #2325	; 0x915
 800a91c:	484e      	ldr	r0, [pc, #312]	; (800aa58 <receiveConnack+0x178>)
 800a91e:	f004 fcd5 	bl	800f2cc <__assert_func>
    assert( pIncomingPacket != NULL );
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d106      	bne.n	800a936 <receiveConnack+0x56>
 800a928:	4b4c      	ldr	r3, [pc, #304]	; (800aa5c <receiveConnack+0x17c>)
 800a92a:	4a4a      	ldr	r2, [pc, #296]	; (800aa54 <receiveConnack+0x174>)
 800a92c:	f640 1116 	movw	r1, #2326	; 0x916
 800a930:	4849      	ldr	r0, [pc, #292]	; (800aa58 <receiveConnack+0x178>)
 800a932:	f004 fccb 	bl	800f2cc <__assert_func>
    assert( pContext->getTime != NULL );
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d106      	bne.n	800a94c <receiveConnack+0x6c>
 800a93e:	4b48      	ldr	r3, [pc, #288]	; (800aa60 <receiveConnack+0x180>)
 800a940:	4a44      	ldr	r2, [pc, #272]	; (800aa54 <receiveConnack+0x174>)
 800a942:	f640 1117 	movw	r1, #2327	; 0x917
 800a946:	4844      	ldr	r0, [pc, #272]	; (800aa58 <receiveConnack+0x178>)
 800a948:	f004 fcc0 	bl	800f2cc <__assert_func>

    getTimeStamp = pContext->getTime;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	4798      	blx	r3
 800a956:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6918      	ldr	r0, [r3, #16]
                                                      pContext->transportInterface.pNetworkContext,
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	69db      	ldr	r3, [r3, #28]
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	4619      	mov	r1, r3
 800a964:	f000 ffdf 	bl	800b926 <MQTT_GetIncomingPacketTypeAndLength>
 800a968:	4603      	mov	r3, r0
 800a96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00e      	beq.n	800a992 <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	4798      	blx	r3
 800a978:	4603      	mov	r3, r0
 800a97a:	6979      	ldr	r1, [r7, #20]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fb77 	bl	800a070 <calculateElapsedTime>
 800a982:	4602      	mov	r2, r0
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	4293      	cmp	r3, r2
 800a988:	bf94      	ite	ls
 800a98a:	2301      	movls	r3, #1
 800a98c:	2300      	movhi	r3, #0
 800a98e:	77fb      	strb	r3, [r7, #31]
 800a990:	e008      	b.n	800a9a4 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800a992:	8bbb      	ldrh	r3, [r7, #28]
 800a994:	2b04      	cmp	r3, #4
 800a996:	bf8c      	ite	hi
 800a998:	2301      	movhi	r3, #1
 800a99a:	2300      	movls	r3, #0
 800a99c:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800a99e:	8bbb      	ldrh	r3, [r7, #28]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800a9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9a8:	2b07      	cmp	r3, #7
 800a9aa:	d105      	bne.n	800a9b8 <receiveConnack+0xd8>
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
 800a9ae:	f083 0301 	eor.w	r3, r3, #1
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1cf      	bne.n	800a958 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800a9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d123      	bne.n	800aa08 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	4798      	blx	r3
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	6979      	ldr	r1, [r7, #20]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff fb51 	bl	800a070 <calculateElapsedTime>
 800a9ce:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d203      	bcs.n	800a9e0 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	d10c      	bne.n	800aa02 <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	6a3a      	ldr	r2, [r7, #32]
 800a9ec:	9201      	str	r2, [sp, #4]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	9200      	str	r2, [sp, #0]
 800a9f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff fcaf 	bl	800a358 <receivePacket>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa00:	e002      	b.n	800aa08 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800aa02:	2305      	movs	r3, #5
 800aa04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800aa08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10b      	bne.n	800aa28 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6a1a      	ldr	r2, [r3, #32]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800aa18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	6838      	ldr	r0, [r7, #0]
 800aa1e:	f000 ff0f 	bl	800b840 <MQTT_DeserializeAck>
 800aa22:	4603      	mov	r3, r0
 800aa24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800aa28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d006      	beq.n	800aa44 <receiveConnack+0x164>
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800aa3e:	2305      	movs	r3, #5
 800aa40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800aa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3728      	adds	r7, #40	; 0x28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	08014684 	.word	0x08014684
 800aa54:	08015164 	.word	0x08015164
 800aa58:	080145a8 	.word	0x080145a8
 800aa5c:	08014854 	.word	0x08014854
 800aa60:	080146a8 	.word	0x080146a8

0800aa64 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800aa70:	2300      	movs	r3, #0
 800aa72:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <handleSessionResumption+0x30>
 800aa86:	4b2c      	ldr	r3, [pc, #176]	; (800ab38 <handleSessionResumption+0xd4>)
 800aa88:	4a2c      	ldr	r2, [pc, #176]	; (800ab3c <handleSessionResumption+0xd8>)
 800aa8a:	f640 118d 	movw	r1, #2445	; 0x98d
 800aa8e:	482c      	ldr	r0, [pc, #176]	; (800ab40 <handleSessionResumption+0xdc>)
 800aa90:	f004 fc1c 	bl	800f2cc <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a18      	ldr	r0, [r3, #32]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	f005 fd09 	bl	80104bc <memset>

    if( sessionPresent == true )
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d023      	beq.n	800aaf8 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800aab0:	f107 020f 	add.w	r2, r7, #15
 800aab4:	f107 0310 	add.w	r3, r7, #16
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 fd01 	bl	800c4c2 <MQTT_PubrelToResend>
 800aac0:	4603      	mov	r3, r0
 800aac2:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800aac4:	e011      	b.n	800aaea <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800aac6:	7bfa      	ldrb	r2, [r7, #15]
 800aac8:	8abb      	ldrh	r3, [r7, #20]
 800aaca:	4619      	mov	r1, r3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fcbd 	bl	800a44c <sendPublishAcks>
 800aad2:	4603      	mov	r3, r0
 800aad4:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800aad6:	f107 020f 	add.w	r2, r7, #15
 800aada:	f107 0310 	add.w	r3, r7, #16
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f001 fcee 	bl	800c4c2 <MQTT_PubrelToResend>
 800aae6:	4603      	mov	r3, r0
 800aae8:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800aaea:	8abb      	ldrh	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01d      	beq.n	800ab2c <handleSessionResumption+0xc8>
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0e7      	beq.n	800aac6 <handleSessionResumption+0x62>
 800aaf6:	e019      	b.n	800ab2c <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d008      	beq.n	800ab12 <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f005 fcd5 	bl	80104bc <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	461a      	mov	r2, r3
 800ab26:	2100      	movs	r1, #0
 800ab28:	f005 fcc8 	bl	80104bc <memset>
        }
    }

    return status;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	08014684 	.word	0x08014684
 800ab3c:	08015174 	.word	0x08015174
 800ab40:	080145a8 	.word	0x080145a8

0800ab44 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <validatePublishParams+0x1e>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800ab62:	2301      	movs	r3, #1
 800ab64:	75fb      	strb	r3, [r7, #23]
 800ab66:	e01e      	b.n	800aba6 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <validatePublishParams+0x38>
 800ab70:	88fb      	ldrh	r3, [r7, #6]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d102      	bne.n	800ab7c <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800ab76:	2301      	movs	r3, #1
 800ab78:	75fb      	strb	r3, [r7, #23]
 800ab7a:	e014      	b.n	800aba6 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d006      	beq.n	800ab92 <validatePublishParams+0x4e>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	75fb      	strb	r3, [r7, #23]
 800ab90:	e009      	b.n	800aba6 <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d105      	bne.n	800aba6 <validatePublishParams+0x62>
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800aba2:	2301      	movs	r3, #1
 800aba4:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800abb4:	b590      	push	{r4, r7, lr}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800abc2:	2300      	movs	r3, #0
 800abc4:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d005      	beq.n	800abd8 <MQTT_Init+0x24>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <MQTT_Init+0x24>
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800abd8:	2301      	movs	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
 800abdc:	e03a      	b.n	800ac54 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800abe4:	2301      	movs	r3, #1
 800abe6:	75fb      	strb	r3, [r7, #23]
 800abe8:	e034      	b.n	800ac54 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800abf0:	2301      	movs	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
 800abf4:	e02e      	b.n	800ac54 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800abfe:	2301      	movs	r3, #1
 800ac00:	75fb      	strb	r3, [r7, #23]
 800ac02:	e027      	b.n	800ac54 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	75fb      	strb	r3, [r7, #23]
 800ac10:	e020      	b.n	800ac54 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800ac12:	2250      	movs	r2, #80	; 0x50
 800ac14:	2100      	movs	r1, #0
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f005 fc50 	bl	80104bc <memset>

        pContext->connectStatus = MQTTNotConnected;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	f103 0410 	add.w	r4, r3, #16
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac44:	3320      	adds	r3, #32
 800ac46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac4a:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2201      	movs	r2, #1
 800ac52:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd90      	pop	{r4, r7, pc}

0800ac5e <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b08e      	sub	sp, #56	; 0x38
 800ac62:	af02      	add	r7, sp, #8
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac70:	2300      	movs	r3, #0
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800ac7a:	f107 0314 	add.w	r3, r7, #20
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	605a      	str	r2, [r3, #4]
 800ac84:	609a      	str	r2, [r3, #8]
 800ac86:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <MQTT_Connect+0x40>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <MQTT_Connect+0x40>
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800aca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800acac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	68b8      	ldr	r0, [r7, #8]
 800acb8:	f000 fcd2 	bl	800b660 <MQTT_GetConnectPacketSize>
 800acbc:	4603      	mov	r3, r0
 800acbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800acc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d108      	bne.n	800acdc <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	68b9      	ldr	r1, [r7, #8]
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f7ff fce9 	bl	800a6a8 <sendConnectWithoutCopy>
 800acd6:	4603      	mov	r3, r0
 800acd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800acdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10d      	bne.n	800ad00 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
                                 timeoutMs,
                                 pConnectInfo->cleanSession,
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	781a      	ldrb	r2, [r3, #0]
        status = receiveConnack( pContext,
 800ace8:	f107 0114 	add.w	r1, r7, #20
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	460b      	mov	r3, r1
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff fdf3 	bl	800a8e0 <receiveConnack>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800ad00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d108      	bne.n	800ad1a <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fea8 	bl	800aa64 <handleSessionResumption>
 800ad14:	4603      	mov	r3, r0
 800ad16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800ad1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10f      	bne.n	800ad42 <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	885a      	ldrh	r2, [r3, #2]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800ad42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3730      	adds	r7, #48	; 0x30
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b08c      	sub	sp, #48	; 0x30
 800ad52:	af02      	add	r7, sp, #8
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     * an extra call to 'send' (in case writev is not defined) to send the
     * topic length.    */
    uint8_t mqttHeader[ 7U ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800ad72:	88fb      	ldrh	r3, [r7, #6]
 800ad74:	461a      	mov	r2, r3
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f7ff fee3 	bl	800ab44 <validatePublishParams>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800ad84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800ad8c:	f107 0218 	add.w	r2, r7, #24
 800ad90:	f107 031c 	add.w	r3, r7, #28
 800ad94:	4619      	mov	r1, r3
 800ad96:	68b8      	ldr	r0, [r7, #8]
 800ad98:	f000 fcce 	bl	800b738 <MQTT_GetPublishPacketSize>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800ada2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800adaa:	69f9      	ldr	r1, [r7, #28]
 800adac:	f107 0320 	add.w	r3, r7, #32
 800adb0:	f107 0210 	add.w	r2, r7, #16
 800adb4:	68b8      	ldr	r0, [r7, #8]
 800adb6:	f000 f961 	bl	800b07c <MQTT_SerializePublishHeaderWithoutTopic>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800adc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11b      	bne.n	800ae00 <MQTT_Publish+0xb2>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d017      	beq.n	800ae00 <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800add0:	2301      	movs	r3, #1
 800add2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
                                    packetId,
                                    pPublishInfo->qos );
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_ReserveState( pContext,
 800adda:	88fb      	ldrh	r3, [r7, #6]
 800addc:	4619      	mov	r1, r3
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f001 fa28 	bl	800c234 <MQTT_ReserveState>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800adea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d106      	bne.n	800ae00 <MQTT_Publish+0xb2>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	789b      	ldrb	r3, [r3, #2]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800adfa:	2300      	movs	r3, #0
 800adfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800ae00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10c      	bne.n	800ae22 <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800ae08:	6a39      	ldr	r1, [r7, #32]
 800ae0a:	f107 0210 	add.w	r2, r7, #16
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	460b      	mov	r3, r1
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff fbd2 	bl	800a5c0 <sendPublishWithoutCopy>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800ae22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d111      	bne.n	800ae4e <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00d      	beq.n	800ae4e <MQTT_Publish+0x100>
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
                                          packetId,
                                          MQTT_SEND,
                                          pPublishInfo->qos,
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_UpdateStatePublish( pContext,
 800ae36:	88f9      	ldrh	r1, [r7, #6]
 800ae38:	f107 0317 	add.w	r3, r7, #23
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	2200      	movs	r2, #0
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f001 fa4f 	bl	800c2e6 <MQTT_UpdateStatePublish>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800ae4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3728      	adds	r7, #40	; 0x28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b085      	sub	sp, #20
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b7f      	cmp	r3, #127	; 0x7f
 800ae66:	d802      	bhi.n	800ae6e <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e00f      	b.n	800ae8e <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae74:	d202      	bcs.n	800ae7c <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800ae76:	2302      	movs	r3, #2
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	e008      	b.n	800ae8e <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae82:	d202      	bcs.n	800ae8a <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800ae84:	2303      	movs	r3, #3
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	e001      	b.n	800ae8e <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d106      	bne.n	800aec2 <encodeRemainingLength+0x26>
 800aeb4:	4b12      	ldr	r3, [pc, #72]	; (800af00 <encodeRemainingLength+0x64>)
 800aeb6:	4a13      	ldr	r2, [pc, #76]	; (800af04 <encodeRemainingLength+0x68>)
 800aeb8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800aebc:	4812      	ldr	r0, [pc, #72]	; (800af08 <encodeRemainingLength+0x6c>)
 800aebe:	f004 fa05 	bl	800f2cc <__assert_func>

    pLengthEnd = pDestination;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aece:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	09db      	lsrs	r3, r3, #7
 800aed4:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aee2:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	7dfa      	ldrb	r2, [r7, #23]
 800aee8:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3301      	adds	r3, #1
 800aeee:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e7      	bne.n	800aec6 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800aef6:	693b      	ldr	r3, [r7, #16]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	08014a18 	.word	0x08014a18
 800af04:	0801518c 	.word	0x0801518c
 800af08:	08014a30 	.word	0x08014a30

0800af0c <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <encodeString+0x2a>
 800af28:	4b15      	ldr	r3, [pc, #84]	; (800af80 <encodeString+0x74>)
 800af2a:	4a16      	ldr	r2, [pc, #88]	; (800af84 <encodeString+0x78>)
 800af2c:	f44f 7105 	mov.w	r1, #532	; 0x214
 800af30:	4815      	ldr	r0, [pc, #84]	; (800af88 <encodeString+0x7c>)
 800af32:	f004 f9cb 	bl	800f2cc <__assert_func>

    pBuffer = pDestination;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800af3a:	88fb      	ldrh	r3, [r7, #6]
 800af3c:	0a1b      	lsrs	r3, r3, #8
 800af3e:	b29b      	uxth	r3, r3
 800af40:	b2da      	uxtb	r2, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	3301      	adds	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	3301      	adds	r3, #1
 800af58:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	461a      	mov	r2, r3
 800af64:	6939      	ldr	r1, [r7, #16]
 800af66:	6978      	ldr	r0, [r7, #20]
 800af68:	f005 fbbf 	bl	80106ea <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4413      	add	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800af74:	697b      	ldr	r3, [r7, #20]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	08014a18 	.word	0x08014a18
 800af84:	080151a4 	.word	0x080151a4
 800af88:	08014a30 	.word	0x08014a30

0800af8c <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
    bool status = true;
 800af98:	2301      	movs	r3, #1
 800af9a:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	61bb      	str	r3, [r7, #24]
 800afa0:	2300      	movs	r3, #0
 800afa2:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <calculatePublishPacketSize+0x2c>
 800afaa:	4b2e      	ldr	r3, [pc, #184]	; (800b064 <calculatePublishPacketSize+0xd8>)
 800afac:	4a2e      	ldr	r2, [pc, #184]	; (800b068 <calculatePublishPacketSize+0xdc>)
 800afae:	f240 2135 	movw	r1, #565	; 0x235
 800afb2:	482e      	ldr	r0, [pc, #184]	; (800b06c <calculatePublishPacketSize+0xe0>)
 800afb4:	f004 f98a 	bl	800f2cc <__assert_func>
    assert( pRemainingLength != NULL );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <calculatePublishPacketSize+0x40>
 800afbe:	4b2c      	ldr	r3, [pc, #176]	; (800b070 <calculatePublishPacketSize+0xe4>)
 800afc0:	4a29      	ldr	r2, [pc, #164]	; (800b068 <calculatePublishPacketSize+0xdc>)
 800afc2:	f240 2136 	movw	r1, #566	; 0x236
 800afc6:	4829      	ldr	r0, [pc, #164]	; (800b06c <calculatePublishPacketSize+0xe0>)
 800afc8:	f004 f980 	bl	800f2cc <__assert_func>
    assert( pPacketSize != NULL );
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <calculatePublishPacketSize+0x54>
 800afd2:	4b28      	ldr	r3, [pc, #160]	; (800b074 <calculatePublishPacketSize+0xe8>)
 800afd4:	4a24      	ldr	r2, [pc, #144]	; (800b068 <calculatePublishPacketSize+0xdc>)
 800afd6:	f240 2137 	movw	r1, #567	; 0x237
 800afda:	4824      	ldr	r0, [pc, #144]	; (800b06c <calculatePublishPacketSize+0xe0>)
 800afdc:	f004 f976 	bl	800f2cc <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	891b      	ldrh	r3, [r3, #8]
 800afe4:	461a      	mov	r2, r3
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	4413      	add	r3, r2
 800afea:	3302      	adds	r3, #2
 800afec:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	3302      	adds	r3, #2
 800affa:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	4b1e      	ldr	r3, [pc, #120]	; (800b078 <calculatePublishPacketSize+0xec>)
 800b000:	1a9b      	subs	r3, r3, r2
 800b002:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d202      	bcs.n	800b014 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800b00e:	2300      	movs	r3, #0
 800b010:	77fb      	strb	r3, [r7, #31]
 800b012:	e021      	b.n	800b058 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	4413      	add	r3, r2
 800b01c:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800b01e:	69b8      	ldr	r0, [r7, #24]
 800b020:	f7ff ff1b 	bl	800ae5a <remainingLengthEncodedSize>
 800b024:	4602      	mov	r2, r0
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	429a      	cmp	r2, r3
 800b034:	d202      	bcs.n	800b03c <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800b036:	2300      	movs	r3, #0
 800b038:	77fb      	strb	r3, [r7, #31]
 800b03a:	e00d      	b.n	800b058 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800b042:	69b8      	ldr	r0, [r7, #24]
 800b044:	f7ff ff09 	bl	800ae5a <remainingLengthEncodedSize>
 800b048:	4603      	mov	r3, r0
 800b04a:	3301      	adds	r3, #1
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	4413      	add	r3, r2
 800b050:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800b058:	7ffb      	ldrb	r3, [r7, #31]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	08014a64 	.word	0x08014a64
 800b068:	080151b4 	.word	0x080151b4
 800b06c:	08014a30 	.word	0x08014a30
 800b070:	08014a7c 	.word	0x08014a7c
 800b074:	08014a98 	.word	0x08014a98
 800b078:	0ffffffe 	.word	0x0ffffffe

0800b07c <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b088      	sub	sp, #32
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800b08a:	2300      	movs	r3, #0
 800b08c:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800b08e:	2330      	movs	r3, #48	; 0x30
 800b090:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800b096:	68b8      	ldr	r0, [r7, #8]
 800b098:	f7ff fedf 	bl	800ae5a <remainingLengthEncodedSize>
 800b09c:	4603      	mov	r3, r0
 800b09e:	3303      	adds	r3, #3
 800b0a0:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d104      	bne.n	800b0b4 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800b0aa:	7ffb      	ldrb	r3, [r7, #31]
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	77fb      	strb	r3, [r7, #31]
 800b0b2:	e007      	b.n	800b0c4 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d103      	bne.n	800b0c4 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800b0bc:	7ffb      	ldrb	r3, [r7, #31]
 800b0be:	f043 0304 	orr.w	r3, r3, #4
 800b0c2:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800b0cc:	7ffb      	ldrb	r3, [r7, #31]
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	789b      	ldrb	r3, [r3, #2]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800b0dc:	7ffb      	ldrb	r3, [r7, #31]
 800b0de:	f043 0308 	orr.w	r3, r3, #8
 800b0e2:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	7ffa      	ldrb	r2, [r7, #31]
 800b0e8:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	69b8      	ldr	r0, [r7, #24]
 800b0f4:	f7ff fed2 	bl	800ae9c <encodeRemainingLength>
 800b0f8:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	891b      	ldrh	r3, [r3, #8]
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	b29b      	uxth	r3, r3
 800b102:	b2da      	uxtb	r2, r3
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	3301      	adds	r3, #1
 800b10c:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	891b      	ldrh	r3, [r3, #8]
 800b112:	b2da      	uxtb	r2, r3
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	3301      	adds	r3, #1
 800b11c:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	601a      	str	r2, [r3, #0]

    return status;
 800b124:	7fbb      	ldrb	r3, [r7, #30]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b088      	sub	sp, #32
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	61fb      	str	r3, [r7, #28]
 800b13c:	2301      	movs	r3, #1
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
 800b144:	2300      	movs	r3, #0
 800b146:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b156:	d903      	bls.n	800b160 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800b158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b15c:	61fb      	str	r3, [r7, #28]
 800b15e:	e01c      	b.n	800b19a <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800b160:	f107 010b 	add.w	r1, r7, #11
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	6838      	ldr	r0, [r7, #0]
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d10f      	bne.n	800b194 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	fb02 f303 	mul.w	r3, r2, r3
 800b180:	69fa      	ldr	r2, [r7, #28]
 800b182:	4413      	add	r3, r2
 800b184:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	01db      	lsls	r3, r3, #7
 800b18a:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	3301      	adds	r3, #1
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	e002      	b.n	800b19a <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800b194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b198:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1a0:	d004      	beq.n	800b1ac <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800b1a2:	7afb      	ldrb	r3, [r7, #11]
 800b1a4:	b25b      	sxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	dbd2      	blt.n	800b150 <getRemainingLength+0x22>
 800b1aa:	e000      	b.n	800b1ae <getRemainingLength+0x80>
            break;
 800b1ac:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1b4:	d00a      	beq.n	800b1cc <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800b1b6:	69f8      	ldr	r0, [r7, #28]
 800b1b8:	f7ff fe4f 	bl	800ae5a <remainingLengthEncodedSize>
 800b1bc:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d002      	beq.n	800b1cc <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800b1c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1ca:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3720      	adds	r7, #32
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <incomingPacketValid>:
}

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	4603      	mov	r3, r0
 800b1de:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1ea:	2bd0      	cmp	r3, #208	; 0xd0
 800b1ec:	d01d      	beq.n	800b22a <incomingPacketValid+0x54>
 800b1ee:	2bd0      	cmp	r3, #208	; 0xd0
 800b1f0:	d826      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b1f2:	2bb0      	cmp	r3, #176	; 0xb0
 800b1f4:	d019      	beq.n	800b22a <incomingPacketValid+0x54>
 800b1f6:	2bb0      	cmp	r3, #176	; 0xb0
 800b1f8:	d822      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b1fa:	2b90      	cmp	r3, #144	; 0x90
 800b1fc:	d015      	beq.n	800b22a <incomingPacketValid+0x54>
 800b1fe:	2b90      	cmp	r3, #144	; 0x90
 800b200:	d81e      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b202:	2b70      	cmp	r3, #112	; 0x70
 800b204:	d011      	beq.n	800b22a <incomingPacketValid+0x54>
 800b206:	2b70      	cmp	r3, #112	; 0x70
 800b208:	d81a      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b20a:	2b60      	cmp	r3, #96	; 0x60
 800b20c:	d010      	beq.n	800b230 <incomingPacketValid+0x5a>
 800b20e:	2b60      	cmp	r3, #96	; 0x60
 800b210:	d816      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b212:	2b50      	cmp	r3, #80	; 0x50
 800b214:	d009      	beq.n	800b22a <incomingPacketValid+0x54>
 800b216:	2b50      	cmp	r3, #80	; 0x50
 800b218:	d812      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b21a:	2b40      	cmp	r3, #64	; 0x40
 800b21c:	d005      	beq.n	800b22a <incomingPacketValid+0x54>
 800b21e:	2b40      	cmp	r3, #64	; 0x40
 800b220:	d80e      	bhi.n	800b240 <incomingPacketValid+0x6a>
 800b222:	2b20      	cmp	r3, #32
 800b224:	d001      	beq.n	800b22a <incomingPacketValid+0x54>
 800b226:	2b30      	cmp	r3, #48	; 0x30
 800b228:	d10a      	bne.n	800b240 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800b22a:	2301      	movs	r3, #1
 800b22c:	73fb      	strb	r3, [r7, #15]
            break;
 800b22e:	e00a      	b.n	800b246 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800b230:	79fb      	ldrb	r3, [r7, #7]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d004      	beq.n	800b244 <incomingPacketValid+0x6e>
            {
                status = true;
 800b23a:	2301      	movs	r3, #1
 800b23c:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800b23e:	e001      	b.n	800b244 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800b240:	bf00      	nop
 800b242:	e000      	b.n	800b246 <incomingPacketValid+0x70>
            break;
 800b244:	bf00      	nop
    }

    return status;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <logConnackResponse>:
}

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800b254:	b5b0      	push	{r4, r5, r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800b25e:	4b0c      	ldr	r3, [pc, #48]	; (800b290 <logConnackResponse+0x3c>)
 800b260:	f107 0408 	add.w	r4, r7, #8
 800b264:	461d      	mov	r5, r3
 800b266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b26a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b26e:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	2b05      	cmp	r3, #5
 800b276:	d906      	bls.n	800b286 <logConnackResponse+0x32>
 800b278:	4b06      	ldr	r3, [pc, #24]	; (800b294 <logConnackResponse+0x40>)
 800b27a:	4a07      	ldr	r2, [pc, #28]	; (800b298 <logConnackResponse+0x44>)
 800b27c:	f240 412e 	movw	r1, #1070	; 0x42e
 800b280:	4806      	ldr	r0, [pc, #24]	; (800b29c <logConnackResponse+0x48>)
 800b282:	f004 f823 	bl	800f2cc <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800b286:	bf00      	nop
 800b288:	3720      	adds	r7, #32
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bdb0      	pop	{r4, r5, r7, pc}
 800b28e:	bf00      	nop
 800b290:	08014cb8 	.word	0x08014cb8
 800b294:	08014bb0 	.word	0x08014bb0
 800b298:	080151d0 	.word	0x080151d0
 800b29c:	08014a30 	.word	0x08014a30

0800b2a0 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d106      	bne.n	800b2c6 <deserializeConnack+0x26>
 800b2b8:	4b2a      	ldr	r3, [pc, #168]	; (800b364 <deserializeConnack+0xc4>)
 800b2ba:	4a2b      	ldr	r2, [pc, #172]	; (800b368 <deserializeConnack+0xc8>)
 800b2bc:	f240 4144 	movw	r1, #1092	; 0x444
 800b2c0:	482a      	ldr	r0, [pc, #168]	; (800b36c <deserializeConnack+0xcc>)
 800b2c2:	f004 f803 	bl	800f2cc <__assert_func>
    assert( pSessionPresent != NULL );
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <deserializeConnack+0x3a>
 800b2cc:	4b28      	ldr	r3, [pc, #160]	; (800b370 <deserializeConnack+0xd0>)
 800b2ce:	4a26      	ldr	r2, [pc, #152]	; (800b368 <deserializeConnack+0xc8>)
 800b2d0:	f240 4145 	movw	r1, #1093	; 0x445
 800b2d4:	4825      	ldr	r0, [pc, #148]	; (800b36c <deserializeConnack+0xcc>)
 800b2d6:	f003 fff9 	bl	800f2cc <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d002      	beq.n	800b2ee <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800b2e8:	2305      	movs	r3, #5
 800b2ea:	73fb      	strb	r3, [r7, #15]
 800b2ec:	e01d      	b.n	800b32a <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	f043 0301 	orr.w	r3, r3, #1
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d002      	beq.n	800b302 <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800b2fc:	2305      	movs	r3, #5
 800b2fe:	73fb      	strb	r3, [r7, #15]
 800b300:	e013      	b.n	800b32a <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2201      	movs	r2, #1
 800b312:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3301      	adds	r3, #1
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d005      	beq.n	800b32a <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800b31e:	2305      	movs	r3, #5
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	e002      	b.n	800b32a <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2200      	movs	r2, #0
 800b328:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d114      	bne.n	800b35a <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3301      	adds	r3, #1
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b05      	cmp	r3, #5
 800b338:	d902      	bls.n	800b340 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800b33a:	2305      	movs	r3, #5
 800b33c:	73fb      	strb	r3, [r7, #15]
 800b33e:	e00c      	b.n	800b35a <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	3301      	adds	r3, #1
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff ff84 	bl	800b254 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	3301      	adds	r3, #1
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800b356:	2306      	movs	r3, #6
 800b358:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	08014cd0 	.word	0x08014cd0
 800b368:	080151e4 	.word	0x080151e4
 800b36c:	08014a30 	.word	0x08014a30
 800b370:	08014ce4 	.word	0x08014ce4

0800b374 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d106      	bne.n	800b39e <readSubackStatus+0x2a>
 800b390:	4b17      	ldr	r3, [pc, #92]	; (800b3f0 <readSubackStatus+0x7c>)
 800b392:	4a18      	ldr	r2, [pc, #96]	; (800b3f4 <readSubackStatus+0x80>)
 800b394:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800b398:	4817      	ldr	r0, [pc, #92]	; (800b3f8 <readSubackStatus+0x84>)
 800b39a:	f003 ff97 	bl	800f2cc <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
 800b3a2:	e019      	b.n	800b3d8 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	dc02      	bgt.n	800b3ba <readSubackStatus+0x46>
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	da08      	bge.n	800b3ca <readSubackStatus+0x56>
 800b3b8:	e004      	b.n	800b3c4 <readSubackStatus+0x50>
 800b3ba:	2b80      	cmp	r3, #128	; 0x80
 800b3bc:	d102      	bne.n	800b3c4 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800b3be:	2306      	movs	r3, #6
 800b3c0:	75fb      	strb	r3, [r7, #23]

                break;
 800b3c2:	e003      	b.n	800b3cc <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800b3c4:	2305      	movs	r3, #5
 800b3c6:	75fb      	strb	r3, [r7, #23]

                break;
 800b3c8:	e000      	b.n	800b3cc <readSubackStatus+0x58>
                break;
 800b3ca:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
 800b3ce:	2b05      	cmp	r3, #5
 800b3d0:	d007      	beq.n	800b3e2 <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	613b      	str	r3, [r7, #16]
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d3e1      	bcc.n	800b3a4 <readSubackStatus+0x30>
 800b3e0:	e000      	b.n	800b3e4 <readSubackStatus+0x70>
        {
            break;
 800b3e2:	bf00      	nop
        }
    }

    return status;
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	08014d30 	.word	0x08014d30
 800b3f4:	080151f8 	.word	0x080151f8
 800b3f8:	08014a30 	.word	0x08014a30

0800b3fc <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <deserializeSuback+0x26>
 800b414:	4b1f      	ldr	r3, [pc, #124]	; (800b494 <deserializeSuback+0x98>)
 800b416:	4a20      	ldr	r2, [pc, #128]	; (800b498 <deserializeSuback+0x9c>)
 800b418:	f240 511f 	movw	r1, #1311	; 0x51f
 800b41c:	481f      	ldr	r0, [pc, #124]	; (800b49c <deserializeSuback+0xa0>)
 800b41e:	f003 ff55 	bl	800f2cc <__assert_func>
    assert( pPacketIdentifier != NULL );
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <deserializeSuback+0x3a>
 800b428:	4b1d      	ldr	r3, [pc, #116]	; (800b4a0 <deserializeSuback+0xa4>)
 800b42a:	4a1b      	ldr	r2, [pc, #108]	; (800b498 <deserializeSuback+0x9c>)
 800b42c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800b430:	481a      	ldr	r0, [pc, #104]	; (800b49c <deserializeSuback+0xa0>)
 800b432:	f003 ff4b 	bl	800f2cc <__assert_func>

    remainingLength = pSuback->remainingLength;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b02      	cmp	r3, #2
 800b446:	d802      	bhi.n	800b44e <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800b448:	2305      	movs	r3, #5
 800b44a:	75fb      	strb	r3, [r7, #23]
 800b44c:	e01d      	b.n	800b48a <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	b21a      	sxth	r2, r3
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	3301      	adds	r3, #1
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	b21b      	sxth	r3, r3
 800b45e:	4313      	orrs	r3, r2
 800b460:	b21b      	sxth	r3, r3
 800b462:	b29a      	uxth	r2, r3
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800b470:	2305      	movs	r3, #5
 800b472:	75fb      	strb	r3, [r7, #23]
 800b474:	e009      	b.n	800b48a <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	1e9a      	subs	r2, r3, #2
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	3302      	adds	r3, #2
 800b47e:	4619      	mov	r1, r3
 800b480:	4610      	mov	r0, r2
 800b482:	f7ff ff77 	bl	800b374 <readSubackStatus>
 800b486:	4603      	mov	r3, r0
 800b488:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	08014d48 	.word	0x08014d48
 800b498:	0801520c 	.word	0x0801520c
 800b49c:	08014a30 	.word	0x08014a30
 800b4a0:	08014d58 	.word	0x08014d58

0800b4a4 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d106      	bne.n	800b4c6 <deserializeSimpleAck+0x22>
 800b4b8:	4b18      	ldr	r3, [pc, #96]	; (800b51c <deserializeSimpleAck+0x78>)
 800b4ba:	4a19      	ldr	r2, [pc, #100]	; (800b520 <deserializeSimpleAck+0x7c>)
 800b4bc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800b4c0:	4818      	ldr	r0, [pc, #96]	; (800b524 <deserializeSimpleAck+0x80>)
 800b4c2:	f003 ff03 	bl	800f2cc <__assert_func>
    assert( pPacketIdentifier != NULL );
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d106      	bne.n	800b4da <deserializeSimpleAck+0x36>
 800b4cc:	4b16      	ldr	r3, [pc, #88]	; (800b528 <deserializeSimpleAck+0x84>)
 800b4ce:	4a14      	ldr	r2, [pc, #80]	; (800b520 <deserializeSimpleAck+0x7c>)
 800b4d0:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800b4d4:	4813      	ldr	r0, [pc, #76]	; (800b524 <deserializeSimpleAck+0x80>)
 800b4d6:	f003 fef9 	bl	800f2cc <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d002      	beq.n	800b4e8 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800b4e2:	2305      	movs	r3, #5
 800b4e4:	73fb      	strb	r3, [r7, #15]
 800b4e6:	e014      	b.n	800b512 <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	b21a      	sxth	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	b21b      	sxth	r3, r3
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	b21b      	sxth	r3, r3
 800b500:	b29a      	uxth	r2, r3
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800b50e:	2305      	movs	r3, #5
 800b510:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	08014dc8 	.word	0x08014dc8
 800b520:	08015220 	.word	0x08015220
 800b524:	08014a30 	.word	0x08014a30
 800b528:	08014d58 	.word	0x08014d58

0800b52c <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800b534:	2300      	movs	r3, #0
 800b536:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d106      	bne.n	800b54c <deserializePingresp+0x20>
 800b53e:	4b09      	ldr	r3, [pc, #36]	; (800b564 <deserializePingresp+0x38>)
 800b540:	4a09      	ldr	r2, [pc, #36]	; (800b568 <deserializePingresp+0x3c>)
 800b542:	f240 6104 	movw	r1, #1540	; 0x604
 800b546:	4809      	ldr	r0, [pc, #36]	; (800b56c <deserializePingresp+0x40>)
 800b548:	f003 fec0 	bl	800f2cc <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800b554:	2305      	movs	r3, #5
 800b556:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800b558:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	08014dd8 	.word	0x08014dd8
 800b568:	08015238 	.word	0x08015238
 800b56c:	08014a30 	.word	0x08014a30

0800b570 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2210      	movs	r2, #16
 800b58a:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	3301      	adds	r3, #1
 800b590:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6938      	ldr	r0, [r7, #16]
 800b596:	f7ff fc81 	bl	800ae9c <encodeRemainingLength>
 800b59a:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800b59c:	2204      	movs	r2, #4
 800b59e:	492f      	ldr	r1, [pc, #188]	; (800b65c <MQTT_SerializeConnectFixedHeader+0xec>)
 800b5a0:	6938      	ldr	r0, [r7, #16]
 800b5a2:	f7ff fcb3 	bl	800af0c <encodeString>
 800b5a6:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	f043 0302 	orr.w	r3, r3, #2
 800b5c2:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d003      	beq.n	800b5d4 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5d2:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e2:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01c      	beq.n	800b624 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800b5ea:	7dfb      	ldrb	r3, [r7, #23]
 800b5ec:	f043 0304 	orr.w	r3, r3, #4
 800b5f0:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d104      	bne.n	800b604 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	f043 0308 	orr.w	r3, r3, #8
 800b600:	75fb      	strb	r3, [r7, #23]
 800b602:	e007      	b.n	800b614 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d103      	bne.n	800b614 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	f043 0310 	orr.w	r3, r3, #16
 800b612:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	785b      	ldrb	r3, [r3, #1]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d003      	beq.n	800b624 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
 800b61e:	f043 0320 	orr.w	r3, r3, #32
 800b622:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	7dfa      	ldrb	r2, [r7, #23]
 800b628:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	3301      	adds	r3, #1
 800b62e:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	885b      	ldrh	r3, [r3, #2]
 800b634:	0a1b      	lsrs	r3, r3, #8
 800b636:	b29b      	uxth	r3, r3
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	885a      	ldrh	r2, [r3, #2]
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	3301      	adds	r3, #1
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3302      	adds	r3, #2
 800b64e:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800b650:	693b      	ldr	r3, [r7, #16]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	08014dec 	.word	0x08014dec

0800b660 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b66e:	2300      	movs	r3, #0
 800b670:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800b672:	230a      	movs	r3, #10
 800b674:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <MQTT_GetConnectPacketSize+0x28>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d002      	beq.n	800b688 <MQTT_GetConnectPacketSize+0x28>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d102      	bne.n	800b68e <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800b688:	2301      	movs	r3, #1
 800b68a:	77fb      	strb	r3, [r7, #31]
 800b68c:	e04f      	b.n	800b72e <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	891b      	ldrh	r3, [r3, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d003      	beq.n	800b69e <MQTT_GetConnectPacketSize+0x3e>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	77fb      	strb	r3, [r7, #31]
 800b6a2:	e044      	b.n	800b72e <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <MQTT_GetConnectPacketSize+0x5a>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b2:	d302      	bcc.n	800b6ba <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	77fb      	strb	r3, [r7, #31]
 800b6b8:	e039      	b.n	800b72e <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	891b      	ldrh	r3, [r3, #8]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	3302      	adds	r3, #2
 800b6c6:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d009      	beq.n	800b6e2 <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	891b      	ldrh	r3, [r3, #8]
 800b6d2:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800b6d8:	441a      	add	r2, r3
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	4413      	add	r3, r2
 800b6de:	3304      	adds	r3, #4
 800b6e0:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d006      	beq.n	800b6f8 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8a1b      	ldrh	r3, [r3, #16]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	3302      	adds	r3, #2
 800b6f6:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d006      	beq.n	800b70e <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	8b1b      	ldrh	r3, [r3, #24]
 800b704:	461a      	mov	r2, r3
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	4413      	add	r3, r2
 800b70a:	3302      	adds	r3, #2
 800b70c:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800b712:	69b8      	ldr	r0, [r7, #24]
 800b714:	f7ff fba1 	bl	800ae5a <remainingLengthEncodedSize>
 800b718:	4603      	mov	r3, r0
 800b71a:	3301      	adds	r3, #1
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	4413      	add	r3, r2
 800b720:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800b72e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3720      	adds	r7, #32
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800b744:	2300      	movs	r3, #0
 800b746:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d005      	beq.n	800b75a <MQTT_GetPublishPacketSize+0x22>
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <MQTT_GetPublishPacketSize+0x22>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d102      	bne.n	800b760 <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800b75a:	2301      	movs	r3, #1
 800b75c:	75fb      	strb	r3, [r7, #23]
 800b75e:	e017      	b.n	800b790 <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <MQTT_GetPublishPacketSize+0x38>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	891b      	ldrh	r3, [r3, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d102      	bne.n	800b776 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800b770:	2301      	movs	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]
 800b774:	e00c      	b.n	800b790 <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f7ff fc06 	bl	800af8c <calculatePublishPacketSize>
 800b780:	4603      	mov	r3, r0
 800b782:	f083 0301 	eor.w	r3, r3, #1
 800b786:	b2db      	uxtb	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800b78c:	2301      	movs	r3, #1
 800b78e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800b790:	7dfb      	ldrb	r3, [r7, #23]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800b79a:	b480      	push	{r7}
 800b79c:	b085      	sub	sp, #20
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
 800b7b8:	e03b      	b.n	800b832 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d102      	bne.n	800b7c8 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]
 800b7c6:	e034      	b.n	800b832 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d802      	bhi.n	800b7d6 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	73fb      	strb	r3, [r7, #15]
 800b7d4:	e02d      	b.n	800b832 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800b7d6:	883b      	ldrh	r3, [r7, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
 800b7e0:	e027      	b.n	800b832 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800b7e2:	78fb      	ldrb	r3, [r7, #3]
 800b7e4:	2b70      	cmp	r3, #112	; 0x70
 800b7e6:	d009      	beq.n	800b7fc <MQTT_SerializeAck+0x62>
 800b7e8:	2b70      	cmp	r3, #112	; 0x70
 800b7ea:	dc1f      	bgt.n	800b82c <MQTT_SerializeAck+0x92>
 800b7ec:	2b62      	cmp	r3, #98	; 0x62
 800b7ee:	d005      	beq.n	800b7fc <MQTT_SerializeAck+0x62>
 800b7f0:	2b62      	cmp	r3, #98	; 0x62
 800b7f2:	dc1b      	bgt.n	800b82c <MQTT_SerializeAck+0x92>
 800b7f4:	2b40      	cmp	r3, #64	; 0x40
 800b7f6:	d001      	beq.n	800b7fc <MQTT_SerializeAck+0x62>
 800b7f8:	2b50      	cmp	r3, #80	; 0x50
 800b7fa:	d117      	bne.n	800b82c <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	78fa      	ldrb	r2, [r7, #3]
 800b802:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	3301      	adds	r3, #1
 800b80a:	2202      	movs	r2, #2
 800b80c:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800b80e:	883b      	ldrh	r3, [r7, #0]
 800b810:	0a1b      	lsrs	r3, r3, #8
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3302      	adds	r3, #2
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	3303      	adds	r3, #3
 800b824:	883a      	ldrh	r2, [r7, #0]
 800b826:	b2d2      	uxtb	r2, r2
 800b828:	701a      	strb	r2, [r3, #0]
                break;
 800b82a:	e002      	b.n	800b832 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800b82c:	2301      	movs	r3, #1
 800b82e:	73fb      	strb	r3, [r7, #15]
                break;
 800b830:	bf00      	nop
        }
    }

    return status;
 800b832:	7bfb      	ldrb	r3, [r7, #15]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800b84c:	2300      	movs	r3, #0
 800b84e:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800b856:	2301      	movs	r3, #1
 800b858:	75fb      	strb	r3, [r7, #23]
 800b85a:	e05f      	b.n	800b91c <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800b866:	2b20      	cmp	r3, #32
 800b868:	d006      	beq.n	800b878 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800b86e:	2bd0      	cmp	r3, #208	; 0xd0
 800b870:	d002      	beq.n	800b878 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800b872:	2301      	movs	r3, #1
 800b874:	75fb      	strb	r3, [r7, #23]
 800b876:	e051      	b.n	800b91c <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800b882:	2b20      	cmp	r3, #32
 800b884:	d102      	bne.n	800b88c <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800b886:	2301      	movs	r3, #1
 800b888:	75fb      	strb	r3, [r7, #23]
 800b88a:	e047      	b.n	800b91c <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800b898:	2bd0      	cmp	r3, #208	; 0xd0
 800b89a:	d002      	beq.n	800b8a2 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800b89c:	2301      	movs	r3, #1
 800b89e:	75fb      	strb	r3, [r7, #23]
 800b8a0:	e03c      	b.n	800b91c <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2bd0      	cmp	r3, #208	; 0xd0
 800b8a8:	d028      	beq.n	800b8fc <MQTT_DeserializeAck+0xbc>
 800b8aa:	2bd0      	cmp	r3, #208	; 0xd0
 800b8ac:	dc33      	bgt.n	800b916 <MQTT_DeserializeAck+0xd6>
 800b8ae:	2bb0      	cmp	r3, #176	; 0xb0
 800b8b0:	d02a      	beq.n	800b908 <MQTT_DeserializeAck+0xc8>
 800b8b2:	2bb0      	cmp	r3, #176	; 0xb0
 800b8b4:	dc2f      	bgt.n	800b916 <MQTT_DeserializeAck+0xd6>
 800b8b6:	2b90      	cmp	r3, #144	; 0x90
 800b8b8:	d019      	beq.n	800b8ee <MQTT_DeserializeAck+0xae>
 800b8ba:	2b90      	cmp	r3, #144	; 0x90
 800b8bc:	dc2b      	bgt.n	800b916 <MQTT_DeserializeAck+0xd6>
 800b8be:	2b70      	cmp	r3, #112	; 0x70
 800b8c0:	d022      	beq.n	800b908 <MQTT_DeserializeAck+0xc8>
 800b8c2:	2b70      	cmp	r3, #112	; 0x70
 800b8c4:	dc27      	bgt.n	800b916 <MQTT_DeserializeAck+0xd6>
 800b8c6:	2b62      	cmp	r3, #98	; 0x62
 800b8c8:	d01e      	beq.n	800b908 <MQTT_DeserializeAck+0xc8>
 800b8ca:	2b62      	cmp	r3, #98	; 0x62
 800b8cc:	dc23      	bgt.n	800b916 <MQTT_DeserializeAck+0xd6>
 800b8ce:	2b50      	cmp	r3, #80	; 0x50
 800b8d0:	d01a      	beq.n	800b908 <MQTT_DeserializeAck+0xc8>
 800b8d2:	2b50      	cmp	r3, #80	; 0x50
 800b8d4:	dc1f      	bgt.n	800b916 <MQTT_DeserializeAck+0xd6>
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	d002      	beq.n	800b8e0 <MQTT_DeserializeAck+0xa0>
 800b8da:	2b40      	cmp	r3, #64	; 0x40
 800b8dc:	d014      	beq.n	800b908 <MQTT_DeserializeAck+0xc8>
 800b8de:	e01a      	b.n	800b916 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800b8e0:	6879      	ldr	r1, [r7, #4]
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff fcdc 	bl	800b2a0 <deserializeConnack>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	75fb      	strb	r3, [r7, #23]
                break;
 800b8ec:	e016      	b.n	800b91c <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800b8ee:	68b9      	ldr	r1, [r7, #8]
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fd83 	bl	800b3fc <deserializeSuback>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75fb      	strb	r3, [r7, #23]
                break;
 800b8fa:	e00f      	b.n	800b91c <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fe15 	bl	800b52c <deserializePingresp>
 800b902:	4603      	mov	r3, r0
 800b904:	75fb      	strb	r3, [r7, #23]
                break;
 800b906:	e009      	b.n	800b91c <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800b908:	68b9      	ldr	r1, [r7, #8]
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f7ff fdca 	bl	800b4a4 <deserializeSimpleAck>
 800b910:	4603      	mov	r3, r0
 800b912:	75fb      	strb	r3, [r7, #23]
                break;
 800b914:	e002      	b.n	800b91c <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800b916:	2305      	movs	r3, #5
 800b918:	75fb      	strb	r3, [r7, #23]
                break;
 800b91a:	bf00      	nop
        }
    }

    return status;
 800b91c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b086      	sub	sp, #24
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800b932:	2300      	movs	r3, #0
 800b934:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d102      	bne.n	800b946 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800b940:	2301      	movs	r3, #1
 800b942:	75fb      	strb	r3, [r7, #23]
 800b944:	e005      	b.n	800b952 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800b946:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2201      	movs	r2, #1
 800b94c:	68b8      	ldr	r0, [r7, #8]
 800b94e:	4798      	blx	r3
 800b950:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d119      	bne.n	800b98c <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fc3a 	bl	800b1d6 <incomingPacketValid>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00e      	beq.n	800b986 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800b968:	68b9      	ldr	r1, [r7, #8]
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff fbdf 	bl	800b12e <getRemainingLength>
 800b970:	4602      	mov	r2, r0
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b97e:	d113      	bne.n	800b9a8 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800b980:	2305      	movs	r3, #5
 800b982:	75fb      	strb	r3, [r7, #23]
 800b984:	e010      	b.n	800b9a8 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800b986:	2305      	movs	r3, #5
 800b988:	75fb      	strb	r3, [r7, #23]
 800b98a:	e00d      	b.n	800b9a8 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d005      	beq.n	800b99e <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d102      	bne.n	800b99e <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800b998:	2307      	movs	r3, #7
 800b99a:	75fb      	strb	r3, [r7, #23]
 800b99c:	e004      	b.n	800b9a8 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d001      	beq.n	800b9a8 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800b9a4:	2304      	movs	r3, #4
 800b9a6:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800b9b4:	b490      	push	{r4, r7}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4623      	mov	r3, r4
 800b9c4:	71fb      	strb	r3, [r7, #7]
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	71bb      	strb	r3, [r7, #6]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	717b      	strb	r3, [r7, #5]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	2b07      	cmp	r3, #7
 800b9da:	d848      	bhi.n	800ba6e <validateTransitionPublish+0xba>
 800b9dc:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <validateTransitionPublish+0x30>)
 800b9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e2:	bf00      	nop
 800b9e4:	0800ba05 	.word	0x0800ba05
 800b9e8:	0800ba29 	.word	0x0800ba29
 800b9ec:	0800ba6f 	.word	0x0800ba6f
 800b9f0:	0800ba6f 	.word	0x0800ba6f
 800b9f4:	0800ba6f 	.word	0x0800ba6f
 800b9f8:	0800ba6f 	.word	0x0800ba6f
 800b9fc:	0800ba53 	.word	0x0800ba53
 800ba00:	0800ba61 	.word	0x0800ba61
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800ba04:	797b      	ldrb	r3, [r7, #5]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d133      	bne.n	800ba72 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800ba0a:	79bb      	ldrb	r3, [r7, #6]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d002      	beq.n	800ba16 <validateTransitionPublish+0x62>
 800ba10:	79bb      	ldrb	r3, [r7, #6]
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d101      	bne.n	800ba1a <validateTransitionPublish+0x66>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <validateTransitionPublish+0x68>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800ba26:	e024      	b.n	800ba72 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800ba28:	793b      	ldrb	r3, [r7, #4]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d002      	beq.n	800ba34 <validateTransitionPublish+0x80>
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d007      	beq.n	800ba42 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800ba32:	e00d      	b.n	800ba50 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800ba34:	79bb      	ldrb	r3, [r7, #6]
 800ba36:	2b06      	cmp	r3, #6
 800ba38:	bf0c      	ite	eq
 800ba3a:	2301      	moveq	r3, #1
 800ba3c:	2300      	movne	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]
                    break;
 800ba40:	e006      	b.n	800ba50 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800ba42:	79bb      	ldrb	r3, [r7, #6]
 800ba44:	2b07      	cmp	r3, #7
 800ba46:	bf0c      	ite	eq
 800ba48:	2301      	moveq	r3, #1
 800ba4a:	2300      	movne	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
                    break;
 800ba4e:	bf00      	nop
            }

            break;
 800ba50:	e010      	b.n	800ba74 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800ba52:	79bb      	ldrb	r3, [r7, #6]
 800ba54:	2b06      	cmp	r3, #6
 800ba56:	bf0c      	ite	eq
 800ba58:	2301      	moveq	r3, #1
 800ba5a:	2300      	movne	r3, #0
 800ba5c:	73fb      	strb	r3, [r7, #15]

            break;
 800ba5e:	e009      	b.n	800ba74 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800ba60:	79bb      	ldrb	r3, [r7, #6]
 800ba62:	2b07      	cmp	r3, #7
 800ba64:	bf0c      	ite	eq
 800ba66:	2301      	moveq	r3, #1
 800ba68:	2300      	movne	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]

            break;
 800ba6c:	e002      	b.n	800ba74 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800ba6e:	bf00      	nop
 800ba70:	e000      	b.n	800ba74 <validateTransitionPublish+0xc0>
            break;
 800ba72:	bf00      	nop
    }

    return isValid;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bc90      	pop	{r4, r7}
 800ba7e:	4770      	bx	lr

0800ba80 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	460a      	mov	r2, r1
 800ba8a:	71fb      	strb	r3, [r7, #7]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	3b02      	subs	r3, #2
 800ba98:	2b07      	cmp	r3, #7
 800ba9a:	d85c      	bhi.n	800bb56 <validateTransitionAck+0xd6>
 800ba9c:	a201      	add	r2, pc, #4	; (adr r2, 800baa4 <validateTransitionAck+0x24>)
 800ba9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa2:	bf00      	nop
 800baa4:	0800bac5 	.word	0x0800bac5
 800baa8:	0800bad3 	.word	0x0800bad3
 800baac:	0800bb2b 	.word	0x0800bb2b
 800bab0:	0800baff 	.word	0x0800baff
 800bab4:	0800bac5 	.word	0x0800bac5
 800bab8:	0800bb1d 	.word	0x0800bb1d
 800babc:	0800bae1 	.word	0x0800bae1
 800bac0:	0800bb39 	.word	0x0800bb39
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800bac4:	79bb      	ldrb	r3, [r7, #6]
 800bac6:	2b0a      	cmp	r3, #10
 800bac8:	bf0c      	ite	eq
 800baca:	2301      	moveq	r3, #1
 800bacc:	2300      	movne	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]
            break;
 800bad0:	e042      	b.n	800bb58 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800bad2:	79bb      	ldrb	r3, [r7, #6]
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	bf0c      	ite	eq
 800bad8:	2301      	moveq	r3, #1
 800bada:	2300      	movne	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
            break;
 800bade:	e03b      	b.n	800bb58 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800bae0:	79bb      	ldrb	r3, [r7, #6]
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d002      	beq.n	800baec <validateTransitionAck+0x6c>
 800bae6:	79bb      	ldrb	r3, [r7, #6]
 800bae8:	2b08      	cmp	r3, #8
 800baea:	d101      	bne.n	800baf0 <validateTransitionAck+0x70>
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <validateTransitionAck+0x72>
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800bafc:	e02c      	b.n	800bb58 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800bafe:	79bb      	ldrb	r3, [r7, #6]
 800bb00:	2b0a      	cmp	r3, #10
 800bb02:	d002      	beq.n	800bb0a <validateTransitionAck+0x8a>
 800bb04:	79bb      	ldrb	r3, [r7, #6]
 800bb06:	2b05      	cmp	r3, #5
 800bb08:	d101      	bne.n	800bb0e <validateTransitionAck+0x8e>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e000      	b.n	800bb10 <validateTransitionAck+0x90>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800bb1a:	e01d      	b.n	800bb58 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800bb1c:	79bb      	ldrb	r3, [r7, #6]
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	bf0c      	ite	eq
 800bb22:	2301      	moveq	r3, #1
 800bb24:	2300      	movne	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]
            break;
 800bb28:	e016      	b.n	800bb58 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800bb2a:	79bb      	ldrb	r3, [r7, #6]
 800bb2c:	2b09      	cmp	r3, #9
 800bb2e:	bf0c      	ite	eq
 800bb30:	2301      	moveq	r3, #1
 800bb32:	2300      	movne	r3, #0
 800bb34:	73fb      	strb	r3, [r7, #15]
            break;
 800bb36:	e00f      	b.n	800bb58 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800bb38:	79bb      	ldrb	r3, [r7, #6]
 800bb3a:	2b0a      	cmp	r3, #10
 800bb3c:	d002      	beq.n	800bb44 <validateTransitionAck+0xc4>
 800bb3e:	79bb      	ldrb	r3, [r7, #6]
 800bb40:	2b09      	cmp	r3, #9
 800bb42:	d101      	bne.n	800bb48 <validateTransitionAck+0xc8>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e000      	b.n	800bb4a <validateTransitionAck+0xca>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800bb54:	e000      	b.n	800bb58 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800bb56:	bf00      	nop
    }

    return isValid;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop

0800bb68 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	460a      	mov	r2, r1
 800bb72:	71fb      	strb	r3, [r7, #7]
 800bb74:	4613      	mov	r3, r2
 800bb76:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d009      	beq.n	800bb96 <isPublishOutgoing+0x2e>
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	dc15      	bgt.n	800bbb2 <isPublishOutgoing+0x4a>
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	dc02      	bgt.n	800bb90 <isPublishOutgoing+0x28>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	da03      	bge.n	800bb96 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800bb8e:	e010      	b.n	800bbb2 <isPublishOutgoing+0x4a>
    switch( packetType )
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d007      	beq.n	800bba4 <isPublishOutgoing+0x3c>
            break;
 800bb94:	e00d      	b.n	800bbb2 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800bb96:	79bb      	ldrb	r3, [r7, #6]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2301      	moveq	r3, #1
 800bb9e:	2300      	movne	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]
            break;
 800bba2:	e007      	b.n	800bbb4 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800bba4:	79bb      	ldrb	r3, [r7, #6]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bf0c      	ite	eq
 800bbaa:	2301      	moveq	r3, #1
 800bbac:	2300      	movne	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
            break;
 800bbb0:	e000      	b.n	800bbb4 <isPublishOutgoing+0x4c>
            break;
 800bbb2:	bf00      	nop
    }

    return isOutgoing;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
	...

0800bbc4 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	603b      	str	r3, [r7, #0]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <findInRecord+0x28>
 800bbde:	4b1b      	ldr	r3, [pc, #108]	; (800bc4c <findInRecord+0x88>)
 800bbe0:	4a1b      	ldr	r2, [pc, #108]	; (800bc50 <findInRecord+0x8c>)
 800bbe2:	f240 11c7 	movw	r1, #455	; 0x1c7
 800bbe6:	481b      	ldr	r0, [pc, #108]	; (800bc54 <findInRecord+0x90>)
 800bbe8:	f003 fb70 	bl	800f2cc <__assert_func>

    *pCurrentState = MQTTStateNull;
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	617b      	str	r3, [r7, #20]
 800bbf6:	e019      	b.n	800bc2c <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	88fa      	ldrh	r2, [r7, #6]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d10e      	bne.n	800bc26 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	789a      	ldrb	r2, [r3, #2]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	78da      	ldrb	r2, [r3, #3]
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	701a      	strb	r2, [r3, #0]
            break;
 800bc24:	e006      	b.n	800bc34 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	617b      	str	r3, [r7, #20]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d3e1      	bcc.n	800bbf8 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d102      	bne.n	800bc42 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	43db      	mvns	r3, r3
 800bc40:	617b      	str	r3, [r7, #20]
    }

    return index;
 800bc42:	697b      	ldr	r3, [r7, #20]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	08014e0c 	.word	0x08014e0c
 800bc50:	0801524c 	.word	0x0801524c
 800bc54:	08014e30 	.word	0x08014e30

0800bc58 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800bc66:	2300      	movs	r3, #0
 800bc68:	43db      	mvns	r3, r3
 800bc6a:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d150      	bne.n	800bd14 <compactRecords+0xbc>
 800bc72:	4b2d      	ldr	r3, [pc, #180]	; (800bd28 <compactRecords+0xd0>)
 800bc74:	4a2d      	ldr	r2, [pc, #180]	; (800bd2c <compactRecords+0xd4>)
 800bc76:	f240 11e5 	movw	r1, #485	; 0x1e5
 800bc7a:	482d      	ldr	r0, [pc, #180]	; (800bd30 <compactRecords+0xd8>)
 800bc7c:	f003 fb26 	bl	800f2cc <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	4413      	add	r3, r2
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d107      	bne.n	800bc9e <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800bc8e:	2300      	movs	r3, #0
 800bc90:	43db      	mvns	r3, r3
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d13a      	bne.n	800bd0e <compactRecords+0xb6>
            {
                emptyIndex = index;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	60bb      	str	r3, [r7, #8]
 800bc9c:	e037      	b.n	800bd0e <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800bc9e:	2300      	movs	r3, #0
 800bca0:	43db      	mvns	r3, r3
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d032      	beq.n	800bd0e <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	441a      	add	r2, r3
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	6879      	ldr	r1, [r7, #4]
 800bcb6:	440b      	add	r3, r1
 800bcb8:	8812      	ldrh	r2, [r2, #0]
 800bcba:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	441a      	add	r2, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	440b      	add	r3, r1
 800bccc:	7892      	ldrb	r2, [r2, #2]
 800bcce:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	441a      	add	r2, r3
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	440b      	add	r3, r1
 800bce0:	78d2      	ldrb	r2, [r2, #3]
 800bce2:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	4413      	add	r3, r2
 800bcec:	2200      	movs	r2, #0
 800bcee:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	4413      	add	r3, r2
 800bd04:	2200      	movs	r2, #0
 800bd06:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3301      	adds	r3, #1
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d3b1      	bcc.n	800bc80 <compactRecords+0x28>
            }
        }
    }
}
 800bd1c:	bf00      	nop
 800bd1e:	bf00      	nop
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	08014e60 	.word	0x08014e60
 800bd2c:	0801525c 	.word	0x0801525c
 800bd30:	08014e30 	.word	0x08014e30

0800bd34 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4611      	mov	r1, r2
 800bd40:	461a      	mov	r2, r3
 800bd42:	460b      	mov	r3, r1
 800bd44:	80fb      	strh	r3, [r7, #6]
 800bd46:	4613      	mov	r3, r2
 800bd48:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800bd56:	2300      	movs	r3, #0
 800bd58:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800bd5a:	88fb      	ldrh	r3, [r7, #6]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d106      	bne.n	800bd6e <addRecord+0x3a>
 800bd60:	4b32      	ldr	r3, [pc, #200]	; (800be2c <addRecord+0xf8>)
 800bd62:	4a33      	ldr	r2, [pc, #204]	; (800be30 <addRecord+0xfc>)
 800bd64:	f44f 7105 	mov.w	r1, #532	; 0x214
 800bd68:	4832      	ldr	r0, [pc, #200]	; (800be34 <addRecord+0x100>)
 800bd6a:	f003 faaf 	bl	800f2cc <__assert_func>
    assert( qos != MQTTQoS0 );
 800bd6e:	797b      	ldrb	r3, [r7, #5]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d106      	bne.n	800bd82 <addRecord+0x4e>
 800bd74:	4b30      	ldr	r3, [pc, #192]	; (800be38 <addRecord+0x104>)
 800bd76:	4a2e      	ldr	r2, [pc, #184]	; (800be30 <addRecord+0xfc>)
 800bd78:	f240 2115 	movw	r1, #533	; 0x215
 800bd7c:	482d      	ldr	r0, [pc, #180]	; (800be34 <addRecord+0x100>)
 800bd7e:	f003 faa5 	bl	800f2cc <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d003      	beq.n	800bd9e <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff ff5d 	bl	800bc58 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	3b01      	subs	r3, #1
 800bda2:	61bb      	str	r3, [r7, #24]
 800bda4:	e021      	b.n	800bdea <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	4413      	add	r3, r2
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d108      	bne.n	800bdc6 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800bdb4:	7cfb      	ldrb	r3, [r7, #19]
 800bdb6:	f083 0301 	eor.w	r3, r3, #1
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d011      	beq.n	800bde4 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	617b      	str	r3, [r7, #20]
 800bdc4:	e00e      	b.n	800bde4 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	88fa      	ldrh	r2, [r7, #6]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d104      	bne.n	800bde4 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800bdda:	2309      	movs	r3, #9
 800bddc:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	617b      	str	r3, [r7, #20]
                break;
 800bde2:	e005      	b.n	800bdf0 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dada      	bge.n	800bda6 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d214      	bcs.n	800be22 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	88fa      	ldrh	r2, [r7, #6]
 800be02:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4413      	add	r3, r2
 800be0c:	797a      	ldrb	r2, [r7, #5]
 800be0e:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4413      	add	r3, r2
 800be18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800be1c:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800be1e:	2300      	movs	r3, #0
 800be20:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800be22:	7ffb      	ldrb	r3, [r7, #31]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3720      	adds	r7, #32
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08014e0c 	.word	0x08014e0c
 800be30:	0801526c 	.word	0x0801526c
 800be34:	08014e30 	.word	0x08014e30
 800be38:	08014e70 	.word	0x08014e70

0800be3c <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4611      	mov	r1, r2
 800be48:	461a      	mov	r2, r3
 800be4a:	460b      	mov	r3, r1
 800be4c:	71fb      	strb	r3, [r7, #7]
 800be4e:	4613      	mov	r3, r2
 800be50:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d106      	bne.n	800be66 <updateRecord+0x2a>
 800be58:	4b13      	ldr	r3, [pc, #76]	; (800bea8 <updateRecord+0x6c>)
 800be5a:	4a14      	ldr	r2, [pc, #80]	; (800beac <updateRecord+0x70>)
 800be5c:	f240 2151 	movw	r1, #593	; 0x251
 800be60:	4813      	ldr	r0, [pc, #76]	; (800beb0 <updateRecord+0x74>)
 800be62:	f003 fa33 	bl	800f2cc <__assert_func>

    if( shouldDelete == true )
 800be66:	79bb      	ldrb	r3, [r7, #6]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d012      	beq.n	800be92 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	4413      	add	r3, r2
 800be74:	2200      	movs	r2, #0
 800be76:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	2200      	movs	r2, #0
 800be82:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	2200      	movs	r2, #0
 800be8e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800be90:	e005      	b.n	800be9e <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	79fa      	ldrb	r2, [r7, #7]
 800be9c:	70da      	strb	r2, [r3, #3]
}
 800be9e:	bf00      	nop
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	08014e60 	.word	0x08014e60
 800beac:	08015278 	.word	0x08015278
 800beb0:	08014e30 	.word	0x08014e30

0800beb4 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b088      	sub	sp, #32
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	460b      	mov	r3, r1
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800bec2:	2300      	movs	r3, #0
 800bec4:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800bece:	2300      	movs	r3, #0
 800bed0:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d106      	bne.n	800bee6 <stateSelect+0x32>
 800bed8:	4b43      	ldr	r3, [pc, #268]	; (800bfe8 <stateSelect+0x134>)
 800beda:	4a44      	ldr	r2, [pc, #272]	; (800bfec <stateSelect+0x138>)
 800bedc:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800bee0:	4843      	ldr	r0, [pc, #268]	; (800bff0 <stateSelect+0x13c>)
 800bee2:	f003 f9f3 	bl	800f2cc <__assert_func>
    assert( searchStates != 0U );
 800bee6:	897b      	ldrh	r3, [r7, #10]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d106      	bne.n	800befa <stateSelect+0x46>
 800beec:	4b41      	ldr	r3, [pc, #260]	; (800bff4 <stateSelect+0x140>)
 800beee:	4a3f      	ldr	r2, [pc, #252]	; (800bfec <stateSelect+0x138>)
 800bef0:	f240 216d 	movw	r1, #621	; 0x26d
 800bef4:	483e      	ldr	r0, [pc, #248]	; (800bff0 <stateSelect+0x13c>)
 800bef6:	f003 f9e9 	bl	800f2cc <__assert_func>
    assert( pCursor != NULL );
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d106      	bne.n	800bf0e <stateSelect+0x5a>
 800bf00:	4b3d      	ldr	r3, [pc, #244]	; (800bff8 <stateSelect+0x144>)
 800bf02:	4a3a      	ldr	r2, [pc, #232]	; (800bfec <stateSelect+0x138>)
 800bf04:	f240 216e 	movw	r1, #622	; 0x26e
 800bf08:	4839      	ldr	r0, [pc, #228]	; (800bff0 <stateSelect+0x13c>)
 800bf0a:	f003 f9df 	bl	800f2cc <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800bf0e:	8bbb      	ldrh	r3, [r7, #28]
 800bf10:	f043 0302 	orr.w	r3, r3, #2
 800bf14:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800bf16:	8bbb      	ldrh	r3, [r7, #28]
 800bf18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf1c:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800bf1e:	8bbb      	ldrh	r3, [r7, #28]
 800bf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf24:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800bf26:	8bbb      	ldrh	r3, [r7, #28]
 800bf28:	f043 0310 	orr.w	r3, r3, #16
 800bf2c:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800bf2e:	8bbb      	ldrh	r3, [r7, #28]
 800bf30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf34:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800bf36:	8bba      	ldrh	r2, [r7, #28]
 800bf38:	897b      	ldrh	r3, [r7, #10]
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <stateSelect+0x9c>
 800bf42:	4b2e      	ldr	r3, [pc, #184]	; (800bffc <stateSelect+0x148>)
 800bf44:	4a29      	ldr	r2, [pc, #164]	; (800bfec <stateSelect+0x138>)
 800bf46:	f44f 711e 	mov.w	r1, #632	; 0x278
 800bf4a:	4829      	ldr	r0, [pc, #164]	; (800bff0 <stateSelect+0x13c>)
 800bf4c:	f003 f9be 	bl	800f2cc <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800bf50:	8bbb      	ldrh	r3, [r7, #28]
 800bf52:	43da      	mvns	r2, r3
 800bf54:	897b      	ldrh	r3, [r7, #10]
 800bf56:	4013      	ands	r3, r2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d006      	beq.n	800bf6a <stateSelect+0xb6>
 800bf5c:	4b28      	ldr	r3, [pc, #160]	; (800c000 <stateSelect+0x14c>)
 800bf5e:	4a23      	ldr	r2, [pc, #140]	; (800bfec <stateSelect+0x138>)
 800bf60:	f240 2179 	movw	r1, #633	; 0x279
 800bf64:	4822      	ldr	r0, [pc, #136]	; (800bff0 <stateSelect+0x13c>)
 800bf66:	f003 f9b1 	bl	800f2cc <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800bf76:	e02d      	b.n	800bfd4 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800bf78:	897a      	ldrh	r2, [r7, #10]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	69b9      	ldr	r1, [r7, #24]
 800bf82:	440b      	add	r3, r1
 800bf84:	78db      	ldrb	r3, [r3, #3]
 800bf86:	4619      	mov	r1, r3
 800bf88:	2301      	movs	r3, #1
 800bf8a:	408b      	lsls	r3, r1
 800bf8c:	401a      	ands	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	69b9      	ldr	r1, [r7, #24]
 800bf96:	440b      	add	r3, r1
 800bf98:	78db      	ldrb	r3, [r3, #3]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	408b      	lsls	r3, r1
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	bf0c      	ite	eq
 800bfa4:	2301      	moveq	r3, #1
 800bfa6:	2300      	movne	r3, #0
 800bfa8:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00c      	beq.n	800bfca <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	4413      	add	r3, r2
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	601a      	str	r2, [r3, #0]
            break;
 800bfc8:	e009      	b.n	800bfde <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	1c5a      	adds	r2, r3, #1
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d8cc      	bhi.n	800bf78 <stateSelect+0xc4>
    }

    return packetId;
 800bfde:	8bfb      	ldrh	r3, [r7, #30]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3720      	adds	r7, #32
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	08014e80 	.word	0x08014e80
 800bfec:	08015288 	.word	0x08015288
 800bff0:	08014e30 	.word	0x08014e30
 800bff4:	08014e98 	.word	0x08014e98
 800bff8:	08014eac 	.word	0x08014eac
 800bffc:	08014ebc 	.word	0x08014ebc
 800c000:	08014ee4 	.word	0x08014ee4

0800c004 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	4603      	mov	r3, r0
 800c00c:	71fb      	strb	r3, [r7, #7]
 800c00e:	460b      	mov	r3, r1
 800c010:	71bb      	strb	r3, [r7, #6]
 800c012:	4613      	mov	r3, r2
 800c014:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800c016:	2300      	movs	r3, #0
 800c018:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800c01a:	797b      	ldrb	r3, [r7, #5]
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	bf0c      	ite	eq
 800c020:	2301      	moveq	r3, #1
 800c022:	2300      	movne	r3, #0
 800c024:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d827      	bhi.n	800c07c <MQTT_CalculateStateAck+0x78>
 800c02c:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <MQTT_CalculateStateAck+0x30>)
 800c02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c032:	bf00      	nop
 800c034:	0800c045 	.word	0x0800c045
 800c038:	0800c057 	.word	0x0800c057
 800c03c:	0800c067 	.word	0x0800c067
 800c040:	0800c077 	.word	0x0800c077
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800c044:	797b      	ldrb	r3, [r7, #5]
 800c046:	2b01      	cmp	r3, #1
 800c048:	bf0c      	ite	eq
 800c04a:	2301      	moveq	r3, #1
 800c04c:	2300      	movne	r3, #0
 800c04e:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800c050:	230a      	movs	r3, #10
 800c052:	73fb      	strb	r3, [r7, #15]
            break;
 800c054:	e013      	b.n	800c07e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800c056:	79bb      	ldrb	r3, [r7, #6]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <MQTT_CalculateStateAck+0x5c>
 800c05c:	2308      	movs	r3, #8
 800c05e:	e000      	b.n	800c062 <MQTT_CalculateStateAck+0x5e>
 800c060:	2304      	movs	r3, #4
 800c062:	73fb      	strb	r3, [r7, #15]
            break;
 800c064:	e00b      	b.n	800c07e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800c066:	79bb      	ldrb	r3, [r7, #6]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <MQTT_CalculateStateAck+0x6c>
 800c06c:	2309      	movs	r3, #9
 800c06e:	e000      	b.n	800c072 <MQTT_CalculateStateAck+0x6e>
 800c070:	2305      	movs	r3, #5
 800c072:	73fb      	strb	r3, [r7, #15]
            break;
 800c074:	e003      	b.n	800c07e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800c076:	230a      	movs	r3, #10
 800c078:	73fb      	strb	r3, [r7, #15]
            break;
 800c07a:	e000      	b.n	800c07e <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800c07c:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	f083 0301 	eor.w	r3, r3, #1
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800c0aa:	2308      	movs	r3, #8
 800c0ac:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <updateStateAck+0x2e>
 800c0bc:	4b22      	ldr	r3, [pc, #136]	; (800c148 <updateStateAck+0xac>)
 800c0be:	4a23      	ldr	r2, [pc, #140]	; (800c14c <updateStateAck+0xb0>)
 800c0c0:	f240 21ce 	movw	r1, #718	; 0x2ce
 800c0c4:	4822      	ldr	r0, [pc, #136]	; (800c150 <updateStateAck+0xb4>)
 800c0c6:	f003 f901 	bl	800f2cc <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800c0ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0ce:	2b0a      	cmp	r3, #10
 800c0d0:	d003      	beq.n	800c0da <updateStateAck+0x3e>
 800c0d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0d6:	2b04      	cmp	r3, #4
 800c0d8:	d101      	bne.n	800c0de <updateStateAck+0x42>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e000      	b.n	800c0e0 <updateStateAck+0x44>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75bb      	strb	r3, [r7, #22]
 800c0e2:	7dbb      	ldrb	r3, [r7, #22]
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800c0ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c0ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fcc3 	bl	800ba80 <validateTransitionAck>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800c0fe:	7d7b      	ldrb	r3, [r7, #21]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01c      	beq.n	800c13e <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800c104:	2300      	movs	r3, #0
 800c106:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800c108:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c10c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c110:	429a      	cmp	r2, r3
 800c112:	d014      	beq.n	800c13e <updateStateAck+0xa2>
        {
            updateRecord( records,
 800c114:	7dbb      	ldrb	r3, [r7, #22]
 800c116:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7ff fe8d 	bl	800be3c <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800c122:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c126:	2b04      	cmp	r3, #4
 800c128:	d109      	bne.n	800c13e <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800c12a:	887a      	ldrh	r2, [r7, #2]
 800c12c:	2304      	movs	r3, #4
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2302      	movs	r3, #2
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fdfd 	bl	800bd34 <addRecord>
 800c13a:	4603      	mov	r3, r0
 800c13c:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3718      	adds	r7, #24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	08014e60 	.word	0x08014e60
 800c14c:	08015294 	.word	0x08015294
 800c150:	08014e30 	.word	0x08014e30

0800c154 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b089      	sub	sp, #36	; 0x24
 800c158:	af02      	add	r7, sp, #8
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	4611      	mov	r1, r2
 800c160:	461a      	mov	r2, r3
 800c162:	460b      	mov	r3, r1
 800c164:	80fb      	strh	r3, [r7, #6]
 800c166:	4613      	mov	r3, r2
 800c168:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800c16a:	2300      	movs	r3, #0
 800c16c:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800c16e:	2300      	movs	r3, #0
 800c170:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d106      	bne.n	800c186 <updateStatePublish+0x32>
 800c178:	4b29      	ldr	r3, [pc, #164]	; (800c220 <updateStatePublish+0xcc>)
 800c17a:	4a2a      	ldr	r2, [pc, #168]	; (800c224 <updateStatePublish+0xd0>)
 800c17c:	f240 310b 	movw	r1, #779	; 0x30b
 800c180:	4829      	ldr	r0, [pc, #164]	; (800c228 <updateStatePublish+0xd4>)
 800c182:	f003 f8a3 	bl	800f2cc <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800c186:	88fb      	ldrh	r3, [r7, #6]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d106      	bne.n	800c19a <updateStatePublish+0x46>
 800c18c:	4b27      	ldr	r3, [pc, #156]	; (800c22c <updateStatePublish+0xd8>)
 800c18e:	4a25      	ldr	r2, [pc, #148]	; (800c224 <updateStatePublish+0xd0>)
 800c190:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800c194:	4824      	ldr	r0, [pc, #144]	; (800c228 <updateStatePublish+0xd4>)
 800c196:	f003 f899 	bl	800f2cc <__assert_func>
    assert( qos != MQTTQoS0 );
 800c19a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d106      	bne.n	800c1b0 <updateStatePublish+0x5c>
 800c1a2:	4b23      	ldr	r3, [pc, #140]	; (800c230 <updateStatePublish+0xdc>)
 800c1a4:	4a1f      	ldr	r2, [pc, #124]	; (800c224 <updateStatePublish+0xd0>)
 800c1a6:	f240 310d 	movw	r1, #781	; 0x30d
 800c1aa:	481f      	ldr	r0, [pc, #124]	; (800c228 <updateStatePublish+0xd4>)
 800c1ac:	f003 f88e 	bl	800f2cc <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800c1b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1b4:	797a      	ldrb	r2, [r7, #5]
 800c1b6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800c1ba:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800c1be:	f7ff fbf9 	bl	800b9b4 <validateTransitionPublish>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800c1c6:	7dbb      	ldrb	r3, [r7, #22]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d021      	beq.n	800c210 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800c1cc:	797b      	ldrb	r3, [r7, #5]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d10f      	bne.n	800c1f2 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6858      	ldr	r0, [r3, #4]
                                pMqttContext->incomingPublishRecordMaxCount,
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	68d9      	ldr	r1, [r3, #12]
            status = addRecord( pMqttContext->incomingPublishRecords,
 800c1da:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800c1de:	88fa      	ldrh	r2, [r7, #6]
 800c1e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	4623      	mov	r3, r4
 800c1e8:	f7ff fda4 	bl	800bd34 <addRecord>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	75fb      	strb	r3, [r7, #23]
 800c1f0:	e010      	b.n	800c214 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800c1f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c1f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d00a      	beq.n	800c214 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c206:	2300      	movs	r3, #0
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	f7ff fe17 	bl	800be3c <updateRecord>
 800c20e:	e001      	b.n	800c214 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800c210:	2308      	movs	r3, #8
 800c212:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800c214:	7dfb      	ldrb	r3, [r7, #23]
}
 800c216:	4618      	mov	r0, r3
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd90      	pop	{r4, r7, pc}
 800c21e:	bf00      	nop
 800c220:	08014e80 	.word	0x08014e80
 800c224:	080152a4 	.word	0x080152a4
 800c228:	08014e30 	.word	0x08014e30
 800c22c:	08014e0c 	.word	0x08014e0c
 800c230:	08014e70 	.word	0x08014e70

0800c234 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800c234:	b590      	push	{r4, r7, lr}
 800c236:	b087      	sub	sp, #28
 800c238:	af02      	add	r7, sp, #8
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	807b      	strh	r3, [r7, #2]
 800c240:	4613      	mov	r3, r2
 800c242:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800c248:	787b      	ldrb	r3, [r7, #1]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800c24e:	2300      	movs	r3, #0
 800c250:	73fb      	strb	r3, [r7, #15]
 800c252:	e014      	b.n	800c27e <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800c254:	887b      	ldrh	r3, [r7, #2]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <MQTT_ReserveState+0x2c>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800c260:	2301      	movs	r3, #1
 800c262:	73fb      	strb	r3, [r7, #15]
 800c264:	e00b      	b.n	800c27e <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6818      	ldr	r0, [r3, #0]
                            pMqttContext->outgoingPublishRecordMaxCount,
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6899      	ldr	r1, [r3, #8]
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800c26e:	787b      	ldrb	r3, [r7, #1]
 800c270:	887a      	ldrh	r2, [r7, #2]
 800c272:	2401      	movs	r4, #1
 800c274:	9400      	str	r4, [sp, #0]
 800c276:	f7ff fd5d 	bl	800bd34 <addRecord>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}

0800c288 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	460a      	mov	r2, r1
 800c292:	71fb      	strb	r3, [r7, #7]
 800c294:	4613      	mov	r3, r2
 800c296:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800c29c:	79bb      	ldrb	r3, [r7, #6]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d011      	beq.n	800c2c6 <MQTT_CalculateStatePublish+0x3e>
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	dc17      	bgt.n	800c2d6 <MQTT_CalculateStatePublish+0x4e>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <MQTT_CalculateStatePublish+0x28>
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d003      	beq.n	800c2b6 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800c2ae:	e012      	b.n	800c2d6 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800c2b0:	230a      	movs	r3, #10
 800c2b2:	73fb      	strb	r3, [r7, #15]
            break;
 800c2b4:	e010      	b.n	800c2d8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800c2b6:	79fb      	ldrb	r3, [r7, #7]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <MQTT_CalculateStatePublish+0x38>
 800c2bc:	2306      	movs	r3, #6
 800c2be:	e000      	b.n	800c2c2 <MQTT_CalculateStatePublish+0x3a>
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	73fb      	strb	r3, [r7, #15]
            break;
 800c2c4:	e008      	b.n	800c2d8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d101      	bne.n	800c2d0 <MQTT_CalculateStatePublish+0x48>
 800c2cc:	2307      	movs	r3, #7
 800c2ce:	e000      	b.n	800c2d2 <MQTT_CalculateStatePublish+0x4a>
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	73fb      	strb	r3, [r7, #15]
            break;
 800c2d4:	e000      	b.n	800c2d8 <MQTT_CalculateStatePublish+0x50>
            break;
 800c2d6:	bf00      	nop
    }

    return calculatedState;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800c2e6:	b590      	push	{r4, r7, lr}
 800c2e8:	b08b      	sub	sp, #44	; 0x2c
 800c2ea:	af04      	add	r7, sp, #16
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	807b      	strh	r3, [r7, #2]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	707b      	strb	r3, [r7, #1]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800c300:	2300      	movs	r3, #0
 800c302:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800c304:	2300      	movs	r3, #0
 800c306:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800c308:	2300      	movs	r3, #0
 800c30a:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800c30c:	2300      	movs	r3, #0
 800c30e:	43db      	mvns	r3, r3
 800c310:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800c312:	2300      	movs	r3, #0
 800c314:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <MQTT_UpdateStatePublish+0x3c>
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d102      	bne.n	800c328 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800c322:	2301      	movs	r3, #1
 800c324:	75fb      	strb	r3, [r7, #23]
 800c326:	e028      	b.n	800c37a <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800c328:	783b      	ldrb	r3, [r7, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d103      	bne.n	800c336 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	220a      	movs	r2, #10
 800c332:	701a      	strb	r2, [r3, #0]
 800c334:	e021      	b.n	800c37a <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800c336:	887b      	ldrh	r3, [r7, #2]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800c33c:	2301      	movs	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]
 800c340:	e01b      	b.n	800c37a <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800c342:	787b      	ldrb	r3, [r7, #1]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d118      	bne.n	800c37a <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6818      	ldr	r0, [r3, #0]
                                    pMqttContext->outgoingPublishRecordMaxCount,
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6899      	ldr	r1, [r3, #8]
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800c350:	f107 040d 	add.w	r4, r7, #13
 800c354:	887a      	ldrh	r2, [r7, #2]
 800c356:	f107 030e 	add.w	r3, r7, #14
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	4623      	mov	r3, r4
 800c35e:	f7ff fc31 	bl	800bbc4 <findInRecord>
 800c362:	6138      	str	r0, [r7, #16]
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800c364:	2300      	movs	r3, #0
 800c366:	43db      	mvns	r3, r3
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d003      	beq.n	800c376 <MQTT_UpdateStatePublish+0x90>
 800c36e:	7b7b      	ldrb	r3, [r7, #13]
 800c370:	783a      	ldrb	r2, [r7, #0]
 800c372:	429a      	cmp	r2, r3
 800c374:	d001      	beq.n	800c37a <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800c376:	2301      	movs	r3, #1
 800c378:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800c37a:	783b      	ldrb	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d020      	beq.n	800c3c2 <MQTT_UpdateStatePublish+0xdc>
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d11d      	bne.n	800c3c2 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800c386:	783a      	ldrb	r2, [r7, #0]
 800c388:	787b      	ldrb	r3, [r7, #1]
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff ff7b 	bl	800c288 <MQTT_CalculateStatePublish>
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	7878      	ldrb	r0, [r7, #1]
 800c39a:	8879      	ldrh	r1, [r7, #2]
 800c39c:	7bfa      	ldrb	r2, [r7, #15]
 800c39e:	9202      	str	r2, [sp, #8]
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	783b      	ldrb	r3, [r7, #0]
 800c3a4:	9300      	str	r3, [sp, #0]
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	460a      	mov	r2, r1
 800c3aa:	6939      	ldr	r1, [r7, #16]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff fed1 	bl	800c154 <updateStatePublish>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	7bfa      	ldrb	r2, [r7, #15]
 800c3c0:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	371c      	adds	r7, #28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd90      	pop	{r4, r7, pc}

0800c3cc <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4603      	mov	r3, r0
 800c3dc:	807b      	strh	r3, [r7, #2]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	707b      	strb	r3, [r7, #1]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800c3ee:	783a      	ldrb	r2, [r7, #0]
 800c3f0:	787b      	ldrb	r3, [r7, #1]
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fbb7 	bl	800bb68 <isPublishOutgoing>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800c402:	2300      	movs	r3, #0
 800c404:	43db      	mvns	r3, r3
 800c406:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800c408:	2300      	movs	r3, #0
 800c40a:	43db      	mvns	r3, r3
 800c40c:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800c412:	2305      	movs	r3, #5
 800c414:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <MQTT_UpdateStateAck+0x56>
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800c422:	2301      	movs	r3, #1
 800c424:	74fb      	strb	r3, [r7, #19]
 800c426:	e027      	b.n	800c478 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800c428:	887b      	ldrh	r3, [r7, #2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d102      	bne.n	800c434 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800c42e:	2301      	movs	r3, #1
 800c430:	74fb      	strb	r3, [r7, #19]
 800c432:	e021      	b.n	800c478 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800c434:	787b      	ldrb	r3, [r7, #1]
 800c436:	2b03      	cmp	r3, #3
 800c438:	d902      	bls.n	800c440 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800c43a:	2301      	movs	r3, #1
 800c43c:	74fb      	strb	r3, [r7, #19]
 800c43e:	e01b      	b.n	800c478 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800c440:	7c7b      	ldrb	r3, [r7, #17]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d006      	beq.n	800c454 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	61fb      	str	r3, [r7, #28]
 800c452:	e005      	b.n	800c460 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800c460:	f107 010f 	add.w	r1, r7, #15
 800c464:	887a      	ldrh	r2, [r7, #2]
 800c466:	f107 0310 	add.w	r3, r7, #16
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	460b      	mov	r3, r1
 800c46e:	69f9      	ldr	r1, [r7, #28]
 800c470:	6978      	ldr	r0, [r7, #20]
 800c472:	f7ff fba7 	bl	800bbc4 <findInRecord>
 800c476:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800c478:	2300      	movs	r3, #0
 800c47a:	43db      	mvns	r3, r3
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d01a      	beq.n	800c4b8 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800c482:	7bfa      	ldrb	r2, [r7, #15]
 800c484:	7839      	ldrb	r1, [r7, #0]
 800c486:	787b      	ldrb	r3, [r7, #1]
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff fdbb 	bl	800c004 <MQTT_CalculateStateAck>
 800c48e:	4603      	mov	r3, r0
 800c490:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800c492:	7c3b      	ldrb	r3, [r7, #16]
 800c494:	8879      	ldrh	r1, [r7, #2]
 800c496:	7cba      	ldrb	r2, [r7, #18]
 800c498:	9201      	str	r2, [sp, #4]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	460b      	mov	r3, r1
 800c49e:	69ba      	ldr	r2, [r7, #24]
 800c4a0:	69f9      	ldr	r1, [r7, #28]
 800c4a2:	6978      	ldr	r0, [r7, #20]
 800c4a4:	f7ff fdfa 	bl	800c09c <updateStateAck>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800c4ac:	7cfb      	ldrb	r3, [r7, #19]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d102      	bne.n	800c4b8 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b4:	7cba      	ldrb	r2, [r7, #18]
 800c4b6:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800c4b8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	60f8      	str	r0, [r7, #12]
 800c4ca:	60b9      	str	r1, [r7, #8]
 800c4cc:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d01b      	beq.n	800c514 <MQTT_PubrelToResend+0x52>
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d018      	beq.n	800c514 <MQTT_PubrelToResend+0x52>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d015      	beq.n	800c514 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800c4e8:	8abb      	ldrh	r3, [r7, #20]
 800c4ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4ee:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800c4f0:	8abb      	ldrh	r3, [r7, #20]
 800c4f2:	f043 0310 	orr.w	r3, r3, #16
 800c4f6:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800c4f8:	8abb      	ldrh	r3, [r7, #20]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff fcd8 	bl	800beb4 <stateSelect>
 800c504:	4603      	mov	r3, r0
 800c506:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800c508:	8afb      	ldrh	r3, [r7, #22]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2204      	movs	r2, #4
 800c512:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800c514:	8afb      	ldrh	r3, [r7, #22]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3718      	adds	r7, #24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800c526:	af02      	add	r7, sp, #8
 800c528:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c52c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c530:	6018      	str	r0, [r3, #0]
 800c532:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c536:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800c53a:	6019      	str	r1, [r3, #0]
 800c53c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c540:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800c544:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800c546:	2301      	movs	r3, #1
 800c548:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800c54c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c550:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	781a      	ldrb	r2, [r3, #0]
 800c558:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c55c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c560:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800c562:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c566:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	88da      	ldrh	r2, [r3, #6]
 800c56e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c572:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c576:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800c578:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c57c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c580:	2200      	movs	r2, #0
 800c582:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800c584:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c588:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800c590:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c594:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	789a      	ldrb	r2, [r3, #2]
 800c59c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5a0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c5a4:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800c5a6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5aa:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	78da      	ldrb	r2, [r3, #3]
 800c5b2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5b6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c5ba:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800c5bc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5c0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	791a      	ldrb	r2, [r3, #4]
 800c5c8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5cc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c5d0:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800c5d2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5d6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	795a      	ldrb	r2, [r3, #5]
 800c5de:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5e2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800c5e6:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800c5e8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c5ec:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	785b      	ldrb	r3, [r3, #1]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d115      	bne.n	800c624 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800c5f8:	f107 0314 	add.w	r3, r7, #20
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	482a      	ldr	r0, [pc, #168]	; (800c6a8 <transport_recv+0x188>)
 800c600:	f7fc fcf6 	bl	8008ff0 <ES_WIFI_StartClientConnection>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800c60a:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <transport_recv+0xf6>
			return 0;
 800c612:	2300      	movs	r3, #0
 800c614:	e042      	b.n	800c69c <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800c616:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c61a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2201      	movs	r2, #1
 800c622:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800c624:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c628:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	7819      	ldrb	r1, [r3, #0]
 800c630:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c634:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	b298      	uxth	r0, r3
 800c63c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c640:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800c644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	4603      	mov	r3, r0
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	4814      	ldr	r0, [pc, #80]	; (800c6a8 <transport_recv+0x188>)
 800c656:	f7fc fe71 	bl	800933c <ES_WIFI_ReceiveData>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800c660:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00a      	beq.n	800c67e <transport_recv+0x15e>
		socketStatus=0;
 800c668:	2300      	movs	r3, #0
 800c66a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800c66e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c672:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2200      	movs	r2, #0
 800c67a:	705a      	strb	r2, [r3, #1]
 800c67c:	e00c      	b.n	800c698 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800c67e:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800c682:	461a      	mov	r2, r3
 800c684:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800c688:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800c68c:	2100      	movs	r1, #0
 800c68e:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800c690:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800c694:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800c698:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20000eec 	.word	0x20000eec

0800c6ac <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08e      	sub	sp, #56	; 0x38
 800c6b0:	af02      	add	r7, sp, #8
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	88db      	ldrh	r3, [r3, #6]
 800c6c6:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	789b      	ldrb	r3, [r3, #2]
 800c6d4:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	78db      	ldrb	r3, [r3, #3]
 800c6da:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	791b      	ldrb	r3, [r3, #4]
 800c6e0:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	795b      	ldrb	r3, [r3, #5]
 800c6e6:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	785b      	ldrb	r3, [r3, #1]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d111      	bne.n	800c714 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800c6f0:	f107 0314 	add.w	r3, r7, #20
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	481c      	ldr	r0, [pc, #112]	; (800c768 <transport_send+0xbc>)
 800c6f8:	f7fc fc7a 	bl	8008ff0 <ES_WIFI_StartClientConnection>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800c702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <transport_send+0x62>
			return 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e027      	b.n	800c75e <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2201      	movs	r2, #1
 800c712:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	7819      	ldrb	r1, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c720:	9301      	str	r3, [sp, #4]
 800c722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	4613      	mov	r3, r2
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	480e      	ldr	r0, [pc, #56]	; (800c768 <transport_send+0xbc>)
 800c72e:	f7fc fd49 	bl	80091c4 <ES_WIFI_SendData>
 800c732:	4603      	mov	r3, r0
 800c734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800c738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00a      	beq.n	800c756 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800c746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c74a:	4619      	mov	r1, r3
 800c74c:	4807      	ldr	r0, [pc, #28]	; (800c76c <transport_send+0xc0>)
 800c74e:	f003 fd25 	bl	801019c <iprintf>
		return 0;
 800c752:	2300      	movs	r3, #0
 800c754:	e003      	b.n	800c75e <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800c756:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3730      	adds	r7, #48	; 0x30
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20000eec 	.word	0x20000eec
 800c76c:	08014fe4 	.word	0x08014fe4

0800c770 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	60ba      	str	r2, [r7, #8]
 800c778:	607b      	str	r3, [r7, #4]
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]
 800c77e:	460b      	mov	r3, r1
 800c780:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	7bfa      	ldrb	r2, [r7, #15]
 800c786:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	7bba      	ldrb	r2, [r7, #14]
 800c78c:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a08      	ldr	r2, [pc, #32]	; (800c7b4 <init_transport_from_socket+0x44>)
 800c792:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a08      	ldr	r2, [pc, #32]	; (800c7b8 <init_transport_from_socket+0x48>)
 800c798:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	60da      	str	r2, [r3, #12]
}
 800c7a6:	bf00      	nop
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	0800c521 	.word	0x0800c521
 800c7b8:	0800c6ad 	.word	0x0800c6ad

0800c7bc <__NVIC_SetPriority>:
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	6039      	str	r1, [r7, #0]
 800c7c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	db0a      	blt.n	800c7e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	490c      	ldr	r1, [pc, #48]	; (800c808 <__NVIC_SetPriority+0x4c>)
 800c7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7da:	0112      	lsls	r2, r2, #4
 800c7dc:	b2d2      	uxtb	r2, r2
 800c7de:	440b      	add	r3, r1
 800c7e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c7e4:	e00a      	b.n	800c7fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	4908      	ldr	r1, [pc, #32]	; (800c80c <__NVIC_SetPriority+0x50>)
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	f003 030f 	and.w	r3, r3, #15
 800c7f2:	3b04      	subs	r3, #4
 800c7f4:	0112      	lsls	r2, r2, #4
 800c7f6:	b2d2      	uxtb	r2, r2
 800c7f8:	440b      	add	r3, r1
 800c7fa:	761a      	strb	r2, [r3, #24]
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	e000e100 	.word	0xe000e100
 800c80c:	e000ed00 	.word	0xe000ed00

0800c810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c814:	2100      	movs	r1, #0
 800c816:	f06f 0004 	mvn.w	r0, #4
 800c81a:	f7ff ffcf 	bl	800c7bc <__NVIC_SetPriority>
#endif
}
 800c81e:	bf00      	nop
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c82a:	f3ef 8305 	mrs	r3, IPSR
 800c82e:	603b      	str	r3, [r7, #0]
  return(result);
 800c830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c836:	f06f 0305 	mvn.w	r3, #5
 800c83a:	607b      	str	r3, [r7, #4]
 800c83c:	e00c      	b.n	800c858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c83e:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <osKernelInitialize+0x44>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d105      	bne.n	800c852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c846:	4b08      	ldr	r3, [pc, #32]	; (800c868 <osKernelInitialize+0x44>)
 800c848:	2201      	movs	r2, #1
 800c84a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	607b      	str	r3, [r7, #4]
 800c850:	e002      	b.n	800c858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c852:	f04f 33ff 	mov.w	r3, #4294967295
 800c856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c858:	687b      	ldr	r3, [r7, #4]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	200017ec 	.word	0x200017ec

0800c86c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c872:	f3ef 8305 	mrs	r3, IPSR
 800c876:	603b      	str	r3, [r7, #0]
  return(result);
 800c878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c87e:	f06f 0305 	mvn.w	r3, #5
 800c882:	607b      	str	r3, [r7, #4]
 800c884:	e010      	b.n	800c8a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c886:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <osKernelStart+0x48>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d109      	bne.n	800c8a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c88e:	f7ff ffbf 	bl	800c810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c892:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <osKernelStart+0x48>)
 800c894:	2202      	movs	r2, #2
 800c896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c898:	f001 f866 	bl	800d968 <vTaskStartScheduler>
      stat = osOK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	607b      	str	r3, [r7, #4]
 800c8a0:	e002      	b.n	800c8a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8a8:	687b      	ldr	r3, [r7, #4]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	200017ec 	.word	0x200017ec

0800c8b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08e      	sub	sp, #56	; 0x38
 800c8bc:	af04      	add	r7, sp, #16
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c8:	f3ef 8305 	mrs	r3, IPSR
 800c8cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c8ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d17e      	bne.n	800c9d2 <osThreadNew+0x11a>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d07b      	beq.n	800c9d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c8da:	2380      	movs	r3, #128	; 0x80
 800c8dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c8de:	2318      	movs	r3, #24
 800c8e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d045      	beq.n	800c97e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <osThreadNew+0x48>
        name = attr->name;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d008      	beq.n	800c926 <osThreadNew+0x6e>
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	2b38      	cmp	r3, #56	; 0x38
 800c918:	d805      	bhi.n	800c926 <osThreadNew+0x6e>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <osThreadNew+0x72>
        return (NULL);
 800c926:	2300      	movs	r3, #0
 800c928:	e054      	b.n	800c9d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	089b      	lsrs	r3, r3, #2
 800c938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00e      	beq.n	800c960 <osThreadNew+0xa8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	2b5b      	cmp	r3, #91	; 0x5b
 800c948:	d90a      	bls.n	800c960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <osThreadNew+0xa8>
        mem = 1;
 800c95a:	2301      	movs	r3, #1
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	e010      	b.n	800c982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10c      	bne.n	800c982 <osThreadNew+0xca>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d108      	bne.n	800c982 <osThreadNew+0xca>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d104      	bne.n	800c982 <osThreadNew+0xca>
          mem = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	e001      	b.n	800c982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d110      	bne.n	800c9aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c990:	9202      	str	r2, [sp, #8]
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6a3a      	ldr	r2, [r7, #32]
 800c99c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f000 fe0c 	bl	800d5bc <xTaskCreateStatic>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	613b      	str	r3, [r7, #16]
 800c9a8:	e013      	b.n	800c9d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d110      	bne.n	800c9d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	f107 0310 	add.w	r3, r7, #16
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 fe57 	bl	800d676 <xTaskCreate>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d001      	beq.n	800c9d2 <osThreadNew+0x11a>
            hTask = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c9d2:	693b      	ldr	r3, [r7, #16]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3728      	adds	r7, #40	; 0x28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e4:	f3ef 8305 	mrs	r3, IPSR
 800c9e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <osDelay+0x1c>
    stat = osErrorISR;
 800c9f0:	f06f 0305 	mvn.w	r3, #5
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e007      	b.n	800ca08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 ff7c 	bl	800d900 <vTaskDelay>
    }
  }

  return (stat);
 800ca08:	68fb      	ldr	r3, [r7, #12]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
	...

0800ca14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4a07      	ldr	r2, [pc, #28]	; (800ca40 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	4a06      	ldr	r2, [pc, #24]	; (800ca44 <vApplicationGetIdleTaskMemory+0x30>)
 800ca2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2280      	movs	r2, #128	; 0x80
 800ca30:	601a      	str	r2, [r3, #0]
}
 800ca32:	bf00      	nop
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	200017f0 	.word	0x200017f0
 800ca44:	2000184c 	.word	0x2000184c

0800ca48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4a07      	ldr	r2, [pc, #28]	; (800ca74 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	4a06      	ldr	r2, [pc, #24]	; (800ca78 <vApplicationGetTimerTaskMemory+0x30>)
 800ca5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca66:	601a      	str	r2, [r3, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	20001a4c 	.word	0x20001a4c
 800ca78:	20001aa8 	.word	0x20001aa8

0800ca7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f103 0208 	add.w	r2, r3, #8
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f04f 32ff 	mov.w	r2, #4294967295
 800ca94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f103 0208 	add.w	r2, r3, #8
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f103 0208 	add.w	r2, r3, #8
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800caca:	bf00      	nop
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cad6:	b480      	push	{r7}
 800cad8:	b085      	sub	sp, #20
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	689a      	ldr	r2, [r3, #8]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	683a      	ldr	r2, [r7, #0]
 800cb00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	601a      	str	r2, [r3, #0]
}
 800cb12:	bf00      	nop
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b085      	sub	sp, #20
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb34:	d103      	bne.n	800cb3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	e00c      	b.n	800cb58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	3308      	adds	r3, #8
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	e002      	b.n	800cb4c <vListInsert+0x2e>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d2f6      	bcs.n	800cb46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	683a      	ldr	r2, [r7, #0]
 800cb72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	601a      	str	r2, [r3, #0]
}
 800cb84:	bf00      	nop
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	6892      	ldr	r2, [r2, #8]
 800cba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	6852      	ldr	r2, [r2, #4]
 800cbb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d103      	bne.n	800cbc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	1e5a      	subs	r2, r3, #1
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xQueueGenericReset+0x2a>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60bb      	str	r3, [r7, #8]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc0e:	f002 f851 	bl	800ecb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1a:	68f9      	ldr	r1, [r7, #12]
 800cc1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc1e:	fb01 f303 	mul.w	r3, r1, r3
 800cc22:	441a      	add	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	68f9      	ldr	r1, [r7, #12]
 800cc42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc44:	fb01 f303 	mul.w	r3, r1, r3
 800cc48:	441a      	add	r2, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	22ff      	movs	r2, #255	; 0xff
 800cc52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	22ff      	movs	r2, #255	; 0xff
 800cc5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d114      	bne.n	800cc8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d01a      	beq.n	800cca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	3310      	adds	r3, #16
 800cc70:	4618      	mov	r0, r3
 800cc72:	f001 f903 	bl	800de7c <xTaskRemoveFromEventList>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d012      	beq.n	800cca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <xQueueGenericReset+0xcc>)
 800cc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	e009      	b.n	800cca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3310      	adds	r3, #16
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff fef2 	bl	800ca7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3324      	adds	r3, #36	; 0x24
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7ff feed 	bl	800ca7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cca2:	f002 f837 	bl	800ed14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cca6:	2301      	movs	r3, #1
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b08e      	sub	sp, #56	; 0x38
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10a      	bne.n	800ccde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccda:	bf00      	nop
 800ccdc:	e7fe      	b.n	800ccdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10a      	bne.n	800ccfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccf6:	bf00      	nop
 800ccf8:	e7fe      	b.n	800ccf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <xQueueGenericCreateStatic+0x52>
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <xQueueGenericCreateStatic+0x56>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <xQueueGenericCreateStatic+0x58>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	623b      	str	r3, [r7, #32]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <xQueueGenericCreateStatic+0x7e>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <xQueueGenericCreateStatic+0x82>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <xQueueGenericCreateStatic+0x84>
 800cd36:	2300      	movs	r3, #0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	61fb      	str	r3, [r7, #28]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd52:	2350      	movs	r3, #80	; 0x50
 800cd54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	2b50      	cmp	r3, #80	; 0x50
 800cd5a:	d00a      	beq.n	800cd72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	61bb      	str	r3, [r7, #24]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00d      	beq.n	800cd9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 f805 	bl	800cda4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3730      	adds	r7, #48	; 0x30
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d103      	bne.n	800cdc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	69ba      	ldr	r2, [r7, #24]
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	e002      	b.n	800cdc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	69b8      	ldr	r0, [r7, #24]
 800cdd6:	f7ff ff05 	bl	800cbe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	78fa      	ldrb	r2, [r7, #3]
 800cdde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cde2:	bf00      	nop
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
	...

0800cdec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08e      	sub	sp, #56	; 0x38
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <xQueueGenericSend+0x32>
	__asm volatile
 800ce08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0c:	f383 8811 	msr	BASEPRI, r3
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce1a:	bf00      	nop
 800ce1c:	e7fe      	b.n	800ce1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d103      	bne.n	800ce2c <xQueueGenericSend+0x40>
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <xQueueGenericSend+0x44>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <xQueueGenericSend+0x46>
 800ce30:	2300      	movs	r3, #0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10a      	bne.n	800ce4c <xQueueGenericSend+0x60>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d103      	bne.n	800ce5a <xQueueGenericSend+0x6e>
 800ce52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d101      	bne.n	800ce5e <xQueueGenericSend+0x72>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e000      	b.n	800ce60 <xQueueGenericSend+0x74>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <xQueueGenericSend+0x8e>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	623b      	str	r3, [r7, #32]
}
 800ce76:	bf00      	nop
 800ce78:	e7fe      	b.n	800ce78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce7a:	f001 f9bd 	bl	800e1f8 <xTaskGetSchedulerState>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d102      	bne.n	800ce8a <xQueueGenericSend+0x9e>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <xQueueGenericSend+0xa2>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e000      	b.n	800ce90 <xQueueGenericSend+0xa4>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10a      	bne.n	800ceaa <xQueueGenericSend+0xbe>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	61fb      	str	r3, [r7, #28]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ceaa:	f001 ff03 	bl	800ecb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d302      	bcc.n	800cec0 <xQueueGenericSend+0xd4>
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d129      	bne.n	800cf14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	68b9      	ldr	r1, [r7, #8]
 800cec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec6:	f000 fa0b 	bl	800d2e0 <prvCopyDataToQueue>
 800ceca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d010      	beq.n	800cef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	3324      	adds	r3, #36	; 0x24
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 ffcf 	bl	800de7c <xTaskRemoveFromEventList>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d013      	beq.n	800cf0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cee4:	4b3f      	ldr	r3, [pc, #252]	; (800cfe4 <xQueueGenericSend+0x1f8>)
 800cee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceea:	601a      	str	r2, [r3, #0]
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	e00a      	b.n	800cf0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d007      	beq.n	800cf0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cefc:	4b39      	ldr	r3, [pc, #228]	; (800cfe4 <xQueueGenericSend+0x1f8>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cf0c:	f001 ff02 	bl	800ed14 <vPortExitCritical>
				return pdPASS;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e063      	b.n	800cfdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d103      	bne.n	800cf22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf1a:	f001 fefb 	bl	800ed14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	e05c      	b.n	800cfdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf28:	f107 0314 	add.w	r3, r7, #20
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f001 f809 	bl	800df44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf32:	2301      	movs	r3, #1
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf36:	f001 feed 	bl	800ed14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf3a:	f000 fd7b 	bl	800da34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf3e:	f001 feb9 	bl	800ecb4 <vPortEnterCritical>
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf48:	b25b      	sxtb	r3, r3
 800cf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4e:	d103      	bne.n	800cf58 <xQueueGenericSend+0x16c>
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf5e:	b25b      	sxtb	r3, r3
 800cf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf64:	d103      	bne.n	800cf6e <xQueueGenericSend+0x182>
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf6e:	f001 fed1 	bl	800ed14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf72:	1d3a      	adds	r2, r7, #4
 800cf74:	f107 0314 	add.w	r3, r7, #20
 800cf78:	4611      	mov	r1, r2
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 fff8 	bl	800df70 <xTaskCheckForTimeOut>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d124      	bne.n	800cfd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf88:	f000 faa2 	bl	800d4d0 <prvIsQueueFull>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d018      	beq.n	800cfc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	3310      	adds	r3, #16
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 ff1e 	bl	800dddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cfa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfa2:	f000 fa2d 	bl	800d400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cfa6:	f000 fd53 	bl	800da50 <xTaskResumeAll>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f47f af7c 	bne.w	800ceaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cfb2:	4b0c      	ldr	r3, [pc, #48]	; (800cfe4 <xQueueGenericSend+0x1f8>)
 800cfb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	e772      	b.n	800ceaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfc6:	f000 fa1b 	bl	800d400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfca:	f000 fd41 	bl	800da50 <xTaskResumeAll>
 800cfce:	e76c      	b.n	800ceaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cfd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfd2:	f000 fa15 	bl	800d400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfd6:	f000 fd3b 	bl	800da50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cfda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3738      	adds	r7, #56	; 0x38
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	e000ed04 	.word	0xe000ed04

0800cfe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b090      	sub	sp, #64	; 0x40
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
 800cff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d103      	bne.n	800d024 <xQueueGenericSendFromISR+0x3c>
 800d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <xQueueGenericSendFromISR+0x40>
 800d024:	2301      	movs	r3, #1
 800d026:	e000      	b.n	800d02a <xQueueGenericSendFromISR+0x42>
 800d028:	2300      	movs	r3, #0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10a      	bne.n	800d044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	2b02      	cmp	r3, #2
 800d048:	d103      	bne.n	800d052 <xQueueGenericSendFromISR+0x6a>
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d101      	bne.n	800d056 <xQueueGenericSendFromISR+0x6e>
 800d052:	2301      	movs	r3, #1
 800d054:	e000      	b.n	800d058 <xQueueGenericSendFromISR+0x70>
 800d056:	2300      	movs	r3, #0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10a      	bne.n	800d072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	623b      	str	r3, [r7, #32]
}
 800d06e:	bf00      	nop
 800d070:	e7fe      	b.n	800d070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d072:	f001 ff01 	bl	800ee78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d076:	f3ef 8211 	mrs	r2, BASEPRI
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	61fa      	str	r2, [r7, #28]
 800d08c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d08e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d302      	bcc.n	800d0a4 <xQueueGenericSendFromISR+0xbc>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d12f      	bne.n	800d104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0ba:	f000 f911 	bl	800d2e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c6:	d112      	bne.n	800d0ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d016      	beq.n	800d0fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d2:	3324      	adds	r3, #36	; 0x24
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 fed1 	bl	800de7c <xTaskRemoveFromEventList>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00e      	beq.n	800d0fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00b      	beq.n	800d0fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	e007      	b.n	800d0fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	b25a      	sxtb	r2, r3
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0fe:	2301      	movs	r3, #1
 800d100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d102:	e001      	b.n	800d108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d104:	2300      	movs	r3, #0
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d116:	4618      	mov	r0, r3
 800d118:	3740      	adds	r7, #64	; 0x40
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	; 0x30
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d12c:	2300      	movs	r3, #0
 800d12e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10a      	bne.n	800d150 <xQueueReceive+0x30>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	623b      	str	r3, [r7, #32]
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d103      	bne.n	800d15e <xQueueReceive+0x3e>
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <xQueueReceive+0x42>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <xQueueReceive+0x44>
 800d162:	2300      	movs	r3, #0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10a      	bne.n	800d17e <xQueueReceive+0x5e>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	61fb      	str	r3, [r7, #28]
}
 800d17a:	bf00      	nop
 800d17c:	e7fe      	b.n	800d17c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d17e:	f001 f83b 	bl	800e1f8 <xTaskGetSchedulerState>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <xQueueReceive+0x6e>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <xQueueReceive+0x72>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <xQueueReceive+0x74>
 800d192:	2300      	movs	r3, #0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10a      	bne.n	800d1ae <xQueueReceive+0x8e>
	__asm volatile
 800d198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	61bb      	str	r3, [r7, #24]
}
 800d1aa:	bf00      	nop
 800d1ac:	e7fe      	b.n	800d1ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ae:	f001 fd81 	bl	800ecb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d01f      	beq.n	800d1fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1be:	68b9      	ldr	r1, [r7, #8]
 800d1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c2:	f000 f8f7 	bl	800d3b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	1e5a      	subs	r2, r3, #1
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00f      	beq.n	800d1f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	3310      	adds	r3, #16
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 fe4e 	bl	800de7c <xTaskRemoveFromEventList>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d007      	beq.n	800d1f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1e6:	4b3d      	ldr	r3, [pc, #244]	; (800d2dc <xQueueReceive+0x1bc>)
 800d1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1f6:	f001 fd8d 	bl	800ed14 <vPortExitCritical>
				return pdPASS;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e069      	b.n	800d2d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d204:	f001 fd86 	bl	800ed14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d208:	2300      	movs	r3, #0
 800d20a:	e062      	b.n	800d2d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d212:	f107 0310 	add.w	r3, r7, #16
 800d216:	4618      	mov	r0, r3
 800d218:	f000 fe94 	bl	800df44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d21c:	2301      	movs	r3, #1
 800d21e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d220:	f001 fd78 	bl	800ed14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d224:	f000 fc06 	bl	800da34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d228:	f001 fd44 	bl	800ecb4 <vPortEnterCritical>
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d232:	b25b      	sxtb	r3, r3
 800d234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d238:	d103      	bne.n	800d242 <xQueueReceive+0x122>
 800d23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d248:	b25b      	sxtb	r3, r3
 800d24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24e:	d103      	bne.n	800d258 <xQueueReceive+0x138>
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d258:	f001 fd5c 	bl	800ed14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d25c:	1d3a      	adds	r2, r7, #4
 800d25e:	f107 0310 	add.w	r3, r7, #16
 800d262:	4611      	mov	r1, r2
 800d264:	4618      	mov	r0, r3
 800d266:	f000 fe83 	bl	800df70 <xTaskCheckForTimeOut>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d123      	bne.n	800d2b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d272:	f000 f917 	bl	800d4a4 <prvIsQueueEmpty>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d017      	beq.n	800d2ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	3324      	adds	r3, #36	; 0x24
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	4611      	mov	r1, r2
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fda9 	bl	800dddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d28c:	f000 f8b8 	bl	800d400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d290:	f000 fbde 	bl	800da50 <xTaskResumeAll>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d189      	bne.n	800d1ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d29a:	4b10      	ldr	r3, [pc, #64]	; (800d2dc <xQueueReceive+0x1bc>)
 800d29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	e780      	b.n	800d1ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ae:	f000 f8a7 	bl	800d400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2b2:	f000 fbcd 	bl	800da50 <xTaskResumeAll>
 800d2b6:	e77a      	b.n	800d1ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ba:	f000 f8a1 	bl	800d400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2be:	f000 fbc7 	bl	800da50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c4:	f000 f8ee 	bl	800d4a4 <prvIsQueueEmpty>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f43f af6f 	beq.w	800d1ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3730      	adds	r7, #48	; 0x30
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	e000ed04 	.word	0xe000ed04

0800d2e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10d      	bne.n	800d31a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d14d      	bne.n	800d3a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 ff92 	bl	800e234 <xTaskPriorityDisinherit>
 800d310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	609a      	str	r2, [r3, #8]
 800d318:	e043      	b.n	800d3a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d119      	bne.n	800d354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6858      	ldr	r0, [r3, #4]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d328:	461a      	mov	r2, r3
 800d32a:	68b9      	ldr	r1, [r7, #8]
 800d32c:	f003 f9dd 	bl	80106ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d338:	441a      	add	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	429a      	cmp	r2, r3
 800d348:	d32b      	bcc.n	800d3a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	605a      	str	r2, [r3, #4]
 800d352:	e026      	b.n	800d3a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	68d8      	ldr	r0, [r3, #12]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35c:	461a      	mov	r2, r3
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	f003 f9c3 	bl	80106ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36c:	425b      	negs	r3, r3
 800d36e:	441a      	add	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	68da      	ldr	r2, [r3, #12]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d207      	bcs.n	800d390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	689a      	ldr	r2, [r3, #8]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d388:	425b      	negs	r3, r3
 800d38a:	441a      	add	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b02      	cmp	r3, #2
 800d394:	d105      	bne.n	800d3a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3aa:	697b      	ldr	r3, [r7, #20]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3718      	adds	r7, #24
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d018      	beq.n	800d3f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68da      	ldr	r2, [r3, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ce:	441a      	add	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	68da      	ldr	r2, [r3, #12]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d303      	bcc.n	800d3e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68d9      	ldr	r1, [r3, #12]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	6838      	ldr	r0, [r7, #0]
 800d3f4:	f003 f979 	bl	80106ea <memcpy>
	}
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d408:	f001 fc54 	bl	800ecb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d414:	e011      	b.n	800d43a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d012      	beq.n	800d444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3324      	adds	r3, #36	; 0x24
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fd2a 	bl	800de7c <xTaskRemoveFromEventList>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d42e:	f000 fe01 	bl	800e034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d432:	7bfb      	ldrb	r3, [r7, #15]
 800d434:	3b01      	subs	r3, #1
 800d436:	b2db      	uxtb	r3, r3
 800d438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	dce9      	bgt.n	800d416 <prvUnlockQueue+0x16>
 800d442:	e000      	b.n	800d446 <prvUnlockQueue+0x46>
					break;
 800d444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	22ff      	movs	r2, #255	; 0xff
 800d44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d44e:	f001 fc61 	bl	800ed14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d452:	f001 fc2f 	bl	800ecb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d45c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d45e:	e011      	b.n	800d484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d012      	beq.n	800d48e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3310      	adds	r3, #16
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 fd05 	bl	800de7c <xTaskRemoveFromEventList>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d478:	f000 fddc 	bl	800e034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d47c:	7bbb      	ldrb	r3, [r7, #14]
 800d47e:	3b01      	subs	r3, #1
 800d480:	b2db      	uxtb	r3, r3
 800d482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dce9      	bgt.n	800d460 <prvUnlockQueue+0x60>
 800d48c:	e000      	b.n	800d490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d48e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	22ff      	movs	r2, #255	; 0xff
 800d494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d498:	f001 fc3c 	bl	800ed14 <vPortExitCritical>
}
 800d49c:	bf00      	nop
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4ac:	f001 fc02 	bl	800ecb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d102      	bne.n	800d4be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	e001      	b.n	800d4c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4c2:	f001 fc27 	bl	800ed14 <vPortExitCritical>

	return xReturn;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4d8:	f001 fbec 	bl	800ecb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d102      	bne.n	800d4ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	60fb      	str	r3, [r7, #12]
 800d4ec:	e001      	b.n	800d4f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4f2:	f001 fc0f 	bl	800ed14 <vPortExitCritical>

	return xReturn;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d50a:	2300      	movs	r3, #0
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e014      	b.n	800d53a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d510:	4a0f      	ldr	r2, [pc, #60]	; (800d550 <vQueueAddToRegistry+0x50>)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10b      	bne.n	800d534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d51c:	490c      	ldr	r1, [pc, #48]	; (800d550 <vQueueAddToRegistry+0x50>)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d526:	4a0a      	ldr	r2, [pc, #40]	; (800d550 <vQueueAddToRegistry+0x50>)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	4413      	add	r3, r2
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d532:	e006      	b.n	800d542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	3301      	adds	r3, #1
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2b07      	cmp	r3, #7
 800d53e:	d9e7      	bls.n	800d510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d540:	bf00      	nop
 800d542:	bf00      	nop
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	20001ea8 	.word	0x20001ea8

0800d554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d564:	f001 fba6 	bl	800ecb4 <vPortEnterCritical>
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d574:	d103      	bne.n	800d57e <vQueueWaitForMessageRestricted+0x2a>
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d584:	b25b      	sxtb	r3, r3
 800d586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58a:	d103      	bne.n	800d594 <vQueueWaitForMessageRestricted+0x40>
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d594:	f001 fbbe 	bl	800ed14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d106      	bne.n	800d5ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	3324      	adds	r3, #36	; 0x24
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 fc3b 	bl	800de24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5ae:	6978      	ldr	r0, [r7, #20]
 800d5b0:	f7ff ff26 	bl	800d400 <prvUnlockQueue>
	}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08e      	sub	sp, #56	; 0x38
 800d5c0:	af04      	add	r7, sp, #16
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10a      	bne.n	800d5e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	623b      	str	r3, [r7, #32]
}
 800d5e2:	bf00      	nop
 800d5e4:	e7fe      	b.n	800d5e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10a      	bne.n	800d602 <xTaskCreateStatic+0x46>
	__asm volatile
 800d5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	61fb      	str	r3, [r7, #28]
}
 800d5fe:	bf00      	nop
 800d600:	e7fe      	b.n	800d600 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d602:	235c      	movs	r3, #92	; 0x5c
 800d604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	2b5c      	cmp	r3, #92	; 0x5c
 800d60a:	d00a      	beq.n	800d622 <xTaskCreateStatic+0x66>
	__asm volatile
 800d60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	61bb      	str	r3, [r7, #24]
}
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	2b00      	cmp	r3, #0
 800d628:	d01e      	beq.n	800d668 <xTaskCreateStatic+0xac>
 800d62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d01b      	beq.n	800d668 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	2202      	movs	r2, #2
 800d63e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d642:	2300      	movs	r3, #0
 800d644:	9303      	str	r3, [sp, #12]
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	9302      	str	r3, [sp, #8]
 800d64a:	f107 0314 	add.w	r3, r7, #20
 800d64e:	9301      	str	r3, [sp, #4]
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	68b9      	ldr	r1, [r7, #8]
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f000 f850 	bl	800d700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d662:	f000 f8dd 	bl	800d820 <prvAddNewTaskToReadyList>
 800d666:	e001      	b.n	800d66c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d668:	2300      	movs	r3, #0
 800d66a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d66c:	697b      	ldr	r3, [r7, #20]
	}
 800d66e:	4618      	mov	r0, r3
 800d670:	3728      	adds	r7, #40	; 0x28
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d676:	b580      	push	{r7, lr}
 800d678:	b08c      	sub	sp, #48	; 0x30
 800d67a:	af04      	add	r7, sp, #16
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	603b      	str	r3, [r7, #0]
 800d682:	4613      	mov	r3, r2
 800d684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d686:	88fb      	ldrh	r3, [r7, #6]
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4618      	mov	r0, r3
 800d68c:	f001 fc34 	bl	800eef8 <pvPortMalloc>
 800d690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00e      	beq.n	800d6b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d698:	205c      	movs	r0, #92	; 0x5c
 800d69a:	f001 fc2d 	bl	800eef8 <pvPortMalloc>
 800d69e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	631a      	str	r2, [r3, #48]	; 0x30
 800d6ac:	e005      	b.n	800d6ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6ae:	6978      	ldr	r0, [r7, #20]
 800d6b0:	f001 fcee 	bl	800f090 <vPortFree>
 800d6b4:	e001      	b.n	800d6ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d017      	beq.n	800d6f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6c8:	88fa      	ldrh	r2, [r7, #6]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9303      	str	r3, [sp, #12]
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	9302      	str	r3, [sp, #8]
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	68b9      	ldr	r1, [r7, #8]
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 f80e 	bl	800d700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6e4:	69f8      	ldr	r0, [r7, #28]
 800d6e6:	f000 f89b 	bl	800d820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	61bb      	str	r3, [r7, #24]
 800d6ee:	e002      	b.n	800d6f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6f6:	69bb      	ldr	r3, [r7, #24]
	}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3720      	adds	r7, #32
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b088      	sub	sp, #32
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
 800d70c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	461a      	mov	r2, r3
 800d718:	21a5      	movs	r1, #165	; 0xa5
 800d71a:	f002 fecf 	bl	80104bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d728:	3b01      	subs	r3, #1
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	f023 0307 	bic.w	r3, r3, #7
 800d736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	f003 0307 	and.w	r3, r3, #7
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00a      	beq.n	800d758 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	617b      	str	r3, [r7, #20]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d01f      	beq.n	800d79e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d75e:	2300      	movs	r3, #0
 800d760:	61fb      	str	r3, [r7, #28]
 800d762:	e012      	b.n	800d78a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	4413      	add	r3, r2
 800d76a:	7819      	ldrb	r1, [r3, #0]
 800d76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	4413      	add	r3, r2
 800d772:	3334      	adds	r3, #52	; 0x34
 800d774:	460a      	mov	r2, r1
 800d776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	4413      	add	r3, r2
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d006      	beq.n	800d792 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	3301      	adds	r3, #1
 800d788:	61fb      	str	r3, [r7, #28]
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	2b0f      	cmp	r3, #15
 800d78e:	d9e9      	bls.n	800d764 <prvInitialiseNewTask+0x64>
 800d790:	e000      	b.n	800d794 <prvInitialiseNewTask+0x94>
			{
				break;
 800d792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	2200      	movs	r2, #0
 800d798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d79c:	e003      	b.n	800d7a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	2b37      	cmp	r3, #55	; 0x37
 800d7aa:	d901      	bls.n	800d7b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7ac:	2337      	movs	r3, #55	; 0x37
 800d7ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	2200      	movs	r2, #0
 800d7c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff f978 	bl	800cabc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ce:	3318      	adds	r3, #24
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff f973 	bl	800cabc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	68f9      	ldr	r1, [r7, #12]
 800d7fe:	69b8      	ldr	r0, [r7, #24]
 800d800:	f001 f928 	bl	800ea54 <pxPortInitialiseStack>
 800d804:	4602      	mov	r2, r0
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d816:	bf00      	nop
 800d818:	3720      	adds	r7, #32
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d828:	f001 fa44 	bl	800ecb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d82c:	4b2d      	ldr	r3, [pc, #180]	; (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	4a2c      	ldr	r2, [pc, #176]	; (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d836:	4b2c      	ldr	r3, [pc, #176]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d109      	bne.n	800d852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d83e:	4a2a      	ldr	r2, [pc, #168]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d844:	4b27      	ldr	r3, [pc, #156]	; (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d110      	bne.n	800d86e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d84c:	f000 fc16 	bl	800e07c <prvInitialiseTaskLists>
 800d850:	e00d      	b.n	800d86e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d852:	4b26      	ldr	r3, [pc, #152]	; (800d8ec <prvAddNewTaskToReadyList+0xcc>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d85a:	4b23      	ldr	r3, [pc, #140]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d864:	429a      	cmp	r2, r3
 800d866:	d802      	bhi.n	800d86e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d868:	4a1f      	ldr	r2, [pc, #124]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d86e:	4b20      	ldr	r3, [pc, #128]	; (800d8f0 <prvAddNewTaskToReadyList+0xd0>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a1e      	ldr	r2, [pc, #120]	; (800d8f0 <prvAddNewTaskToReadyList+0xd0>)
 800d876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d878:	4b1d      	ldr	r3, [pc, #116]	; (800d8f0 <prvAddNewTaskToReadyList+0xd0>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d884:	4b1b      	ldr	r3, [pc, #108]	; (800d8f4 <prvAddNewTaskToReadyList+0xd4>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d903      	bls.n	800d894 <prvAddNewTaskToReadyList+0x74>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	4a18      	ldr	r2, [pc, #96]	; (800d8f4 <prvAddNewTaskToReadyList+0xd4>)
 800d892:	6013      	str	r3, [r2, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d898:	4613      	mov	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4413      	add	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4a15      	ldr	r2, [pc, #84]	; (800d8f8 <prvAddNewTaskToReadyList+0xd8>)
 800d8a2:	441a      	add	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	f7ff f913 	bl	800cad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8b0:	f001 fa30 	bl	800ed14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8b4:	4b0d      	ldr	r3, [pc, #52]	; (800d8ec <prvAddNewTaskToReadyList+0xcc>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00e      	beq.n	800d8da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d207      	bcs.n	800d8da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8ca:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <prvAddNewTaskToReadyList+0xdc>)
 800d8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d0:	601a      	str	r2, [r3, #0]
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200023bc 	.word	0x200023bc
 800d8e8:	20001ee8 	.word	0x20001ee8
 800d8ec:	200023c8 	.word	0x200023c8
 800d8f0:	200023d8 	.word	0x200023d8
 800d8f4:	200023c4 	.word	0x200023c4
 800d8f8:	20001eec 	.word	0x20001eec
 800d8fc:	e000ed04 	.word	0xe000ed04

0800d900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d908:	2300      	movs	r3, #0
 800d90a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d017      	beq.n	800d942 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d912:	4b13      	ldr	r3, [pc, #76]	; (800d960 <vTaskDelay+0x60>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <vTaskDelay+0x30>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	60bb      	str	r3, [r7, #8]
}
 800d92c:	bf00      	nop
 800d92e:	e7fe      	b.n	800d92e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d930:	f000 f880 	bl	800da34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d934:	2100      	movs	r1, #0
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fcea 	bl	800e310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d93c:	f000 f888 	bl	800da50 <xTaskResumeAll>
 800d940:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d107      	bne.n	800d958 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d948:	4b06      	ldr	r3, [pc, #24]	; (800d964 <vTaskDelay+0x64>)
 800d94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d958:	bf00      	nop
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	200023e4 	.word	0x200023e4
 800d964:	e000ed04 	.word	0xe000ed04

0800d968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	; 0x28
 800d96c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d972:	2300      	movs	r3, #0
 800d974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d976:	463a      	mov	r2, r7
 800d978:	1d39      	adds	r1, r7, #4
 800d97a:	f107 0308 	add.w	r3, r7, #8
 800d97e:	4618      	mov	r0, r3
 800d980:	f7ff f848 	bl	800ca14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	9202      	str	r2, [sp, #8]
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	2300      	movs	r3, #0
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	2300      	movs	r3, #0
 800d994:	460a      	mov	r2, r1
 800d996:	4921      	ldr	r1, [pc, #132]	; (800da1c <vTaskStartScheduler+0xb4>)
 800d998:	4821      	ldr	r0, [pc, #132]	; (800da20 <vTaskStartScheduler+0xb8>)
 800d99a:	f7ff fe0f 	bl	800d5bc <xTaskCreateStatic>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	4a20      	ldr	r2, [pc, #128]	; (800da24 <vTaskStartScheduler+0xbc>)
 800d9a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9a4:	4b1f      	ldr	r3, [pc, #124]	; (800da24 <vTaskStartScheduler+0xbc>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	617b      	str	r3, [r7, #20]
 800d9b0:	e001      	b.n	800d9b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d102      	bne.n	800d9c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d9bc:	f000 fcfc 	bl	800e3b8 <xTimerCreateTimerTask>
 800d9c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d116      	bne.n	800d9f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	613b      	str	r3, [r7, #16]
}
 800d9da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9dc:	4b12      	ldr	r3, [pc, #72]	; (800da28 <vTaskStartScheduler+0xc0>)
 800d9de:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9e4:	4b11      	ldr	r3, [pc, #68]	; (800da2c <vTaskStartScheduler+0xc4>)
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9ea:	4b11      	ldr	r3, [pc, #68]	; (800da30 <vTaskStartScheduler+0xc8>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9f0:	f001 f8be 	bl	800eb70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9f4:	e00e      	b.n	800da14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fc:	d10a      	bne.n	800da14 <vTaskStartScheduler+0xac>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	60fb      	str	r3, [r7, #12]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <vTaskStartScheduler+0xaa>
}
 800da14:	bf00      	nop
 800da16:	3718      	adds	r7, #24
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	08015014 	.word	0x08015014
 800da20:	0800e04d 	.word	0x0800e04d
 800da24:	200023e0 	.word	0x200023e0
 800da28:	200023dc 	.word	0x200023dc
 800da2c:	200023c8 	.word	0x200023c8
 800da30:	200023c0 	.word	0x200023c0

0800da34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da34:	b480      	push	{r7}
 800da36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da38:	4b04      	ldr	r3, [pc, #16]	; (800da4c <vTaskSuspendAll+0x18>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3301      	adds	r3, #1
 800da3e:	4a03      	ldr	r2, [pc, #12]	; (800da4c <vTaskSuspendAll+0x18>)
 800da40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da42:	bf00      	nop
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	200023e4 	.word	0x200023e4

0800da50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da56:	2300      	movs	r3, #0
 800da58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da5e:	4b42      	ldr	r3, [pc, #264]	; (800db68 <xTaskResumeAll+0x118>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10a      	bne.n	800da7c <xTaskResumeAll+0x2c>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	603b      	str	r3, [r7, #0]
}
 800da78:	bf00      	nop
 800da7a:	e7fe      	b.n	800da7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da7c:	f001 f91a 	bl	800ecb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da80:	4b39      	ldr	r3, [pc, #228]	; (800db68 <xTaskResumeAll+0x118>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	3b01      	subs	r3, #1
 800da86:	4a38      	ldr	r2, [pc, #224]	; (800db68 <xTaskResumeAll+0x118>)
 800da88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da8a:	4b37      	ldr	r3, [pc, #220]	; (800db68 <xTaskResumeAll+0x118>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d162      	bne.n	800db58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da92:	4b36      	ldr	r3, [pc, #216]	; (800db6c <xTaskResumeAll+0x11c>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d05e      	beq.n	800db58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da9a:	e02f      	b.n	800dafc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da9c:	4b34      	ldr	r3, [pc, #208]	; (800db70 <xTaskResumeAll+0x120>)
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3318      	adds	r3, #24
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff f871 	bl	800cb90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3304      	adds	r3, #4
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff f86c 	bl	800cb90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabc:	4b2d      	ldr	r3, [pc, #180]	; (800db74 <xTaskResumeAll+0x124>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d903      	bls.n	800dacc <xTaskResumeAll+0x7c>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac8:	4a2a      	ldr	r2, [pc, #168]	; (800db74 <xTaskResumeAll+0x124>)
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad0:	4613      	mov	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4a27      	ldr	r2, [pc, #156]	; (800db78 <xTaskResumeAll+0x128>)
 800dada:	441a      	add	r2, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3304      	adds	r3, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7fe fff7 	bl	800cad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daec:	4b23      	ldr	r3, [pc, #140]	; (800db7c <xTaskResumeAll+0x12c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d302      	bcc.n	800dafc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800daf6:	4b22      	ldr	r3, [pc, #136]	; (800db80 <xTaskResumeAll+0x130>)
 800daf8:	2201      	movs	r2, #1
 800dafa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dafc:	4b1c      	ldr	r3, [pc, #112]	; (800db70 <xTaskResumeAll+0x120>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1cb      	bne.n	800da9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db0a:	f000 fb55 	bl	800e1b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db0e:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <xTaskResumeAll+0x134>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d010      	beq.n	800db3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db1a:	f000 f847 	bl	800dbac <xTaskIncrementTick>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db24:	4b16      	ldr	r3, [pc, #88]	; (800db80 <xTaskResumeAll+0x130>)
 800db26:	2201      	movs	r2, #1
 800db28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d1f1      	bne.n	800db1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db36:	4b13      	ldr	r3, [pc, #76]	; (800db84 <xTaskResumeAll+0x134>)
 800db38:	2200      	movs	r2, #0
 800db3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db3c:	4b10      	ldr	r3, [pc, #64]	; (800db80 <xTaskResumeAll+0x130>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d009      	beq.n	800db58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db44:	2301      	movs	r3, #1
 800db46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db48:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <xTaskResumeAll+0x138>)
 800db4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db4e:	601a      	str	r2, [r3, #0]
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db58:	f001 f8dc 	bl	800ed14 <vPortExitCritical>

	return xAlreadyYielded;
 800db5c:	68bb      	ldr	r3, [r7, #8]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	200023e4 	.word	0x200023e4
 800db6c:	200023bc 	.word	0x200023bc
 800db70:	2000237c 	.word	0x2000237c
 800db74:	200023c4 	.word	0x200023c4
 800db78:	20001eec 	.word	0x20001eec
 800db7c:	20001ee8 	.word	0x20001ee8
 800db80:	200023d0 	.word	0x200023d0
 800db84:	200023cc 	.word	0x200023cc
 800db88:	e000ed04 	.word	0xe000ed04

0800db8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db92:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <xTaskGetTickCount+0x1c>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db98:	687b      	ldr	r3, [r7, #4]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	200023c0 	.word	0x200023c0

0800dbac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbb6:	4b4f      	ldr	r3, [pc, #316]	; (800dcf4 <xTaskIncrementTick+0x148>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f040 808f 	bne.w	800dcde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbc0:	4b4d      	ldr	r3, [pc, #308]	; (800dcf8 <xTaskIncrementTick+0x14c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dbc8:	4a4b      	ldr	r2, [pc, #300]	; (800dcf8 <xTaskIncrementTick+0x14c>)
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d120      	bne.n	800dc16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dbd4:	4b49      	ldr	r3, [pc, #292]	; (800dcfc <xTaskIncrementTick+0x150>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <xTaskIncrementTick+0x48>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	603b      	str	r3, [r7, #0]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <xTaskIncrementTick+0x46>
 800dbf4:	4b41      	ldr	r3, [pc, #260]	; (800dcfc <xTaskIncrementTick+0x150>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	60fb      	str	r3, [r7, #12]
 800dbfa:	4b41      	ldr	r3, [pc, #260]	; (800dd00 <xTaskIncrementTick+0x154>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a3f      	ldr	r2, [pc, #252]	; (800dcfc <xTaskIncrementTick+0x150>)
 800dc00:	6013      	str	r3, [r2, #0]
 800dc02:	4a3f      	ldr	r2, [pc, #252]	; (800dd00 <xTaskIncrementTick+0x154>)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6013      	str	r3, [r2, #0]
 800dc08:	4b3e      	ldr	r3, [pc, #248]	; (800dd04 <xTaskIncrementTick+0x158>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	4a3d      	ldr	r2, [pc, #244]	; (800dd04 <xTaskIncrementTick+0x158>)
 800dc10:	6013      	str	r3, [r2, #0]
 800dc12:	f000 fad1 	bl	800e1b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc16:	4b3c      	ldr	r3, [pc, #240]	; (800dd08 <xTaskIncrementTick+0x15c>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d349      	bcc.n	800dcb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc20:	4b36      	ldr	r3, [pc, #216]	; (800dcfc <xTaskIncrementTick+0x150>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d104      	bne.n	800dc34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc2a:	4b37      	ldr	r3, [pc, #220]	; (800dd08 <xTaskIncrementTick+0x15c>)
 800dc2c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc30:	601a      	str	r2, [r3, #0]
					break;
 800dc32:	e03f      	b.n	800dcb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc34:	4b31      	ldr	r3, [pc, #196]	; (800dcfc <xTaskIncrementTick+0x150>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d203      	bcs.n	800dc54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc4c:	4a2e      	ldr	r2, [pc, #184]	; (800dd08 <xTaskIncrementTick+0x15c>)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc52:	e02f      	b.n	800dcb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fe ff99 	bl	800cb90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d004      	beq.n	800dc70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	3318      	adds	r3, #24
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe ff90 	bl	800cb90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc74:	4b25      	ldr	r3, [pc, #148]	; (800dd0c <xTaskIncrementTick+0x160>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d903      	bls.n	800dc84 <xTaskIncrementTick+0xd8>
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	4a22      	ldr	r2, [pc, #136]	; (800dd0c <xTaskIncrementTick+0x160>)
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc88:	4613      	mov	r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4a1f      	ldr	r2, [pc, #124]	; (800dd10 <xTaskIncrementTick+0x164>)
 800dc92:	441a      	add	r2, r3
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	f7fe ff1b 	bl	800cad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca4:	4b1b      	ldr	r3, [pc, #108]	; (800dd14 <xTaskIncrementTick+0x168>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d3b8      	bcc.n	800dc20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcb2:	e7b5      	b.n	800dc20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcb4:	4b17      	ldr	r3, [pc, #92]	; (800dd14 <xTaskIncrementTick+0x168>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcba:	4915      	ldr	r1, [pc, #84]	; (800dd10 <xTaskIncrementTick+0x164>)
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	440b      	add	r3, r1
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d901      	bls.n	800dcd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dccc:	2301      	movs	r3, #1
 800dcce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dcd0:	4b11      	ldr	r3, [pc, #68]	; (800dd18 <xTaskIncrementTick+0x16c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d007      	beq.n	800dce8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	617b      	str	r3, [r7, #20]
 800dcdc:	e004      	b.n	800dce8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <xTaskIncrementTick+0x170>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	4a0d      	ldr	r2, [pc, #52]	; (800dd1c <xTaskIncrementTick+0x170>)
 800dce6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dce8:	697b      	ldr	r3, [r7, #20]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200023e4 	.word	0x200023e4
 800dcf8:	200023c0 	.word	0x200023c0
 800dcfc:	20002374 	.word	0x20002374
 800dd00:	20002378 	.word	0x20002378
 800dd04:	200023d4 	.word	0x200023d4
 800dd08:	200023dc 	.word	0x200023dc
 800dd0c:	200023c4 	.word	0x200023c4
 800dd10:	20001eec 	.word	0x20001eec
 800dd14:	20001ee8 	.word	0x20001ee8
 800dd18:	200023d0 	.word	0x200023d0
 800dd1c:	200023cc 	.word	0x200023cc

0800dd20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd26:	4b28      	ldr	r3, [pc, #160]	; (800ddc8 <vTaskSwitchContext+0xa8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd2e:	4b27      	ldr	r3, [pc, #156]	; (800ddcc <vTaskSwitchContext+0xac>)
 800dd30:	2201      	movs	r2, #1
 800dd32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd34:	e041      	b.n	800ddba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dd36:	4b25      	ldr	r3, [pc, #148]	; (800ddcc <vTaskSwitchContext+0xac>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd3c:	4b24      	ldr	r3, [pc, #144]	; (800ddd0 <vTaskSwitchContext+0xb0>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	e010      	b.n	800dd66 <vTaskSwitchContext+0x46>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10a      	bne.n	800dd60 <vTaskSwitchContext+0x40>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	607b      	str	r3, [r7, #4]
}
 800dd5c:	bf00      	nop
 800dd5e:	e7fe      	b.n	800dd5e <vTaskSwitchContext+0x3e>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	491b      	ldr	r1, [pc, #108]	; (800ddd4 <vTaskSwitchContext+0xb4>)
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	4413      	add	r3, r2
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	440b      	add	r3, r1
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d0e4      	beq.n	800dd44 <vTaskSwitchContext+0x24>
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4a13      	ldr	r2, [pc, #76]	; (800ddd4 <vTaskSwitchContext+0xb4>)
 800dd86:	4413      	add	r3, r2
 800dd88:	60bb      	str	r3, [r7, #8]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	685a      	ldr	r2, [r3, #4]
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	605a      	str	r2, [r3, #4]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	3308      	adds	r3, #8
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d104      	bne.n	800ddaa <vTaskSwitchContext+0x8a>
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	605a      	str	r2, [r3, #4]
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	4a09      	ldr	r2, [pc, #36]	; (800ddd8 <vTaskSwitchContext+0xb8>)
 800ddb2:	6013      	str	r3, [r2, #0]
 800ddb4:	4a06      	ldr	r2, [pc, #24]	; (800ddd0 <vTaskSwitchContext+0xb0>)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6013      	str	r3, [r2, #0]
}
 800ddba:	bf00      	nop
 800ddbc:	3714      	adds	r7, #20
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	200023e4 	.word	0x200023e4
 800ddcc:	200023d0 	.word	0x200023d0
 800ddd0:	200023c4 	.word	0x200023c4
 800ddd4:	20001eec 	.word	0x20001eec
 800ddd8:	20001ee8 	.word	0x20001ee8

0800dddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	60fb      	str	r3, [r7, #12]
}
 800ddfe:	bf00      	nop
 800de00:	e7fe      	b.n	800de00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de02:	4b07      	ldr	r3, [pc, #28]	; (800de20 <vTaskPlaceOnEventList+0x44>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3318      	adds	r3, #24
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe fe87 	bl	800cb1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de10:	2101      	movs	r1, #1
 800de12:	6838      	ldr	r0, [r7, #0]
 800de14:	f000 fa7c 	bl	800e310 <prvAddCurrentTaskToDelayedList>
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20001ee8 	.word	0x20001ee8

0800de24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	617b      	str	r3, [r7, #20]
}
 800de48:	bf00      	nop
 800de4a:	e7fe      	b.n	800de4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <vTaskPlaceOnEventListRestricted+0x54>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3318      	adds	r3, #24
 800de52:	4619      	mov	r1, r3
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f7fe fe3e 	bl	800cad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800de60:	f04f 33ff 	mov.w	r3, #4294967295
 800de64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	68b8      	ldr	r0, [r7, #8]
 800de6a:	f000 fa51 	bl	800e310 <prvAddCurrentTaskToDelayedList>
	}
 800de6e:	bf00      	nop
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20001ee8 	.word	0x20001ee8

0800de7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	60fb      	str	r3, [r7, #12]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3318      	adds	r3, #24
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe fe6f 	bl	800cb90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb2:	4b1e      	ldr	r3, [pc, #120]	; (800df2c <xTaskRemoveFromEventList+0xb0>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d11d      	bne.n	800def6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe fe66 	bl	800cb90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4b19      	ldr	r3, [pc, #100]	; (800df30 <xTaskRemoveFromEventList+0xb4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d903      	bls.n	800ded8 <xTaskRemoveFromEventList+0x5c>
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded4:	4a16      	ldr	r2, [pc, #88]	; (800df30 <xTaskRemoveFromEventList+0xb4>)
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4a13      	ldr	r2, [pc, #76]	; (800df34 <xTaskRemoveFromEventList+0xb8>)
 800dee6:	441a      	add	r2, r3
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	3304      	adds	r3, #4
 800deec:	4619      	mov	r1, r3
 800deee:	4610      	mov	r0, r2
 800def0:	f7fe fdf1 	bl	800cad6 <vListInsertEnd>
 800def4:	e005      	b.n	800df02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	3318      	adds	r3, #24
 800defa:	4619      	mov	r1, r3
 800defc:	480e      	ldr	r0, [pc, #56]	; (800df38 <xTaskRemoveFromEventList+0xbc>)
 800defe:	f7fe fdea 	bl	800cad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <xTaskRemoveFromEventList+0xc0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d905      	bls.n	800df1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df10:	2301      	movs	r3, #1
 800df12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df14:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <xTaskRemoveFromEventList+0xc4>)
 800df16:	2201      	movs	r2, #1
 800df18:	601a      	str	r2, [r3, #0]
 800df1a:	e001      	b.n	800df20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df20:	697b      	ldr	r3, [r7, #20]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	200023e4 	.word	0x200023e4
 800df30:	200023c4 	.word	0x200023c4
 800df34:	20001eec 	.word	0x20001eec
 800df38:	2000237c 	.word	0x2000237c
 800df3c:	20001ee8 	.word	0x20001ee8
 800df40:	200023d0 	.word	0x200023d0

0800df44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df4c:	4b06      	ldr	r3, [pc, #24]	; (800df68 <vTaskInternalSetTimeOutState+0x24>)
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df54:	4b05      	ldr	r3, [pc, #20]	; (800df6c <vTaskInternalSetTimeOutState+0x28>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	605a      	str	r2, [r3, #4]
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	200023d4 	.word	0x200023d4
 800df6c:	200023c0 	.word	0x200023c0

0800df70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10a      	bne.n	800df96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	613b      	str	r3, [r7, #16]
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10a      	bne.n	800dfb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	60fb      	str	r3, [r7, #12]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dfb2:	f000 fe7f 	bl	800ecb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfb6:	4b1d      	ldr	r3, [pc, #116]	; (800e02c <xTaskCheckForTimeOut+0xbc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfce:	d102      	bne.n	800dfd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61fb      	str	r3, [r7, #28]
 800dfd4:	e023      	b.n	800e01e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	4b15      	ldr	r3, [pc, #84]	; (800e030 <xTaskCheckForTimeOut+0xc0>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d007      	beq.n	800dff2 <xTaskCheckForTimeOut+0x82>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d302      	bcc.n	800dff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfec:	2301      	movs	r3, #1
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	e015      	b.n	800e01e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d20b      	bcs.n	800e014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	1ad2      	subs	r2, r2, r3
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ff9b 	bl	800df44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	e004      	b.n	800e01e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e01a:	2301      	movs	r3, #1
 800e01c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e01e:	f000 fe79 	bl	800ed14 <vPortExitCritical>

	return xReturn;
 800e022:	69fb      	ldr	r3, [r7, #28]
}
 800e024:	4618      	mov	r0, r3
 800e026:	3720      	adds	r7, #32
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	200023c0 	.word	0x200023c0
 800e030:	200023d4 	.word	0x200023d4

0800e034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e034:	b480      	push	{r7}
 800e036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e038:	4b03      	ldr	r3, [pc, #12]	; (800e048 <vTaskMissedYield+0x14>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	200023d0 	.word	0x200023d0

0800e04c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e054:	f000 f852 	bl	800e0fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e058:	4b06      	ldr	r3, [pc, #24]	; (800e074 <prvIdleTask+0x28>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d9f9      	bls.n	800e054 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <prvIdleTask+0x2c>)
 800e062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e070:	e7f0      	b.n	800e054 <prvIdleTask+0x8>
 800e072:	bf00      	nop
 800e074:	20001eec 	.word	0x20001eec
 800e078:	e000ed04 	.word	0xe000ed04

0800e07c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e082:	2300      	movs	r3, #0
 800e084:	607b      	str	r3, [r7, #4]
 800e086:	e00c      	b.n	800e0a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	4613      	mov	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4a12      	ldr	r2, [pc, #72]	; (800e0dc <prvInitialiseTaskLists+0x60>)
 800e094:	4413      	add	r3, r2
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fcf0 	bl	800ca7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	607b      	str	r3, [r7, #4]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b37      	cmp	r3, #55	; 0x37
 800e0a6:	d9ef      	bls.n	800e088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0a8:	480d      	ldr	r0, [pc, #52]	; (800e0e0 <prvInitialiseTaskLists+0x64>)
 800e0aa:	f7fe fce7 	bl	800ca7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0ae:	480d      	ldr	r0, [pc, #52]	; (800e0e4 <prvInitialiseTaskLists+0x68>)
 800e0b0:	f7fe fce4 	bl	800ca7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0b4:	480c      	ldr	r0, [pc, #48]	; (800e0e8 <prvInitialiseTaskLists+0x6c>)
 800e0b6:	f7fe fce1 	bl	800ca7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0ba:	480c      	ldr	r0, [pc, #48]	; (800e0ec <prvInitialiseTaskLists+0x70>)
 800e0bc:	f7fe fcde 	bl	800ca7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0c0:	480b      	ldr	r0, [pc, #44]	; (800e0f0 <prvInitialiseTaskLists+0x74>)
 800e0c2:	f7fe fcdb 	bl	800ca7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0c6:	4b0b      	ldr	r3, [pc, #44]	; (800e0f4 <prvInitialiseTaskLists+0x78>)
 800e0c8:	4a05      	ldr	r2, [pc, #20]	; (800e0e0 <prvInitialiseTaskLists+0x64>)
 800e0ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0cc:	4b0a      	ldr	r3, [pc, #40]	; (800e0f8 <prvInitialiseTaskLists+0x7c>)
 800e0ce:	4a05      	ldr	r2, [pc, #20]	; (800e0e4 <prvInitialiseTaskLists+0x68>)
 800e0d0:	601a      	str	r2, [r3, #0]
}
 800e0d2:	bf00      	nop
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20001eec 	.word	0x20001eec
 800e0e0:	2000234c 	.word	0x2000234c
 800e0e4:	20002360 	.word	0x20002360
 800e0e8:	2000237c 	.word	0x2000237c
 800e0ec:	20002390 	.word	0x20002390
 800e0f0:	200023a8 	.word	0x200023a8
 800e0f4:	20002374 	.word	0x20002374
 800e0f8:	20002378 	.word	0x20002378

0800e0fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e102:	e019      	b.n	800e138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e104:	f000 fdd6 	bl	800ecb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e108:	4b10      	ldr	r3, [pc, #64]	; (800e14c <prvCheckTasksWaitingTermination+0x50>)
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3304      	adds	r3, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f7fe fd3b 	bl	800cb90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e11a:	4b0d      	ldr	r3, [pc, #52]	; (800e150 <prvCheckTasksWaitingTermination+0x54>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3b01      	subs	r3, #1
 800e120:	4a0b      	ldr	r2, [pc, #44]	; (800e150 <prvCheckTasksWaitingTermination+0x54>)
 800e122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e124:	4b0b      	ldr	r3, [pc, #44]	; (800e154 <prvCheckTasksWaitingTermination+0x58>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3b01      	subs	r3, #1
 800e12a:	4a0a      	ldr	r2, [pc, #40]	; (800e154 <prvCheckTasksWaitingTermination+0x58>)
 800e12c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e12e:	f000 fdf1 	bl	800ed14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f810 	bl	800e158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e138:	4b06      	ldr	r3, [pc, #24]	; (800e154 <prvCheckTasksWaitingTermination+0x58>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1e1      	bne.n	800e104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e140:	bf00      	nop
 800e142:	bf00      	nop
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20002390 	.word	0x20002390
 800e150:	200023bc 	.word	0x200023bc
 800e154:	200023a4 	.word	0x200023a4

0800e158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e166:	2b00      	cmp	r3, #0
 800e168:	d108      	bne.n	800e17c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16e:	4618      	mov	r0, r3
 800e170:	f000 ff8e 	bl	800f090 <vPortFree>
				vPortFree( pxTCB );
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 ff8b 	bl	800f090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e17a:	e018      	b.n	800e1ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e182:	2b01      	cmp	r3, #1
 800e184:	d103      	bne.n	800e18e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 ff82 	bl	800f090 <vPortFree>
	}
 800e18c:	e00f      	b.n	800e1ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e194:	2b02      	cmp	r3, #2
 800e196:	d00a      	beq.n	800e1ae <prvDeleteTCB+0x56>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	f383 8811 	msr	BASEPRI, r3
 800e1a0:	f3bf 8f6f 	isb	sy
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	60fb      	str	r3, [r7, #12]
}
 800e1aa:	bf00      	nop
 800e1ac:	e7fe      	b.n	800e1ac <prvDeleteTCB+0x54>
	}
 800e1ae:	bf00      	nop
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1be:	4b0c      	ldr	r3, [pc, #48]	; (800e1f0 <prvResetNextTaskUnblockTime+0x38>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d104      	bne.n	800e1d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <prvResetNextTaskUnblockTime+0x3c>)
 800e1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1d0:	e008      	b.n	800e1e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d2:	4b07      	ldr	r3, [pc, #28]	; (800e1f0 <prvResetNextTaskUnblockTime+0x38>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	4a04      	ldr	r2, [pc, #16]	; (800e1f4 <prvResetNextTaskUnblockTime+0x3c>)
 800e1e2:	6013      	str	r3, [r2, #0]
}
 800e1e4:	bf00      	nop
 800e1e6:	370c      	adds	r7, #12
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	20002374 	.word	0x20002374
 800e1f4:	200023dc 	.word	0x200023dc

0800e1f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1fe:	4b0b      	ldr	r3, [pc, #44]	; (800e22c <xTaskGetSchedulerState+0x34>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d102      	bne.n	800e20c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e206:	2301      	movs	r3, #1
 800e208:	607b      	str	r3, [r7, #4]
 800e20a:	e008      	b.n	800e21e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e20c:	4b08      	ldr	r3, [pc, #32]	; (800e230 <xTaskGetSchedulerState+0x38>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e214:	2302      	movs	r3, #2
 800e216:	607b      	str	r3, [r7, #4]
 800e218:	e001      	b.n	800e21e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e21a:	2300      	movs	r3, #0
 800e21c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e21e:	687b      	ldr	r3, [r7, #4]
	}
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	200023c8 	.word	0x200023c8
 800e230:	200023e4 	.word	0x200023e4

0800e234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e240:	2300      	movs	r3, #0
 800e242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d056      	beq.n	800e2f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e24a:	4b2e      	ldr	r3, [pc, #184]	; (800e304 <xTaskPriorityDisinherit+0xd0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	429a      	cmp	r2, r3
 800e252:	d00a      	beq.n	800e26a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	60fb      	str	r3, [r7, #12]
}
 800e266:	bf00      	nop
 800e268:	e7fe      	b.n	800e268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10a      	bne.n	800e288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	60bb      	str	r3, [r7, #8]
}
 800e284:	bf00      	nop
 800e286:	e7fe      	b.n	800e286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e28c:	1e5a      	subs	r2, r3, #1
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d02c      	beq.n	800e2f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d128      	bne.n	800e2f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe fc70 	bl	800cb90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <xTaskPriorityDisinherit+0xd4>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d903      	bls.n	800e2d8 <xTaskPriorityDisinherit+0xa4>
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d4:	4a0c      	ldr	r2, [pc, #48]	; (800e308 <xTaskPriorityDisinherit+0xd4>)
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2dc:	4613      	mov	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4413      	add	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4a09      	ldr	r2, [pc, #36]	; (800e30c <xTaskPriorityDisinherit+0xd8>)
 800e2e6:	441a      	add	r2, r3
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	f7fe fbf1 	bl	800cad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2f8:	697b      	ldr	r3, [r7, #20]
	}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	20001ee8 	.word	0x20001ee8
 800e308:	200023c4 	.word	0x200023c4
 800e30c:	20001eec 	.word	0x20001eec

0800e310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e31a:	4b21      	ldr	r3, [pc, #132]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e320:	4b20      	ldr	r3, [pc, #128]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3304      	adds	r3, #4
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe fc32 	bl	800cb90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e332:	d10a      	bne.n	800e34a <prvAddCurrentTaskToDelayedList+0x3a>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d007      	beq.n	800e34a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e33a:	4b1a      	ldr	r3, [pc, #104]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	3304      	adds	r3, #4
 800e340:	4619      	mov	r1, r3
 800e342:	4819      	ldr	r0, [pc, #100]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e344:	f7fe fbc7 	bl	800cad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e348:	e026      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4413      	add	r3, r2
 800e350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e352:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d209      	bcs.n	800e376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3304      	adds	r3, #4
 800e36c:	4619      	mov	r1, r3
 800e36e:	4610      	mov	r0, r2
 800e370:	f7fe fbd5 	bl	800cb1e <vListInsert>
}
 800e374:	e010      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e376:	4b0e      	ldr	r3, [pc, #56]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3304      	adds	r3, #4
 800e380:	4619      	mov	r1, r3
 800e382:	4610      	mov	r0, r2
 800e384:	f7fe fbcb 	bl	800cb1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d202      	bcs.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e392:	4a08      	ldr	r2, [pc, #32]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	6013      	str	r3, [r2, #0]
}
 800e398:	bf00      	nop
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	200023c0 	.word	0x200023c0
 800e3a4:	20001ee8 	.word	0x20001ee8
 800e3a8:	200023a8 	.word	0x200023a8
 800e3ac:	20002378 	.word	0x20002378
 800e3b0:	20002374 	.word	0x20002374
 800e3b4:	200023dc 	.word	0x200023dc

0800e3b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08a      	sub	sp, #40	; 0x28
 800e3bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3c2:	f000 fb07 	bl	800e9d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3c6:	4b1c      	ldr	r3, [pc, #112]	; (800e438 <xTimerCreateTimerTask+0x80>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d021      	beq.n	800e412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3d6:	1d3a      	adds	r2, r7, #4
 800e3d8:	f107 0108 	add.w	r1, r7, #8
 800e3dc:	f107 030c 	add.w	r3, r7, #12
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fe fb31 	bl	800ca48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	9202      	str	r2, [sp, #8]
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	460a      	mov	r2, r1
 800e3f8:	4910      	ldr	r1, [pc, #64]	; (800e43c <xTimerCreateTimerTask+0x84>)
 800e3fa:	4811      	ldr	r0, [pc, #68]	; (800e440 <xTimerCreateTimerTask+0x88>)
 800e3fc:	f7ff f8de 	bl	800d5bc <xTaskCreateStatic>
 800e400:	4603      	mov	r3, r0
 800e402:	4a10      	ldr	r2, [pc, #64]	; (800e444 <xTimerCreateTimerTask+0x8c>)
 800e404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e406:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <xTimerCreateTimerTask+0x8c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e40e:	2301      	movs	r3, #1
 800e410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10a      	bne.n	800e42e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	613b      	str	r3, [r7, #16]
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e42e:	697b      	ldr	r3, [r7, #20]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3718      	adds	r7, #24
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20002418 	.word	0x20002418
 800e43c:	0801501c 	.word	0x0801501c
 800e440:	0800e57d 	.word	0x0800e57d
 800e444:	2000241c 	.word	0x2000241c

0800e448 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08a      	sub	sp, #40	; 0x28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
 800e454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e456:	2300      	movs	r3, #0
 800e458:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10a      	bne.n	800e476 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	623b      	str	r3, [r7, #32]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e476:	4b1a      	ldr	r3, [pc, #104]	; (800e4e0 <xTimerGenericCommand+0x98>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d02a      	beq.n	800e4d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b05      	cmp	r3, #5
 800e48e:	dc18      	bgt.n	800e4c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e490:	f7ff feb2 	bl	800e1f8 <xTaskGetSchedulerState>
 800e494:	4603      	mov	r3, r0
 800e496:	2b02      	cmp	r3, #2
 800e498:	d109      	bne.n	800e4ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e49a:	4b11      	ldr	r3, [pc, #68]	; (800e4e0 <xTimerGenericCommand+0x98>)
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	f107 0110 	add.w	r1, r7, #16
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4a6:	f7fe fca1 	bl	800cdec <xQueueGenericSend>
 800e4aa:	6278      	str	r0, [r7, #36]	; 0x24
 800e4ac:	e012      	b.n	800e4d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <xTimerGenericCommand+0x98>)
 800e4b0:	6818      	ldr	r0, [r3, #0]
 800e4b2:	f107 0110 	add.w	r1, r7, #16
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f7fe fc97 	bl	800cdec <xQueueGenericSend>
 800e4be:	6278      	str	r0, [r7, #36]	; 0x24
 800e4c0:	e008      	b.n	800e4d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4c2:	4b07      	ldr	r3, [pc, #28]	; (800e4e0 <xTimerGenericCommand+0x98>)
 800e4c4:	6818      	ldr	r0, [r3, #0]
 800e4c6:	f107 0110 	add.w	r1, r7, #16
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	f7fe fd8b 	bl	800cfe8 <xQueueGenericSendFromISR>
 800e4d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3728      	adds	r7, #40	; 0x28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20002418 	.word	0x20002418

0800e4e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b088      	sub	sp, #32
 800e4e8:	af02      	add	r7, sp, #8
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ee:	4b22      	ldr	r3, [pc, #136]	; (800e578 <prvProcessExpiredTimer+0x94>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fb47 	bl	800cb90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e508:	f003 0304 	and.w	r3, r3, #4
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d022      	beq.n	800e556 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	699a      	ldr	r2, [r3, #24]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	18d1      	adds	r1, r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	6978      	ldr	r0, [r7, #20]
 800e51e:	f000 f8d1 	bl	800e6c4 <prvInsertTimerInActiveList>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01f      	beq.n	800e568 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e528:	2300      	movs	r3, #0
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	2300      	movs	r3, #0
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	2100      	movs	r1, #0
 800e532:	6978      	ldr	r0, [r7, #20]
 800e534:	f7ff ff88 	bl	800e448 <xTimerGenericCommand>
 800e538:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d113      	bne.n	800e568 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	60fb      	str	r3, [r7, #12]
}
 800e552:	bf00      	nop
 800e554:	e7fe      	b.n	800e554 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e55c:	f023 0301 	bic.w	r3, r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	6a1b      	ldr	r3, [r3, #32]
 800e56c:	6978      	ldr	r0, [r7, #20]
 800e56e:	4798      	blx	r3
}
 800e570:	bf00      	nop
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20002410 	.word	0x20002410

0800e57c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e584:	f107 0308 	add.w	r3, r7, #8
 800e588:	4618      	mov	r0, r3
 800e58a:	f000 f857 	bl	800e63c <prvGetNextExpireTime>
 800e58e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	4619      	mov	r1, r3
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 f803 	bl	800e5a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e59a:	f000 f8d5 	bl	800e748 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e59e:	e7f1      	b.n	800e584 <prvTimerTask+0x8>

0800e5a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5aa:	f7ff fa43 	bl	800da34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5ae:	f107 0308 	add.w	r3, r7, #8
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 f866 	bl	800e684 <prvSampleTimeNow>
 800e5b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d130      	bne.n	800e622 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10a      	bne.n	800e5dc <prvProcessTimerOrBlockTask+0x3c>
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d806      	bhi.n	800e5dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5ce:	f7ff fa3f 	bl	800da50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5d2:	68f9      	ldr	r1, [r7, #12]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff ff85 	bl	800e4e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5da:	e024      	b.n	800e626 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d008      	beq.n	800e5f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5e2:	4b13      	ldr	r3, [pc, #76]	; (800e630 <prvProcessTimerOrBlockTask+0x90>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <prvProcessTimerOrBlockTask+0x50>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <prvProcessTimerOrBlockTask+0x52>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5f4:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <prvProcessTimerOrBlockTask+0x94>)
 800e5f6:	6818      	ldr	r0, [r3, #0]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	4619      	mov	r1, r3
 800e602:	f7fe ffa7 	bl	800d554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e606:	f7ff fa23 	bl	800da50 <xTaskResumeAll>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10a      	bne.n	800e626 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e610:	4b09      	ldr	r3, [pc, #36]	; (800e638 <prvProcessTimerOrBlockTask+0x98>)
 800e612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	f3bf 8f6f 	isb	sy
}
 800e620:	e001      	b.n	800e626 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e622:	f7ff fa15 	bl	800da50 <xTaskResumeAll>
}
 800e626:	bf00      	nop
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20002414 	.word	0x20002414
 800e634:	20002418 	.word	0x20002418
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e644:	4b0e      	ldr	r3, [pc, #56]	; (800e680 <prvGetNextExpireTime+0x44>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d101      	bne.n	800e652 <prvGetNextExpireTime+0x16>
 800e64e:	2201      	movs	r2, #1
 800e650:	e000      	b.n	800e654 <prvGetNextExpireTime+0x18>
 800e652:	2200      	movs	r2, #0
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d105      	bne.n	800e66c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <prvGetNextExpireTime+0x44>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	60fb      	str	r3, [r7, #12]
 800e66a:	e001      	b.n	800e670 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e670:	68fb      	ldr	r3, [r7, #12]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	20002410 	.word	0x20002410

0800e684 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e68c:	f7ff fa7e 	bl	800db8c <xTaskGetTickCount>
 800e690:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e692:	4b0b      	ldr	r3, [pc, #44]	; (800e6c0 <prvSampleTimeNow+0x3c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d205      	bcs.n	800e6a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e69c:	f000 f936 	bl	800e90c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	e002      	b.n	800e6ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6ae:	4a04      	ldr	r2, [pc, #16]	; (800e6c0 <prvSampleTimeNow+0x3c>)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20002420 	.word	0x20002420

0800e6c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d812      	bhi.n	800e710 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	1ad2      	subs	r2, r2, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d302      	bcc.n	800e6fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	617b      	str	r3, [r7, #20]
 800e6fc:	e01b      	b.n	800e736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6fe:	4b10      	ldr	r3, [pc, #64]	; (800e740 <prvInsertTimerInActiveList+0x7c>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3304      	adds	r3, #4
 800e706:	4619      	mov	r1, r3
 800e708:	4610      	mov	r0, r2
 800e70a:	f7fe fa08 	bl	800cb1e <vListInsert>
 800e70e:	e012      	b.n	800e736 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	429a      	cmp	r2, r3
 800e716:	d206      	bcs.n	800e726 <prvInsertTimerInActiveList+0x62>
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d302      	bcc.n	800e726 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e720:	2301      	movs	r3, #1
 800e722:	617b      	str	r3, [r7, #20]
 800e724:	e007      	b.n	800e736 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e726:	4b07      	ldr	r3, [pc, #28]	; (800e744 <prvInsertTimerInActiveList+0x80>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	3304      	adds	r3, #4
 800e72e:	4619      	mov	r1, r3
 800e730:	4610      	mov	r0, r2
 800e732:	f7fe f9f4 	bl	800cb1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e736:	697b      	ldr	r3, [r7, #20]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	20002414 	.word	0x20002414
 800e744:	20002410 	.word	0x20002410

0800e748 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08e      	sub	sp, #56	; 0x38
 800e74c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e74e:	e0ca      	b.n	800e8e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	da18      	bge.n	800e788 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e756:	1d3b      	adds	r3, r7, #4
 800e758:	3304      	adds	r3, #4
 800e75a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10a      	bne.n	800e778 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	61fb      	str	r3, [r7, #28]
}
 800e774:	bf00      	nop
 800e776:	e7fe      	b.n	800e776 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e77e:	6850      	ldr	r0, [r2, #4]
 800e780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e782:	6892      	ldr	r2, [r2, #8]
 800e784:	4611      	mov	r1, r2
 800e786:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f2c0 80ab 	blt.w	800e8e6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe f9f5 	bl	800cb90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7a6:	463b      	mov	r3, r7
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7ff ff6b 	bl	800e684 <prvSampleTimeNow>
 800e7ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b09      	cmp	r3, #9
 800e7b4:	f200 8096 	bhi.w	800e8e4 <prvProcessReceivedCommands+0x19c>
 800e7b8:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <prvProcessReceivedCommands+0x78>)
 800e7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7be:	bf00      	nop
 800e7c0:	0800e7e9 	.word	0x0800e7e9
 800e7c4:	0800e7e9 	.word	0x0800e7e9
 800e7c8:	0800e7e9 	.word	0x0800e7e9
 800e7cc:	0800e85d 	.word	0x0800e85d
 800e7d0:	0800e871 	.word	0x0800e871
 800e7d4:	0800e8bb 	.word	0x0800e8bb
 800e7d8:	0800e7e9 	.word	0x0800e7e9
 800e7dc:	0800e7e9 	.word	0x0800e7e9
 800e7e0:	0800e85d 	.word	0x0800e85d
 800e7e4:	0800e871 	.word	0x0800e871
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ee:	f043 0301 	orr.w	r3, r3, #1
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	18d1      	adds	r1, r2, r3
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e808:	f7ff ff5c 	bl	800e6c4 <prvInsertTimerInActiveList>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d069      	beq.n	800e8e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e820:	f003 0304 	and.w	r3, r3, #4
 800e824:	2b00      	cmp	r3, #0
 800e826:	d05e      	beq.n	800e8e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e828:	68ba      	ldr	r2, [r7, #8]
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	699b      	ldr	r3, [r3, #24]
 800e82e:	441a      	add	r2, r3
 800e830:	2300      	movs	r3, #0
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	2300      	movs	r3, #0
 800e836:	2100      	movs	r1, #0
 800e838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e83a:	f7ff fe05 	bl	800e448 <xTimerGenericCommand>
 800e83e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e840:	6a3b      	ldr	r3, [r7, #32]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d14f      	bne.n	800e8e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	61bb      	str	r3, [r7, #24]
}
 800e858:	bf00      	nop
 800e85a:	e7fe      	b.n	800e85a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e862:	f023 0301 	bic.w	r3, r3, #1
 800e866:	b2da      	uxtb	r2, r3
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e86e:	e03a      	b.n	800e8e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e876:	f043 0301 	orr.w	r3, r3, #1
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e882:	68ba      	ldr	r2, [r7, #8]
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10a      	bne.n	800e8a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e894:	f383 8811 	msr	BASEPRI, r3
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	617b      	str	r3, [r7, #20]
}
 800e8a2:	bf00      	nop
 800e8a4:	e7fe      	b.n	800e8a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	699a      	ldr	r2, [r3, #24]
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	18d1      	adds	r1, r2, r3
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8b4:	f7ff ff06 	bl	800e6c4 <prvInsertTimerInActiveList>
					break;
 800e8b8:	e015      	b.n	800e8e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8c0:	f003 0302 	and.w	r3, r3, #2
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d103      	bne.n	800e8d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ca:	f000 fbe1 	bl	800f090 <vPortFree>
 800e8ce:	e00a      	b.n	800e8e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d6:	f023 0301 	bic.w	r3, r3, #1
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8e2:	e000      	b.n	800e8e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e8e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8e6:	4b08      	ldr	r3, [pc, #32]	; (800e908 <prvProcessReceivedCommands+0x1c0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	1d39      	adds	r1, r7, #4
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fe fc16 	bl	800d120 <xQueueReceive>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f47f af2a 	bne.w	800e750 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e8fc:	bf00      	nop
 800e8fe:	bf00      	nop
 800e900:	3730      	adds	r7, #48	; 0x30
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	20002418 	.word	0x20002418

0800e90c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e912:	e048      	b.n	800e9a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e914:	4b2d      	ldr	r3, [pc, #180]	; (800e9cc <prvSwitchTimerLists+0xc0>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e91e:	4b2b      	ldr	r3, [pc, #172]	; (800e9cc <prvSwitchTimerLists+0xc0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	3304      	adds	r3, #4
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe f92f 	bl	800cb90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	2b00      	cmp	r3, #0
 800e946:	d02e      	beq.n	800e9a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	4413      	add	r3, r2
 800e950:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	429a      	cmp	r2, r3
 800e958:	d90e      	bls.n	800e978 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e966:	4b19      	ldr	r3, [pc, #100]	; (800e9cc <prvSwitchTimerLists+0xc0>)
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3304      	adds	r3, #4
 800e96e:	4619      	mov	r1, r3
 800e970:	4610      	mov	r0, r2
 800e972:	f7fe f8d4 	bl	800cb1e <vListInsert>
 800e976:	e016      	b.n	800e9a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e978:	2300      	movs	r3, #0
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	2300      	movs	r3, #0
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	2100      	movs	r1, #0
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f7ff fd60 	bl	800e448 <xTimerGenericCommand>
 800e988:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10a      	bne.n	800e9a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	603b      	str	r3, [r7, #0]
}
 800e9a2:	bf00      	nop
 800e9a4:	e7fe      	b.n	800e9a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9a6:	4b09      	ldr	r3, [pc, #36]	; (800e9cc <prvSwitchTimerLists+0xc0>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1b1      	bne.n	800e914 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9b0:	4b06      	ldr	r3, [pc, #24]	; (800e9cc <prvSwitchTimerLists+0xc0>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9b6:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <prvSwitchTimerLists+0xc4>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a04      	ldr	r2, [pc, #16]	; (800e9cc <prvSwitchTimerLists+0xc0>)
 800e9bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9be:	4a04      	ldr	r2, [pc, #16]	; (800e9d0 <prvSwitchTimerLists+0xc4>)
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	6013      	str	r3, [r2, #0]
}
 800e9c4:	bf00      	nop
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20002410 	.word	0x20002410
 800e9d0:	20002414 	.word	0x20002414

0800e9d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9da:	f000 f96b 	bl	800ecb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9de:	4b15      	ldr	r3, [pc, #84]	; (800ea34 <prvCheckForValidListAndQueue+0x60>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d120      	bne.n	800ea28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9e6:	4814      	ldr	r0, [pc, #80]	; (800ea38 <prvCheckForValidListAndQueue+0x64>)
 800e9e8:	f7fe f848 	bl	800ca7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9ec:	4813      	ldr	r0, [pc, #76]	; (800ea3c <prvCheckForValidListAndQueue+0x68>)
 800e9ee:	f7fe f845 	bl	800ca7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e9f2:	4b13      	ldr	r3, [pc, #76]	; (800ea40 <prvCheckForValidListAndQueue+0x6c>)
 800e9f4:	4a10      	ldr	r2, [pc, #64]	; (800ea38 <prvCheckForValidListAndQueue+0x64>)
 800e9f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e9f8:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <prvCheckForValidListAndQueue+0x70>)
 800e9fa:	4a10      	ldr	r2, [pc, #64]	; (800ea3c <prvCheckForValidListAndQueue+0x68>)
 800e9fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e9fe:	2300      	movs	r3, #0
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	4b11      	ldr	r3, [pc, #68]	; (800ea48 <prvCheckForValidListAndQueue+0x74>)
 800ea04:	4a11      	ldr	r2, [pc, #68]	; (800ea4c <prvCheckForValidListAndQueue+0x78>)
 800ea06:	2110      	movs	r1, #16
 800ea08:	200a      	movs	r0, #10
 800ea0a:	f7fe f953 	bl	800ccb4 <xQueueGenericCreateStatic>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	4a08      	ldr	r2, [pc, #32]	; (800ea34 <prvCheckForValidListAndQueue+0x60>)
 800ea12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea14:	4b07      	ldr	r3, [pc, #28]	; (800ea34 <prvCheckForValidListAndQueue+0x60>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d005      	beq.n	800ea28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea1c:	4b05      	ldr	r3, [pc, #20]	; (800ea34 <prvCheckForValidListAndQueue+0x60>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	490b      	ldr	r1, [pc, #44]	; (800ea50 <prvCheckForValidListAndQueue+0x7c>)
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fe fd6c 	bl	800d500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea28:	f000 f974 	bl	800ed14 <vPortExitCritical>
}
 800ea2c:	bf00      	nop
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	20002418 	.word	0x20002418
 800ea38:	200023e8 	.word	0x200023e8
 800ea3c:	200023fc 	.word	0x200023fc
 800ea40:	20002410 	.word	0x20002410
 800ea44:	20002414 	.word	0x20002414
 800ea48:	200024c4 	.word	0x200024c4
 800ea4c:	20002424 	.word	0x20002424
 800ea50:	08015024 	.word	0x08015024

0800ea54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	3b04      	subs	r3, #4
 800ea64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	3b04      	subs	r3, #4
 800ea72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	f023 0201 	bic.w	r2, r3, #1
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3b04      	subs	r3, #4
 800ea82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea84:	4a0c      	ldr	r2, [pc, #48]	; (800eab8 <pxPortInitialiseStack+0x64>)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	3b14      	subs	r3, #20
 800ea8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	3b04      	subs	r3, #4
 800ea9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f06f 0202 	mvn.w	r2, #2
 800eaa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	3b20      	subs	r3, #32
 800eaa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	0800eabd 	.word	0x0800eabd

0800eabc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eabc:	b480      	push	{r7}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eac6:	4b12      	ldr	r3, [pc, #72]	; (800eb10 <prvTaskExitError+0x54>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eace:	d00a      	beq.n	800eae6 <prvTaskExitError+0x2a>
	__asm volatile
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	60fb      	str	r3, [r7, #12]
}
 800eae2:	bf00      	nop
 800eae4:	e7fe      	b.n	800eae4 <prvTaskExitError+0x28>
	__asm volatile
 800eae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaea:	f383 8811 	msr	BASEPRI, r3
 800eaee:	f3bf 8f6f 	isb	sy
 800eaf2:	f3bf 8f4f 	dsb	sy
 800eaf6:	60bb      	str	r3, [r7, #8]
}
 800eaf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eafa:	bf00      	nop
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0fc      	beq.n	800eafc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb02:	bf00      	nop
 800eb04:	bf00      	nop
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	20000034 	.word	0x20000034
	...

0800eb20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb20:	4b07      	ldr	r3, [pc, #28]	; (800eb40 <pxCurrentTCBConst2>)
 800eb22:	6819      	ldr	r1, [r3, #0]
 800eb24:	6808      	ldr	r0, [r1, #0]
 800eb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2a:	f380 8809 	msr	PSP, r0
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f04f 0000 	mov.w	r0, #0
 800eb36:	f380 8811 	msr	BASEPRI, r0
 800eb3a:	4770      	bx	lr
 800eb3c:	f3af 8000 	nop.w

0800eb40 <pxCurrentTCBConst2>:
 800eb40:	20001ee8 	.word	0x20001ee8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop

0800eb48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb48:	4808      	ldr	r0, [pc, #32]	; (800eb6c <prvPortStartFirstTask+0x24>)
 800eb4a:	6800      	ldr	r0, [r0, #0]
 800eb4c:	6800      	ldr	r0, [r0, #0]
 800eb4e:	f380 8808 	msr	MSP, r0
 800eb52:	f04f 0000 	mov.w	r0, #0
 800eb56:	f380 8814 	msr	CONTROL, r0
 800eb5a:	b662      	cpsie	i
 800eb5c:	b661      	cpsie	f
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	df00      	svc	0
 800eb68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb6a:	bf00      	nop
 800eb6c:	e000ed08 	.word	0xe000ed08

0800eb70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb76:	4b46      	ldr	r3, [pc, #280]	; (800ec90 <xPortStartScheduler+0x120>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a46      	ldr	r2, [pc, #280]	; (800ec94 <xPortStartScheduler+0x124>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d10a      	bne.n	800eb96 <xPortStartScheduler+0x26>
	__asm volatile
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	613b      	str	r3, [r7, #16]
}
 800eb92:	bf00      	nop
 800eb94:	e7fe      	b.n	800eb94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb96:	4b3e      	ldr	r3, [pc, #248]	; (800ec90 <xPortStartScheduler+0x120>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a3f      	ldr	r2, [pc, #252]	; (800ec98 <xPortStartScheduler+0x128>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d10a      	bne.n	800ebb6 <xPortStartScheduler+0x46>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	60fb      	str	r3, [r7, #12]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ebb6:	4b39      	ldr	r3, [pc, #228]	; (800ec9c <xPortStartScheduler+0x12c>)
 800ebb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	22ff      	movs	r2, #255	; 0xff
 800ebc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ebd0:	78fb      	ldrb	r3, [r7, #3]
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ebd8:	b2da      	uxtb	r2, r3
 800ebda:	4b31      	ldr	r3, [pc, #196]	; (800eca0 <xPortStartScheduler+0x130>)
 800ebdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ebde:	4b31      	ldr	r3, [pc, #196]	; (800eca4 <xPortStartScheduler+0x134>)
 800ebe0:	2207      	movs	r2, #7
 800ebe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebe4:	e009      	b.n	800ebfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ebe6:	4b2f      	ldr	r3, [pc, #188]	; (800eca4 <xPortStartScheduler+0x134>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	4a2d      	ldr	r2, [pc, #180]	; (800eca4 <xPortStartScheduler+0x134>)
 800ebee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ebf0:	78fb      	ldrb	r3, [r7, #3]
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	005b      	lsls	r3, r3, #1
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebfa:	78fb      	ldrb	r3, [r7, #3]
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec02:	2b80      	cmp	r3, #128	; 0x80
 800ec04:	d0ef      	beq.n	800ebe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec06:	4b27      	ldr	r3, [pc, #156]	; (800eca4 <xPortStartScheduler+0x134>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f1c3 0307 	rsb	r3, r3, #7
 800ec0e:	2b04      	cmp	r3, #4
 800ec10:	d00a      	beq.n	800ec28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	60bb      	str	r3, [r7, #8]
}
 800ec24:	bf00      	nop
 800ec26:	e7fe      	b.n	800ec26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec28:	4b1e      	ldr	r3, [pc, #120]	; (800eca4 <xPortStartScheduler+0x134>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	021b      	lsls	r3, r3, #8
 800ec2e:	4a1d      	ldr	r2, [pc, #116]	; (800eca4 <xPortStartScheduler+0x134>)
 800ec30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec32:	4b1c      	ldr	r3, [pc, #112]	; (800eca4 <xPortStartScheduler+0x134>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec3a:	4a1a      	ldr	r2, [pc, #104]	; (800eca4 <xPortStartScheduler+0x134>)
 800ec3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec46:	4b18      	ldr	r3, [pc, #96]	; (800eca8 <xPortStartScheduler+0x138>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a17      	ldr	r2, [pc, #92]	; (800eca8 <xPortStartScheduler+0x138>)
 800ec4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec52:	4b15      	ldr	r3, [pc, #84]	; (800eca8 <xPortStartScheduler+0x138>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a14      	ldr	r2, [pc, #80]	; (800eca8 <xPortStartScheduler+0x138>)
 800ec58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec5e:	f000 f8dd 	bl	800ee1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec62:	4b12      	ldr	r3, [pc, #72]	; (800ecac <xPortStartScheduler+0x13c>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec68:	f000 f8fc 	bl	800ee64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec6c:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <xPortStartScheduler+0x140>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a0f      	ldr	r2, [pc, #60]	; (800ecb0 <xPortStartScheduler+0x140>)
 800ec72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec78:	f7ff ff66 	bl	800eb48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec7c:	f7ff f850 	bl	800dd20 <vTaskSwitchContext>
	prvTaskExitError();
 800ec80:	f7ff ff1c 	bl	800eabc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	e000ed00 	.word	0xe000ed00
 800ec94:	410fc271 	.word	0x410fc271
 800ec98:	410fc270 	.word	0x410fc270
 800ec9c:	e000e400 	.word	0xe000e400
 800eca0:	20002514 	.word	0x20002514
 800eca4:	20002518 	.word	0x20002518
 800eca8:	e000ed20 	.word	0xe000ed20
 800ecac:	20000034 	.word	0x20000034
 800ecb0:	e000ef34 	.word	0xe000ef34

0800ecb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	607b      	str	r3, [r7, #4]
}
 800eccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ecce:	4b0f      	ldr	r3, [pc, #60]	; (800ed0c <vPortEnterCritical+0x58>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	4a0d      	ldr	r2, [pc, #52]	; (800ed0c <vPortEnterCritical+0x58>)
 800ecd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ecd8:	4b0c      	ldr	r3, [pc, #48]	; (800ed0c <vPortEnterCritical+0x58>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d10f      	bne.n	800ed00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ece0:	4b0b      	ldr	r3, [pc, #44]	; (800ed10 <vPortEnterCritical+0x5c>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00a      	beq.n	800ed00 <vPortEnterCritical+0x4c>
	__asm volatile
 800ecea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecee:	f383 8811 	msr	BASEPRI, r3
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	f3bf 8f4f 	dsb	sy
 800ecfa:	603b      	str	r3, [r7, #0]
}
 800ecfc:	bf00      	nop
 800ecfe:	e7fe      	b.n	800ecfe <vPortEnterCritical+0x4a>
	}
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	20000034 	.word	0x20000034
 800ed10:	e000ed04 	.word	0xe000ed04

0800ed14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed1a:	4b12      	ldr	r3, [pc, #72]	; (800ed64 <vPortExitCritical+0x50>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10a      	bne.n	800ed38 <vPortExitCritical+0x24>
	__asm volatile
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	607b      	str	r3, [r7, #4]
}
 800ed34:	bf00      	nop
 800ed36:	e7fe      	b.n	800ed36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ed38:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <vPortExitCritical+0x50>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	4a09      	ldr	r2, [pc, #36]	; (800ed64 <vPortExitCritical+0x50>)
 800ed40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed42:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <vPortExitCritical+0x50>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d105      	bne.n	800ed56 <vPortExitCritical+0x42>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	f383 8811 	msr	BASEPRI, r3
}
 800ed54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed56:	bf00      	nop
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr
 800ed62:	bf00      	nop
 800ed64:	20000034 	.word	0x20000034
	...

0800ed70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed70:	f3ef 8009 	mrs	r0, PSP
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <pxCurrentTCBConst>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	f01e 0f10 	tst.w	lr, #16
 800ed80:	bf08      	it	eq
 800ed82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8a:	6010      	str	r0, [r2, #0]
 800ed8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed94:	f380 8811 	msr	BASEPRI, r0
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f7fe ffbe 	bl	800dd20 <vTaskSwitchContext>
 800eda4:	f04f 0000 	mov.w	r0, #0
 800eda8:	f380 8811 	msr	BASEPRI, r0
 800edac:	bc09      	pop	{r0, r3}
 800edae:	6819      	ldr	r1, [r3, #0]
 800edb0:	6808      	ldr	r0, [r1, #0]
 800edb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb6:	f01e 0f10 	tst.w	lr, #16
 800edba:	bf08      	it	eq
 800edbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800edc0:	f380 8809 	msr	PSP, r0
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	4770      	bx	lr
 800edca:	bf00      	nop
 800edcc:	f3af 8000 	nop.w

0800edd0 <pxCurrentTCBConst>:
 800edd0:	20001ee8 	.word	0x20001ee8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800edd4:	bf00      	nop
 800edd6:	bf00      	nop

0800edd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
	__asm volatile
 800edde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede2:	f383 8811 	msr	BASEPRI, r3
 800ede6:	f3bf 8f6f 	isb	sy
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	607b      	str	r3, [r7, #4]
}
 800edf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800edf2:	f7fe fedb 	bl	800dbac <xTaskIncrementTick>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d003      	beq.n	800ee04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800edfc:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <xPortSysTickHandler+0x40>)
 800edfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee02:	601a      	str	r2, [r3, #0]
 800ee04:	2300      	movs	r3, #0
 800ee06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	f383 8811 	msr	BASEPRI, r3
}
 800ee0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	e000ed04 	.word	0xe000ed04

0800ee1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee20:	4b0b      	ldr	r3, [pc, #44]	; (800ee50 <vPortSetupTimerInterrupt+0x34>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee26:	4b0b      	ldr	r3, [pc, #44]	; (800ee54 <vPortSetupTimerInterrupt+0x38>)
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee2c:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <vPortSetupTimerInterrupt+0x3c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a0a      	ldr	r2, [pc, #40]	; (800ee5c <vPortSetupTimerInterrupt+0x40>)
 800ee32:	fba2 2303 	umull	r2, r3, r2, r3
 800ee36:	099b      	lsrs	r3, r3, #6
 800ee38:	4a09      	ldr	r2, [pc, #36]	; (800ee60 <vPortSetupTimerInterrupt+0x44>)
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee3e:	4b04      	ldr	r3, [pc, #16]	; (800ee50 <vPortSetupTimerInterrupt+0x34>)
 800ee40:	2207      	movs	r2, #7
 800ee42:	601a      	str	r2, [r3, #0]
}
 800ee44:	bf00      	nop
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	e000e010 	.word	0xe000e010
 800ee54:	e000e018 	.word	0xe000e018
 800ee58:	20000008 	.word	0x20000008
 800ee5c:	10624dd3 	.word	0x10624dd3
 800ee60:	e000e014 	.word	0xe000e014

0800ee64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee74 <vPortEnableVFP+0x10>
 800ee68:	6801      	ldr	r1, [r0, #0]
 800ee6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee6e:	6001      	str	r1, [r0, #0]
 800ee70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee72:	bf00      	nop
 800ee74:	e000ed88 	.word	0xe000ed88

0800ee78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee7e:	f3ef 8305 	mrs	r3, IPSR
 800ee82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2b0f      	cmp	r3, #15
 800ee88:	d914      	bls.n	800eeb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee8a:	4a17      	ldr	r2, [pc, #92]	; (800eee8 <vPortValidateInterruptPriority+0x70>)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4413      	add	r3, r2
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee94:	4b15      	ldr	r3, [pc, #84]	; (800eeec <vPortValidateInterruptPriority+0x74>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	7afa      	ldrb	r2, [r7, #11]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d20a      	bcs.n	800eeb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	607b      	str	r3, [r7, #4]
}
 800eeb0:	bf00      	nop
 800eeb2:	e7fe      	b.n	800eeb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eeb4:	4b0e      	ldr	r3, [pc, #56]	; (800eef0 <vPortValidateInterruptPriority+0x78>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eebc:	4b0d      	ldr	r3, [pc, #52]	; (800eef4 <vPortValidateInterruptPriority+0x7c>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d90a      	bls.n	800eeda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	603b      	str	r3, [r7, #0]
}
 800eed6:	bf00      	nop
 800eed8:	e7fe      	b.n	800eed8 <vPortValidateInterruptPriority+0x60>
	}
 800eeda:	bf00      	nop
 800eedc:	3714      	adds	r7, #20
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	e000e3f0 	.word	0xe000e3f0
 800eeec:	20002514 	.word	0x20002514
 800eef0:	e000ed0c 	.word	0xe000ed0c
 800eef4:	20002518 	.word	0x20002518

0800eef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08a      	sub	sp, #40	; 0x28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef00:	2300      	movs	r3, #0
 800ef02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef04:	f7fe fd96 	bl	800da34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef08:	4b5b      	ldr	r3, [pc, #364]	; (800f078 <pvPortMalloc+0x180>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d101      	bne.n	800ef14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef10:	f000 f920 	bl	800f154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef14:	4b59      	ldr	r3, [pc, #356]	; (800f07c <pvPortMalloc+0x184>)
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f040 8093 	bne.w	800f048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01d      	beq.n	800ef64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ef28:	2208      	movs	r2, #8
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f003 0307 	and.w	r3, r3, #7
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d014      	beq.n	800ef64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f023 0307 	bic.w	r3, r3, #7
 800ef40:	3308      	adds	r3, #8
 800ef42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f003 0307 	and.w	r3, r3, #7
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00a      	beq.n	800ef64 <pvPortMalloc+0x6c>
	__asm volatile
 800ef4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef52:	f383 8811 	msr	BASEPRI, r3
 800ef56:	f3bf 8f6f 	isb	sy
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	617b      	str	r3, [r7, #20]
}
 800ef60:	bf00      	nop
 800ef62:	e7fe      	b.n	800ef62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d06e      	beq.n	800f048 <pvPortMalloc+0x150>
 800ef6a:	4b45      	ldr	r3, [pc, #276]	; (800f080 <pvPortMalloc+0x188>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d869      	bhi.n	800f048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef74:	4b43      	ldr	r3, [pc, #268]	; (800f084 <pvPortMalloc+0x18c>)
 800ef76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef78:	4b42      	ldr	r3, [pc, #264]	; (800f084 <pvPortMalloc+0x18c>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef7e:	e004      	b.n	800ef8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d903      	bls.n	800ef9c <pvPortMalloc+0xa4>
 800ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1f1      	bne.n	800ef80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef9c:	4b36      	ldr	r3, [pc, #216]	; (800f078 <pvPortMalloc+0x180>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d050      	beq.n	800f048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2208      	movs	r2, #8
 800efac:	4413      	add	r3, r2
 800efae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800efb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	6a3b      	ldr	r3, [r7, #32]
 800efb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	1ad2      	subs	r2, r2, r3
 800efc0:	2308      	movs	r3, #8
 800efc2:	005b      	lsls	r3, r3, #1
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d91f      	bls.n	800f008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800efc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4413      	add	r3, r2
 800efce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	f003 0307 	and.w	r3, r3, #7
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00a      	beq.n	800eff0 <pvPortMalloc+0xf8>
	__asm volatile
 800efda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efde:	f383 8811 	msr	BASEPRI, r3
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	613b      	str	r3, [r7, #16]
}
 800efec:	bf00      	nop
 800efee:	e7fe      	b.n	800efee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	685a      	ldr	r2, [r3, #4]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	1ad2      	subs	r2, r2, r3
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f002:	69b8      	ldr	r0, [r7, #24]
 800f004:	f000 f908 	bl	800f218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f008:	4b1d      	ldr	r3, [pc, #116]	; (800f080 <pvPortMalloc+0x188>)
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	4a1b      	ldr	r2, [pc, #108]	; (800f080 <pvPortMalloc+0x188>)
 800f014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f016:	4b1a      	ldr	r3, [pc, #104]	; (800f080 <pvPortMalloc+0x188>)
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	4b1b      	ldr	r3, [pc, #108]	; (800f088 <pvPortMalloc+0x190>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d203      	bcs.n	800f02a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f022:	4b17      	ldr	r3, [pc, #92]	; (800f080 <pvPortMalloc+0x188>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a18      	ldr	r2, [pc, #96]	; (800f088 <pvPortMalloc+0x190>)
 800f028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	4b13      	ldr	r3, [pc, #76]	; (800f07c <pvPortMalloc+0x184>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	431a      	orrs	r2, r3
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	2200      	movs	r2, #0
 800f03c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <pvPortMalloc+0x194>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3301      	adds	r3, #1
 800f044:	4a11      	ldr	r2, [pc, #68]	; (800f08c <pvPortMalloc+0x194>)
 800f046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f048:	f7fe fd02 	bl	800da50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f04c:	69fb      	ldr	r3, [r7, #28]
 800f04e:	f003 0307 	and.w	r3, r3, #7
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00a      	beq.n	800f06c <pvPortMalloc+0x174>
	__asm volatile
 800f056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	60fb      	str	r3, [r7, #12]
}
 800f068:	bf00      	nop
 800f06a:	e7fe      	b.n	800f06a <pvPortMalloc+0x172>
	return pvReturn;
 800f06c:	69fb      	ldr	r3, [r7, #28]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3728      	adds	r7, #40	; 0x28
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	200038ac 	.word	0x200038ac
 800f07c:	200038c0 	.word	0x200038c0
 800f080:	200038b0 	.word	0x200038b0
 800f084:	200038a4 	.word	0x200038a4
 800f088:	200038b4 	.word	0x200038b4
 800f08c:	200038b8 	.word	0x200038b8

0800f090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d04d      	beq.n	800f13e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f0a2:	2308      	movs	r3, #8
 800f0a4:	425b      	negs	r3, r3
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	685a      	ldr	r2, [r3, #4]
 800f0b4:	4b24      	ldr	r3, [pc, #144]	; (800f148 <vPortFree+0xb8>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10a      	bne.n	800f0d4 <vPortFree+0x44>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	60fb      	str	r3, [r7, #12]
}
 800f0d0:	bf00      	nop
 800f0d2:	e7fe      	b.n	800f0d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00a      	beq.n	800f0f2 <vPortFree+0x62>
	__asm volatile
 800f0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e0:	f383 8811 	msr	BASEPRI, r3
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	60bb      	str	r3, [r7, #8]
}
 800f0ee:	bf00      	nop
 800f0f0:	e7fe      	b.n	800f0f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	4b14      	ldr	r3, [pc, #80]	; (800f148 <vPortFree+0xb8>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4013      	ands	r3, r2
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d01e      	beq.n	800f13e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d11a      	bne.n	800f13e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	4b0e      	ldr	r3, [pc, #56]	; (800f148 <vPortFree+0xb8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	43db      	mvns	r3, r3
 800f112:	401a      	ands	r2, r3
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f118:	f7fe fc8c 	bl	800da34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	4b0a      	ldr	r3, [pc, #40]	; (800f14c <vPortFree+0xbc>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4413      	add	r3, r2
 800f126:	4a09      	ldr	r2, [pc, #36]	; (800f14c <vPortFree+0xbc>)
 800f128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f12a:	6938      	ldr	r0, [r7, #16]
 800f12c:	f000 f874 	bl	800f218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <vPortFree+0xc0>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3301      	adds	r3, #1
 800f136:	4a06      	ldr	r2, [pc, #24]	; (800f150 <vPortFree+0xc0>)
 800f138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f13a:	f7fe fc89 	bl	800da50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f13e:	bf00      	nop
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	200038c0 	.word	0x200038c0
 800f14c:	200038b0 	.word	0x200038b0
 800f150:	200038bc 	.word	0x200038bc

0800f154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f15a:	f241 3388 	movw	r3, #5000	; 0x1388
 800f15e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f160:	4b27      	ldr	r3, [pc, #156]	; (800f200 <prvHeapInit+0xac>)
 800f162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f003 0307 	and.w	r3, r3, #7
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00c      	beq.n	800f188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3307      	adds	r3, #7
 800f172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f023 0307 	bic.w	r3, r3, #7
 800f17a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	4a1f      	ldr	r2, [pc, #124]	; (800f200 <prvHeapInit+0xac>)
 800f184:	4413      	add	r3, r2
 800f186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f18c:	4a1d      	ldr	r2, [pc, #116]	; (800f204 <prvHeapInit+0xb0>)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f192:	4b1c      	ldr	r3, [pc, #112]	; (800f204 <prvHeapInit+0xb0>)
 800f194:	2200      	movs	r2, #0
 800f196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	4413      	add	r3, r2
 800f19e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f1a0:	2208      	movs	r2, #8
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	1a9b      	subs	r3, r3, r2
 800f1a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f023 0307 	bic.w	r3, r3, #7
 800f1ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	4a15      	ldr	r2, [pc, #84]	; (800f208 <prvHeapInit+0xb4>)
 800f1b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f1b6:	4b14      	ldr	r3, [pc, #80]	; (800f208 <prvHeapInit+0xb4>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f1be:	4b12      	ldr	r3, [pc, #72]	; (800f208 <prvHeapInit+0xb4>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	1ad2      	subs	r2, r2, r3
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f1d4:	4b0c      	ldr	r3, [pc, #48]	; (800f208 <prvHeapInit+0xb4>)
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4a0a      	ldr	r2, [pc, #40]	; (800f20c <prvHeapInit+0xb8>)
 800f1e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	4a09      	ldr	r2, [pc, #36]	; (800f210 <prvHeapInit+0xbc>)
 800f1ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f1ec:	4b09      	ldr	r3, [pc, #36]	; (800f214 <prvHeapInit+0xc0>)
 800f1ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1f2:	601a      	str	r2, [r3, #0]
}
 800f1f4:	bf00      	nop
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr
 800f200:	2000251c 	.word	0x2000251c
 800f204:	200038a4 	.word	0x200038a4
 800f208:	200038ac 	.word	0x200038ac
 800f20c:	200038b4 	.word	0x200038b4
 800f210:	200038b0 	.word	0x200038b0
 800f214:	200038c0 	.word	0x200038c0

0800f218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f220:	4b28      	ldr	r3, [pc, #160]	; (800f2c4 <prvInsertBlockIntoFreeList+0xac>)
 800f222:	60fb      	str	r3, [r7, #12]
 800f224:	e002      	b.n	800f22c <prvInsertBlockIntoFreeList+0x14>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	429a      	cmp	r2, r3
 800f234:	d8f7      	bhi.n	800f226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	4413      	add	r3, r2
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	429a      	cmp	r2, r3
 800f246:	d108      	bne.n	800f25a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	441a      	add	r2, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	68ba      	ldr	r2, [r7, #8]
 800f264:	441a      	add	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d118      	bne.n	800f2a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	4b15      	ldr	r3, [pc, #84]	; (800f2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	429a      	cmp	r2, r3
 800f278:	d00d      	beq.n	800f296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	685a      	ldr	r2, [r3, #4]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	441a      	add	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	e008      	b.n	800f2a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f296:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	601a      	str	r2, [r3, #0]
 800f29e:	e003      	b.n	800f2a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d002      	beq.n	800f2b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2b6:	bf00      	nop
 800f2b8:	3714      	adds	r7, #20
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	200038a4 	.word	0x200038a4
 800f2c8:	200038ac 	.word	0x200038ac

0800f2cc <__assert_func>:
 800f2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ce:	4614      	mov	r4, r2
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <__assert_func+0x2c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	68d8      	ldr	r0, [r3, #12]
 800f2da:	b14c      	cbz	r4, 800f2f0 <__assert_func+0x24>
 800f2dc:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <__assert_func+0x30>)
 800f2de:	9100      	str	r1, [sp, #0]
 800f2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2e4:	4906      	ldr	r1, [pc, #24]	; (800f300 <__assert_func+0x34>)
 800f2e6:	462b      	mov	r3, r5
 800f2e8:	f000 ff28 	bl	801013c <fiprintf>
 800f2ec:	f001 fa12 	bl	8010714 <abort>
 800f2f0:	4b04      	ldr	r3, [pc, #16]	; (800f304 <__assert_func+0x38>)
 800f2f2:	461c      	mov	r4, r3
 800f2f4:	e7f3      	b.n	800f2de <__assert_func+0x12>
 800f2f6:	bf00      	nop
 800f2f8:	20000090 	.word	0x20000090
 800f2fc:	080152b7 	.word	0x080152b7
 800f300:	080152c4 	.word	0x080152c4
 800f304:	080152f2 	.word	0x080152f2

0800f308 <__cvt>:
 800f308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f30c:	ec55 4b10 	vmov	r4, r5, d0
 800f310:	2d00      	cmp	r5, #0
 800f312:	460e      	mov	r6, r1
 800f314:	4619      	mov	r1, r3
 800f316:	462b      	mov	r3, r5
 800f318:	bfbb      	ittet	lt
 800f31a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f31e:	461d      	movlt	r5, r3
 800f320:	2300      	movge	r3, #0
 800f322:	232d      	movlt	r3, #45	; 0x2d
 800f324:	700b      	strb	r3, [r1, #0]
 800f326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f328:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f32c:	4691      	mov	r9, r2
 800f32e:	f023 0820 	bic.w	r8, r3, #32
 800f332:	bfbc      	itt	lt
 800f334:	4622      	movlt	r2, r4
 800f336:	4614      	movlt	r4, r2
 800f338:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f33c:	d005      	beq.n	800f34a <__cvt+0x42>
 800f33e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f342:	d100      	bne.n	800f346 <__cvt+0x3e>
 800f344:	3601      	adds	r6, #1
 800f346:	2102      	movs	r1, #2
 800f348:	e000      	b.n	800f34c <__cvt+0x44>
 800f34a:	2103      	movs	r1, #3
 800f34c:	ab03      	add	r3, sp, #12
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	ab02      	add	r3, sp, #8
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	ec45 4b10 	vmov	d0, r4, r5
 800f358:	4653      	mov	r3, sl
 800f35a:	4632      	mov	r2, r6
 800f35c:	f001 fa6c 	bl	8010838 <_dtoa_r>
 800f360:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f364:	4607      	mov	r7, r0
 800f366:	d102      	bne.n	800f36e <__cvt+0x66>
 800f368:	f019 0f01 	tst.w	r9, #1
 800f36c:	d022      	beq.n	800f3b4 <__cvt+0xac>
 800f36e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f372:	eb07 0906 	add.w	r9, r7, r6
 800f376:	d110      	bne.n	800f39a <__cvt+0x92>
 800f378:	783b      	ldrb	r3, [r7, #0]
 800f37a:	2b30      	cmp	r3, #48	; 0x30
 800f37c:	d10a      	bne.n	800f394 <__cvt+0x8c>
 800f37e:	2200      	movs	r2, #0
 800f380:	2300      	movs	r3, #0
 800f382:	4620      	mov	r0, r4
 800f384:	4629      	mov	r1, r5
 800f386:	f7f1 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f38a:	b918      	cbnz	r0, 800f394 <__cvt+0x8c>
 800f38c:	f1c6 0601 	rsb	r6, r6, #1
 800f390:	f8ca 6000 	str.w	r6, [sl]
 800f394:	f8da 3000 	ldr.w	r3, [sl]
 800f398:	4499      	add	r9, r3
 800f39a:	2200      	movs	r2, #0
 800f39c:	2300      	movs	r3, #0
 800f39e:	4620      	mov	r0, r4
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	f7f1 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3a6:	b108      	cbz	r0, 800f3ac <__cvt+0xa4>
 800f3a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f3ac:	2230      	movs	r2, #48	; 0x30
 800f3ae:	9b03      	ldr	r3, [sp, #12]
 800f3b0:	454b      	cmp	r3, r9
 800f3b2:	d307      	bcc.n	800f3c4 <__cvt+0xbc>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3b8:	1bdb      	subs	r3, r3, r7
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	6013      	str	r3, [r2, #0]
 800f3be:	b004      	add	sp, #16
 800f3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3c4:	1c59      	adds	r1, r3, #1
 800f3c6:	9103      	str	r1, [sp, #12]
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	e7f0      	b.n	800f3ae <__cvt+0xa6>

0800f3cc <__exponent>:
 800f3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2900      	cmp	r1, #0
 800f3d2:	bfb8      	it	lt
 800f3d4:	4249      	neglt	r1, r1
 800f3d6:	f803 2b02 	strb.w	r2, [r3], #2
 800f3da:	bfb4      	ite	lt
 800f3dc:	222d      	movlt	r2, #45	; 0x2d
 800f3de:	222b      	movge	r2, #43	; 0x2b
 800f3e0:	2909      	cmp	r1, #9
 800f3e2:	7042      	strb	r2, [r0, #1]
 800f3e4:	dd2a      	ble.n	800f43c <__exponent+0x70>
 800f3e6:	f10d 0207 	add.w	r2, sp, #7
 800f3ea:	4617      	mov	r7, r2
 800f3ec:	260a      	movs	r6, #10
 800f3ee:	4694      	mov	ip, r2
 800f3f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800f3f4:	fb06 1415 	mls	r4, r6, r5, r1
 800f3f8:	3430      	adds	r4, #48	; 0x30
 800f3fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f3fe:	460c      	mov	r4, r1
 800f400:	2c63      	cmp	r4, #99	; 0x63
 800f402:	f102 32ff 	add.w	r2, r2, #4294967295
 800f406:	4629      	mov	r1, r5
 800f408:	dcf1      	bgt.n	800f3ee <__exponent+0x22>
 800f40a:	3130      	adds	r1, #48	; 0x30
 800f40c:	f1ac 0402 	sub.w	r4, ip, #2
 800f410:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f414:	1c41      	adds	r1, r0, #1
 800f416:	4622      	mov	r2, r4
 800f418:	42ba      	cmp	r2, r7
 800f41a:	d30a      	bcc.n	800f432 <__exponent+0x66>
 800f41c:	f10d 0209 	add.w	r2, sp, #9
 800f420:	eba2 020c 	sub.w	r2, r2, ip
 800f424:	42bc      	cmp	r4, r7
 800f426:	bf88      	it	hi
 800f428:	2200      	movhi	r2, #0
 800f42a:	4413      	add	r3, r2
 800f42c:	1a18      	subs	r0, r3, r0
 800f42e:	b003      	add	sp, #12
 800f430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f432:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f436:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f43a:	e7ed      	b.n	800f418 <__exponent+0x4c>
 800f43c:	2330      	movs	r3, #48	; 0x30
 800f43e:	3130      	adds	r1, #48	; 0x30
 800f440:	7083      	strb	r3, [r0, #2]
 800f442:	70c1      	strb	r1, [r0, #3]
 800f444:	1d03      	adds	r3, r0, #4
 800f446:	e7f1      	b.n	800f42c <__exponent+0x60>

0800f448 <_printf_float>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	ed2d 8b02 	vpush	{d8}
 800f450:	b08d      	sub	sp, #52	; 0x34
 800f452:	460c      	mov	r4, r1
 800f454:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f458:	4616      	mov	r6, r2
 800f45a:	461f      	mov	r7, r3
 800f45c:	4605      	mov	r5, r0
 800f45e:	f001 f8cd 	bl	80105fc <_localeconv_r>
 800f462:	f8d0 a000 	ldr.w	sl, [r0]
 800f466:	4650      	mov	r0, sl
 800f468:	f7f0 ff02 	bl	8000270 <strlen>
 800f46c:	2300      	movs	r3, #0
 800f46e:	930a      	str	r3, [sp, #40]	; 0x28
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	f8d8 3000 	ldr.w	r3, [r8]
 800f478:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f47c:	3307      	adds	r3, #7
 800f47e:	f023 0307 	bic.w	r3, r3, #7
 800f482:	f103 0208 	add.w	r2, r3, #8
 800f486:	f8c8 2000 	str.w	r2, [r8]
 800f48a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f48e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f492:	9307      	str	r3, [sp, #28]
 800f494:	f8cd 8018 	str.w	r8, [sp, #24]
 800f498:	ee08 0a10 	vmov	s16, r0
 800f49c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f4a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4a4:	4b9e      	ldr	r3, [pc, #632]	; (800f720 <_printf_float+0x2d8>)
 800f4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4aa:	f7f1 fb3f 	bl	8000b2c <__aeabi_dcmpun>
 800f4ae:	bb88      	cbnz	r0, 800f514 <_printf_float+0xcc>
 800f4b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4b4:	4b9a      	ldr	r3, [pc, #616]	; (800f720 <_printf_float+0x2d8>)
 800f4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ba:	f7f1 fb19 	bl	8000af0 <__aeabi_dcmple>
 800f4be:	bb48      	cbnz	r0, 800f514 <_printf_float+0xcc>
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	4649      	mov	r1, r9
 800f4c8:	f7f1 fb08 	bl	8000adc <__aeabi_dcmplt>
 800f4cc:	b110      	cbz	r0, 800f4d4 <_printf_float+0x8c>
 800f4ce:	232d      	movs	r3, #45	; 0x2d
 800f4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4d4:	4a93      	ldr	r2, [pc, #588]	; (800f724 <_printf_float+0x2dc>)
 800f4d6:	4b94      	ldr	r3, [pc, #592]	; (800f728 <_printf_float+0x2e0>)
 800f4d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f4dc:	bf94      	ite	ls
 800f4de:	4690      	movls	r8, r2
 800f4e0:	4698      	movhi	r8, r3
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	6123      	str	r3, [r4, #16]
 800f4e6:	9b05      	ldr	r3, [sp, #20]
 800f4e8:	f023 0304 	bic.w	r3, r3, #4
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	f04f 0900 	mov.w	r9, #0
 800f4f2:	9700      	str	r7, [sp, #0]
 800f4f4:	4633      	mov	r3, r6
 800f4f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f000 f9da 	bl	800f8b4 <_printf_common>
 800f500:	3001      	adds	r0, #1
 800f502:	f040 8090 	bne.w	800f626 <_printf_float+0x1de>
 800f506:	f04f 30ff 	mov.w	r0, #4294967295
 800f50a:	b00d      	add	sp, #52	; 0x34
 800f50c:	ecbd 8b02 	vpop	{d8}
 800f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f514:	4642      	mov	r2, r8
 800f516:	464b      	mov	r3, r9
 800f518:	4640      	mov	r0, r8
 800f51a:	4649      	mov	r1, r9
 800f51c:	f7f1 fb06 	bl	8000b2c <__aeabi_dcmpun>
 800f520:	b140      	cbz	r0, 800f534 <_printf_float+0xec>
 800f522:	464b      	mov	r3, r9
 800f524:	2b00      	cmp	r3, #0
 800f526:	bfbc      	itt	lt
 800f528:	232d      	movlt	r3, #45	; 0x2d
 800f52a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f52e:	4a7f      	ldr	r2, [pc, #508]	; (800f72c <_printf_float+0x2e4>)
 800f530:	4b7f      	ldr	r3, [pc, #508]	; (800f730 <_printf_float+0x2e8>)
 800f532:	e7d1      	b.n	800f4d8 <_printf_float+0x90>
 800f534:	6863      	ldr	r3, [r4, #4]
 800f536:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f53a:	9206      	str	r2, [sp, #24]
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	d13f      	bne.n	800f5c0 <_printf_float+0x178>
 800f540:	2306      	movs	r3, #6
 800f542:	6063      	str	r3, [r4, #4]
 800f544:	9b05      	ldr	r3, [sp, #20]
 800f546:	6861      	ldr	r1, [r4, #4]
 800f548:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f54c:	2300      	movs	r3, #0
 800f54e:	9303      	str	r3, [sp, #12]
 800f550:	ab0a      	add	r3, sp, #40	; 0x28
 800f552:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f556:	ab09      	add	r3, sp, #36	; 0x24
 800f558:	ec49 8b10 	vmov	d0, r8, r9
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	6022      	str	r2, [r4, #0]
 800f560:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f564:	4628      	mov	r0, r5
 800f566:	f7ff fecf 	bl	800f308 <__cvt>
 800f56a:	9b06      	ldr	r3, [sp, #24]
 800f56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f56e:	2b47      	cmp	r3, #71	; 0x47
 800f570:	4680      	mov	r8, r0
 800f572:	d108      	bne.n	800f586 <_printf_float+0x13e>
 800f574:	1cc8      	adds	r0, r1, #3
 800f576:	db02      	blt.n	800f57e <_printf_float+0x136>
 800f578:	6863      	ldr	r3, [r4, #4]
 800f57a:	4299      	cmp	r1, r3
 800f57c:	dd41      	ble.n	800f602 <_printf_float+0x1ba>
 800f57e:	f1ab 0302 	sub.w	r3, fp, #2
 800f582:	fa5f fb83 	uxtb.w	fp, r3
 800f586:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f58a:	d820      	bhi.n	800f5ce <_printf_float+0x186>
 800f58c:	3901      	subs	r1, #1
 800f58e:	465a      	mov	r2, fp
 800f590:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f594:	9109      	str	r1, [sp, #36]	; 0x24
 800f596:	f7ff ff19 	bl	800f3cc <__exponent>
 800f59a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f59c:	1813      	adds	r3, r2, r0
 800f59e:	2a01      	cmp	r2, #1
 800f5a0:	4681      	mov	r9, r0
 800f5a2:	6123      	str	r3, [r4, #16]
 800f5a4:	dc02      	bgt.n	800f5ac <_printf_float+0x164>
 800f5a6:	6822      	ldr	r2, [r4, #0]
 800f5a8:	07d2      	lsls	r2, r2, #31
 800f5aa:	d501      	bpl.n	800f5b0 <_printf_float+0x168>
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	6123      	str	r3, [r4, #16]
 800f5b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d09c      	beq.n	800f4f2 <_printf_float+0xaa>
 800f5b8:	232d      	movs	r3, #45	; 0x2d
 800f5ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5be:	e798      	b.n	800f4f2 <_printf_float+0xaa>
 800f5c0:	9a06      	ldr	r2, [sp, #24]
 800f5c2:	2a47      	cmp	r2, #71	; 0x47
 800f5c4:	d1be      	bne.n	800f544 <_printf_float+0xfc>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1bc      	bne.n	800f544 <_printf_float+0xfc>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e7b9      	b.n	800f542 <_printf_float+0xfa>
 800f5ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f5d2:	d118      	bne.n	800f606 <_printf_float+0x1be>
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	6863      	ldr	r3, [r4, #4]
 800f5d8:	dd0b      	ble.n	800f5f2 <_printf_float+0x1aa>
 800f5da:	6121      	str	r1, [r4, #16]
 800f5dc:	b913      	cbnz	r3, 800f5e4 <_printf_float+0x19c>
 800f5de:	6822      	ldr	r2, [r4, #0]
 800f5e0:	07d0      	lsls	r0, r2, #31
 800f5e2:	d502      	bpl.n	800f5ea <_printf_float+0x1a2>
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	440b      	add	r3, r1
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800f5ec:	f04f 0900 	mov.w	r9, #0
 800f5f0:	e7de      	b.n	800f5b0 <_printf_float+0x168>
 800f5f2:	b913      	cbnz	r3, 800f5fa <_printf_float+0x1b2>
 800f5f4:	6822      	ldr	r2, [r4, #0]
 800f5f6:	07d2      	lsls	r2, r2, #31
 800f5f8:	d501      	bpl.n	800f5fe <_printf_float+0x1b6>
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	e7f4      	b.n	800f5e8 <_printf_float+0x1a0>
 800f5fe:	2301      	movs	r3, #1
 800f600:	e7f2      	b.n	800f5e8 <_printf_float+0x1a0>
 800f602:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f608:	4299      	cmp	r1, r3
 800f60a:	db05      	blt.n	800f618 <_printf_float+0x1d0>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	6121      	str	r1, [r4, #16]
 800f610:	07d8      	lsls	r0, r3, #31
 800f612:	d5ea      	bpl.n	800f5ea <_printf_float+0x1a2>
 800f614:	1c4b      	adds	r3, r1, #1
 800f616:	e7e7      	b.n	800f5e8 <_printf_float+0x1a0>
 800f618:	2900      	cmp	r1, #0
 800f61a:	bfd4      	ite	le
 800f61c:	f1c1 0202 	rsble	r2, r1, #2
 800f620:	2201      	movgt	r2, #1
 800f622:	4413      	add	r3, r2
 800f624:	e7e0      	b.n	800f5e8 <_printf_float+0x1a0>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	055a      	lsls	r2, r3, #21
 800f62a:	d407      	bmi.n	800f63c <_printf_float+0x1f4>
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	4642      	mov	r2, r8
 800f630:	4631      	mov	r1, r6
 800f632:	4628      	mov	r0, r5
 800f634:	47b8      	blx	r7
 800f636:	3001      	adds	r0, #1
 800f638:	d12c      	bne.n	800f694 <_printf_float+0x24c>
 800f63a:	e764      	b.n	800f506 <_printf_float+0xbe>
 800f63c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f640:	f240 80e0 	bls.w	800f804 <_printf_float+0x3bc>
 800f644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f648:	2200      	movs	r2, #0
 800f64a:	2300      	movs	r3, #0
 800f64c:	f7f1 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f650:	2800      	cmp	r0, #0
 800f652:	d034      	beq.n	800f6be <_printf_float+0x276>
 800f654:	4a37      	ldr	r2, [pc, #220]	; (800f734 <_printf_float+0x2ec>)
 800f656:	2301      	movs	r3, #1
 800f658:	4631      	mov	r1, r6
 800f65a:	4628      	mov	r0, r5
 800f65c:	47b8      	blx	r7
 800f65e:	3001      	adds	r0, #1
 800f660:	f43f af51 	beq.w	800f506 <_printf_float+0xbe>
 800f664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f668:	429a      	cmp	r2, r3
 800f66a:	db02      	blt.n	800f672 <_printf_float+0x22a>
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	07d8      	lsls	r0, r3, #31
 800f670:	d510      	bpl.n	800f694 <_printf_float+0x24c>
 800f672:	ee18 3a10 	vmov	r3, s16
 800f676:	4652      	mov	r2, sl
 800f678:	4631      	mov	r1, r6
 800f67a:	4628      	mov	r0, r5
 800f67c:	47b8      	blx	r7
 800f67e:	3001      	adds	r0, #1
 800f680:	f43f af41 	beq.w	800f506 <_printf_float+0xbe>
 800f684:	f04f 0800 	mov.w	r8, #0
 800f688:	f104 091a 	add.w	r9, r4, #26
 800f68c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f68e:	3b01      	subs	r3, #1
 800f690:	4543      	cmp	r3, r8
 800f692:	dc09      	bgt.n	800f6a8 <_printf_float+0x260>
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	079b      	lsls	r3, r3, #30
 800f698:	f100 8107 	bmi.w	800f8aa <_printf_float+0x462>
 800f69c:	68e0      	ldr	r0, [r4, #12]
 800f69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6a0:	4298      	cmp	r0, r3
 800f6a2:	bfb8      	it	lt
 800f6a4:	4618      	movlt	r0, r3
 800f6a6:	e730      	b.n	800f50a <_printf_float+0xc2>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	464a      	mov	r2, r9
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	47b8      	blx	r7
 800f6b2:	3001      	adds	r0, #1
 800f6b4:	f43f af27 	beq.w	800f506 <_printf_float+0xbe>
 800f6b8:	f108 0801 	add.w	r8, r8, #1
 800f6bc:	e7e6      	b.n	800f68c <_printf_float+0x244>
 800f6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	dc39      	bgt.n	800f738 <_printf_float+0x2f0>
 800f6c4:	4a1b      	ldr	r2, [pc, #108]	; (800f734 <_printf_float+0x2ec>)
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	47b8      	blx	r7
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	f43f af19 	beq.w	800f506 <_printf_float+0xbe>
 800f6d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	d102      	bne.n	800f6e2 <_printf_float+0x29a>
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	07d9      	lsls	r1, r3, #31
 800f6e0:	d5d8      	bpl.n	800f694 <_printf_float+0x24c>
 800f6e2:	ee18 3a10 	vmov	r3, s16
 800f6e6:	4652      	mov	r2, sl
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	47b8      	blx	r7
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	f43f af09 	beq.w	800f506 <_printf_float+0xbe>
 800f6f4:	f04f 0900 	mov.w	r9, #0
 800f6f8:	f104 0a1a 	add.w	sl, r4, #26
 800f6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6fe:	425b      	negs	r3, r3
 800f700:	454b      	cmp	r3, r9
 800f702:	dc01      	bgt.n	800f708 <_printf_float+0x2c0>
 800f704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f706:	e792      	b.n	800f62e <_printf_float+0x1e6>
 800f708:	2301      	movs	r3, #1
 800f70a:	4652      	mov	r2, sl
 800f70c:	4631      	mov	r1, r6
 800f70e:	4628      	mov	r0, r5
 800f710:	47b8      	blx	r7
 800f712:	3001      	adds	r0, #1
 800f714:	f43f aef7 	beq.w	800f506 <_printf_float+0xbe>
 800f718:	f109 0901 	add.w	r9, r9, #1
 800f71c:	e7ee      	b.n	800f6fc <_printf_float+0x2b4>
 800f71e:	bf00      	nop
 800f720:	7fefffff 	.word	0x7fefffff
 800f724:	080152f3 	.word	0x080152f3
 800f728:	080152f7 	.word	0x080152f7
 800f72c:	080152fb 	.word	0x080152fb
 800f730:	080152ff 	.word	0x080152ff
 800f734:	08015303 	.word	0x08015303
 800f738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f73a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f73c:	429a      	cmp	r2, r3
 800f73e:	bfa8      	it	ge
 800f740:	461a      	movge	r2, r3
 800f742:	2a00      	cmp	r2, #0
 800f744:	4691      	mov	r9, r2
 800f746:	dc37      	bgt.n	800f7b8 <_printf_float+0x370>
 800f748:	f04f 0b00 	mov.w	fp, #0
 800f74c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f750:	f104 021a 	add.w	r2, r4, #26
 800f754:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f756:	9305      	str	r3, [sp, #20]
 800f758:	eba3 0309 	sub.w	r3, r3, r9
 800f75c:	455b      	cmp	r3, fp
 800f75e:	dc33      	bgt.n	800f7c8 <_printf_float+0x380>
 800f760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f764:	429a      	cmp	r2, r3
 800f766:	db3b      	blt.n	800f7e0 <_printf_float+0x398>
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	07da      	lsls	r2, r3, #31
 800f76c:	d438      	bmi.n	800f7e0 <_printf_float+0x398>
 800f76e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f772:	eba2 0903 	sub.w	r9, r2, r3
 800f776:	9b05      	ldr	r3, [sp, #20]
 800f778:	1ad2      	subs	r2, r2, r3
 800f77a:	4591      	cmp	r9, r2
 800f77c:	bfa8      	it	ge
 800f77e:	4691      	movge	r9, r2
 800f780:	f1b9 0f00 	cmp.w	r9, #0
 800f784:	dc35      	bgt.n	800f7f2 <_printf_float+0x3aa>
 800f786:	f04f 0800 	mov.w	r8, #0
 800f78a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f78e:	f104 0a1a 	add.w	sl, r4, #26
 800f792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f796:	1a9b      	subs	r3, r3, r2
 800f798:	eba3 0309 	sub.w	r3, r3, r9
 800f79c:	4543      	cmp	r3, r8
 800f79e:	f77f af79 	ble.w	800f694 <_printf_float+0x24c>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	4652      	mov	r2, sl
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	47b8      	blx	r7
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	f43f aeaa 	beq.w	800f506 <_printf_float+0xbe>
 800f7b2:	f108 0801 	add.w	r8, r8, #1
 800f7b6:	e7ec      	b.n	800f792 <_printf_float+0x34a>
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	4631      	mov	r1, r6
 800f7bc:	4642      	mov	r2, r8
 800f7be:	4628      	mov	r0, r5
 800f7c0:	47b8      	blx	r7
 800f7c2:	3001      	adds	r0, #1
 800f7c4:	d1c0      	bne.n	800f748 <_printf_float+0x300>
 800f7c6:	e69e      	b.n	800f506 <_printf_float+0xbe>
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	4631      	mov	r1, r6
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	9205      	str	r2, [sp, #20]
 800f7d0:	47b8      	blx	r7
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	f43f ae97 	beq.w	800f506 <_printf_float+0xbe>
 800f7d8:	9a05      	ldr	r2, [sp, #20]
 800f7da:	f10b 0b01 	add.w	fp, fp, #1
 800f7de:	e7b9      	b.n	800f754 <_printf_float+0x30c>
 800f7e0:	ee18 3a10 	vmov	r3, s16
 800f7e4:	4652      	mov	r2, sl
 800f7e6:	4631      	mov	r1, r6
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	47b8      	blx	r7
 800f7ec:	3001      	adds	r0, #1
 800f7ee:	d1be      	bne.n	800f76e <_printf_float+0x326>
 800f7f0:	e689      	b.n	800f506 <_printf_float+0xbe>
 800f7f2:	9a05      	ldr	r2, [sp, #20]
 800f7f4:	464b      	mov	r3, r9
 800f7f6:	4442      	add	r2, r8
 800f7f8:	4631      	mov	r1, r6
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	47b8      	blx	r7
 800f7fe:	3001      	adds	r0, #1
 800f800:	d1c1      	bne.n	800f786 <_printf_float+0x33e>
 800f802:	e680      	b.n	800f506 <_printf_float+0xbe>
 800f804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f806:	2a01      	cmp	r2, #1
 800f808:	dc01      	bgt.n	800f80e <_printf_float+0x3c6>
 800f80a:	07db      	lsls	r3, r3, #31
 800f80c:	d53a      	bpl.n	800f884 <_printf_float+0x43c>
 800f80e:	2301      	movs	r3, #1
 800f810:	4642      	mov	r2, r8
 800f812:	4631      	mov	r1, r6
 800f814:	4628      	mov	r0, r5
 800f816:	47b8      	blx	r7
 800f818:	3001      	adds	r0, #1
 800f81a:	f43f ae74 	beq.w	800f506 <_printf_float+0xbe>
 800f81e:	ee18 3a10 	vmov	r3, s16
 800f822:	4652      	mov	r2, sl
 800f824:	4631      	mov	r1, r6
 800f826:	4628      	mov	r0, r5
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	f43f ae6b 	beq.w	800f506 <_printf_float+0xbe>
 800f830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f834:	2200      	movs	r2, #0
 800f836:	2300      	movs	r3, #0
 800f838:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f83c:	f7f1 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800f840:	b9d8      	cbnz	r0, 800f87a <_printf_float+0x432>
 800f842:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f846:	f108 0201 	add.w	r2, r8, #1
 800f84a:	4631      	mov	r1, r6
 800f84c:	4628      	mov	r0, r5
 800f84e:	47b8      	blx	r7
 800f850:	3001      	adds	r0, #1
 800f852:	d10e      	bne.n	800f872 <_printf_float+0x42a>
 800f854:	e657      	b.n	800f506 <_printf_float+0xbe>
 800f856:	2301      	movs	r3, #1
 800f858:	4652      	mov	r2, sl
 800f85a:	4631      	mov	r1, r6
 800f85c:	4628      	mov	r0, r5
 800f85e:	47b8      	blx	r7
 800f860:	3001      	adds	r0, #1
 800f862:	f43f ae50 	beq.w	800f506 <_printf_float+0xbe>
 800f866:	f108 0801 	add.w	r8, r8, #1
 800f86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f86c:	3b01      	subs	r3, #1
 800f86e:	4543      	cmp	r3, r8
 800f870:	dcf1      	bgt.n	800f856 <_printf_float+0x40e>
 800f872:	464b      	mov	r3, r9
 800f874:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f878:	e6da      	b.n	800f630 <_printf_float+0x1e8>
 800f87a:	f04f 0800 	mov.w	r8, #0
 800f87e:	f104 0a1a 	add.w	sl, r4, #26
 800f882:	e7f2      	b.n	800f86a <_printf_float+0x422>
 800f884:	2301      	movs	r3, #1
 800f886:	4642      	mov	r2, r8
 800f888:	e7df      	b.n	800f84a <_printf_float+0x402>
 800f88a:	2301      	movs	r3, #1
 800f88c:	464a      	mov	r2, r9
 800f88e:	4631      	mov	r1, r6
 800f890:	4628      	mov	r0, r5
 800f892:	47b8      	blx	r7
 800f894:	3001      	adds	r0, #1
 800f896:	f43f ae36 	beq.w	800f506 <_printf_float+0xbe>
 800f89a:	f108 0801 	add.w	r8, r8, #1
 800f89e:	68e3      	ldr	r3, [r4, #12]
 800f8a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8a2:	1a5b      	subs	r3, r3, r1
 800f8a4:	4543      	cmp	r3, r8
 800f8a6:	dcf0      	bgt.n	800f88a <_printf_float+0x442>
 800f8a8:	e6f8      	b.n	800f69c <_printf_float+0x254>
 800f8aa:	f04f 0800 	mov.w	r8, #0
 800f8ae:	f104 0919 	add.w	r9, r4, #25
 800f8b2:	e7f4      	b.n	800f89e <_printf_float+0x456>

0800f8b4 <_printf_common>:
 800f8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b8:	4616      	mov	r6, r2
 800f8ba:	4699      	mov	r9, r3
 800f8bc:	688a      	ldr	r2, [r1, #8]
 800f8be:	690b      	ldr	r3, [r1, #16]
 800f8c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	bfb8      	it	lt
 800f8c8:	4613      	movlt	r3, r2
 800f8ca:	6033      	str	r3, [r6, #0]
 800f8cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	b10a      	cbz	r2, 800f8da <_printf_common+0x26>
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	6033      	str	r3, [r6, #0]
 800f8da:	6823      	ldr	r3, [r4, #0]
 800f8dc:	0699      	lsls	r1, r3, #26
 800f8de:	bf42      	ittt	mi
 800f8e0:	6833      	ldrmi	r3, [r6, #0]
 800f8e2:	3302      	addmi	r3, #2
 800f8e4:	6033      	strmi	r3, [r6, #0]
 800f8e6:	6825      	ldr	r5, [r4, #0]
 800f8e8:	f015 0506 	ands.w	r5, r5, #6
 800f8ec:	d106      	bne.n	800f8fc <_printf_common+0x48>
 800f8ee:	f104 0a19 	add.w	sl, r4, #25
 800f8f2:	68e3      	ldr	r3, [r4, #12]
 800f8f4:	6832      	ldr	r2, [r6, #0]
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	42ab      	cmp	r3, r5
 800f8fa:	dc26      	bgt.n	800f94a <_printf_common+0x96>
 800f8fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f900:	1e13      	subs	r3, r2, #0
 800f902:	6822      	ldr	r2, [r4, #0]
 800f904:	bf18      	it	ne
 800f906:	2301      	movne	r3, #1
 800f908:	0692      	lsls	r2, r2, #26
 800f90a:	d42b      	bmi.n	800f964 <_printf_common+0xb0>
 800f90c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f910:	4649      	mov	r1, r9
 800f912:	4638      	mov	r0, r7
 800f914:	47c0      	blx	r8
 800f916:	3001      	adds	r0, #1
 800f918:	d01e      	beq.n	800f958 <_printf_common+0xa4>
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	6922      	ldr	r2, [r4, #16]
 800f91e:	f003 0306 	and.w	r3, r3, #6
 800f922:	2b04      	cmp	r3, #4
 800f924:	bf02      	ittt	eq
 800f926:	68e5      	ldreq	r5, [r4, #12]
 800f928:	6833      	ldreq	r3, [r6, #0]
 800f92a:	1aed      	subeq	r5, r5, r3
 800f92c:	68a3      	ldr	r3, [r4, #8]
 800f92e:	bf0c      	ite	eq
 800f930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f934:	2500      	movne	r5, #0
 800f936:	4293      	cmp	r3, r2
 800f938:	bfc4      	itt	gt
 800f93a:	1a9b      	subgt	r3, r3, r2
 800f93c:	18ed      	addgt	r5, r5, r3
 800f93e:	2600      	movs	r6, #0
 800f940:	341a      	adds	r4, #26
 800f942:	42b5      	cmp	r5, r6
 800f944:	d11a      	bne.n	800f97c <_printf_common+0xc8>
 800f946:	2000      	movs	r0, #0
 800f948:	e008      	b.n	800f95c <_printf_common+0xa8>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4652      	mov	r2, sl
 800f94e:	4649      	mov	r1, r9
 800f950:	4638      	mov	r0, r7
 800f952:	47c0      	blx	r8
 800f954:	3001      	adds	r0, #1
 800f956:	d103      	bne.n	800f960 <_printf_common+0xac>
 800f958:	f04f 30ff 	mov.w	r0, #4294967295
 800f95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f960:	3501      	adds	r5, #1
 800f962:	e7c6      	b.n	800f8f2 <_printf_common+0x3e>
 800f964:	18e1      	adds	r1, r4, r3
 800f966:	1c5a      	adds	r2, r3, #1
 800f968:	2030      	movs	r0, #48	; 0x30
 800f96a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f96e:	4422      	add	r2, r4
 800f970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f978:	3302      	adds	r3, #2
 800f97a:	e7c7      	b.n	800f90c <_printf_common+0x58>
 800f97c:	2301      	movs	r3, #1
 800f97e:	4622      	mov	r2, r4
 800f980:	4649      	mov	r1, r9
 800f982:	4638      	mov	r0, r7
 800f984:	47c0      	blx	r8
 800f986:	3001      	adds	r0, #1
 800f988:	d0e6      	beq.n	800f958 <_printf_common+0xa4>
 800f98a:	3601      	adds	r6, #1
 800f98c:	e7d9      	b.n	800f942 <_printf_common+0x8e>
	...

0800f990 <_printf_i>:
 800f990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f994:	7e0f      	ldrb	r7, [r1, #24]
 800f996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f998:	2f78      	cmp	r7, #120	; 0x78
 800f99a:	4691      	mov	r9, r2
 800f99c:	4680      	mov	r8, r0
 800f99e:	460c      	mov	r4, r1
 800f9a0:	469a      	mov	sl, r3
 800f9a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9a6:	d807      	bhi.n	800f9b8 <_printf_i+0x28>
 800f9a8:	2f62      	cmp	r7, #98	; 0x62
 800f9aa:	d80a      	bhi.n	800f9c2 <_printf_i+0x32>
 800f9ac:	2f00      	cmp	r7, #0
 800f9ae:	f000 80d4 	beq.w	800fb5a <_printf_i+0x1ca>
 800f9b2:	2f58      	cmp	r7, #88	; 0x58
 800f9b4:	f000 80c0 	beq.w	800fb38 <_printf_i+0x1a8>
 800f9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9c0:	e03a      	b.n	800fa38 <_printf_i+0xa8>
 800f9c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9c6:	2b15      	cmp	r3, #21
 800f9c8:	d8f6      	bhi.n	800f9b8 <_printf_i+0x28>
 800f9ca:	a101      	add	r1, pc, #4	; (adr r1, 800f9d0 <_printf_i+0x40>)
 800f9cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9d0:	0800fa29 	.word	0x0800fa29
 800f9d4:	0800fa3d 	.word	0x0800fa3d
 800f9d8:	0800f9b9 	.word	0x0800f9b9
 800f9dc:	0800f9b9 	.word	0x0800f9b9
 800f9e0:	0800f9b9 	.word	0x0800f9b9
 800f9e4:	0800f9b9 	.word	0x0800f9b9
 800f9e8:	0800fa3d 	.word	0x0800fa3d
 800f9ec:	0800f9b9 	.word	0x0800f9b9
 800f9f0:	0800f9b9 	.word	0x0800f9b9
 800f9f4:	0800f9b9 	.word	0x0800f9b9
 800f9f8:	0800f9b9 	.word	0x0800f9b9
 800f9fc:	0800fb41 	.word	0x0800fb41
 800fa00:	0800fa69 	.word	0x0800fa69
 800fa04:	0800fafb 	.word	0x0800fafb
 800fa08:	0800f9b9 	.word	0x0800f9b9
 800fa0c:	0800f9b9 	.word	0x0800f9b9
 800fa10:	0800fb63 	.word	0x0800fb63
 800fa14:	0800f9b9 	.word	0x0800f9b9
 800fa18:	0800fa69 	.word	0x0800fa69
 800fa1c:	0800f9b9 	.word	0x0800f9b9
 800fa20:	0800f9b9 	.word	0x0800f9b9
 800fa24:	0800fb03 	.word	0x0800fb03
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	1d1a      	adds	r2, r3, #4
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	602a      	str	r2, [r5, #0]
 800fa30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa38:	2301      	movs	r3, #1
 800fa3a:	e09f      	b.n	800fb7c <_printf_i+0x1ec>
 800fa3c:	6820      	ldr	r0, [r4, #0]
 800fa3e:	682b      	ldr	r3, [r5, #0]
 800fa40:	0607      	lsls	r7, r0, #24
 800fa42:	f103 0104 	add.w	r1, r3, #4
 800fa46:	6029      	str	r1, [r5, #0]
 800fa48:	d501      	bpl.n	800fa4e <_printf_i+0xbe>
 800fa4a:	681e      	ldr	r6, [r3, #0]
 800fa4c:	e003      	b.n	800fa56 <_printf_i+0xc6>
 800fa4e:	0646      	lsls	r6, r0, #25
 800fa50:	d5fb      	bpl.n	800fa4a <_printf_i+0xba>
 800fa52:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa56:	2e00      	cmp	r6, #0
 800fa58:	da03      	bge.n	800fa62 <_printf_i+0xd2>
 800fa5a:	232d      	movs	r3, #45	; 0x2d
 800fa5c:	4276      	negs	r6, r6
 800fa5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa62:	485a      	ldr	r0, [pc, #360]	; (800fbcc <_printf_i+0x23c>)
 800fa64:	230a      	movs	r3, #10
 800fa66:	e012      	b.n	800fa8e <_printf_i+0xfe>
 800fa68:	682b      	ldr	r3, [r5, #0]
 800fa6a:	6820      	ldr	r0, [r4, #0]
 800fa6c:	1d19      	adds	r1, r3, #4
 800fa6e:	6029      	str	r1, [r5, #0]
 800fa70:	0605      	lsls	r5, r0, #24
 800fa72:	d501      	bpl.n	800fa78 <_printf_i+0xe8>
 800fa74:	681e      	ldr	r6, [r3, #0]
 800fa76:	e002      	b.n	800fa7e <_printf_i+0xee>
 800fa78:	0641      	lsls	r1, r0, #25
 800fa7a:	d5fb      	bpl.n	800fa74 <_printf_i+0xe4>
 800fa7c:	881e      	ldrh	r6, [r3, #0]
 800fa7e:	4853      	ldr	r0, [pc, #332]	; (800fbcc <_printf_i+0x23c>)
 800fa80:	2f6f      	cmp	r7, #111	; 0x6f
 800fa82:	bf0c      	ite	eq
 800fa84:	2308      	moveq	r3, #8
 800fa86:	230a      	movne	r3, #10
 800fa88:	2100      	movs	r1, #0
 800fa8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa8e:	6865      	ldr	r5, [r4, #4]
 800fa90:	60a5      	str	r5, [r4, #8]
 800fa92:	2d00      	cmp	r5, #0
 800fa94:	bfa2      	ittt	ge
 800fa96:	6821      	ldrge	r1, [r4, #0]
 800fa98:	f021 0104 	bicge.w	r1, r1, #4
 800fa9c:	6021      	strge	r1, [r4, #0]
 800fa9e:	b90e      	cbnz	r6, 800faa4 <_printf_i+0x114>
 800faa0:	2d00      	cmp	r5, #0
 800faa2:	d04b      	beq.n	800fb3c <_printf_i+0x1ac>
 800faa4:	4615      	mov	r5, r2
 800faa6:	fbb6 f1f3 	udiv	r1, r6, r3
 800faaa:	fb03 6711 	mls	r7, r3, r1, r6
 800faae:	5dc7      	ldrb	r7, [r0, r7]
 800fab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fab4:	4637      	mov	r7, r6
 800fab6:	42bb      	cmp	r3, r7
 800fab8:	460e      	mov	r6, r1
 800faba:	d9f4      	bls.n	800faa6 <_printf_i+0x116>
 800fabc:	2b08      	cmp	r3, #8
 800fabe:	d10b      	bne.n	800fad8 <_printf_i+0x148>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	07de      	lsls	r6, r3, #31
 800fac4:	d508      	bpl.n	800fad8 <_printf_i+0x148>
 800fac6:	6923      	ldr	r3, [r4, #16]
 800fac8:	6861      	ldr	r1, [r4, #4]
 800faca:	4299      	cmp	r1, r3
 800facc:	bfde      	ittt	le
 800face:	2330      	movle	r3, #48	; 0x30
 800fad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fad8:	1b52      	subs	r2, r2, r5
 800fada:	6122      	str	r2, [r4, #16]
 800fadc:	f8cd a000 	str.w	sl, [sp]
 800fae0:	464b      	mov	r3, r9
 800fae2:	aa03      	add	r2, sp, #12
 800fae4:	4621      	mov	r1, r4
 800fae6:	4640      	mov	r0, r8
 800fae8:	f7ff fee4 	bl	800f8b4 <_printf_common>
 800faec:	3001      	adds	r0, #1
 800faee:	d14a      	bne.n	800fb86 <_printf_i+0x1f6>
 800faf0:	f04f 30ff 	mov.w	r0, #4294967295
 800faf4:	b004      	add	sp, #16
 800faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	f043 0320 	orr.w	r3, r3, #32
 800fb00:	6023      	str	r3, [r4, #0]
 800fb02:	4833      	ldr	r0, [pc, #204]	; (800fbd0 <_printf_i+0x240>)
 800fb04:	2778      	movs	r7, #120	; 0x78
 800fb06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb0a:	6823      	ldr	r3, [r4, #0]
 800fb0c:	6829      	ldr	r1, [r5, #0]
 800fb0e:	061f      	lsls	r7, r3, #24
 800fb10:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb14:	d402      	bmi.n	800fb1c <_printf_i+0x18c>
 800fb16:	065f      	lsls	r7, r3, #25
 800fb18:	bf48      	it	mi
 800fb1a:	b2b6      	uxthmi	r6, r6
 800fb1c:	07df      	lsls	r7, r3, #31
 800fb1e:	bf48      	it	mi
 800fb20:	f043 0320 	orrmi.w	r3, r3, #32
 800fb24:	6029      	str	r1, [r5, #0]
 800fb26:	bf48      	it	mi
 800fb28:	6023      	strmi	r3, [r4, #0]
 800fb2a:	b91e      	cbnz	r6, 800fb34 <_printf_i+0x1a4>
 800fb2c:	6823      	ldr	r3, [r4, #0]
 800fb2e:	f023 0320 	bic.w	r3, r3, #32
 800fb32:	6023      	str	r3, [r4, #0]
 800fb34:	2310      	movs	r3, #16
 800fb36:	e7a7      	b.n	800fa88 <_printf_i+0xf8>
 800fb38:	4824      	ldr	r0, [pc, #144]	; (800fbcc <_printf_i+0x23c>)
 800fb3a:	e7e4      	b.n	800fb06 <_printf_i+0x176>
 800fb3c:	4615      	mov	r5, r2
 800fb3e:	e7bd      	b.n	800fabc <_printf_i+0x12c>
 800fb40:	682b      	ldr	r3, [r5, #0]
 800fb42:	6826      	ldr	r6, [r4, #0]
 800fb44:	6961      	ldr	r1, [r4, #20]
 800fb46:	1d18      	adds	r0, r3, #4
 800fb48:	6028      	str	r0, [r5, #0]
 800fb4a:	0635      	lsls	r5, r6, #24
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	d501      	bpl.n	800fb54 <_printf_i+0x1c4>
 800fb50:	6019      	str	r1, [r3, #0]
 800fb52:	e002      	b.n	800fb5a <_printf_i+0x1ca>
 800fb54:	0670      	lsls	r0, r6, #25
 800fb56:	d5fb      	bpl.n	800fb50 <_printf_i+0x1c0>
 800fb58:	8019      	strh	r1, [r3, #0]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	6123      	str	r3, [r4, #16]
 800fb5e:	4615      	mov	r5, r2
 800fb60:	e7bc      	b.n	800fadc <_printf_i+0x14c>
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	1d1a      	adds	r2, r3, #4
 800fb66:	602a      	str	r2, [r5, #0]
 800fb68:	681d      	ldr	r5, [r3, #0]
 800fb6a:	6862      	ldr	r2, [r4, #4]
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f7f0 fb2e 	bl	80001d0 <memchr>
 800fb74:	b108      	cbz	r0, 800fb7a <_printf_i+0x1ea>
 800fb76:	1b40      	subs	r0, r0, r5
 800fb78:	6060      	str	r0, [r4, #4]
 800fb7a:	6863      	ldr	r3, [r4, #4]
 800fb7c:	6123      	str	r3, [r4, #16]
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb84:	e7aa      	b.n	800fadc <_printf_i+0x14c>
 800fb86:	6923      	ldr	r3, [r4, #16]
 800fb88:	462a      	mov	r2, r5
 800fb8a:	4649      	mov	r1, r9
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	47d0      	blx	sl
 800fb90:	3001      	adds	r0, #1
 800fb92:	d0ad      	beq.n	800faf0 <_printf_i+0x160>
 800fb94:	6823      	ldr	r3, [r4, #0]
 800fb96:	079b      	lsls	r3, r3, #30
 800fb98:	d413      	bmi.n	800fbc2 <_printf_i+0x232>
 800fb9a:	68e0      	ldr	r0, [r4, #12]
 800fb9c:	9b03      	ldr	r3, [sp, #12]
 800fb9e:	4298      	cmp	r0, r3
 800fba0:	bfb8      	it	lt
 800fba2:	4618      	movlt	r0, r3
 800fba4:	e7a6      	b.n	800faf4 <_printf_i+0x164>
 800fba6:	2301      	movs	r3, #1
 800fba8:	4632      	mov	r2, r6
 800fbaa:	4649      	mov	r1, r9
 800fbac:	4640      	mov	r0, r8
 800fbae:	47d0      	blx	sl
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	d09d      	beq.n	800faf0 <_printf_i+0x160>
 800fbb4:	3501      	adds	r5, #1
 800fbb6:	68e3      	ldr	r3, [r4, #12]
 800fbb8:	9903      	ldr	r1, [sp, #12]
 800fbba:	1a5b      	subs	r3, r3, r1
 800fbbc:	42ab      	cmp	r3, r5
 800fbbe:	dcf2      	bgt.n	800fba6 <_printf_i+0x216>
 800fbc0:	e7eb      	b.n	800fb9a <_printf_i+0x20a>
 800fbc2:	2500      	movs	r5, #0
 800fbc4:	f104 0619 	add.w	r6, r4, #25
 800fbc8:	e7f5      	b.n	800fbb6 <_printf_i+0x226>
 800fbca:	bf00      	nop
 800fbcc:	08015305 	.word	0x08015305
 800fbd0:	08015316 	.word	0x08015316

0800fbd4 <_scanf_float>:
 800fbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd8:	b087      	sub	sp, #28
 800fbda:	4617      	mov	r7, r2
 800fbdc:	9303      	str	r3, [sp, #12]
 800fbde:	688b      	ldr	r3, [r1, #8]
 800fbe0:	1e5a      	subs	r2, r3, #1
 800fbe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fbe6:	bf83      	ittte	hi
 800fbe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fbec:	195b      	addhi	r3, r3, r5
 800fbee:	9302      	strhi	r3, [sp, #8]
 800fbf0:	2300      	movls	r3, #0
 800fbf2:	bf86      	itte	hi
 800fbf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fbf8:	608b      	strhi	r3, [r1, #8]
 800fbfa:	9302      	strls	r3, [sp, #8]
 800fbfc:	680b      	ldr	r3, [r1, #0]
 800fbfe:	468b      	mov	fp, r1
 800fc00:	2500      	movs	r5, #0
 800fc02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fc06:	f84b 3b1c 	str.w	r3, [fp], #28
 800fc0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fc0e:	4680      	mov	r8, r0
 800fc10:	460c      	mov	r4, r1
 800fc12:	465e      	mov	r6, fp
 800fc14:	46aa      	mov	sl, r5
 800fc16:	46a9      	mov	r9, r5
 800fc18:	9501      	str	r5, [sp, #4]
 800fc1a:	68a2      	ldr	r2, [r4, #8]
 800fc1c:	b152      	cbz	r2, 800fc34 <_scanf_float+0x60>
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b4e      	cmp	r3, #78	; 0x4e
 800fc24:	d864      	bhi.n	800fcf0 <_scanf_float+0x11c>
 800fc26:	2b40      	cmp	r3, #64	; 0x40
 800fc28:	d83c      	bhi.n	800fca4 <_scanf_float+0xd0>
 800fc2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fc2e:	b2c8      	uxtb	r0, r1
 800fc30:	280e      	cmp	r0, #14
 800fc32:	d93a      	bls.n	800fcaa <_scanf_float+0xd6>
 800fc34:	f1b9 0f00 	cmp.w	r9, #0
 800fc38:	d003      	beq.n	800fc42 <_scanf_float+0x6e>
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc40:	6023      	str	r3, [r4, #0]
 800fc42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc46:	f1ba 0f01 	cmp.w	sl, #1
 800fc4a:	f200 8113 	bhi.w	800fe74 <_scanf_float+0x2a0>
 800fc4e:	455e      	cmp	r6, fp
 800fc50:	f200 8105 	bhi.w	800fe5e <_scanf_float+0x28a>
 800fc54:	2501      	movs	r5, #1
 800fc56:	4628      	mov	r0, r5
 800fc58:	b007      	add	sp, #28
 800fc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fc62:	2a0d      	cmp	r2, #13
 800fc64:	d8e6      	bhi.n	800fc34 <_scanf_float+0x60>
 800fc66:	a101      	add	r1, pc, #4	; (adr r1, 800fc6c <_scanf_float+0x98>)
 800fc68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fc6c:	0800fdab 	.word	0x0800fdab
 800fc70:	0800fc35 	.word	0x0800fc35
 800fc74:	0800fc35 	.word	0x0800fc35
 800fc78:	0800fc35 	.word	0x0800fc35
 800fc7c:	0800fe0b 	.word	0x0800fe0b
 800fc80:	0800fde3 	.word	0x0800fde3
 800fc84:	0800fc35 	.word	0x0800fc35
 800fc88:	0800fc35 	.word	0x0800fc35
 800fc8c:	0800fdb9 	.word	0x0800fdb9
 800fc90:	0800fc35 	.word	0x0800fc35
 800fc94:	0800fc35 	.word	0x0800fc35
 800fc98:	0800fc35 	.word	0x0800fc35
 800fc9c:	0800fc35 	.word	0x0800fc35
 800fca0:	0800fd71 	.word	0x0800fd71
 800fca4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fca8:	e7db      	b.n	800fc62 <_scanf_float+0x8e>
 800fcaa:	290e      	cmp	r1, #14
 800fcac:	d8c2      	bhi.n	800fc34 <_scanf_float+0x60>
 800fcae:	a001      	add	r0, pc, #4	; (adr r0, 800fcb4 <_scanf_float+0xe0>)
 800fcb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fcb4:	0800fd63 	.word	0x0800fd63
 800fcb8:	0800fc35 	.word	0x0800fc35
 800fcbc:	0800fd63 	.word	0x0800fd63
 800fcc0:	0800fdf7 	.word	0x0800fdf7
 800fcc4:	0800fc35 	.word	0x0800fc35
 800fcc8:	0800fd11 	.word	0x0800fd11
 800fccc:	0800fd4d 	.word	0x0800fd4d
 800fcd0:	0800fd4d 	.word	0x0800fd4d
 800fcd4:	0800fd4d 	.word	0x0800fd4d
 800fcd8:	0800fd4d 	.word	0x0800fd4d
 800fcdc:	0800fd4d 	.word	0x0800fd4d
 800fce0:	0800fd4d 	.word	0x0800fd4d
 800fce4:	0800fd4d 	.word	0x0800fd4d
 800fce8:	0800fd4d 	.word	0x0800fd4d
 800fcec:	0800fd4d 	.word	0x0800fd4d
 800fcf0:	2b6e      	cmp	r3, #110	; 0x6e
 800fcf2:	d809      	bhi.n	800fd08 <_scanf_float+0x134>
 800fcf4:	2b60      	cmp	r3, #96	; 0x60
 800fcf6:	d8b2      	bhi.n	800fc5e <_scanf_float+0x8a>
 800fcf8:	2b54      	cmp	r3, #84	; 0x54
 800fcfa:	d077      	beq.n	800fdec <_scanf_float+0x218>
 800fcfc:	2b59      	cmp	r3, #89	; 0x59
 800fcfe:	d199      	bne.n	800fc34 <_scanf_float+0x60>
 800fd00:	2d07      	cmp	r5, #7
 800fd02:	d197      	bne.n	800fc34 <_scanf_float+0x60>
 800fd04:	2508      	movs	r5, #8
 800fd06:	e029      	b.n	800fd5c <_scanf_float+0x188>
 800fd08:	2b74      	cmp	r3, #116	; 0x74
 800fd0a:	d06f      	beq.n	800fdec <_scanf_float+0x218>
 800fd0c:	2b79      	cmp	r3, #121	; 0x79
 800fd0e:	e7f6      	b.n	800fcfe <_scanf_float+0x12a>
 800fd10:	6821      	ldr	r1, [r4, #0]
 800fd12:	05c8      	lsls	r0, r1, #23
 800fd14:	d51a      	bpl.n	800fd4c <_scanf_float+0x178>
 800fd16:	9b02      	ldr	r3, [sp, #8]
 800fd18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fd1c:	6021      	str	r1, [r4, #0]
 800fd1e:	f109 0901 	add.w	r9, r9, #1
 800fd22:	b11b      	cbz	r3, 800fd2c <_scanf_float+0x158>
 800fd24:	3b01      	subs	r3, #1
 800fd26:	3201      	adds	r2, #1
 800fd28:	9302      	str	r3, [sp, #8]
 800fd2a:	60a2      	str	r2, [r4, #8]
 800fd2c:	68a3      	ldr	r3, [r4, #8]
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	60a3      	str	r3, [r4, #8]
 800fd32:	6923      	ldr	r3, [r4, #16]
 800fd34:	3301      	adds	r3, #1
 800fd36:	6123      	str	r3, [r4, #16]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	607b      	str	r3, [r7, #4]
 800fd40:	f340 8084 	ble.w	800fe4c <_scanf_float+0x278>
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	3301      	adds	r3, #1
 800fd48:	603b      	str	r3, [r7, #0]
 800fd4a:	e766      	b.n	800fc1a <_scanf_float+0x46>
 800fd4c:	eb1a 0f05 	cmn.w	sl, r5
 800fd50:	f47f af70 	bne.w	800fc34 <_scanf_float+0x60>
 800fd54:	6822      	ldr	r2, [r4, #0]
 800fd56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fd5a:	6022      	str	r2, [r4, #0]
 800fd5c:	f806 3b01 	strb.w	r3, [r6], #1
 800fd60:	e7e4      	b.n	800fd2c <_scanf_float+0x158>
 800fd62:	6822      	ldr	r2, [r4, #0]
 800fd64:	0610      	lsls	r0, r2, #24
 800fd66:	f57f af65 	bpl.w	800fc34 <_scanf_float+0x60>
 800fd6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd6e:	e7f4      	b.n	800fd5a <_scanf_float+0x186>
 800fd70:	f1ba 0f00 	cmp.w	sl, #0
 800fd74:	d10e      	bne.n	800fd94 <_scanf_float+0x1c0>
 800fd76:	f1b9 0f00 	cmp.w	r9, #0
 800fd7a:	d10e      	bne.n	800fd9a <_scanf_float+0x1c6>
 800fd7c:	6822      	ldr	r2, [r4, #0]
 800fd7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fd82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fd86:	d108      	bne.n	800fd9a <_scanf_float+0x1c6>
 800fd88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd8c:	6022      	str	r2, [r4, #0]
 800fd8e:	f04f 0a01 	mov.w	sl, #1
 800fd92:	e7e3      	b.n	800fd5c <_scanf_float+0x188>
 800fd94:	f1ba 0f02 	cmp.w	sl, #2
 800fd98:	d055      	beq.n	800fe46 <_scanf_float+0x272>
 800fd9a:	2d01      	cmp	r5, #1
 800fd9c:	d002      	beq.n	800fda4 <_scanf_float+0x1d0>
 800fd9e:	2d04      	cmp	r5, #4
 800fda0:	f47f af48 	bne.w	800fc34 <_scanf_float+0x60>
 800fda4:	3501      	adds	r5, #1
 800fda6:	b2ed      	uxtb	r5, r5
 800fda8:	e7d8      	b.n	800fd5c <_scanf_float+0x188>
 800fdaa:	f1ba 0f01 	cmp.w	sl, #1
 800fdae:	f47f af41 	bne.w	800fc34 <_scanf_float+0x60>
 800fdb2:	f04f 0a02 	mov.w	sl, #2
 800fdb6:	e7d1      	b.n	800fd5c <_scanf_float+0x188>
 800fdb8:	b97d      	cbnz	r5, 800fdda <_scanf_float+0x206>
 800fdba:	f1b9 0f00 	cmp.w	r9, #0
 800fdbe:	f47f af3c 	bne.w	800fc3a <_scanf_float+0x66>
 800fdc2:	6822      	ldr	r2, [r4, #0]
 800fdc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fdc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fdcc:	f47f af39 	bne.w	800fc42 <_scanf_float+0x6e>
 800fdd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fdd4:	6022      	str	r2, [r4, #0]
 800fdd6:	2501      	movs	r5, #1
 800fdd8:	e7c0      	b.n	800fd5c <_scanf_float+0x188>
 800fdda:	2d03      	cmp	r5, #3
 800fddc:	d0e2      	beq.n	800fda4 <_scanf_float+0x1d0>
 800fdde:	2d05      	cmp	r5, #5
 800fde0:	e7de      	b.n	800fda0 <_scanf_float+0x1cc>
 800fde2:	2d02      	cmp	r5, #2
 800fde4:	f47f af26 	bne.w	800fc34 <_scanf_float+0x60>
 800fde8:	2503      	movs	r5, #3
 800fdea:	e7b7      	b.n	800fd5c <_scanf_float+0x188>
 800fdec:	2d06      	cmp	r5, #6
 800fdee:	f47f af21 	bne.w	800fc34 <_scanf_float+0x60>
 800fdf2:	2507      	movs	r5, #7
 800fdf4:	e7b2      	b.n	800fd5c <_scanf_float+0x188>
 800fdf6:	6822      	ldr	r2, [r4, #0]
 800fdf8:	0591      	lsls	r1, r2, #22
 800fdfa:	f57f af1b 	bpl.w	800fc34 <_scanf_float+0x60>
 800fdfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fe02:	6022      	str	r2, [r4, #0]
 800fe04:	f8cd 9004 	str.w	r9, [sp, #4]
 800fe08:	e7a8      	b.n	800fd5c <_scanf_float+0x188>
 800fe0a:	6822      	ldr	r2, [r4, #0]
 800fe0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fe10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fe14:	d006      	beq.n	800fe24 <_scanf_float+0x250>
 800fe16:	0550      	lsls	r0, r2, #21
 800fe18:	f57f af0c 	bpl.w	800fc34 <_scanf_float+0x60>
 800fe1c:	f1b9 0f00 	cmp.w	r9, #0
 800fe20:	f43f af0f 	beq.w	800fc42 <_scanf_float+0x6e>
 800fe24:	0591      	lsls	r1, r2, #22
 800fe26:	bf58      	it	pl
 800fe28:	9901      	ldrpl	r1, [sp, #4]
 800fe2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe2e:	bf58      	it	pl
 800fe30:	eba9 0101 	subpl.w	r1, r9, r1
 800fe34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fe38:	bf58      	it	pl
 800fe3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fe3e:	6022      	str	r2, [r4, #0]
 800fe40:	f04f 0900 	mov.w	r9, #0
 800fe44:	e78a      	b.n	800fd5c <_scanf_float+0x188>
 800fe46:	f04f 0a03 	mov.w	sl, #3
 800fe4a:	e787      	b.n	800fd5c <_scanf_float+0x188>
 800fe4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe50:	4639      	mov	r1, r7
 800fe52:	4640      	mov	r0, r8
 800fe54:	4798      	blx	r3
 800fe56:	2800      	cmp	r0, #0
 800fe58:	f43f aedf 	beq.w	800fc1a <_scanf_float+0x46>
 800fe5c:	e6ea      	b.n	800fc34 <_scanf_float+0x60>
 800fe5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe66:	463a      	mov	r2, r7
 800fe68:	4640      	mov	r0, r8
 800fe6a:	4798      	blx	r3
 800fe6c:	6923      	ldr	r3, [r4, #16]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	6123      	str	r3, [r4, #16]
 800fe72:	e6ec      	b.n	800fc4e <_scanf_float+0x7a>
 800fe74:	1e6b      	subs	r3, r5, #1
 800fe76:	2b06      	cmp	r3, #6
 800fe78:	d825      	bhi.n	800fec6 <_scanf_float+0x2f2>
 800fe7a:	2d02      	cmp	r5, #2
 800fe7c:	d836      	bhi.n	800feec <_scanf_float+0x318>
 800fe7e:	455e      	cmp	r6, fp
 800fe80:	f67f aee8 	bls.w	800fc54 <_scanf_float+0x80>
 800fe84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe8c:	463a      	mov	r2, r7
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4798      	blx	r3
 800fe92:	6923      	ldr	r3, [r4, #16]
 800fe94:	3b01      	subs	r3, #1
 800fe96:	6123      	str	r3, [r4, #16]
 800fe98:	e7f1      	b.n	800fe7e <_scanf_float+0x2aa>
 800fe9a:	9802      	ldr	r0, [sp, #8]
 800fe9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fea0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fea4:	9002      	str	r0, [sp, #8]
 800fea6:	463a      	mov	r2, r7
 800fea8:	4640      	mov	r0, r8
 800feaa:	4798      	blx	r3
 800feac:	6923      	ldr	r3, [r4, #16]
 800feae:	3b01      	subs	r3, #1
 800feb0:	6123      	str	r3, [r4, #16]
 800feb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800feb6:	fa5f fa8a 	uxtb.w	sl, sl
 800feba:	f1ba 0f02 	cmp.w	sl, #2
 800febe:	d1ec      	bne.n	800fe9a <_scanf_float+0x2c6>
 800fec0:	3d03      	subs	r5, #3
 800fec2:	b2ed      	uxtb	r5, r5
 800fec4:	1b76      	subs	r6, r6, r5
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	05da      	lsls	r2, r3, #23
 800feca:	d52f      	bpl.n	800ff2c <_scanf_float+0x358>
 800fecc:	055b      	lsls	r3, r3, #21
 800fece:	d510      	bpl.n	800fef2 <_scanf_float+0x31e>
 800fed0:	455e      	cmp	r6, fp
 800fed2:	f67f aebf 	bls.w	800fc54 <_scanf_float+0x80>
 800fed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800feda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fede:	463a      	mov	r2, r7
 800fee0:	4640      	mov	r0, r8
 800fee2:	4798      	blx	r3
 800fee4:	6923      	ldr	r3, [r4, #16]
 800fee6:	3b01      	subs	r3, #1
 800fee8:	6123      	str	r3, [r4, #16]
 800feea:	e7f1      	b.n	800fed0 <_scanf_float+0x2fc>
 800feec:	46aa      	mov	sl, r5
 800feee:	9602      	str	r6, [sp, #8]
 800fef0:	e7df      	b.n	800feb2 <_scanf_float+0x2de>
 800fef2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fef6:	6923      	ldr	r3, [r4, #16]
 800fef8:	2965      	cmp	r1, #101	; 0x65
 800fefa:	f103 33ff 	add.w	r3, r3, #4294967295
 800fefe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ff02:	6123      	str	r3, [r4, #16]
 800ff04:	d00c      	beq.n	800ff20 <_scanf_float+0x34c>
 800ff06:	2945      	cmp	r1, #69	; 0x45
 800ff08:	d00a      	beq.n	800ff20 <_scanf_float+0x34c>
 800ff0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff0e:	463a      	mov	r2, r7
 800ff10:	4640      	mov	r0, r8
 800ff12:	4798      	blx	r3
 800ff14:	6923      	ldr	r3, [r4, #16]
 800ff16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	1eb5      	subs	r5, r6, #2
 800ff1e:	6123      	str	r3, [r4, #16]
 800ff20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff24:	463a      	mov	r2, r7
 800ff26:	4640      	mov	r0, r8
 800ff28:	4798      	blx	r3
 800ff2a:	462e      	mov	r6, r5
 800ff2c:	6825      	ldr	r5, [r4, #0]
 800ff2e:	f015 0510 	ands.w	r5, r5, #16
 800ff32:	d158      	bne.n	800ffe6 <_scanf_float+0x412>
 800ff34:	7035      	strb	r5, [r6, #0]
 800ff36:	6823      	ldr	r3, [r4, #0]
 800ff38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ff3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff40:	d11c      	bne.n	800ff7c <_scanf_float+0x3a8>
 800ff42:	9b01      	ldr	r3, [sp, #4]
 800ff44:	454b      	cmp	r3, r9
 800ff46:	eba3 0209 	sub.w	r2, r3, r9
 800ff4a:	d124      	bne.n	800ff96 <_scanf_float+0x3c2>
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	4659      	mov	r1, fp
 800ff50:	4640      	mov	r0, r8
 800ff52:	f002 fe1d 	bl	8012b90 <_strtod_r>
 800ff56:	9b03      	ldr	r3, [sp, #12]
 800ff58:	6821      	ldr	r1, [r4, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f011 0f02 	tst.w	r1, #2
 800ff60:	ec57 6b10 	vmov	r6, r7, d0
 800ff64:	f103 0204 	add.w	r2, r3, #4
 800ff68:	d020      	beq.n	800ffac <_scanf_float+0x3d8>
 800ff6a:	9903      	ldr	r1, [sp, #12]
 800ff6c:	600a      	str	r2, [r1, #0]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	e9c3 6700 	strd	r6, r7, [r3]
 800ff74:	68e3      	ldr	r3, [r4, #12]
 800ff76:	3301      	adds	r3, #1
 800ff78:	60e3      	str	r3, [r4, #12]
 800ff7a:	e66c      	b.n	800fc56 <_scanf_float+0x82>
 800ff7c:	9b04      	ldr	r3, [sp, #16]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d0e4      	beq.n	800ff4c <_scanf_float+0x378>
 800ff82:	9905      	ldr	r1, [sp, #20]
 800ff84:	230a      	movs	r3, #10
 800ff86:	462a      	mov	r2, r5
 800ff88:	3101      	adds	r1, #1
 800ff8a:	4640      	mov	r0, r8
 800ff8c:	f002 fe88 	bl	8012ca0 <_strtol_r>
 800ff90:	9b04      	ldr	r3, [sp, #16]
 800ff92:	9e05      	ldr	r6, [sp, #20]
 800ff94:	1ac2      	subs	r2, r0, r3
 800ff96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ff9a:	429e      	cmp	r6, r3
 800ff9c:	bf28      	it	cs
 800ff9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ffa2:	4912      	ldr	r1, [pc, #72]	; (800ffec <_scanf_float+0x418>)
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	f000 f967 	bl	8010278 <siprintf>
 800ffaa:	e7cf      	b.n	800ff4c <_scanf_float+0x378>
 800ffac:	f011 0f04 	tst.w	r1, #4
 800ffb0:	9903      	ldr	r1, [sp, #12]
 800ffb2:	600a      	str	r2, [r1, #0]
 800ffb4:	d1db      	bne.n	800ff6e <_scanf_float+0x39a>
 800ffb6:	f8d3 8000 	ldr.w	r8, [r3]
 800ffba:	ee10 2a10 	vmov	r2, s0
 800ffbe:	ee10 0a10 	vmov	r0, s0
 800ffc2:	463b      	mov	r3, r7
 800ffc4:	4639      	mov	r1, r7
 800ffc6:	f7f0 fdb1 	bl	8000b2c <__aeabi_dcmpun>
 800ffca:	b128      	cbz	r0, 800ffd8 <_scanf_float+0x404>
 800ffcc:	4808      	ldr	r0, [pc, #32]	; (800fff0 <_scanf_float+0x41c>)
 800ffce:	f000 fb9b 	bl	8010708 <nanf>
 800ffd2:	ed88 0a00 	vstr	s0, [r8]
 800ffd6:	e7cd      	b.n	800ff74 <_scanf_float+0x3a0>
 800ffd8:	4630      	mov	r0, r6
 800ffda:	4639      	mov	r1, r7
 800ffdc:	f7f0 fe04 	bl	8000be8 <__aeabi_d2f>
 800ffe0:	f8c8 0000 	str.w	r0, [r8]
 800ffe4:	e7c6      	b.n	800ff74 <_scanf_float+0x3a0>
 800ffe6:	2500      	movs	r5, #0
 800ffe8:	e635      	b.n	800fc56 <_scanf_float+0x82>
 800ffea:	bf00      	nop
 800ffec:	08015327 	.word	0x08015327
 800fff0:	080152f2 	.word	0x080152f2

0800fff4 <std>:
 800fff4:	2300      	movs	r3, #0
 800fff6:	b510      	push	{r4, lr}
 800fff8:	4604      	mov	r4, r0
 800fffa:	e9c0 3300 	strd	r3, r3, [r0]
 800fffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010002:	6083      	str	r3, [r0, #8]
 8010004:	8181      	strh	r1, [r0, #12]
 8010006:	6643      	str	r3, [r0, #100]	; 0x64
 8010008:	81c2      	strh	r2, [r0, #14]
 801000a:	6183      	str	r3, [r0, #24]
 801000c:	4619      	mov	r1, r3
 801000e:	2208      	movs	r2, #8
 8010010:	305c      	adds	r0, #92	; 0x5c
 8010012:	f000 fa53 	bl	80104bc <memset>
 8010016:	4b0d      	ldr	r3, [pc, #52]	; (801004c <std+0x58>)
 8010018:	6263      	str	r3, [r4, #36]	; 0x24
 801001a:	4b0d      	ldr	r3, [pc, #52]	; (8010050 <std+0x5c>)
 801001c:	62a3      	str	r3, [r4, #40]	; 0x28
 801001e:	4b0d      	ldr	r3, [pc, #52]	; (8010054 <std+0x60>)
 8010020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010022:	4b0d      	ldr	r3, [pc, #52]	; (8010058 <std+0x64>)
 8010024:	6323      	str	r3, [r4, #48]	; 0x30
 8010026:	4b0d      	ldr	r3, [pc, #52]	; (801005c <std+0x68>)
 8010028:	6224      	str	r4, [r4, #32]
 801002a:	429c      	cmp	r4, r3
 801002c:	d006      	beq.n	801003c <std+0x48>
 801002e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010032:	4294      	cmp	r4, r2
 8010034:	d002      	beq.n	801003c <std+0x48>
 8010036:	33d0      	adds	r3, #208	; 0xd0
 8010038:	429c      	cmp	r4, r3
 801003a:	d105      	bne.n	8010048 <std+0x54>
 801003c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010044:	f000 bb4e 	b.w	80106e4 <__retarget_lock_init_recursive>
 8010048:	bd10      	pop	{r4, pc}
 801004a:	bf00      	nop
 801004c:	080102b9 	.word	0x080102b9
 8010050:	080102db 	.word	0x080102db
 8010054:	08010313 	.word	0x08010313
 8010058:	08010337 	.word	0x08010337
 801005c:	200038c4 	.word	0x200038c4

08010060 <stdio_exit_handler>:
 8010060:	4a02      	ldr	r2, [pc, #8]	; (801006c <stdio_exit_handler+0xc>)
 8010062:	4903      	ldr	r1, [pc, #12]	; (8010070 <stdio_exit_handler+0x10>)
 8010064:	4803      	ldr	r0, [pc, #12]	; (8010074 <stdio_exit_handler+0x14>)
 8010066:	f000 b87b 	b.w	8010160 <_fwalk_sglue>
 801006a:	bf00      	nop
 801006c:	20000038 	.word	0x20000038
 8010070:	080132e9 	.word	0x080132e9
 8010074:	20000044 	.word	0x20000044

08010078 <cleanup_stdio>:
 8010078:	6841      	ldr	r1, [r0, #4]
 801007a:	4b0c      	ldr	r3, [pc, #48]	; (80100ac <cleanup_stdio+0x34>)
 801007c:	4299      	cmp	r1, r3
 801007e:	b510      	push	{r4, lr}
 8010080:	4604      	mov	r4, r0
 8010082:	d001      	beq.n	8010088 <cleanup_stdio+0x10>
 8010084:	f003 f930 	bl	80132e8 <_fflush_r>
 8010088:	68a1      	ldr	r1, [r4, #8]
 801008a:	4b09      	ldr	r3, [pc, #36]	; (80100b0 <cleanup_stdio+0x38>)
 801008c:	4299      	cmp	r1, r3
 801008e:	d002      	beq.n	8010096 <cleanup_stdio+0x1e>
 8010090:	4620      	mov	r0, r4
 8010092:	f003 f929 	bl	80132e8 <_fflush_r>
 8010096:	68e1      	ldr	r1, [r4, #12]
 8010098:	4b06      	ldr	r3, [pc, #24]	; (80100b4 <cleanup_stdio+0x3c>)
 801009a:	4299      	cmp	r1, r3
 801009c:	d004      	beq.n	80100a8 <cleanup_stdio+0x30>
 801009e:	4620      	mov	r0, r4
 80100a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a4:	f003 b920 	b.w	80132e8 <_fflush_r>
 80100a8:	bd10      	pop	{r4, pc}
 80100aa:	bf00      	nop
 80100ac:	200038c4 	.word	0x200038c4
 80100b0:	2000392c 	.word	0x2000392c
 80100b4:	20003994 	.word	0x20003994

080100b8 <global_stdio_init.part.0>:
 80100b8:	b510      	push	{r4, lr}
 80100ba:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <global_stdio_init.part.0+0x30>)
 80100bc:	4c0b      	ldr	r4, [pc, #44]	; (80100ec <global_stdio_init.part.0+0x34>)
 80100be:	4a0c      	ldr	r2, [pc, #48]	; (80100f0 <global_stdio_init.part.0+0x38>)
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	4620      	mov	r0, r4
 80100c4:	2200      	movs	r2, #0
 80100c6:	2104      	movs	r1, #4
 80100c8:	f7ff ff94 	bl	800fff4 <std>
 80100cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80100d0:	2201      	movs	r2, #1
 80100d2:	2109      	movs	r1, #9
 80100d4:	f7ff ff8e 	bl	800fff4 <std>
 80100d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80100dc:	2202      	movs	r2, #2
 80100de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100e2:	2112      	movs	r1, #18
 80100e4:	f7ff bf86 	b.w	800fff4 <std>
 80100e8:	200039fc 	.word	0x200039fc
 80100ec:	200038c4 	.word	0x200038c4
 80100f0:	08010061 	.word	0x08010061

080100f4 <__sfp_lock_acquire>:
 80100f4:	4801      	ldr	r0, [pc, #4]	; (80100fc <__sfp_lock_acquire+0x8>)
 80100f6:	f000 baf6 	b.w	80106e6 <__retarget_lock_acquire_recursive>
 80100fa:	bf00      	nop
 80100fc:	20003a05 	.word	0x20003a05

08010100 <__sfp_lock_release>:
 8010100:	4801      	ldr	r0, [pc, #4]	; (8010108 <__sfp_lock_release+0x8>)
 8010102:	f000 baf1 	b.w	80106e8 <__retarget_lock_release_recursive>
 8010106:	bf00      	nop
 8010108:	20003a05 	.word	0x20003a05

0801010c <__sinit>:
 801010c:	b510      	push	{r4, lr}
 801010e:	4604      	mov	r4, r0
 8010110:	f7ff fff0 	bl	80100f4 <__sfp_lock_acquire>
 8010114:	6a23      	ldr	r3, [r4, #32]
 8010116:	b11b      	cbz	r3, 8010120 <__sinit+0x14>
 8010118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801011c:	f7ff bff0 	b.w	8010100 <__sfp_lock_release>
 8010120:	4b04      	ldr	r3, [pc, #16]	; (8010134 <__sinit+0x28>)
 8010122:	6223      	str	r3, [r4, #32]
 8010124:	4b04      	ldr	r3, [pc, #16]	; (8010138 <__sinit+0x2c>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1f5      	bne.n	8010118 <__sinit+0xc>
 801012c:	f7ff ffc4 	bl	80100b8 <global_stdio_init.part.0>
 8010130:	e7f2      	b.n	8010118 <__sinit+0xc>
 8010132:	bf00      	nop
 8010134:	08010079 	.word	0x08010079
 8010138:	200039fc 	.word	0x200039fc

0801013c <fiprintf>:
 801013c:	b40e      	push	{r1, r2, r3}
 801013e:	b503      	push	{r0, r1, lr}
 8010140:	4601      	mov	r1, r0
 8010142:	ab03      	add	r3, sp, #12
 8010144:	4805      	ldr	r0, [pc, #20]	; (801015c <fiprintf+0x20>)
 8010146:	f853 2b04 	ldr.w	r2, [r3], #4
 801014a:	6800      	ldr	r0, [r0, #0]
 801014c:	9301      	str	r3, [sp, #4]
 801014e:	f002 ff2b 	bl	8012fa8 <_vfiprintf_r>
 8010152:	b002      	add	sp, #8
 8010154:	f85d eb04 	ldr.w	lr, [sp], #4
 8010158:	b003      	add	sp, #12
 801015a:	4770      	bx	lr
 801015c:	20000090 	.word	0x20000090

08010160 <_fwalk_sglue>:
 8010160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010164:	4607      	mov	r7, r0
 8010166:	4688      	mov	r8, r1
 8010168:	4614      	mov	r4, r2
 801016a:	2600      	movs	r6, #0
 801016c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010170:	f1b9 0901 	subs.w	r9, r9, #1
 8010174:	d505      	bpl.n	8010182 <_fwalk_sglue+0x22>
 8010176:	6824      	ldr	r4, [r4, #0]
 8010178:	2c00      	cmp	r4, #0
 801017a:	d1f7      	bne.n	801016c <_fwalk_sglue+0xc>
 801017c:	4630      	mov	r0, r6
 801017e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010182:	89ab      	ldrh	r3, [r5, #12]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d907      	bls.n	8010198 <_fwalk_sglue+0x38>
 8010188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801018c:	3301      	adds	r3, #1
 801018e:	d003      	beq.n	8010198 <_fwalk_sglue+0x38>
 8010190:	4629      	mov	r1, r5
 8010192:	4638      	mov	r0, r7
 8010194:	47c0      	blx	r8
 8010196:	4306      	orrs	r6, r0
 8010198:	3568      	adds	r5, #104	; 0x68
 801019a:	e7e9      	b.n	8010170 <_fwalk_sglue+0x10>

0801019c <iprintf>:
 801019c:	b40f      	push	{r0, r1, r2, r3}
 801019e:	b507      	push	{r0, r1, r2, lr}
 80101a0:	4906      	ldr	r1, [pc, #24]	; (80101bc <iprintf+0x20>)
 80101a2:	ab04      	add	r3, sp, #16
 80101a4:	6808      	ldr	r0, [r1, #0]
 80101a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80101aa:	6881      	ldr	r1, [r0, #8]
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	f002 fefb 	bl	8012fa8 <_vfiprintf_r>
 80101b2:	b003      	add	sp, #12
 80101b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80101b8:	b004      	add	sp, #16
 80101ba:	4770      	bx	lr
 80101bc:	20000090 	.word	0x20000090

080101c0 <_puts_r>:
 80101c0:	6a03      	ldr	r3, [r0, #32]
 80101c2:	b570      	push	{r4, r5, r6, lr}
 80101c4:	6884      	ldr	r4, [r0, #8]
 80101c6:	4605      	mov	r5, r0
 80101c8:	460e      	mov	r6, r1
 80101ca:	b90b      	cbnz	r3, 80101d0 <_puts_r+0x10>
 80101cc:	f7ff ff9e 	bl	801010c <__sinit>
 80101d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101d2:	07db      	lsls	r3, r3, #31
 80101d4:	d405      	bmi.n	80101e2 <_puts_r+0x22>
 80101d6:	89a3      	ldrh	r3, [r4, #12]
 80101d8:	0598      	lsls	r0, r3, #22
 80101da:	d402      	bmi.n	80101e2 <_puts_r+0x22>
 80101dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101de:	f000 fa82 	bl	80106e6 <__retarget_lock_acquire_recursive>
 80101e2:	89a3      	ldrh	r3, [r4, #12]
 80101e4:	0719      	lsls	r1, r3, #28
 80101e6:	d513      	bpl.n	8010210 <_puts_r+0x50>
 80101e8:	6923      	ldr	r3, [r4, #16]
 80101ea:	b18b      	cbz	r3, 8010210 <_puts_r+0x50>
 80101ec:	3e01      	subs	r6, #1
 80101ee:	68a3      	ldr	r3, [r4, #8]
 80101f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80101f4:	3b01      	subs	r3, #1
 80101f6:	60a3      	str	r3, [r4, #8]
 80101f8:	b9e9      	cbnz	r1, 8010236 <_puts_r+0x76>
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	da2e      	bge.n	801025c <_puts_r+0x9c>
 80101fe:	4622      	mov	r2, r4
 8010200:	210a      	movs	r1, #10
 8010202:	4628      	mov	r0, r5
 8010204:	f000 f89b 	bl	801033e <__swbuf_r>
 8010208:	3001      	adds	r0, #1
 801020a:	d007      	beq.n	801021c <_puts_r+0x5c>
 801020c:	250a      	movs	r5, #10
 801020e:	e007      	b.n	8010220 <_puts_r+0x60>
 8010210:	4621      	mov	r1, r4
 8010212:	4628      	mov	r0, r5
 8010214:	f000 f8d0 	bl	80103b8 <__swsetup_r>
 8010218:	2800      	cmp	r0, #0
 801021a:	d0e7      	beq.n	80101ec <_puts_r+0x2c>
 801021c:	f04f 35ff 	mov.w	r5, #4294967295
 8010220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010222:	07da      	lsls	r2, r3, #31
 8010224:	d405      	bmi.n	8010232 <_puts_r+0x72>
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	059b      	lsls	r3, r3, #22
 801022a:	d402      	bmi.n	8010232 <_puts_r+0x72>
 801022c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801022e:	f000 fa5b 	bl	80106e8 <__retarget_lock_release_recursive>
 8010232:	4628      	mov	r0, r5
 8010234:	bd70      	pop	{r4, r5, r6, pc}
 8010236:	2b00      	cmp	r3, #0
 8010238:	da04      	bge.n	8010244 <_puts_r+0x84>
 801023a:	69a2      	ldr	r2, [r4, #24]
 801023c:	429a      	cmp	r2, r3
 801023e:	dc06      	bgt.n	801024e <_puts_r+0x8e>
 8010240:	290a      	cmp	r1, #10
 8010242:	d004      	beq.n	801024e <_puts_r+0x8e>
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	1c5a      	adds	r2, r3, #1
 8010248:	6022      	str	r2, [r4, #0]
 801024a:	7019      	strb	r1, [r3, #0]
 801024c:	e7cf      	b.n	80101ee <_puts_r+0x2e>
 801024e:	4622      	mov	r2, r4
 8010250:	4628      	mov	r0, r5
 8010252:	f000 f874 	bl	801033e <__swbuf_r>
 8010256:	3001      	adds	r0, #1
 8010258:	d1c9      	bne.n	80101ee <_puts_r+0x2e>
 801025a:	e7df      	b.n	801021c <_puts_r+0x5c>
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	250a      	movs	r5, #10
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	6022      	str	r2, [r4, #0]
 8010264:	701d      	strb	r5, [r3, #0]
 8010266:	e7db      	b.n	8010220 <_puts_r+0x60>

08010268 <puts>:
 8010268:	4b02      	ldr	r3, [pc, #8]	; (8010274 <puts+0xc>)
 801026a:	4601      	mov	r1, r0
 801026c:	6818      	ldr	r0, [r3, #0]
 801026e:	f7ff bfa7 	b.w	80101c0 <_puts_r>
 8010272:	bf00      	nop
 8010274:	20000090 	.word	0x20000090

08010278 <siprintf>:
 8010278:	b40e      	push	{r1, r2, r3}
 801027a:	b500      	push	{lr}
 801027c:	b09c      	sub	sp, #112	; 0x70
 801027e:	ab1d      	add	r3, sp, #116	; 0x74
 8010280:	9002      	str	r0, [sp, #8]
 8010282:	9006      	str	r0, [sp, #24]
 8010284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010288:	4809      	ldr	r0, [pc, #36]	; (80102b0 <siprintf+0x38>)
 801028a:	9107      	str	r1, [sp, #28]
 801028c:	9104      	str	r1, [sp, #16]
 801028e:	4909      	ldr	r1, [pc, #36]	; (80102b4 <siprintf+0x3c>)
 8010290:	f853 2b04 	ldr.w	r2, [r3], #4
 8010294:	9105      	str	r1, [sp, #20]
 8010296:	6800      	ldr	r0, [r0, #0]
 8010298:	9301      	str	r3, [sp, #4]
 801029a:	a902      	add	r1, sp, #8
 801029c:	f002 fd5c 	bl	8012d58 <_svfiprintf_r>
 80102a0:	9b02      	ldr	r3, [sp, #8]
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	b01c      	add	sp, #112	; 0x70
 80102a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80102ac:	b003      	add	sp, #12
 80102ae:	4770      	bx	lr
 80102b0:	20000090 	.word	0x20000090
 80102b4:	ffff0208 	.word	0xffff0208

080102b8 <__sread>:
 80102b8:	b510      	push	{r4, lr}
 80102ba:	460c      	mov	r4, r1
 80102bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102c0:	f000 f9c2 	bl	8010648 <_read_r>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	bfab      	itete	ge
 80102c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102ca:	89a3      	ldrhlt	r3, [r4, #12]
 80102cc:	181b      	addge	r3, r3, r0
 80102ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102d2:	bfac      	ite	ge
 80102d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80102d6:	81a3      	strhlt	r3, [r4, #12]
 80102d8:	bd10      	pop	{r4, pc}

080102da <__swrite>:
 80102da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102de:	461f      	mov	r7, r3
 80102e0:	898b      	ldrh	r3, [r1, #12]
 80102e2:	05db      	lsls	r3, r3, #23
 80102e4:	4605      	mov	r5, r0
 80102e6:	460c      	mov	r4, r1
 80102e8:	4616      	mov	r6, r2
 80102ea:	d505      	bpl.n	80102f8 <__swrite+0x1e>
 80102ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102f0:	2302      	movs	r3, #2
 80102f2:	2200      	movs	r2, #0
 80102f4:	f000 f996 	bl	8010624 <_lseek_r>
 80102f8:	89a3      	ldrh	r3, [r4, #12]
 80102fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010302:	81a3      	strh	r3, [r4, #12]
 8010304:	4632      	mov	r2, r6
 8010306:	463b      	mov	r3, r7
 8010308:	4628      	mov	r0, r5
 801030a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801030e:	f000 b9ad 	b.w	801066c <_write_r>

08010312 <__sseek>:
 8010312:	b510      	push	{r4, lr}
 8010314:	460c      	mov	r4, r1
 8010316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801031a:	f000 f983 	bl	8010624 <_lseek_r>
 801031e:	1c43      	adds	r3, r0, #1
 8010320:	89a3      	ldrh	r3, [r4, #12]
 8010322:	bf15      	itete	ne
 8010324:	6560      	strne	r0, [r4, #84]	; 0x54
 8010326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801032a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801032e:	81a3      	strheq	r3, [r4, #12]
 8010330:	bf18      	it	ne
 8010332:	81a3      	strhne	r3, [r4, #12]
 8010334:	bd10      	pop	{r4, pc}

08010336 <__sclose>:
 8010336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033a:	f000 b963 	b.w	8010604 <_close_r>

0801033e <__swbuf_r>:
 801033e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010340:	460e      	mov	r6, r1
 8010342:	4614      	mov	r4, r2
 8010344:	4605      	mov	r5, r0
 8010346:	b118      	cbz	r0, 8010350 <__swbuf_r+0x12>
 8010348:	6a03      	ldr	r3, [r0, #32]
 801034a:	b90b      	cbnz	r3, 8010350 <__swbuf_r+0x12>
 801034c:	f7ff fede 	bl	801010c <__sinit>
 8010350:	69a3      	ldr	r3, [r4, #24]
 8010352:	60a3      	str	r3, [r4, #8]
 8010354:	89a3      	ldrh	r3, [r4, #12]
 8010356:	071a      	lsls	r2, r3, #28
 8010358:	d525      	bpl.n	80103a6 <__swbuf_r+0x68>
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	b31b      	cbz	r3, 80103a6 <__swbuf_r+0x68>
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	6922      	ldr	r2, [r4, #16]
 8010362:	1a98      	subs	r0, r3, r2
 8010364:	6963      	ldr	r3, [r4, #20]
 8010366:	b2f6      	uxtb	r6, r6
 8010368:	4283      	cmp	r3, r0
 801036a:	4637      	mov	r7, r6
 801036c:	dc04      	bgt.n	8010378 <__swbuf_r+0x3a>
 801036e:	4621      	mov	r1, r4
 8010370:	4628      	mov	r0, r5
 8010372:	f002 ffb9 	bl	80132e8 <_fflush_r>
 8010376:	b9e0      	cbnz	r0, 80103b2 <__swbuf_r+0x74>
 8010378:	68a3      	ldr	r3, [r4, #8]
 801037a:	3b01      	subs	r3, #1
 801037c:	60a3      	str	r3, [r4, #8]
 801037e:	6823      	ldr	r3, [r4, #0]
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	6022      	str	r2, [r4, #0]
 8010384:	701e      	strb	r6, [r3, #0]
 8010386:	6962      	ldr	r2, [r4, #20]
 8010388:	1c43      	adds	r3, r0, #1
 801038a:	429a      	cmp	r2, r3
 801038c:	d004      	beq.n	8010398 <__swbuf_r+0x5a>
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	07db      	lsls	r3, r3, #31
 8010392:	d506      	bpl.n	80103a2 <__swbuf_r+0x64>
 8010394:	2e0a      	cmp	r6, #10
 8010396:	d104      	bne.n	80103a2 <__swbuf_r+0x64>
 8010398:	4621      	mov	r1, r4
 801039a:	4628      	mov	r0, r5
 801039c:	f002 ffa4 	bl	80132e8 <_fflush_r>
 80103a0:	b938      	cbnz	r0, 80103b2 <__swbuf_r+0x74>
 80103a2:	4638      	mov	r0, r7
 80103a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a6:	4621      	mov	r1, r4
 80103a8:	4628      	mov	r0, r5
 80103aa:	f000 f805 	bl	80103b8 <__swsetup_r>
 80103ae:	2800      	cmp	r0, #0
 80103b0:	d0d5      	beq.n	801035e <__swbuf_r+0x20>
 80103b2:	f04f 37ff 	mov.w	r7, #4294967295
 80103b6:	e7f4      	b.n	80103a2 <__swbuf_r+0x64>

080103b8 <__swsetup_r>:
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	4b2a      	ldr	r3, [pc, #168]	; (8010464 <__swsetup_r+0xac>)
 80103bc:	4605      	mov	r5, r0
 80103be:	6818      	ldr	r0, [r3, #0]
 80103c0:	460c      	mov	r4, r1
 80103c2:	b118      	cbz	r0, 80103cc <__swsetup_r+0x14>
 80103c4:	6a03      	ldr	r3, [r0, #32]
 80103c6:	b90b      	cbnz	r3, 80103cc <__swsetup_r+0x14>
 80103c8:	f7ff fea0 	bl	801010c <__sinit>
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103d2:	0718      	lsls	r0, r3, #28
 80103d4:	d422      	bmi.n	801041c <__swsetup_r+0x64>
 80103d6:	06d9      	lsls	r1, r3, #27
 80103d8:	d407      	bmi.n	80103ea <__swsetup_r+0x32>
 80103da:	2309      	movs	r3, #9
 80103dc:	602b      	str	r3, [r5, #0]
 80103de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103e2:	81a3      	strh	r3, [r4, #12]
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295
 80103e8:	e034      	b.n	8010454 <__swsetup_r+0x9c>
 80103ea:	0758      	lsls	r0, r3, #29
 80103ec:	d512      	bpl.n	8010414 <__swsetup_r+0x5c>
 80103ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103f0:	b141      	cbz	r1, 8010404 <__swsetup_r+0x4c>
 80103f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103f6:	4299      	cmp	r1, r3
 80103f8:	d002      	beq.n	8010400 <__swsetup_r+0x48>
 80103fa:	4628      	mov	r0, r5
 80103fc:	f001 f80e 	bl	801141c <_free_r>
 8010400:	2300      	movs	r3, #0
 8010402:	6363      	str	r3, [r4, #52]	; 0x34
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801040a:	81a3      	strh	r3, [r4, #12]
 801040c:	2300      	movs	r3, #0
 801040e:	6063      	str	r3, [r4, #4]
 8010410:	6923      	ldr	r3, [r4, #16]
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	89a3      	ldrh	r3, [r4, #12]
 8010416:	f043 0308 	orr.w	r3, r3, #8
 801041a:	81a3      	strh	r3, [r4, #12]
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	b94b      	cbnz	r3, 8010434 <__swsetup_r+0x7c>
 8010420:	89a3      	ldrh	r3, [r4, #12]
 8010422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801042a:	d003      	beq.n	8010434 <__swsetup_r+0x7c>
 801042c:	4621      	mov	r1, r4
 801042e:	4628      	mov	r0, r5
 8010430:	f002 ffa8 	bl	8013384 <__smakebuf_r>
 8010434:	89a0      	ldrh	r0, [r4, #12]
 8010436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801043a:	f010 0301 	ands.w	r3, r0, #1
 801043e:	d00a      	beq.n	8010456 <__swsetup_r+0x9e>
 8010440:	2300      	movs	r3, #0
 8010442:	60a3      	str	r3, [r4, #8]
 8010444:	6963      	ldr	r3, [r4, #20]
 8010446:	425b      	negs	r3, r3
 8010448:	61a3      	str	r3, [r4, #24]
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	b943      	cbnz	r3, 8010460 <__swsetup_r+0xa8>
 801044e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010452:	d1c4      	bne.n	80103de <__swsetup_r+0x26>
 8010454:	bd38      	pop	{r3, r4, r5, pc}
 8010456:	0781      	lsls	r1, r0, #30
 8010458:	bf58      	it	pl
 801045a:	6963      	ldrpl	r3, [r4, #20]
 801045c:	60a3      	str	r3, [r4, #8]
 801045e:	e7f4      	b.n	801044a <__swsetup_r+0x92>
 8010460:	2000      	movs	r0, #0
 8010462:	e7f7      	b.n	8010454 <__swsetup_r+0x9c>
 8010464:	20000090 	.word	0x20000090

08010468 <memcmp>:
 8010468:	b510      	push	{r4, lr}
 801046a:	3901      	subs	r1, #1
 801046c:	4402      	add	r2, r0
 801046e:	4290      	cmp	r0, r2
 8010470:	d101      	bne.n	8010476 <memcmp+0xe>
 8010472:	2000      	movs	r0, #0
 8010474:	e005      	b.n	8010482 <memcmp+0x1a>
 8010476:	7803      	ldrb	r3, [r0, #0]
 8010478:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801047c:	42a3      	cmp	r3, r4
 801047e:	d001      	beq.n	8010484 <memcmp+0x1c>
 8010480:	1b18      	subs	r0, r3, r4
 8010482:	bd10      	pop	{r4, pc}
 8010484:	3001      	adds	r0, #1
 8010486:	e7f2      	b.n	801046e <memcmp+0x6>

08010488 <memmove>:
 8010488:	4288      	cmp	r0, r1
 801048a:	b510      	push	{r4, lr}
 801048c:	eb01 0402 	add.w	r4, r1, r2
 8010490:	d902      	bls.n	8010498 <memmove+0x10>
 8010492:	4284      	cmp	r4, r0
 8010494:	4623      	mov	r3, r4
 8010496:	d807      	bhi.n	80104a8 <memmove+0x20>
 8010498:	1e43      	subs	r3, r0, #1
 801049a:	42a1      	cmp	r1, r4
 801049c:	d008      	beq.n	80104b0 <memmove+0x28>
 801049e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104a6:	e7f8      	b.n	801049a <memmove+0x12>
 80104a8:	4402      	add	r2, r0
 80104aa:	4601      	mov	r1, r0
 80104ac:	428a      	cmp	r2, r1
 80104ae:	d100      	bne.n	80104b2 <memmove+0x2a>
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104ba:	e7f7      	b.n	80104ac <memmove+0x24>

080104bc <memset>:
 80104bc:	4402      	add	r2, r0
 80104be:	4603      	mov	r3, r0
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d100      	bne.n	80104c6 <memset+0xa>
 80104c4:	4770      	bx	lr
 80104c6:	f803 1b01 	strb.w	r1, [r3], #1
 80104ca:	e7f9      	b.n	80104c0 <memset+0x4>

080104cc <strncmp>:
 80104cc:	b510      	push	{r4, lr}
 80104ce:	b16a      	cbz	r2, 80104ec <strncmp+0x20>
 80104d0:	3901      	subs	r1, #1
 80104d2:	1884      	adds	r4, r0, r2
 80104d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80104dc:	429a      	cmp	r2, r3
 80104de:	d103      	bne.n	80104e8 <strncmp+0x1c>
 80104e0:	42a0      	cmp	r0, r4
 80104e2:	d001      	beq.n	80104e8 <strncmp+0x1c>
 80104e4:	2a00      	cmp	r2, #0
 80104e6:	d1f5      	bne.n	80104d4 <strncmp+0x8>
 80104e8:	1ad0      	subs	r0, r2, r3
 80104ea:	bd10      	pop	{r4, pc}
 80104ec:	4610      	mov	r0, r2
 80104ee:	e7fc      	b.n	80104ea <strncmp+0x1e>

080104f0 <strncpy>:
 80104f0:	b510      	push	{r4, lr}
 80104f2:	3901      	subs	r1, #1
 80104f4:	4603      	mov	r3, r0
 80104f6:	b132      	cbz	r2, 8010506 <strncpy+0x16>
 80104f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80104fc:	f803 4b01 	strb.w	r4, [r3], #1
 8010500:	3a01      	subs	r2, #1
 8010502:	2c00      	cmp	r4, #0
 8010504:	d1f7      	bne.n	80104f6 <strncpy+0x6>
 8010506:	441a      	add	r2, r3
 8010508:	2100      	movs	r1, #0
 801050a:	4293      	cmp	r3, r2
 801050c:	d100      	bne.n	8010510 <strncpy+0x20>
 801050e:	bd10      	pop	{r4, pc}
 8010510:	f803 1b01 	strb.w	r1, [r3], #1
 8010514:	e7f9      	b.n	801050a <strncpy+0x1a>
	...

08010518 <strtok>:
 8010518:	4b16      	ldr	r3, [pc, #88]	; (8010574 <strtok+0x5c>)
 801051a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801051c:	681e      	ldr	r6, [r3, #0]
 801051e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8010520:	4605      	mov	r5, r0
 8010522:	b9fc      	cbnz	r4, 8010564 <strtok+0x4c>
 8010524:	2050      	movs	r0, #80	; 0x50
 8010526:	9101      	str	r1, [sp, #4]
 8010528:	f000 ffc4 	bl	80114b4 <malloc>
 801052c:	9901      	ldr	r1, [sp, #4]
 801052e:	6470      	str	r0, [r6, #68]	; 0x44
 8010530:	4602      	mov	r2, r0
 8010532:	b920      	cbnz	r0, 801053e <strtok+0x26>
 8010534:	4b10      	ldr	r3, [pc, #64]	; (8010578 <strtok+0x60>)
 8010536:	4811      	ldr	r0, [pc, #68]	; (801057c <strtok+0x64>)
 8010538:	215b      	movs	r1, #91	; 0x5b
 801053a:	f7fe fec7 	bl	800f2cc <__assert_func>
 801053e:	e9c0 4400 	strd	r4, r4, [r0]
 8010542:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010546:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801054a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801054e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010552:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8010556:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801055a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801055e:	6184      	str	r4, [r0, #24]
 8010560:	7704      	strb	r4, [r0, #28]
 8010562:	6244      	str	r4, [r0, #36]	; 0x24
 8010564:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8010566:	2301      	movs	r3, #1
 8010568:	4628      	mov	r0, r5
 801056a:	b002      	add	sp, #8
 801056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010570:	f000 b806 	b.w	8010580 <__strtok_r>
 8010574:	20000090 	.word	0x20000090
 8010578:	0801532c 	.word	0x0801532c
 801057c:	08015343 	.word	0x08015343

08010580 <__strtok_r>:
 8010580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010582:	b908      	cbnz	r0, 8010588 <__strtok_r+0x8>
 8010584:	6810      	ldr	r0, [r2, #0]
 8010586:	b188      	cbz	r0, 80105ac <__strtok_r+0x2c>
 8010588:	4604      	mov	r4, r0
 801058a:	4620      	mov	r0, r4
 801058c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010590:	460f      	mov	r7, r1
 8010592:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010596:	b91e      	cbnz	r6, 80105a0 <__strtok_r+0x20>
 8010598:	b965      	cbnz	r5, 80105b4 <__strtok_r+0x34>
 801059a:	6015      	str	r5, [r2, #0]
 801059c:	4628      	mov	r0, r5
 801059e:	e005      	b.n	80105ac <__strtok_r+0x2c>
 80105a0:	42b5      	cmp	r5, r6
 80105a2:	d1f6      	bne.n	8010592 <__strtok_r+0x12>
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1f0      	bne.n	801058a <__strtok_r+0xa>
 80105a8:	6014      	str	r4, [r2, #0]
 80105aa:	7003      	strb	r3, [r0, #0]
 80105ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ae:	461c      	mov	r4, r3
 80105b0:	e00c      	b.n	80105cc <__strtok_r+0x4c>
 80105b2:	b915      	cbnz	r5, 80105ba <__strtok_r+0x3a>
 80105b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105b8:	460e      	mov	r6, r1
 80105ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80105be:	42ab      	cmp	r3, r5
 80105c0:	d1f7      	bne.n	80105b2 <__strtok_r+0x32>
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d0f3      	beq.n	80105ae <__strtok_r+0x2e>
 80105c6:	2300      	movs	r3, #0
 80105c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80105cc:	6014      	str	r4, [r2, #0]
 80105ce:	e7ed      	b.n	80105ac <__strtok_r+0x2c>

080105d0 <strstr>:
 80105d0:	780a      	ldrb	r2, [r1, #0]
 80105d2:	b570      	push	{r4, r5, r6, lr}
 80105d4:	b96a      	cbnz	r2, 80105f2 <strstr+0x22>
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	429a      	cmp	r2, r3
 80105da:	d109      	bne.n	80105f0 <strstr+0x20>
 80105dc:	460c      	mov	r4, r1
 80105de:	4605      	mov	r5, r0
 80105e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d0f6      	beq.n	80105d6 <strstr+0x6>
 80105e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80105ec:	429e      	cmp	r6, r3
 80105ee:	d0f7      	beq.n	80105e0 <strstr+0x10>
 80105f0:	3001      	adds	r0, #1
 80105f2:	7803      	ldrb	r3, [r0, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1ef      	bne.n	80105d8 <strstr+0x8>
 80105f8:	4618      	mov	r0, r3
 80105fa:	e7ec      	b.n	80105d6 <strstr+0x6>

080105fc <_localeconv_r>:
 80105fc:	4800      	ldr	r0, [pc, #0]	; (8010600 <_localeconv_r+0x4>)
 80105fe:	4770      	bx	lr
 8010600:	20000184 	.word	0x20000184

08010604 <_close_r>:
 8010604:	b538      	push	{r3, r4, r5, lr}
 8010606:	4d06      	ldr	r5, [pc, #24]	; (8010620 <_close_r+0x1c>)
 8010608:	2300      	movs	r3, #0
 801060a:	4604      	mov	r4, r0
 801060c:	4608      	mov	r0, r1
 801060e:	602b      	str	r3, [r5, #0]
 8010610:	f7f1 ff6c 	bl	80024ec <_close>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d102      	bne.n	801061e <_close_r+0x1a>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	b103      	cbz	r3, 801061e <_close_r+0x1a>
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	20003a00 	.word	0x20003a00

08010624 <_lseek_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4d07      	ldr	r5, [pc, #28]	; (8010644 <_lseek_r+0x20>)
 8010628:	4604      	mov	r4, r0
 801062a:	4608      	mov	r0, r1
 801062c:	4611      	mov	r1, r2
 801062e:	2200      	movs	r2, #0
 8010630:	602a      	str	r2, [r5, #0]
 8010632:	461a      	mov	r2, r3
 8010634:	f7f1 ff81 	bl	800253a <_lseek>
 8010638:	1c43      	adds	r3, r0, #1
 801063a:	d102      	bne.n	8010642 <_lseek_r+0x1e>
 801063c:	682b      	ldr	r3, [r5, #0]
 801063e:	b103      	cbz	r3, 8010642 <_lseek_r+0x1e>
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	bd38      	pop	{r3, r4, r5, pc}
 8010644:	20003a00 	.word	0x20003a00

08010648 <_read_r>:
 8010648:	b538      	push	{r3, r4, r5, lr}
 801064a:	4d07      	ldr	r5, [pc, #28]	; (8010668 <_read_r+0x20>)
 801064c:	4604      	mov	r4, r0
 801064e:	4608      	mov	r0, r1
 8010650:	4611      	mov	r1, r2
 8010652:	2200      	movs	r2, #0
 8010654:	602a      	str	r2, [r5, #0]
 8010656:	461a      	mov	r2, r3
 8010658:	f7f1 ff2b 	bl	80024b2 <_read>
 801065c:	1c43      	adds	r3, r0, #1
 801065e:	d102      	bne.n	8010666 <_read_r+0x1e>
 8010660:	682b      	ldr	r3, [r5, #0]
 8010662:	b103      	cbz	r3, 8010666 <_read_r+0x1e>
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	bd38      	pop	{r3, r4, r5, pc}
 8010668:	20003a00 	.word	0x20003a00

0801066c <_write_r>:
 801066c:	b538      	push	{r3, r4, r5, lr}
 801066e:	4d07      	ldr	r5, [pc, #28]	; (801068c <_write_r+0x20>)
 8010670:	4604      	mov	r4, r0
 8010672:	4608      	mov	r0, r1
 8010674:	4611      	mov	r1, r2
 8010676:	2200      	movs	r2, #0
 8010678:	602a      	str	r2, [r5, #0]
 801067a:	461a      	mov	r2, r3
 801067c:	f7f0 fcdf 	bl	800103e <_write>
 8010680:	1c43      	adds	r3, r0, #1
 8010682:	d102      	bne.n	801068a <_write_r+0x1e>
 8010684:	682b      	ldr	r3, [r5, #0]
 8010686:	b103      	cbz	r3, 801068a <_write_r+0x1e>
 8010688:	6023      	str	r3, [r4, #0]
 801068a:	bd38      	pop	{r3, r4, r5, pc}
 801068c:	20003a00 	.word	0x20003a00

08010690 <__errno>:
 8010690:	4b01      	ldr	r3, [pc, #4]	; (8010698 <__errno+0x8>)
 8010692:	6818      	ldr	r0, [r3, #0]
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	20000090 	.word	0x20000090

0801069c <__libc_init_array>:
 801069c:	b570      	push	{r4, r5, r6, lr}
 801069e:	4d0d      	ldr	r5, [pc, #52]	; (80106d4 <__libc_init_array+0x38>)
 80106a0:	4c0d      	ldr	r4, [pc, #52]	; (80106d8 <__libc_init_array+0x3c>)
 80106a2:	1b64      	subs	r4, r4, r5
 80106a4:	10a4      	asrs	r4, r4, #2
 80106a6:	2600      	movs	r6, #0
 80106a8:	42a6      	cmp	r6, r4
 80106aa:	d109      	bne.n	80106c0 <__libc_init_array+0x24>
 80106ac:	4d0b      	ldr	r5, [pc, #44]	; (80106dc <__libc_init_array+0x40>)
 80106ae:	4c0c      	ldr	r4, [pc, #48]	; (80106e0 <__libc_init_array+0x44>)
 80106b0:	f003 fae6 	bl	8013c80 <_init>
 80106b4:	1b64      	subs	r4, r4, r5
 80106b6:	10a4      	asrs	r4, r4, #2
 80106b8:	2600      	movs	r6, #0
 80106ba:	42a6      	cmp	r6, r4
 80106bc:	d105      	bne.n	80106ca <__libc_init_array+0x2e>
 80106be:	bd70      	pop	{r4, r5, r6, pc}
 80106c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80106c4:	4798      	blx	r3
 80106c6:	3601      	adds	r6, #1
 80106c8:	e7ee      	b.n	80106a8 <__libc_init_array+0xc>
 80106ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80106ce:	4798      	blx	r3
 80106d0:	3601      	adds	r6, #1
 80106d2:	e7f2      	b.n	80106ba <__libc_init_array+0x1e>
 80106d4:	08015744 	.word	0x08015744
 80106d8:	08015744 	.word	0x08015744
 80106dc:	08015744 	.word	0x08015744
 80106e0:	08015748 	.word	0x08015748

080106e4 <__retarget_lock_init_recursive>:
 80106e4:	4770      	bx	lr

080106e6 <__retarget_lock_acquire_recursive>:
 80106e6:	4770      	bx	lr

080106e8 <__retarget_lock_release_recursive>:
 80106e8:	4770      	bx	lr

080106ea <memcpy>:
 80106ea:	440a      	add	r2, r1
 80106ec:	4291      	cmp	r1, r2
 80106ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80106f2:	d100      	bne.n	80106f6 <memcpy+0xc>
 80106f4:	4770      	bx	lr
 80106f6:	b510      	push	{r4, lr}
 80106f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010700:	4291      	cmp	r1, r2
 8010702:	d1f9      	bne.n	80106f8 <memcpy+0xe>
 8010704:	bd10      	pop	{r4, pc}
	...

08010708 <nanf>:
 8010708:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010710 <nanf+0x8>
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	7fc00000 	.word	0x7fc00000

08010714 <abort>:
 8010714:	b508      	push	{r3, lr}
 8010716:	2006      	movs	r0, #6
 8010718:	f002 fe98 	bl	801344c <raise>
 801071c:	2001      	movs	r0, #1
 801071e:	f7f1 febe 	bl	800249e <_exit>

08010722 <quorem>:
 8010722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010726:	6903      	ldr	r3, [r0, #16]
 8010728:	690c      	ldr	r4, [r1, #16]
 801072a:	42a3      	cmp	r3, r4
 801072c:	4607      	mov	r7, r0
 801072e:	db7e      	blt.n	801082e <quorem+0x10c>
 8010730:	3c01      	subs	r4, #1
 8010732:	f101 0814 	add.w	r8, r1, #20
 8010736:	f100 0514 	add.w	r5, r0, #20
 801073a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801073e:	9301      	str	r3, [sp, #4]
 8010740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010748:	3301      	adds	r3, #1
 801074a:	429a      	cmp	r2, r3
 801074c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010754:	fbb2 f6f3 	udiv	r6, r2, r3
 8010758:	d331      	bcc.n	80107be <quorem+0x9c>
 801075a:	f04f 0e00 	mov.w	lr, #0
 801075e:	4640      	mov	r0, r8
 8010760:	46ac      	mov	ip, r5
 8010762:	46f2      	mov	sl, lr
 8010764:	f850 2b04 	ldr.w	r2, [r0], #4
 8010768:	b293      	uxth	r3, r2
 801076a:	fb06 e303 	mla	r3, r6, r3, lr
 801076e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010772:	0c1a      	lsrs	r2, r3, #16
 8010774:	b29b      	uxth	r3, r3
 8010776:	ebaa 0303 	sub.w	r3, sl, r3
 801077a:	f8dc a000 	ldr.w	sl, [ip]
 801077e:	fa13 f38a 	uxtah	r3, r3, sl
 8010782:	fb06 220e 	mla	r2, r6, lr, r2
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	9b00      	ldr	r3, [sp, #0]
 801078a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801078e:	b292      	uxth	r2, r2
 8010790:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010798:	f8bd 3000 	ldrh.w	r3, [sp]
 801079c:	4581      	cmp	r9, r0
 801079e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107a2:	f84c 3b04 	str.w	r3, [ip], #4
 80107a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80107aa:	d2db      	bcs.n	8010764 <quorem+0x42>
 80107ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80107b0:	b92b      	cbnz	r3, 80107be <quorem+0x9c>
 80107b2:	9b01      	ldr	r3, [sp, #4]
 80107b4:	3b04      	subs	r3, #4
 80107b6:	429d      	cmp	r5, r3
 80107b8:	461a      	mov	r2, r3
 80107ba:	d32c      	bcc.n	8010816 <quorem+0xf4>
 80107bc:	613c      	str	r4, [r7, #16]
 80107be:	4638      	mov	r0, r7
 80107c0:	f001 f9f2 	bl	8011ba8 <__mcmp>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	db22      	blt.n	801080e <quorem+0xec>
 80107c8:	3601      	adds	r6, #1
 80107ca:	4629      	mov	r1, r5
 80107cc:	2000      	movs	r0, #0
 80107ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80107d2:	f8d1 c000 	ldr.w	ip, [r1]
 80107d6:	b293      	uxth	r3, r2
 80107d8:	1ac3      	subs	r3, r0, r3
 80107da:	0c12      	lsrs	r2, r2, #16
 80107dc:	fa13 f38c 	uxtah	r3, r3, ip
 80107e0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80107e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107ee:	45c1      	cmp	r9, r8
 80107f0:	f841 3b04 	str.w	r3, [r1], #4
 80107f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80107f8:	d2e9      	bcs.n	80107ce <quorem+0xac>
 80107fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010802:	b922      	cbnz	r2, 801080e <quorem+0xec>
 8010804:	3b04      	subs	r3, #4
 8010806:	429d      	cmp	r5, r3
 8010808:	461a      	mov	r2, r3
 801080a:	d30a      	bcc.n	8010822 <quorem+0x100>
 801080c:	613c      	str	r4, [r7, #16]
 801080e:	4630      	mov	r0, r6
 8010810:	b003      	add	sp, #12
 8010812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010816:	6812      	ldr	r2, [r2, #0]
 8010818:	3b04      	subs	r3, #4
 801081a:	2a00      	cmp	r2, #0
 801081c:	d1ce      	bne.n	80107bc <quorem+0x9a>
 801081e:	3c01      	subs	r4, #1
 8010820:	e7c9      	b.n	80107b6 <quorem+0x94>
 8010822:	6812      	ldr	r2, [r2, #0]
 8010824:	3b04      	subs	r3, #4
 8010826:	2a00      	cmp	r2, #0
 8010828:	d1f0      	bne.n	801080c <quorem+0xea>
 801082a:	3c01      	subs	r4, #1
 801082c:	e7eb      	b.n	8010806 <quorem+0xe4>
 801082e:	2000      	movs	r0, #0
 8010830:	e7ee      	b.n	8010810 <quorem+0xee>
 8010832:	0000      	movs	r0, r0
 8010834:	0000      	movs	r0, r0
	...

08010838 <_dtoa_r>:
 8010838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801083c:	ed2d 8b04 	vpush	{d8-d9}
 8010840:	69c5      	ldr	r5, [r0, #28]
 8010842:	b093      	sub	sp, #76	; 0x4c
 8010844:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010848:	ec57 6b10 	vmov	r6, r7, d0
 801084c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010850:	9107      	str	r1, [sp, #28]
 8010852:	4604      	mov	r4, r0
 8010854:	920a      	str	r2, [sp, #40]	; 0x28
 8010856:	930d      	str	r3, [sp, #52]	; 0x34
 8010858:	b975      	cbnz	r5, 8010878 <_dtoa_r+0x40>
 801085a:	2010      	movs	r0, #16
 801085c:	f000 fe2a 	bl	80114b4 <malloc>
 8010860:	4602      	mov	r2, r0
 8010862:	61e0      	str	r0, [r4, #28]
 8010864:	b920      	cbnz	r0, 8010870 <_dtoa_r+0x38>
 8010866:	4bae      	ldr	r3, [pc, #696]	; (8010b20 <_dtoa_r+0x2e8>)
 8010868:	21ef      	movs	r1, #239	; 0xef
 801086a:	48ae      	ldr	r0, [pc, #696]	; (8010b24 <_dtoa_r+0x2ec>)
 801086c:	f7fe fd2e 	bl	800f2cc <__assert_func>
 8010870:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010874:	6005      	str	r5, [r0, #0]
 8010876:	60c5      	str	r5, [r0, #12]
 8010878:	69e3      	ldr	r3, [r4, #28]
 801087a:	6819      	ldr	r1, [r3, #0]
 801087c:	b151      	cbz	r1, 8010894 <_dtoa_r+0x5c>
 801087e:	685a      	ldr	r2, [r3, #4]
 8010880:	604a      	str	r2, [r1, #4]
 8010882:	2301      	movs	r3, #1
 8010884:	4093      	lsls	r3, r2
 8010886:	608b      	str	r3, [r1, #8]
 8010888:	4620      	mov	r0, r4
 801088a:	f000 ff07 	bl	801169c <_Bfree>
 801088e:	69e3      	ldr	r3, [r4, #28]
 8010890:	2200      	movs	r2, #0
 8010892:	601a      	str	r2, [r3, #0]
 8010894:	1e3b      	subs	r3, r7, #0
 8010896:	bfbb      	ittet	lt
 8010898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801089c:	9303      	strlt	r3, [sp, #12]
 801089e:	2300      	movge	r3, #0
 80108a0:	2201      	movlt	r2, #1
 80108a2:	bfac      	ite	ge
 80108a4:	f8c8 3000 	strge.w	r3, [r8]
 80108a8:	f8c8 2000 	strlt.w	r2, [r8]
 80108ac:	4b9e      	ldr	r3, [pc, #632]	; (8010b28 <_dtoa_r+0x2f0>)
 80108ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80108b2:	ea33 0308 	bics.w	r3, r3, r8
 80108b6:	d11b      	bne.n	80108f0 <_dtoa_r+0xb8>
 80108b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80108be:	6013      	str	r3, [r2, #0]
 80108c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80108c4:	4333      	orrs	r3, r6
 80108c6:	f000 8593 	beq.w	80113f0 <_dtoa_r+0xbb8>
 80108ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108cc:	b963      	cbnz	r3, 80108e8 <_dtoa_r+0xb0>
 80108ce:	4b97      	ldr	r3, [pc, #604]	; (8010b2c <_dtoa_r+0x2f4>)
 80108d0:	e027      	b.n	8010922 <_dtoa_r+0xea>
 80108d2:	4b97      	ldr	r3, [pc, #604]	; (8010b30 <_dtoa_r+0x2f8>)
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	3308      	adds	r3, #8
 80108d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80108da:	6013      	str	r3, [r2, #0]
 80108dc:	9800      	ldr	r0, [sp, #0]
 80108de:	b013      	add	sp, #76	; 0x4c
 80108e0:	ecbd 8b04 	vpop	{d8-d9}
 80108e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e8:	4b90      	ldr	r3, [pc, #576]	; (8010b2c <_dtoa_r+0x2f4>)
 80108ea:	9300      	str	r3, [sp, #0]
 80108ec:	3303      	adds	r3, #3
 80108ee:	e7f3      	b.n	80108d8 <_dtoa_r+0xa0>
 80108f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108f4:	2200      	movs	r2, #0
 80108f6:	ec51 0b17 	vmov	r0, r1, d7
 80108fa:	eeb0 8a47 	vmov.f32	s16, s14
 80108fe:	eef0 8a67 	vmov.f32	s17, s15
 8010902:	2300      	movs	r3, #0
 8010904:	f7f0 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010908:	4681      	mov	r9, r0
 801090a:	b160      	cbz	r0, 8010926 <_dtoa_r+0xee>
 801090c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801090e:	2301      	movs	r3, #1
 8010910:	6013      	str	r3, [r2, #0]
 8010912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8568 	beq.w	80113ea <_dtoa_r+0xbb2>
 801091a:	4b86      	ldr	r3, [pc, #536]	; (8010b34 <_dtoa_r+0x2fc>)
 801091c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801091e:	6013      	str	r3, [r2, #0]
 8010920:	3b01      	subs	r3, #1
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	e7da      	b.n	80108dc <_dtoa_r+0xa4>
 8010926:	aa10      	add	r2, sp, #64	; 0x40
 8010928:	a911      	add	r1, sp, #68	; 0x44
 801092a:	4620      	mov	r0, r4
 801092c:	eeb0 0a48 	vmov.f32	s0, s16
 8010930:	eef0 0a68 	vmov.f32	s1, s17
 8010934:	f001 fa4e 	bl	8011dd4 <__d2b>
 8010938:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801093c:	4682      	mov	sl, r0
 801093e:	2d00      	cmp	r5, #0
 8010940:	d07f      	beq.n	8010a42 <_dtoa_r+0x20a>
 8010942:	ee18 3a90 	vmov	r3, s17
 8010946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801094a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801094e:	ec51 0b18 	vmov	r0, r1, d8
 8010952:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801095a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801095e:	4619      	mov	r1, r3
 8010960:	2200      	movs	r2, #0
 8010962:	4b75      	ldr	r3, [pc, #468]	; (8010b38 <_dtoa_r+0x300>)
 8010964:	f7ef fc90 	bl	8000288 <__aeabi_dsub>
 8010968:	a367      	add	r3, pc, #412	; (adr r3, 8010b08 <_dtoa_r+0x2d0>)
 801096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096e:	f7ef fe43 	bl	80005f8 <__aeabi_dmul>
 8010972:	a367      	add	r3, pc, #412	; (adr r3, 8010b10 <_dtoa_r+0x2d8>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f7ef fc88 	bl	800028c <__adddf3>
 801097c:	4606      	mov	r6, r0
 801097e:	4628      	mov	r0, r5
 8010980:	460f      	mov	r7, r1
 8010982:	f7ef fdcf 	bl	8000524 <__aeabi_i2d>
 8010986:	a364      	add	r3, pc, #400	; (adr r3, 8010b18 <_dtoa_r+0x2e0>)
 8010988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098c:	f7ef fe34 	bl	80005f8 <__aeabi_dmul>
 8010990:	4602      	mov	r2, r0
 8010992:	460b      	mov	r3, r1
 8010994:	4630      	mov	r0, r6
 8010996:	4639      	mov	r1, r7
 8010998:	f7ef fc78 	bl	800028c <__adddf3>
 801099c:	4606      	mov	r6, r0
 801099e:	460f      	mov	r7, r1
 80109a0:	f7f0 f8da 	bl	8000b58 <__aeabi_d2iz>
 80109a4:	2200      	movs	r2, #0
 80109a6:	4683      	mov	fp, r0
 80109a8:	2300      	movs	r3, #0
 80109aa:	4630      	mov	r0, r6
 80109ac:	4639      	mov	r1, r7
 80109ae:	f7f0 f895 	bl	8000adc <__aeabi_dcmplt>
 80109b2:	b148      	cbz	r0, 80109c8 <_dtoa_r+0x190>
 80109b4:	4658      	mov	r0, fp
 80109b6:	f7ef fdb5 	bl	8000524 <__aeabi_i2d>
 80109ba:	4632      	mov	r2, r6
 80109bc:	463b      	mov	r3, r7
 80109be:	f7f0 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80109c2:	b908      	cbnz	r0, 80109c8 <_dtoa_r+0x190>
 80109c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109c8:	f1bb 0f16 	cmp.w	fp, #22
 80109cc:	d857      	bhi.n	8010a7e <_dtoa_r+0x246>
 80109ce:	4b5b      	ldr	r3, [pc, #364]	; (8010b3c <_dtoa_r+0x304>)
 80109d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80109d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d8:	ec51 0b18 	vmov	r0, r1, d8
 80109dc:	f7f0 f87e 	bl	8000adc <__aeabi_dcmplt>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d04e      	beq.n	8010a82 <_dtoa_r+0x24a>
 80109e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109e8:	2300      	movs	r3, #0
 80109ea:	930c      	str	r3, [sp, #48]	; 0x30
 80109ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109ee:	1b5b      	subs	r3, r3, r5
 80109f0:	1e5a      	subs	r2, r3, #1
 80109f2:	bf45      	ittet	mi
 80109f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80109f8:	9305      	strmi	r3, [sp, #20]
 80109fa:	2300      	movpl	r3, #0
 80109fc:	2300      	movmi	r3, #0
 80109fe:	9206      	str	r2, [sp, #24]
 8010a00:	bf54      	ite	pl
 8010a02:	9305      	strpl	r3, [sp, #20]
 8010a04:	9306      	strmi	r3, [sp, #24]
 8010a06:	f1bb 0f00 	cmp.w	fp, #0
 8010a0a:	db3c      	blt.n	8010a86 <_dtoa_r+0x24e>
 8010a0c:	9b06      	ldr	r3, [sp, #24]
 8010a0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010a12:	445b      	add	r3, fp
 8010a14:	9306      	str	r3, [sp, #24]
 8010a16:	2300      	movs	r3, #0
 8010a18:	9308      	str	r3, [sp, #32]
 8010a1a:	9b07      	ldr	r3, [sp, #28]
 8010a1c:	2b09      	cmp	r3, #9
 8010a1e:	d868      	bhi.n	8010af2 <_dtoa_r+0x2ba>
 8010a20:	2b05      	cmp	r3, #5
 8010a22:	bfc4      	itt	gt
 8010a24:	3b04      	subgt	r3, #4
 8010a26:	9307      	strgt	r3, [sp, #28]
 8010a28:	9b07      	ldr	r3, [sp, #28]
 8010a2a:	f1a3 0302 	sub.w	r3, r3, #2
 8010a2e:	bfcc      	ite	gt
 8010a30:	2500      	movgt	r5, #0
 8010a32:	2501      	movle	r5, #1
 8010a34:	2b03      	cmp	r3, #3
 8010a36:	f200 8085 	bhi.w	8010b44 <_dtoa_r+0x30c>
 8010a3a:	e8df f003 	tbb	[pc, r3]
 8010a3e:	3b2e      	.short	0x3b2e
 8010a40:	5839      	.short	0x5839
 8010a42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010a46:	441d      	add	r5, r3
 8010a48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a4c:	2b20      	cmp	r3, #32
 8010a4e:	bfc1      	itttt	gt
 8010a50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a54:	fa08 f803 	lslgt.w	r8, r8, r3
 8010a58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010a5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010a60:	bfd6      	itet	le
 8010a62:	f1c3 0320 	rsble	r3, r3, #32
 8010a66:	ea48 0003 	orrgt.w	r0, r8, r3
 8010a6a:	fa06 f003 	lslle.w	r0, r6, r3
 8010a6e:	f7ef fd49 	bl	8000504 <__aeabi_ui2d>
 8010a72:	2201      	movs	r2, #1
 8010a74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010a78:	3d01      	subs	r5, #1
 8010a7a:	920e      	str	r2, [sp, #56]	; 0x38
 8010a7c:	e76f      	b.n	801095e <_dtoa_r+0x126>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e7b3      	b.n	80109ea <_dtoa_r+0x1b2>
 8010a82:	900c      	str	r0, [sp, #48]	; 0x30
 8010a84:	e7b2      	b.n	80109ec <_dtoa_r+0x1b4>
 8010a86:	9b05      	ldr	r3, [sp, #20]
 8010a88:	eba3 030b 	sub.w	r3, r3, fp
 8010a8c:	9305      	str	r3, [sp, #20]
 8010a8e:	f1cb 0300 	rsb	r3, fp, #0
 8010a92:	9308      	str	r3, [sp, #32]
 8010a94:	2300      	movs	r3, #0
 8010a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a98:	e7bf      	b.n	8010a1a <_dtoa_r+0x1e2>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	dc52      	bgt.n	8010b4a <_dtoa_r+0x312>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	9301      	str	r3, [sp, #4]
 8010aa8:	9304      	str	r3, [sp, #16]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	920a      	str	r2, [sp, #40]	; 0x28
 8010aae:	e00b      	b.n	8010ac8 <_dtoa_r+0x290>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e7f3      	b.n	8010a9c <_dtoa_r+0x264>
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aba:	445b      	add	r3, fp
 8010abc:	9301      	str	r3, [sp, #4]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	9304      	str	r3, [sp, #16]
 8010ac4:	bfb8      	it	lt
 8010ac6:	2301      	movlt	r3, #1
 8010ac8:	69e0      	ldr	r0, [r4, #28]
 8010aca:	2100      	movs	r1, #0
 8010acc:	2204      	movs	r2, #4
 8010ace:	f102 0614 	add.w	r6, r2, #20
 8010ad2:	429e      	cmp	r6, r3
 8010ad4:	d93d      	bls.n	8010b52 <_dtoa_r+0x31a>
 8010ad6:	6041      	str	r1, [r0, #4]
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f000 fd9f 	bl	801161c <_Balloc>
 8010ade:	9000      	str	r0, [sp, #0]
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	d139      	bne.n	8010b58 <_dtoa_r+0x320>
 8010ae4:	4b16      	ldr	r3, [pc, #88]	; (8010b40 <_dtoa_r+0x308>)
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	f240 11af 	movw	r1, #431	; 0x1af
 8010aec:	e6bd      	b.n	801086a <_dtoa_r+0x32>
 8010aee:	2301      	movs	r3, #1
 8010af0:	e7e1      	b.n	8010ab6 <_dtoa_r+0x27e>
 8010af2:	2501      	movs	r5, #1
 8010af4:	2300      	movs	r3, #0
 8010af6:	9307      	str	r3, [sp, #28]
 8010af8:	9509      	str	r5, [sp, #36]	; 0x24
 8010afa:	f04f 33ff 	mov.w	r3, #4294967295
 8010afe:	9301      	str	r3, [sp, #4]
 8010b00:	9304      	str	r3, [sp, #16]
 8010b02:	2200      	movs	r2, #0
 8010b04:	2312      	movs	r3, #18
 8010b06:	e7d1      	b.n	8010aac <_dtoa_r+0x274>
 8010b08:	636f4361 	.word	0x636f4361
 8010b0c:	3fd287a7 	.word	0x3fd287a7
 8010b10:	8b60c8b3 	.word	0x8b60c8b3
 8010b14:	3fc68a28 	.word	0x3fc68a28
 8010b18:	509f79fb 	.word	0x509f79fb
 8010b1c:	3fd34413 	.word	0x3fd34413
 8010b20:	0801532c 	.word	0x0801532c
 8010b24:	080153aa 	.word	0x080153aa
 8010b28:	7ff00000 	.word	0x7ff00000
 8010b2c:	080153a6 	.word	0x080153a6
 8010b30:	0801539d 	.word	0x0801539d
 8010b34:	08015304 	.word	0x08015304
 8010b38:	3ff80000 	.word	0x3ff80000
 8010b3c:	08015498 	.word	0x08015498
 8010b40:	08015402 	.word	0x08015402
 8010b44:	2301      	movs	r3, #1
 8010b46:	9309      	str	r3, [sp, #36]	; 0x24
 8010b48:	e7d7      	b.n	8010afa <_dtoa_r+0x2c2>
 8010b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	9304      	str	r3, [sp, #16]
 8010b50:	e7ba      	b.n	8010ac8 <_dtoa_r+0x290>
 8010b52:	3101      	adds	r1, #1
 8010b54:	0052      	lsls	r2, r2, #1
 8010b56:	e7ba      	b.n	8010ace <_dtoa_r+0x296>
 8010b58:	69e3      	ldr	r3, [r4, #28]
 8010b5a:	9a00      	ldr	r2, [sp, #0]
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	9b04      	ldr	r3, [sp, #16]
 8010b60:	2b0e      	cmp	r3, #14
 8010b62:	f200 80a8 	bhi.w	8010cb6 <_dtoa_r+0x47e>
 8010b66:	2d00      	cmp	r5, #0
 8010b68:	f000 80a5 	beq.w	8010cb6 <_dtoa_r+0x47e>
 8010b6c:	f1bb 0f00 	cmp.w	fp, #0
 8010b70:	dd38      	ble.n	8010be4 <_dtoa_r+0x3ac>
 8010b72:	4bc0      	ldr	r3, [pc, #768]	; (8010e74 <_dtoa_r+0x63c>)
 8010b74:	f00b 020f 	and.w	r2, fp, #15
 8010b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010b80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010b84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010b88:	d019      	beq.n	8010bbe <_dtoa_r+0x386>
 8010b8a:	4bbb      	ldr	r3, [pc, #748]	; (8010e78 <_dtoa_r+0x640>)
 8010b8c:	ec51 0b18 	vmov	r0, r1, d8
 8010b90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b94:	f7ef fe5a 	bl	800084c <__aeabi_ddiv>
 8010b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b9c:	f008 080f 	and.w	r8, r8, #15
 8010ba0:	2503      	movs	r5, #3
 8010ba2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010e78 <_dtoa_r+0x640>
 8010ba6:	f1b8 0f00 	cmp.w	r8, #0
 8010baa:	d10a      	bne.n	8010bc2 <_dtoa_r+0x38a>
 8010bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bb0:	4632      	mov	r2, r6
 8010bb2:	463b      	mov	r3, r7
 8010bb4:	f7ef fe4a 	bl	800084c <__aeabi_ddiv>
 8010bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bbc:	e02b      	b.n	8010c16 <_dtoa_r+0x3de>
 8010bbe:	2502      	movs	r5, #2
 8010bc0:	e7ef      	b.n	8010ba2 <_dtoa_r+0x36a>
 8010bc2:	f018 0f01 	tst.w	r8, #1
 8010bc6:	d008      	beq.n	8010bda <_dtoa_r+0x3a2>
 8010bc8:	4630      	mov	r0, r6
 8010bca:	4639      	mov	r1, r7
 8010bcc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010bd0:	f7ef fd12 	bl	80005f8 <__aeabi_dmul>
 8010bd4:	3501      	adds	r5, #1
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	460f      	mov	r7, r1
 8010bda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010bde:	f109 0908 	add.w	r9, r9, #8
 8010be2:	e7e0      	b.n	8010ba6 <_dtoa_r+0x36e>
 8010be4:	f000 809f 	beq.w	8010d26 <_dtoa_r+0x4ee>
 8010be8:	f1cb 0600 	rsb	r6, fp, #0
 8010bec:	4ba1      	ldr	r3, [pc, #644]	; (8010e74 <_dtoa_r+0x63c>)
 8010bee:	4fa2      	ldr	r7, [pc, #648]	; (8010e78 <_dtoa_r+0x640>)
 8010bf0:	f006 020f 	and.w	r2, r6, #15
 8010bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	ec51 0b18 	vmov	r0, r1, d8
 8010c00:	f7ef fcfa 	bl	80005f8 <__aeabi_dmul>
 8010c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c08:	1136      	asrs	r6, r6, #4
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	2502      	movs	r5, #2
 8010c0e:	2e00      	cmp	r6, #0
 8010c10:	d17e      	bne.n	8010d10 <_dtoa_r+0x4d8>
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1d0      	bne.n	8010bb8 <_dtoa_r+0x380>
 8010c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f000 8084 	beq.w	8010d2a <_dtoa_r+0x4f2>
 8010c22:	4b96      	ldr	r3, [pc, #600]	; (8010e7c <_dtoa_r+0x644>)
 8010c24:	2200      	movs	r2, #0
 8010c26:	4640      	mov	r0, r8
 8010c28:	4649      	mov	r1, r9
 8010c2a:	f7ef ff57 	bl	8000adc <__aeabi_dcmplt>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d07b      	beq.n	8010d2a <_dtoa_r+0x4f2>
 8010c32:	9b04      	ldr	r3, [sp, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d078      	beq.n	8010d2a <_dtoa_r+0x4f2>
 8010c38:	9b01      	ldr	r3, [sp, #4]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	dd39      	ble.n	8010cb2 <_dtoa_r+0x47a>
 8010c3e:	4b90      	ldr	r3, [pc, #576]	; (8010e80 <_dtoa_r+0x648>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	4640      	mov	r0, r8
 8010c44:	4649      	mov	r1, r9
 8010c46:	f7ef fcd7 	bl	80005f8 <__aeabi_dmul>
 8010c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c4e:	9e01      	ldr	r6, [sp, #4]
 8010c50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c54:	3501      	adds	r5, #1
 8010c56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f7ef fc62 	bl	8000524 <__aeabi_i2d>
 8010c60:	4642      	mov	r2, r8
 8010c62:	464b      	mov	r3, r9
 8010c64:	f7ef fcc8 	bl	80005f8 <__aeabi_dmul>
 8010c68:	4b86      	ldr	r3, [pc, #536]	; (8010e84 <_dtoa_r+0x64c>)
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f7ef fb0e 	bl	800028c <__adddf3>
 8010c70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c78:	9303      	str	r3, [sp, #12]
 8010c7a:	2e00      	cmp	r6, #0
 8010c7c:	d158      	bne.n	8010d30 <_dtoa_r+0x4f8>
 8010c7e:	4b82      	ldr	r3, [pc, #520]	; (8010e88 <_dtoa_r+0x650>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	4640      	mov	r0, r8
 8010c84:	4649      	mov	r1, r9
 8010c86:	f7ef faff 	bl	8000288 <__aeabi_dsub>
 8010c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c8e:	4680      	mov	r8, r0
 8010c90:	4689      	mov	r9, r1
 8010c92:	f7ef ff41 	bl	8000b18 <__aeabi_dcmpgt>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	f040 8296 	bne.w	80111c8 <_dtoa_r+0x990>
 8010c9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010ca0:	4640      	mov	r0, r8
 8010ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	f7ef ff18 	bl	8000adc <__aeabi_dcmplt>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	f040 8289 	bne.w	80111c4 <_dtoa_r+0x98c>
 8010cb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f2c0 814e 	blt.w	8010f5a <_dtoa_r+0x722>
 8010cbe:	f1bb 0f0e 	cmp.w	fp, #14
 8010cc2:	f300 814a 	bgt.w	8010f5a <_dtoa_r+0x722>
 8010cc6:	4b6b      	ldr	r3, [pc, #428]	; (8010e74 <_dtoa_r+0x63c>)
 8010cc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f280 80dc 	bge.w	8010e90 <_dtoa_r+0x658>
 8010cd8:	9b04      	ldr	r3, [sp, #16]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f300 80d8 	bgt.w	8010e90 <_dtoa_r+0x658>
 8010ce0:	f040 826f 	bne.w	80111c2 <_dtoa_r+0x98a>
 8010ce4:	4b68      	ldr	r3, [pc, #416]	; (8010e88 <_dtoa_r+0x650>)
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	4640      	mov	r0, r8
 8010cea:	4649      	mov	r1, r9
 8010cec:	f7ef fc84 	bl	80005f8 <__aeabi_dmul>
 8010cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf4:	f7ef ff06 	bl	8000b04 <__aeabi_dcmpge>
 8010cf8:	9e04      	ldr	r6, [sp, #16]
 8010cfa:	4637      	mov	r7, r6
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	f040 8245 	bne.w	801118c <_dtoa_r+0x954>
 8010d02:	9d00      	ldr	r5, [sp, #0]
 8010d04:	2331      	movs	r3, #49	; 0x31
 8010d06:	f805 3b01 	strb.w	r3, [r5], #1
 8010d0a:	f10b 0b01 	add.w	fp, fp, #1
 8010d0e:	e241      	b.n	8011194 <_dtoa_r+0x95c>
 8010d10:	07f2      	lsls	r2, r6, #31
 8010d12:	d505      	bpl.n	8010d20 <_dtoa_r+0x4e8>
 8010d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d18:	f7ef fc6e 	bl	80005f8 <__aeabi_dmul>
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	2301      	movs	r3, #1
 8010d20:	1076      	asrs	r6, r6, #1
 8010d22:	3708      	adds	r7, #8
 8010d24:	e773      	b.n	8010c0e <_dtoa_r+0x3d6>
 8010d26:	2502      	movs	r5, #2
 8010d28:	e775      	b.n	8010c16 <_dtoa_r+0x3de>
 8010d2a:	9e04      	ldr	r6, [sp, #16]
 8010d2c:	465f      	mov	r7, fp
 8010d2e:	e792      	b.n	8010c56 <_dtoa_r+0x41e>
 8010d30:	9900      	ldr	r1, [sp, #0]
 8010d32:	4b50      	ldr	r3, [pc, #320]	; (8010e74 <_dtoa_r+0x63c>)
 8010d34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d38:	4431      	add	r1, r6
 8010d3a:	9102      	str	r1, [sp, #8]
 8010d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d3e:	eeb0 9a47 	vmov.f32	s18, s14
 8010d42:	eef0 9a67 	vmov.f32	s19, s15
 8010d46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010d4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d4e:	2900      	cmp	r1, #0
 8010d50:	d044      	beq.n	8010ddc <_dtoa_r+0x5a4>
 8010d52:	494e      	ldr	r1, [pc, #312]	; (8010e8c <_dtoa_r+0x654>)
 8010d54:	2000      	movs	r0, #0
 8010d56:	f7ef fd79 	bl	800084c <__aeabi_ddiv>
 8010d5a:	ec53 2b19 	vmov	r2, r3, d9
 8010d5e:	f7ef fa93 	bl	8000288 <__aeabi_dsub>
 8010d62:	9d00      	ldr	r5, [sp, #0]
 8010d64:	ec41 0b19 	vmov	d9, r0, r1
 8010d68:	4649      	mov	r1, r9
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	f7ef fef4 	bl	8000b58 <__aeabi_d2iz>
 8010d70:	4606      	mov	r6, r0
 8010d72:	f7ef fbd7 	bl	8000524 <__aeabi_i2d>
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef fa83 	bl	8000288 <__aeabi_dsub>
 8010d82:	3630      	adds	r6, #48	; 0x30
 8010d84:	f805 6b01 	strb.w	r6, [r5], #1
 8010d88:	ec53 2b19 	vmov	r2, r3, d9
 8010d8c:	4680      	mov	r8, r0
 8010d8e:	4689      	mov	r9, r1
 8010d90:	f7ef fea4 	bl	8000adc <__aeabi_dcmplt>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d164      	bne.n	8010e62 <_dtoa_r+0x62a>
 8010d98:	4642      	mov	r2, r8
 8010d9a:	464b      	mov	r3, r9
 8010d9c:	4937      	ldr	r1, [pc, #220]	; (8010e7c <_dtoa_r+0x644>)
 8010d9e:	2000      	movs	r0, #0
 8010da0:	f7ef fa72 	bl	8000288 <__aeabi_dsub>
 8010da4:	ec53 2b19 	vmov	r2, r3, d9
 8010da8:	f7ef fe98 	bl	8000adc <__aeabi_dcmplt>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	f040 80b6 	bne.w	8010f1e <_dtoa_r+0x6e6>
 8010db2:	9b02      	ldr	r3, [sp, #8]
 8010db4:	429d      	cmp	r5, r3
 8010db6:	f43f af7c 	beq.w	8010cb2 <_dtoa_r+0x47a>
 8010dba:	4b31      	ldr	r3, [pc, #196]	; (8010e80 <_dtoa_r+0x648>)
 8010dbc:	ec51 0b19 	vmov	r0, r1, d9
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f7ef fc19 	bl	80005f8 <__aeabi_dmul>
 8010dc6:	4b2e      	ldr	r3, [pc, #184]	; (8010e80 <_dtoa_r+0x648>)
 8010dc8:	ec41 0b19 	vmov	d9, r0, r1
 8010dcc:	2200      	movs	r2, #0
 8010dce:	4640      	mov	r0, r8
 8010dd0:	4649      	mov	r1, r9
 8010dd2:	f7ef fc11 	bl	80005f8 <__aeabi_dmul>
 8010dd6:	4680      	mov	r8, r0
 8010dd8:	4689      	mov	r9, r1
 8010dda:	e7c5      	b.n	8010d68 <_dtoa_r+0x530>
 8010ddc:	ec51 0b17 	vmov	r0, r1, d7
 8010de0:	f7ef fc0a 	bl	80005f8 <__aeabi_dmul>
 8010de4:	9b02      	ldr	r3, [sp, #8]
 8010de6:	9d00      	ldr	r5, [sp, #0]
 8010de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010dea:	ec41 0b19 	vmov	d9, r0, r1
 8010dee:	4649      	mov	r1, r9
 8010df0:	4640      	mov	r0, r8
 8010df2:	f7ef feb1 	bl	8000b58 <__aeabi_d2iz>
 8010df6:	4606      	mov	r6, r0
 8010df8:	f7ef fb94 	bl	8000524 <__aeabi_i2d>
 8010dfc:	3630      	adds	r6, #48	; 0x30
 8010dfe:	4602      	mov	r2, r0
 8010e00:	460b      	mov	r3, r1
 8010e02:	4640      	mov	r0, r8
 8010e04:	4649      	mov	r1, r9
 8010e06:	f7ef fa3f 	bl	8000288 <__aeabi_dsub>
 8010e0a:	f805 6b01 	strb.w	r6, [r5], #1
 8010e0e:	9b02      	ldr	r3, [sp, #8]
 8010e10:	429d      	cmp	r5, r3
 8010e12:	4680      	mov	r8, r0
 8010e14:	4689      	mov	r9, r1
 8010e16:	f04f 0200 	mov.w	r2, #0
 8010e1a:	d124      	bne.n	8010e66 <_dtoa_r+0x62e>
 8010e1c:	4b1b      	ldr	r3, [pc, #108]	; (8010e8c <_dtoa_r+0x654>)
 8010e1e:	ec51 0b19 	vmov	r0, r1, d9
 8010e22:	f7ef fa33 	bl	800028c <__adddf3>
 8010e26:	4602      	mov	r2, r0
 8010e28:	460b      	mov	r3, r1
 8010e2a:	4640      	mov	r0, r8
 8010e2c:	4649      	mov	r1, r9
 8010e2e:	f7ef fe73 	bl	8000b18 <__aeabi_dcmpgt>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d173      	bne.n	8010f1e <_dtoa_r+0x6e6>
 8010e36:	ec53 2b19 	vmov	r2, r3, d9
 8010e3a:	4914      	ldr	r1, [pc, #80]	; (8010e8c <_dtoa_r+0x654>)
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f7ef fa23 	bl	8000288 <__aeabi_dsub>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	4640      	mov	r0, r8
 8010e48:	4649      	mov	r1, r9
 8010e4a:	f7ef fe47 	bl	8000adc <__aeabi_dcmplt>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	f43f af2f 	beq.w	8010cb2 <_dtoa_r+0x47a>
 8010e54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010e56:	1e6b      	subs	r3, r5, #1
 8010e58:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e5e:	2b30      	cmp	r3, #48	; 0x30
 8010e60:	d0f8      	beq.n	8010e54 <_dtoa_r+0x61c>
 8010e62:	46bb      	mov	fp, r7
 8010e64:	e04a      	b.n	8010efc <_dtoa_r+0x6c4>
 8010e66:	4b06      	ldr	r3, [pc, #24]	; (8010e80 <_dtoa_r+0x648>)
 8010e68:	f7ef fbc6 	bl	80005f8 <__aeabi_dmul>
 8010e6c:	4680      	mov	r8, r0
 8010e6e:	4689      	mov	r9, r1
 8010e70:	e7bd      	b.n	8010dee <_dtoa_r+0x5b6>
 8010e72:	bf00      	nop
 8010e74:	08015498 	.word	0x08015498
 8010e78:	08015470 	.word	0x08015470
 8010e7c:	3ff00000 	.word	0x3ff00000
 8010e80:	40240000 	.word	0x40240000
 8010e84:	401c0000 	.word	0x401c0000
 8010e88:	40140000 	.word	0x40140000
 8010e8c:	3fe00000 	.word	0x3fe00000
 8010e90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e94:	9d00      	ldr	r5, [sp, #0]
 8010e96:	4642      	mov	r2, r8
 8010e98:	464b      	mov	r3, r9
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	f7ef fcd5 	bl	800084c <__aeabi_ddiv>
 8010ea2:	f7ef fe59 	bl	8000b58 <__aeabi_d2iz>
 8010ea6:	9001      	str	r0, [sp, #4]
 8010ea8:	f7ef fb3c 	bl	8000524 <__aeabi_i2d>
 8010eac:	4642      	mov	r2, r8
 8010eae:	464b      	mov	r3, r9
 8010eb0:	f7ef fba2 	bl	80005f8 <__aeabi_dmul>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	4630      	mov	r0, r6
 8010eba:	4639      	mov	r1, r7
 8010ebc:	f7ef f9e4 	bl	8000288 <__aeabi_dsub>
 8010ec0:	9e01      	ldr	r6, [sp, #4]
 8010ec2:	9f04      	ldr	r7, [sp, #16]
 8010ec4:	3630      	adds	r6, #48	; 0x30
 8010ec6:	f805 6b01 	strb.w	r6, [r5], #1
 8010eca:	9e00      	ldr	r6, [sp, #0]
 8010ecc:	1bae      	subs	r6, r5, r6
 8010ece:	42b7      	cmp	r7, r6
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	d134      	bne.n	8010f40 <_dtoa_r+0x708>
 8010ed6:	f7ef f9d9 	bl	800028c <__adddf3>
 8010eda:	4642      	mov	r2, r8
 8010edc:	464b      	mov	r3, r9
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460f      	mov	r7, r1
 8010ee2:	f7ef fe19 	bl	8000b18 <__aeabi_dcmpgt>
 8010ee6:	b9c8      	cbnz	r0, 8010f1c <_dtoa_r+0x6e4>
 8010ee8:	4642      	mov	r2, r8
 8010eea:	464b      	mov	r3, r9
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ef4:	b110      	cbz	r0, 8010efc <_dtoa_r+0x6c4>
 8010ef6:	9b01      	ldr	r3, [sp, #4]
 8010ef8:	07db      	lsls	r3, r3, #31
 8010efa:	d40f      	bmi.n	8010f1c <_dtoa_r+0x6e4>
 8010efc:	4651      	mov	r1, sl
 8010efe:	4620      	mov	r0, r4
 8010f00:	f000 fbcc 	bl	801169c <_Bfree>
 8010f04:	2300      	movs	r3, #0
 8010f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f08:	702b      	strb	r3, [r5, #0]
 8010f0a:	f10b 0301 	add.w	r3, fp, #1
 8010f0e:	6013      	str	r3, [r2, #0]
 8010f10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	f43f ace2 	beq.w	80108dc <_dtoa_r+0xa4>
 8010f18:	601d      	str	r5, [r3, #0]
 8010f1a:	e4df      	b.n	80108dc <_dtoa_r+0xa4>
 8010f1c:	465f      	mov	r7, fp
 8010f1e:	462b      	mov	r3, r5
 8010f20:	461d      	mov	r5, r3
 8010f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f26:	2a39      	cmp	r2, #57	; 0x39
 8010f28:	d106      	bne.n	8010f38 <_dtoa_r+0x700>
 8010f2a:	9a00      	ldr	r2, [sp, #0]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d1f7      	bne.n	8010f20 <_dtoa_r+0x6e8>
 8010f30:	9900      	ldr	r1, [sp, #0]
 8010f32:	2230      	movs	r2, #48	; 0x30
 8010f34:	3701      	adds	r7, #1
 8010f36:	700a      	strb	r2, [r1, #0]
 8010f38:	781a      	ldrb	r2, [r3, #0]
 8010f3a:	3201      	adds	r2, #1
 8010f3c:	701a      	strb	r2, [r3, #0]
 8010f3e:	e790      	b.n	8010e62 <_dtoa_r+0x62a>
 8010f40:	4ba3      	ldr	r3, [pc, #652]	; (80111d0 <_dtoa_r+0x998>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	f7ef fb58 	bl	80005f8 <__aeabi_dmul>
 8010f48:	2200      	movs	r2, #0
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	460f      	mov	r7, r1
 8010f50:	f7ef fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d09e      	beq.n	8010e96 <_dtoa_r+0x65e>
 8010f58:	e7d0      	b.n	8010efc <_dtoa_r+0x6c4>
 8010f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f5c:	2a00      	cmp	r2, #0
 8010f5e:	f000 80ca 	beq.w	80110f6 <_dtoa_r+0x8be>
 8010f62:	9a07      	ldr	r2, [sp, #28]
 8010f64:	2a01      	cmp	r2, #1
 8010f66:	f300 80ad 	bgt.w	80110c4 <_dtoa_r+0x88c>
 8010f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	f000 80a5 	beq.w	80110bc <_dtoa_r+0x884>
 8010f72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f76:	9e08      	ldr	r6, [sp, #32]
 8010f78:	9d05      	ldr	r5, [sp, #20]
 8010f7a:	9a05      	ldr	r2, [sp, #20]
 8010f7c:	441a      	add	r2, r3
 8010f7e:	9205      	str	r2, [sp, #20]
 8010f80:	9a06      	ldr	r2, [sp, #24]
 8010f82:	2101      	movs	r1, #1
 8010f84:	441a      	add	r2, r3
 8010f86:	4620      	mov	r0, r4
 8010f88:	9206      	str	r2, [sp, #24]
 8010f8a:	f000 fc87 	bl	801189c <__i2b>
 8010f8e:	4607      	mov	r7, r0
 8010f90:	b165      	cbz	r5, 8010fac <_dtoa_r+0x774>
 8010f92:	9b06      	ldr	r3, [sp, #24]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	dd09      	ble.n	8010fac <_dtoa_r+0x774>
 8010f98:	42ab      	cmp	r3, r5
 8010f9a:	9a05      	ldr	r2, [sp, #20]
 8010f9c:	bfa8      	it	ge
 8010f9e:	462b      	movge	r3, r5
 8010fa0:	1ad2      	subs	r2, r2, r3
 8010fa2:	9205      	str	r2, [sp, #20]
 8010fa4:	9a06      	ldr	r2, [sp, #24]
 8010fa6:	1aed      	subs	r5, r5, r3
 8010fa8:	1ad3      	subs	r3, r2, r3
 8010faa:	9306      	str	r3, [sp, #24]
 8010fac:	9b08      	ldr	r3, [sp, #32]
 8010fae:	b1f3      	cbz	r3, 8010fee <_dtoa_r+0x7b6>
 8010fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 80a3 	beq.w	80110fe <_dtoa_r+0x8c6>
 8010fb8:	2e00      	cmp	r6, #0
 8010fba:	dd10      	ble.n	8010fde <_dtoa_r+0x7a6>
 8010fbc:	4639      	mov	r1, r7
 8010fbe:	4632      	mov	r2, r6
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 fd2b 	bl	8011a1c <__pow5mult>
 8010fc6:	4652      	mov	r2, sl
 8010fc8:	4601      	mov	r1, r0
 8010fca:	4607      	mov	r7, r0
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f000 fc7b 	bl	80118c8 <__multiply>
 8010fd2:	4651      	mov	r1, sl
 8010fd4:	4680      	mov	r8, r0
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f000 fb60 	bl	801169c <_Bfree>
 8010fdc:	46c2      	mov	sl, r8
 8010fde:	9b08      	ldr	r3, [sp, #32]
 8010fe0:	1b9a      	subs	r2, r3, r6
 8010fe2:	d004      	beq.n	8010fee <_dtoa_r+0x7b6>
 8010fe4:	4651      	mov	r1, sl
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	f000 fd18 	bl	8011a1c <__pow5mult>
 8010fec:	4682      	mov	sl, r0
 8010fee:	2101      	movs	r1, #1
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f000 fc53 	bl	801189c <__i2b>
 8010ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	f340 8081 	ble.w	8011102 <_dtoa_r+0x8ca>
 8011000:	461a      	mov	r2, r3
 8011002:	4601      	mov	r1, r0
 8011004:	4620      	mov	r0, r4
 8011006:	f000 fd09 	bl	8011a1c <__pow5mult>
 801100a:	9b07      	ldr	r3, [sp, #28]
 801100c:	2b01      	cmp	r3, #1
 801100e:	4606      	mov	r6, r0
 8011010:	dd7a      	ble.n	8011108 <_dtoa_r+0x8d0>
 8011012:	f04f 0800 	mov.w	r8, #0
 8011016:	6933      	ldr	r3, [r6, #16]
 8011018:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801101c:	6918      	ldr	r0, [r3, #16]
 801101e:	f000 fbef 	bl	8011800 <__hi0bits>
 8011022:	f1c0 0020 	rsb	r0, r0, #32
 8011026:	9b06      	ldr	r3, [sp, #24]
 8011028:	4418      	add	r0, r3
 801102a:	f010 001f 	ands.w	r0, r0, #31
 801102e:	f000 8094 	beq.w	801115a <_dtoa_r+0x922>
 8011032:	f1c0 0320 	rsb	r3, r0, #32
 8011036:	2b04      	cmp	r3, #4
 8011038:	f340 8085 	ble.w	8011146 <_dtoa_r+0x90e>
 801103c:	9b05      	ldr	r3, [sp, #20]
 801103e:	f1c0 001c 	rsb	r0, r0, #28
 8011042:	4403      	add	r3, r0
 8011044:	9305      	str	r3, [sp, #20]
 8011046:	9b06      	ldr	r3, [sp, #24]
 8011048:	4403      	add	r3, r0
 801104a:	4405      	add	r5, r0
 801104c:	9306      	str	r3, [sp, #24]
 801104e:	9b05      	ldr	r3, [sp, #20]
 8011050:	2b00      	cmp	r3, #0
 8011052:	dd05      	ble.n	8011060 <_dtoa_r+0x828>
 8011054:	4651      	mov	r1, sl
 8011056:	461a      	mov	r2, r3
 8011058:	4620      	mov	r0, r4
 801105a:	f000 fd39 	bl	8011ad0 <__lshift>
 801105e:	4682      	mov	sl, r0
 8011060:	9b06      	ldr	r3, [sp, #24]
 8011062:	2b00      	cmp	r3, #0
 8011064:	dd05      	ble.n	8011072 <_dtoa_r+0x83a>
 8011066:	4631      	mov	r1, r6
 8011068:	461a      	mov	r2, r3
 801106a:	4620      	mov	r0, r4
 801106c:	f000 fd30 	bl	8011ad0 <__lshift>
 8011070:	4606      	mov	r6, r0
 8011072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011074:	2b00      	cmp	r3, #0
 8011076:	d072      	beq.n	801115e <_dtoa_r+0x926>
 8011078:	4631      	mov	r1, r6
 801107a:	4650      	mov	r0, sl
 801107c:	f000 fd94 	bl	8011ba8 <__mcmp>
 8011080:	2800      	cmp	r0, #0
 8011082:	da6c      	bge.n	801115e <_dtoa_r+0x926>
 8011084:	2300      	movs	r3, #0
 8011086:	4651      	mov	r1, sl
 8011088:	220a      	movs	r2, #10
 801108a:	4620      	mov	r0, r4
 801108c:	f000 fb28 	bl	80116e0 <__multadd>
 8011090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011092:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011096:	4682      	mov	sl, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	f000 81b0 	beq.w	80113fe <_dtoa_r+0xbc6>
 801109e:	2300      	movs	r3, #0
 80110a0:	4639      	mov	r1, r7
 80110a2:	220a      	movs	r2, #10
 80110a4:	4620      	mov	r0, r4
 80110a6:	f000 fb1b 	bl	80116e0 <__multadd>
 80110aa:	9b01      	ldr	r3, [sp, #4]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	4607      	mov	r7, r0
 80110b0:	f300 8096 	bgt.w	80111e0 <_dtoa_r+0x9a8>
 80110b4:	9b07      	ldr	r3, [sp, #28]
 80110b6:	2b02      	cmp	r3, #2
 80110b8:	dc59      	bgt.n	801116e <_dtoa_r+0x936>
 80110ba:	e091      	b.n	80111e0 <_dtoa_r+0x9a8>
 80110bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80110c2:	e758      	b.n	8010f76 <_dtoa_r+0x73e>
 80110c4:	9b04      	ldr	r3, [sp, #16]
 80110c6:	1e5e      	subs	r6, r3, #1
 80110c8:	9b08      	ldr	r3, [sp, #32]
 80110ca:	42b3      	cmp	r3, r6
 80110cc:	bfbf      	itttt	lt
 80110ce:	9b08      	ldrlt	r3, [sp, #32]
 80110d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80110d2:	9608      	strlt	r6, [sp, #32]
 80110d4:	1af3      	sublt	r3, r6, r3
 80110d6:	bfb4      	ite	lt
 80110d8:	18d2      	addlt	r2, r2, r3
 80110da:	1b9e      	subge	r6, r3, r6
 80110dc:	9b04      	ldr	r3, [sp, #16]
 80110de:	bfbc      	itt	lt
 80110e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80110e2:	2600      	movlt	r6, #0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	bfb7      	itett	lt
 80110e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80110ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80110f0:	1a9d      	sublt	r5, r3, r2
 80110f2:	2300      	movlt	r3, #0
 80110f4:	e741      	b.n	8010f7a <_dtoa_r+0x742>
 80110f6:	9e08      	ldr	r6, [sp, #32]
 80110f8:	9d05      	ldr	r5, [sp, #20]
 80110fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80110fc:	e748      	b.n	8010f90 <_dtoa_r+0x758>
 80110fe:	9a08      	ldr	r2, [sp, #32]
 8011100:	e770      	b.n	8010fe4 <_dtoa_r+0x7ac>
 8011102:	9b07      	ldr	r3, [sp, #28]
 8011104:	2b01      	cmp	r3, #1
 8011106:	dc19      	bgt.n	801113c <_dtoa_r+0x904>
 8011108:	9b02      	ldr	r3, [sp, #8]
 801110a:	b9bb      	cbnz	r3, 801113c <_dtoa_r+0x904>
 801110c:	9b03      	ldr	r3, [sp, #12]
 801110e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011112:	b99b      	cbnz	r3, 801113c <_dtoa_r+0x904>
 8011114:	9b03      	ldr	r3, [sp, #12]
 8011116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801111a:	0d1b      	lsrs	r3, r3, #20
 801111c:	051b      	lsls	r3, r3, #20
 801111e:	b183      	cbz	r3, 8011142 <_dtoa_r+0x90a>
 8011120:	9b05      	ldr	r3, [sp, #20]
 8011122:	3301      	adds	r3, #1
 8011124:	9305      	str	r3, [sp, #20]
 8011126:	9b06      	ldr	r3, [sp, #24]
 8011128:	3301      	adds	r3, #1
 801112a:	9306      	str	r3, [sp, #24]
 801112c:	f04f 0801 	mov.w	r8, #1
 8011130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011132:	2b00      	cmp	r3, #0
 8011134:	f47f af6f 	bne.w	8011016 <_dtoa_r+0x7de>
 8011138:	2001      	movs	r0, #1
 801113a:	e774      	b.n	8011026 <_dtoa_r+0x7ee>
 801113c:	f04f 0800 	mov.w	r8, #0
 8011140:	e7f6      	b.n	8011130 <_dtoa_r+0x8f8>
 8011142:	4698      	mov	r8, r3
 8011144:	e7f4      	b.n	8011130 <_dtoa_r+0x8f8>
 8011146:	d082      	beq.n	801104e <_dtoa_r+0x816>
 8011148:	9a05      	ldr	r2, [sp, #20]
 801114a:	331c      	adds	r3, #28
 801114c:	441a      	add	r2, r3
 801114e:	9205      	str	r2, [sp, #20]
 8011150:	9a06      	ldr	r2, [sp, #24]
 8011152:	441a      	add	r2, r3
 8011154:	441d      	add	r5, r3
 8011156:	9206      	str	r2, [sp, #24]
 8011158:	e779      	b.n	801104e <_dtoa_r+0x816>
 801115a:	4603      	mov	r3, r0
 801115c:	e7f4      	b.n	8011148 <_dtoa_r+0x910>
 801115e:	9b04      	ldr	r3, [sp, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	dc37      	bgt.n	80111d4 <_dtoa_r+0x99c>
 8011164:	9b07      	ldr	r3, [sp, #28]
 8011166:	2b02      	cmp	r3, #2
 8011168:	dd34      	ble.n	80111d4 <_dtoa_r+0x99c>
 801116a:	9b04      	ldr	r3, [sp, #16]
 801116c:	9301      	str	r3, [sp, #4]
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	b963      	cbnz	r3, 801118c <_dtoa_r+0x954>
 8011172:	4631      	mov	r1, r6
 8011174:	2205      	movs	r2, #5
 8011176:	4620      	mov	r0, r4
 8011178:	f000 fab2 	bl	80116e0 <__multadd>
 801117c:	4601      	mov	r1, r0
 801117e:	4606      	mov	r6, r0
 8011180:	4650      	mov	r0, sl
 8011182:	f000 fd11 	bl	8011ba8 <__mcmp>
 8011186:	2800      	cmp	r0, #0
 8011188:	f73f adbb 	bgt.w	8010d02 <_dtoa_r+0x4ca>
 801118c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801118e:	9d00      	ldr	r5, [sp, #0]
 8011190:	ea6f 0b03 	mvn.w	fp, r3
 8011194:	f04f 0800 	mov.w	r8, #0
 8011198:	4631      	mov	r1, r6
 801119a:	4620      	mov	r0, r4
 801119c:	f000 fa7e 	bl	801169c <_Bfree>
 80111a0:	2f00      	cmp	r7, #0
 80111a2:	f43f aeab 	beq.w	8010efc <_dtoa_r+0x6c4>
 80111a6:	f1b8 0f00 	cmp.w	r8, #0
 80111aa:	d005      	beq.n	80111b8 <_dtoa_r+0x980>
 80111ac:	45b8      	cmp	r8, r7
 80111ae:	d003      	beq.n	80111b8 <_dtoa_r+0x980>
 80111b0:	4641      	mov	r1, r8
 80111b2:	4620      	mov	r0, r4
 80111b4:	f000 fa72 	bl	801169c <_Bfree>
 80111b8:	4639      	mov	r1, r7
 80111ba:	4620      	mov	r0, r4
 80111bc:	f000 fa6e 	bl	801169c <_Bfree>
 80111c0:	e69c      	b.n	8010efc <_dtoa_r+0x6c4>
 80111c2:	2600      	movs	r6, #0
 80111c4:	4637      	mov	r7, r6
 80111c6:	e7e1      	b.n	801118c <_dtoa_r+0x954>
 80111c8:	46bb      	mov	fp, r7
 80111ca:	4637      	mov	r7, r6
 80111cc:	e599      	b.n	8010d02 <_dtoa_r+0x4ca>
 80111ce:	bf00      	nop
 80111d0:	40240000 	.word	0x40240000
 80111d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f000 80c8 	beq.w	801136c <_dtoa_r+0xb34>
 80111dc:	9b04      	ldr	r3, [sp, #16]
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	2d00      	cmp	r5, #0
 80111e2:	dd05      	ble.n	80111f0 <_dtoa_r+0x9b8>
 80111e4:	4639      	mov	r1, r7
 80111e6:	462a      	mov	r2, r5
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 fc71 	bl	8011ad0 <__lshift>
 80111ee:	4607      	mov	r7, r0
 80111f0:	f1b8 0f00 	cmp.w	r8, #0
 80111f4:	d05b      	beq.n	80112ae <_dtoa_r+0xa76>
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	4620      	mov	r0, r4
 80111fa:	f000 fa0f 	bl	801161c <_Balloc>
 80111fe:	4605      	mov	r5, r0
 8011200:	b928      	cbnz	r0, 801120e <_dtoa_r+0x9d6>
 8011202:	4b83      	ldr	r3, [pc, #524]	; (8011410 <_dtoa_r+0xbd8>)
 8011204:	4602      	mov	r2, r0
 8011206:	f240 21ef 	movw	r1, #751	; 0x2ef
 801120a:	f7ff bb2e 	b.w	801086a <_dtoa_r+0x32>
 801120e:	693a      	ldr	r2, [r7, #16]
 8011210:	3202      	adds	r2, #2
 8011212:	0092      	lsls	r2, r2, #2
 8011214:	f107 010c 	add.w	r1, r7, #12
 8011218:	300c      	adds	r0, #12
 801121a:	f7ff fa66 	bl	80106ea <memcpy>
 801121e:	2201      	movs	r2, #1
 8011220:	4629      	mov	r1, r5
 8011222:	4620      	mov	r0, r4
 8011224:	f000 fc54 	bl	8011ad0 <__lshift>
 8011228:	9b00      	ldr	r3, [sp, #0]
 801122a:	3301      	adds	r3, #1
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011232:	4413      	add	r3, r2
 8011234:	9308      	str	r3, [sp, #32]
 8011236:	9b02      	ldr	r3, [sp, #8]
 8011238:	f003 0301 	and.w	r3, r3, #1
 801123c:	46b8      	mov	r8, r7
 801123e:	9306      	str	r3, [sp, #24]
 8011240:	4607      	mov	r7, r0
 8011242:	9b04      	ldr	r3, [sp, #16]
 8011244:	4631      	mov	r1, r6
 8011246:	3b01      	subs	r3, #1
 8011248:	4650      	mov	r0, sl
 801124a:	9301      	str	r3, [sp, #4]
 801124c:	f7ff fa69 	bl	8010722 <quorem>
 8011250:	4641      	mov	r1, r8
 8011252:	9002      	str	r0, [sp, #8]
 8011254:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011258:	4650      	mov	r0, sl
 801125a:	f000 fca5 	bl	8011ba8 <__mcmp>
 801125e:	463a      	mov	r2, r7
 8011260:	9005      	str	r0, [sp, #20]
 8011262:	4631      	mov	r1, r6
 8011264:	4620      	mov	r0, r4
 8011266:	f000 fcbb 	bl	8011be0 <__mdiff>
 801126a:	68c2      	ldr	r2, [r0, #12]
 801126c:	4605      	mov	r5, r0
 801126e:	bb02      	cbnz	r2, 80112b2 <_dtoa_r+0xa7a>
 8011270:	4601      	mov	r1, r0
 8011272:	4650      	mov	r0, sl
 8011274:	f000 fc98 	bl	8011ba8 <__mcmp>
 8011278:	4602      	mov	r2, r0
 801127a:	4629      	mov	r1, r5
 801127c:	4620      	mov	r0, r4
 801127e:	9209      	str	r2, [sp, #36]	; 0x24
 8011280:	f000 fa0c 	bl	801169c <_Bfree>
 8011284:	9b07      	ldr	r3, [sp, #28]
 8011286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011288:	9d04      	ldr	r5, [sp, #16]
 801128a:	ea43 0102 	orr.w	r1, r3, r2
 801128e:	9b06      	ldr	r3, [sp, #24]
 8011290:	4319      	orrs	r1, r3
 8011292:	d110      	bne.n	80112b6 <_dtoa_r+0xa7e>
 8011294:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011298:	d029      	beq.n	80112ee <_dtoa_r+0xab6>
 801129a:	9b05      	ldr	r3, [sp, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	dd02      	ble.n	80112a6 <_dtoa_r+0xa6e>
 80112a0:	9b02      	ldr	r3, [sp, #8]
 80112a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80112a6:	9b01      	ldr	r3, [sp, #4]
 80112a8:	f883 9000 	strb.w	r9, [r3]
 80112ac:	e774      	b.n	8011198 <_dtoa_r+0x960>
 80112ae:	4638      	mov	r0, r7
 80112b0:	e7ba      	b.n	8011228 <_dtoa_r+0x9f0>
 80112b2:	2201      	movs	r2, #1
 80112b4:	e7e1      	b.n	801127a <_dtoa_r+0xa42>
 80112b6:	9b05      	ldr	r3, [sp, #20]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	db04      	blt.n	80112c6 <_dtoa_r+0xa8e>
 80112bc:	9907      	ldr	r1, [sp, #28]
 80112be:	430b      	orrs	r3, r1
 80112c0:	9906      	ldr	r1, [sp, #24]
 80112c2:	430b      	orrs	r3, r1
 80112c4:	d120      	bne.n	8011308 <_dtoa_r+0xad0>
 80112c6:	2a00      	cmp	r2, #0
 80112c8:	dded      	ble.n	80112a6 <_dtoa_r+0xa6e>
 80112ca:	4651      	mov	r1, sl
 80112cc:	2201      	movs	r2, #1
 80112ce:	4620      	mov	r0, r4
 80112d0:	f000 fbfe 	bl	8011ad0 <__lshift>
 80112d4:	4631      	mov	r1, r6
 80112d6:	4682      	mov	sl, r0
 80112d8:	f000 fc66 	bl	8011ba8 <__mcmp>
 80112dc:	2800      	cmp	r0, #0
 80112de:	dc03      	bgt.n	80112e8 <_dtoa_r+0xab0>
 80112e0:	d1e1      	bne.n	80112a6 <_dtoa_r+0xa6e>
 80112e2:	f019 0f01 	tst.w	r9, #1
 80112e6:	d0de      	beq.n	80112a6 <_dtoa_r+0xa6e>
 80112e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80112ec:	d1d8      	bne.n	80112a0 <_dtoa_r+0xa68>
 80112ee:	9a01      	ldr	r2, [sp, #4]
 80112f0:	2339      	movs	r3, #57	; 0x39
 80112f2:	7013      	strb	r3, [r2, #0]
 80112f4:	462b      	mov	r3, r5
 80112f6:	461d      	mov	r5, r3
 80112f8:	3b01      	subs	r3, #1
 80112fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80112fe:	2a39      	cmp	r2, #57	; 0x39
 8011300:	d06c      	beq.n	80113dc <_dtoa_r+0xba4>
 8011302:	3201      	adds	r2, #1
 8011304:	701a      	strb	r2, [r3, #0]
 8011306:	e747      	b.n	8011198 <_dtoa_r+0x960>
 8011308:	2a00      	cmp	r2, #0
 801130a:	dd07      	ble.n	801131c <_dtoa_r+0xae4>
 801130c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011310:	d0ed      	beq.n	80112ee <_dtoa_r+0xab6>
 8011312:	9a01      	ldr	r2, [sp, #4]
 8011314:	f109 0301 	add.w	r3, r9, #1
 8011318:	7013      	strb	r3, [r2, #0]
 801131a:	e73d      	b.n	8011198 <_dtoa_r+0x960>
 801131c:	9b04      	ldr	r3, [sp, #16]
 801131e:	9a08      	ldr	r2, [sp, #32]
 8011320:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011324:	4293      	cmp	r3, r2
 8011326:	d043      	beq.n	80113b0 <_dtoa_r+0xb78>
 8011328:	4651      	mov	r1, sl
 801132a:	2300      	movs	r3, #0
 801132c:	220a      	movs	r2, #10
 801132e:	4620      	mov	r0, r4
 8011330:	f000 f9d6 	bl	80116e0 <__multadd>
 8011334:	45b8      	cmp	r8, r7
 8011336:	4682      	mov	sl, r0
 8011338:	f04f 0300 	mov.w	r3, #0
 801133c:	f04f 020a 	mov.w	r2, #10
 8011340:	4641      	mov	r1, r8
 8011342:	4620      	mov	r0, r4
 8011344:	d107      	bne.n	8011356 <_dtoa_r+0xb1e>
 8011346:	f000 f9cb 	bl	80116e0 <__multadd>
 801134a:	4680      	mov	r8, r0
 801134c:	4607      	mov	r7, r0
 801134e:	9b04      	ldr	r3, [sp, #16]
 8011350:	3301      	adds	r3, #1
 8011352:	9304      	str	r3, [sp, #16]
 8011354:	e775      	b.n	8011242 <_dtoa_r+0xa0a>
 8011356:	f000 f9c3 	bl	80116e0 <__multadd>
 801135a:	4639      	mov	r1, r7
 801135c:	4680      	mov	r8, r0
 801135e:	2300      	movs	r3, #0
 8011360:	220a      	movs	r2, #10
 8011362:	4620      	mov	r0, r4
 8011364:	f000 f9bc 	bl	80116e0 <__multadd>
 8011368:	4607      	mov	r7, r0
 801136a:	e7f0      	b.n	801134e <_dtoa_r+0xb16>
 801136c:	9b04      	ldr	r3, [sp, #16]
 801136e:	9301      	str	r3, [sp, #4]
 8011370:	9d00      	ldr	r5, [sp, #0]
 8011372:	4631      	mov	r1, r6
 8011374:	4650      	mov	r0, sl
 8011376:	f7ff f9d4 	bl	8010722 <quorem>
 801137a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801137e:	9b00      	ldr	r3, [sp, #0]
 8011380:	f805 9b01 	strb.w	r9, [r5], #1
 8011384:	1aea      	subs	r2, r5, r3
 8011386:	9b01      	ldr	r3, [sp, #4]
 8011388:	4293      	cmp	r3, r2
 801138a:	dd07      	ble.n	801139c <_dtoa_r+0xb64>
 801138c:	4651      	mov	r1, sl
 801138e:	2300      	movs	r3, #0
 8011390:	220a      	movs	r2, #10
 8011392:	4620      	mov	r0, r4
 8011394:	f000 f9a4 	bl	80116e0 <__multadd>
 8011398:	4682      	mov	sl, r0
 801139a:	e7ea      	b.n	8011372 <_dtoa_r+0xb3a>
 801139c:	9b01      	ldr	r3, [sp, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	bfc8      	it	gt
 80113a2:	461d      	movgt	r5, r3
 80113a4:	9b00      	ldr	r3, [sp, #0]
 80113a6:	bfd8      	it	le
 80113a8:	2501      	movle	r5, #1
 80113aa:	441d      	add	r5, r3
 80113ac:	f04f 0800 	mov.w	r8, #0
 80113b0:	4651      	mov	r1, sl
 80113b2:	2201      	movs	r2, #1
 80113b4:	4620      	mov	r0, r4
 80113b6:	f000 fb8b 	bl	8011ad0 <__lshift>
 80113ba:	4631      	mov	r1, r6
 80113bc:	4682      	mov	sl, r0
 80113be:	f000 fbf3 	bl	8011ba8 <__mcmp>
 80113c2:	2800      	cmp	r0, #0
 80113c4:	dc96      	bgt.n	80112f4 <_dtoa_r+0xabc>
 80113c6:	d102      	bne.n	80113ce <_dtoa_r+0xb96>
 80113c8:	f019 0f01 	tst.w	r9, #1
 80113cc:	d192      	bne.n	80112f4 <_dtoa_r+0xabc>
 80113ce:	462b      	mov	r3, r5
 80113d0:	461d      	mov	r5, r3
 80113d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113d6:	2a30      	cmp	r2, #48	; 0x30
 80113d8:	d0fa      	beq.n	80113d0 <_dtoa_r+0xb98>
 80113da:	e6dd      	b.n	8011198 <_dtoa_r+0x960>
 80113dc:	9a00      	ldr	r2, [sp, #0]
 80113de:	429a      	cmp	r2, r3
 80113e0:	d189      	bne.n	80112f6 <_dtoa_r+0xabe>
 80113e2:	f10b 0b01 	add.w	fp, fp, #1
 80113e6:	2331      	movs	r3, #49	; 0x31
 80113e8:	e796      	b.n	8011318 <_dtoa_r+0xae0>
 80113ea:	4b0a      	ldr	r3, [pc, #40]	; (8011414 <_dtoa_r+0xbdc>)
 80113ec:	f7ff ba99 	b.w	8010922 <_dtoa_r+0xea>
 80113f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f47f aa6d 	bne.w	80108d2 <_dtoa_r+0x9a>
 80113f8:	4b07      	ldr	r3, [pc, #28]	; (8011418 <_dtoa_r+0xbe0>)
 80113fa:	f7ff ba92 	b.w	8010922 <_dtoa_r+0xea>
 80113fe:	9b01      	ldr	r3, [sp, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	dcb5      	bgt.n	8011370 <_dtoa_r+0xb38>
 8011404:	9b07      	ldr	r3, [sp, #28]
 8011406:	2b02      	cmp	r3, #2
 8011408:	f73f aeb1 	bgt.w	801116e <_dtoa_r+0x936>
 801140c:	e7b0      	b.n	8011370 <_dtoa_r+0xb38>
 801140e:	bf00      	nop
 8011410:	08015402 	.word	0x08015402
 8011414:	08015303 	.word	0x08015303
 8011418:	0801539d 	.word	0x0801539d

0801141c <_free_r>:
 801141c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801141e:	2900      	cmp	r1, #0
 8011420:	d044      	beq.n	80114ac <_free_r+0x90>
 8011422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011426:	9001      	str	r0, [sp, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	f1a1 0404 	sub.w	r4, r1, #4
 801142e:	bfb8      	it	lt
 8011430:	18e4      	addlt	r4, r4, r3
 8011432:	f000 f8e7 	bl	8011604 <__malloc_lock>
 8011436:	4a1e      	ldr	r2, [pc, #120]	; (80114b0 <_free_r+0x94>)
 8011438:	9801      	ldr	r0, [sp, #4]
 801143a:	6813      	ldr	r3, [r2, #0]
 801143c:	b933      	cbnz	r3, 801144c <_free_r+0x30>
 801143e:	6063      	str	r3, [r4, #4]
 8011440:	6014      	str	r4, [r2, #0]
 8011442:	b003      	add	sp, #12
 8011444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011448:	f000 b8e2 	b.w	8011610 <__malloc_unlock>
 801144c:	42a3      	cmp	r3, r4
 801144e:	d908      	bls.n	8011462 <_free_r+0x46>
 8011450:	6825      	ldr	r5, [r4, #0]
 8011452:	1961      	adds	r1, r4, r5
 8011454:	428b      	cmp	r3, r1
 8011456:	bf01      	itttt	eq
 8011458:	6819      	ldreq	r1, [r3, #0]
 801145a:	685b      	ldreq	r3, [r3, #4]
 801145c:	1949      	addeq	r1, r1, r5
 801145e:	6021      	streq	r1, [r4, #0]
 8011460:	e7ed      	b.n	801143e <_free_r+0x22>
 8011462:	461a      	mov	r2, r3
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	b10b      	cbz	r3, 801146c <_free_r+0x50>
 8011468:	42a3      	cmp	r3, r4
 801146a:	d9fa      	bls.n	8011462 <_free_r+0x46>
 801146c:	6811      	ldr	r1, [r2, #0]
 801146e:	1855      	adds	r5, r2, r1
 8011470:	42a5      	cmp	r5, r4
 8011472:	d10b      	bne.n	801148c <_free_r+0x70>
 8011474:	6824      	ldr	r4, [r4, #0]
 8011476:	4421      	add	r1, r4
 8011478:	1854      	adds	r4, r2, r1
 801147a:	42a3      	cmp	r3, r4
 801147c:	6011      	str	r1, [r2, #0]
 801147e:	d1e0      	bne.n	8011442 <_free_r+0x26>
 8011480:	681c      	ldr	r4, [r3, #0]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	6053      	str	r3, [r2, #4]
 8011486:	440c      	add	r4, r1
 8011488:	6014      	str	r4, [r2, #0]
 801148a:	e7da      	b.n	8011442 <_free_r+0x26>
 801148c:	d902      	bls.n	8011494 <_free_r+0x78>
 801148e:	230c      	movs	r3, #12
 8011490:	6003      	str	r3, [r0, #0]
 8011492:	e7d6      	b.n	8011442 <_free_r+0x26>
 8011494:	6825      	ldr	r5, [r4, #0]
 8011496:	1961      	adds	r1, r4, r5
 8011498:	428b      	cmp	r3, r1
 801149a:	bf04      	itt	eq
 801149c:	6819      	ldreq	r1, [r3, #0]
 801149e:	685b      	ldreq	r3, [r3, #4]
 80114a0:	6063      	str	r3, [r4, #4]
 80114a2:	bf04      	itt	eq
 80114a4:	1949      	addeq	r1, r1, r5
 80114a6:	6021      	streq	r1, [r4, #0]
 80114a8:	6054      	str	r4, [r2, #4]
 80114aa:	e7ca      	b.n	8011442 <_free_r+0x26>
 80114ac:	b003      	add	sp, #12
 80114ae:	bd30      	pop	{r4, r5, pc}
 80114b0:	20003a08 	.word	0x20003a08

080114b4 <malloc>:
 80114b4:	4b02      	ldr	r3, [pc, #8]	; (80114c0 <malloc+0xc>)
 80114b6:	4601      	mov	r1, r0
 80114b8:	6818      	ldr	r0, [r3, #0]
 80114ba:	f000 b823 	b.w	8011504 <_malloc_r>
 80114be:	bf00      	nop
 80114c0:	20000090 	.word	0x20000090

080114c4 <sbrk_aligned>:
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	4e0e      	ldr	r6, [pc, #56]	; (8011500 <sbrk_aligned+0x3c>)
 80114c8:	460c      	mov	r4, r1
 80114ca:	6831      	ldr	r1, [r6, #0]
 80114cc:	4605      	mov	r5, r0
 80114ce:	b911      	cbnz	r1, 80114d6 <sbrk_aligned+0x12>
 80114d0:	f001 fffa 	bl	80134c8 <_sbrk_r>
 80114d4:	6030      	str	r0, [r6, #0]
 80114d6:	4621      	mov	r1, r4
 80114d8:	4628      	mov	r0, r5
 80114da:	f001 fff5 	bl	80134c8 <_sbrk_r>
 80114de:	1c43      	adds	r3, r0, #1
 80114e0:	d00a      	beq.n	80114f8 <sbrk_aligned+0x34>
 80114e2:	1cc4      	adds	r4, r0, #3
 80114e4:	f024 0403 	bic.w	r4, r4, #3
 80114e8:	42a0      	cmp	r0, r4
 80114ea:	d007      	beq.n	80114fc <sbrk_aligned+0x38>
 80114ec:	1a21      	subs	r1, r4, r0
 80114ee:	4628      	mov	r0, r5
 80114f0:	f001 ffea 	bl	80134c8 <_sbrk_r>
 80114f4:	3001      	adds	r0, #1
 80114f6:	d101      	bne.n	80114fc <sbrk_aligned+0x38>
 80114f8:	f04f 34ff 	mov.w	r4, #4294967295
 80114fc:	4620      	mov	r0, r4
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	20003a0c 	.word	0x20003a0c

08011504 <_malloc_r>:
 8011504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011508:	1ccd      	adds	r5, r1, #3
 801150a:	f025 0503 	bic.w	r5, r5, #3
 801150e:	3508      	adds	r5, #8
 8011510:	2d0c      	cmp	r5, #12
 8011512:	bf38      	it	cc
 8011514:	250c      	movcc	r5, #12
 8011516:	2d00      	cmp	r5, #0
 8011518:	4607      	mov	r7, r0
 801151a:	db01      	blt.n	8011520 <_malloc_r+0x1c>
 801151c:	42a9      	cmp	r1, r5
 801151e:	d905      	bls.n	801152c <_malloc_r+0x28>
 8011520:	230c      	movs	r3, #12
 8011522:	603b      	str	r3, [r7, #0]
 8011524:	2600      	movs	r6, #0
 8011526:	4630      	mov	r0, r6
 8011528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801152c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011600 <_malloc_r+0xfc>
 8011530:	f000 f868 	bl	8011604 <__malloc_lock>
 8011534:	f8d8 3000 	ldr.w	r3, [r8]
 8011538:	461c      	mov	r4, r3
 801153a:	bb5c      	cbnz	r4, 8011594 <_malloc_r+0x90>
 801153c:	4629      	mov	r1, r5
 801153e:	4638      	mov	r0, r7
 8011540:	f7ff ffc0 	bl	80114c4 <sbrk_aligned>
 8011544:	1c43      	adds	r3, r0, #1
 8011546:	4604      	mov	r4, r0
 8011548:	d155      	bne.n	80115f6 <_malloc_r+0xf2>
 801154a:	f8d8 4000 	ldr.w	r4, [r8]
 801154e:	4626      	mov	r6, r4
 8011550:	2e00      	cmp	r6, #0
 8011552:	d145      	bne.n	80115e0 <_malloc_r+0xdc>
 8011554:	2c00      	cmp	r4, #0
 8011556:	d048      	beq.n	80115ea <_malloc_r+0xe6>
 8011558:	6823      	ldr	r3, [r4, #0]
 801155a:	4631      	mov	r1, r6
 801155c:	4638      	mov	r0, r7
 801155e:	eb04 0903 	add.w	r9, r4, r3
 8011562:	f001 ffb1 	bl	80134c8 <_sbrk_r>
 8011566:	4581      	cmp	r9, r0
 8011568:	d13f      	bne.n	80115ea <_malloc_r+0xe6>
 801156a:	6821      	ldr	r1, [r4, #0]
 801156c:	1a6d      	subs	r5, r5, r1
 801156e:	4629      	mov	r1, r5
 8011570:	4638      	mov	r0, r7
 8011572:	f7ff ffa7 	bl	80114c4 <sbrk_aligned>
 8011576:	3001      	adds	r0, #1
 8011578:	d037      	beq.n	80115ea <_malloc_r+0xe6>
 801157a:	6823      	ldr	r3, [r4, #0]
 801157c:	442b      	add	r3, r5
 801157e:	6023      	str	r3, [r4, #0]
 8011580:	f8d8 3000 	ldr.w	r3, [r8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d038      	beq.n	80115fa <_malloc_r+0xf6>
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	42a2      	cmp	r2, r4
 801158c:	d12b      	bne.n	80115e6 <_malloc_r+0xe2>
 801158e:	2200      	movs	r2, #0
 8011590:	605a      	str	r2, [r3, #4]
 8011592:	e00f      	b.n	80115b4 <_malloc_r+0xb0>
 8011594:	6822      	ldr	r2, [r4, #0]
 8011596:	1b52      	subs	r2, r2, r5
 8011598:	d41f      	bmi.n	80115da <_malloc_r+0xd6>
 801159a:	2a0b      	cmp	r2, #11
 801159c:	d917      	bls.n	80115ce <_malloc_r+0xca>
 801159e:	1961      	adds	r1, r4, r5
 80115a0:	42a3      	cmp	r3, r4
 80115a2:	6025      	str	r5, [r4, #0]
 80115a4:	bf18      	it	ne
 80115a6:	6059      	strne	r1, [r3, #4]
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	bf08      	it	eq
 80115ac:	f8c8 1000 	streq.w	r1, [r8]
 80115b0:	5162      	str	r2, [r4, r5]
 80115b2:	604b      	str	r3, [r1, #4]
 80115b4:	4638      	mov	r0, r7
 80115b6:	f104 060b 	add.w	r6, r4, #11
 80115ba:	f000 f829 	bl	8011610 <__malloc_unlock>
 80115be:	f026 0607 	bic.w	r6, r6, #7
 80115c2:	1d23      	adds	r3, r4, #4
 80115c4:	1af2      	subs	r2, r6, r3
 80115c6:	d0ae      	beq.n	8011526 <_malloc_r+0x22>
 80115c8:	1b9b      	subs	r3, r3, r6
 80115ca:	50a3      	str	r3, [r4, r2]
 80115cc:	e7ab      	b.n	8011526 <_malloc_r+0x22>
 80115ce:	42a3      	cmp	r3, r4
 80115d0:	6862      	ldr	r2, [r4, #4]
 80115d2:	d1dd      	bne.n	8011590 <_malloc_r+0x8c>
 80115d4:	f8c8 2000 	str.w	r2, [r8]
 80115d8:	e7ec      	b.n	80115b4 <_malloc_r+0xb0>
 80115da:	4623      	mov	r3, r4
 80115dc:	6864      	ldr	r4, [r4, #4]
 80115de:	e7ac      	b.n	801153a <_malloc_r+0x36>
 80115e0:	4634      	mov	r4, r6
 80115e2:	6876      	ldr	r6, [r6, #4]
 80115e4:	e7b4      	b.n	8011550 <_malloc_r+0x4c>
 80115e6:	4613      	mov	r3, r2
 80115e8:	e7cc      	b.n	8011584 <_malloc_r+0x80>
 80115ea:	230c      	movs	r3, #12
 80115ec:	603b      	str	r3, [r7, #0]
 80115ee:	4638      	mov	r0, r7
 80115f0:	f000 f80e 	bl	8011610 <__malloc_unlock>
 80115f4:	e797      	b.n	8011526 <_malloc_r+0x22>
 80115f6:	6025      	str	r5, [r4, #0]
 80115f8:	e7dc      	b.n	80115b4 <_malloc_r+0xb0>
 80115fa:	605b      	str	r3, [r3, #4]
 80115fc:	deff      	udf	#255	; 0xff
 80115fe:	bf00      	nop
 8011600:	20003a08 	.word	0x20003a08

08011604 <__malloc_lock>:
 8011604:	4801      	ldr	r0, [pc, #4]	; (801160c <__malloc_lock+0x8>)
 8011606:	f7ff b86e 	b.w	80106e6 <__retarget_lock_acquire_recursive>
 801160a:	bf00      	nop
 801160c:	20003a04 	.word	0x20003a04

08011610 <__malloc_unlock>:
 8011610:	4801      	ldr	r0, [pc, #4]	; (8011618 <__malloc_unlock+0x8>)
 8011612:	f7ff b869 	b.w	80106e8 <__retarget_lock_release_recursive>
 8011616:	bf00      	nop
 8011618:	20003a04 	.word	0x20003a04

0801161c <_Balloc>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	69c6      	ldr	r6, [r0, #28]
 8011620:	4604      	mov	r4, r0
 8011622:	460d      	mov	r5, r1
 8011624:	b976      	cbnz	r6, 8011644 <_Balloc+0x28>
 8011626:	2010      	movs	r0, #16
 8011628:	f7ff ff44 	bl	80114b4 <malloc>
 801162c:	4602      	mov	r2, r0
 801162e:	61e0      	str	r0, [r4, #28]
 8011630:	b920      	cbnz	r0, 801163c <_Balloc+0x20>
 8011632:	4b18      	ldr	r3, [pc, #96]	; (8011694 <_Balloc+0x78>)
 8011634:	4818      	ldr	r0, [pc, #96]	; (8011698 <_Balloc+0x7c>)
 8011636:	216b      	movs	r1, #107	; 0x6b
 8011638:	f7fd fe48 	bl	800f2cc <__assert_func>
 801163c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011640:	6006      	str	r6, [r0, #0]
 8011642:	60c6      	str	r6, [r0, #12]
 8011644:	69e6      	ldr	r6, [r4, #28]
 8011646:	68f3      	ldr	r3, [r6, #12]
 8011648:	b183      	cbz	r3, 801166c <_Balloc+0x50>
 801164a:	69e3      	ldr	r3, [r4, #28]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011652:	b9b8      	cbnz	r0, 8011684 <_Balloc+0x68>
 8011654:	2101      	movs	r1, #1
 8011656:	fa01 f605 	lsl.w	r6, r1, r5
 801165a:	1d72      	adds	r2, r6, #5
 801165c:	0092      	lsls	r2, r2, #2
 801165e:	4620      	mov	r0, r4
 8011660:	f001 ff4a 	bl	80134f8 <_calloc_r>
 8011664:	b160      	cbz	r0, 8011680 <_Balloc+0x64>
 8011666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801166a:	e00e      	b.n	801168a <_Balloc+0x6e>
 801166c:	2221      	movs	r2, #33	; 0x21
 801166e:	2104      	movs	r1, #4
 8011670:	4620      	mov	r0, r4
 8011672:	f001 ff41 	bl	80134f8 <_calloc_r>
 8011676:	69e3      	ldr	r3, [r4, #28]
 8011678:	60f0      	str	r0, [r6, #12]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d1e4      	bne.n	801164a <_Balloc+0x2e>
 8011680:	2000      	movs	r0, #0
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	6802      	ldr	r2, [r0, #0]
 8011686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801168a:	2300      	movs	r3, #0
 801168c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011690:	e7f7      	b.n	8011682 <_Balloc+0x66>
 8011692:	bf00      	nop
 8011694:	0801532c 	.word	0x0801532c
 8011698:	08015413 	.word	0x08015413

0801169c <_Bfree>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	69c6      	ldr	r6, [r0, #28]
 80116a0:	4605      	mov	r5, r0
 80116a2:	460c      	mov	r4, r1
 80116a4:	b976      	cbnz	r6, 80116c4 <_Bfree+0x28>
 80116a6:	2010      	movs	r0, #16
 80116a8:	f7ff ff04 	bl	80114b4 <malloc>
 80116ac:	4602      	mov	r2, r0
 80116ae:	61e8      	str	r0, [r5, #28]
 80116b0:	b920      	cbnz	r0, 80116bc <_Bfree+0x20>
 80116b2:	4b09      	ldr	r3, [pc, #36]	; (80116d8 <_Bfree+0x3c>)
 80116b4:	4809      	ldr	r0, [pc, #36]	; (80116dc <_Bfree+0x40>)
 80116b6:	218f      	movs	r1, #143	; 0x8f
 80116b8:	f7fd fe08 	bl	800f2cc <__assert_func>
 80116bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116c0:	6006      	str	r6, [r0, #0]
 80116c2:	60c6      	str	r6, [r0, #12]
 80116c4:	b13c      	cbz	r4, 80116d6 <_Bfree+0x3a>
 80116c6:	69eb      	ldr	r3, [r5, #28]
 80116c8:	6862      	ldr	r2, [r4, #4]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116d0:	6021      	str	r1, [r4, #0]
 80116d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80116d6:	bd70      	pop	{r4, r5, r6, pc}
 80116d8:	0801532c 	.word	0x0801532c
 80116dc:	08015413 	.word	0x08015413

080116e0 <__multadd>:
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	690d      	ldr	r5, [r1, #16]
 80116e6:	4607      	mov	r7, r0
 80116e8:	460c      	mov	r4, r1
 80116ea:	461e      	mov	r6, r3
 80116ec:	f101 0c14 	add.w	ip, r1, #20
 80116f0:	2000      	movs	r0, #0
 80116f2:	f8dc 3000 	ldr.w	r3, [ip]
 80116f6:	b299      	uxth	r1, r3
 80116f8:	fb02 6101 	mla	r1, r2, r1, r6
 80116fc:	0c1e      	lsrs	r6, r3, #16
 80116fe:	0c0b      	lsrs	r3, r1, #16
 8011700:	fb02 3306 	mla	r3, r2, r6, r3
 8011704:	b289      	uxth	r1, r1
 8011706:	3001      	adds	r0, #1
 8011708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801170c:	4285      	cmp	r5, r0
 801170e:	f84c 1b04 	str.w	r1, [ip], #4
 8011712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011716:	dcec      	bgt.n	80116f2 <__multadd+0x12>
 8011718:	b30e      	cbz	r6, 801175e <__multadd+0x7e>
 801171a:	68a3      	ldr	r3, [r4, #8]
 801171c:	42ab      	cmp	r3, r5
 801171e:	dc19      	bgt.n	8011754 <__multadd+0x74>
 8011720:	6861      	ldr	r1, [r4, #4]
 8011722:	4638      	mov	r0, r7
 8011724:	3101      	adds	r1, #1
 8011726:	f7ff ff79 	bl	801161c <_Balloc>
 801172a:	4680      	mov	r8, r0
 801172c:	b928      	cbnz	r0, 801173a <__multadd+0x5a>
 801172e:	4602      	mov	r2, r0
 8011730:	4b0c      	ldr	r3, [pc, #48]	; (8011764 <__multadd+0x84>)
 8011732:	480d      	ldr	r0, [pc, #52]	; (8011768 <__multadd+0x88>)
 8011734:	21ba      	movs	r1, #186	; 0xba
 8011736:	f7fd fdc9 	bl	800f2cc <__assert_func>
 801173a:	6922      	ldr	r2, [r4, #16]
 801173c:	3202      	adds	r2, #2
 801173e:	f104 010c 	add.w	r1, r4, #12
 8011742:	0092      	lsls	r2, r2, #2
 8011744:	300c      	adds	r0, #12
 8011746:	f7fe ffd0 	bl	80106ea <memcpy>
 801174a:	4621      	mov	r1, r4
 801174c:	4638      	mov	r0, r7
 801174e:	f7ff ffa5 	bl	801169c <_Bfree>
 8011752:	4644      	mov	r4, r8
 8011754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011758:	3501      	adds	r5, #1
 801175a:	615e      	str	r6, [r3, #20]
 801175c:	6125      	str	r5, [r4, #16]
 801175e:	4620      	mov	r0, r4
 8011760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011764:	08015402 	.word	0x08015402
 8011768:	08015413 	.word	0x08015413

0801176c <__s2b>:
 801176c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011770:	460c      	mov	r4, r1
 8011772:	4615      	mov	r5, r2
 8011774:	461f      	mov	r7, r3
 8011776:	2209      	movs	r2, #9
 8011778:	3308      	adds	r3, #8
 801177a:	4606      	mov	r6, r0
 801177c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011780:	2100      	movs	r1, #0
 8011782:	2201      	movs	r2, #1
 8011784:	429a      	cmp	r2, r3
 8011786:	db09      	blt.n	801179c <__s2b+0x30>
 8011788:	4630      	mov	r0, r6
 801178a:	f7ff ff47 	bl	801161c <_Balloc>
 801178e:	b940      	cbnz	r0, 80117a2 <__s2b+0x36>
 8011790:	4602      	mov	r2, r0
 8011792:	4b19      	ldr	r3, [pc, #100]	; (80117f8 <__s2b+0x8c>)
 8011794:	4819      	ldr	r0, [pc, #100]	; (80117fc <__s2b+0x90>)
 8011796:	21d3      	movs	r1, #211	; 0xd3
 8011798:	f7fd fd98 	bl	800f2cc <__assert_func>
 801179c:	0052      	lsls	r2, r2, #1
 801179e:	3101      	adds	r1, #1
 80117a0:	e7f0      	b.n	8011784 <__s2b+0x18>
 80117a2:	9b08      	ldr	r3, [sp, #32]
 80117a4:	6143      	str	r3, [r0, #20]
 80117a6:	2d09      	cmp	r5, #9
 80117a8:	f04f 0301 	mov.w	r3, #1
 80117ac:	6103      	str	r3, [r0, #16]
 80117ae:	dd16      	ble.n	80117de <__s2b+0x72>
 80117b0:	f104 0909 	add.w	r9, r4, #9
 80117b4:	46c8      	mov	r8, r9
 80117b6:	442c      	add	r4, r5
 80117b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80117bc:	4601      	mov	r1, r0
 80117be:	3b30      	subs	r3, #48	; 0x30
 80117c0:	220a      	movs	r2, #10
 80117c2:	4630      	mov	r0, r6
 80117c4:	f7ff ff8c 	bl	80116e0 <__multadd>
 80117c8:	45a0      	cmp	r8, r4
 80117ca:	d1f5      	bne.n	80117b8 <__s2b+0x4c>
 80117cc:	f1a5 0408 	sub.w	r4, r5, #8
 80117d0:	444c      	add	r4, r9
 80117d2:	1b2d      	subs	r5, r5, r4
 80117d4:	1963      	adds	r3, r4, r5
 80117d6:	42bb      	cmp	r3, r7
 80117d8:	db04      	blt.n	80117e4 <__s2b+0x78>
 80117da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117de:	340a      	adds	r4, #10
 80117e0:	2509      	movs	r5, #9
 80117e2:	e7f6      	b.n	80117d2 <__s2b+0x66>
 80117e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80117e8:	4601      	mov	r1, r0
 80117ea:	3b30      	subs	r3, #48	; 0x30
 80117ec:	220a      	movs	r2, #10
 80117ee:	4630      	mov	r0, r6
 80117f0:	f7ff ff76 	bl	80116e0 <__multadd>
 80117f4:	e7ee      	b.n	80117d4 <__s2b+0x68>
 80117f6:	bf00      	nop
 80117f8:	08015402 	.word	0x08015402
 80117fc:	08015413 	.word	0x08015413

08011800 <__hi0bits>:
 8011800:	0c03      	lsrs	r3, r0, #16
 8011802:	041b      	lsls	r3, r3, #16
 8011804:	b9d3      	cbnz	r3, 801183c <__hi0bits+0x3c>
 8011806:	0400      	lsls	r0, r0, #16
 8011808:	2310      	movs	r3, #16
 801180a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801180e:	bf04      	itt	eq
 8011810:	0200      	lsleq	r0, r0, #8
 8011812:	3308      	addeq	r3, #8
 8011814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011818:	bf04      	itt	eq
 801181a:	0100      	lsleq	r0, r0, #4
 801181c:	3304      	addeq	r3, #4
 801181e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011822:	bf04      	itt	eq
 8011824:	0080      	lsleq	r0, r0, #2
 8011826:	3302      	addeq	r3, #2
 8011828:	2800      	cmp	r0, #0
 801182a:	db05      	blt.n	8011838 <__hi0bits+0x38>
 801182c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011830:	f103 0301 	add.w	r3, r3, #1
 8011834:	bf08      	it	eq
 8011836:	2320      	moveq	r3, #32
 8011838:	4618      	mov	r0, r3
 801183a:	4770      	bx	lr
 801183c:	2300      	movs	r3, #0
 801183e:	e7e4      	b.n	801180a <__hi0bits+0xa>

08011840 <__lo0bits>:
 8011840:	6803      	ldr	r3, [r0, #0]
 8011842:	f013 0207 	ands.w	r2, r3, #7
 8011846:	d00c      	beq.n	8011862 <__lo0bits+0x22>
 8011848:	07d9      	lsls	r1, r3, #31
 801184a:	d422      	bmi.n	8011892 <__lo0bits+0x52>
 801184c:	079a      	lsls	r2, r3, #30
 801184e:	bf49      	itett	mi
 8011850:	085b      	lsrmi	r3, r3, #1
 8011852:	089b      	lsrpl	r3, r3, #2
 8011854:	6003      	strmi	r3, [r0, #0]
 8011856:	2201      	movmi	r2, #1
 8011858:	bf5c      	itt	pl
 801185a:	6003      	strpl	r3, [r0, #0]
 801185c:	2202      	movpl	r2, #2
 801185e:	4610      	mov	r0, r2
 8011860:	4770      	bx	lr
 8011862:	b299      	uxth	r1, r3
 8011864:	b909      	cbnz	r1, 801186a <__lo0bits+0x2a>
 8011866:	0c1b      	lsrs	r3, r3, #16
 8011868:	2210      	movs	r2, #16
 801186a:	b2d9      	uxtb	r1, r3
 801186c:	b909      	cbnz	r1, 8011872 <__lo0bits+0x32>
 801186e:	3208      	adds	r2, #8
 8011870:	0a1b      	lsrs	r3, r3, #8
 8011872:	0719      	lsls	r1, r3, #28
 8011874:	bf04      	itt	eq
 8011876:	091b      	lsreq	r3, r3, #4
 8011878:	3204      	addeq	r2, #4
 801187a:	0799      	lsls	r1, r3, #30
 801187c:	bf04      	itt	eq
 801187e:	089b      	lsreq	r3, r3, #2
 8011880:	3202      	addeq	r2, #2
 8011882:	07d9      	lsls	r1, r3, #31
 8011884:	d403      	bmi.n	801188e <__lo0bits+0x4e>
 8011886:	085b      	lsrs	r3, r3, #1
 8011888:	f102 0201 	add.w	r2, r2, #1
 801188c:	d003      	beq.n	8011896 <__lo0bits+0x56>
 801188e:	6003      	str	r3, [r0, #0]
 8011890:	e7e5      	b.n	801185e <__lo0bits+0x1e>
 8011892:	2200      	movs	r2, #0
 8011894:	e7e3      	b.n	801185e <__lo0bits+0x1e>
 8011896:	2220      	movs	r2, #32
 8011898:	e7e1      	b.n	801185e <__lo0bits+0x1e>
	...

0801189c <__i2b>:
 801189c:	b510      	push	{r4, lr}
 801189e:	460c      	mov	r4, r1
 80118a0:	2101      	movs	r1, #1
 80118a2:	f7ff febb 	bl	801161c <_Balloc>
 80118a6:	4602      	mov	r2, r0
 80118a8:	b928      	cbnz	r0, 80118b6 <__i2b+0x1a>
 80118aa:	4b05      	ldr	r3, [pc, #20]	; (80118c0 <__i2b+0x24>)
 80118ac:	4805      	ldr	r0, [pc, #20]	; (80118c4 <__i2b+0x28>)
 80118ae:	f240 1145 	movw	r1, #325	; 0x145
 80118b2:	f7fd fd0b 	bl	800f2cc <__assert_func>
 80118b6:	2301      	movs	r3, #1
 80118b8:	6144      	str	r4, [r0, #20]
 80118ba:	6103      	str	r3, [r0, #16]
 80118bc:	bd10      	pop	{r4, pc}
 80118be:	bf00      	nop
 80118c0:	08015402 	.word	0x08015402
 80118c4:	08015413 	.word	0x08015413

080118c8 <__multiply>:
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	4691      	mov	r9, r2
 80118ce:	690a      	ldr	r2, [r1, #16]
 80118d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	bfb8      	it	lt
 80118d8:	460b      	movlt	r3, r1
 80118da:	460c      	mov	r4, r1
 80118dc:	bfbc      	itt	lt
 80118de:	464c      	movlt	r4, r9
 80118e0:	4699      	movlt	r9, r3
 80118e2:	6927      	ldr	r7, [r4, #16]
 80118e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118e8:	68a3      	ldr	r3, [r4, #8]
 80118ea:	6861      	ldr	r1, [r4, #4]
 80118ec:	eb07 060a 	add.w	r6, r7, sl
 80118f0:	42b3      	cmp	r3, r6
 80118f2:	b085      	sub	sp, #20
 80118f4:	bfb8      	it	lt
 80118f6:	3101      	addlt	r1, #1
 80118f8:	f7ff fe90 	bl	801161c <_Balloc>
 80118fc:	b930      	cbnz	r0, 801190c <__multiply+0x44>
 80118fe:	4602      	mov	r2, r0
 8011900:	4b44      	ldr	r3, [pc, #272]	; (8011a14 <__multiply+0x14c>)
 8011902:	4845      	ldr	r0, [pc, #276]	; (8011a18 <__multiply+0x150>)
 8011904:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011908:	f7fd fce0 	bl	800f2cc <__assert_func>
 801190c:	f100 0514 	add.w	r5, r0, #20
 8011910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011914:	462b      	mov	r3, r5
 8011916:	2200      	movs	r2, #0
 8011918:	4543      	cmp	r3, r8
 801191a:	d321      	bcc.n	8011960 <__multiply+0x98>
 801191c:	f104 0314 	add.w	r3, r4, #20
 8011920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011924:	f109 0314 	add.w	r3, r9, #20
 8011928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801192c:	9202      	str	r2, [sp, #8]
 801192e:	1b3a      	subs	r2, r7, r4
 8011930:	3a15      	subs	r2, #21
 8011932:	f022 0203 	bic.w	r2, r2, #3
 8011936:	3204      	adds	r2, #4
 8011938:	f104 0115 	add.w	r1, r4, #21
 801193c:	428f      	cmp	r7, r1
 801193e:	bf38      	it	cc
 8011940:	2204      	movcc	r2, #4
 8011942:	9201      	str	r2, [sp, #4]
 8011944:	9a02      	ldr	r2, [sp, #8]
 8011946:	9303      	str	r3, [sp, #12]
 8011948:	429a      	cmp	r2, r3
 801194a:	d80c      	bhi.n	8011966 <__multiply+0x9e>
 801194c:	2e00      	cmp	r6, #0
 801194e:	dd03      	ble.n	8011958 <__multiply+0x90>
 8011950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011954:	2b00      	cmp	r3, #0
 8011956:	d05b      	beq.n	8011a10 <__multiply+0x148>
 8011958:	6106      	str	r6, [r0, #16]
 801195a:	b005      	add	sp, #20
 801195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011960:	f843 2b04 	str.w	r2, [r3], #4
 8011964:	e7d8      	b.n	8011918 <__multiply+0x50>
 8011966:	f8b3 a000 	ldrh.w	sl, [r3]
 801196a:	f1ba 0f00 	cmp.w	sl, #0
 801196e:	d024      	beq.n	80119ba <__multiply+0xf2>
 8011970:	f104 0e14 	add.w	lr, r4, #20
 8011974:	46a9      	mov	r9, r5
 8011976:	f04f 0c00 	mov.w	ip, #0
 801197a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801197e:	f8d9 1000 	ldr.w	r1, [r9]
 8011982:	fa1f fb82 	uxth.w	fp, r2
 8011986:	b289      	uxth	r1, r1
 8011988:	fb0a 110b 	mla	r1, sl, fp, r1
 801198c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011990:	f8d9 2000 	ldr.w	r2, [r9]
 8011994:	4461      	add	r1, ip
 8011996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801199a:	fb0a c20b 	mla	r2, sl, fp, ip
 801199e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119a2:	b289      	uxth	r1, r1
 80119a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119a8:	4577      	cmp	r7, lr
 80119aa:	f849 1b04 	str.w	r1, [r9], #4
 80119ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119b2:	d8e2      	bhi.n	801197a <__multiply+0xb2>
 80119b4:	9a01      	ldr	r2, [sp, #4]
 80119b6:	f845 c002 	str.w	ip, [r5, r2]
 80119ba:	9a03      	ldr	r2, [sp, #12]
 80119bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80119c0:	3304      	adds	r3, #4
 80119c2:	f1b9 0f00 	cmp.w	r9, #0
 80119c6:	d021      	beq.n	8011a0c <__multiply+0x144>
 80119c8:	6829      	ldr	r1, [r5, #0]
 80119ca:	f104 0c14 	add.w	ip, r4, #20
 80119ce:	46ae      	mov	lr, r5
 80119d0:	f04f 0a00 	mov.w	sl, #0
 80119d4:	f8bc b000 	ldrh.w	fp, [ip]
 80119d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80119dc:	fb09 220b 	mla	r2, r9, fp, r2
 80119e0:	4452      	add	r2, sl
 80119e2:	b289      	uxth	r1, r1
 80119e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119e8:	f84e 1b04 	str.w	r1, [lr], #4
 80119ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80119f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80119f4:	f8be 1000 	ldrh.w	r1, [lr]
 80119f8:	fb09 110a 	mla	r1, r9, sl, r1
 80119fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011a00:	4567      	cmp	r7, ip
 8011a02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a06:	d8e5      	bhi.n	80119d4 <__multiply+0x10c>
 8011a08:	9a01      	ldr	r2, [sp, #4]
 8011a0a:	50a9      	str	r1, [r5, r2]
 8011a0c:	3504      	adds	r5, #4
 8011a0e:	e799      	b.n	8011944 <__multiply+0x7c>
 8011a10:	3e01      	subs	r6, #1
 8011a12:	e79b      	b.n	801194c <__multiply+0x84>
 8011a14:	08015402 	.word	0x08015402
 8011a18:	08015413 	.word	0x08015413

08011a1c <__pow5mult>:
 8011a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a20:	4615      	mov	r5, r2
 8011a22:	f012 0203 	ands.w	r2, r2, #3
 8011a26:	4606      	mov	r6, r0
 8011a28:	460f      	mov	r7, r1
 8011a2a:	d007      	beq.n	8011a3c <__pow5mult+0x20>
 8011a2c:	4c25      	ldr	r4, [pc, #148]	; (8011ac4 <__pow5mult+0xa8>)
 8011a2e:	3a01      	subs	r2, #1
 8011a30:	2300      	movs	r3, #0
 8011a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a36:	f7ff fe53 	bl	80116e0 <__multadd>
 8011a3a:	4607      	mov	r7, r0
 8011a3c:	10ad      	asrs	r5, r5, #2
 8011a3e:	d03d      	beq.n	8011abc <__pow5mult+0xa0>
 8011a40:	69f4      	ldr	r4, [r6, #28]
 8011a42:	b97c      	cbnz	r4, 8011a64 <__pow5mult+0x48>
 8011a44:	2010      	movs	r0, #16
 8011a46:	f7ff fd35 	bl	80114b4 <malloc>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	61f0      	str	r0, [r6, #28]
 8011a4e:	b928      	cbnz	r0, 8011a5c <__pow5mult+0x40>
 8011a50:	4b1d      	ldr	r3, [pc, #116]	; (8011ac8 <__pow5mult+0xac>)
 8011a52:	481e      	ldr	r0, [pc, #120]	; (8011acc <__pow5mult+0xb0>)
 8011a54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011a58:	f7fd fc38 	bl	800f2cc <__assert_func>
 8011a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a60:	6004      	str	r4, [r0, #0]
 8011a62:	60c4      	str	r4, [r0, #12]
 8011a64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a6c:	b94c      	cbnz	r4, 8011a82 <__pow5mult+0x66>
 8011a6e:	f240 2171 	movw	r1, #625	; 0x271
 8011a72:	4630      	mov	r0, r6
 8011a74:	f7ff ff12 	bl	801189c <__i2b>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a7e:	4604      	mov	r4, r0
 8011a80:	6003      	str	r3, [r0, #0]
 8011a82:	f04f 0900 	mov.w	r9, #0
 8011a86:	07eb      	lsls	r3, r5, #31
 8011a88:	d50a      	bpl.n	8011aa0 <__pow5mult+0x84>
 8011a8a:	4639      	mov	r1, r7
 8011a8c:	4622      	mov	r2, r4
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f7ff ff1a 	bl	80118c8 <__multiply>
 8011a94:	4639      	mov	r1, r7
 8011a96:	4680      	mov	r8, r0
 8011a98:	4630      	mov	r0, r6
 8011a9a:	f7ff fdff 	bl	801169c <_Bfree>
 8011a9e:	4647      	mov	r7, r8
 8011aa0:	106d      	asrs	r5, r5, #1
 8011aa2:	d00b      	beq.n	8011abc <__pow5mult+0xa0>
 8011aa4:	6820      	ldr	r0, [r4, #0]
 8011aa6:	b938      	cbnz	r0, 8011ab8 <__pow5mult+0x9c>
 8011aa8:	4622      	mov	r2, r4
 8011aaa:	4621      	mov	r1, r4
 8011aac:	4630      	mov	r0, r6
 8011aae:	f7ff ff0b 	bl	80118c8 <__multiply>
 8011ab2:	6020      	str	r0, [r4, #0]
 8011ab4:	f8c0 9000 	str.w	r9, [r0]
 8011ab8:	4604      	mov	r4, r0
 8011aba:	e7e4      	b.n	8011a86 <__pow5mult+0x6a>
 8011abc:	4638      	mov	r0, r7
 8011abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac2:	bf00      	nop
 8011ac4:	08015560 	.word	0x08015560
 8011ac8:	0801532c 	.word	0x0801532c
 8011acc:	08015413 	.word	0x08015413

08011ad0 <__lshift>:
 8011ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	6849      	ldr	r1, [r1, #4]
 8011ad8:	6923      	ldr	r3, [r4, #16]
 8011ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ade:	68a3      	ldr	r3, [r4, #8]
 8011ae0:	4607      	mov	r7, r0
 8011ae2:	4691      	mov	r9, r2
 8011ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011ae8:	f108 0601 	add.w	r6, r8, #1
 8011aec:	42b3      	cmp	r3, r6
 8011aee:	db0b      	blt.n	8011b08 <__lshift+0x38>
 8011af0:	4638      	mov	r0, r7
 8011af2:	f7ff fd93 	bl	801161c <_Balloc>
 8011af6:	4605      	mov	r5, r0
 8011af8:	b948      	cbnz	r0, 8011b0e <__lshift+0x3e>
 8011afa:	4602      	mov	r2, r0
 8011afc:	4b28      	ldr	r3, [pc, #160]	; (8011ba0 <__lshift+0xd0>)
 8011afe:	4829      	ldr	r0, [pc, #164]	; (8011ba4 <__lshift+0xd4>)
 8011b00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011b04:	f7fd fbe2 	bl	800f2cc <__assert_func>
 8011b08:	3101      	adds	r1, #1
 8011b0a:	005b      	lsls	r3, r3, #1
 8011b0c:	e7ee      	b.n	8011aec <__lshift+0x1c>
 8011b0e:	2300      	movs	r3, #0
 8011b10:	f100 0114 	add.w	r1, r0, #20
 8011b14:	f100 0210 	add.w	r2, r0, #16
 8011b18:	4618      	mov	r0, r3
 8011b1a:	4553      	cmp	r3, sl
 8011b1c:	db33      	blt.n	8011b86 <__lshift+0xb6>
 8011b1e:	6920      	ldr	r0, [r4, #16]
 8011b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b24:	f104 0314 	add.w	r3, r4, #20
 8011b28:	f019 091f 	ands.w	r9, r9, #31
 8011b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b34:	d02b      	beq.n	8011b8e <__lshift+0xbe>
 8011b36:	f1c9 0e20 	rsb	lr, r9, #32
 8011b3a:	468a      	mov	sl, r1
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	6818      	ldr	r0, [r3, #0]
 8011b40:	fa00 f009 	lsl.w	r0, r0, r9
 8011b44:	4310      	orrs	r0, r2
 8011b46:	f84a 0b04 	str.w	r0, [sl], #4
 8011b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b4e:	459c      	cmp	ip, r3
 8011b50:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b54:	d8f3      	bhi.n	8011b3e <__lshift+0x6e>
 8011b56:	ebac 0304 	sub.w	r3, ip, r4
 8011b5a:	3b15      	subs	r3, #21
 8011b5c:	f023 0303 	bic.w	r3, r3, #3
 8011b60:	3304      	adds	r3, #4
 8011b62:	f104 0015 	add.w	r0, r4, #21
 8011b66:	4584      	cmp	ip, r0
 8011b68:	bf38      	it	cc
 8011b6a:	2304      	movcc	r3, #4
 8011b6c:	50ca      	str	r2, [r1, r3]
 8011b6e:	b10a      	cbz	r2, 8011b74 <__lshift+0xa4>
 8011b70:	f108 0602 	add.w	r6, r8, #2
 8011b74:	3e01      	subs	r6, #1
 8011b76:	4638      	mov	r0, r7
 8011b78:	612e      	str	r6, [r5, #16]
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	f7ff fd8e 	bl	801169c <_Bfree>
 8011b80:	4628      	mov	r0, r5
 8011b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b86:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	e7c5      	b.n	8011b1a <__lshift+0x4a>
 8011b8e:	3904      	subs	r1, #4
 8011b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b94:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b98:	459c      	cmp	ip, r3
 8011b9a:	d8f9      	bhi.n	8011b90 <__lshift+0xc0>
 8011b9c:	e7ea      	b.n	8011b74 <__lshift+0xa4>
 8011b9e:	bf00      	nop
 8011ba0:	08015402 	.word	0x08015402
 8011ba4:	08015413 	.word	0x08015413

08011ba8 <__mcmp>:
 8011ba8:	b530      	push	{r4, r5, lr}
 8011baa:	6902      	ldr	r2, [r0, #16]
 8011bac:	690c      	ldr	r4, [r1, #16]
 8011bae:	1b12      	subs	r2, r2, r4
 8011bb0:	d10e      	bne.n	8011bd0 <__mcmp+0x28>
 8011bb2:	f100 0314 	add.w	r3, r0, #20
 8011bb6:	3114      	adds	r1, #20
 8011bb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011bbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011bc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011bc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011bc8:	42a5      	cmp	r5, r4
 8011bca:	d003      	beq.n	8011bd4 <__mcmp+0x2c>
 8011bcc:	d305      	bcc.n	8011bda <__mcmp+0x32>
 8011bce:	2201      	movs	r2, #1
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	bd30      	pop	{r4, r5, pc}
 8011bd4:	4283      	cmp	r3, r0
 8011bd6:	d3f3      	bcc.n	8011bc0 <__mcmp+0x18>
 8011bd8:	e7fa      	b.n	8011bd0 <__mcmp+0x28>
 8011bda:	f04f 32ff 	mov.w	r2, #4294967295
 8011bde:	e7f7      	b.n	8011bd0 <__mcmp+0x28>

08011be0 <__mdiff>:
 8011be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	460c      	mov	r4, r1
 8011be6:	4606      	mov	r6, r0
 8011be8:	4611      	mov	r1, r2
 8011bea:	4620      	mov	r0, r4
 8011bec:	4690      	mov	r8, r2
 8011bee:	f7ff ffdb 	bl	8011ba8 <__mcmp>
 8011bf2:	1e05      	subs	r5, r0, #0
 8011bf4:	d110      	bne.n	8011c18 <__mdiff+0x38>
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	f7ff fd0f 	bl	801161c <_Balloc>
 8011bfe:	b930      	cbnz	r0, 8011c0e <__mdiff+0x2e>
 8011c00:	4b3a      	ldr	r3, [pc, #232]	; (8011cec <__mdiff+0x10c>)
 8011c02:	4602      	mov	r2, r0
 8011c04:	f240 2137 	movw	r1, #567	; 0x237
 8011c08:	4839      	ldr	r0, [pc, #228]	; (8011cf0 <__mdiff+0x110>)
 8011c0a:	f7fd fb5f 	bl	800f2cc <__assert_func>
 8011c0e:	2301      	movs	r3, #1
 8011c10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c18:	bfa4      	itt	ge
 8011c1a:	4643      	movge	r3, r8
 8011c1c:	46a0      	movge	r8, r4
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c24:	bfa6      	itte	ge
 8011c26:	461c      	movge	r4, r3
 8011c28:	2500      	movge	r5, #0
 8011c2a:	2501      	movlt	r5, #1
 8011c2c:	f7ff fcf6 	bl	801161c <_Balloc>
 8011c30:	b920      	cbnz	r0, 8011c3c <__mdiff+0x5c>
 8011c32:	4b2e      	ldr	r3, [pc, #184]	; (8011cec <__mdiff+0x10c>)
 8011c34:	4602      	mov	r2, r0
 8011c36:	f240 2145 	movw	r1, #581	; 0x245
 8011c3a:	e7e5      	b.n	8011c08 <__mdiff+0x28>
 8011c3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c40:	6926      	ldr	r6, [r4, #16]
 8011c42:	60c5      	str	r5, [r0, #12]
 8011c44:	f104 0914 	add.w	r9, r4, #20
 8011c48:	f108 0514 	add.w	r5, r8, #20
 8011c4c:	f100 0e14 	add.w	lr, r0, #20
 8011c50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c58:	f108 0210 	add.w	r2, r8, #16
 8011c5c:	46f2      	mov	sl, lr
 8011c5e:	2100      	movs	r1, #0
 8011c60:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c68:	fa11 f88b 	uxtah	r8, r1, fp
 8011c6c:	b299      	uxth	r1, r3
 8011c6e:	0c1b      	lsrs	r3, r3, #16
 8011c70:	eba8 0801 	sub.w	r8, r8, r1
 8011c74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011c78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011c7c:	fa1f f888 	uxth.w	r8, r8
 8011c80:	1419      	asrs	r1, r3, #16
 8011c82:	454e      	cmp	r6, r9
 8011c84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011c88:	f84a 3b04 	str.w	r3, [sl], #4
 8011c8c:	d8e8      	bhi.n	8011c60 <__mdiff+0x80>
 8011c8e:	1b33      	subs	r3, r6, r4
 8011c90:	3b15      	subs	r3, #21
 8011c92:	f023 0303 	bic.w	r3, r3, #3
 8011c96:	3304      	adds	r3, #4
 8011c98:	3415      	adds	r4, #21
 8011c9a:	42a6      	cmp	r6, r4
 8011c9c:	bf38      	it	cc
 8011c9e:	2304      	movcc	r3, #4
 8011ca0:	441d      	add	r5, r3
 8011ca2:	4473      	add	r3, lr
 8011ca4:	469e      	mov	lr, r3
 8011ca6:	462e      	mov	r6, r5
 8011ca8:	4566      	cmp	r6, ip
 8011caa:	d30e      	bcc.n	8011cca <__mdiff+0xea>
 8011cac:	f10c 0203 	add.w	r2, ip, #3
 8011cb0:	1b52      	subs	r2, r2, r5
 8011cb2:	f022 0203 	bic.w	r2, r2, #3
 8011cb6:	3d03      	subs	r5, #3
 8011cb8:	45ac      	cmp	ip, r5
 8011cba:	bf38      	it	cc
 8011cbc:	2200      	movcc	r2, #0
 8011cbe:	4413      	add	r3, r2
 8011cc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011cc4:	b17a      	cbz	r2, 8011ce6 <__mdiff+0x106>
 8011cc6:	6107      	str	r7, [r0, #16]
 8011cc8:	e7a4      	b.n	8011c14 <__mdiff+0x34>
 8011cca:	f856 8b04 	ldr.w	r8, [r6], #4
 8011cce:	fa11 f288 	uxtah	r2, r1, r8
 8011cd2:	1414      	asrs	r4, r2, #16
 8011cd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011cd8:	b292      	uxth	r2, r2
 8011cda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011cde:	f84e 2b04 	str.w	r2, [lr], #4
 8011ce2:	1421      	asrs	r1, r4, #16
 8011ce4:	e7e0      	b.n	8011ca8 <__mdiff+0xc8>
 8011ce6:	3f01      	subs	r7, #1
 8011ce8:	e7ea      	b.n	8011cc0 <__mdiff+0xe0>
 8011cea:	bf00      	nop
 8011cec:	08015402 	.word	0x08015402
 8011cf0:	08015413 	.word	0x08015413

08011cf4 <__ulp>:
 8011cf4:	b082      	sub	sp, #8
 8011cf6:	ed8d 0b00 	vstr	d0, [sp]
 8011cfa:	9a01      	ldr	r2, [sp, #4]
 8011cfc:	4b0f      	ldr	r3, [pc, #60]	; (8011d3c <__ulp+0x48>)
 8011cfe:	4013      	ands	r3, r2
 8011d00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	dc08      	bgt.n	8011d1a <__ulp+0x26>
 8011d08:	425b      	negs	r3, r3
 8011d0a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011d0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d12:	da04      	bge.n	8011d1e <__ulp+0x2a>
 8011d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011d18:	4113      	asrs	r3, r2
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	e008      	b.n	8011d30 <__ulp+0x3c>
 8011d1e:	f1a2 0314 	sub.w	r3, r2, #20
 8011d22:	2b1e      	cmp	r3, #30
 8011d24:	bfda      	itte	le
 8011d26:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011d2a:	40da      	lsrle	r2, r3
 8011d2c:	2201      	movgt	r2, #1
 8011d2e:	2300      	movs	r3, #0
 8011d30:	4619      	mov	r1, r3
 8011d32:	4610      	mov	r0, r2
 8011d34:	ec41 0b10 	vmov	d0, r0, r1
 8011d38:	b002      	add	sp, #8
 8011d3a:	4770      	bx	lr
 8011d3c:	7ff00000 	.word	0x7ff00000

08011d40 <__b2d>:
 8011d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d44:	6906      	ldr	r6, [r0, #16]
 8011d46:	f100 0814 	add.w	r8, r0, #20
 8011d4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011d4e:	1f37      	subs	r7, r6, #4
 8011d50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011d54:	4610      	mov	r0, r2
 8011d56:	f7ff fd53 	bl	8011800 <__hi0bits>
 8011d5a:	f1c0 0320 	rsb	r3, r0, #32
 8011d5e:	280a      	cmp	r0, #10
 8011d60:	600b      	str	r3, [r1, #0]
 8011d62:	491b      	ldr	r1, [pc, #108]	; (8011dd0 <__b2d+0x90>)
 8011d64:	dc15      	bgt.n	8011d92 <__b2d+0x52>
 8011d66:	f1c0 0c0b 	rsb	ip, r0, #11
 8011d6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8011d6e:	45b8      	cmp	r8, r7
 8011d70:	ea43 0501 	orr.w	r5, r3, r1
 8011d74:	bf34      	ite	cc
 8011d76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d7a:	2300      	movcs	r3, #0
 8011d7c:	3015      	adds	r0, #21
 8011d7e:	fa02 f000 	lsl.w	r0, r2, r0
 8011d82:	fa23 f30c 	lsr.w	r3, r3, ip
 8011d86:	4303      	orrs	r3, r0
 8011d88:	461c      	mov	r4, r3
 8011d8a:	ec45 4b10 	vmov	d0, r4, r5
 8011d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d92:	45b8      	cmp	r8, r7
 8011d94:	bf3a      	itte	cc
 8011d96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011d9e:	2300      	movcs	r3, #0
 8011da0:	380b      	subs	r0, #11
 8011da2:	d012      	beq.n	8011dca <__b2d+0x8a>
 8011da4:	f1c0 0120 	rsb	r1, r0, #32
 8011da8:	fa23 f401 	lsr.w	r4, r3, r1
 8011dac:	4082      	lsls	r2, r0
 8011dae:	4322      	orrs	r2, r4
 8011db0:	4547      	cmp	r7, r8
 8011db2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011db6:	bf8c      	ite	hi
 8011db8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011dbc:	2200      	movls	r2, #0
 8011dbe:	4083      	lsls	r3, r0
 8011dc0:	40ca      	lsrs	r2, r1
 8011dc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	e7de      	b.n	8011d88 <__b2d+0x48>
 8011dca:	ea42 0501 	orr.w	r5, r2, r1
 8011dce:	e7db      	b.n	8011d88 <__b2d+0x48>
 8011dd0:	3ff00000 	.word	0x3ff00000

08011dd4 <__d2b>:
 8011dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011dd8:	460f      	mov	r7, r1
 8011dda:	2101      	movs	r1, #1
 8011ddc:	ec59 8b10 	vmov	r8, r9, d0
 8011de0:	4616      	mov	r6, r2
 8011de2:	f7ff fc1b 	bl	801161c <_Balloc>
 8011de6:	4604      	mov	r4, r0
 8011de8:	b930      	cbnz	r0, 8011df8 <__d2b+0x24>
 8011dea:	4602      	mov	r2, r0
 8011dec:	4b24      	ldr	r3, [pc, #144]	; (8011e80 <__d2b+0xac>)
 8011dee:	4825      	ldr	r0, [pc, #148]	; (8011e84 <__d2b+0xb0>)
 8011df0:	f240 310f 	movw	r1, #783	; 0x30f
 8011df4:	f7fd fa6a 	bl	800f2cc <__assert_func>
 8011df8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e00:	bb2d      	cbnz	r5, 8011e4e <__d2b+0x7a>
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	f1b8 0300 	subs.w	r3, r8, #0
 8011e08:	d026      	beq.n	8011e58 <__d2b+0x84>
 8011e0a:	4668      	mov	r0, sp
 8011e0c:	9300      	str	r3, [sp, #0]
 8011e0e:	f7ff fd17 	bl	8011840 <__lo0bits>
 8011e12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e16:	b1e8      	cbz	r0, 8011e54 <__d2b+0x80>
 8011e18:	f1c0 0320 	rsb	r3, r0, #32
 8011e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e20:	430b      	orrs	r3, r1
 8011e22:	40c2      	lsrs	r2, r0
 8011e24:	6163      	str	r3, [r4, #20]
 8011e26:	9201      	str	r2, [sp, #4]
 8011e28:	9b01      	ldr	r3, [sp, #4]
 8011e2a:	61a3      	str	r3, [r4, #24]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	bf14      	ite	ne
 8011e30:	2202      	movne	r2, #2
 8011e32:	2201      	moveq	r2, #1
 8011e34:	6122      	str	r2, [r4, #16]
 8011e36:	b1bd      	cbz	r5, 8011e68 <__d2b+0x94>
 8011e38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011e3c:	4405      	add	r5, r0
 8011e3e:	603d      	str	r5, [r7, #0]
 8011e40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011e44:	6030      	str	r0, [r6, #0]
 8011e46:	4620      	mov	r0, r4
 8011e48:	b003      	add	sp, #12
 8011e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e52:	e7d6      	b.n	8011e02 <__d2b+0x2e>
 8011e54:	6161      	str	r1, [r4, #20]
 8011e56:	e7e7      	b.n	8011e28 <__d2b+0x54>
 8011e58:	a801      	add	r0, sp, #4
 8011e5a:	f7ff fcf1 	bl	8011840 <__lo0bits>
 8011e5e:	9b01      	ldr	r3, [sp, #4]
 8011e60:	6163      	str	r3, [r4, #20]
 8011e62:	3020      	adds	r0, #32
 8011e64:	2201      	movs	r2, #1
 8011e66:	e7e5      	b.n	8011e34 <__d2b+0x60>
 8011e68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e70:	6038      	str	r0, [r7, #0]
 8011e72:	6918      	ldr	r0, [r3, #16]
 8011e74:	f7ff fcc4 	bl	8011800 <__hi0bits>
 8011e78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e7c:	e7e2      	b.n	8011e44 <__d2b+0x70>
 8011e7e:	bf00      	nop
 8011e80:	08015402 	.word	0x08015402
 8011e84:	08015413 	.word	0x08015413

08011e88 <__ratio>:
 8011e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8c:	4688      	mov	r8, r1
 8011e8e:	4669      	mov	r1, sp
 8011e90:	4681      	mov	r9, r0
 8011e92:	f7ff ff55 	bl	8011d40 <__b2d>
 8011e96:	a901      	add	r1, sp, #4
 8011e98:	4640      	mov	r0, r8
 8011e9a:	ec55 4b10 	vmov	r4, r5, d0
 8011e9e:	f7ff ff4f 	bl	8011d40 <__b2d>
 8011ea2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ea6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011eaa:	eba3 0c02 	sub.w	ip, r3, r2
 8011eae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011eb2:	1a9b      	subs	r3, r3, r2
 8011eb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011eb8:	ec51 0b10 	vmov	r0, r1, d0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	bfd6      	itet	le
 8011ec0:	460a      	movle	r2, r1
 8011ec2:	462a      	movgt	r2, r5
 8011ec4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ec8:	468b      	mov	fp, r1
 8011eca:	462f      	mov	r7, r5
 8011ecc:	bfd4      	ite	le
 8011ece:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011ed2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	ee10 2a10 	vmov	r2, s0
 8011edc:	465b      	mov	r3, fp
 8011ede:	4639      	mov	r1, r7
 8011ee0:	f7ee fcb4 	bl	800084c <__aeabi_ddiv>
 8011ee4:	ec41 0b10 	vmov	d0, r0, r1
 8011ee8:	b003      	add	sp, #12
 8011eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011eee <__copybits>:
 8011eee:	3901      	subs	r1, #1
 8011ef0:	b570      	push	{r4, r5, r6, lr}
 8011ef2:	1149      	asrs	r1, r1, #5
 8011ef4:	6914      	ldr	r4, [r2, #16]
 8011ef6:	3101      	adds	r1, #1
 8011ef8:	f102 0314 	add.w	r3, r2, #20
 8011efc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f04:	1f05      	subs	r5, r0, #4
 8011f06:	42a3      	cmp	r3, r4
 8011f08:	d30c      	bcc.n	8011f24 <__copybits+0x36>
 8011f0a:	1aa3      	subs	r3, r4, r2
 8011f0c:	3b11      	subs	r3, #17
 8011f0e:	f023 0303 	bic.w	r3, r3, #3
 8011f12:	3211      	adds	r2, #17
 8011f14:	42a2      	cmp	r2, r4
 8011f16:	bf88      	it	hi
 8011f18:	2300      	movhi	r3, #0
 8011f1a:	4418      	add	r0, r3
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	4288      	cmp	r0, r1
 8011f20:	d305      	bcc.n	8011f2e <__copybits+0x40>
 8011f22:	bd70      	pop	{r4, r5, r6, pc}
 8011f24:	f853 6b04 	ldr.w	r6, [r3], #4
 8011f28:	f845 6f04 	str.w	r6, [r5, #4]!
 8011f2c:	e7eb      	b.n	8011f06 <__copybits+0x18>
 8011f2e:	f840 3b04 	str.w	r3, [r0], #4
 8011f32:	e7f4      	b.n	8011f1e <__copybits+0x30>

08011f34 <__any_on>:
 8011f34:	f100 0214 	add.w	r2, r0, #20
 8011f38:	6900      	ldr	r0, [r0, #16]
 8011f3a:	114b      	asrs	r3, r1, #5
 8011f3c:	4298      	cmp	r0, r3
 8011f3e:	b510      	push	{r4, lr}
 8011f40:	db11      	blt.n	8011f66 <__any_on+0x32>
 8011f42:	dd0a      	ble.n	8011f5a <__any_on+0x26>
 8011f44:	f011 011f 	ands.w	r1, r1, #31
 8011f48:	d007      	beq.n	8011f5a <__any_on+0x26>
 8011f4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011f4e:	fa24 f001 	lsr.w	r0, r4, r1
 8011f52:	fa00 f101 	lsl.w	r1, r0, r1
 8011f56:	428c      	cmp	r4, r1
 8011f58:	d10b      	bne.n	8011f72 <__any_on+0x3e>
 8011f5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f5e:	4293      	cmp	r3, r2
 8011f60:	d803      	bhi.n	8011f6a <__any_on+0x36>
 8011f62:	2000      	movs	r0, #0
 8011f64:	bd10      	pop	{r4, pc}
 8011f66:	4603      	mov	r3, r0
 8011f68:	e7f7      	b.n	8011f5a <__any_on+0x26>
 8011f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f6e:	2900      	cmp	r1, #0
 8011f70:	d0f5      	beq.n	8011f5e <__any_on+0x2a>
 8011f72:	2001      	movs	r0, #1
 8011f74:	e7f6      	b.n	8011f64 <__any_on+0x30>

08011f76 <sulp>:
 8011f76:	b570      	push	{r4, r5, r6, lr}
 8011f78:	4604      	mov	r4, r0
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	ec45 4b10 	vmov	d0, r4, r5
 8011f80:	4616      	mov	r6, r2
 8011f82:	f7ff feb7 	bl	8011cf4 <__ulp>
 8011f86:	ec51 0b10 	vmov	r0, r1, d0
 8011f8a:	b17e      	cbz	r6, 8011fac <sulp+0x36>
 8011f8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011f90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	dd09      	ble.n	8011fac <sulp+0x36>
 8011f98:	051b      	lsls	r3, r3, #20
 8011f9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011f9e:	2400      	movs	r4, #0
 8011fa0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011fa4:	4622      	mov	r2, r4
 8011fa6:	462b      	mov	r3, r5
 8011fa8:	f7ee fb26 	bl	80005f8 <__aeabi_dmul>
 8011fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08011fb0 <_strtod_l>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	ed2d 8b02 	vpush	{d8}
 8011fb8:	b09b      	sub	sp, #108	; 0x6c
 8011fba:	4604      	mov	r4, r0
 8011fbc:	9213      	str	r2, [sp, #76]	; 0x4c
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	9216      	str	r2, [sp, #88]	; 0x58
 8011fc2:	460d      	mov	r5, r1
 8011fc4:	f04f 0800 	mov.w	r8, #0
 8011fc8:	f04f 0900 	mov.w	r9, #0
 8011fcc:	460a      	mov	r2, r1
 8011fce:	9215      	str	r2, [sp, #84]	; 0x54
 8011fd0:	7811      	ldrb	r1, [r2, #0]
 8011fd2:	292b      	cmp	r1, #43	; 0x2b
 8011fd4:	d04c      	beq.n	8012070 <_strtod_l+0xc0>
 8011fd6:	d83a      	bhi.n	801204e <_strtod_l+0x9e>
 8011fd8:	290d      	cmp	r1, #13
 8011fda:	d834      	bhi.n	8012046 <_strtod_l+0x96>
 8011fdc:	2908      	cmp	r1, #8
 8011fde:	d834      	bhi.n	801204a <_strtod_l+0x9a>
 8011fe0:	2900      	cmp	r1, #0
 8011fe2:	d03d      	beq.n	8012060 <_strtod_l+0xb0>
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	920a      	str	r2, [sp, #40]	; 0x28
 8011fe8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011fea:	7832      	ldrb	r2, [r6, #0]
 8011fec:	2a30      	cmp	r2, #48	; 0x30
 8011fee:	f040 80b4 	bne.w	801215a <_strtod_l+0x1aa>
 8011ff2:	7872      	ldrb	r2, [r6, #1]
 8011ff4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011ff8:	2a58      	cmp	r2, #88	; 0x58
 8011ffa:	d170      	bne.n	80120de <_strtod_l+0x12e>
 8011ffc:	9302      	str	r3, [sp, #8]
 8011ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012000:	9301      	str	r3, [sp, #4]
 8012002:	ab16      	add	r3, sp, #88	; 0x58
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	4a8e      	ldr	r2, [pc, #568]	; (8012240 <_strtod_l+0x290>)
 8012008:	ab17      	add	r3, sp, #92	; 0x5c
 801200a:	a915      	add	r1, sp, #84	; 0x54
 801200c:	4620      	mov	r0, r4
 801200e:	f001 faf1 	bl	80135f4 <__gethex>
 8012012:	f010 070f 	ands.w	r7, r0, #15
 8012016:	4605      	mov	r5, r0
 8012018:	d005      	beq.n	8012026 <_strtod_l+0x76>
 801201a:	2f06      	cmp	r7, #6
 801201c:	d12a      	bne.n	8012074 <_strtod_l+0xc4>
 801201e:	3601      	adds	r6, #1
 8012020:	2300      	movs	r3, #0
 8012022:	9615      	str	r6, [sp, #84]	; 0x54
 8012024:	930a      	str	r3, [sp, #40]	; 0x28
 8012026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012028:	2b00      	cmp	r3, #0
 801202a:	f040 857f 	bne.w	8012b2c <_strtod_l+0xb7c>
 801202e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012030:	b1db      	cbz	r3, 801206a <_strtod_l+0xba>
 8012032:	4642      	mov	r2, r8
 8012034:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012038:	ec43 2b10 	vmov	d0, r2, r3
 801203c:	b01b      	add	sp, #108	; 0x6c
 801203e:	ecbd 8b02 	vpop	{d8}
 8012042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012046:	2920      	cmp	r1, #32
 8012048:	d1cc      	bne.n	8011fe4 <_strtod_l+0x34>
 801204a:	3201      	adds	r2, #1
 801204c:	e7bf      	b.n	8011fce <_strtod_l+0x1e>
 801204e:	292d      	cmp	r1, #45	; 0x2d
 8012050:	d1c8      	bne.n	8011fe4 <_strtod_l+0x34>
 8012052:	2101      	movs	r1, #1
 8012054:	910a      	str	r1, [sp, #40]	; 0x28
 8012056:	1c51      	adds	r1, r2, #1
 8012058:	9115      	str	r1, [sp, #84]	; 0x54
 801205a:	7852      	ldrb	r2, [r2, #1]
 801205c:	2a00      	cmp	r2, #0
 801205e:	d1c3      	bne.n	8011fe8 <_strtod_l+0x38>
 8012060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012062:	9515      	str	r5, [sp, #84]	; 0x54
 8012064:	2b00      	cmp	r3, #0
 8012066:	f040 855f 	bne.w	8012b28 <_strtod_l+0xb78>
 801206a:	4642      	mov	r2, r8
 801206c:	464b      	mov	r3, r9
 801206e:	e7e3      	b.n	8012038 <_strtod_l+0x88>
 8012070:	2100      	movs	r1, #0
 8012072:	e7ef      	b.n	8012054 <_strtod_l+0xa4>
 8012074:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012076:	b13a      	cbz	r2, 8012088 <_strtod_l+0xd8>
 8012078:	2135      	movs	r1, #53	; 0x35
 801207a:	a818      	add	r0, sp, #96	; 0x60
 801207c:	f7ff ff37 	bl	8011eee <__copybits>
 8012080:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012082:	4620      	mov	r0, r4
 8012084:	f7ff fb0a 	bl	801169c <_Bfree>
 8012088:	3f01      	subs	r7, #1
 801208a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801208c:	2f04      	cmp	r7, #4
 801208e:	d806      	bhi.n	801209e <_strtod_l+0xee>
 8012090:	e8df f007 	tbb	[pc, r7]
 8012094:	201d0314 	.word	0x201d0314
 8012098:	14          	.byte	0x14
 8012099:	00          	.byte	0x00
 801209a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801209e:	05e9      	lsls	r1, r5, #23
 80120a0:	bf48      	it	mi
 80120a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80120a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120aa:	0d1b      	lsrs	r3, r3, #20
 80120ac:	051b      	lsls	r3, r3, #20
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1b9      	bne.n	8012026 <_strtod_l+0x76>
 80120b2:	f7fe faed 	bl	8010690 <__errno>
 80120b6:	2322      	movs	r3, #34	; 0x22
 80120b8:	6003      	str	r3, [r0, #0]
 80120ba:	e7b4      	b.n	8012026 <_strtod_l+0x76>
 80120bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80120c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80120c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80120c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80120cc:	e7e7      	b.n	801209e <_strtod_l+0xee>
 80120ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012248 <_strtod_l+0x298>
 80120d2:	e7e4      	b.n	801209e <_strtod_l+0xee>
 80120d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80120d8:	f04f 38ff 	mov.w	r8, #4294967295
 80120dc:	e7df      	b.n	801209e <_strtod_l+0xee>
 80120de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120e0:	1c5a      	adds	r2, r3, #1
 80120e2:	9215      	str	r2, [sp, #84]	; 0x54
 80120e4:	785b      	ldrb	r3, [r3, #1]
 80120e6:	2b30      	cmp	r3, #48	; 0x30
 80120e8:	d0f9      	beq.n	80120de <_strtod_l+0x12e>
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d09b      	beq.n	8012026 <_strtod_l+0x76>
 80120ee:	2301      	movs	r3, #1
 80120f0:	f04f 0a00 	mov.w	sl, #0
 80120f4:	9304      	str	r3, [sp, #16]
 80120f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80120fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80120fe:	46d3      	mov	fp, sl
 8012100:	220a      	movs	r2, #10
 8012102:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012104:	7806      	ldrb	r6, [r0, #0]
 8012106:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801210a:	b2d9      	uxtb	r1, r3
 801210c:	2909      	cmp	r1, #9
 801210e:	d926      	bls.n	801215e <_strtod_l+0x1ae>
 8012110:	494c      	ldr	r1, [pc, #304]	; (8012244 <_strtod_l+0x294>)
 8012112:	2201      	movs	r2, #1
 8012114:	f7fe f9da 	bl	80104cc <strncmp>
 8012118:	2800      	cmp	r0, #0
 801211a:	d030      	beq.n	801217e <_strtod_l+0x1ce>
 801211c:	2000      	movs	r0, #0
 801211e:	4632      	mov	r2, r6
 8012120:	9005      	str	r0, [sp, #20]
 8012122:	465e      	mov	r6, fp
 8012124:	4603      	mov	r3, r0
 8012126:	2a65      	cmp	r2, #101	; 0x65
 8012128:	d001      	beq.n	801212e <_strtod_l+0x17e>
 801212a:	2a45      	cmp	r2, #69	; 0x45
 801212c:	d113      	bne.n	8012156 <_strtod_l+0x1a6>
 801212e:	b91e      	cbnz	r6, 8012138 <_strtod_l+0x188>
 8012130:	9a04      	ldr	r2, [sp, #16]
 8012132:	4302      	orrs	r2, r0
 8012134:	d094      	beq.n	8012060 <_strtod_l+0xb0>
 8012136:	2600      	movs	r6, #0
 8012138:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801213a:	1c6a      	adds	r2, r5, #1
 801213c:	9215      	str	r2, [sp, #84]	; 0x54
 801213e:	786a      	ldrb	r2, [r5, #1]
 8012140:	2a2b      	cmp	r2, #43	; 0x2b
 8012142:	d074      	beq.n	801222e <_strtod_l+0x27e>
 8012144:	2a2d      	cmp	r2, #45	; 0x2d
 8012146:	d078      	beq.n	801223a <_strtod_l+0x28a>
 8012148:	f04f 0c00 	mov.w	ip, #0
 801214c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012150:	2909      	cmp	r1, #9
 8012152:	d97f      	bls.n	8012254 <_strtod_l+0x2a4>
 8012154:	9515      	str	r5, [sp, #84]	; 0x54
 8012156:	2700      	movs	r7, #0
 8012158:	e09e      	b.n	8012298 <_strtod_l+0x2e8>
 801215a:	2300      	movs	r3, #0
 801215c:	e7c8      	b.n	80120f0 <_strtod_l+0x140>
 801215e:	f1bb 0f08 	cmp.w	fp, #8
 8012162:	bfd8      	it	le
 8012164:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012166:	f100 0001 	add.w	r0, r0, #1
 801216a:	bfda      	itte	le
 801216c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012170:	9309      	strle	r3, [sp, #36]	; 0x24
 8012172:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012176:	f10b 0b01 	add.w	fp, fp, #1
 801217a:	9015      	str	r0, [sp, #84]	; 0x54
 801217c:	e7c1      	b.n	8012102 <_strtod_l+0x152>
 801217e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012180:	1c5a      	adds	r2, r3, #1
 8012182:	9215      	str	r2, [sp, #84]	; 0x54
 8012184:	785a      	ldrb	r2, [r3, #1]
 8012186:	f1bb 0f00 	cmp.w	fp, #0
 801218a:	d037      	beq.n	80121fc <_strtod_l+0x24c>
 801218c:	9005      	str	r0, [sp, #20]
 801218e:	465e      	mov	r6, fp
 8012190:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012194:	2b09      	cmp	r3, #9
 8012196:	d912      	bls.n	80121be <_strtod_l+0x20e>
 8012198:	2301      	movs	r3, #1
 801219a:	e7c4      	b.n	8012126 <_strtod_l+0x176>
 801219c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	9215      	str	r2, [sp, #84]	; 0x54
 80121a2:	785a      	ldrb	r2, [r3, #1]
 80121a4:	3001      	adds	r0, #1
 80121a6:	2a30      	cmp	r2, #48	; 0x30
 80121a8:	d0f8      	beq.n	801219c <_strtod_l+0x1ec>
 80121aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80121ae:	2b08      	cmp	r3, #8
 80121b0:	f200 84c1 	bhi.w	8012b36 <_strtod_l+0xb86>
 80121b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121b6:	9005      	str	r0, [sp, #20]
 80121b8:	2000      	movs	r0, #0
 80121ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80121bc:	4606      	mov	r6, r0
 80121be:	3a30      	subs	r2, #48	; 0x30
 80121c0:	f100 0301 	add.w	r3, r0, #1
 80121c4:	d014      	beq.n	80121f0 <_strtod_l+0x240>
 80121c6:	9905      	ldr	r1, [sp, #20]
 80121c8:	4419      	add	r1, r3
 80121ca:	9105      	str	r1, [sp, #20]
 80121cc:	4633      	mov	r3, r6
 80121ce:	eb00 0c06 	add.w	ip, r0, r6
 80121d2:	210a      	movs	r1, #10
 80121d4:	4563      	cmp	r3, ip
 80121d6:	d113      	bne.n	8012200 <_strtod_l+0x250>
 80121d8:	1833      	adds	r3, r6, r0
 80121da:	2b08      	cmp	r3, #8
 80121dc:	f106 0601 	add.w	r6, r6, #1
 80121e0:	4406      	add	r6, r0
 80121e2:	dc1a      	bgt.n	801221a <_strtod_l+0x26a>
 80121e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121e6:	230a      	movs	r3, #10
 80121e8:	fb03 2301 	mla	r3, r3, r1, r2
 80121ec:	9309      	str	r3, [sp, #36]	; 0x24
 80121ee:	2300      	movs	r3, #0
 80121f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80121f2:	1c51      	adds	r1, r2, #1
 80121f4:	9115      	str	r1, [sp, #84]	; 0x54
 80121f6:	7852      	ldrb	r2, [r2, #1]
 80121f8:	4618      	mov	r0, r3
 80121fa:	e7c9      	b.n	8012190 <_strtod_l+0x1e0>
 80121fc:	4658      	mov	r0, fp
 80121fe:	e7d2      	b.n	80121a6 <_strtod_l+0x1f6>
 8012200:	2b08      	cmp	r3, #8
 8012202:	f103 0301 	add.w	r3, r3, #1
 8012206:	dc03      	bgt.n	8012210 <_strtod_l+0x260>
 8012208:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801220a:	434f      	muls	r7, r1
 801220c:	9709      	str	r7, [sp, #36]	; 0x24
 801220e:	e7e1      	b.n	80121d4 <_strtod_l+0x224>
 8012210:	2b10      	cmp	r3, #16
 8012212:	bfd8      	it	le
 8012214:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012218:	e7dc      	b.n	80121d4 <_strtod_l+0x224>
 801221a:	2e10      	cmp	r6, #16
 801221c:	bfdc      	itt	le
 801221e:	230a      	movle	r3, #10
 8012220:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012224:	e7e3      	b.n	80121ee <_strtod_l+0x23e>
 8012226:	2300      	movs	r3, #0
 8012228:	9305      	str	r3, [sp, #20]
 801222a:	2301      	movs	r3, #1
 801222c:	e780      	b.n	8012130 <_strtod_l+0x180>
 801222e:	f04f 0c00 	mov.w	ip, #0
 8012232:	1caa      	adds	r2, r5, #2
 8012234:	9215      	str	r2, [sp, #84]	; 0x54
 8012236:	78aa      	ldrb	r2, [r5, #2]
 8012238:	e788      	b.n	801214c <_strtod_l+0x19c>
 801223a:	f04f 0c01 	mov.w	ip, #1
 801223e:	e7f8      	b.n	8012232 <_strtod_l+0x282>
 8012240:	08015570 	.word	0x08015570
 8012244:	0801556c 	.word	0x0801556c
 8012248:	7ff00000 	.word	0x7ff00000
 801224c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801224e:	1c51      	adds	r1, r2, #1
 8012250:	9115      	str	r1, [sp, #84]	; 0x54
 8012252:	7852      	ldrb	r2, [r2, #1]
 8012254:	2a30      	cmp	r2, #48	; 0x30
 8012256:	d0f9      	beq.n	801224c <_strtod_l+0x29c>
 8012258:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801225c:	2908      	cmp	r1, #8
 801225e:	f63f af7a 	bhi.w	8012156 <_strtod_l+0x1a6>
 8012262:	3a30      	subs	r2, #48	; 0x30
 8012264:	9208      	str	r2, [sp, #32]
 8012266:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012268:	920c      	str	r2, [sp, #48]	; 0x30
 801226a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801226c:	1c57      	adds	r7, r2, #1
 801226e:	9715      	str	r7, [sp, #84]	; 0x54
 8012270:	7852      	ldrb	r2, [r2, #1]
 8012272:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012276:	f1be 0f09 	cmp.w	lr, #9
 801227a:	d938      	bls.n	80122ee <_strtod_l+0x33e>
 801227c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801227e:	1a7f      	subs	r7, r7, r1
 8012280:	2f08      	cmp	r7, #8
 8012282:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012286:	dc03      	bgt.n	8012290 <_strtod_l+0x2e0>
 8012288:	9908      	ldr	r1, [sp, #32]
 801228a:	428f      	cmp	r7, r1
 801228c:	bfa8      	it	ge
 801228e:	460f      	movge	r7, r1
 8012290:	f1bc 0f00 	cmp.w	ip, #0
 8012294:	d000      	beq.n	8012298 <_strtod_l+0x2e8>
 8012296:	427f      	negs	r7, r7
 8012298:	2e00      	cmp	r6, #0
 801229a:	d14f      	bne.n	801233c <_strtod_l+0x38c>
 801229c:	9904      	ldr	r1, [sp, #16]
 801229e:	4301      	orrs	r1, r0
 80122a0:	f47f aec1 	bne.w	8012026 <_strtod_l+0x76>
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f47f aedb 	bne.w	8012060 <_strtod_l+0xb0>
 80122aa:	2a69      	cmp	r2, #105	; 0x69
 80122ac:	d029      	beq.n	8012302 <_strtod_l+0x352>
 80122ae:	dc26      	bgt.n	80122fe <_strtod_l+0x34e>
 80122b0:	2a49      	cmp	r2, #73	; 0x49
 80122b2:	d026      	beq.n	8012302 <_strtod_l+0x352>
 80122b4:	2a4e      	cmp	r2, #78	; 0x4e
 80122b6:	f47f aed3 	bne.w	8012060 <_strtod_l+0xb0>
 80122ba:	499b      	ldr	r1, [pc, #620]	; (8012528 <_strtod_l+0x578>)
 80122bc:	a815      	add	r0, sp, #84	; 0x54
 80122be:	f001 fbd9 	bl	8013a74 <__match>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	f43f aecc 	beq.w	8012060 <_strtod_l+0xb0>
 80122c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2b28      	cmp	r3, #40	; 0x28
 80122ce:	d12f      	bne.n	8012330 <_strtod_l+0x380>
 80122d0:	4996      	ldr	r1, [pc, #600]	; (801252c <_strtod_l+0x57c>)
 80122d2:	aa18      	add	r2, sp, #96	; 0x60
 80122d4:	a815      	add	r0, sp, #84	; 0x54
 80122d6:	f001 fbe1 	bl	8013a9c <__hexnan>
 80122da:	2805      	cmp	r0, #5
 80122dc:	d128      	bne.n	8012330 <_strtod_l+0x380>
 80122de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80122e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80122e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80122e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80122ec:	e69b      	b.n	8012026 <_strtod_l+0x76>
 80122ee:	9f08      	ldr	r7, [sp, #32]
 80122f0:	210a      	movs	r1, #10
 80122f2:	fb01 2107 	mla	r1, r1, r7, r2
 80122f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80122fa:	9208      	str	r2, [sp, #32]
 80122fc:	e7b5      	b.n	801226a <_strtod_l+0x2ba>
 80122fe:	2a6e      	cmp	r2, #110	; 0x6e
 8012300:	e7d9      	b.n	80122b6 <_strtod_l+0x306>
 8012302:	498b      	ldr	r1, [pc, #556]	; (8012530 <_strtod_l+0x580>)
 8012304:	a815      	add	r0, sp, #84	; 0x54
 8012306:	f001 fbb5 	bl	8013a74 <__match>
 801230a:	2800      	cmp	r0, #0
 801230c:	f43f aea8 	beq.w	8012060 <_strtod_l+0xb0>
 8012310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012312:	4988      	ldr	r1, [pc, #544]	; (8012534 <_strtod_l+0x584>)
 8012314:	3b01      	subs	r3, #1
 8012316:	a815      	add	r0, sp, #84	; 0x54
 8012318:	9315      	str	r3, [sp, #84]	; 0x54
 801231a:	f001 fbab 	bl	8013a74 <__match>
 801231e:	b910      	cbnz	r0, 8012326 <_strtod_l+0x376>
 8012320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012322:	3301      	adds	r3, #1
 8012324:	9315      	str	r3, [sp, #84]	; 0x54
 8012326:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012544 <_strtod_l+0x594>
 801232a:	f04f 0800 	mov.w	r8, #0
 801232e:	e67a      	b.n	8012026 <_strtod_l+0x76>
 8012330:	4881      	ldr	r0, [pc, #516]	; (8012538 <_strtod_l+0x588>)
 8012332:	f001 f8d9 	bl	80134e8 <nan>
 8012336:	ec59 8b10 	vmov	r8, r9, d0
 801233a:	e674      	b.n	8012026 <_strtod_l+0x76>
 801233c:	9b05      	ldr	r3, [sp, #20]
 801233e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012340:	1afb      	subs	r3, r7, r3
 8012342:	f1bb 0f00 	cmp.w	fp, #0
 8012346:	bf08      	it	eq
 8012348:	46b3      	moveq	fp, r6
 801234a:	2e10      	cmp	r6, #16
 801234c:	9308      	str	r3, [sp, #32]
 801234e:	4635      	mov	r5, r6
 8012350:	bfa8      	it	ge
 8012352:	2510      	movge	r5, #16
 8012354:	f7ee f8d6 	bl	8000504 <__aeabi_ui2d>
 8012358:	2e09      	cmp	r6, #9
 801235a:	4680      	mov	r8, r0
 801235c:	4689      	mov	r9, r1
 801235e:	dd13      	ble.n	8012388 <_strtod_l+0x3d8>
 8012360:	4b76      	ldr	r3, [pc, #472]	; (801253c <_strtod_l+0x58c>)
 8012362:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012366:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801236a:	f7ee f945 	bl	80005f8 <__aeabi_dmul>
 801236e:	4680      	mov	r8, r0
 8012370:	4650      	mov	r0, sl
 8012372:	4689      	mov	r9, r1
 8012374:	f7ee f8c6 	bl	8000504 <__aeabi_ui2d>
 8012378:	4602      	mov	r2, r0
 801237a:	460b      	mov	r3, r1
 801237c:	4640      	mov	r0, r8
 801237e:	4649      	mov	r1, r9
 8012380:	f7ed ff84 	bl	800028c <__adddf3>
 8012384:	4680      	mov	r8, r0
 8012386:	4689      	mov	r9, r1
 8012388:	2e0f      	cmp	r6, #15
 801238a:	dc38      	bgt.n	80123fe <_strtod_l+0x44e>
 801238c:	9b08      	ldr	r3, [sp, #32]
 801238e:	2b00      	cmp	r3, #0
 8012390:	f43f ae49 	beq.w	8012026 <_strtod_l+0x76>
 8012394:	dd24      	ble.n	80123e0 <_strtod_l+0x430>
 8012396:	2b16      	cmp	r3, #22
 8012398:	dc0b      	bgt.n	80123b2 <_strtod_l+0x402>
 801239a:	4968      	ldr	r1, [pc, #416]	; (801253c <_strtod_l+0x58c>)
 801239c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80123a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123a4:	4642      	mov	r2, r8
 80123a6:	464b      	mov	r3, r9
 80123a8:	f7ee f926 	bl	80005f8 <__aeabi_dmul>
 80123ac:	4680      	mov	r8, r0
 80123ae:	4689      	mov	r9, r1
 80123b0:	e639      	b.n	8012026 <_strtod_l+0x76>
 80123b2:	9a08      	ldr	r2, [sp, #32]
 80123b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80123b8:	4293      	cmp	r3, r2
 80123ba:	db20      	blt.n	80123fe <_strtod_l+0x44e>
 80123bc:	4c5f      	ldr	r4, [pc, #380]	; (801253c <_strtod_l+0x58c>)
 80123be:	f1c6 060f 	rsb	r6, r6, #15
 80123c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80123c6:	4642      	mov	r2, r8
 80123c8:	464b      	mov	r3, r9
 80123ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ce:	f7ee f913 	bl	80005f8 <__aeabi_dmul>
 80123d2:	9b08      	ldr	r3, [sp, #32]
 80123d4:	1b9e      	subs	r6, r3, r6
 80123d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80123da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123de:	e7e3      	b.n	80123a8 <_strtod_l+0x3f8>
 80123e0:	9b08      	ldr	r3, [sp, #32]
 80123e2:	3316      	adds	r3, #22
 80123e4:	db0b      	blt.n	80123fe <_strtod_l+0x44e>
 80123e6:	9b05      	ldr	r3, [sp, #20]
 80123e8:	1bdf      	subs	r7, r3, r7
 80123ea:	4b54      	ldr	r3, [pc, #336]	; (801253c <_strtod_l+0x58c>)
 80123ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80123f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123f4:	4640      	mov	r0, r8
 80123f6:	4649      	mov	r1, r9
 80123f8:	f7ee fa28 	bl	800084c <__aeabi_ddiv>
 80123fc:	e7d6      	b.n	80123ac <_strtod_l+0x3fc>
 80123fe:	9b08      	ldr	r3, [sp, #32]
 8012400:	1b75      	subs	r5, r6, r5
 8012402:	441d      	add	r5, r3
 8012404:	2d00      	cmp	r5, #0
 8012406:	dd70      	ble.n	80124ea <_strtod_l+0x53a>
 8012408:	f015 030f 	ands.w	r3, r5, #15
 801240c:	d00a      	beq.n	8012424 <_strtod_l+0x474>
 801240e:	494b      	ldr	r1, [pc, #300]	; (801253c <_strtod_l+0x58c>)
 8012410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012414:	4642      	mov	r2, r8
 8012416:	464b      	mov	r3, r9
 8012418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801241c:	f7ee f8ec 	bl	80005f8 <__aeabi_dmul>
 8012420:	4680      	mov	r8, r0
 8012422:	4689      	mov	r9, r1
 8012424:	f035 050f 	bics.w	r5, r5, #15
 8012428:	d04d      	beq.n	80124c6 <_strtod_l+0x516>
 801242a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801242e:	dd22      	ble.n	8012476 <_strtod_l+0x4c6>
 8012430:	2500      	movs	r5, #0
 8012432:	46ab      	mov	fp, r5
 8012434:	9509      	str	r5, [sp, #36]	; 0x24
 8012436:	9505      	str	r5, [sp, #20]
 8012438:	2322      	movs	r3, #34	; 0x22
 801243a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012544 <_strtod_l+0x594>
 801243e:	6023      	str	r3, [r4, #0]
 8012440:	f04f 0800 	mov.w	r8, #0
 8012444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012446:	2b00      	cmp	r3, #0
 8012448:	f43f aded 	beq.w	8012026 <_strtod_l+0x76>
 801244c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801244e:	4620      	mov	r0, r4
 8012450:	f7ff f924 	bl	801169c <_Bfree>
 8012454:	9905      	ldr	r1, [sp, #20]
 8012456:	4620      	mov	r0, r4
 8012458:	f7ff f920 	bl	801169c <_Bfree>
 801245c:	4659      	mov	r1, fp
 801245e:	4620      	mov	r0, r4
 8012460:	f7ff f91c 	bl	801169c <_Bfree>
 8012464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012466:	4620      	mov	r0, r4
 8012468:	f7ff f918 	bl	801169c <_Bfree>
 801246c:	4629      	mov	r1, r5
 801246e:	4620      	mov	r0, r4
 8012470:	f7ff f914 	bl	801169c <_Bfree>
 8012474:	e5d7      	b.n	8012026 <_strtod_l+0x76>
 8012476:	4b32      	ldr	r3, [pc, #200]	; (8012540 <_strtod_l+0x590>)
 8012478:	9304      	str	r3, [sp, #16]
 801247a:	2300      	movs	r3, #0
 801247c:	112d      	asrs	r5, r5, #4
 801247e:	4640      	mov	r0, r8
 8012480:	4649      	mov	r1, r9
 8012482:	469a      	mov	sl, r3
 8012484:	2d01      	cmp	r5, #1
 8012486:	dc21      	bgt.n	80124cc <_strtod_l+0x51c>
 8012488:	b10b      	cbz	r3, 801248e <_strtod_l+0x4de>
 801248a:	4680      	mov	r8, r0
 801248c:	4689      	mov	r9, r1
 801248e:	492c      	ldr	r1, [pc, #176]	; (8012540 <_strtod_l+0x590>)
 8012490:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012494:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012498:	4642      	mov	r2, r8
 801249a:	464b      	mov	r3, r9
 801249c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124a0:	f7ee f8aa 	bl	80005f8 <__aeabi_dmul>
 80124a4:	4b27      	ldr	r3, [pc, #156]	; (8012544 <_strtod_l+0x594>)
 80124a6:	460a      	mov	r2, r1
 80124a8:	400b      	ands	r3, r1
 80124aa:	4927      	ldr	r1, [pc, #156]	; (8012548 <_strtod_l+0x598>)
 80124ac:	428b      	cmp	r3, r1
 80124ae:	4680      	mov	r8, r0
 80124b0:	d8be      	bhi.n	8012430 <_strtod_l+0x480>
 80124b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80124b6:	428b      	cmp	r3, r1
 80124b8:	bf86      	itte	hi
 80124ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801254c <_strtod_l+0x59c>
 80124be:	f04f 38ff 	movhi.w	r8, #4294967295
 80124c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80124c6:	2300      	movs	r3, #0
 80124c8:	9304      	str	r3, [sp, #16]
 80124ca:	e07b      	b.n	80125c4 <_strtod_l+0x614>
 80124cc:	07ea      	lsls	r2, r5, #31
 80124ce:	d505      	bpl.n	80124dc <_strtod_l+0x52c>
 80124d0:	9b04      	ldr	r3, [sp, #16]
 80124d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d6:	f7ee f88f 	bl	80005f8 <__aeabi_dmul>
 80124da:	2301      	movs	r3, #1
 80124dc:	9a04      	ldr	r2, [sp, #16]
 80124de:	3208      	adds	r2, #8
 80124e0:	f10a 0a01 	add.w	sl, sl, #1
 80124e4:	106d      	asrs	r5, r5, #1
 80124e6:	9204      	str	r2, [sp, #16]
 80124e8:	e7cc      	b.n	8012484 <_strtod_l+0x4d4>
 80124ea:	d0ec      	beq.n	80124c6 <_strtod_l+0x516>
 80124ec:	426d      	negs	r5, r5
 80124ee:	f015 020f 	ands.w	r2, r5, #15
 80124f2:	d00a      	beq.n	801250a <_strtod_l+0x55a>
 80124f4:	4b11      	ldr	r3, [pc, #68]	; (801253c <_strtod_l+0x58c>)
 80124f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012502:	f7ee f9a3 	bl	800084c <__aeabi_ddiv>
 8012506:	4680      	mov	r8, r0
 8012508:	4689      	mov	r9, r1
 801250a:	112d      	asrs	r5, r5, #4
 801250c:	d0db      	beq.n	80124c6 <_strtod_l+0x516>
 801250e:	2d1f      	cmp	r5, #31
 8012510:	dd1e      	ble.n	8012550 <_strtod_l+0x5a0>
 8012512:	2500      	movs	r5, #0
 8012514:	46ab      	mov	fp, r5
 8012516:	9509      	str	r5, [sp, #36]	; 0x24
 8012518:	9505      	str	r5, [sp, #20]
 801251a:	2322      	movs	r3, #34	; 0x22
 801251c:	f04f 0800 	mov.w	r8, #0
 8012520:	f04f 0900 	mov.w	r9, #0
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	e78d      	b.n	8012444 <_strtod_l+0x494>
 8012528:	08015300 	.word	0x08015300
 801252c:	08015584 	.word	0x08015584
 8012530:	080152f8 	.word	0x080152f8
 8012534:	080153a0 	.word	0x080153a0
 8012538:	080152f2 	.word	0x080152f2
 801253c:	08015498 	.word	0x08015498
 8012540:	08015470 	.word	0x08015470
 8012544:	7ff00000 	.word	0x7ff00000
 8012548:	7ca00000 	.word	0x7ca00000
 801254c:	7fefffff 	.word	0x7fefffff
 8012550:	f015 0310 	ands.w	r3, r5, #16
 8012554:	bf18      	it	ne
 8012556:	236a      	movne	r3, #106	; 0x6a
 8012558:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80128fc <_strtod_l+0x94c>
 801255c:	9304      	str	r3, [sp, #16]
 801255e:	4640      	mov	r0, r8
 8012560:	4649      	mov	r1, r9
 8012562:	2300      	movs	r3, #0
 8012564:	07ea      	lsls	r2, r5, #31
 8012566:	d504      	bpl.n	8012572 <_strtod_l+0x5c2>
 8012568:	e9da 2300 	ldrd	r2, r3, [sl]
 801256c:	f7ee f844 	bl	80005f8 <__aeabi_dmul>
 8012570:	2301      	movs	r3, #1
 8012572:	106d      	asrs	r5, r5, #1
 8012574:	f10a 0a08 	add.w	sl, sl, #8
 8012578:	d1f4      	bne.n	8012564 <_strtod_l+0x5b4>
 801257a:	b10b      	cbz	r3, 8012580 <_strtod_l+0x5d0>
 801257c:	4680      	mov	r8, r0
 801257e:	4689      	mov	r9, r1
 8012580:	9b04      	ldr	r3, [sp, #16]
 8012582:	b1bb      	cbz	r3, 80125b4 <_strtod_l+0x604>
 8012584:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012588:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801258c:	2b00      	cmp	r3, #0
 801258e:	4649      	mov	r1, r9
 8012590:	dd10      	ble.n	80125b4 <_strtod_l+0x604>
 8012592:	2b1f      	cmp	r3, #31
 8012594:	f340 811e 	ble.w	80127d4 <_strtod_l+0x824>
 8012598:	2b34      	cmp	r3, #52	; 0x34
 801259a:	bfde      	ittt	le
 801259c:	f04f 33ff 	movle.w	r3, #4294967295
 80125a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80125a4:	4093      	lslle	r3, r2
 80125a6:	f04f 0800 	mov.w	r8, #0
 80125aa:	bfcc      	ite	gt
 80125ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80125b0:	ea03 0901 	andle.w	r9, r3, r1
 80125b4:	2200      	movs	r2, #0
 80125b6:	2300      	movs	r3, #0
 80125b8:	4640      	mov	r0, r8
 80125ba:	4649      	mov	r1, r9
 80125bc:	f7ee fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	d1a6      	bne.n	8012512 <_strtod_l+0x562>
 80125c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125ca:	4633      	mov	r3, r6
 80125cc:	465a      	mov	r2, fp
 80125ce:	4620      	mov	r0, r4
 80125d0:	f7ff f8cc 	bl	801176c <__s2b>
 80125d4:	9009      	str	r0, [sp, #36]	; 0x24
 80125d6:	2800      	cmp	r0, #0
 80125d8:	f43f af2a 	beq.w	8012430 <_strtod_l+0x480>
 80125dc:	9a08      	ldr	r2, [sp, #32]
 80125de:	9b05      	ldr	r3, [sp, #20]
 80125e0:	2a00      	cmp	r2, #0
 80125e2:	eba3 0307 	sub.w	r3, r3, r7
 80125e6:	bfa8      	it	ge
 80125e8:	2300      	movge	r3, #0
 80125ea:	930c      	str	r3, [sp, #48]	; 0x30
 80125ec:	2500      	movs	r5, #0
 80125ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80125f2:	9312      	str	r3, [sp, #72]	; 0x48
 80125f4:	46ab      	mov	fp, r5
 80125f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f8:	4620      	mov	r0, r4
 80125fa:	6859      	ldr	r1, [r3, #4]
 80125fc:	f7ff f80e 	bl	801161c <_Balloc>
 8012600:	9005      	str	r0, [sp, #20]
 8012602:	2800      	cmp	r0, #0
 8012604:	f43f af18 	beq.w	8012438 <_strtod_l+0x488>
 8012608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801260a:	691a      	ldr	r2, [r3, #16]
 801260c:	3202      	adds	r2, #2
 801260e:	f103 010c 	add.w	r1, r3, #12
 8012612:	0092      	lsls	r2, r2, #2
 8012614:	300c      	adds	r0, #12
 8012616:	f7fe f868 	bl	80106ea <memcpy>
 801261a:	ec49 8b10 	vmov	d0, r8, r9
 801261e:	aa18      	add	r2, sp, #96	; 0x60
 8012620:	a917      	add	r1, sp, #92	; 0x5c
 8012622:	4620      	mov	r0, r4
 8012624:	f7ff fbd6 	bl	8011dd4 <__d2b>
 8012628:	ec49 8b18 	vmov	d8, r8, r9
 801262c:	9016      	str	r0, [sp, #88]	; 0x58
 801262e:	2800      	cmp	r0, #0
 8012630:	f43f af02 	beq.w	8012438 <_strtod_l+0x488>
 8012634:	2101      	movs	r1, #1
 8012636:	4620      	mov	r0, r4
 8012638:	f7ff f930 	bl	801189c <__i2b>
 801263c:	4683      	mov	fp, r0
 801263e:	2800      	cmp	r0, #0
 8012640:	f43f aefa 	beq.w	8012438 <_strtod_l+0x488>
 8012644:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012646:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012648:	2e00      	cmp	r6, #0
 801264a:	bfab      	itete	ge
 801264c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801264e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012650:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012652:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012656:	bfac      	ite	ge
 8012658:	eb06 0a03 	addge.w	sl, r6, r3
 801265c:	1b9f      	sublt	r7, r3, r6
 801265e:	9b04      	ldr	r3, [sp, #16]
 8012660:	1af6      	subs	r6, r6, r3
 8012662:	4416      	add	r6, r2
 8012664:	4ba0      	ldr	r3, [pc, #640]	; (80128e8 <_strtod_l+0x938>)
 8012666:	3e01      	subs	r6, #1
 8012668:	429e      	cmp	r6, r3
 801266a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801266e:	f280 80c4 	bge.w	80127fa <_strtod_l+0x84a>
 8012672:	1b9b      	subs	r3, r3, r6
 8012674:	2b1f      	cmp	r3, #31
 8012676:	eba2 0203 	sub.w	r2, r2, r3
 801267a:	f04f 0101 	mov.w	r1, #1
 801267e:	f300 80b0 	bgt.w	80127e2 <_strtod_l+0x832>
 8012682:	fa01 f303 	lsl.w	r3, r1, r3
 8012686:	930e      	str	r3, [sp, #56]	; 0x38
 8012688:	2300      	movs	r3, #0
 801268a:	930d      	str	r3, [sp, #52]	; 0x34
 801268c:	eb0a 0602 	add.w	r6, sl, r2
 8012690:	9b04      	ldr	r3, [sp, #16]
 8012692:	45b2      	cmp	sl, r6
 8012694:	4417      	add	r7, r2
 8012696:	441f      	add	r7, r3
 8012698:	4653      	mov	r3, sl
 801269a:	bfa8      	it	ge
 801269c:	4633      	movge	r3, r6
 801269e:	42bb      	cmp	r3, r7
 80126a0:	bfa8      	it	ge
 80126a2:	463b      	movge	r3, r7
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	bfc2      	ittt	gt
 80126a8:	1af6      	subgt	r6, r6, r3
 80126aa:	1aff      	subgt	r7, r7, r3
 80126ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 80126b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	dd17      	ble.n	80126e6 <_strtod_l+0x736>
 80126b6:	4659      	mov	r1, fp
 80126b8:	461a      	mov	r2, r3
 80126ba:	4620      	mov	r0, r4
 80126bc:	f7ff f9ae 	bl	8011a1c <__pow5mult>
 80126c0:	4683      	mov	fp, r0
 80126c2:	2800      	cmp	r0, #0
 80126c4:	f43f aeb8 	beq.w	8012438 <_strtod_l+0x488>
 80126c8:	4601      	mov	r1, r0
 80126ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80126cc:	4620      	mov	r0, r4
 80126ce:	f7ff f8fb 	bl	80118c8 <__multiply>
 80126d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80126d4:	2800      	cmp	r0, #0
 80126d6:	f43f aeaf 	beq.w	8012438 <_strtod_l+0x488>
 80126da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80126dc:	4620      	mov	r0, r4
 80126de:	f7fe ffdd 	bl	801169c <_Bfree>
 80126e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126e4:	9316      	str	r3, [sp, #88]	; 0x58
 80126e6:	2e00      	cmp	r6, #0
 80126e8:	f300 808c 	bgt.w	8012804 <_strtod_l+0x854>
 80126ec:	9b08      	ldr	r3, [sp, #32]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	dd08      	ble.n	8012704 <_strtod_l+0x754>
 80126f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126f4:	9905      	ldr	r1, [sp, #20]
 80126f6:	4620      	mov	r0, r4
 80126f8:	f7ff f990 	bl	8011a1c <__pow5mult>
 80126fc:	9005      	str	r0, [sp, #20]
 80126fe:	2800      	cmp	r0, #0
 8012700:	f43f ae9a 	beq.w	8012438 <_strtod_l+0x488>
 8012704:	2f00      	cmp	r7, #0
 8012706:	dd08      	ble.n	801271a <_strtod_l+0x76a>
 8012708:	9905      	ldr	r1, [sp, #20]
 801270a:	463a      	mov	r2, r7
 801270c:	4620      	mov	r0, r4
 801270e:	f7ff f9df 	bl	8011ad0 <__lshift>
 8012712:	9005      	str	r0, [sp, #20]
 8012714:	2800      	cmp	r0, #0
 8012716:	f43f ae8f 	beq.w	8012438 <_strtod_l+0x488>
 801271a:	f1ba 0f00 	cmp.w	sl, #0
 801271e:	dd08      	ble.n	8012732 <_strtod_l+0x782>
 8012720:	4659      	mov	r1, fp
 8012722:	4652      	mov	r2, sl
 8012724:	4620      	mov	r0, r4
 8012726:	f7ff f9d3 	bl	8011ad0 <__lshift>
 801272a:	4683      	mov	fp, r0
 801272c:	2800      	cmp	r0, #0
 801272e:	f43f ae83 	beq.w	8012438 <_strtod_l+0x488>
 8012732:	9a05      	ldr	r2, [sp, #20]
 8012734:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012736:	4620      	mov	r0, r4
 8012738:	f7ff fa52 	bl	8011be0 <__mdiff>
 801273c:	4605      	mov	r5, r0
 801273e:	2800      	cmp	r0, #0
 8012740:	f43f ae7a 	beq.w	8012438 <_strtod_l+0x488>
 8012744:	68c3      	ldr	r3, [r0, #12]
 8012746:	930b      	str	r3, [sp, #44]	; 0x2c
 8012748:	2300      	movs	r3, #0
 801274a:	60c3      	str	r3, [r0, #12]
 801274c:	4659      	mov	r1, fp
 801274e:	f7ff fa2b 	bl	8011ba8 <__mcmp>
 8012752:	2800      	cmp	r0, #0
 8012754:	da60      	bge.n	8012818 <_strtod_l+0x868>
 8012756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012758:	ea53 0308 	orrs.w	r3, r3, r8
 801275c:	f040 8084 	bne.w	8012868 <_strtod_l+0x8b8>
 8012760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012764:	2b00      	cmp	r3, #0
 8012766:	d17f      	bne.n	8012868 <_strtod_l+0x8b8>
 8012768:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801276c:	0d1b      	lsrs	r3, r3, #20
 801276e:	051b      	lsls	r3, r3, #20
 8012770:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012774:	d978      	bls.n	8012868 <_strtod_l+0x8b8>
 8012776:	696b      	ldr	r3, [r5, #20]
 8012778:	b913      	cbnz	r3, 8012780 <_strtod_l+0x7d0>
 801277a:	692b      	ldr	r3, [r5, #16]
 801277c:	2b01      	cmp	r3, #1
 801277e:	dd73      	ble.n	8012868 <_strtod_l+0x8b8>
 8012780:	4629      	mov	r1, r5
 8012782:	2201      	movs	r2, #1
 8012784:	4620      	mov	r0, r4
 8012786:	f7ff f9a3 	bl	8011ad0 <__lshift>
 801278a:	4659      	mov	r1, fp
 801278c:	4605      	mov	r5, r0
 801278e:	f7ff fa0b 	bl	8011ba8 <__mcmp>
 8012792:	2800      	cmp	r0, #0
 8012794:	dd68      	ble.n	8012868 <_strtod_l+0x8b8>
 8012796:	9904      	ldr	r1, [sp, #16]
 8012798:	4a54      	ldr	r2, [pc, #336]	; (80128ec <_strtod_l+0x93c>)
 801279a:	464b      	mov	r3, r9
 801279c:	2900      	cmp	r1, #0
 801279e:	f000 8084 	beq.w	80128aa <_strtod_l+0x8fa>
 80127a2:	ea02 0109 	and.w	r1, r2, r9
 80127a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80127aa:	dc7e      	bgt.n	80128aa <_strtod_l+0x8fa>
 80127ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80127b0:	f77f aeb3 	ble.w	801251a <_strtod_l+0x56a>
 80127b4:	4b4e      	ldr	r3, [pc, #312]	; (80128f0 <_strtod_l+0x940>)
 80127b6:	4640      	mov	r0, r8
 80127b8:	4649      	mov	r1, r9
 80127ba:	2200      	movs	r2, #0
 80127bc:	f7ed ff1c 	bl	80005f8 <__aeabi_dmul>
 80127c0:	4b4a      	ldr	r3, [pc, #296]	; (80128ec <_strtod_l+0x93c>)
 80127c2:	400b      	ands	r3, r1
 80127c4:	4680      	mov	r8, r0
 80127c6:	4689      	mov	r9, r1
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f47f ae3f 	bne.w	801244c <_strtod_l+0x49c>
 80127ce:	2322      	movs	r3, #34	; 0x22
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	e63b      	b.n	801244c <_strtod_l+0x49c>
 80127d4:	f04f 32ff 	mov.w	r2, #4294967295
 80127d8:	fa02 f303 	lsl.w	r3, r2, r3
 80127dc:	ea03 0808 	and.w	r8, r3, r8
 80127e0:	e6e8      	b.n	80125b4 <_strtod_l+0x604>
 80127e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80127e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80127ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80127ee:	36e2      	adds	r6, #226	; 0xe2
 80127f0:	fa01 f306 	lsl.w	r3, r1, r6
 80127f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80127f8:	e748      	b.n	801268c <_strtod_l+0x6dc>
 80127fa:	2100      	movs	r1, #0
 80127fc:	2301      	movs	r3, #1
 80127fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012802:	e743      	b.n	801268c <_strtod_l+0x6dc>
 8012804:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012806:	4632      	mov	r2, r6
 8012808:	4620      	mov	r0, r4
 801280a:	f7ff f961 	bl	8011ad0 <__lshift>
 801280e:	9016      	str	r0, [sp, #88]	; 0x58
 8012810:	2800      	cmp	r0, #0
 8012812:	f47f af6b 	bne.w	80126ec <_strtod_l+0x73c>
 8012816:	e60f      	b.n	8012438 <_strtod_l+0x488>
 8012818:	46ca      	mov	sl, r9
 801281a:	d171      	bne.n	8012900 <_strtod_l+0x950>
 801281c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801281e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012822:	b352      	cbz	r2, 801287a <_strtod_l+0x8ca>
 8012824:	4a33      	ldr	r2, [pc, #204]	; (80128f4 <_strtod_l+0x944>)
 8012826:	4293      	cmp	r3, r2
 8012828:	d12a      	bne.n	8012880 <_strtod_l+0x8d0>
 801282a:	9b04      	ldr	r3, [sp, #16]
 801282c:	4641      	mov	r1, r8
 801282e:	b1fb      	cbz	r3, 8012870 <_strtod_l+0x8c0>
 8012830:	4b2e      	ldr	r3, [pc, #184]	; (80128ec <_strtod_l+0x93c>)
 8012832:	ea09 0303 	and.w	r3, r9, r3
 8012836:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801283a:	f04f 32ff 	mov.w	r2, #4294967295
 801283e:	d81a      	bhi.n	8012876 <_strtod_l+0x8c6>
 8012840:	0d1b      	lsrs	r3, r3, #20
 8012842:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012846:	fa02 f303 	lsl.w	r3, r2, r3
 801284a:	4299      	cmp	r1, r3
 801284c:	d118      	bne.n	8012880 <_strtod_l+0x8d0>
 801284e:	4b2a      	ldr	r3, [pc, #168]	; (80128f8 <_strtod_l+0x948>)
 8012850:	459a      	cmp	sl, r3
 8012852:	d102      	bne.n	801285a <_strtod_l+0x8aa>
 8012854:	3101      	adds	r1, #1
 8012856:	f43f adef 	beq.w	8012438 <_strtod_l+0x488>
 801285a:	4b24      	ldr	r3, [pc, #144]	; (80128ec <_strtod_l+0x93c>)
 801285c:	ea0a 0303 	and.w	r3, sl, r3
 8012860:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012864:	f04f 0800 	mov.w	r8, #0
 8012868:	9b04      	ldr	r3, [sp, #16]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1a2      	bne.n	80127b4 <_strtod_l+0x804>
 801286e:	e5ed      	b.n	801244c <_strtod_l+0x49c>
 8012870:	f04f 33ff 	mov.w	r3, #4294967295
 8012874:	e7e9      	b.n	801284a <_strtod_l+0x89a>
 8012876:	4613      	mov	r3, r2
 8012878:	e7e7      	b.n	801284a <_strtod_l+0x89a>
 801287a:	ea53 0308 	orrs.w	r3, r3, r8
 801287e:	d08a      	beq.n	8012796 <_strtod_l+0x7e6>
 8012880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012882:	b1e3      	cbz	r3, 80128be <_strtod_l+0x90e>
 8012884:	ea13 0f0a 	tst.w	r3, sl
 8012888:	d0ee      	beq.n	8012868 <_strtod_l+0x8b8>
 801288a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801288c:	9a04      	ldr	r2, [sp, #16]
 801288e:	4640      	mov	r0, r8
 8012890:	4649      	mov	r1, r9
 8012892:	b1c3      	cbz	r3, 80128c6 <_strtod_l+0x916>
 8012894:	f7ff fb6f 	bl	8011f76 <sulp>
 8012898:	4602      	mov	r2, r0
 801289a:	460b      	mov	r3, r1
 801289c:	ec51 0b18 	vmov	r0, r1, d8
 80128a0:	f7ed fcf4 	bl	800028c <__adddf3>
 80128a4:	4680      	mov	r8, r0
 80128a6:	4689      	mov	r9, r1
 80128a8:	e7de      	b.n	8012868 <_strtod_l+0x8b8>
 80128aa:	4013      	ands	r3, r2
 80128ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80128b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80128b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80128b8:	f04f 38ff 	mov.w	r8, #4294967295
 80128bc:	e7d4      	b.n	8012868 <_strtod_l+0x8b8>
 80128be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128c0:	ea13 0f08 	tst.w	r3, r8
 80128c4:	e7e0      	b.n	8012888 <_strtod_l+0x8d8>
 80128c6:	f7ff fb56 	bl	8011f76 <sulp>
 80128ca:	4602      	mov	r2, r0
 80128cc:	460b      	mov	r3, r1
 80128ce:	ec51 0b18 	vmov	r0, r1, d8
 80128d2:	f7ed fcd9 	bl	8000288 <__aeabi_dsub>
 80128d6:	2200      	movs	r2, #0
 80128d8:	2300      	movs	r3, #0
 80128da:	4680      	mov	r8, r0
 80128dc:	4689      	mov	r9, r1
 80128de:	f7ee f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80128e2:	2800      	cmp	r0, #0
 80128e4:	d0c0      	beq.n	8012868 <_strtod_l+0x8b8>
 80128e6:	e618      	b.n	801251a <_strtod_l+0x56a>
 80128e8:	fffffc02 	.word	0xfffffc02
 80128ec:	7ff00000 	.word	0x7ff00000
 80128f0:	39500000 	.word	0x39500000
 80128f4:	000fffff 	.word	0x000fffff
 80128f8:	7fefffff 	.word	0x7fefffff
 80128fc:	08015598 	.word	0x08015598
 8012900:	4659      	mov	r1, fp
 8012902:	4628      	mov	r0, r5
 8012904:	f7ff fac0 	bl	8011e88 <__ratio>
 8012908:	ec57 6b10 	vmov	r6, r7, d0
 801290c:	ee10 0a10 	vmov	r0, s0
 8012910:	2200      	movs	r2, #0
 8012912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012916:	4639      	mov	r1, r7
 8012918:	f7ee f8ea 	bl	8000af0 <__aeabi_dcmple>
 801291c:	2800      	cmp	r0, #0
 801291e:	d071      	beq.n	8012a04 <_strtod_l+0xa54>
 8012920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012922:	2b00      	cmp	r3, #0
 8012924:	d17c      	bne.n	8012a20 <_strtod_l+0xa70>
 8012926:	f1b8 0f00 	cmp.w	r8, #0
 801292a:	d15a      	bne.n	80129e2 <_strtod_l+0xa32>
 801292c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012930:	2b00      	cmp	r3, #0
 8012932:	d15d      	bne.n	80129f0 <_strtod_l+0xa40>
 8012934:	4b90      	ldr	r3, [pc, #576]	; (8012b78 <_strtod_l+0xbc8>)
 8012936:	2200      	movs	r2, #0
 8012938:	4630      	mov	r0, r6
 801293a:	4639      	mov	r1, r7
 801293c:	f7ee f8ce 	bl	8000adc <__aeabi_dcmplt>
 8012940:	2800      	cmp	r0, #0
 8012942:	d15c      	bne.n	80129fe <_strtod_l+0xa4e>
 8012944:	4630      	mov	r0, r6
 8012946:	4639      	mov	r1, r7
 8012948:	4b8c      	ldr	r3, [pc, #560]	; (8012b7c <_strtod_l+0xbcc>)
 801294a:	2200      	movs	r2, #0
 801294c:	f7ed fe54 	bl	80005f8 <__aeabi_dmul>
 8012950:	4606      	mov	r6, r0
 8012952:	460f      	mov	r7, r1
 8012954:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012958:	9606      	str	r6, [sp, #24]
 801295a:	9307      	str	r3, [sp, #28]
 801295c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012960:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012964:	4b86      	ldr	r3, [pc, #536]	; (8012b80 <_strtod_l+0xbd0>)
 8012966:	ea0a 0303 	and.w	r3, sl, r3
 801296a:	930d      	str	r3, [sp, #52]	; 0x34
 801296c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801296e:	4b85      	ldr	r3, [pc, #532]	; (8012b84 <_strtod_l+0xbd4>)
 8012970:	429a      	cmp	r2, r3
 8012972:	f040 8090 	bne.w	8012a96 <_strtod_l+0xae6>
 8012976:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801297a:	ec49 8b10 	vmov	d0, r8, r9
 801297e:	f7ff f9b9 	bl	8011cf4 <__ulp>
 8012982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012986:	ec51 0b10 	vmov	r0, r1, d0
 801298a:	f7ed fe35 	bl	80005f8 <__aeabi_dmul>
 801298e:	4642      	mov	r2, r8
 8012990:	464b      	mov	r3, r9
 8012992:	f7ed fc7b 	bl	800028c <__adddf3>
 8012996:	460b      	mov	r3, r1
 8012998:	4979      	ldr	r1, [pc, #484]	; (8012b80 <_strtod_l+0xbd0>)
 801299a:	4a7b      	ldr	r2, [pc, #492]	; (8012b88 <_strtod_l+0xbd8>)
 801299c:	4019      	ands	r1, r3
 801299e:	4291      	cmp	r1, r2
 80129a0:	4680      	mov	r8, r0
 80129a2:	d944      	bls.n	8012a2e <_strtod_l+0xa7e>
 80129a4:	ee18 2a90 	vmov	r2, s17
 80129a8:	4b78      	ldr	r3, [pc, #480]	; (8012b8c <_strtod_l+0xbdc>)
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d104      	bne.n	80129b8 <_strtod_l+0xa08>
 80129ae:	ee18 3a10 	vmov	r3, s16
 80129b2:	3301      	adds	r3, #1
 80129b4:	f43f ad40 	beq.w	8012438 <_strtod_l+0x488>
 80129b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012b8c <_strtod_l+0xbdc>
 80129bc:	f04f 38ff 	mov.w	r8, #4294967295
 80129c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80129c2:	4620      	mov	r0, r4
 80129c4:	f7fe fe6a 	bl	801169c <_Bfree>
 80129c8:	9905      	ldr	r1, [sp, #20]
 80129ca:	4620      	mov	r0, r4
 80129cc:	f7fe fe66 	bl	801169c <_Bfree>
 80129d0:	4659      	mov	r1, fp
 80129d2:	4620      	mov	r0, r4
 80129d4:	f7fe fe62 	bl	801169c <_Bfree>
 80129d8:	4629      	mov	r1, r5
 80129da:	4620      	mov	r0, r4
 80129dc:	f7fe fe5e 	bl	801169c <_Bfree>
 80129e0:	e609      	b.n	80125f6 <_strtod_l+0x646>
 80129e2:	f1b8 0f01 	cmp.w	r8, #1
 80129e6:	d103      	bne.n	80129f0 <_strtod_l+0xa40>
 80129e8:	f1b9 0f00 	cmp.w	r9, #0
 80129ec:	f43f ad95 	beq.w	801251a <_strtod_l+0x56a>
 80129f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012b48 <_strtod_l+0xb98>
 80129f4:	4f60      	ldr	r7, [pc, #384]	; (8012b78 <_strtod_l+0xbc8>)
 80129f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80129fa:	2600      	movs	r6, #0
 80129fc:	e7ae      	b.n	801295c <_strtod_l+0x9ac>
 80129fe:	4f5f      	ldr	r7, [pc, #380]	; (8012b7c <_strtod_l+0xbcc>)
 8012a00:	2600      	movs	r6, #0
 8012a02:	e7a7      	b.n	8012954 <_strtod_l+0x9a4>
 8012a04:	4b5d      	ldr	r3, [pc, #372]	; (8012b7c <_strtod_l+0xbcc>)
 8012a06:	4630      	mov	r0, r6
 8012a08:	4639      	mov	r1, r7
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f7ed fdf4 	bl	80005f8 <__aeabi_dmul>
 8012a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a12:	4606      	mov	r6, r0
 8012a14:	460f      	mov	r7, r1
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d09c      	beq.n	8012954 <_strtod_l+0x9a4>
 8012a1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012a1e:	e79d      	b.n	801295c <_strtod_l+0x9ac>
 8012a20:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012b50 <_strtod_l+0xba0>
 8012a24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a28:	ec57 6b17 	vmov	r6, r7, d7
 8012a2c:	e796      	b.n	801295c <_strtod_l+0x9ac>
 8012a2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012a32:	9b04      	ldr	r3, [sp, #16]
 8012a34:	46ca      	mov	sl, r9
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d1c2      	bne.n	80129c0 <_strtod_l+0xa10>
 8012a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012a3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a40:	0d1b      	lsrs	r3, r3, #20
 8012a42:	051b      	lsls	r3, r3, #20
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d1bb      	bne.n	80129c0 <_strtod_l+0xa10>
 8012a48:	4630      	mov	r0, r6
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	f7ee f934 	bl	8000cb8 <__aeabi_d2lz>
 8012a50:	f7ed fda4 	bl	800059c <__aeabi_l2d>
 8012a54:	4602      	mov	r2, r0
 8012a56:	460b      	mov	r3, r1
 8012a58:	4630      	mov	r0, r6
 8012a5a:	4639      	mov	r1, r7
 8012a5c:	f7ed fc14 	bl	8000288 <__aeabi_dsub>
 8012a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a66:	ea43 0308 	orr.w	r3, r3, r8
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	460f      	mov	r7, r1
 8012a70:	d054      	beq.n	8012b1c <_strtod_l+0xb6c>
 8012a72:	a339      	add	r3, pc, #228	; (adr r3, 8012b58 <_strtod_l+0xba8>)
 8012a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a78:	f7ee f830 	bl	8000adc <__aeabi_dcmplt>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	f47f ace5 	bne.w	801244c <_strtod_l+0x49c>
 8012a82:	a337      	add	r3, pc, #220	; (adr r3, 8012b60 <_strtod_l+0xbb0>)
 8012a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a88:	4630      	mov	r0, r6
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	f7ee f844 	bl	8000b18 <__aeabi_dcmpgt>
 8012a90:	2800      	cmp	r0, #0
 8012a92:	d095      	beq.n	80129c0 <_strtod_l+0xa10>
 8012a94:	e4da      	b.n	801244c <_strtod_l+0x49c>
 8012a96:	9b04      	ldr	r3, [sp, #16]
 8012a98:	b333      	cbz	r3, 8012ae8 <_strtod_l+0xb38>
 8012a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012aa0:	d822      	bhi.n	8012ae8 <_strtod_l+0xb38>
 8012aa2:	a331      	add	r3, pc, #196	; (adr r3, 8012b68 <_strtod_l+0xbb8>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ee f820 	bl	8000af0 <__aeabi_dcmple>
 8012ab0:	b1a0      	cbz	r0, 8012adc <_strtod_l+0xb2c>
 8012ab2:	4639      	mov	r1, r7
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	f7ee f877 	bl	8000ba8 <__aeabi_d2uiz>
 8012aba:	2801      	cmp	r0, #1
 8012abc:	bf38      	it	cc
 8012abe:	2001      	movcc	r0, #1
 8012ac0:	f7ed fd20 	bl	8000504 <__aeabi_ui2d>
 8012ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac6:	4606      	mov	r6, r0
 8012ac8:	460f      	mov	r7, r1
 8012aca:	bb23      	cbnz	r3, 8012b16 <_strtod_l+0xb66>
 8012acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ad0:	9010      	str	r0, [sp, #64]	; 0x40
 8012ad2:	9311      	str	r3, [sp, #68]	; 0x44
 8012ad4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012ad8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ae0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012ae4:	1a9b      	subs	r3, r3, r2
 8012ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ae8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012aec:	eeb0 0a48 	vmov.f32	s0, s16
 8012af0:	eef0 0a68 	vmov.f32	s1, s17
 8012af4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012af8:	f7ff f8fc 	bl	8011cf4 <__ulp>
 8012afc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b00:	ec53 2b10 	vmov	r2, r3, d0
 8012b04:	f7ed fd78 	bl	80005f8 <__aeabi_dmul>
 8012b08:	ec53 2b18 	vmov	r2, r3, d8
 8012b0c:	f7ed fbbe 	bl	800028c <__adddf3>
 8012b10:	4680      	mov	r8, r0
 8012b12:	4689      	mov	r9, r1
 8012b14:	e78d      	b.n	8012a32 <_strtod_l+0xa82>
 8012b16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012b1a:	e7db      	b.n	8012ad4 <_strtod_l+0xb24>
 8012b1c:	a314      	add	r3, pc, #80	; (adr r3, 8012b70 <_strtod_l+0xbc0>)
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f7ed ffdb 	bl	8000adc <__aeabi_dcmplt>
 8012b26:	e7b3      	b.n	8012a90 <_strtod_l+0xae0>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	f7ff ba7c 	b.w	801202e <_strtod_l+0x7e>
 8012b36:	2a65      	cmp	r2, #101	; 0x65
 8012b38:	f43f ab75 	beq.w	8012226 <_strtod_l+0x276>
 8012b3c:	2a45      	cmp	r2, #69	; 0x45
 8012b3e:	f43f ab72 	beq.w	8012226 <_strtod_l+0x276>
 8012b42:	2301      	movs	r3, #1
 8012b44:	f7ff bbaa 	b.w	801229c <_strtod_l+0x2ec>
 8012b48:	00000000 	.word	0x00000000
 8012b4c:	bff00000 	.word	0xbff00000
 8012b50:	00000000 	.word	0x00000000
 8012b54:	3ff00000 	.word	0x3ff00000
 8012b58:	94a03595 	.word	0x94a03595
 8012b5c:	3fdfffff 	.word	0x3fdfffff
 8012b60:	35afe535 	.word	0x35afe535
 8012b64:	3fe00000 	.word	0x3fe00000
 8012b68:	ffc00000 	.word	0xffc00000
 8012b6c:	41dfffff 	.word	0x41dfffff
 8012b70:	94a03595 	.word	0x94a03595
 8012b74:	3fcfffff 	.word	0x3fcfffff
 8012b78:	3ff00000 	.word	0x3ff00000
 8012b7c:	3fe00000 	.word	0x3fe00000
 8012b80:	7ff00000 	.word	0x7ff00000
 8012b84:	7fe00000 	.word	0x7fe00000
 8012b88:	7c9fffff 	.word	0x7c9fffff
 8012b8c:	7fefffff 	.word	0x7fefffff

08012b90 <_strtod_r>:
 8012b90:	4b01      	ldr	r3, [pc, #4]	; (8012b98 <_strtod_r+0x8>)
 8012b92:	f7ff ba0d 	b.w	8011fb0 <_strtod_l>
 8012b96:	bf00      	nop
 8012b98:	20000094 	.word	0x20000094

08012b9c <_strtol_l.constprop.0>:
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ba2:	d001      	beq.n	8012ba8 <_strtol_l.constprop.0+0xc>
 8012ba4:	2b24      	cmp	r3, #36	; 0x24
 8012ba6:	d906      	bls.n	8012bb6 <_strtol_l.constprop.0+0x1a>
 8012ba8:	f7fd fd72 	bl	8010690 <__errno>
 8012bac:	2316      	movs	r3, #22
 8012bae:	6003      	str	r3, [r0, #0]
 8012bb0:	2000      	movs	r0, #0
 8012bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012c9c <_strtol_l.constprop.0+0x100>
 8012bba:	460d      	mov	r5, r1
 8012bbc:	462e      	mov	r6, r5
 8012bbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bc2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012bc6:	f017 0708 	ands.w	r7, r7, #8
 8012bca:	d1f7      	bne.n	8012bbc <_strtol_l.constprop.0+0x20>
 8012bcc:	2c2d      	cmp	r4, #45	; 0x2d
 8012bce:	d132      	bne.n	8012c36 <_strtol_l.constprop.0+0x9a>
 8012bd0:	782c      	ldrb	r4, [r5, #0]
 8012bd2:	2701      	movs	r7, #1
 8012bd4:	1cb5      	adds	r5, r6, #2
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d05b      	beq.n	8012c92 <_strtol_l.constprop.0+0xf6>
 8012bda:	2b10      	cmp	r3, #16
 8012bdc:	d109      	bne.n	8012bf2 <_strtol_l.constprop.0+0x56>
 8012bde:	2c30      	cmp	r4, #48	; 0x30
 8012be0:	d107      	bne.n	8012bf2 <_strtol_l.constprop.0+0x56>
 8012be2:	782c      	ldrb	r4, [r5, #0]
 8012be4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012be8:	2c58      	cmp	r4, #88	; 0x58
 8012bea:	d14d      	bne.n	8012c88 <_strtol_l.constprop.0+0xec>
 8012bec:	786c      	ldrb	r4, [r5, #1]
 8012bee:	2310      	movs	r3, #16
 8012bf0:	3502      	adds	r5, #2
 8012bf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012bf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8012bfa:	f04f 0e00 	mov.w	lr, #0
 8012bfe:	fbb8 f9f3 	udiv	r9, r8, r3
 8012c02:	4676      	mov	r6, lr
 8012c04:	fb03 8a19 	mls	sl, r3, r9, r8
 8012c08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012c0c:	f1bc 0f09 	cmp.w	ip, #9
 8012c10:	d816      	bhi.n	8012c40 <_strtol_l.constprop.0+0xa4>
 8012c12:	4664      	mov	r4, ip
 8012c14:	42a3      	cmp	r3, r4
 8012c16:	dd24      	ble.n	8012c62 <_strtol_l.constprop.0+0xc6>
 8012c18:	f1be 3fff 	cmp.w	lr, #4294967295
 8012c1c:	d008      	beq.n	8012c30 <_strtol_l.constprop.0+0x94>
 8012c1e:	45b1      	cmp	r9, r6
 8012c20:	d31c      	bcc.n	8012c5c <_strtol_l.constprop.0+0xc0>
 8012c22:	d101      	bne.n	8012c28 <_strtol_l.constprop.0+0x8c>
 8012c24:	45a2      	cmp	sl, r4
 8012c26:	db19      	blt.n	8012c5c <_strtol_l.constprop.0+0xc0>
 8012c28:	fb06 4603 	mla	r6, r6, r3, r4
 8012c2c:	f04f 0e01 	mov.w	lr, #1
 8012c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c34:	e7e8      	b.n	8012c08 <_strtol_l.constprop.0+0x6c>
 8012c36:	2c2b      	cmp	r4, #43	; 0x2b
 8012c38:	bf04      	itt	eq
 8012c3a:	782c      	ldrbeq	r4, [r5, #0]
 8012c3c:	1cb5      	addeq	r5, r6, #2
 8012c3e:	e7ca      	b.n	8012bd6 <_strtol_l.constprop.0+0x3a>
 8012c40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012c44:	f1bc 0f19 	cmp.w	ip, #25
 8012c48:	d801      	bhi.n	8012c4e <_strtol_l.constprop.0+0xb2>
 8012c4a:	3c37      	subs	r4, #55	; 0x37
 8012c4c:	e7e2      	b.n	8012c14 <_strtol_l.constprop.0+0x78>
 8012c4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012c52:	f1bc 0f19 	cmp.w	ip, #25
 8012c56:	d804      	bhi.n	8012c62 <_strtol_l.constprop.0+0xc6>
 8012c58:	3c57      	subs	r4, #87	; 0x57
 8012c5a:	e7db      	b.n	8012c14 <_strtol_l.constprop.0+0x78>
 8012c5c:	f04f 3eff 	mov.w	lr, #4294967295
 8012c60:	e7e6      	b.n	8012c30 <_strtol_l.constprop.0+0x94>
 8012c62:	f1be 3fff 	cmp.w	lr, #4294967295
 8012c66:	d105      	bne.n	8012c74 <_strtol_l.constprop.0+0xd8>
 8012c68:	2322      	movs	r3, #34	; 0x22
 8012c6a:	6003      	str	r3, [r0, #0]
 8012c6c:	4646      	mov	r6, r8
 8012c6e:	b942      	cbnz	r2, 8012c82 <_strtol_l.constprop.0+0xe6>
 8012c70:	4630      	mov	r0, r6
 8012c72:	e79e      	b.n	8012bb2 <_strtol_l.constprop.0+0x16>
 8012c74:	b107      	cbz	r7, 8012c78 <_strtol_l.constprop.0+0xdc>
 8012c76:	4276      	negs	r6, r6
 8012c78:	2a00      	cmp	r2, #0
 8012c7a:	d0f9      	beq.n	8012c70 <_strtol_l.constprop.0+0xd4>
 8012c7c:	f1be 0f00 	cmp.w	lr, #0
 8012c80:	d000      	beq.n	8012c84 <_strtol_l.constprop.0+0xe8>
 8012c82:	1e69      	subs	r1, r5, #1
 8012c84:	6011      	str	r1, [r2, #0]
 8012c86:	e7f3      	b.n	8012c70 <_strtol_l.constprop.0+0xd4>
 8012c88:	2430      	movs	r4, #48	; 0x30
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1b1      	bne.n	8012bf2 <_strtol_l.constprop.0+0x56>
 8012c8e:	2308      	movs	r3, #8
 8012c90:	e7af      	b.n	8012bf2 <_strtol_l.constprop.0+0x56>
 8012c92:	2c30      	cmp	r4, #48	; 0x30
 8012c94:	d0a5      	beq.n	8012be2 <_strtol_l.constprop.0+0x46>
 8012c96:	230a      	movs	r3, #10
 8012c98:	e7ab      	b.n	8012bf2 <_strtol_l.constprop.0+0x56>
 8012c9a:	bf00      	nop
 8012c9c:	080155c1 	.word	0x080155c1

08012ca0 <_strtol_r>:
 8012ca0:	f7ff bf7c 	b.w	8012b9c <_strtol_l.constprop.0>

08012ca4 <__ssputs_r>:
 8012ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ca8:	688e      	ldr	r6, [r1, #8]
 8012caa:	461f      	mov	r7, r3
 8012cac:	42be      	cmp	r6, r7
 8012cae:	680b      	ldr	r3, [r1, #0]
 8012cb0:	4682      	mov	sl, r0
 8012cb2:	460c      	mov	r4, r1
 8012cb4:	4690      	mov	r8, r2
 8012cb6:	d82c      	bhi.n	8012d12 <__ssputs_r+0x6e>
 8012cb8:	898a      	ldrh	r2, [r1, #12]
 8012cba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cbe:	d026      	beq.n	8012d0e <__ssputs_r+0x6a>
 8012cc0:	6965      	ldr	r5, [r4, #20]
 8012cc2:	6909      	ldr	r1, [r1, #16]
 8012cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012cc8:	eba3 0901 	sub.w	r9, r3, r1
 8012ccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012cd0:	1c7b      	adds	r3, r7, #1
 8012cd2:	444b      	add	r3, r9
 8012cd4:	106d      	asrs	r5, r5, #1
 8012cd6:	429d      	cmp	r5, r3
 8012cd8:	bf38      	it	cc
 8012cda:	461d      	movcc	r5, r3
 8012cdc:	0553      	lsls	r3, r2, #21
 8012cde:	d527      	bpl.n	8012d30 <__ssputs_r+0x8c>
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	f7fe fc0f 	bl	8011504 <_malloc_r>
 8012ce6:	4606      	mov	r6, r0
 8012ce8:	b360      	cbz	r0, 8012d44 <__ssputs_r+0xa0>
 8012cea:	6921      	ldr	r1, [r4, #16]
 8012cec:	464a      	mov	r2, r9
 8012cee:	f7fd fcfc 	bl	80106ea <memcpy>
 8012cf2:	89a3      	ldrh	r3, [r4, #12]
 8012cf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cfc:	81a3      	strh	r3, [r4, #12]
 8012cfe:	6126      	str	r6, [r4, #16]
 8012d00:	6165      	str	r5, [r4, #20]
 8012d02:	444e      	add	r6, r9
 8012d04:	eba5 0509 	sub.w	r5, r5, r9
 8012d08:	6026      	str	r6, [r4, #0]
 8012d0a:	60a5      	str	r5, [r4, #8]
 8012d0c:	463e      	mov	r6, r7
 8012d0e:	42be      	cmp	r6, r7
 8012d10:	d900      	bls.n	8012d14 <__ssputs_r+0x70>
 8012d12:	463e      	mov	r6, r7
 8012d14:	6820      	ldr	r0, [r4, #0]
 8012d16:	4632      	mov	r2, r6
 8012d18:	4641      	mov	r1, r8
 8012d1a:	f7fd fbb5 	bl	8010488 <memmove>
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	1b9b      	subs	r3, r3, r6
 8012d22:	60a3      	str	r3, [r4, #8]
 8012d24:	6823      	ldr	r3, [r4, #0]
 8012d26:	4433      	add	r3, r6
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d30:	462a      	mov	r2, r5
 8012d32:	f000 ff60 	bl	8013bf6 <_realloc_r>
 8012d36:	4606      	mov	r6, r0
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	d1e0      	bne.n	8012cfe <__ssputs_r+0x5a>
 8012d3c:	6921      	ldr	r1, [r4, #16]
 8012d3e:	4650      	mov	r0, sl
 8012d40:	f7fe fb6c 	bl	801141c <_free_r>
 8012d44:	230c      	movs	r3, #12
 8012d46:	f8ca 3000 	str.w	r3, [sl]
 8012d4a:	89a3      	ldrh	r3, [r4, #12]
 8012d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d50:	81a3      	strh	r3, [r4, #12]
 8012d52:	f04f 30ff 	mov.w	r0, #4294967295
 8012d56:	e7e9      	b.n	8012d2c <__ssputs_r+0x88>

08012d58 <_svfiprintf_r>:
 8012d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5c:	4698      	mov	r8, r3
 8012d5e:	898b      	ldrh	r3, [r1, #12]
 8012d60:	061b      	lsls	r3, r3, #24
 8012d62:	b09d      	sub	sp, #116	; 0x74
 8012d64:	4607      	mov	r7, r0
 8012d66:	460d      	mov	r5, r1
 8012d68:	4614      	mov	r4, r2
 8012d6a:	d50e      	bpl.n	8012d8a <_svfiprintf_r+0x32>
 8012d6c:	690b      	ldr	r3, [r1, #16]
 8012d6e:	b963      	cbnz	r3, 8012d8a <_svfiprintf_r+0x32>
 8012d70:	2140      	movs	r1, #64	; 0x40
 8012d72:	f7fe fbc7 	bl	8011504 <_malloc_r>
 8012d76:	6028      	str	r0, [r5, #0]
 8012d78:	6128      	str	r0, [r5, #16]
 8012d7a:	b920      	cbnz	r0, 8012d86 <_svfiprintf_r+0x2e>
 8012d7c:	230c      	movs	r3, #12
 8012d7e:	603b      	str	r3, [r7, #0]
 8012d80:	f04f 30ff 	mov.w	r0, #4294967295
 8012d84:	e0d0      	b.n	8012f28 <_svfiprintf_r+0x1d0>
 8012d86:	2340      	movs	r3, #64	; 0x40
 8012d88:	616b      	str	r3, [r5, #20]
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d8e:	2320      	movs	r3, #32
 8012d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d98:	2330      	movs	r3, #48	; 0x30
 8012d9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012f40 <_svfiprintf_r+0x1e8>
 8012d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012da2:	f04f 0901 	mov.w	r9, #1
 8012da6:	4623      	mov	r3, r4
 8012da8:	469a      	mov	sl, r3
 8012daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dae:	b10a      	cbz	r2, 8012db4 <_svfiprintf_r+0x5c>
 8012db0:	2a25      	cmp	r2, #37	; 0x25
 8012db2:	d1f9      	bne.n	8012da8 <_svfiprintf_r+0x50>
 8012db4:	ebba 0b04 	subs.w	fp, sl, r4
 8012db8:	d00b      	beq.n	8012dd2 <_svfiprintf_r+0x7a>
 8012dba:	465b      	mov	r3, fp
 8012dbc:	4622      	mov	r2, r4
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	f7ff ff6f 	bl	8012ca4 <__ssputs_r>
 8012dc6:	3001      	adds	r0, #1
 8012dc8:	f000 80a9 	beq.w	8012f1e <_svfiprintf_r+0x1c6>
 8012dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dce:	445a      	add	r2, fp
 8012dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8012dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f000 80a1 	beq.w	8012f1e <_svfiprintf_r+0x1c6>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f04f 32ff 	mov.w	r2, #4294967295
 8012de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012de6:	f10a 0a01 	add.w	sl, sl, #1
 8012dea:	9304      	str	r3, [sp, #16]
 8012dec:	9307      	str	r3, [sp, #28]
 8012dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012df2:	931a      	str	r3, [sp, #104]	; 0x68
 8012df4:	4654      	mov	r4, sl
 8012df6:	2205      	movs	r2, #5
 8012df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dfc:	4850      	ldr	r0, [pc, #320]	; (8012f40 <_svfiprintf_r+0x1e8>)
 8012dfe:	f7ed f9e7 	bl	80001d0 <memchr>
 8012e02:	9a04      	ldr	r2, [sp, #16]
 8012e04:	b9d8      	cbnz	r0, 8012e3e <_svfiprintf_r+0xe6>
 8012e06:	06d0      	lsls	r0, r2, #27
 8012e08:	bf44      	itt	mi
 8012e0a:	2320      	movmi	r3, #32
 8012e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e10:	0711      	lsls	r1, r2, #28
 8012e12:	bf44      	itt	mi
 8012e14:	232b      	movmi	r3, #43	; 0x2b
 8012e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e20:	d015      	beq.n	8012e4e <_svfiprintf_r+0xf6>
 8012e22:	9a07      	ldr	r2, [sp, #28]
 8012e24:	4654      	mov	r4, sl
 8012e26:	2000      	movs	r0, #0
 8012e28:	f04f 0c0a 	mov.w	ip, #10
 8012e2c:	4621      	mov	r1, r4
 8012e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e32:	3b30      	subs	r3, #48	; 0x30
 8012e34:	2b09      	cmp	r3, #9
 8012e36:	d94d      	bls.n	8012ed4 <_svfiprintf_r+0x17c>
 8012e38:	b1b0      	cbz	r0, 8012e68 <_svfiprintf_r+0x110>
 8012e3a:	9207      	str	r2, [sp, #28]
 8012e3c:	e014      	b.n	8012e68 <_svfiprintf_r+0x110>
 8012e3e:	eba0 0308 	sub.w	r3, r0, r8
 8012e42:	fa09 f303 	lsl.w	r3, r9, r3
 8012e46:	4313      	orrs	r3, r2
 8012e48:	9304      	str	r3, [sp, #16]
 8012e4a:	46a2      	mov	sl, r4
 8012e4c:	e7d2      	b.n	8012df4 <_svfiprintf_r+0x9c>
 8012e4e:	9b03      	ldr	r3, [sp, #12]
 8012e50:	1d19      	adds	r1, r3, #4
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	9103      	str	r1, [sp, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	bfbb      	ittet	lt
 8012e5a:	425b      	neglt	r3, r3
 8012e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8012e60:	9307      	strge	r3, [sp, #28]
 8012e62:	9307      	strlt	r3, [sp, #28]
 8012e64:	bfb8      	it	lt
 8012e66:	9204      	strlt	r2, [sp, #16]
 8012e68:	7823      	ldrb	r3, [r4, #0]
 8012e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8012e6c:	d10c      	bne.n	8012e88 <_svfiprintf_r+0x130>
 8012e6e:	7863      	ldrb	r3, [r4, #1]
 8012e70:	2b2a      	cmp	r3, #42	; 0x2a
 8012e72:	d134      	bne.n	8012ede <_svfiprintf_r+0x186>
 8012e74:	9b03      	ldr	r3, [sp, #12]
 8012e76:	1d1a      	adds	r2, r3, #4
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	9203      	str	r2, [sp, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	bfb8      	it	lt
 8012e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e84:	3402      	adds	r4, #2
 8012e86:	9305      	str	r3, [sp, #20]
 8012e88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012f50 <_svfiprintf_r+0x1f8>
 8012e8c:	7821      	ldrb	r1, [r4, #0]
 8012e8e:	2203      	movs	r2, #3
 8012e90:	4650      	mov	r0, sl
 8012e92:	f7ed f99d 	bl	80001d0 <memchr>
 8012e96:	b138      	cbz	r0, 8012ea8 <_svfiprintf_r+0x150>
 8012e98:	9b04      	ldr	r3, [sp, #16]
 8012e9a:	eba0 000a 	sub.w	r0, r0, sl
 8012e9e:	2240      	movs	r2, #64	; 0x40
 8012ea0:	4082      	lsls	r2, r0
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	3401      	adds	r4, #1
 8012ea6:	9304      	str	r3, [sp, #16]
 8012ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eac:	4825      	ldr	r0, [pc, #148]	; (8012f44 <_svfiprintf_r+0x1ec>)
 8012eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012eb2:	2206      	movs	r2, #6
 8012eb4:	f7ed f98c 	bl	80001d0 <memchr>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d038      	beq.n	8012f2e <_svfiprintf_r+0x1d6>
 8012ebc:	4b22      	ldr	r3, [pc, #136]	; (8012f48 <_svfiprintf_r+0x1f0>)
 8012ebe:	bb1b      	cbnz	r3, 8012f08 <_svfiprintf_r+0x1b0>
 8012ec0:	9b03      	ldr	r3, [sp, #12]
 8012ec2:	3307      	adds	r3, #7
 8012ec4:	f023 0307 	bic.w	r3, r3, #7
 8012ec8:	3308      	adds	r3, #8
 8012eca:	9303      	str	r3, [sp, #12]
 8012ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ece:	4433      	add	r3, r6
 8012ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed2:	e768      	b.n	8012da6 <_svfiprintf_r+0x4e>
 8012ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ed8:	460c      	mov	r4, r1
 8012eda:	2001      	movs	r0, #1
 8012edc:	e7a6      	b.n	8012e2c <_svfiprintf_r+0xd4>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	3401      	adds	r4, #1
 8012ee2:	9305      	str	r3, [sp, #20]
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	f04f 0c0a 	mov.w	ip, #10
 8012eea:	4620      	mov	r0, r4
 8012eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ef0:	3a30      	subs	r2, #48	; 0x30
 8012ef2:	2a09      	cmp	r2, #9
 8012ef4:	d903      	bls.n	8012efe <_svfiprintf_r+0x1a6>
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d0c6      	beq.n	8012e88 <_svfiprintf_r+0x130>
 8012efa:	9105      	str	r1, [sp, #20]
 8012efc:	e7c4      	b.n	8012e88 <_svfiprintf_r+0x130>
 8012efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f02:	4604      	mov	r4, r0
 8012f04:	2301      	movs	r3, #1
 8012f06:	e7f0      	b.n	8012eea <_svfiprintf_r+0x192>
 8012f08:	ab03      	add	r3, sp, #12
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	462a      	mov	r2, r5
 8012f0e:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <_svfiprintf_r+0x1f4>)
 8012f10:	a904      	add	r1, sp, #16
 8012f12:	4638      	mov	r0, r7
 8012f14:	f7fc fa98 	bl	800f448 <_printf_float>
 8012f18:	1c42      	adds	r2, r0, #1
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	d1d6      	bne.n	8012ecc <_svfiprintf_r+0x174>
 8012f1e:	89ab      	ldrh	r3, [r5, #12]
 8012f20:	065b      	lsls	r3, r3, #25
 8012f22:	f53f af2d 	bmi.w	8012d80 <_svfiprintf_r+0x28>
 8012f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f28:	b01d      	add	sp, #116	; 0x74
 8012f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2e:	ab03      	add	r3, sp, #12
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	462a      	mov	r2, r5
 8012f34:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <_svfiprintf_r+0x1f4>)
 8012f36:	a904      	add	r1, sp, #16
 8012f38:	4638      	mov	r0, r7
 8012f3a:	f7fc fd29 	bl	800f990 <_printf_i>
 8012f3e:	e7eb      	b.n	8012f18 <_svfiprintf_r+0x1c0>
 8012f40:	080156c1 	.word	0x080156c1
 8012f44:	080156cb 	.word	0x080156cb
 8012f48:	0800f449 	.word	0x0800f449
 8012f4c:	08012ca5 	.word	0x08012ca5
 8012f50:	080156c7 	.word	0x080156c7

08012f54 <__sfputc_r>:
 8012f54:	6893      	ldr	r3, [r2, #8]
 8012f56:	3b01      	subs	r3, #1
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	b410      	push	{r4}
 8012f5c:	6093      	str	r3, [r2, #8]
 8012f5e:	da08      	bge.n	8012f72 <__sfputc_r+0x1e>
 8012f60:	6994      	ldr	r4, [r2, #24]
 8012f62:	42a3      	cmp	r3, r4
 8012f64:	db01      	blt.n	8012f6a <__sfputc_r+0x16>
 8012f66:	290a      	cmp	r1, #10
 8012f68:	d103      	bne.n	8012f72 <__sfputc_r+0x1e>
 8012f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f6e:	f7fd b9e6 	b.w	801033e <__swbuf_r>
 8012f72:	6813      	ldr	r3, [r2, #0]
 8012f74:	1c58      	adds	r0, r3, #1
 8012f76:	6010      	str	r0, [r2, #0]
 8012f78:	7019      	strb	r1, [r3, #0]
 8012f7a:	4608      	mov	r0, r1
 8012f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <__sfputs_r>:
 8012f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f84:	4606      	mov	r6, r0
 8012f86:	460f      	mov	r7, r1
 8012f88:	4614      	mov	r4, r2
 8012f8a:	18d5      	adds	r5, r2, r3
 8012f8c:	42ac      	cmp	r4, r5
 8012f8e:	d101      	bne.n	8012f94 <__sfputs_r+0x12>
 8012f90:	2000      	movs	r0, #0
 8012f92:	e007      	b.n	8012fa4 <__sfputs_r+0x22>
 8012f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f98:	463a      	mov	r2, r7
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	f7ff ffda 	bl	8012f54 <__sfputc_r>
 8012fa0:	1c43      	adds	r3, r0, #1
 8012fa2:	d1f3      	bne.n	8012f8c <__sfputs_r+0xa>
 8012fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012fa8 <_vfiprintf_r>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	460d      	mov	r5, r1
 8012fae:	b09d      	sub	sp, #116	; 0x74
 8012fb0:	4614      	mov	r4, r2
 8012fb2:	4698      	mov	r8, r3
 8012fb4:	4606      	mov	r6, r0
 8012fb6:	b118      	cbz	r0, 8012fc0 <_vfiprintf_r+0x18>
 8012fb8:	6a03      	ldr	r3, [r0, #32]
 8012fba:	b90b      	cbnz	r3, 8012fc0 <_vfiprintf_r+0x18>
 8012fbc:	f7fd f8a6 	bl	801010c <__sinit>
 8012fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fc2:	07d9      	lsls	r1, r3, #31
 8012fc4:	d405      	bmi.n	8012fd2 <_vfiprintf_r+0x2a>
 8012fc6:	89ab      	ldrh	r3, [r5, #12]
 8012fc8:	059a      	lsls	r2, r3, #22
 8012fca:	d402      	bmi.n	8012fd2 <_vfiprintf_r+0x2a>
 8012fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fce:	f7fd fb8a 	bl	80106e6 <__retarget_lock_acquire_recursive>
 8012fd2:	89ab      	ldrh	r3, [r5, #12]
 8012fd4:	071b      	lsls	r3, r3, #28
 8012fd6:	d501      	bpl.n	8012fdc <_vfiprintf_r+0x34>
 8012fd8:	692b      	ldr	r3, [r5, #16]
 8012fda:	b99b      	cbnz	r3, 8013004 <_vfiprintf_r+0x5c>
 8012fdc:	4629      	mov	r1, r5
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f7fd f9ea 	bl	80103b8 <__swsetup_r>
 8012fe4:	b170      	cbz	r0, 8013004 <_vfiprintf_r+0x5c>
 8012fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fe8:	07dc      	lsls	r4, r3, #31
 8012fea:	d504      	bpl.n	8012ff6 <_vfiprintf_r+0x4e>
 8012fec:	f04f 30ff 	mov.w	r0, #4294967295
 8012ff0:	b01d      	add	sp, #116	; 0x74
 8012ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff6:	89ab      	ldrh	r3, [r5, #12]
 8012ff8:	0598      	lsls	r0, r3, #22
 8012ffa:	d4f7      	bmi.n	8012fec <_vfiprintf_r+0x44>
 8012ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ffe:	f7fd fb73 	bl	80106e8 <__retarget_lock_release_recursive>
 8013002:	e7f3      	b.n	8012fec <_vfiprintf_r+0x44>
 8013004:	2300      	movs	r3, #0
 8013006:	9309      	str	r3, [sp, #36]	; 0x24
 8013008:	2320      	movs	r3, #32
 801300a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801300e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013012:	2330      	movs	r3, #48	; 0x30
 8013014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80131c8 <_vfiprintf_r+0x220>
 8013018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801301c:	f04f 0901 	mov.w	r9, #1
 8013020:	4623      	mov	r3, r4
 8013022:	469a      	mov	sl, r3
 8013024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013028:	b10a      	cbz	r2, 801302e <_vfiprintf_r+0x86>
 801302a:	2a25      	cmp	r2, #37	; 0x25
 801302c:	d1f9      	bne.n	8013022 <_vfiprintf_r+0x7a>
 801302e:	ebba 0b04 	subs.w	fp, sl, r4
 8013032:	d00b      	beq.n	801304c <_vfiprintf_r+0xa4>
 8013034:	465b      	mov	r3, fp
 8013036:	4622      	mov	r2, r4
 8013038:	4629      	mov	r1, r5
 801303a:	4630      	mov	r0, r6
 801303c:	f7ff ffa1 	bl	8012f82 <__sfputs_r>
 8013040:	3001      	adds	r0, #1
 8013042:	f000 80a9 	beq.w	8013198 <_vfiprintf_r+0x1f0>
 8013046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013048:	445a      	add	r2, fp
 801304a:	9209      	str	r2, [sp, #36]	; 0x24
 801304c:	f89a 3000 	ldrb.w	r3, [sl]
 8013050:	2b00      	cmp	r3, #0
 8013052:	f000 80a1 	beq.w	8013198 <_vfiprintf_r+0x1f0>
 8013056:	2300      	movs	r3, #0
 8013058:	f04f 32ff 	mov.w	r2, #4294967295
 801305c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013060:	f10a 0a01 	add.w	sl, sl, #1
 8013064:	9304      	str	r3, [sp, #16]
 8013066:	9307      	str	r3, [sp, #28]
 8013068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801306c:	931a      	str	r3, [sp, #104]	; 0x68
 801306e:	4654      	mov	r4, sl
 8013070:	2205      	movs	r2, #5
 8013072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013076:	4854      	ldr	r0, [pc, #336]	; (80131c8 <_vfiprintf_r+0x220>)
 8013078:	f7ed f8aa 	bl	80001d0 <memchr>
 801307c:	9a04      	ldr	r2, [sp, #16]
 801307e:	b9d8      	cbnz	r0, 80130b8 <_vfiprintf_r+0x110>
 8013080:	06d1      	lsls	r1, r2, #27
 8013082:	bf44      	itt	mi
 8013084:	2320      	movmi	r3, #32
 8013086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801308a:	0713      	lsls	r3, r2, #28
 801308c:	bf44      	itt	mi
 801308e:	232b      	movmi	r3, #43	; 0x2b
 8013090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013094:	f89a 3000 	ldrb.w	r3, [sl]
 8013098:	2b2a      	cmp	r3, #42	; 0x2a
 801309a:	d015      	beq.n	80130c8 <_vfiprintf_r+0x120>
 801309c:	9a07      	ldr	r2, [sp, #28]
 801309e:	4654      	mov	r4, sl
 80130a0:	2000      	movs	r0, #0
 80130a2:	f04f 0c0a 	mov.w	ip, #10
 80130a6:	4621      	mov	r1, r4
 80130a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130ac:	3b30      	subs	r3, #48	; 0x30
 80130ae:	2b09      	cmp	r3, #9
 80130b0:	d94d      	bls.n	801314e <_vfiprintf_r+0x1a6>
 80130b2:	b1b0      	cbz	r0, 80130e2 <_vfiprintf_r+0x13a>
 80130b4:	9207      	str	r2, [sp, #28]
 80130b6:	e014      	b.n	80130e2 <_vfiprintf_r+0x13a>
 80130b8:	eba0 0308 	sub.w	r3, r0, r8
 80130bc:	fa09 f303 	lsl.w	r3, r9, r3
 80130c0:	4313      	orrs	r3, r2
 80130c2:	9304      	str	r3, [sp, #16]
 80130c4:	46a2      	mov	sl, r4
 80130c6:	e7d2      	b.n	801306e <_vfiprintf_r+0xc6>
 80130c8:	9b03      	ldr	r3, [sp, #12]
 80130ca:	1d19      	adds	r1, r3, #4
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	9103      	str	r1, [sp, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	bfbb      	ittet	lt
 80130d4:	425b      	neglt	r3, r3
 80130d6:	f042 0202 	orrlt.w	r2, r2, #2
 80130da:	9307      	strge	r3, [sp, #28]
 80130dc:	9307      	strlt	r3, [sp, #28]
 80130de:	bfb8      	it	lt
 80130e0:	9204      	strlt	r2, [sp, #16]
 80130e2:	7823      	ldrb	r3, [r4, #0]
 80130e4:	2b2e      	cmp	r3, #46	; 0x2e
 80130e6:	d10c      	bne.n	8013102 <_vfiprintf_r+0x15a>
 80130e8:	7863      	ldrb	r3, [r4, #1]
 80130ea:	2b2a      	cmp	r3, #42	; 0x2a
 80130ec:	d134      	bne.n	8013158 <_vfiprintf_r+0x1b0>
 80130ee:	9b03      	ldr	r3, [sp, #12]
 80130f0:	1d1a      	adds	r2, r3, #4
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	9203      	str	r2, [sp, #12]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	bfb8      	it	lt
 80130fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80130fe:	3402      	adds	r4, #2
 8013100:	9305      	str	r3, [sp, #20]
 8013102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80131d8 <_vfiprintf_r+0x230>
 8013106:	7821      	ldrb	r1, [r4, #0]
 8013108:	2203      	movs	r2, #3
 801310a:	4650      	mov	r0, sl
 801310c:	f7ed f860 	bl	80001d0 <memchr>
 8013110:	b138      	cbz	r0, 8013122 <_vfiprintf_r+0x17a>
 8013112:	9b04      	ldr	r3, [sp, #16]
 8013114:	eba0 000a 	sub.w	r0, r0, sl
 8013118:	2240      	movs	r2, #64	; 0x40
 801311a:	4082      	lsls	r2, r0
 801311c:	4313      	orrs	r3, r2
 801311e:	3401      	adds	r4, #1
 8013120:	9304      	str	r3, [sp, #16]
 8013122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013126:	4829      	ldr	r0, [pc, #164]	; (80131cc <_vfiprintf_r+0x224>)
 8013128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801312c:	2206      	movs	r2, #6
 801312e:	f7ed f84f 	bl	80001d0 <memchr>
 8013132:	2800      	cmp	r0, #0
 8013134:	d03f      	beq.n	80131b6 <_vfiprintf_r+0x20e>
 8013136:	4b26      	ldr	r3, [pc, #152]	; (80131d0 <_vfiprintf_r+0x228>)
 8013138:	bb1b      	cbnz	r3, 8013182 <_vfiprintf_r+0x1da>
 801313a:	9b03      	ldr	r3, [sp, #12]
 801313c:	3307      	adds	r3, #7
 801313e:	f023 0307 	bic.w	r3, r3, #7
 8013142:	3308      	adds	r3, #8
 8013144:	9303      	str	r3, [sp, #12]
 8013146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013148:	443b      	add	r3, r7
 801314a:	9309      	str	r3, [sp, #36]	; 0x24
 801314c:	e768      	b.n	8013020 <_vfiprintf_r+0x78>
 801314e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013152:	460c      	mov	r4, r1
 8013154:	2001      	movs	r0, #1
 8013156:	e7a6      	b.n	80130a6 <_vfiprintf_r+0xfe>
 8013158:	2300      	movs	r3, #0
 801315a:	3401      	adds	r4, #1
 801315c:	9305      	str	r3, [sp, #20]
 801315e:	4619      	mov	r1, r3
 8013160:	f04f 0c0a 	mov.w	ip, #10
 8013164:	4620      	mov	r0, r4
 8013166:	f810 2b01 	ldrb.w	r2, [r0], #1
 801316a:	3a30      	subs	r2, #48	; 0x30
 801316c:	2a09      	cmp	r2, #9
 801316e:	d903      	bls.n	8013178 <_vfiprintf_r+0x1d0>
 8013170:	2b00      	cmp	r3, #0
 8013172:	d0c6      	beq.n	8013102 <_vfiprintf_r+0x15a>
 8013174:	9105      	str	r1, [sp, #20]
 8013176:	e7c4      	b.n	8013102 <_vfiprintf_r+0x15a>
 8013178:	fb0c 2101 	mla	r1, ip, r1, r2
 801317c:	4604      	mov	r4, r0
 801317e:	2301      	movs	r3, #1
 8013180:	e7f0      	b.n	8013164 <_vfiprintf_r+0x1bc>
 8013182:	ab03      	add	r3, sp, #12
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	462a      	mov	r2, r5
 8013188:	4b12      	ldr	r3, [pc, #72]	; (80131d4 <_vfiprintf_r+0x22c>)
 801318a:	a904      	add	r1, sp, #16
 801318c:	4630      	mov	r0, r6
 801318e:	f7fc f95b 	bl	800f448 <_printf_float>
 8013192:	4607      	mov	r7, r0
 8013194:	1c78      	adds	r0, r7, #1
 8013196:	d1d6      	bne.n	8013146 <_vfiprintf_r+0x19e>
 8013198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801319a:	07d9      	lsls	r1, r3, #31
 801319c:	d405      	bmi.n	80131aa <_vfiprintf_r+0x202>
 801319e:	89ab      	ldrh	r3, [r5, #12]
 80131a0:	059a      	lsls	r2, r3, #22
 80131a2:	d402      	bmi.n	80131aa <_vfiprintf_r+0x202>
 80131a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131a6:	f7fd fa9f 	bl	80106e8 <__retarget_lock_release_recursive>
 80131aa:	89ab      	ldrh	r3, [r5, #12]
 80131ac:	065b      	lsls	r3, r3, #25
 80131ae:	f53f af1d 	bmi.w	8012fec <_vfiprintf_r+0x44>
 80131b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131b4:	e71c      	b.n	8012ff0 <_vfiprintf_r+0x48>
 80131b6:	ab03      	add	r3, sp, #12
 80131b8:	9300      	str	r3, [sp, #0]
 80131ba:	462a      	mov	r2, r5
 80131bc:	4b05      	ldr	r3, [pc, #20]	; (80131d4 <_vfiprintf_r+0x22c>)
 80131be:	a904      	add	r1, sp, #16
 80131c0:	4630      	mov	r0, r6
 80131c2:	f7fc fbe5 	bl	800f990 <_printf_i>
 80131c6:	e7e4      	b.n	8013192 <_vfiprintf_r+0x1ea>
 80131c8:	080156c1 	.word	0x080156c1
 80131cc:	080156cb 	.word	0x080156cb
 80131d0:	0800f449 	.word	0x0800f449
 80131d4:	08012f83 	.word	0x08012f83
 80131d8:	080156c7 	.word	0x080156c7

080131dc <__sflush_r>:
 80131dc:	898a      	ldrh	r2, [r1, #12]
 80131de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e2:	4605      	mov	r5, r0
 80131e4:	0710      	lsls	r0, r2, #28
 80131e6:	460c      	mov	r4, r1
 80131e8:	d458      	bmi.n	801329c <__sflush_r+0xc0>
 80131ea:	684b      	ldr	r3, [r1, #4]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	dc05      	bgt.n	80131fc <__sflush_r+0x20>
 80131f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	dc02      	bgt.n	80131fc <__sflush_r+0x20>
 80131f6:	2000      	movs	r0, #0
 80131f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131fe:	2e00      	cmp	r6, #0
 8013200:	d0f9      	beq.n	80131f6 <__sflush_r+0x1a>
 8013202:	2300      	movs	r3, #0
 8013204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013208:	682f      	ldr	r7, [r5, #0]
 801320a:	6a21      	ldr	r1, [r4, #32]
 801320c:	602b      	str	r3, [r5, #0]
 801320e:	d032      	beq.n	8013276 <__sflush_r+0x9a>
 8013210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013212:	89a3      	ldrh	r3, [r4, #12]
 8013214:	075a      	lsls	r2, r3, #29
 8013216:	d505      	bpl.n	8013224 <__sflush_r+0x48>
 8013218:	6863      	ldr	r3, [r4, #4]
 801321a:	1ac0      	subs	r0, r0, r3
 801321c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801321e:	b10b      	cbz	r3, 8013224 <__sflush_r+0x48>
 8013220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013222:	1ac0      	subs	r0, r0, r3
 8013224:	2300      	movs	r3, #0
 8013226:	4602      	mov	r2, r0
 8013228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801322a:	6a21      	ldr	r1, [r4, #32]
 801322c:	4628      	mov	r0, r5
 801322e:	47b0      	blx	r6
 8013230:	1c43      	adds	r3, r0, #1
 8013232:	89a3      	ldrh	r3, [r4, #12]
 8013234:	d106      	bne.n	8013244 <__sflush_r+0x68>
 8013236:	6829      	ldr	r1, [r5, #0]
 8013238:	291d      	cmp	r1, #29
 801323a:	d82b      	bhi.n	8013294 <__sflush_r+0xb8>
 801323c:	4a29      	ldr	r2, [pc, #164]	; (80132e4 <__sflush_r+0x108>)
 801323e:	410a      	asrs	r2, r1
 8013240:	07d6      	lsls	r6, r2, #31
 8013242:	d427      	bmi.n	8013294 <__sflush_r+0xb8>
 8013244:	2200      	movs	r2, #0
 8013246:	6062      	str	r2, [r4, #4]
 8013248:	04d9      	lsls	r1, r3, #19
 801324a:	6922      	ldr	r2, [r4, #16]
 801324c:	6022      	str	r2, [r4, #0]
 801324e:	d504      	bpl.n	801325a <__sflush_r+0x7e>
 8013250:	1c42      	adds	r2, r0, #1
 8013252:	d101      	bne.n	8013258 <__sflush_r+0x7c>
 8013254:	682b      	ldr	r3, [r5, #0]
 8013256:	b903      	cbnz	r3, 801325a <__sflush_r+0x7e>
 8013258:	6560      	str	r0, [r4, #84]	; 0x54
 801325a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801325c:	602f      	str	r7, [r5, #0]
 801325e:	2900      	cmp	r1, #0
 8013260:	d0c9      	beq.n	80131f6 <__sflush_r+0x1a>
 8013262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013266:	4299      	cmp	r1, r3
 8013268:	d002      	beq.n	8013270 <__sflush_r+0x94>
 801326a:	4628      	mov	r0, r5
 801326c:	f7fe f8d6 	bl	801141c <_free_r>
 8013270:	2000      	movs	r0, #0
 8013272:	6360      	str	r0, [r4, #52]	; 0x34
 8013274:	e7c0      	b.n	80131f8 <__sflush_r+0x1c>
 8013276:	2301      	movs	r3, #1
 8013278:	4628      	mov	r0, r5
 801327a:	47b0      	blx	r6
 801327c:	1c41      	adds	r1, r0, #1
 801327e:	d1c8      	bne.n	8013212 <__sflush_r+0x36>
 8013280:	682b      	ldr	r3, [r5, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d0c5      	beq.n	8013212 <__sflush_r+0x36>
 8013286:	2b1d      	cmp	r3, #29
 8013288:	d001      	beq.n	801328e <__sflush_r+0xb2>
 801328a:	2b16      	cmp	r3, #22
 801328c:	d101      	bne.n	8013292 <__sflush_r+0xb6>
 801328e:	602f      	str	r7, [r5, #0]
 8013290:	e7b1      	b.n	80131f6 <__sflush_r+0x1a>
 8013292:	89a3      	ldrh	r3, [r4, #12]
 8013294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013298:	81a3      	strh	r3, [r4, #12]
 801329a:	e7ad      	b.n	80131f8 <__sflush_r+0x1c>
 801329c:	690f      	ldr	r7, [r1, #16]
 801329e:	2f00      	cmp	r7, #0
 80132a0:	d0a9      	beq.n	80131f6 <__sflush_r+0x1a>
 80132a2:	0793      	lsls	r3, r2, #30
 80132a4:	680e      	ldr	r6, [r1, #0]
 80132a6:	bf08      	it	eq
 80132a8:	694b      	ldreq	r3, [r1, #20]
 80132aa:	600f      	str	r7, [r1, #0]
 80132ac:	bf18      	it	ne
 80132ae:	2300      	movne	r3, #0
 80132b0:	eba6 0807 	sub.w	r8, r6, r7
 80132b4:	608b      	str	r3, [r1, #8]
 80132b6:	f1b8 0f00 	cmp.w	r8, #0
 80132ba:	dd9c      	ble.n	80131f6 <__sflush_r+0x1a>
 80132bc:	6a21      	ldr	r1, [r4, #32]
 80132be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132c0:	4643      	mov	r3, r8
 80132c2:	463a      	mov	r2, r7
 80132c4:	4628      	mov	r0, r5
 80132c6:	47b0      	blx	r6
 80132c8:	2800      	cmp	r0, #0
 80132ca:	dc06      	bgt.n	80132da <__sflush_r+0xfe>
 80132cc:	89a3      	ldrh	r3, [r4, #12]
 80132ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132d2:	81a3      	strh	r3, [r4, #12]
 80132d4:	f04f 30ff 	mov.w	r0, #4294967295
 80132d8:	e78e      	b.n	80131f8 <__sflush_r+0x1c>
 80132da:	4407      	add	r7, r0
 80132dc:	eba8 0800 	sub.w	r8, r8, r0
 80132e0:	e7e9      	b.n	80132b6 <__sflush_r+0xda>
 80132e2:	bf00      	nop
 80132e4:	dfbffffe 	.word	0xdfbffffe

080132e8 <_fflush_r>:
 80132e8:	b538      	push	{r3, r4, r5, lr}
 80132ea:	690b      	ldr	r3, [r1, #16]
 80132ec:	4605      	mov	r5, r0
 80132ee:	460c      	mov	r4, r1
 80132f0:	b913      	cbnz	r3, 80132f8 <_fflush_r+0x10>
 80132f2:	2500      	movs	r5, #0
 80132f4:	4628      	mov	r0, r5
 80132f6:	bd38      	pop	{r3, r4, r5, pc}
 80132f8:	b118      	cbz	r0, 8013302 <_fflush_r+0x1a>
 80132fa:	6a03      	ldr	r3, [r0, #32]
 80132fc:	b90b      	cbnz	r3, 8013302 <_fflush_r+0x1a>
 80132fe:	f7fc ff05 	bl	801010c <__sinit>
 8013302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d0f3      	beq.n	80132f2 <_fflush_r+0xa>
 801330a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801330c:	07d0      	lsls	r0, r2, #31
 801330e:	d404      	bmi.n	801331a <_fflush_r+0x32>
 8013310:	0599      	lsls	r1, r3, #22
 8013312:	d402      	bmi.n	801331a <_fflush_r+0x32>
 8013314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013316:	f7fd f9e6 	bl	80106e6 <__retarget_lock_acquire_recursive>
 801331a:	4628      	mov	r0, r5
 801331c:	4621      	mov	r1, r4
 801331e:	f7ff ff5d 	bl	80131dc <__sflush_r>
 8013322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013324:	07da      	lsls	r2, r3, #31
 8013326:	4605      	mov	r5, r0
 8013328:	d4e4      	bmi.n	80132f4 <_fflush_r+0xc>
 801332a:	89a3      	ldrh	r3, [r4, #12]
 801332c:	059b      	lsls	r3, r3, #22
 801332e:	d4e1      	bmi.n	80132f4 <_fflush_r+0xc>
 8013330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013332:	f7fd f9d9 	bl	80106e8 <__retarget_lock_release_recursive>
 8013336:	e7dd      	b.n	80132f4 <_fflush_r+0xc>

08013338 <__swhatbuf_r>:
 8013338:	b570      	push	{r4, r5, r6, lr}
 801333a:	460c      	mov	r4, r1
 801333c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013340:	2900      	cmp	r1, #0
 8013342:	b096      	sub	sp, #88	; 0x58
 8013344:	4615      	mov	r5, r2
 8013346:	461e      	mov	r6, r3
 8013348:	da0d      	bge.n	8013366 <__swhatbuf_r+0x2e>
 801334a:	89a3      	ldrh	r3, [r4, #12]
 801334c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013350:	f04f 0100 	mov.w	r1, #0
 8013354:	bf0c      	ite	eq
 8013356:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801335a:	2340      	movne	r3, #64	; 0x40
 801335c:	2000      	movs	r0, #0
 801335e:	6031      	str	r1, [r6, #0]
 8013360:	602b      	str	r3, [r5, #0]
 8013362:	b016      	add	sp, #88	; 0x58
 8013364:	bd70      	pop	{r4, r5, r6, pc}
 8013366:	466a      	mov	r2, sp
 8013368:	f000 f878 	bl	801345c <_fstat_r>
 801336c:	2800      	cmp	r0, #0
 801336e:	dbec      	blt.n	801334a <__swhatbuf_r+0x12>
 8013370:	9901      	ldr	r1, [sp, #4]
 8013372:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013376:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801337a:	4259      	negs	r1, r3
 801337c:	4159      	adcs	r1, r3
 801337e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013382:	e7eb      	b.n	801335c <__swhatbuf_r+0x24>

08013384 <__smakebuf_r>:
 8013384:	898b      	ldrh	r3, [r1, #12]
 8013386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013388:	079d      	lsls	r5, r3, #30
 801338a:	4606      	mov	r6, r0
 801338c:	460c      	mov	r4, r1
 801338e:	d507      	bpl.n	80133a0 <__smakebuf_r+0x1c>
 8013390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013394:	6023      	str	r3, [r4, #0]
 8013396:	6123      	str	r3, [r4, #16]
 8013398:	2301      	movs	r3, #1
 801339a:	6163      	str	r3, [r4, #20]
 801339c:	b002      	add	sp, #8
 801339e:	bd70      	pop	{r4, r5, r6, pc}
 80133a0:	ab01      	add	r3, sp, #4
 80133a2:	466a      	mov	r2, sp
 80133a4:	f7ff ffc8 	bl	8013338 <__swhatbuf_r>
 80133a8:	9900      	ldr	r1, [sp, #0]
 80133aa:	4605      	mov	r5, r0
 80133ac:	4630      	mov	r0, r6
 80133ae:	f7fe f8a9 	bl	8011504 <_malloc_r>
 80133b2:	b948      	cbnz	r0, 80133c8 <__smakebuf_r+0x44>
 80133b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133b8:	059a      	lsls	r2, r3, #22
 80133ba:	d4ef      	bmi.n	801339c <__smakebuf_r+0x18>
 80133bc:	f023 0303 	bic.w	r3, r3, #3
 80133c0:	f043 0302 	orr.w	r3, r3, #2
 80133c4:	81a3      	strh	r3, [r4, #12]
 80133c6:	e7e3      	b.n	8013390 <__smakebuf_r+0xc>
 80133c8:	89a3      	ldrh	r3, [r4, #12]
 80133ca:	6020      	str	r0, [r4, #0]
 80133cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d0:	81a3      	strh	r3, [r4, #12]
 80133d2:	9b00      	ldr	r3, [sp, #0]
 80133d4:	6163      	str	r3, [r4, #20]
 80133d6:	9b01      	ldr	r3, [sp, #4]
 80133d8:	6120      	str	r0, [r4, #16]
 80133da:	b15b      	cbz	r3, 80133f4 <__smakebuf_r+0x70>
 80133dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133e0:	4630      	mov	r0, r6
 80133e2:	f000 f84d 	bl	8013480 <_isatty_r>
 80133e6:	b128      	cbz	r0, 80133f4 <__smakebuf_r+0x70>
 80133e8:	89a3      	ldrh	r3, [r4, #12]
 80133ea:	f023 0303 	bic.w	r3, r3, #3
 80133ee:	f043 0301 	orr.w	r3, r3, #1
 80133f2:	81a3      	strh	r3, [r4, #12]
 80133f4:	89a3      	ldrh	r3, [r4, #12]
 80133f6:	431d      	orrs	r5, r3
 80133f8:	81a5      	strh	r5, [r4, #12]
 80133fa:	e7cf      	b.n	801339c <__smakebuf_r+0x18>

080133fc <_raise_r>:
 80133fc:	291f      	cmp	r1, #31
 80133fe:	b538      	push	{r3, r4, r5, lr}
 8013400:	4604      	mov	r4, r0
 8013402:	460d      	mov	r5, r1
 8013404:	d904      	bls.n	8013410 <_raise_r+0x14>
 8013406:	2316      	movs	r3, #22
 8013408:	6003      	str	r3, [r0, #0]
 801340a:	f04f 30ff 	mov.w	r0, #4294967295
 801340e:	bd38      	pop	{r3, r4, r5, pc}
 8013410:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013412:	b112      	cbz	r2, 801341a <_raise_r+0x1e>
 8013414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013418:	b94b      	cbnz	r3, 801342e <_raise_r+0x32>
 801341a:	4620      	mov	r0, r4
 801341c:	f000 f852 	bl	80134c4 <_getpid_r>
 8013420:	462a      	mov	r2, r5
 8013422:	4601      	mov	r1, r0
 8013424:	4620      	mov	r0, r4
 8013426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801342a:	f000 b839 	b.w	80134a0 <_kill_r>
 801342e:	2b01      	cmp	r3, #1
 8013430:	d00a      	beq.n	8013448 <_raise_r+0x4c>
 8013432:	1c59      	adds	r1, r3, #1
 8013434:	d103      	bne.n	801343e <_raise_r+0x42>
 8013436:	2316      	movs	r3, #22
 8013438:	6003      	str	r3, [r0, #0]
 801343a:	2001      	movs	r0, #1
 801343c:	e7e7      	b.n	801340e <_raise_r+0x12>
 801343e:	2400      	movs	r4, #0
 8013440:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013444:	4628      	mov	r0, r5
 8013446:	4798      	blx	r3
 8013448:	2000      	movs	r0, #0
 801344a:	e7e0      	b.n	801340e <_raise_r+0x12>

0801344c <raise>:
 801344c:	4b02      	ldr	r3, [pc, #8]	; (8013458 <raise+0xc>)
 801344e:	4601      	mov	r1, r0
 8013450:	6818      	ldr	r0, [r3, #0]
 8013452:	f7ff bfd3 	b.w	80133fc <_raise_r>
 8013456:	bf00      	nop
 8013458:	20000090 	.word	0x20000090

0801345c <_fstat_r>:
 801345c:	b538      	push	{r3, r4, r5, lr}
 801345e:	4d07      	ldr	r5, [pc, #28]	; (801347c <_fstat_r+0x20>)
 8013460:	2300      	movs	r3, #0
 8013462:	4604      	mov	r4, r0
 8013464:	4608      	mov	r0, r1
 8013466:	4611      	mov	r1, r2
 8013468:	602b      	str	r3, [r5, #0]
 801346a:	f7ef f84b 	bl	8002504 <_fstat>
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	d102      	bne.n	8013478 <_fstat_r+0x1c>
 8013472:	682b      	ldr	r3, [r5, #0]
 8013474:	b103      	cbz	r3, 8013478 <_fstat_r+0x1c>
 8013476:	6023      	str	r3, [r4, #0]
 8013478:	bd38      	pop	{r3, r4, r5, pc}
 801347a:	bf00      	nop
 801347c:	20003a00 	.word	0x20003a00

08013480 <_isatty_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4d06      	ldr	r5, [pc, #24]	; (801349c <_isatty_r+0x1c>)
 8013484:	2300      	movs	r3, #0
 8013486:	4604      	mov	r4, r0
 8013488:	4608      	mov	r0, r1
 801348a:	602b      	str	r3, [r5, #0]
 801348c:	f7ef f84a 	bl	8002524 <_isatty>
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d102      	bne.n	801349a <_isatty_r+0x1a>
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	b103      	cbz	r3, 801349a <_isatty_r+0x1a>
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	20003a00 	.word	0x20003a00

080134a0 <_kill_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4d07      	ldr	r5, [pc, #28]	; (80134c0 <_kill_r+0x20>)
 80134a4:	2300      	movs	r3, #0
 80134a6:	4604      	mov	r4, r0
 80134a8:	4608      	mov	r0, r1
 80134aa:	4611      	mov	r1, r2
 80134ac:	602b      	str	r3, [r5, #0]
 80134ae:	f7ee ffe6 	bl	800247e <_kill>
 80134b2:	1c43      	adds	r3, r0, #1
 80134b4:	d102      	bne.n	80134bc <_kill_r+0x1c>
 80134b6:	682b      	ldr	r3, [r5, #0]
 80134b8:	b103      	cbz	r3, 80134bc <_kill_r+0x1c>
 80134ba:	6023      	str	r3, [r4, #0]
 80134bc:	bd38      	pop	{r3, r4, r5, pc}
 80134be:	bf00      	nop
 80134c0:	20003a00 	.word	0x20003a00

080134c4 <_getpid_r>:
 80134c4:	f7ee bfd3 	b.w	800246e <_getpid>

080134c8 <_sbrk_r>:
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	4d06      	ldr	r5, [pc, #24]	; (80134e4 <_sbrk_r+0x1c>)
 80134cc:	2300      	movs	r3, #0
 80134ce:	4604      	mov	r4, r0
 80134d0:	4608      	mov	r0, r1
 80134d2:	602b      	str	r3, [r5, #0]
 80134d4:	f7ef f83e 	bl	8002554 <_sbrk>
 80134d8:	1c43      	adds	r3, r0, #1
 80134da:	d102      	bne.n	80134e2 <_sbrk_r+0x1a>
 80134dc:	682b      	ldr	r3, [r5, #0]
 80134de:	b103      	cbz	r3, 80134e2 <_sbrk_r+0x1a>
 80134e0:	6023      	str	r3, [r4, #0]
 80134e2:	bd38      	pop	{r3, r4, r5, pc}
 80134e4:	20003a00 	.word	0x20003a00

080134e8 <nan>:
 80134e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80134f0 <nan+0x8>
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop
 80134f0:	00000000 	.word	0x00000000
 80134f4:	7ff80000 	.word	0x7ff80000

080134f8 <_calloc_r>:
 80134f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134fa:	fba1 2402 	umull	r2, r4, r1, r2
 80134fe:	b94c      	cbnz	r4, 8013514 <_calloc_r+0x1c>
 8013500:	4611      	mov	r1, r2
 8013502:	9201      	str	r2, [sp, #4]
 8013504:	f7fd fffe 	bl	8011504 <_malloc_r>
 8013508:	9a01      	ldr	r2, [sp, #4]
 801350a:	4605      	mov	r5, r0
 801350c:	b930      	cbnz	r0, 801351c <_calloc_r+0x24>
 801350e:	4628      	mov	r0, r5
 8013510:	b003      	add	sp, #12
 8013512:	bd30      	pop	{r4, r5, pc}
 8013514:	220c      	movs	r2, #12
 8013516:	6002      	str	r2, [r0, #0]
 8013518:	2500      	movs	r5, #0
 801351a:	e7f8      	b.n	801350e <_calloc_r+0x16>
 801351c:	4621      	mov	r1, r4
 801351e:	f7fc ffcd 	bl	80104bc <memset>
 8013522:	e7f4      	b.n	801350e <_calloc_r+0x16>

08013524 <rshift>:
 8013524:	6903      	ldr	r3, [r0, #16]
 8013526:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801352a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801352e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013532:	f100 0414 	add.w	r4, r0, #20
 8013536:	dd45      	ble.n	80135c4 <rshift+0xa0>
 8013538:	f011 011f 	ands.w	r1, r1, #31
 801353c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013540:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013544:	d10c      	bne.n	8013560 <rshift+0x3c>
 8013546:	f100 0710 	add.w	r7, r0, #16
 801354a:	4629      	mov	r1, r5
 801354c:	42b1      	cmp	r1, r6
 801354e:	d334      	bcc.n	80135ba <rshift+0x96>
 8013550:	1a9b      	subs	r3, r3, r2
 8013552:	009b      	lsls	r3, r3, #2
 8013554:	1eea      	subs	r2, r5, #3
 8013556:	4296      	cmp	r6, r2
 8013558:	bf38      	it	cc
 801355a:	2300      	movcc	r3, #0
 801355c:	4423      	add	r3, r4
 801355e:	e015      	b.n	801358c <rshift+0x68>
 8013560:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013564:	f1c1 0820 	rsb	r8, r1, #32
 8013568:	40cf      	lsrs	r7, r1
 801356a:	f105 0e04 	add.w	lr, r5, #4
 801356e:	46a1      	mov	r9, r4
 8013570:	4576      	cmp	r6, lr
 8013572:	46f4      	mov	ip, lr
 8013574:	d815      	bhi.n	80135a2 <rshift+0x7e>
 8013576:	1a9a      	subs	r2, r3, r2
 8013578:	0092      	lsls	r2, r2, #2
 801357a:	3a04      	subs	r2, #4
 801357c:	3501      	adds	r5, #1
 801357e:	42ae      	cmp	r6, r5
 8013580:	bf38      	it	cc
 8013582:	2200      	movcc	r2, #0
 8013584:	18a3      	adds	r3, r4, r2
 8013586:	50a7      	str	r7, [r4, r2]
 8013588:	b107      	cbz	r7, 801358c <rshift+0x68>
 801358a:	3304      	adds	r3, #4
 801358c:	1b1a      	subs	r2, r3, r4
 801358e:	42a3      	cmp	r3, r4
 8013590:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013594:	bf08      	it	eq
 8013596:	2300      	moveq	r3, #0
 8013598:	6102      	str	r2, [r0, #16]
 801359a:	bf08      	it	eq
 801359c:	6143      	streq	r3, [r0, #20]
 801359e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135a2:	f8dc c000 	ldr.w	ip, [ip]
 80135a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80135aa:	ea4c 0707 	orr.w	r7, ip, r7
 80135ae:	f849 7b04 	str.w	r7, [r9], #4
 80135b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80135b6:	40cf      	lsrs	r7, r1
 80135b8:	e7da      	b.n	8013570 <rshift+0x4c>
 80135ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80135be:	f847 cf04 	str.w	ip, [r7, #4]!
 80135c2:	e7c3      	b.n	801354c <rshift+0x28>
 80135c4:	4623      	mov	r3, r4
 80135c6:	e7e1      	b.n	801358c <rshift+0x68>

080135c8 <__hexdig_fun>:
 80135c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80135cc:	2b09      	cmp	r3, #9
 80135ce:	d802      	bhi.n	80135d6 <__hexdig_fun+0xe>
 80135d0:	3820      	subs	r0, #32
 80135d2:	b2c0      	uxtb	r0, r0
 80135d4:	4770      	bx	lr
 80135d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80135da:	2b05      	cmp	r3, #5
 80135dc:	d801      	bhi.n	80135e2 <__hexdig_fun+0x1a>
 80135de:	3847      	subs	r0, #71	; 0x47
 80135e0:	e7f7      	b.n	80135d2 <__hexdig_fun+0xa>
 80135e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80135e6:	2b05      	cmp	r3, #5
 80135e8:	d801      	bhi.n	80135ee <__hexdig_fun+0x26>
 80135ea:	3827      	subs	r0, #39	; 0x27
 80135ec:	e7f1      	b.n	80135d2 <__hexdig_fun+0xa>
 80135ee:	2000      	movs	r0, #0
 80135f0:	4770      	bx	lr
	...

080135f4 <__gethex>:
 80135f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f8:	4617      	mov	r7, r2
 80135fa:	680a      	ldr	r2, [r1, #0]
 80135fc:	b085      	sub	sp, #20
 80135fe:	f102 0b02 	add.w	fp, r2, #2
 8013602:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013606:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801360a:	4681      	mov	r9, r0
 801360c:	468a      	mov	sl, r1
 801360e:	9302      	str	r3, [sp, #8]
 8013610:	32fe      	adds	r2, #254	; 0xfe
 8013612:	eb02 030b 	add.w	r3, r2, fp
 8013616:	46d8      	mov	r8, fp
 8013618:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801361c:	9301      	str	r3, [sp, #4]
 801361e:	2830      	cmp	r0, #48	; 0x30
 8013620:	d0f7      	beq.n	8013612 <__gethex+0x1e>
 8013622:	f7ff ffd1 	bl	80135c8 <__hexdig_fun>
 8013626:	4604      	mov	r4, r0
 8013628:	2800      	cmp	r0, #0
 801362a:	d138      	bne.n	801369e <__gethex+0xaa>
 801362c:	49a7      	ldr	r1, [pc, #668]	; (80138cc <__gethex+0x2d8>)
 801362e:	2201      	movs	r2, #1
 8013630:	4640      	mov	r0, r8
 8013632:	f7fc ff4b 	bl	80104cc <strncmp>
 8013636:	4606      	mov	r6, r0
 8013638:	2800      	cmp	r0, #0
 801363a:	d169      	bne.n	8013710 <__gethex+0x11c>
 801363c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013640:	465d      	mov	r5, fp
 8013642:	f7ff ffc1 	bl	80135c8 <__hexdig_fun>
 8013646:	2800      	cmp	r0, #0
 8013648:	d064      	beq.n	8013714 <__gethex+0x120>
 801364a:	465a      	mov	r2, fp
 801364c:	7810      	ldrb	r0, [r2, #0]
 801364e:	2830      	cmp	r0, #48	; 0x30
 8013650:	4690      	mov	r8, r2
 8013652:	f102 0201 	add.w	r2, r2, #1
 8013656:	d0f9      	beq.n	801364c <__gethex+0x58>
 8013658:	f7ff ffb6 	bl	80135c8 <__hexdig_fun>
 801365c:	2301      	movs	r3, #1
 801365e:	fab0 f480 	clz	r4, r0
 8013662:	0964      	lsrs	r4, r4, #5
 8013664:	465e      	mov	r6, fp
 8013666:	9301      	str	r3, [sp, #4]
 8013668:	4642      	mov	r2, r8
 801366a:	4615      	mov	r5, r2
 801366c:	3201      	adds	r2, #1
 801366e:	7828      	ldrb	r0, [r5, #0]
 8013670:	f7ff ffaa 	bl	80135c8 <__hexdig_fun>
 8013674:	2800      	cmp	r0, #0
 8013676:	d1f8      	bne.n	801366a <__gethex+0x76>
 8013678:	4994      	ldr	r1, [pc, #592]	; (80138cc <__gethex+0x2d8>)
 801367a:	2201      	movs	r2, #1
 801367c:	4628      	mov	r0, r5
 801367e:	f7fc ff25 	bl	80104cc <strncmp>
 8013682:	b978      	cbnz	r0, 80136a4 <__gethex+0xb0>
 8013684:	b946      	cbnz	r6, 8013698 <__gethex+0xa4>
 8013686:	1c6e      	adds	r6, r5, #1
 8013688:	4632      	mov	r2, r6
 801368a:	4615      	mov	r5, r2
 801368c:	3201      	adds	r2, #1
 801368e:	7828      	ldrb	r0, [r5, #0]
 8013690:	f7ff ff9a 	bl	80135c8 <__hexdig_fun>
 8013694:	2800      	cmp	r0, #0
 8013696:	d1f8      	bne.n	801368a <__gethex+0x96>
 8013698:	1b73      	subs	r3, r6, r5
 801369a:	009e      	lsls	r6, r3, #2
 801369c:	e004      	b.n	80136a8 <__gethex+0xb4>
 801369e:	2400      	movs	r4, #0
 80136a0:	4626      	mov	r6, r4
 80136a2:	e7e1      	b.n	8013668 <__gethex+0x74>
 80136a4:	2e00      	cmp	r6, #0
 80136a6:	d1f7      	bne.n	8013698 <__gethex+0xa4>
 80136a8:	782b      	ldrb	r3, [r5, #0]
 80136aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80136ae:	2b50      	cmp	r3, #80	; 0x50
 80136b0:	d13d      	bne.n	801372e <__gethex+0x13a>
 80136b2:	786b      	ldrb	r3, [r5, #1]
 80136b4:	2b2b      	cmp	r3, #43	; 0x2b
 80136b6:	d02f      	beq.n	8013718 <__gethex+0x124>
 80136b8:	2b2d      	cmp	r3, #45	; 0x2d
 80136ba:	d031      	beq.n	8013720 <__gethex+0x12c>
 80136bc:	1c69      	adds	r1, r5, #1
 80136be:	f04f 0b00 	mov.w	fp, #0
 80136c2:	7808      	ldrb	r0, [r1, #0]
 80136c4:	f7ff ff80 	bl	80135c8 <__hexdig_fun>
 80136c8:	1e42      	subs	r2, r0, #1
 80136ca:	b2d2      	uxtb	r2, r2
 80136cc:	2a18      	cmp	r2, #24
 80136ce:	d82e      	bhi.n	801372e <__gethex+0x13a>
 80136d0:	f1a0 0210 	sub.w	r2, r0, #16
 80136d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80136d8:	f7ff ff76 	bl	80135c8 <__hexdig_fun>
 80136dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80136e0:	fa5f fc8c 	uxtb.w	ip, ip
 80136e4:	f1bc 0f18 	cmp.w	ip, #24
 80136e8:	d91d      	bls.n	8013726 <__gethex+0x132>
 80136ea:	f1bb 0f00 	cmp.w	fp, #0
 80136ee:	d000      	beq.n	80136f2 <__gethex+0xfe>
 80136f0:	4252      	negs	r2, r2
 80136f2:	4416      	add	r6, r2
 80136f4:	f8ca 1000 	str.w	r1, [sl]
 80136f8:	b1dc      	cbz	r4, 8013732 <__gethex+0x13e>
 80136fa:	9b01      	ldr	r3, [sp, #4]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	bf14      	ite	ne
 8013700:	f04f 0800 	movne.w	r8, #0
 8013704:	f04f 0806 	moveq.w	r8, #6
 8013708:	4640      	mov	r0, r8
 801370a:	b005      	add	sp, #20
 801370c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013710:	4645      	mov	r5, r8
 8013712:	4626      	mov	r6, r4
 8013714:	2401      	movs	r4, #1
 8013716:	e7c7      	b.n	80136a8 <__gethex+0xb4>
 8013718:	f04f 0b00 	mov.w	fp, #0
 801371c:	1ca9      	adds	r1, r5, #2
 801371e:	e7d0      	b.n	80136c2 <__gethex+0xce>
 8013720:	f04f 0b01 	mov.w	fp, #1
 8013724:	e7fa      	b.n	801371c <__gethex+0x128>
 8013726:	230a      	movs	r3, #10
 8013728:	fb03 0002 	mla	r0, r3, r2, r0
 801372c:	e7d0      	b.n	80136d0 <__gethex+0xdc>
 801372e:	4629      	mov	r1, r5
 8013730:	e7e0      	b.n	80136f4 <__gethex+0x100>
 8013732:	eba5 0308 	sub.w	r3, r5, r8
 8013736:	3b01      	subs	r3, #1
 8013738:	4621      	mov	r1, r4
 801373a:	2b07      	cmp	r3, #7
 801373c:	dc0a      	bgt.n	8013754 <__gethex+0x160>
 801373e:	4648      	mov	r0, r9
 8013740:	f7fd ff6c 	bl	801161c <_Balloc>
 8013744:	4604      	mov	r4, r0
 8013746:	b940      	cbnz	r0, 801375a <__gethex+0x166>
 8013748:	4b61      	ldr	r3, [pc, #388]	; (80138d0 <__gethex+0x2dc>)
 801374a:	4602      	mov	r2, r0
 801374c:	21e4      	movs	r1, #228	; 0xe4
 801374e:	4861      	ldr	r0, [pc, #388]	; (80138d4 <__gethex+0x2e0>)
 8013750:	f7fb fdbc 	bl	800f2cc <__assert_func>
 8013754:	3101      	adds	r1, #1
 8013756:	105b      	asrs	r3, r3, #1
 8013758:	e7ef      	b.n	801373a <__gethex+0x146>
 801375a:	f100 0a14 	add.w	sl, r0, #20
 801375e:	2300      	movs	r3, #0
 8013760:	495a      	ldr	r1, [pc, #360]	; (80138cc <__gethex+0x2d8>)
 8013762:	f8cd a004 	str.w	sl, [sp, #4]
 8013766:	469b      	mov	fp, r3
 8013768:	45a8      	cmp	r8, r5
 801376a:	d342      	bcc.n	80137f2 <__gethex+0x1fe>
 801376c:	9801      	ldr	r0, [sp, #4]
 801376e:	f840 bb04 	str.w	fp, [r0], #4
 8013772:	eba0 000a 	sub.w	r0, r0, sl
 8013776:	1080      	asrs	r0, r0, #2
 8013778:	6120      	str	r0, [r4, #16]
 801377a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801377e:	4658      	mov	r0, fp
 8013780:	f7fe f83e 	bl	8011800 <__hi0bits>
 8013784:	683d      	ldr	r5, [r7, #0]
 8013786:	eba8 0000 	sub.w	r0, r8, r0
 801378a:	42a8      	cmp	r0, r5
 801378c:	dd59      	ble.n	8013842 <__gethex+0x24e>
 801378e:	eba0 0805 	sub.w	r8, r0, r5
 8013792:	4641      	mov	r1, r8
 8013794:	4620      	mov	r0, r4
 8013796:	f7fe fbcd 	bl	8011f34 <__any_on>
 801379a:	4683      	mov	fp, r0
 801379c:	b1b8      	cbz	r0, 80137ce <__gethex+0x1da>
 801379e:	f108 33ff 	add.w	r3, r8, #4294967295
 80137a2:	1159      	asrs	r1, r3, #5
 80137a4:	f003 021f 	and.w	r2, r3, #31
 80137a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80137ac:	f04f 0b01 	mov.w	fp, #1
 80137b0:	fa0b f202 	lsl.w	r2, fp, r2
 80137b4:	420a      	tst	r2, r1
 80137b6:	d00a      	beq.n	80137ce <__gethex+0x1da>
 80137b8:	455b      	cmp	r3, fp
 80137ba:	dd06      	ble.n	80137ca <__gethex+0x1d6>
 80137bc:	f1a8 0102 	sub.w	r1, r8, #2
 80137c0:	4620      	mov	r0, r4
 80137c2:	f7fe fbb7 	bl	8011f34 <__any_on>
 80137c6:	2800      	cmp	r0, #0
 80137c8:	d138      	bne.n	801383c <__gethex+0x248>
 80137ca:	f04f 0b02 	mov.w	fp, #2
 80137ce:	4641      	mov	r1, r8
 80137d0:	4620      	mov	r0, r4
 80137d2:	f7ff fea7 	bl	8013524 <rshift>
 80137d6:	4446      	add	r6, r8
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	42b3      	cmp	r3, r6
 80137dc:	da41      	bge.n	8013862 <__gethex+0x26e>
 80137de:	4621      	mov	r1, r4
 80137e0:	4648      	mov	r0, r9
 80137e2:	f7fd ff5b 	bl	801169c <_Bfree>
 80137e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137e8:	2300      	movs	r3, #0
 80137ea:	6013      	str	r3, [r2, #0]
 80137ec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80137f0:	e78a      	b.n	8013708 <__gethex+0x114>
 80137f2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80137f6:	2a2e      	cmp	r2, #46	; 0x2e
 80137f8:	d014      	beq.n	8013824 <__gethex+0x230>
 80137fa:	2b20      	cmp	r3, #32
 80137fc:	d106      	bne.n	801380c <__gethex+0x218>
 80137fe:	9b01      	ldr	r3, [sp, #4]
 8013800:	f843 bb04 	str.w	fp, [r3], #4
 8013804:	f04f 0b00 	mov.w	fp, #0
 8013808:	9301      	str	r3, [sp, #4]
 801380a:	465b      	mov	r3, fp
 801380c:	7828      	ldrb	r0, [r5, #0]
 801380e:	9303      	str	r3, [sp, #12]
 8013810:	f7ff feda 	bl	80135c8 <__hexdig_fun>
 8013814:	9b03      	ldr	r3, [sp, #12]
 8013816:	f000 000f 	and.w	r0, r0, #15
 801381a:	4098      	lsls	r0, r3
 801381c:	ea4b 0b00 	orr.w	fp, fp, r0
 8013820:	3304      	adds	r3, #4
 8013822:	e7a1      	b.n	8013768 <__gethex+0x174>
 8013824:	45a8      	cmp	r8, r5
 8013826:	d8e8      	bhi.n	80137fa <__gethex+0x206>
 8013828:	2201      	movs	r2, #1
 801382a:	4628      	mov	r0, r5
 801382c:	9303      	str	r3, [sp, #12]
 801382e:	f7fc fe4d 	bl	80104cc <strncmp>
 8013832:	4926      	ldr	r1, [pc, #152]	; (80138cc <__gethex+0x2d8>)
 8013834:	9b03      	ldr	r3, [sp, #12]
 8013836:	2800      	cmp	r0, #0
 8013838:	d1df      	bne.n	80137fa <__gethex+0x206>
 801383a:	e795      	b.n	8013768 <__gethex+0x174>
 801383c:	f04f 0b03 	mov.w	fp, #3
 8013840:	e7c5      	b.n	80137ce <__gethex+0x1da>
 8013842:	da0b      	bge.n	801385c <__gethex+0x268>
 8013844:	eba5 0800 	sub.w	r8, r5, r0
 8013848:	4621      	mov	r1, r4
 801384a:	4642      	mov	r2, r8
 801384c:	4648      	mov	r0, r9
 801384e:	f7fe f93f 	bl	8011ad0 <__lshift>
 8013852:	eba6 0608 	sub.w	r6, r6, r8
 8013856:	4604      	mov	r4, r0
 8013858:	f100 0a14 	add.w	sl, r0, #20
 801385c:	f04f 0b00 	mov.w	fp, #0
 8013860:	e7ba      	b.n	80137d8 <__gethex+0x1e4>
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	42b3      	cmp	r3, r6
 8013866:	dd73      	ble.n	8013950 <__gethex+0x35c>
 8013868:	1b9e      	subs	r6, r3, r6
 801386a:	42b5      	cmp	r5, r6
 801386c:	dc34      	bgt.n	80138d8 <__gethex+0x2e4>
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2b02      	cmp	r3, #2
 8013872:	d023      	beq.n	80138bc <__gethex+0x2c8>
 8013874:	2b03      	cmp	r3, #3
 8013876:	d025      	beq.n	80138c4 <__gethex+0x2d0>
 8013878:	2b01      	cmp	r3, #1
 801387a:	d115      	bne.n	80138a8 <__gethex+0x2b4>
 801387c:	42b5      	cmp	r5, r6
 801387e:	d113      	bne.n	80138a8 <__gethex+0x2b4>
 8013880:	2d01      	cmp	r5, #1
 8013882:	d10b      	bne.n	801389c <__gethex+0x2a8>
 8013884:	9a02      	ldr	r2, [sp, #8]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6013      	str	r3, [r2, #0]
 801388a:	2301      	movs	r3, #1
 801388c:	6123      	str	r3, [r4, #16]
 801388e:	f8ca 3000 	str.w	r3, [sl]
 8013892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013894:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013898:	601c      	str	r4, [r3, #0]
 801389a:	e735      	b.n	8013708 <__gethex+0x114>
 801389c:	1e69      	subs	r1, r5, #1
 801389e:	4620      	mov	r0, r4
 80138a0:	f7fe fb48 	bl	8011f34 <__any_on>
 80138a4:	2800      	cmp	r0, #0
 80138a6:	d1ed      	bne.n	8013884 <__gethex+0x290>
 80138a8:	4621      	mov	r1, r4
 80138aa:	4648      	mov	r0, r9
 80138ac:	f7fd fef6 	bl	801169c <_Bfree>
 80138b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138b2:	2300      	movs	r3, #0
 80138b4:	6013      	str	r3, [r2, #0]
 80138b6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80138ba:	e725      	b.n	8013708 <__gethex+0x114>
 80138bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d1f2      	bne.n	80138a8 <__gethex+0x2b4>
 80138c2:	e7df      	b.n	8013884 <__gethex+0x290>
 80138c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d1dc      	bne.n	8013884 <__gethex+0x290>
 80138ca:	e7ed      	b.n	80138a8 <__gethex+0x2b4>
 80138cc:	0801556c 	.word	0x0801556c
 80138d0:	08015402 	.word	0x08015402
 80138d4:	080156da 	.word	0x080156da
 80138d8:	f106 38ff 	add.w	r8, r6, #4294967295
 80138dc:	f1bb 0f00 	cmp.w	fp, #0
 80138e0:	d133      	bne.n	801394a <__gethex+0x356>
 80138e2:	f1b8 0f00 	cmp.w	r8, #0
 80138e6:	d004      	beq.n	80138f2 <__gethex+0x2fe>
 80138e8:	4641      	mov	r1, r8
 80138ea:	4620      	mov	r0, r4
 80138ec:	f7fe fb22 	bl	8011f34 <__any_on>
 80138f0:	4683      	mov	fp, r0
 80138f2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80138f6:	2301      	movs	r3, #1
 80138f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80138fc:	f008 081f 	and.w	r8, r8, #31
 8013900:	fa03 f308 	lsl.w	r3, r3, r8
 8013904:	4213      	tst	r3, r2
 8013906:	4631      	mov	r1, r6
 8013908:	4620      	mov	r0, r4
 801390a:	bf18      	it	ne
 801390c:	f04b 0b02 	orrne.w	fp, fp, #2
 8013910:	1bad      	subs	r5, r5, r6
 8013912:	f7ff fe07 	bl	8013524 <rshift>
 8013916:	687e      	ldr	r6, [r7, #4]
 8013918:	f04f 0802 	mov.w	r8, #2
 801391c:	f1bb 0f00 	cmp.w	fp, #0
 8013920:	d04a      	beq.n	80139b8 <__gethex+0x3c4>
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2b02      	cmp	r3, #2
 8013926:	d016      	beq.n	8013956 <__gethex+0x362>
 8013928:	2b03      	cmp	r3, #3
 801392a:	d018      	beq.n	801395e <__gethex+0x36a>
 801392c:	2b01      	cmp	r3, #1
 801392e:	d109      	bne.n	8013944 <__gethex+0x350>
 8013930:	f01b 0f02 	tst.w	fp, #2
 8013934:	d006      	beq.n	8013944 <__gethex+0x350>
 8013936:	f8da 3000 	ldr.w	r3, [sl]
 801393a:	ea4b 0b03 	orr.w	fp, fp, r3
 801393e:	f01b 0f01 	tst.w	fp, #1
 8013942:	d10f      	bne.n	8013964 <__gethex+0x370>
 8013944:	f048 0810 	orr.w	r8, r8, #16
 8013948:	e036      	b.n	80139b8 <__gethex+0x3c4>
 801394a:	f04f 0b01 	mov.w	fp, #1
 801394e:	e7d0      	b.n	80138f2 <__gethex+0x2fe>
 8013950:	f04f 0801 	mov.w	r8, #1
 8013954:	e7e2      	b.n	801391c <__gethex+0x328>
 8013956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013958:	f1c3 0301 	rsb	r3, r3, #1
 801395c:	930f      	str	r3, [sp, #60]	; 0x3c
 801395e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013960:	2b00      	cmp	r3, #0
 8013962:	d0ef      	beq.n	8013944 <__gethex+0x350>
 8013964:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013968:	f104 0214 	add.w	r2, r4, #20
 801396c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013970:	9301      	str	r3, [sp, #4]
 8013972:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013976:	2300      	movs	r3, #0
 8013978:	4694      	mov	ip, r2
 801397a:	f852 1b04 	ldr.w	r1, [r2], #4
 801397e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013982:	d01e      	beq.n	80139c2 <__gethex+0x3ce>
 8013984:	3101      	adds	r1, #1
 8013986:	f8cc 1000 	str.w	r1, [ip]
 801398a:	f1b8 0f02 	cmp.w	r8, #2
 801398e:	f104 0214 	add.w	r2, r4, #20
 8013992:	d13d      	bne.n	8013a10 <__gethex+0x41c>
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	3b01      	subs	r3, #1
 8013998:	42ab      	cmp	r3, r5
 801399a:	d10b      	bne.n	80139b4 <__gethex+0x3c0>
 801399c:	1169      	asrs	r1, r5, #5
 801399e:	2301      	movs	r3, #1
 80139a0:	f005 051f 	and.w	r5, r5, #31
 80139a4:	fa03 f505 	lsl.w	r5, r3, r5
 80139a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139ac:	421d      	tst	r5, r3
 80139ae:	bf18      	it	ne
 80139b0:	f04f 0801 	movne.w	r8, #1
 80139b4:	f048 0820 	orr.w	r8, r8, #32
 80139b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139ba:	601c      	str	r4, [r3, #0]
 80139bc:	9b02      	ldr	r3, [sp, #8]
 80139be:	601e      	str	r6, [r3, #0]
 80139c0:	e6a2      	b.n	8013708 <__gethex+0x114>
 80139c2:	4290      	cmp	r0, r2
 80139c4:	f842 3c04 	str.w	r3, [r2, #-4]
 80139c8:	d8d6      	bhi.n	8013978 <__gethex+0x384>
 80139ca:	68a2      	ldr	r2, [r4, #8]
 80139cc:	4593      	cmp	fp, r2
 80139ce:	db17      	blt.n	8013a00 <__gethex+0x40c>
 80139d0:	6861      	ldr	r1, [r4, #4]
 80139d2:	4648      	mov	r0, r9
 80139d4:	3101      	adds	r1, #1
 80139d6:	f7fd fe21 	bl	801161c <_Balloc>
 80139da:	4682      	mov	sl, r0
 80139dc:	b918      	cbnz	r0, 80139e6 <__gethex+0x3f2>
 80139de:	4b1b      	ldr	r3, [pc, #108]	; (8013a4c <__gethex+0x458>)
 80139e0:	4602      	mov	r2, r0
 80139e2:	2184      	movs	r1, #132	; 0x84
 80139e4:	e6b3      	b.n	801374e <__gethex+0x15a>
 80139e6:	6922      	ldr	r2, [r4, #16]
 80139e8:	3202      	adds	r2, #2
 80139ea:	f104 010c 	add.w	r1, r4, #12
 80139ee:	0092      	lsls	r2, r2, #2
 80139f0:	300c      	adds	r0, #12
 80139f2:	f7fc fe7a 	bl	80106ea <memcpy>
 80139f6:	4621      	mov	r1, r4
 80139f8:	4648      	mov	r0, r9
 80139fa:	f7fd fe4f 	bl	801169c <_Bfree>
 80139fe:	4654      	mov	r4, sl
 8013a00:	6922      	ldr	r2, [r4, #16]
 8013a02:	1c51      	adds	r1, r2, #1
 8013a04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013a08:	6121      	str	r1, [r4, #16]
 8013a0a:	2101      	movs	r1, #1
 8013a0c:	6151      	str	r1, [r2, #20]
 8013a0e:	e7bc      	b.n	801398a <__gethex+0x396>
 8013a10:	6921      	ldr	r1, [r4, #16]
 8013a12:	4559      	cmp	r1, fp
 8013a14:	dd0b      	ble.n	8013a2e <__gethex+0x43a>
 8013a16:	2101      	movs	r1, #1
 8013a18:	4620      	mov	r0, r4
 8013a1a:	f7ff fd83 	bl	8013524 <rshift>
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	3601      	adds	r6, #1
 8013a22:	42b3      	cmp	r3, r6
 8013a24:	f6ff aedb 	blt.w	80137de <__gethex+0x1ea>
 8013a28:	f04f 0801 	mov.w	r8, #1
 8013a2c:	e7c2      	b.n	80139b4 <__gethex+0x3c0>
 8013a2e:	f015 051f 	ands.w	r5, r5, #31
 8013a32:	d0f9      	beq.n	8013a28 <__gethex+0x434>
 8013a34:	9b01      	ldr	r3, [sp, #4]
 8013a36:	441a      	add	r2, r3
 8013a38:	f1c5 0520 	rsb	r5, r5, #32
 8013a3c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013a40:	f7fd fede 	bl	8011800 <__hi0bits>
 8013a44:	42a8      	cmp	r0, r5
 8013a46:	dbe6      	blt.n	8013a16 <__gethex+0x422>
 8013a48:	e7ee      	b.n	8013a28 <__gethex+0x434>
 8013a4a:	bf00      	nop
 8013a4c:	08015402 	.word	0x08015402

08013a50 <L_shift>:
 8013a50:	f1c2 0208 	rsb	r2, r2, #8
 8013a54:	0092      	lsls	r2, r2, #2
 8013a56:	b570      	push	{r4, r5, r6, lr}
 8013a58:	f1c2 0620 	rsb	r6, r2, #32
 8013a5c:	6843      	ldr	r3, [r0, #4]
 8013a5e:	6804      	ldr	r4, [r0, #0]
 8013a60:	fa03 f506 	lsl.w	r5, r3, r6
 8013a64:	432c      	orrs	r4, r5
 8013a66:	40d3      	lsrs	r3, r2
 8013a68:	6004      	str	r4, [r0, #0]
 8013a6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8013a6e:	4288      	cmp	r0, r1
 8013a70:	d3f4      	bcc.n	8013a5c <L_shift+0xc>
 8013a72:	bd70      	pop	{r4, r5, r6, pc}

08013a74 <__match>:
 8013a74:	b530      	push	{r4, r5, lr}
 8013a76:	6803      	ldr	r3, [r0, #0]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a7e:	b914      	cbnz	r4, 8013a86 <__match+0x12>
 8013a80:	6003      	str	r3, [r0, #0]
 8013a82:	2001      	movs	r0, #1
 8013a84:	bd30      	pop	{r4, r5, pc}
 8013a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013a8e:	2d19      	cmp	r5, #25
 8013a90:	bf98      	it	ls
 8013a92:	3220      	addls	r2, #32
 8013a94:	42a2      	cmp	r2, r4
 8013a96:	d0f0      	beq.n	8013a7a <__match+0x6>
 8013a98:	2000      	movs	r0, #0
 8013a9a:	e7f3      	b.n	8013a84 <__match+0x10>

08013a9c <__hexnan>:
 8013a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa0:	680b      	ldr	r3, [r1, #0]
 8013aa2:	6801      	ldr	r1, [r0, #0]
 8013aa4:	115e      	asrs	r6, r3, #5
 8013aa6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013aaa:	f013 031f 	ands.w	r3, r3, #31
 8013aae:	b087      	sub	sp, #28
 8013ab0:	bf18      	it	ne
 8013ab2:	3604      	addne	r6, #4
 8013ab4:	2500      	movs	r5, #0
 8013ab6:	1f37      	subs	r7, r6, #4
 8013ab8:	4682      	mov	sl, r0
 8013aba:	4690      	mov	r8, r2
 8013abc:	9301      	str	r3, [sp, #4]
 8013abe:	f846 5c04 	str.w	r5, [r6, #-4]
 8013ac2:	46b9      	mov	r9, r7
 8013ac4:	463c      	mov	r4, r7
 8013ac6:	9502      	str	r5, [sp, #8]
 8013ac8:	46ab      	mov	fp, r5
 8013aca:	784a      	ldrb	r2, [r1, #1]
 8013acc:	1c4b      	adds	r3, r1, #1
 8013ace:	9303      	str	r3, [sp, #12]
 8013ad0:	b342      	cbz	r2, 8013b24 <__hexnan+0x88>
 8013ad2:	4610      	mov	r0, r2
 8013ad4:	9105      	str	r1, [sp, #20]
 8013ad6:	9204      	str	r2, [sp, #16]
 8013ad8:	f7ff fd76 	bl	80135c8 <__hexdig_fun>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d14f      	bne.n	8013b80 <__hexnan+0xe4>
 8013ae0:	9a04      	ldr	r2, [sp, #16]
 8013ae2:	9905      	ldr	r1, [sp, #20]
 8013ae4:	2a20      	cmp	r2, #32
 8013ae6:	d818      	bhi.n	8013b1a <__hexnan+0x7e>
 8013ae8:	9b02      	ldr	r3, [sp, #8]
 8013aea:	459b      	cmp	fp, r3
 8013aec:	dd13      	ble.n	8013b16 <__hexnan+0x7a>
 8013aee:	454c      	cmp	r4, r9
 8013af0:	d206      	bcs.n	8013b00 <__hexnan+0x64>
 8013af2:	2d07      	cmp	r5, #7
 8013af4:	dc04      	bgt.n	8013b00 <__hexnan+0x64>
 8013af6:	462a      	mov	r2, r5
 8013af8:	4649      	mov	r1, r9
 8013afa:	4620      	mov	r0, r4
 8013afc:	f7ff ffa8 	bl	8013a50 <L_shift>
 8013b00:	4544      	cmp	r4, r8
 8013b02:	d950      	bls.n	8013ba6 <__hexnan+0x10a>
 8013b04:	2300      	movs	r3, #0
 8013b06:	f1a4 0904 	sub.w	r9, r4, #4
 8013b0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b0e:	f8cd b008 	str.w	fp, [sp, #8]
 8013b12:	464c      	mov	r4, r9
 8013b14:	461d      	mov	r5, r3
 8013b16:	9903      	ldr	r1, [sp, #12]
 8013b18:	e7d7      	b.n	8013aca <__hexnan+0x2e>
 8013b1a:	2a29      	cmp	r2, #41	; 0x29
 8013b1c:	d155      	bne.n	8013bca <__hexnan+0x12e>
 8013b1e:	3102      	adds	r1, #2
 8013b20:	f8ca 1000 	str.w	r1, [sl]
 8013b24:	f1bb 0f00 	cmp.w	fp, #0
 8013b28:	d04f      	beq.n	8013bca <__hexnan+0x12e>
 8013b2a:	454c      	cmp	r4, r9
 8013b2c:	d206      	bcs.n	8013b3c <__hexnan+0xa0>
 8013b2e:	2d07      	cmp	r5, #7
 8013b30:	dc04      	bgt.n	8013b3c <__hexnan+0xa0>
 8013b32:	462a      	mov	r2, r5
 8013b34:	4649      	mov	r1, r9
 8013b36:	4620      	mov	r0, r4
 8013b38:	f7ff ff8a 	bl	8013a50 <L_shift>
 8013b3c:	4544      	cmp	r4, r8
 8013b3e:	d934      	bls.n	8013baa <__hexnan+0x10e>
 8013b40:	f1a8 0204 	sub.w	r2, r8, #4
 8013b44:	4623      	mov	r3, r4
 8013b46:	f853 1b04 	ldr.w	r1, [r3], #4
 8013b4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8013b4e:	429f      	cmp	r7, r3
 8013b50:	d2f9      	bcs.n	8013b46 <__hexnan+0xaa>
 8013b52:	1b3b      	subs	r3, r7, r4
 8013b54:	f023 0303 	bic.w	r3, r3, #3
 8013b58:	3304      	adds	r3, #4
 8013b5a:	3e03      	subs	r6, #3
 8013b5c:	3401      	adds	r4, #1
 8013b5e:	42a6      	cmp	r6, r4
 8013b60:	bf38      	it	cc
 8013b62:	2304      	movcc	r3, #4
 8013b64:	4443      	add	r3, r8
 8013b66:	2200      	movs	r2, #0
 8013b68:	f843 2b04 	str.w	r2, [r3], #4
 8013b6c:	429f      	cmp	r7, r3
 8013b6e:	d2fb      	bcs.n	8013b68 <__hexnan+0xcc>
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	b91b      	cbnz	r3, 8013b7c <__hexnan+0xe0>
 8013b74:	4547      	cmp	r7, r8
 8013b76:	d126      	bne.n	8013bc6 <__hexnan+0x12a>
 8013b78:	2301      	movs	r3, #1
 8013b7a:	603b      	str	r3, [r7, #0]
 8013b7c:	2005      	movs	r0, #5
 8013b7e:	e025      	b.n	8013bcc <__hexnan+0x130>
 8013b80:	3501      	adds	r5, #1
 8013b82:	2d08      	cmp	r5, #8
 8013b84:	f10b 0b01 	add.w	fp, fp, #1
 8013b88:	dd06      	ble.n	8013b98 <__hexnan+0xfc>
 8013b8a:	4544      	cmp	r4, r8
 8013b8c:	d9c3      	bls.n	8013b16 <__hexnan+0x7a>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b94:	2501      	movs	r5, #1
 8013b96:	3c04      	subs	r4, #4
 8013b98:	6822      	ldr	r2, [r4, #0]
 8013b9a:	f000 000f 	and.w	r0, r0, #15
 8013b9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013ba2:	6020      	str	r0, [r4, #0]
 8013ba4:	e7b7      	b.n	8013b16 <__hexnan+0x7a>
 8013ba6:	2508      	movs	r5, #8
 8013ba8:	e7b5      	b.n	8013b16 <__hexnan+0x7a>
 8013baa:	9b01      	ldr	r3, [sp, #4]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d0df      	beq.n	8013b70 <__hexnan+0xd4>
 8013bb0:	f1c3 0320 	rsb	r3, r3, #32
 8013bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb8:	40da      	lsrs	r2, r3
 8013bba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013bbe:	4013      	ands	r3, r2
 8013bc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8013bc4:	e7d4      	b.n	8013b70 <__hexnan+0xd4>
 8013bc6:	3f04      	subs	r7, #4
 8013bc8:	e7d2      	b.n	8013b70 <__hexnan+0xd4>
 8013bca:	2004      	movs	r0, #4
 8013bcc:	b007      	add	sp, #28
 8013bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013bd2 <__ascii_mbtowc>:
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	b901      	cbnz	r1, 8013bd8 <__ascii_mbtowc+0x6>
 8013bd6:	a901      	add	r1, sp, #4
 8013bd8:	b142      	cbz	r2, 8013bec <__ascii_mbtowc+0x1a>
 8013bda:	b14b      	cbz	r3, 8013bf0 <__ascii_mbtowc+0x1e>
 8013bdc:	7813      	ldrb	r3, [r2, #0]
 8013bde:	600b      	str	r3, [r1, #0]
 8013be0:	7812      	ldrb	r2, [r2, #0]
 8013be2:	1e10      	subs	r0, r2, #0
 8013be4:	bf18      	it	ne
 8013be6:	2001      	movne	r0, #1
 8013be8:	b002      	add	sp, #8
 8013bea:	4770      	bx	lr
 8013bec:	4610      	mov	r0, r2
 8013bee:	e7fb      	b.n	8013be8 <__ascii_mbtowc+0x16>
 8013bf0:	f06f 0001 	mvn.w	r0, #1
 8013bf4:	e7f8      	b.n	8013be8 <__ascii_mbtowc+0x16>

08013bf6 <_realloc_r>:
 8013bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfa:	4680      	mov	r8, r0
 8013bfc:	4614      	mov	r4, r2
 8013bfe:	460e      	mov	r6, r1
 8013c00:	b921      	cbnz	r1, 8013c0c <_realloc_r+0x16>
 8013c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c06:	4611      	mov	r1, r2
 8013c08:	f7fd bc7c 	b.w	8011504 <_malloc_r>
 8013c0c:	b92a      	cbnz	r2, 8013c1a <_realloc_r+0x24>
 8013c0e:	f7fd fc05 	bl	801141c <_free_r>
 8013c12:	4625      	mov	r5, r4
 8013c14:	4628      	mov	r0, r5
 8013c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c1a:	f000 f828 	bl	8013c6e <_malloc_usable_size_r>
 8013c1e:	4284      	cmp	r4, r0
 8013c20:	4607      	mov	r7, r0
 8013c22:	d802      	bhi.n	8013c2a <_realloc_r+0x34>
 8013c24:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c28:	d812      	bhi.n	8013c50 <_realloc_r+0x5a>
 8013c2a:	4621      	mov	r1, r4
 8013c2c:	4640      	mov	r0, r8
 8013c2e:	f7fd fc69 	bl	8011504 <_malloc_r>
 8013c32:	4605      	mov	r5, r0
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d0ed      	beq.n	8013c14 <_realloc_r+0x1e>
 8013c38:	42bc      	cmp	r4, r7
 8013c3a:	4622      	mov	r2, r4
 8013c3c:	4631      	mov	r1, r6
 8013c3e:	bf28      	it	cs
 8013c40:	463a      	movcs	r2, r7
 8013c42:	f7fc fd52 	bl	80106ea <memcpy>
 8013c46:	4631      	mov	r1, r6
 8013c48:	4640      	mov	r0, r8
 8013c4a:	f7fd fbe7 	bl	801141c <_free_r>
 8013c4e:	e7e1      	b.n	8013c14 <_realloc_r+0x1e>
 8013c50:	4635      	mov	r5, r6
 8013c52:	e7df      	b.n	8013c14 <_realloc_r+0x1e>

08013c54 <__ascii_wctomb>:
 8013c54:	b149      	cbz	r1, 8013c6a <__ascii_wctomb+0x16>
 8013c56:	2aff      	cmp	r2, #255	; 0xff
 8013c58:	bf85      	ittet	hi
 8013c5a:	238a      	movhi	r3, #138	; 0x8a
 8013c5c:	6003      	strhi	r3, [r0, #0]
 8013c5e:	700a      	strbls	r2, [r1, #0]
 8013c60:	f04f 30ff 	movhi.w	r0, #4294967295
 8013c64:	bf98      	it	ls
 8013c66:	2001      	movls	r0, #1
 8013c68:	4770      	bx	lr
 8013c6a:	4608      	mov	r0, r1
 8013c6c:	4770      	bx	lr

08013c6e <_malloc_usable_size_r>:
 8013c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c72:	1f18      	subs	r0, r3, #4
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	bfbc      	itt	lt
 8013c78:	580b      	ldrlt	r3, [r1, r0]
 8013c7a:	18c0      	addlt	r0, r0, r3
 8013c7c:	4770      	bx	lr
	...

08013c80 <_init>:
 8013c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c82:	bf00      	nop
 8013c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c86:	bc08      	pop	{r3}
 8013c88:	469e      	mov	lr, r3
 8013c8a:	4770      	bx	lr

08013c8c <_fini>:
 8013c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c8e:	bf00      	nop
 8013c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c92:	bc08      	pop	{r3}
 8013c94:	469e      	mov	lr, r3
 8013c96:	4770      	bx	lr
