
TrabajoSCF_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018118  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000211c  080182a8  080182a8  000282a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3c4  0801a3c4  000302e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3c4  0801a3c4  0002a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3cc  0801a3cc  000302e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3cc  0801a3cc  0002a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3d0  0801a3d0  0002a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0801a3d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  200002e0  0801a6b4  000302e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004fec  0801a6b4  00034fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 13 .debug_info   000336ed  00000000  00000000  00030353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d50  00000000  00000000  00063a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002aa0  00000000  00000000  0006a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002121  00000000  00000000  0006d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000969e  00000000  00000000  0006f351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032c69  00000000  00000000  000789ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e89e  00000000  00000000  000ab658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cc34  00000000  00000000  001b9ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c6b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018290 	.word	0x08018290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	08018290 	.word	0x08018290

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
extern UART_HandleTypeDef hDiscoUart;
#endif /* TERMINAL_USE */

static  uint8_t  IP_Addr[4];

int _write(int file, char *ptr, int len){
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffc9 	bl	8000ff0 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
	}
	return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f002 fb55 	bl	800372a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f8ea 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fb10 	bl	80016a8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001088:	f000 f94a 	bl	8001320 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108c:	f000 f980 	bl	8001390 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001090:	f000 f9bc 	bl	800140c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001094:	f000 fa3c 	bl	8001510 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001098:	f000 fa78 	bl	800158c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109c:	f000 faa6 	bl	80015ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a0:	f000 fad4 	bl	800164c <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80010a4:	f000 f9d8 	bl	8001458 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  #if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <main+0x160>)
 80010aa:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <main+0x164>)
 80010ac:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <main+0x160>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <main+0x160>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <main+0x160>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <main+0x160>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <main+0x160>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <main+0x160>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <main+0x160>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <main+0x160>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <main+0x160>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 80010e6:	493c      	ldr	r1, [pc, #240]	; (80011d8 <main+0x160>)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f009 f9d9 	bl	800a4a0 <BSP_COM_Init>

  #endif /* TERMINAL_USE */
  BSP_TSENSOR_Init(); // Inicializamos temperatura
 80010ee:	f009 fc31 	bl	800a954 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init(); // Inicializamos humedad
 80010f2:	f009 fc01 	bl	800a8f8 <BSP_HSENSOR_Init>
  printf("****** Sistemas Ciberfisicos ****** \n\r");
 80010f6:	483a      	ldr	r0, [pc, #232]	; (80011e0 <main+0x168>)
 80010f8:	f013 fb72 	bl	80147e0 <iprintf>

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000); 			/* TransmisiÃ³n de mensajes por UART */
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	2231      	movs	r2, #49	; 0x31
 8001102:	4938      	ldr	r1, [pc, #224]	; (80011e4 <main+0x16c>)
 8001104:	4838      	ldr	r0, [pc, #224]	; (80011e8 <main+0x170>)
 8001106:	f007 fba4 	bl	8008852 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	2231      	movs	r2, #49	; 0x31
 8001110:	4936      	ldr	r1, [pc, #216]	; (80011ec <main+0x174>)
 8001112:	4835      	ldr	r0, [pc, #212]	; (80011e8 <main+0x170>)
 8001114:	f007 fb9d 	bl	8008852 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2233      	movs	r2, #51	; 0x33
 800111e:	4934      	ldr	r1, [pc, #208]	; (80011f0 <main+0x178>)
 8001120:	4831      	ldr	r0, [pc, #196]	; (80011e8 <main+0x170>)
 8001122:	f007 fb96 	bl	8008852 <HAL_UART_Transmit>


  iniAcc = BSP_ACCELERO_Init();									/* InicializaciÃ³n del acelerÃ³metro */
 8001126:	f009 fb77 	bl	800a818 <BSP_ACCELERO_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <main+0x17c>)
 8001130:	701a      	strb	r2, [r3, #0]
  LSM6DSL_AccInt_Drdy();											/* ConfiguraciÃ³n del acelerÃ³metro*/
 8001132:	f000 fc73 	bl	8001a1c <LSM6DSL_AccInt_Drdy>
  BSP_ACCELERO_LowPower(0);										/* Deshabilitado del modo de bajo consumo*/
 8001136:	2000      	movs	r0, #0
 8001138:	f009 fbac 	bl	800a894 <BSP_ACCELERO_LowPower>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800113c:	f00f f8a4 	bl	8010288 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (128, sizeof(uintptr_t), &print_queue_attributes);
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <main+0x180>)
 8001142:	2104      	movs	r1, #4
 8001144:	2080      	movs	r0, #128	; 0x80
 8001146:	f00f fa87 	bl	8010658 <osMessageQueueNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a2b      	ldr	r2, [pc, #172]	; (80011fc <main+0x184>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(char), &receive_queue_attributes);
 8001150:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <main+0x188>)
 8001152:	2101      	movs	r1, #1
 8001154:	2003      	movs	r0, #3
 8001156:	f00f fa7f 	bl	8010658 <osMessageQueueNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <main+0x18c>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of receive_wifi_queue */
  receive_wifi_queueHandle = osMessageQueueNew (31, sizeof(char), &receive_wifi_queue_attributes);
 8001160:	4a29      	ldr	r2, [pc, #164]	; (8001208 <main+0x190>)
 8001162:	2101      	movs	r1, #1
 8001164:	201f      	movs	r0, #31
 8001166:	f00f fa77 	bl	8010658 <osMessageQueueNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <main+0x194>)
 800116e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <main+0x198>)
 8001172:	2100      	movs	r1, #0
 8001174:	4827      	ldr	r0, [pc, #156]	; (8001214 <main+0x19c>)
 8001176:	f00f f8d1 	bl	801031c <osThreadNew>
 800117a:	4603      	mov	r3, r0
 800117c:	4a26      	ldr	r2, [pc, #152]	; (8001218 <main+0x1a0>)
 800117e:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <main+0x1a4>)
 8001182:	2100      	movs	r1, #0
 8001184:	4826      	ldr	r0, [pc, #152]	; (8001220 <main+0x1a8>)
 8001186:	f00f f8c9 	bl	801031c <osThreadNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a25      	ldr	r2, [pc, #148]	; (8001224 <main+0x1ac>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of acel_task */
  acel_taskHandle = osThreadNew(acel_task_function, NULL, &acel_task_attributes);
 8001190:	4a25      	ldr	r2, [pc, #148]	; (8001228 <main+0x1b0>)
 8001192:	2100      	movs	r1, #0
 8001194:	4825      	ldr	r0, [pc, #148]	; (800122c <main+0x1b4>)
 8001196:	f00f f8c1 	bl	801031c <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <main+0x1b8>)
 800119e:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(print_task_func, NULL, &print_task_attributes);
 80011a0:	4a24      	ldr	r2, [pc, #144]	; (8001234 <main+0x1bc>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4824      	ldr	r0, [pc, #144]	; (8001238 <main+0x1c0>)
 80011a6:	f00f f8b9 	bl	801031c <osThreadNew>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a23      	ldr	r2, [pc, #140]	; (800123c <main+0x1c4>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <main+0x1c8>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4823      	ldr	r0, [pc, #140]	; (8001244 <main+0x1cc>)
 80011b6:	f00f f8b1 	bl	801031c <osThreadNew>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a22      	ldr	r2, [pc, #136]	; (8001248 <main+0x1d0>)
 80011be:	6013      	str	r3, [r2, #0]

  /* creation of wifi_set */
  wifi_setHandle = osThreadNew(wifi_set_func, NULL, &wifi_set_attributes);
 80011c0:	4a22      	ldr	r2, [pc, #136]	; (800124c <main+0x1d4>)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <main+0x1d8>)
 80011c6:	f00f f8a9 	bl	801031c <osThreadNew>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <main+0x1dc>)
 80011ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011d0:	f00f f87e 	bl	80102d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <main+0x15c>
 80011d6:	bf00      	nop
 80011d8:	20001034 	.word	0x20001034
 80011dc:	40013800 	.word	0x40013800
 80011e0:	0801831c 	.word	0x0801831c
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000494 	.word	0x20000494
 80011ec:	20000034 	.word	0x20000034
 80011f0:	20000068 	.word	0x20000068
 80011f4:	20000b20 	.word	0x20000b20
 80011f8:	08019be4 	.word	0x08019be4
 80011fc:	20000ac8 	.word	0x20000ac8
 8001200:	08019bfc 	.word	0x08019bfc
 8001204:	20000acc 	.word	0x20000acc
 8001208:	08019c14 	.word	0x08019c14
 800120c:	20000ad0 	.word	0x20000ad0
 8001210:	08019b0c 	.word	0x08019b0c
 8001214:	08001df5 	.word	0x08001df5
 8001218:	20000ab0 	.word	0x20000ab0
 800121c:	08019b30 	.word	0x08019b30
 8001220:	08002115 	.word	0x08002115
 8001224:	20000ab4 	.word	0x20000ab4
 8001228:	08019b54 	.word	0x08019b54
 800122c:	0800215d 	.word	0x0800215d
 8001230:	20000ab8 	.word	0x20000ab8
 8001234:	08019b78 	.word	0x08019b78
 8001238:	08002411 	.word	0x08002411
 800123c:	20000abc 	.word	0x20000abc
 8001240:	08019b9c 	.word	0x08019b9c
 8001244:	08002485 	.word	0x08002485
 8001248:	20000ac0 	.word	0x20000ac0
 800124c:	08019bc0 	.word	0x08019bc0
 8001250:	0800276d 	.word	0x0800276d
 8001254:	20000ac4 	.word	0x20000ac4

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b096      	sub	sp, #88	; 0x58
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2244      	movs	r2, #68	; 0x44
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f013 fc7e 	bl	8014b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127e:	f004 f851 	bl	8005324 <HAL_PWREx_ControlVoltageScaling>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001288:	f001 fba0 	bl	80029cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800128c:	f004 f82c 	bl	80052e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <SystemClock_Config+0xc4>)
 8001292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001296:	4a21      	ldr	r2, [pc, #132]	; (800131c <SystemClock_Config+0xc4>)
 8001298:	f023 0318 	bic.w	r3, r3, #24
 800129c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80012a0:	231c      	movs	r3, #28
 80012a2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ac:	2301      	movs	r3, #1
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012bc:	2301      	movs	r3, #1
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012c4:	2328      	movs	r3, #40	; 0x28
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 f945 	bl	8005568 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012e4:	f001 fb72 	bl	80029cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2303      	movs	r3, #3
 80012ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	2104      	movs	r1, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f004 fd0d 	bl	8005d20 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800130c:	f001 fb5e 	bl	80029cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001310:	f005 fa14 	bl	800673c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001314:	bf00      	nop
 8001316:	3758      	adds	r7, #88	; 0x58
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000

08001320 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <MX_DFSDM1_Init+0x6c>)
 8001328:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_DFSDM1_Init+0x68>)
 800132c:	2201      	movs	r2, #1
 800132e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001338:	2202      	movs	r2, #2
 800133a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_DFSDM1_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_DFSDM1_Init+0x68>)
 800134a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001358:	2204      	movs	r2, #4
 800135a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_DFSDM1_Init+0x68>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001364:	2201      	movs	r2, #1
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_DFSDM1_Init+0x68>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_DFSDM1_Init+0x68>)
 8001376:	f002 fbb5 	bl	8003ae4 <HAL_DFSDM_ChannelInit>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001380:	f001 fb24 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000033c 	.word	0x2000033c
 800138c:	40016020 	.word	0x40016020

08001390 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_I2C2_Init+0x74>)
 8001396:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <MX_I2C2_Init+0x78>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_I2C2_Init+0x74>)
 800139c:	f640 6214 	movw	r2, #3604	; 0xe14
 80013a0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_I2C2_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_I2C2_Init+0x74>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_I2C2_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_I2C2_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_I2C2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_I2C2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_I2C2_Init+0x74>)
 80013ce:	f002 fffb 	bl	80043c8 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f001 faf8 	bl	80029cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013dc:	2100      	movs	r1, #0
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <MX_I2C2_Init+0x74>)
 80013e0:	f003 fda2 	bl	8004f28 <HAL_I2CEx_ConfigAnalogFilter>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80013ea:	f001 faef 	bl	80029cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_I2C2_Init+0x74>)
 80013f2:	f003 fde4 	bl	8004fbe <HAL_I2CEx_ConfigDigitalFilter>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80013fc:	f001 fae6 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000374 	.word	0x20000374
 8001408:	40005800 	.word	0x40005800

0800140c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_QUADSPI_Init+0x44>)
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <MX_QUADSPI_Init+0x48>)
 8001414:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_QUADSPI_Init+0x44>)
 8001418:	2202      	movs	r2, #2
 800141a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_QUADSPI_Init+0x44>)
 800141e:	2204      	movs	r2, #4
 8001420:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_QUADSPI_Init+0x44>)
 8001424:	2210      	movs	r2, #16
 8001426:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_QUADSPI_Init+0x44>)
 800142a:	2217      	movs	r2, #23
 800142c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_QUADSPI_Init+0x44>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_QUADSPI_Init+0x44>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_QUADSPI_Init+0x44>)
 800143c:	f003 ffd8 	bl	80053f0 <HAL_QSPI_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001446:	f001 fac1 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200003c8 	.word	0x200003c8
 8001454:	a0001000 	.word	0xa0001000

08001458 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800146c:	2300      	movs	r3, #0
 800146e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <MX_RTC_Init+0xb0>)
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <MX_RTC_Init+0xb4>)
 8001474:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <MX_RTC_Init+0xb0>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <MX_RTC_Init+0xb0>)
 800147e:	227f      	movs	r2, #127	; 0x7f
 8001480:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_RTC_Init+0xb0>)
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_RTC_Init+0xb0>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_RTC_Init+0xb0>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_RTC_Init+0xb0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_RTC_Init+0xb0>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014a0:	4819      	ldr	r0, [pc, #100]	; (8001508 <MX_RTC_Init+0xb0>)
 80014a2:	f005 fb2d 	bl	8006b00 <HAL_RTC_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80014ac:	f001 fa8e 	bl	80029cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80014b0:	2312      	movs	r3, #18
 80014b2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x49;
 80014b4:	2349      	movs	r3, #73	; 0x49
 80014b6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 80014b8:	2350      	movs	r3, #80	; 0x50
 80014ba:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	480f      	ldr	r0, [pc, #60]	; (8001508 <MX_RTC_Init+0xb0>)
 80014cc:	f005 fba0 	bl	8006c10 <HAL_RTC_SetTime>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80014d6:	f001 fa79 	bl	80029cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80014da:	2303      	movs	r3, #3
 80014dc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80014de:	2301      	movs	r3, #1
 80014e0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 80014e2:	2303      	movs	r3, #3
 80014e4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80014e6:	2324      	movs	r3, #36	; 0x24
 80014e8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_RTC_Init+0xb0>)
 80014f2:	f005 fc86 	bl	8006e02 <HAL_RTC_SetDate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80014fc:	f001 fa66 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000040c 	.word	0x2000040c
 800150c:	40002800 	.word	0x40002800

08001510 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_SPI3_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_SPI3_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_SPI3_Init+0x74>)
 800151c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001520:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_SPI3_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_SPI3_Init+0x74>)
 800152a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800152e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_SPI3_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_SPI3_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_SPI3_Init+0x74>)
 800153e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001542:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_SPI3_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_SPI3_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_SPI3_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_SPI3_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_SPI3_Init+0x74>)
 800155e:	2207      	movs	r2, #7
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_SPI3_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_SPI3_Init+0x74>)
 800156a:	2208      	movs	r2, #8
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_SPI3_Init+0x74>)
 8001570:	f005 fdec 	bl	800714c <HAL_SPI_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800157a:	f001 fa27 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000430 	.word	0x20000430
 8001588:	40003c00 	.word	0x40003c00

0800158c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <MX_USART1_UART_Init+0x5c>)
 8001594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015d0:	f007 f8f1 	bl	80087b6 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015da:	f001 f9f7 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000494 	.word	0x20000494
 80015e8:	40013800 	.word	0x40013800

080015ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART3_UART_Init+0x58>)
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <MX_USART3_UART_Init+0x5c>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_USART3_UART_Init+0x58>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USART3_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USART3_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USART3_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USART3_UART_Init+0x58>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USART3_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USART3_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USART3_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USART3_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USART3_UART_Init+0x58>)
 8001630:	f007 f8c1 	bl	80087b6 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800163a:	f001 f9c7 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000051c 	.word	0x2000051c
 8001648:	40004800 	.word	0x40004800

0800164c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001652:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001656:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800165a:	2206      	movs	r2, #6
 800165c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001660:	2202      	movs	r2, #2
 8001662:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001666:	2202      	movs	r2, #2
 8001668:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001690:	f003 fce1 	bl	8005056 <HAL_PCD_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800169a:	f001 f997 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200005a4 	.word	0x200005a4

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016be:	4bbd      	ldr	r3, [pc, #756]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4abc      	ldr	r2, [pc, #752]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4bba      	ldr	r3, [pc, #744]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4bb7      	ldr	r3, [pc, #732]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4ab6      	ldr	r2, [pc, #728]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4bb4      	ldr	r3, [pc, #720]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4bb1      	ldr	r3, [pc, #708]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4ab0      	ldr	r2, [pc, #704]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4bae      	ldr	r3, [pc, #696]	; (80019b4 <MX_GPIO_Init+0x30c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4bab      	ldr	r3, [pc, #684]	; (80019b4 <MX_GPIO_Init+0x30c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4aaa      	ldr	r2, [pc, #680]	; (80019b4 <MX_GPIO_Init+0x30c>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4ba8      	ldr	r3, [pc, #672]	; (80019b4 <MX_GPIO_Init+0x30c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	4ba5      	ldr	r3, [pc, #660]	; (80019b4 <MX_GPIO_Init+0x30c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4aa4      	ldr	r2, [pc, #656]	; (80019b4 <MX_GPIO_Init+0x30c>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4ba2      	ldr	r3, [pc, #648]	; (80019b4 <MX_GPIO_Init+0x30c>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 718a 	mov.w	r1, #276	; 0x114
 800173c:	489e      	ldr	r0, [pc, #632]	; (80019b8 <MX_GPIO_Init+0x310>)
 800173e:	f002 fe13 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f248 1104 	movw	r1, #33028	; 0x8104
 8001748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174c:	f002 fe0c 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001750:	2200      	movs	r2, #0
 8001752:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001756:	4899      	ldr	r0, [pc, #612]	; (80019bc <MX_GPIO_Init+0x314>)
 8001758:	f002 fe06 	bl	8004368 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001762:	4897      	ldr	r0, [pc, #604]	; (80019c0 <MX_GPIO_Init+0x318>)
 8001764:	f002 fe00 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176e:	4894      	ldr	r0, [pc, #592]	; (80019c0 <MX_GPIO_Init+0x318>)
 8001770:	f002 fdfa 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 7110 	mov.w	r1, #576	; 0x240
 800177a:	4892      	ldr	r0, [pc, #584]	; (80019c4 <MX_GPIO_Init+0x31c>)
 800177c:	f002 fdf4 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2120      	movs	r1, #32
 8001784:	488d      	ldr	r0, [pc, #564]	; (80019bc <MX_GPIO_Init+0x314>)
 8001786:	f002 fdef 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2101      	movs	r1, #1
 800178e:	488a      	ldr	r0, [pc, #552]	; (80019b8 <MX_GPIO_Init+0x310>)
 8001790:	f002 fdea 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001794:	f240 1315 	movw	r3, #277	; 0x115
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4882      	ldr	r0, [pc, #520]	; (80019b8 <MX_GPIO_Init+0x310>)
 80017ae:	f002 fb25 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80017b2:	236a      	movs	r3, #106	; 0x6a
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	487c      	ldr	r0, [pc, #496]	; (80019b8 <MX_GPIO_Init+0x310>)
 80017c8:	f002 fb18 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80017cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4878      	ldr	r0, [pc, #480]	; (80019c4 <MX_GPIO_Init+0x31c>)
 80017e4:	f002 fb0a 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80017e8:	233f      	movs	r3, #63	; 0x3f
 80017ea:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017ec:	230b      	movs	r3, #11
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4872      	ldr	r0, [pc, #456]	; (80019c4 <MX_GPIO_Init+0x31c>)
 80017fc:	f002 fafe 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001800:	2303      	movs	r3, #3
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001810:	2308      	movs	r3, #8
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f002 faed 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001822:	f248 1304 	movw	r3, #33028	; 0x8104
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f002 fadd 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001842:	2308      	movs	r3, #8
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001852:	2301      	movs	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f002 facc 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001864:	2310      	movs	r3, #16
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001868:	230b      	movs	r3, #11
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f002 fabf 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800187e:	23e0      	movs	r3, #224	; 0xe0
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f002 faae 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018a0:	2301      	movs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4841      	ldr	r0, [pc, #260]	; (80019bc <MX_GPIO_Init+0x314>)
 80018b6:	f002 faa1 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80018ba:	2302      	movs	r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018be:	230b      	movs	r3, #11
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	483b      	ldr	r0, [pc, #236]	; (80019bc <MX_GPIO_Init+0x314>)
 80018ce:	f002 fa95 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80018d2:	f24f 0334 	movw	r3, #61492	; 0xf034
 80018d6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4834      	ldr	r0, [pc, #208]	; (80019bc <MX_GPIO_Init+0x314>)
 80018ec:	f002 fa86 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80018f0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80018f4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	482e      	ldr	r0, [pc, #184]	; (80019c0 <MX_GPIO_Init+0x318>)
 8001908:	f002 fa78 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800190c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <MX_GPIO_Init+0x318>)
 8001926:	f002 fa69 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800192a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4820      	ldr	r0, [pc, #128]	; (80019c4 <MX_GPIO_Init+0x31c>)
 8001944:	f002 fa5a 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001948:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4819      	ldr	r0, [pc, #100]	; (80019c4 <MX_GPIO_Init+0x31c>)
 8001960:	f002 fa4c 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001974:	2305      	movs	r3, #5
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <MX_GPIO_Init+0x318>)
 8001980:	f002 fa3c 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001984:	2378      	movs	r3, #120	; 0x78
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001994:	2307      	movs	r3, #7
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <MX_GPIO_Init+0x318>)
 80019a0:	f002 fa2c 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80019a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019aa:	2312      	movs	r3, #18
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e00a      	b.n	80019c8 <MX_GPIO_Init+0x320>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48000c00 	.word	0x48000c00
 80019c4:	48000800 	.word	0x48000800
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ce:	2304      	movs	r3, #4
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	480f      	ldr	r0, [pc, #60]	; (8001a18 <MX_GPIO_Init+0x370>)
 80019da:	f002 fa0f 	bl	8003dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	2007      	movs	r0, #7
 80019e4:	f002 f839 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019e8:	2007      	movs	r0, #7
 80019ea:	f002 f852 	bl	8003a92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2105      	movs	r1, #5
 80019f2:	2017      	movs	r0, #23
 80019f4:	f002 f831 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f8:	2017      	movs	r0, #23
 80019fa:	f002 f84a 	bl	8003a92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2105      	movs	r1, #5
 8001a02:	2028      	movs	r0, #40	; 0x28
 8001a04:	f002 f829 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a08:	2028      	movs	r0, #40	; 0x28
 8001a0a:	f002 f842 	bl	8003a92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	48000400 	.word	0x48000400

08001a1c <LSM6DSL_AccInt_Drdy>:

/* USER CODE BEGIN 4 */
void LSM6DSL_AccInt_Drdy()						/* InicializaciÃ³n del acelerÃ³metro */
	{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

		uint8_t ctrl = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
		uint8_t tmp;
		/* Read DRDY_PULSE_CFG_G value  (LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);*/
		drdyPulsedCfg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);     /*Buscar en archivo lsm6dsl.h*/
 8001a26:	210b      	movs	r1, #11
 8001a28:	20d4      	movs	r0, #212	; 0xd4
 8001a2a:	f008 feb9 	bl	800a7a0 <SENSOR_IO_Read>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <LSM6DSL_AccInt_Drdy+0x98>)
 8001a34:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
		drdyPulsedCfg |= 0b10000000;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <LSM6DSL_AccInt_Drdy+0x98>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <LSM6DSL_AccInt_Drdy+0x98>)
 8001a42:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, drdyPulsedCfg);
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <LSM6DSL_AccInt_Drdy+0x98>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	210b      	movs	r1, #11
 8001a4c:	20d4      	movs	r0, #212	; 0xd4
 8001a4e:	f008 fe8d 	bl	800a76c <SENSOR_IO_Write>

		/* Read INT1_CTRL value */
		ctrlDrdy = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8001a52:	210d      	movs	r1, #13
 8001a54:	20d4      	movs	r0, #212	; 0xd4
 8001a56:	f008 fea3 	bl	800a7a0 <SENSOR_IO_Read>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <LSM6DSL_AccInt_Drdy+0x9c>)
 8001a60:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
	    ctrlDrdy |= 0b00000011;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <LSM6DSL_AccInt_Drdy+0x9c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f043 0303 	orr.w	r3, r3, #3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <LSM6DSL_AccInt_Drdy+0x9c>)
 8001a6e:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, ctrlDrdy);
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <LSM6DSL_AccInt_Drdy+0x9c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	210d      	movs	r1, #13
 8001a78:	20d4      	movs	r0, #212	; 0xd4
 8001a7a:	f008 fe77 	bl	800a76c <SENSOR_IO_Write>

		/* Read MASTER_CONFIG value */
		ctrlMaster = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8001a7e:	211a      	movs	r1, #26
 8001a80:	20d4      	movs	r0, #212	; 0xd4
 8001a82:	f008 fe8d 	bl	800a7a0 <SENSOR_IO_Read>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LSM6DSL_AccInt_Drdy+0xa0>)
 8001a8c:	701a      	strb	r2, [r3, #0]

		ctrlMaster |= 0b00000011;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <LSM6DSL_AccInt_Drdy+0xa0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	f043 0303 	orr.w	r3, r3, #3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <LSM6DSL_AccInt_Drdy+0xa0>)
 8001a9a:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, ctrlMaster);
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <LSM6DSL_AccInt_Drdy+0xa0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	211a      	movs	r1, #26
 8001aa4:	20d4      	movs	r0, #212	; 0xd4
 8001aa6:	f008 fe61 	bl	800a76c <SENSOR_IO_Write>
	}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000ba0 	.word	0x20000ba0
 8001ab8:	20000ba1 	.word	0x20000ba1
 8001abc:	20000ba2 	.word	0x20000ba2

08001ac0 <wifi_start>:

static int wifi_start(void)
{
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af04      	add	r7, sp, #16
  printf("Wifi Start Function. \n\r");
 8001ac6:	4819      	ldr	r0, [pc, #100]	; (8001b2c <wifi_start+0x6c>)
 8001ac8:	f012 fe8a 	bl	80147e0 <iprintf>
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001acc:	f00a fd24 	bl	800c518 <WIFI_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d123      	bne.n	8001b1e <wifi_start+0x5e>
  {
    printf("ES-WIFI Initialized.\n\r");
 8001ad6:	4816      	ldr	r0, [pc, #88]	; (8001b30 <wifi_start+0x70>)
 8001ad8:	f012 fe82 	bl	80147e0 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00a fd68 	bl	800c5b4 <WIFI_GetMAC_Address>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d113      	bne.n	8001b12 <wifi_start+0x52>
    {
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
               MAC_Addr[0],
 8001aea:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001aec:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001aee:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001af0:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001af2:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001af4:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001af6:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001af8:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001afa:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001afc:	9102      	str	r1, [sp, #8]
 8001afe:	9201      	str	r2, [sp, #4]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	462b      	mov	r3, r5
 8001b04:	4622      	mov	r2, r4
 8001b06:	4601      	mov	r1, r0
 8001b08:	480a      	ldr	r0, [pc, #40]	; (8001b34 <wifi_start+0x74>)
 8001b0a:	f012 fe69 	bl	80147e0 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e007      	b.n	8001b22 <wifi_start+0x62>
      printf("> ERROR : CANNOT get MAC address.\n\r");
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <wifi_start+0x78>)
 8001b14:	f012 fe64 	bl	80147e0 <iprintf>
      return -1;
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	e001      	b.n	8001b22 <wifi_start+0x62>
    return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	08018344 	.word	0x08018344
 8001b30:	0801835c 	.word	0x0801835c
 8001b34:	08018374 	.word	0x08018374
 8001b38:	080183b4 	.word	0x080183b4

08001b3c <wifi_connect>:

int wifi_connect(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af02      	add	r7, sp, #8
    uint8_t MAX_tries = 3;
 8001b42:	2303      	movs	r3, #3
 8001b44:	717b      	strb	r3, [r7, #5]
    uint8_t return_value=-1;
 8001b46:	23ff      	movs	r3, #255	; 0xff
 8001b48:	71fb      	strb	r3, [r7, #7]
    uint8_t try=1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001b4e:	e044      	b.n	8001bda <wifi_connect+0x9e>
	  printf("Wifi connect function.. try %d/%d\n\r", try,MAX_tries);
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	797a      	ldrb	r2, [r7, #5]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4827      	ldr	r0, [pc, #156]	; (8001bf4 <wifi_connect+0xb8>)
 8001b58:	f012 fe42 	bl	80147e0 <iprintf>
	  wifi_start();
 8001b5c:	f7ff ffb0 	bl	8001ac0 <wifi_start>
	  printf("Connecting to %s , %s.\n\r",SSID,PASSWORD);
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <wifi_connect+0xbc>)
 8001b62:	4926      	ldr	r1, [pc, #152]	; (8001bfc <wifi_connect+0xc0>)
 8001b64:	4826      	ldr	r0, [pc, #152]	; (8001c00 <wifi_connect+0xc4>)
 8001b66:	f012 fe3b 	bl	80147e0 <iprintf>
	  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <wifi_connect+0xbc>)
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <wifi_connect+0xc0>)
 8001b70:	f00a fcfe 	bl	800c570 <WIFI_Connect>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d127      	bne.n	8001bca <wifi_connect+0x8e>
	  {
		if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001b7a:	4822      	ldr	r0, [pc, #136]	; (8001c04 <wifi_connect+0xc8>)
 8001b7c:	f00a fd30 	bl	800c5e0 <WIFI_GetIP_Address>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11b      	bne.n	8001bbe <wifi_connect+0x82>
		{
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
				   IP_Addr[0],
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <wifi_connect+0xc8>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001b8a:	4619      	mov	r1, r3
				   IP_Addr[1],
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <wifi_connect+0xc8>)
 8001b8e:	785b      	ldrb	r3, [r3, #1]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001b90:	461a      	mov	r2, r3
				   IP_Addr[2],
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <wifi_connect+0xc8>)
 8001b94:	789b      	ldrb	r3, [r3, #2]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001b96:	4618      	mov	r0, r3
				   IP_Addr[3]);
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <wifi_connect+0xc8>)
 8001b9a:	78db      	ldrb	r3, [r3, #3]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4819      	ldr	r0, [pc, #100]	; (8001c08 <wifi_connect+0xcc>)
 8001ba2:	f012 fe1d 	bl	80147e0 <iprintf>
		  return_value=0; // CORRECTO
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
		  try=MAX_tries+1;
 8001baa:	797b      	ldrb	r3, [r7, #5]
 8001bac:	3301      	adds	r3, #1
 8001bae:	71bb      	strb	r3, [r7, #6]
		  //osThreadFlagsSet(wifiStartHandle, 0x0001U);

		  // Activa la tarea de aceleracion
		  osThreadFlagsSet(acel_taskHandle, 0x000002U);
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <wifi_connect+0xd0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00e fc64 	bl	8010484 <osThreadFlagsSet>
 8001bbc:	e00a      	b.n	8001bd4 <wifi_connect+0x98>
		}
		else
		{
		  printf("ERROR : es-wifi module CANNOT get IP address\n\r");
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <wifi_connect+0xd4>)
 8001bc0:	f012 fe0e 	bl	80147e0 <iprintf>
		  return_value= -1;
 8001bc4:	23ff      	movs	r3, #255	; 0xff
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	e004      	b.n	8001bd4 <wifi_connect+0x98>
		}
	  }
	  else
	  {
		  printf("ERROR : es-wifi module NOT connected\n\r");
 8001bca:	4812      	ldr	r0, [pc, #72]	; (8001c14 <wifi_connect+0xd8>)
 8001bcc:	f012 fe08 	bl	80147e0 <iprintf>
		  return_value= -1;
 8001bd0:	23ff      	movs	r3, #255	; 0xff
 8001bd2:	71fb      	strb	r3, [r7, #7]
	  }
	  try=try+1;
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001bda:	79ba      	ldrb	r2, [r7, #6]
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d9b6      	bls.n	8001b50 <wifi_connect+0x14>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1b3      	bne.n	8001b50 <wifi_connect+0x14>
	}
  return return_value;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	080183d8 	.word	0x080183d8
 8001bf8:	2000031c 	.word	0x2000031c
 8001bfc:	200002fc 	.word	0x200002fc
 8001c00:	080183fc 	.word	0x080183fc
 8001c04:	20000ad4 	.word	0x20000ad4
 8001c08:	08018418 	.word	0x08018418
 8001c0c:	20000ab8 	.word	0x20000ab8
 8001c10:	08018454 	.word	0x08018454
 8001c14:	08018484 	.word	0x08018484

08001c18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_EXTI_Callback+0x18>
 8001c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_EXTI_Callback+0x1e>
    case (GPIO_PIN_11):
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
      break;
    default:
    {
      break;
 8001c2e:	e009      	b.n	8001c44 <HAL_GPIO_EXTI_Callback+0x2c>
      SPI_WIFI_ISR();
 8001c30:	f00a fc62 	bl	800c4f8 <SPI_WIFI_ISR>
      break;
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_EXTI_Callback+0x2c>
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x34>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00e fc21 	bl	8010484 <osThreadFlagsSet>
      break;
 8001c42:	bf00      	nop
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000ab8 	.word	0x20000ab8

08001c50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	char recibido = (char)rec_data;
 8001c58:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_UART_RxCpltCallback+0x178>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	73fb      	strb	r3, [r7, #15]

	if (config_state == 0) {
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_UART_RxCpltCallback+0x17c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d154      	bne.n	8001d10 <HAL_UART_RxCpltCallback+0xc0>
		osStatus_t estado;
		if (huart == &huart1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a59      	ldr	r2, [pc, #356]	; (8001dd0 <HAL_UART_RxCpltCallback+0x180>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	f040 80a7 	bne.w	8001dbe <HAL_UART_RxCpltCallback+0x16e>
		{
			printf("Recibido un caracter: %c\r\n", recibido);
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4857      	ldr	r0, [pc, #348]	; (8001dd4 <HAL_UART_RxCpltCallback+0x184>)
 8001c76:	f012 fdb3 	bl	80147e0 <iprintf>
			cont++;
 8001c7a:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001c84:	701a      	strb	r2, [r3, #0]
			if (cont > 3){
 8001c86:	4b54      	ldr	r3, [pc, #336]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d909      	bls.n	8001ca2 <HAL_UART_RxCpltCallback+0x52>
				osThreadFlagsSet(RTC_setHandle, 0x0002U);
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_UART_RxCpltCallback+0x18c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2102      	movs	r1, #2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00e fbf5 	bl	8010484 <osThreadFlagsSet>
				cont = 0;
 8001c9a:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &rec_data, sizeof(rec_data));
			}
		}

	}
}
 8001ca0:	e08d      	b.n	8001dbe <HAL_UART_RxCpltCallback+0x16e>
				estado = osMessageQueuePut(receive_queueHandle,&recibido, 0, 0);
 8001ca2:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <HAL_UART_RxCpltCallback+0x190>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f107 010f 	add.w	r1, r7, #15
 8001caa:	2300      	movs	r3, #0
 8001cac:	2200      	movs	r2, #0
 8001cae:	f00e fd47 	bl	8010740 <osMessageQueuePut>
 8001cb2:	6138      	str	r0, [r7, #16]
				if (estado == osOK){
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d112      	bne.n	8001ce0 <HAL_UART_RxCpltCallback+0x90>
					printf("Caracter anadido a la cola de recepcion\r\n");
 8001cba:	484a      	ldr	r0, [pc, #296]	; (8001de4 <HAL_UART_RxCpltCallback+0x194>)
 8001cbc:	f012 fdf6 	bl	80148ac <puts>
					if (recibido == '\n' || recibido == '\r'){
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d002      	beq.n	8001ccc <HAL_UART_RxCpltCallback+0x7c>
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b0d      	cmp	r3, #13
 8001cca:	d11b      	bne.n	8001d04 <HAL_UART_RxCpltCallback+0xb4>
						osThreadFlagsSet(RTC_setHandle, 0x0001U);
 8001ccc:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_UART_RxCpltCallback+0x18c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00e fbd6 	bl	8010484 <osThreadFlagsSet>
						cont = 0;
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e011      	b.n	8001d04 <HAL_UART_RxCpltCallback+0xb4>
				}else if (estado == osErrorTimeout){
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f113 0f02 	cmn.w	r3, #2
 8001ce6:	d106      	bne.n	8001cf6 <HAL_UART_RxCpltCallback+0xa6>
					osThreadFlagsSet(RTC_setHandle, 0x0002U);
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_UART_RxCpltCallback+0x18c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2102      	movs	r1, #2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00e fbc8 	bl	8010484 <osThreadFlagsSet>
 8001cf4:	e006      	b.n	8001d04 <HAL_UART_RxCpltCallback+0xb4>
				}else if (estado == osErrorParameter){
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f113 0f04 	cmn.w	r3, #4
 8001cfc:	d102      	bne.n	8001d04 <HAL_UART_RxCpltCallback+0xb4>
					printf("OsErrorParameter\r\n");
 8001cfe:	483a      	ldr	r0, [pc, #232]	; (8001de8 <HAL_UART_RxCpltCallback+0x198>)
 8001d00:	f012 fdd4 	bl	80148ac <puts>
				HAL_UART_Receive_IT(&huart1, &rec_data, sizeof(rec_data));
 8001d04:	2201      	movs	r2, #1
 8001d06:	4930      	ldr	r1, [pc, #192]	; (8001dc8 <HAL_UART_RxCpltCallback+0x178>)
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <HAL_UART_RxCpltCallback+0x180>)
 8001d0a:	f006 fe2d 	bl	8008968 <HAL_UART_Receive_IT>
}
 8001d0e:	e056      	b.n	8001dbe <HAL_UART_RxCpltCallback+0x16e>
	else if (config_state==1) {
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_UART_RxCpltCallback+0x17c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d152      	bne.n	8001dbe <HAL_UART_RxCpltCallback+0x16e>
		if (huart == &huart1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <HAL_UART_RxCpltCallback+0x180>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d14e      	bne.n	8001dbe <HAL_UART_RxCpltCallback+0x16e>
			printf("Recibido un caracter: %c\r\n", recibido);
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	4619      	mov	r1, r3
 8001d24:	482b      	ldr	r0, [pc, #172]	; (8001dd4 <HAL_UART_RxCpltCallback+0x184>)
 8001d26:	f012 fd5b 	bl	80147e0 <iprintf>
			cont++;
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001d34:	701a      	strb	r2, [r3, #0]
			if (cont > 30){
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b1e      	cmp	r3, #30
 8001d3c:	d909      	bls.n	8001d52 <HAL_UART_RxCpltCallback+0x102>
				osThreadFlagsSet(wifi_setHandle, 0x0002U);
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_UART_RxCpltCallback+0x19c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2102      	movs	r1, #2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00e fb9d 	bl	8010484 <osThreadFlagsSet>
				cont = 0;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
}
 8001d50:	e035      	b.n	8001dbe <HAL_UART_RxCpltCallback+0x16e>
				estado = osMessageQueuePut(receive_wifi_queueHandle,&recibido, 0, 0);
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f107 010f 	add.w	r1, r7, #15
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f00e fcef 	bl	8010740 <osMessageQueuePut>
 8001d62:	6178      	str	r0, [r7, #20]
				if (estado == osOK){
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d112      	bne.n	8001d90 <HAL_UART_RxCpltCallback+0x140>
					printf("Caracter anadido a la cola de recepcion\r\n");
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <HAL_UART_RxCpltCallback+0x194>)
 8001d6c:	f012 fd9e 	bl	80148ac <puts>
					if (recibido == '\n' || recibido == '\r'){
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d002      	beq.n	8001d7c <HAL_UART_RxCpltCallback+0x12c>
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b0d      	cmp	r3, #13
 8001d7a:	d11b      	bne.n	8001db4 <HAL_UART_RxCpltCallback+0x164>
						osThreadFlagsSet(wifi_setHandle, 0x0001U);
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_UART_RxCpltCallback+0x19c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00e fb7e 	bl	8010484 <osThreadFlagsSet>
						cont = 0;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_UART_RxCpltCallback+0x188>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e011      	b.n	8001db4 <HAL_UART_RxCpltCallback+0x164>
				}else if (estado == osErrorTimeout){
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f113 0f02 	cmn.w	r3, #2
 8001d96:	d106      	bne.n	8001da6 <HAL_UART_RxCpltCallback+0x156>
					osThreadFlagsSet(wifi_setHandle, 0x0002U);
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_UART_RxCpltCallback+0x19c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00e fb70 	bl	8010484 <osThreadFlagsSet>
 8001da4:	e006      	b.n	8001db4 <HAL_UART_RxCpltCallback+0x164>
				}else if (estado == osErrorParameter){
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f113 0f04 	cmn.w	r3, #4
 8001dac:	d102      	bne.n	8001db4 <HAL_UART_RxCpltCallback+0x164>
					printf("OsErrorParameter\r\n");
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <HAL_UART_RxCpltCallback+0x198>)
 8001db0:	f012 fd7c 	bl	80148ac <puts>
				HAL_UART_Receive_IT(&huart1, &rec_data, sizeof(rec_data));
 8001db4:	2201      	movs	r2, #1
 8001db6:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <HAL_UART_RxCpltCallback+0x178>)
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <HAL_UART_RxCpltCallback+0x180>)
 8001dba:	f006 fdd5 	bl	8008968 <HAL_UART_Receive_IT>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000bbc 	.word	0x20000bbc
 8001dcc:	20000bbe 	.word	0x20000bbe
 8001dd0:	20000494 	.word	0x20000494
 8001dd4:	080184ac 	.word	0x080184ac
 8001dd8:	20000bbd 	.word	0x20000bbd
 8001ddc:	20000ac0 	.word	0x20000ac0
 8001de0:	20000acc 	.word	0x20000acc
 8001de4:	080184c8 	.word	0x080184c8
 8001de8:	080184f4 	.word	0x080184f4
 8001dec:	20000ac4 	.word	0x20000ac4
 8001df0:	20000ad0 	.word	0x20000ad0

08001df4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f00e fc10 	bl	8010622 <osDelay>
 8001e02:	e7fb      	b.n	8001dfc <StartDefaultTask+0x8>

08001e04 <MQTTTask>:
* @retval None
*/


void MQTTTask(void)
{
 8001e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e08:	b0ea      	sub	sp, #424	; 0x1a8
 8001e0a:	af0a      	add	r7, sp, #40	; 0x28
const uint32_t ulMaxPublishCount = 5UL;
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
NetworkContext_t xNetworkContext = { 0 };
 8001e12:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
MQTTStatus_t xMQTTStatus;
TransportStatus_t xNetworkStatus;
float ftemp;
float fhum;
char payLoad[128];
char string_print [128] = "";
 8001e1c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001e20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	227c      	movs	r2, #124	; 0x7c
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f012 fe9a 	bl	8014b68 <memset>
char * string_print_puntero = string_print;
 8001e34:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001e38:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e3c:	f107 0214 	add.w	r2, r7, #20
 8001e40:	601a      	str	r2, [r3, #0]
 /* Attempt to connect to the MQTT broker. The socket is returned in
 * the network context structure. */
 xNetworkStatus = prvConnectToServer( &xNetworkContext );
 8001e42:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fdc6 	bl	80029d8 <prvConnectToServer>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001e52:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00b      	beq.n	8001e72 <MQTTTask+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e6e:	bf00      	nop
 8001e70:	e7fe      	b.n	8001e70 <MQTTTask+0x6c>
 //LOG(("Trying to create an MQTT connection\n"));
 prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001e72:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001e76:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fdf5 	bl	8002a6c <prvCreateMQTTConnectionWithBroker>

 // subscribirse a un topic
 printf("Trying to subscribe to topic\n");
 8001e82:	488f      	ldr	r0, [pc, #572]	; (80020c0 <MQTTTask+0x2bc>)
 8001e84:	f012 fd12 	bl	80148ac <puts>
 modo_operacion = 0;
 8001e88:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <MQTTTask+0x2c0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 prvMQTTSubscribeToTopic(&xMQTTContext,pcModOpTopic);
 8001e8e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001e92:	498d      	ldr	r1, [pc, #564]	; (80020c8 <MQTTTask+0x2c4>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fe9d 	bl	8002bd4 <prvMQTTSubscribeToTopic>
 for( ; ; )
 {
   /* Publicar cada 5 segundos */
   osDelay(5000);
 8001e9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e9e:	f00e fbc0 	bl	8010622 <osDelay>
   ftemp=BSP_TSENSOR_ReadTemp();
 8001ea2:	f008 fd73 	bl	800a98c <BSP_TSENSOR_ReadTemp>
 8001ea6:	ed87 0a5d 	vstr	s0, [r7, #372]	; 0x174
   fhum=BSP_HSENSOR_ReadHumidity();
 8001eaa:	f008 fd45 	bl	800a938 <BSP_HSENSOR_ReadHumidity>
 8001eae:	ed87 0a5c 	vstr	s0, [r7, #368]	; 0x170

   // Media de las aceleraciones
   HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4985      	ldr	r1, [pc, #532]	; (80020cc <MQTTTask+0x2c8>)
 8001eb6:	4886      	ldr	r0, [pc, #536]	; (80020d0 <MQTTTask+0x2cc>)
 8001eb8:	f004 ff47 	bl	8006d4a <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4985      	ldr	r1, [pc, #532]	; (80020d4 <MQTTTask+0x2d0>)
 8001ec0:	4883      	ldr	r0, [pc, #524]	; (80020d0 <MQTTTask+0x2cc>)
 8001ec2:	f005 f825 	bl	8006f10 <HAL_RTC_GetDate>
   if (acel_flag==1){
 8001ec6:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <MQTTTask+0x2d4>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	f040 809a 	bne.w	8002004 <MQTTTask+0x200>
	   sprintf(payLoad,"{\"temperatura\":%02.2f, \"humedad\":%02.2f, \"acel_x\":%d, \"acel_y\":%d, \"acel_z\":%d}",ftemp, fhum, acel_x,acel_y,acel_z);
 8001ed0:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8001ed4:	f7fe fb38 	bl	8000548 <__aeabi_f2d>
 8001ed8:	4604      	mov	r4, r0
 8001eda:	460d      	mov	r5, r1
 8001edc:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001ee0:	f7fe fb32 	bl	8000548 <__aeabi_f2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	497c      	ldr	r1, [pc, #496]	; (80020dc <MQTTTask+0x2d8>)
 8001eea:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001eee:	460e      	mov	r6, r1
 8001ef0:	497b      	ldr	r1, [pc, #492]	; (80020e0 <MQTTTask+0x2dc>)
 8001ef2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001ef6:	60f9      	str	r1, [r7, #12]
 8001ef8:	497a      	ldr	r1, [pc, #488]	; (80020e4 <MQTTTask+0x2e0>)
 8001efa:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001efe:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001f02:	9104      	str	r1, [sp, #16]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	9103      	str	r1, [sp, #12]
 8001f08:	9602      	str	r6, [sp, #8]
 8001f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f0e:	4622      	mov	r2, r4
 8001f10:	462b      	mov	r3, r5
 8001f12:	4975      	ldr	r1, [pc, #468]	; (80020e8 <MQTTTask+0x2e4>)
 8001f14:	f012 fd06 	bl	8014924 <siprintf>
	   snprintf(string_print, 128, "%02u:%02u:%02u - %u/%u/20%02u\r\n - {\"temperatura\":%02.2f, \"humedad\":%02.2f} \n\r",GetTime.Hours,GetTime.Minutes,GetTime.Seconds,GetDate.Date,GetDate.Month,GetDate.Year,ftemp, fhum);
 8001f18:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <MQTTTask+0x2c8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4698      	mov	r8, r3
 8001f1e:	4b6b      	ldr	r3, [pc, #428]	; (80020cc <MQTTTask+0x2c8>)
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	461e      	mov	r6, r3
 8001f24:	4b69      	ldr	r3, [pc, #420]	; (80020cc <MQTTTask+0x2c8>)
 8001f26:	789b      	ldrb	r3, [r3, #2]
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <MQTTTask+0x2d0>)
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <MQTTTask+0x2d0>)
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <MQTTTask+0x2d0>)
 8001f38:	78db      	ldrb	r3, [r3, #3]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8001f40:	f7fe fb02 	bl	8000548 <__aeabi_f2d>
 8001f44:	4604      	mov	r4, r0
 8001f46:	460d      	mov	r5, r1
 8001f48:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001f4c:	f7fe fafc 	bl	8000548 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	f107 0014 	add.w	r0, r7, #20
 8001f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001f5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	9204      	str	r2, [sp, #16]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	9203      	str	r2, [sp, #12]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	9202      	str	r2, [sp, #8]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	9600      	str	r6, [sp, #0]
 8001f72:	4643      	mov	r3, r8
 8001f74:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <MQTTTask+0x2e8>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	f012 fca0 	bl	80148bc <sniprintf>
	   osMessageQueuePut(print_queueHandle, &string_print_puntero, 0, pdMS_TO_TICKS(500));
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <MQTTTask+0x2ec>)
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f107 0110 	add.w	r1, r7, #16
 8001f84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f00e fbd9 	bl	8010740 <osMessageQueuePut>
	   snprintf(string_print, 128, "%02u:%02u:%02u - %u/%u/20%02u\r\n - \"acel_x\":%d, \"acel_y\":%d, \"acel_z\":%d} \n\r",GetTime.Hours,GetTime.Minutes,GetTime.Seconds,GetDate.Date,GetDate.Month,GetDate.Year, acel_x,acel_y,acel_z);
 8001f8e:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <MQTTTask+0x2c8>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	469c      	mov	ip, r3
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <MQTTTask+0x2c8>)
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <MQTTTask+0x2c8>)
 8001f9c:	789b      	ldrb	r3, [r3, #2]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <MQTTTask+0x2d0>)
 8001fa2:	789b      	ldrb	r3, [r3, #2]
 8001fa4:	461c      	mov	r4, r3
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <MQTTTask+0x2d0>)
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	461d      	mov	r5, r3
 8001fac:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <MQTTTask+0x2d0>)
 8001fae:	78db      	ldrb	r3, [r3, #3]
 8001fb0:	461e      	mov	r6, r3
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <MQTTTask+0x2d8>)
 8001fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <MQTTTask+0x2dc>)
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <MQTTTask+0x2e0>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	f107 0014 	add.w	r0, r7, #20
 8001fcc:	9307      	str	r3, [sp, #28]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	9306      	str	r3, [sp, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	9305      	str	r3, [sp, #20]
 8001fd6:	9604      	str	r6, [sp, #16]
 8001fd8:	9503      	str	r5, [sp, #12]
 8001fda:	9402      	str	r4, [sp, #8]
 8001fdc:	9101      	str	r1, [sp, #4]
 8001fde:	9200      	str	r2, [sp, #0]
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	4a44      	ldr	r2, [pc, #272]	; (80020f4 <MQTTTask+0x2f0>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	f012 fc69 	bl	80148bc <sniprintf>
	   osMessageQueuePut(print_queueHandle, &string_print_puntero, 0, pdMS_TO_TICKS(500));
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <MQTTTask+0x2ec>)
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f107 0110 	add.w	r1, r7, #16
 8001ff2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f00e fba2 	bl	8010740 <osMessageQueuePut>
	   acel_flag = 0;
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <MQTTTask+0x2d4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e04f      	b.n	80020a4 <MQTTTask+0x2a0>
   }
   else{
	   snprintf(string_print, 128, "%02u:%02u:%02u - %u/%u/20%02u\r\n - {\"temperatura\":%02.2f, \"humedad\":%02.2f} \n\r",GetTime.Hours,GetTime.Minutes,GetTime.Seconds,GetDate.Date,GetDate.Month,GetDate.Year,ftemp, fhum);
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <MQTTTask+0x2c8>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4698      	mov	r8, r3
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <MQTTTask+0x2c8>)
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	461e      	mov	r6, r3
 8002010:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <MQTTTask+0x2c8>)
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <MQTTTask+0x2d0>)
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <MQTTTask+0x2d0>)
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <MQTTTask+0x2d0>)
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800202c:	f7fe fa8c 	bl	8000548 <__aeabi_f2d>
 8002030:	4604      	mov	r4, r0
 8002032:	460d      	mov	r5, r1
 8002034:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_f2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	f107 0014 	add.w	r0, r7, #20
 8002044:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002048:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	9204      	str	r2, [sp, #16]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	9203      	str	r2, [sp, #12]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	9202      	str	r2, [sp, #8]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	9600      	str	r6, [sp, #0]
 800205e:	4643      	mov	r3, r8
 8002060:	4a22      	ldr	r2, [pc, #136]	; (80020ec <MQTTTask+0x2e8>)
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	f012 fc2a 	bl	80148bc <sniprintf>
	   osMessageQueuePut(print_queueHandle, &string_print_puntero, 0, pdMS_TO_TICKS(500));
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <MQTTTask+0x2ec>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f107 0110 	add.w	r1, r7, #16
 8002070:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002074:	2200      	movs	r2, #0
 8002076:	f00e fb63 	bl	8010740 <osMessageQueuePut>
	   sprintf(payLoad,"{\"temperatura\":%02.2f, \"humedad\":%02.2f}",ftemp, fhum);
 800207a:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 800207e:	f7fe fa63 	bl	8000548 <__aeabi_f2d>
 8002082:	4604      	mov	r4, r0
 8002084:	460d      	mov	r5, r1
 8002086:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800208a:	f7fe fa5d 	bl	8000548 <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002096:	e9cd 2300 	strd	r2, r3, [sp]
 800209a:	4622      	mov	r2, r4
 800209c:	462b      	mov	r3, r5
 800209e:	4916      	ldr	r1, [pc, #88]	; (80020f8 <MQTTTask+0x2f4>)
 80020a0:	f012 fc40 	bl	8014924 <siprintf>
   }

   prvMQTTPublishToTopic(&xMQTTContext,pcBaseTopic,payLoad);
 80020a4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80020a8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80020ac:	4913      	ldr	r1, [pc, #76]	; (80020fc <MQTTTask+0x2f8>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fd56 	bl	8002b60 <prvMQTTPublishToTopic>

   MQTT_ProcessLoop(&xMQTTContext);
 80020b4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00c f88f 	bl	800e1dc <MQTT_ProcessLoop>
   osDelay(5000);
 80020be:	e6ec      	b.n	8001e9a <MQTTTask+0x96>
 80020c0:	08018508 	.word	0x08018508
 80020c4:	20000b1c 	.word	0x20000b1c
 80020c8:	08018528 	.word	0x08018528
 80020cc:	20000ba8 	.word	0x20000ba8
 80020d0:	2000040c 	.word	0x2000040c
 80020d4:	20000ba4 	.word	0x20000ba4
 80020d8:	20000b5c 	.word	0x20000b5c
 80020dc:	20000b56 	.word	0x20000b56
 80020e0:	20000b58 	.word	0x20000b58
 80020e4:	20000b5a 	.word	0x20000b5a
 80020e8:	08018554 	.word	0x08018554
 80020ec:	080185a4 	.word	0x080185a4
 80020f0:	20000ac8 	.word	0x20000ac8
 80020f4:	080185f4 	.word	0x080185f4
 80020f8:	08018640 	.word	0x08018640
 80020fc:	0801866c 	.word	0x0801866c

08002100 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <SPI3_IRQHandler+0x10>)
 8002106:	f005 fe2d 	bl	8007d64 <HAL_SPI_IRQHandler>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200010cc 	.word	0x200010cc

08002114 <wifiStartTask>:

/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask */
  uint8_t ret_flag;
  uint8_t control = 1;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  while (control) {
 8002120:	e014      	b.n	800214c <wifiStartTask+0x38>
	  ret_flag = osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8002122:	f04f 32ff 	mov.w	r2, #4294967295
 8002126:	2100      	movs	r1, #0
 8002128:	2001      	movs	r0, #1
 800212a:	f00e f9f9 	bl	8010520 <osThreadFlagsWait>
 800212e:	4603      	mov	r3, r0
 8002130:	73bb      	strb	r3, [r7, #14]
	  if (ret_flag == 1U) {
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d109      	bne.n	800214c <wifiStartTask+0x38>
		  control = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
		  wifi_connect();
 800213c:	f7ff fcfe 	bl	8001b3c <wifi_connect>
		  for(;;)
		  {
			MQTTTask();
 8002140:	f7ff fe60 	bl	8001e04 <MQTTTask>
			osDelay(1);
 8002144:	2001      	movs	r0, #1
 8002146:	f00e fa6c 	bl	8010622 <osDelay>
			MQTTTask();
 800214a:	e7f9      	b.n	8002140 <wifiStartTask+0x2c>
  while (control) {
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1e7      	bne.n	8002122 <wifiStartTask+0xe>
		  }
	  }
  }
  /* USER CODE END wifiStartTask */
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <acel_task_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_acel_task_function */
void acel_task_function(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af04      	add	r7, sp, #16
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN acel_task_function */
    uint32_t ret_flag = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  ret_flag = osThreadFlagsWait(0x00000002U, osFlagsWaitAny,osWaitForever);
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	2100      	movs	r1, #0
 800216e:	2002      	movs	r0, #2
 8002170:	f00e f9d6 	bl	8010520 <osThreadFlagsWait>
 8002174:	60b8      	str	r0, [r7, #8]
  printf("Llamada desde la tarea de wifi.\n\r");
 8002176:	488d      	ldr	r0, [pc, #564]	; (80023ac <acel_task_function+0x250>)
 8002178:	f012 fb32 	bl	80147e0 <iprintf>
  uint8_t contador = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]
  int16_t temp_acel_x = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	82bb      	strh	r3, [r7, #20]
  int16_t temp_acel_y = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	827b      	strh	r3, [r7, #18]
  int16_t temp_acel_z = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	823b      	strh	r3, [r7, #16]
  // Infinite loop //
  for(;;)
  {
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	2100      	movs	r1, #0
 8002192:	2001      	movs	r0, #1
 8002194:	f00e f9c4 	bl	8010520 <osThreadFlagsWait>
 8002198:	60b8      	str	r0, [r7, #8]
      if (ret_flag == 1U){
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 8100 	bne.w	80023a2 <acel_task_function+0x246>
        BSP_ACCELERO_AccGetXYZ(pDataAcc);                            // Toma de Aceleración /
 80021a2:	4883      	ldr	r0, [pc, #524]	; (80023b0 <acel_task_function+0x254>)
 80021a4:	f008 fb90 	bl	800a8c8 <BSP_ACCELERO_AccGetXYZ>
        HAL_RTC_GetTime(&hrtc, &varTime, RTC_FORMAT_BIN);            // Toma de timestamp /
 80021a8:	2200      	movs	r2, #0
 80021aa:	4982      	ldr	r1, [pc, #520]	; (80023b4 <acel_task_function+0x258>)
 80021ac:	4882      	ldr	r0, [pc, #520]	; (80023b8 <acel_task_function+0x25c>)
 80021ae:	f004 fdcc 	bl	8006d4a <HAL_RTC_GetTime>
        subsec = (varTime.SecondFraction-varTime.SubSeconds)*1000/varTime.SecondFraction;      /* ms del timestamp */
 80021b2:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <acel_task_function+0x258>)
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4b7f      	ldr	r3, [pc, #508]	; (80023b4 <acel_task_function+0x258>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021c0:	fb03 f202 	mul.w	r2, r3, r2
 80021c4:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <acel_task_function+0x258>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <acel_task_function+0x260>)
 80021d0:	801a      	strh	r2, [r3, #0]
        HAL_RTC_GetDate(&hrtc, &varDate, RTC_FORMAT_BCD);            // Toma de fecha /
 80021d2:	2201      	movs	r2, #1
 80021d4:	497a      	ldr	r1, [pc, #488]	; (80023c0 <acel_task_function+0x264>)
 80021d6:	4878      	ldr	r0, [pc, #480]	; (80023b8 <acel_task_function+0x25c>)
 80021d8:	f004 fe9a 	bl	8006f10 <HAL_RTC_GetDate>

        snprintf(str_x,14,"Eje_X = %d, ",pDataAcc[0]);                /* Formateo del mensaje de aceleración del eje X */
 80021dc:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <acel_task_function+0x254>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	4a78      	ldr	r2, [pc, #480]	; (80023c4 <acel_task_function+0x268>)
 80021e4:	210e      	movs	r1, #14
 80021e6:	4878      	ldr	r0, [pc, #480]	; (80023c8 <acel_task_function+0x26c>)
 80021e8:	f012 fb68 	bl	80148bc <sniprintf>
        snprintf(str_y,14,"Eje_Y = %d, ",pDataAcc[1]);
 80021ec:	4b70      	ldr	r3, [pc, #448]	; (80023b0 <acel_task_function+0x254>)
 80021ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021f2:	4a76      	ldr	r2, [pc, #472]	; (80023cc <acel_task_function+0x270>)
 80021f4:	210e      	movs	r1, #14
 80021f6:	4876      	ldr	r0, [pc, #472]	; (80023d0 <acel_task_function+0x274>)
 80021f8:	f012 fb60 	bl	80148bc <sniprintf>
        snprintf(str_z,18,"Eje_Z = %d, \r\n",pDataAcc[2]);
 80021fc:	4b6c      	ldr	r3, [pc, #432]	; (80023b0 <acel_task_function+0x254>)
 80021fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002202:	4a74      	ldr	r2, [pc, #464]	; (80023d4 <acel_task_function+0x278>)
 8002204:	2112      	movs	r1, #18
 8002206:	4874      	ldr	r0, [pc, #464]	; (80023d8 <acel_task_function+0x27c>)
 8002208:	f012 fb58 	bl	80148bc <sniprintf>

        if (subsec <10){
 800220c:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <acel_task_function+0x260>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2b09      	cmp	r3, #9
 8002212:	d814      	bhi.n	800223e <acel_task_function+0xe2>
            snprintf(timestamp,27,"\r\nTimestamp = %d:%d:%d.00%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8002214:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <acel_task_function+0x258>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <acel_task_function+0x258>)
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	461a      	mov	r2, r3
 8002220:	4b64      	ldr	r3, [pc, #400]	; (80023b4 <acel_task_function+0x258>)
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	4619      	mov	r1, r3
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <acel_task_function+0x260>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	9101      	str	r1, [sp, #4]
 800222e:	9200      	str	r2, [sp, #0]
 8002230:	4603      	mov	r3, r0
 8002232:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <acel_task_function+0x280>)
 8002234:	211b      	movs	r1, #27
 8002236:	486a      	ldr	r0, [pc, #424]	; (80023e0 <acel_task_function+0x284>)
 8002238:	f012 fb40 	bl	80148bc <sniprintf>
 800223c:	e030      	b.n	80022a0 <acel_task_function+0x144>

        }
        else if (10<=subsec && subsec <100) {
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <acel_task_function+0x260>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	2b09      	cmp	r3, #9
 8002244:	d918      	bls.n	8002278 <acel_task_function+0x11c>
 8002246:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <acel_task_function+0x260>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	2b63      	cmp	r3, #99	; 0x63
 800224c:	d814      	bhi.n	8002278 <acel_task_function+0x11c>
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.0%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 800224e:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <acel_task_function+0x258>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <acel_task_function+0x258>)
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	461a      	mov	r2, r3
 800225a:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <acel_task_function+0x258>)
 800225c:	789b      	ldrb	r3, [r3, #2]
 800225e:	4619      	mov	r1, r3
 8002260:	4b56      	ldr	r3, [pc, #344]	; (80023bc <acel_task_function+0x260>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	9101      	str	r1, [sp, #4]
 8002268:	9200      	str	r2, [sp, #0]
 800226a:	4603      	mov	r3, r0
 800226c:	4a5d      	ldr	r2, [pc, #372]	; (80023e4 <acel_task_function+0x288>)
 800226e:	211c      	movs	r1, #28
 8002270:	485b      	ldr	r0, [pc, #364]	; (80023e0 <acel_task_function+0x284>)
 8002272:	f012 fb23 	bl	80148bc <sniprintf>
 8002276:	e013      	b.n	80022a0 <acel_task_function+0x144>

        }
        else{
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8002278:	4b4e      	ldr	r3, [pc, #312]	; (80023b4 <acel_task_function+0x258>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <acel_task_function+0x258>)
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	461a      	mov	r2, r3
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <acel_task_function+0x258>)
 8002286:	789b      	ldrb	r3, [r3, #2]
 8002288:	4619      	mov	r1, r3
 800228a:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <acel_task_function+0x260>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	9101      	str	r1, [sp, #4]
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <acel_task_function+0x28c>)
 8002298:	211c      	movs	r1, #28
 800229a:	4851      	ldr	r0, [pc, #324]	; (80023e0 <acel_task_function+0x284>)
 800229c:	f012 fb0e 	bl	80148bc <sniprintf>


    	//HAL_UART_Transmit(&huart1,(uint8_t *)timestamp,26,1000);		/* TransmisiÃ³n de la informaciÃ³n por UART */


    	lista_acelx[contador] = pDataAcc[0];
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	4a43      	ldr	r2, [pc, #268]	; (80023b0 <acel_task_function+0x254>)
 80022a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80022a8:	4a50      	ldr	r2, [pc, #320]	; (80023ec <acel_task_function+0x290>)
 80022aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lista_acely[contador] = pDataAcc[1];
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <acel_task_function+0x254>)
 80022b2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80022b6:	4a4e      	ldr	r2, [pc, #312]	; (80023f0 <acel_task_function+0x294>)
 80022b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lista_acelz[contador] = pDataAcc[2];
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <acel_task_function+0x254>)
 80022c0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <acel_task_function+0x298>)
 80022c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        //printf("Contador: %d. \n\r",contador);
        //printf("Modo op %d. \n\r",modo_operacion);
        if (contador >= 9){
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d965      	bls.n	800239c <acel_task_function+0x240>
        	acel_x=0;
 80022d0:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <acel_task_function+0x29c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	801a      	strh	r2, [r3, #0]
        	acel_y=0;
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <acel_task_function+0x2a0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]
        	acel_z=0;
 80022dc:	4b48      	ldr	r3, [pc, #288]	; (8002400 <acel_task_function+0x2a4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
        	for (int i = 0; i <= 9; i++){
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e01d      	b.n	8002324 <acel_task_function+0x1c8>
        		temp_acel_x += lista_acelx[i];
 80022e8:	4a40      	ldr	r2, [pc, #256]	; (80023ec <acel_task_function+0x290>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	8abb      	ldrh	r3, [r7, #20]
 80022f4:	4413      	add	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	82bb      	strh	r3, [r7, #20]
        		temp_acel_y += lista_acely[i];
 80022fa:	4a3d      	ldr	r2, [pc, #244]	; (80023f0 <acel_task_function+0x294>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002302:	b29a      	uxth	r2, r3
 8002304:	8a7b      	ldrh	r3, [r7, #18]
 8002306:	4413      	add	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	827b      	strh	r3, [r7, #18]
        		temp_acel_z += lista_acelz[i];
 800230c:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <acel_task_function+0x298>)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002314:	b29a      	uxth	r2, r3
 8002316:	8a3b      	ldrh	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	823b      	strh	r3, [r7, #16]
        	for (int i = 0; i <= 9; i++){
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3301      	adds	r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b09      	cmp	r3, #9
 8002328:	ddde      	ble.n	80022e8 <acel_task_function+0x18c>
        	}

        	acel_x = temp_acel_x/10;
 800232a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800232e:	4a35      	ldr	r2, [pc, #212]	; (8002404 <acel_task_function+0x2a8>)
 8002330:	fb82 1203 	smull	r1, r2, r2, r3
 8002334:	1092      	asrs	r2, r2, #2
 8002336:	17db      	asrs	r3, r3, #31
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <acel_task_function+0x29c>)
 800233e:	801a      	strh	r2, [r3, #0]
        	acel_y = temp_acel_y/10;
 8002340:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002344:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <acel_task_function+0x2a8>)
 8002346:	fb82 1203 	smull	r1, r2, r2, r3
 800234a:	1092      	asrs	r2, r2, #2
 800234c:	17db      	asrs	r3, r3, #31
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	b21a      	sxth	r2, r3
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <acel_task_function+0x2a0>)
 8002354:	801a      	strh	r2, [r3, #0]
        	acel_z = temp_acel_z/10;
 8002356:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800235a:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <acel_task_function+0x2a8>)
 800235c:	fb82 1203 	smull	r1, r2, r2, r3
 8002360:	1092      	asrs	r2, r2, #2
 8002362:	17db      	asrs	r3, r3, #31
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b21a      	sxth	r2, r3
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <acel_task_function+0x2a4>)
 800236a:	801a      	strh	r2, [r3, #0]

        	acel_flag=1;
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <acel_task_function+0x2ac>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
        	contador=0;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
        	temp_acel_x=0;
 8002376:	2300      	movs	r3, #0
 8002378:	82bb      	strh	r3, [r7, #20]
        	temp_acel_y=0;
 800237a:	2300      	movs	r3, #0
 800237c:	827b      	strh	r3, [r7, #18]
        	temp_acel_z=0;
 800237e:	2300      	movs	r3, #0
 8002380:	823b      	strh	r3, [r7, #16]
        	//printf("Modo operacion en main: %d. \n\r", modo_operacion);
        	if (modo_operacion == 1){
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <acel_task_function+0x2b0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d104      	bne.n	8002394 <acel_task_function+0x238>
            	osDelay(pdMS_TO_TICKS(20000));//(20000));
 800238a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800238e:	f00e f948 	bl	8010622 <osDelay>
 8002392:	e003      	b.n	800239c <acel_task_function+0x240>
        	}
        	else
        	{
        		osDelay(pdMS_TO_TICKS(60000));//(60000));
 8002394:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002398:	f00e f943 	bl	8010622 <osDelay>
        	}

        }
        contador=contador+1;
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	3301      	adds	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
      }
    osDelay(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f00e f93d 	bl	8010622 <osDelay>
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 80023a8:	e6f0      	b.n	800218c <acel_task_function+0x30>
 80023aa:	bf00      	nop
 80023ac:	08018688 	.word	0x08018688
 80023b0:	20000ad8 	.word	0x20000ad8
 80023b4:	20000b88 	.word	0x20000b88
 80023b8:	2000040c 	.word	0x2000040c
 80023bc:	20000b84 	.word	0x20000b84
 80023c0:	20000b9c 	.word	0x20000b9c
 80023c4:	080186ac 	.word	0x080186ac
 80023c8:	20000b24 	.word	0x20000b24
 80023cc:	080186bc 	.word	0x080186bc
 80023d0:	20000b34 	.word	0x20000b34
 80023d4:	080186cc 	.word	0x080186cc
 80023d8:	20000b44 	.word	0x20000b44
 80023dc:	080186dc 	.word	0x080186dc
 80023e0:	20000b60 	.word	0x20000b60
 80023e4:	080186fc 	.word	0x080186fc
 80023e8:	0801871c 	.word	0x0801871c
 80023ec:	20000ae0 	.word	0x20000ae0
 80023f0:	20000af4 	.word	0x20000af4
 80023f4:	20000b08 	.word	0x20000b08
 80023f8:	20000b56 	.word	0x20000b56
 80023fc:	20000b58 	.word	0x20000b58
 8002400:	20000b5a 	.word	0x20000b5a
 8002404:	66666667 	.word	0x66666667
 8002408:	20000b5c 	.word	0x20000b5c
 800240c:	20000b1c 	.word	0x20000b1c

08002410 <print_task_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_print_task_func */
void print_task_func(void *argument)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_task_func */
	uintptr_t rec;
	osStatus_t estado;
	const char *cadto = "Timeout agotado recepcion\r\n";
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <print_task_func+0x68>)
 800241a:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &rec, NULL, osWaitForever);
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <print_task_func+0x6c>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	f107 010c 	add.w	r1, r7, #12
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	2200      	movs	r2, #0
 800242a:	f00e f9e9 	bl	8010800 <osMessageQueueGet>
 800242e:	6138      	str	r0, [r7, #16]
	  //printf("estado: %d\n\r",estado);
	  if (estado == osOK)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <print_task_func+0x42>
		  HAL_UART_Transmit(&huart1, (uint8_t *)rec, strlen((const char *)rec), 10);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	461c      	mov	r4, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fd ff17 	bl	8000270 <strlen>
 8002442:	4603      	mov	r3, r0
 8002444:	b29a      	uxth	r2, r3
 8002446:	230a      	movs	r3, #10
 8002448:	4621      	mov	r1, r4
 800244a:	480d      	ldr	r0, [pc, #52]	; (8002480 <print_task_func+0x70>)
 800244c:	f006 fa01 	bl	8008852 <HAL_UART_Transmit>
 8002450:	e00d      	b.n	800246e <print_task_func+0x5e>
	  else if (estado == osErrorTimeout)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f113 0f02 	cmn.w	r3, #2
 8002458:	d109      	bne.n	800246e <print_task_func+0x5e>
		  HAL_UART_Transmit(&huart1, (uint8_t *)cadto, strlen(cadto), 10);
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f7fd ff08 	bl	8000270 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b29a      	uxth	r2, r3
 8002464:	230a      	movs	r3, #10
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <print_task_func+0x70>)
 800246a:	f006 f9f2 	bl	8008852 <HAL_UART_Transmit>
	  osDelay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f00e f8d7 	bl	8010622 <osDelay>
	  estado = osMessageQueueGet(print_queueHandle, &rec, NULL, osWaitForever);
 8002474:	e7d2      	b.n	800241c <print_task_func+0xc>
 8002476:	bf00      	nop
 8002478:	0801873c 	.word	0x0801873c
 800247c:	20000ac8 	.word	0x20000ac8
 8002480:	20000494 	.word	0x20000494

08002484 <RTC_set_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b0a2      	sub	sp, #136	; 0x88
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTC_set_func */
	char recibido[3] = {0};
 800248c:	4ba7      	ldr	r3, [pc, #668]	; (800272c <RTC_set_func+0x2a8>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint32_t flag_rec = 0x0000U;
 800249a:	2300      	movs	r3, #0
 800249c:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t estado;
	char rec;
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 800249e:	4ba4      	ldr	r3, [pc, #656]	; (8002730 <RTC_set_func+0x2ac>)
 80024a0:	67bb      	str	r3, [r7, #120]	; 0x78
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 80024a2:	4ba4      	ldr	r3, [pc, #656]	; (8002734 <RTC_set_func+0x2b0>)
 80024a4:	677b      	str	r3, [r7, #116]	; 0x74
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 80024a6:	4ba4      	ldr	r3, [pc, #656]	; (8002738 <RTC_set_func+0x2b4>)
 80024a8:	673b      	str	r3, [r7, #112]	; 0x70
	const char* msg_rtc1 = "\r\n\r\n========================\r\n" "| Configurar rtc |\r\n" "========================\r\n\r\n";
 80024aa:	4ba4      	ldr	r3, [pc, #656]	; (800273c <RTC_set_func+0x2b8>)
 80024ac:	66fb      	str	r3, [r7, #108]	; 0x6c
	const char* msg[6] = {
 80024ae:	4ba4      	ldr	r3, [pc, #656]	; (8002740 <RTC_set_func+0x2bc>)
 80024b0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80024b4:	461d      	mov	r5, r3
 80024b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024be:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 80024c2:	4aa0      	ldr	r2, [pc, #640]	; (8002744 <RTC_set_func+0x2c0>)
 80024c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	RTC_TimeTypeDef sTime = {0};
 80024ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t *toChange[6] = {&sTime.Hours, &sTime.Minutes, &sTime.Seconds, &sDate.Date,
 80024e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ec:	3301      	adds	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f4:	3302      	adds	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fc:	3302      	adds	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	3303      	adds	r3, #3
 800250e:	623b      	str	r3, [r7, #32]

	/* Infinite loop */
	for(;;)
	{
	  restart_loop:
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg_rtc1, strlen(msg_rtc1), 10);
 8002510:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002512:	f7fd fead 	bl	8000270 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	230a      	movs	r3, #10
 800251c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800251e:	488a      	ldr	r0, [pc, #552]	; (8002748 <RTC_set_func+0x2c4>)
 8002520:	f006 f997 	bl	8008852 <HAL_UART_Transmit>
	  for (int i = 0; i < 6; i++){
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800252a:	e0c8      	b.n	80026be <RTC_set_func+0x23a>
		  HAL_UART_Transmit(&huart1, (uint8_t *)msg[i], strlen(msg[i]), 10);
 800252c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	3388      	adds	r3, #136	; 0x88
 8002534:	443b      	add	r3, r7
 8002536:	f853 4c40 	ldr.w	r4, [r3, #-64]
 800253a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	3388      	adds	r3, #136	; 0x88
 8002542:	443b      	add	r3, r7
 8002544:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fe91 	bl	8000270 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	b29a      	uxth	r2, r3
 8002552:	230a      	movs	r3, #10
 8002554:	4621      	mov	r1, r4
 8002556:	487c      	ldr	r0, [pc, #496]	; (8002748 <RTC_set_func+0x2c4>)
 8002558:	f006 f97b 	bl	8008852 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart1, &rec_data, sizeof(rec_data));
 800255c:	2201      	movs	r2, #1
 800255e:	497b      	ldr	r1, [pc, #492]	; (800274c <RTC_set_func+0x2c8>)
 8002560:	4879      	ldr	r0, [pc, #484]	; (8002748 <RTC_set_func+0x2c4>)
 8002562:	f006 fa01 	bl	8008968 <HAL_UART_Receive_IT>
		  flag_rec = osThreadFlagsWait(0x00000003U, osFlagsWaitAny, osWaitForever);
 8002566:	f04f 32ff 	mov.w	r2, #4294967295
 800256a:	2100      	movs	r1, #0
 800256c:	2003      	movs	r0, #3
 800256e:	f00d ffd7 	bl	8010520 <osThreadFlagsWait>
 8002572:	67f8      	str	r0, [r7, #124]	; 0x7c
		  if ( flag_rec == 0x0001U){
 8002574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 8089 	bne.w	800268e <RTC_set_func+0x20a>
			  printf("Salto de linea pulsado, bandera 0 recibida\r\n");
 800257c:	4874      	ldr	r0, [pc, #464]	; (8002750 <RTC_set_func+0x2cc>)
 800257e:	f012 f995 	bl	80148ac <puts>
			  for (int i = 0; i<3;i++){
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002588:	e026      	b.n	80025d8 <RTC_set_func+0x154>
				  estado = osMessageQueueGet(receive_queueHandle, &rec, NULL, pdMS_TO_TICKS(500));
 800258a:	4b72      	ldr	r3, [pc, #456]	; (8002754 <RTC_set_func+0x2d0>)
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f107 0163 	add.w	r1, r7, #99	; 0x63
 8002592:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002596:	2200      	movs	r2, #0
 8002598:	f00e f932 	bl	8010800 <osMessageQueueGet>
 800259c:	66b8      	str	r0, [r7, #104]	; 0x68
				  if (estado == osOK){
 800259e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d114      	bne.n	80025ce <RTC_set_func+0x14a>
					  if (i == 2)
 80025a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d107      	bne.n	80025bc <RTC_set_func+0x138>
						  recibido[i] = '\0';
 80025ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b4:	4413      	add	r3, r2
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e008      	b.n	80025ce <RTC_set_func+0x14a>
					  else
						  recibido[i] = rec;
 80025bc:	f897 1063 	ldrb.w	r1, [r7, #99]	; 0x63
 80025c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c8:	4413      	add	r3, r2
 80025ca:	460a      	mov	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i<3;i++){
 80025ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d2:	3301      	adds	r3, #1
 80025d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025dc:	2b02      	cmp	r3, #2
 80025de:	ddd4      	ble.n	800258a <RTC_set_func+0x106>
				  }
			  }
			  if (((uint8_t)strtol(recibido, NULL, 10) > limit[i][1]) || ((uint8_t)strtol(recibido, NULL, 10) < limit[i][0])){
 80025e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025e4:	220a      	movs	r2, #10
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f011 f9a5 	bl	8013938 <strtol>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	3388      	adds	r3, #136	; 0x88
 80025fa:	443b      	add	r3, r7
 80025fc:	f813 3c4b 	ldrb.w	r3, [r3, #-75]
 8002600:	429a      	cmp	r2, r3
 8002602:	d811      	bhi.n	8002628 <RTC_set_func+0x1a4>
 8002604:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002608:	220a      	movs	r2, #10
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f011 f993 	bl	8013938 <strtol>
 8002612:	4603      	mov	r3, r0
 8002614:	b2da      	uxtb	r2, r3
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	3388      	adds	r3, #136	; 0x88
 800261e:	443b      	add	r3, r7
 8002620:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002624:	429a      	cmp	r2, r3
 8002626:	d212      	bcs.n	800264e <RTC_set_func+0x1ca>
				  HAL_UART_Transmit(&huart1, (uint8_t *)msg_error, strlen(msg_error), 10);
 8002628:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800262a:	f7fd fe21 	bl	8000270 <strlen>
 800262e:	4603      	mov	r3, r0
 8002630:	b29a      	uxth	r2, r3
 8002632:	230a      	movs	r3, #10
 8002634:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002636:	4844      	ldr	r0, [pc, #272]	; (8002748 <RTC_set_func+0x2c4>)
 8002638:	f006 f90b 	bl	8008852 <HAL_UART_Transmit>
				  osMessageQueueReset(receive_queueHandle);
 800263c:	4b45      	ldr	r3, [pc, #276]	; (8002754 <RTC_set_func+0x2d0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f00e f93b 	bl	80108bc <osMessageQueueReset>
				  strcpy(recibido, "\0\0\0");
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				  goto restart_loop;
 800264c:	e760      	b.n	8002510 <RTC_set_func+0x8c>
			  }
			  printf("recibido= %s\r\n",recibido);
 800264e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002652:	4619      	mov	r1, r3
 8002654:	4840      	ldr	r0, [pc, #256]	; (8002758 <RTC_set_func+0x2d4>)
 8002656:	f012 f8c3 	bl	80147e0 <iprintf>
			  *toChange[i] = strtol(recibido, NULL, 16);
 800265a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800265e:	2210      	movs	r2, #16
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f011 f968 	bl	8013938 <strtol>
 8002668:	4602      	mov	r2, r0
 800266a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3388      	adds	r3, #136	; 0x88
 8002672:	443b      	add	r3, r7
 8002674:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
			  osMessageQueueReset(receive_queueHandle);
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <RTC_set_func+0x2d0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f00e f91b 	bl	80108bc <osMessageQueueReset>
			  strcpy(recibido, "\0\0\0");
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800268c:	e012      	b.n	80026b4 <RTC_set_func+0x230>

		  } else if (flag_rec == 0x0002U){
 800268e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002690:	2b02      	cmp	r3, #2
 8002692:	d10f      	bne.n	80026b4 <RTC_set_func+0x230>
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg_error, strlen(msg_error), 10);
 8002694:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002696:	f7fd fdeb 	bl	8000270 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	230a      	movs	r3, #10
 80026a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80026a2:	4829      	ldr	r0, [pc, #164]	; (8002748 <RTC_set_func+0x2c4>)
 80026a4:	f006 f8d5 	bl	8008852 <HAL_UART_Transmit>
			  osMessageQueueReset(receive_queueHandle);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <RTC_set_func+0x2d0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00e f905 	bl	80108bc <osMessageQueueReset>
			  goto restart_loop;
 80026b2:	e72d      	b.n	8002510 <RTC_set_func+0x8c>
	  for (int i = 0; i < 6; i++){
 80026b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	f77f af32 	ble.w	800252c <RTC_set_func+0xa8>
		  }
	  }
	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80026c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026cc:	2201      	movs	r2, #1
 80026ce:	4619      	mov	r1, r3
 80026d0:	4822      	ldr	r0, [pc, #136]	; (800275c <RTC_set_func+0x2d8>)
 80026d2:	f004 fa9d 	bl	8006c10 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	2201      	movs	r2, #1
 80026dc:	4619      	mov	r1, r3
 80026de:	481f      	ldr	r0, [pc, #124]	; (800275c <RTC_set_func+0x2d8>)
 80026e0:	f004 fb8f 	bl	8006e02 <HAL_RTC_SetDate>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg_hora_ok, strlen(msg_hora_ok), 10);
 80026e4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80026e6:	f7fd fdc3 	bl	8000270 <strlen>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	230a      	movs	r3, #10
 80026f0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80026f2:	4815      	ldr	r0, [pc, #84]	; (8002748 <RTC_set_func+0x2c4>)
 80026f4:	f006 f8ad 	bl	8008852 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg_fecha_ok, strlen(msg_fecha_ok), 10);
 80026f8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80026fa:	f7fd fdb9 	bl	8000270 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29a      	uxth	r2, r3
 8002702:	230a      	movs	r3, #10
 8002704:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002706:	4810      	ldr	r0, [pc, #64]	; (8002748 <RTC_set_func+0x2c4>)
 8002708:	f006 f8a3 	bl	8008852 <HAL_UART_Transmit>
	  osThreadFlagsSet(wifi_setHandle, 0x0001U);
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <RTC_set_func+0x2dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f00d feb6 	bl	8010484 <osThreadFlagsSet>
	  config_state=1; // Para que en la funcion HAL_UART_RxCpltCallback se encargue de configurar el wifi en vez de RTC
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <RTC_set_func+0x2e0>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
	  osThreadSuspend(RTC_setHandle);
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <RTC_set_func+0x2e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f00d fe8c 	bl	8010440 <osThreadSuspend>
	  restart_loop:
 8002728:	e6f2      	b.n	8002510 <RTC_set_func+0x8c>
 800272a:	bf00      	nop
 800272c:	08018840 	.word	0x08018840
 8002730:	08018758 	.word	0x08018758
 8002734:	08018778 	.word	0x08018778
 8002738:	08018798 	.word	0x08018798
 800273c:	080187b4 	.word	0x080187b4
 8002740:	080188ac 	.word	0x080188ac
 8002744:	080188c4 	.word	0x080188c4
 8002748:	20000494 	.word	0x20000494
 800274c:	20000bbc 	.word	0x20000bbc
 8002750:	08018804 	.word	0x08018804
 8002754:	20000acc 	.word	0x20000acc
 8002758:	08018830 	.word	0x08018830
 800275c:	2000040c 	.word	0x2000040c
 8002760:	20000ac4 	.word	0x20000ac4
 8002764:	20000bbe 	.word	0x20000bbe
 8002768:	20000ac0 	.word	0x20000ac0

0800276c <wifi_set_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifi_set_func */
void wifi_set_func(void *argument)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b099      	sub	sp, #100	; 0x64
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifi_set_func */
	char recibido[31] = {0};
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	f8c3 2017 	str.w	r2, [r3, #23]
		uint8_t ret_flag;
		uint32_t flag_rec = 0x0000U;
 800278e:	2300      	movs	r3, #0
 8002790:	653b      	str	r3, [r7, #80]	; 0x50
		uint8_t bandera_cola = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		osStatus_t estado;
		char rec;
		const char* msg_ssid_ok = "\r\nSSID cambiado\r\n";
 8002798:	4b7c      	ldr	r3, [pc, #496]	; (800298c <wifi_set_func+0x220>)
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
		const char* msg_clave_ok = "Clave cambiada\r\n";
 800279c:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <wifi_set_func+0x224>)
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
		const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 80027a0:	4b7c      	ldr	r3, [pc, #496]	; (8002994 <wifi_set_func+0x228>)
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
		const char* msg_rtc1 = "\r\n\r\n========================\r\n" "| Configurar wifi |\r\n" "========================\r\n\r\n";
 80027a4:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <wifi_set_func+0x22c>)
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40
		const char* msg[2] = {"SSID: ", "\r\nClave: "};
 80027a8:	4a7c      	ldr	r2, [pc, #496]	; (800299c <wifi_set_func+0x230>)
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b2:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t contador_wifi = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	  /* Infinite loop */
	  for(;;)
	  {
		  ret_flag = osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	2100      	movs	r1, #0
 80027c2:	2001      	movs	r0, #1
 80027c4:	f00d feac 	bl	8010520 <osThreadFlagsWait>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  if (ret_flag == 1U) {
 80027ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d1f2      	bne.n	80027bc <wifi_set_func+0x50>
			  restart_loop:
 80027d6:	bf00      	nop
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg_rtc1, strlen(msg_rtc1), 10);
 80027d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027da:	f7fd fd49 	bl	8000270 <strlen>
 80027de:	4603      	mov	r3, r0
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	230a      	movs	r3, #10
 80027e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027e6:	486e      	ldr	r0, [pc, #440]	; (80029a0 <wifi_set_func+0x234>)
 80027e8:	f006 f833 	bl	8008852 <HAL_UART_Transmit>
			  for (int i = 0; i < 2; i++){
 80027ec:	2300      	movs	r3, #0
 80027ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80027f0:	e0a0      	b.n	8002934 <wifi_set_func+0x1c8>
				  HAL_UART_Transmit(&huart1, (uint8_t *)msg[i], strlen(msg[i]), 10);
 80027f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	3360      	adds	r3, #96	; 0x60
 80027f8:	443b      	add	r3, r7
 80027fa:	f853 4c54 	ldr.w	r4, [r3, #-84]
 80027fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	3360      	adds	r3, #96	; 0x60
 8002804:	443b      	add	r3, r7
 8002806:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fd30 	bl	8000270 <strlen>
 8002810:	4603      	mov	r3, r0
 8002812:	b29a      	uxth	r2, r3
 8002814:	230a      	movs	r3, #10
 8002816:	4621      	mov	r1, r4
 8002818:	4861      	ldr	r0, [pc, #388]	; (80029a0 <wifi_set_func+0x234>)
 800281a:	f006 f81a 	bl	8008852 <HAL_UART_Transmit>
				  HAL_UART_Receive_IT(&huart1, &rec_data, sizeof(rec_data));
 800281e:	2201      	movs	r2, #1
 8002820:	4960      	ldr	r1, [pc, #384]	; (80029a4 <wifi_set_func+0x238>)
 8002822:	485f      	ldr	r0, [pc, #380]	; (80029a0 <wifi_set_func+0x234>)
 8002824:	f006 f8a0 	bl	8008968 <HAL_UART_Receive_IT>
				  flag_rec = osThreadFlagsWait(0x00000003U, osFlagsWaitAny, osWaitForever);
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	2100      	movs	r1, #0
 800282e:	2003      	movs	r0, #3
 8002830:	f00d fe76 	bl	8010520 <osThreadFlagsWait>
 8002834:	6538      	str	r0, [r7, #80]	; 0x50
				  if ( flag_rec == 0x0001U){
 8002836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002838:	2b01      	cmp	r3, #1
 800283a:	d165      	bne.n	8002908 <wifi_set_func+0x19c>
					  printf("Salto de linea pulsado, bandera 0 recibida\r\n");
 800283c:	485a      	ldr	r0, [pc, #360]	; (80029a8 <wifi_set_func+0x23c>)
 800283e:	f012 f835 	bl	80148ac <puts>
					  while(bandera_cola) {
 8002842:	e029      	b.n	8002898 <wifi_set_func+0x12c>
						  estado = osMessageQueueGet(receive_wifi_queueHandle, &rec, NULL, pdMS_TO_TICKS(500));
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <wifi_set_func+0x240>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f107 0117 	add.w	r1, r7, #23
 800284c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002850:	2200      	movs	r2, #0
 8002852:	f00d ffd5 	bl	8010800 <osMessageQueueGet>
 8002856:	63b8      	str	r0, [r7, #56]	; 0x38
						  if (estado == osOK){
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11c      	bne.n	8002898 <wifi_set_func+0x12c>
							  if (rec == '\n' || rec == '\r') {
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b0a      	cmp	r3, #10
 8002862:	d002      	beq.n	800286a <wifi_set_func+0xfe>
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b0d      	cmp	r3, #13
 8002868:	d10a      	bne.n	8002880 <wifi_set_func+0x114>
								  recibido[contador_wifi] = '\0';
 800286a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	443b      	add	r3, r7
 8002872:	2200      	movs	r2, #0
 8002874:	f803 2c48 	strb.w	r2, [r3, #-72]
								  bandera_cola = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800287e:	e006      	b.n	800288e <wifi_set_func+0x122>
							  }
							  else
								  recibido[contador_wifi] = rec;
 8002880:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002884:	7dfa      	ldrb	r2, [r7, #23]
 8002886:	3360      	adds	r3, #96	; 0x60
 8002888:	443b      	add	r3, r7
 800288a:	f803 2c48 	strb.w	r2, [r3, #-72]
							  contador_wifi++;
 800288e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002892:	3301      	adds	r3, #1
 8002894:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					  while(bandera_cola) {
 8002898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1d1      	bne.n	8002844 <wifi_set_func+0xd8>
						  }
					  }
					  contador_wifi = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					  printf("recibido= %s\r\n",recibido);
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	4619      	mov	r1, r3
 80028ac:	4840      	ldr	r0, [pc, #256]	; (80029b0 <wifi_set_func+0x244>)
 80028ae:	f011 ff97 	bl	80147e0 <iprintf>
					  if (i==0)
 80028b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <wifi_set_func+0x15a>
						  strcpy(SSID, recibido);
 80028b8:	f107 0318 	add.w	r3, r7, #24
 80028bc:	4619      	mov	r1, r3
 80028be:	483d      	ldr	r0, [pc, #244]	; (80029b4 <wifi_set_func+0x248>)
 80028c0:	f012 fa99 	bl	8014df6 <strcpy>
 80028c4:	e008      	b.n	80028d8 <wifi_set_func+0x16c>
					  else if (i==1)
 80028c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <wifi_set_func+0x16c>
						  strcpy(PASSWORD, recibido);
 80028cc:	f107 0318 	add.w	r3, r7, #24
 80028d0:	4619      	mov	r1, r3
 80028d2:	4839      	ldr	r0, [pc, #228]	; (80029b8 <wifi_set_func+0x24c>)
 80028d4:	f012 fa8f 	bl	8014df6 <strcpy>
					  osMessageQueueReset(receive_wifi_queueHandle);
 80028d8:	4b34      	ldr	r3, [pc, #208]	; (80029ac <wifi_set_func+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f00d ffed 	bl	80108bc <osMessageQueueReset>
					  bandera_cola = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					  for (int j=0;j<=31;j++){
 80028e8:	2300      	movs	r3, #0
 80028ea:	657b      	str	r3, [r7, #84]	; 0x54
 80028ec:	e008      	b.n	8002900 <wifi_set_func+0x194>
						  recibido[j]='\0';
 80028ee:	f107 0218 	add.w	r2, r7, #24
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	4413      	add	r3, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
					  for (int j=0;j<=31;j++){
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	3301      	adds	r3, #1
 80028fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	2b1f      	cmp	r3, #31
 8002904:	ddf3      	ble.n	80028ee <wifi_set_func+0x182>
 8002906:	e012      	b.n	800292e <wifi_set_func+0x1c2>
					  }

				  } else if (flag_rec == 0x0002U){
 8002908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290a:	2b02      	cmp	r3, #2
 800290c:	d10f      	bne.n	800292e <wifi_set_func+0x1c2>
					  HAL_UART_Transmit(&huart1, (uint8_t *)msg_error, strlen(msg_error), 10);
 800290e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002910:	f7fd fcae 	bl	8000270 <strlen>
 8002914:	4603      	mov	r3, r0
 8002916:	b29a      	uxth	r2, r3
 8002918:	230a      	movs	r3, #10
 800291a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800291c:	4820      	ldr	r0, [pc, #128]	; (80029a0 <wifi_set_func+0x234>)
 800291e:	f005 ff98 	bl	8008852 <HAL_UART_Transmit>
					  osMessageQueueReset(receive_queueHandle);
 8002922:	4b26      	ldr	r3, [pc, #152]	; (80029bc <wifi_set_func+0x250>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f00d ffc8 	bl	80108bc <osMessageQueueReset>
					  goto restart_loop;
 800292c:	e754      	b.n	80027d8 <wifi_set_func+0x6c>
			  for (int i = 0; i < 2; i++){
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	3301      	adds	r3, #1
 8002932:	65bb      	str	r3, [r7, #88]	; 0x58
 8002934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002936:	2b01      	cmp	r3, #1
 8002938:	f77f af5b 	ble.w	80027f2 <wifi_set_func+0x86>
				  }
			  }

			  printf("SSID: %s | PASSWORD: %s",SSID, PASSWORD);
 800293c:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <wifi_set_func+0x24c>)
 800293e:	491d      	ldr	r1, [pc, #116]	; (80029b4 <wifi_set_func+0x248>)
 8002940:	481f      	ldr	r0, [pc, #124]	; (80029c0 <wifi_set_func+0x254>)
 8002942:	f011 ff4d 	bl	80147e0 <iprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg_ssid_ok, strlen(msg_ssid_ok), 10);
 8002946:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002948:	f7fd fc92 	bl	8000270 <strlen>
 800294c:	4603      	mov	r3, r0
 800294e:	b29a      	uxth	r2, r3
 8002950:	230a      	movs	r3, #10
 8002952:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002954:	4812      	ldr	r0, [pc, #72]	; (80029a0 <wifi_set_func+0x234>)
 8002956:	f005 ff7c 	bl	8008852 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg_clave_ok, strlen(msg_clave_ok), 10);
 800295a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800295c:	f7fd fc88 	bl	8000270 <strlen>
 8002960:	4603      	mov	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	230a      	movs	r3, #10
 8002966:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <wifi_set_func+0x234>)
 800296a:	f005 ff72 	bl	8008852 <HAL_UART_Transmit>
			  osThreadFlagsSet(wifiStartHandle, 0x0001U);
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <wifi_set_func+0x258>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f00d fd85 	bl	8010484 <osThreadFlagsSet>
			  bandera_cola = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			  osThreadSuspend(wifi_setHandle);
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <wifi_set_func+0x25c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f00d fd5b 	bl	8010440 <osThreadSuspend>
		  ret_flag = osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 800298a:	e717      	b.n	80027bc <wifi_set_func+0x50>
 800298c:	080188d0 	.word	0x080188d0
 8002990:	080188e4 	.word	0x080188e4
 8002994:	08018798 	.word	0x08018798
 8002998:	080188f8 	.word	0x080188f8
 800299c:	08018974 	.word	0x08018974
 80029a0:	20000494 	.word	0x20000494
 80029a4:	20000bbc 	.word	0x20000bbc
 80029a8:	08018804 	.word	0x08018804
 80029ac:	20000ad0 	.word	0x20000ad0
 80029b0:	08018830 	.word	0x08018830
 80029b4:	200002fc 	.word	0x200002fc
 80029b8:	2000031c 	.word	0x2000031c
 80029bc:	20000acc 	.word	0x20000acc
 80029c0:	08018948 	.word	0x08018948
 80029c4:	20000ab4 	.word	0x20000ab4
 80029c8:	20000ac4 	.word	0x20000ac4

080029cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
}
 80029d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <Error_Handler+0x8>
	...

080029d8 <prvConnectToServer>:


extern int modo_operacion;

TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <prvConnectToServer+0x80>)
 80029e2:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 80029e4:	f240 725b 	movw	r2, #1883	; 0x75b
 80029e8:	491c      	ldr	r1, [pc, #112]	; (8002a5c <prvConnectToServer+0x84>)
 80029ea:	481d      	ldr	r0, [pc, #116]	; (8002a60 <prvConnectToServer+0x88>)
 80029ec:	f011 fef8 	bl	80147e0 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 80029f0:	f107 0308 	add.w	r3, r7, #8
 80029f4:	2200      	movs	r2, #0
 80029f6:	9201      	str	r2, [sp, #4]
 80029f8:	f240 725b 	movw	r2, #1883	; 0x75b
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <prvConnectToServer+0x8c>)
 8002a00:	2100      	movs	r1, #0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f009 fe08 	bl	800c618 <WIFI_OpenClientConnection>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <prvConnectToServer+0x4e>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4814      	ldr	r0, [pc, #80]	; (8002a68 <prvConnectToServer+0x90>)
 8002a18:	f011 fee2 	bl	80147e0 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8002a1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002a20:	f00d fdff 	bl	8010622 <osDelay>
 8002a24:	e00f      	b.n	8002a46 <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3302      	adds	r3, #2
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f240 725b 	movw	r2, #1883	; 0x75b
 8002a40:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d1cb      	bne.n	80029e4 <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2ea035a9 	.word	0x2ea035a9
 8002a5c:	080189a4 	.word	0x080189a4
 8002a60:	080189c0 	.word	0x080189c0
 8002a64:	080189e4 	.word	0x080189e4
 8002a68:	080189ec 	.word	0x080189ec

08002a6c <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b094      	sub	sp, #80	; 0x50
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	7818      	ldrb	r0, [r3, #0]
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	f00d fba7 	bl	80101d4 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 8002a86:	f107 010c 	add.w	r1, r7, #12
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <prvCreateMQTTConnectionWithBroker+0xd8>)
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <prvCreateMQTTConnectionWithBroker+0xdc>)
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <prvCreateMQTTConnectionWithBroker+0xe0>)
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f00b f9c0 	bl	800de18 <MQTT_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 8002a9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <prvCreateMQTTConnectionWithBroker+0x4e>
    printf("MQTT initialized\n");
 8002abc:	4824      	ldr	r0, [pc, #144]	; (8002b50 <prvCreateMQTTConnectionWithBroker+0xe4>)
 8002abe:	f011 fef5 	bl	80148ac <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8002ac2:	f107 0320 	add.w	r3, r7, #32
 8002ac6:	221c      	movs	r2, #28
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f012 f84c 	bl	8014b68 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 8002ada:	2317      	movs	r3, #23
 8002adc:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <prvCreateMQTTConnectionWithBroker+0xec>)
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8002ae2:	2323      	movs	r3, #35	; 0x23
 8002ae4:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fd fbc0 	bl	8000270 <strlen>
 8002af0:	4603      	mov	r3, r0
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8002af6:	233c      	movs	r3, #60	; 0x3c
 8002af8:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8002afa:	f107 0120 	add.w	r1, r7, #32
 8002afe:	f107 031f 	add.w	r3, r7, #31
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f00b f9d9 	bl	800dec2 <MQTT_Connect>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8002b16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <prvCreateMQTTConnectionWithBroker+0xc8>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <prvCreateMQTTConnectionWithBroker+0xc6>
    printf("MQTT connected to broker\n");
 8002b34:	4809      	ldr	r0, [pc, #36]	; (8002b5c <prvCreateMQTTConnectionWithBroker+0xf0>)
 8002b36:	f011 feb9 	bl	80148ac <puts>

}
 8002b3a:	bf00      	nop
 8002b3c:	3748      	adds	r7, #72	; 0x48
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000009c 	.word	0x2000009c
 8002b48:	08002de9 	.word	0x08002de9
 8002b4c:	08002db9 	.word	0x08002db9
 8002b50:	08018a14 	.word	0x08018a14
 8002b54:	08018a28 	.word	0x08018a28
 8002b58:	08018a40 	.word	0x08018a40
 8002b5c:	08018a64 	.word	0x08018a64

08002b60 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	2214      	movs	r2, #20
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f011 fff7 	bl	8014b68 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f7fd fb72 	bl	8000270 <strlen>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fb6a 	bl	8000270 <strlen>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f00b fa35 	bl	800e018 <MQTT_Publish>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(xResult==MQTTSuccess) printf("Published to topic %s: %s\n",topic,payload);
 8002bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <prvMQTTPublishToTopic+0x66>
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <prvMQTTPublishToTopic+0x70>)
 8002bc2:	f011 fe0d 	bl	80147e0 <iprintf>
    //configASSERT( xResult == MQTTSuccess );
}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	08018a80 	.word	0x08018a80

08002bd4 <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	220c      	movs	r2, #12
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f011 ffba 	bl	8014b68 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f00b fb11 	bl	800e21c <MQTT_GetPacketId>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <prvMQTTSubscribeToTopic+0xa4>)
 8002c00:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8002c0a:	6838      	ldr	r0, [r7, #0]
 8002c0c:	f7fd fb30 	bl	8000270 <strlen>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <prvMQTTSubscribeToTopic+0xa4>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	f107 0108 	add.w	r1, r7, #8
 8002c1e:	2201      	movs	r2, #1
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f00b f9c6 	bl	800dfb2 <MQTT_Subscribe>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) printf("Subscription to %s, result: %d, success\n",topic,xResult);
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <prvMQTTSubscribeToTopic+0x6a>
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	461a      	mov	r2, r3
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4811      	ldr	r0, [pc, #68]	; (8002c7c <prvMQTTSubscribeToTopic+0xa8>)
 8002c38:	f011 fdd2 	bl	80147e0 <iprintf>
 8002c3c:	e005      	b.n	8002c4a <prvMQTTSubscribeToTopic+0x76>
        else printf("Subscription to %s, result: %d, failed\n",topic,xResult);
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	461a      	mov	r2, r3
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	480e      	ldr	r0, [pc, #56]	; (8002c80 <prvMQTTSubscribeToTopic+0xac>)
 8002c46:	f011 fdcb 	bl	80147e0 <iprintf>
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f00b fac6 	bl	800e1dc <MQTT_ProcessLoop>
 8002c50:	4603      	mov	r3, r0
 8002c52:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <prvMQTTSubscribeToTopic+0xb0>)
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d102      	bne.n	8002c66 <prvMQTTSubscribeToTopic+0x92>
        {
            xFailedSubscribeToTopic = true;
 8002c60:	2301      	movs	r3, #1
 8002c62:	75bb      	strb	r3, [r7, #22]
            break;
 8002c64:	e003      	b.n	8002c6e <prvMQTTSubscribeToTopic+0x9a>
        }

    } while( xFailedSubscribeToTopic == true  );
 8002c66:	7dbb      	ldrb	r3, [r7, #22]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1d4      	bne.n	8002c16 <prvMQTTSubscribeToTopic+0x42>
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000fa8 	.word	0x20000fa8
 8002c7c:	08018a9c 	.word	0x08018a9c
 8002c80:	08018ac8 	.word	0x08018ac8
 8002c84:	200000a4 	.word	0x200000a4

08002c88 <prvMQTTProcessIncomingPublish>:

int prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b0c9      	sub	sp, #292	; 0x124
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c96:	6018      	str	r0, [r3, #0]
	char buffer2[128];
	int resultado_int;
    //const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8002c98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68d9      	ldr	r1, [r3, #12]
 8002ca4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ca8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb2:	bf28      	it	cs
 8002cb4:	237f      	movcs	r3, #127	; 0x7f
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f012 f8a2 	bl	8014e06 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 8002cc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002cc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	bf28      	it	cs
 8002cd6:	4613      	movcs	r3, r2
 8002cd8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002cdc:	443b      	add	r3, r7
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f803 2c94 	strb.w	r2, [r3, #-148]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 8002ce4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ce8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002cf4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	891b      	ldrh	r3, [r3, #8]
 8002cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8002cfe:	bf28      	it	cs
 8002d00:	237f      	movcs	r3, #127	; 0x7f
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f012 f87b 	bl	8014e06 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8002d10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	891b      	ldrh	r3, [r3, #8]
 8002d1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002d20:	4293      	cmp	r3, r2
 8002d22:	bf28      	it	cs
 8002d24:	4613      	movcs	r3, r2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

	//printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);

	char *key = "\"value\": ";
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <prvMQTTProcessIncomingPublish+0x12c>)
 8002d38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	char *value = strstr(buffer1, key) + strlen(key);
 8002d3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002d40:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002d44:	4618      	mov	r0, r3
 8002d46:	f011 ffa5 	bl	8014c94 <strstr>
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8002d50:	f7fd fa8e 	bl	8000270 <strlen>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4423      	add	r3, r4
 8002d58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	char *end = strchr(value, ',');
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002d62:	f011 ff09 	bl	8014b78 <strchr>
 8002d66:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	if (end == NULL) {
 8002d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <prvMQTTProcessIncomingPublish+0xf8>
	    end = strchr(value, '}');
 8002d72:	217d      	movs	r1, #125	; 0x7d
 8002d74:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002d78:	f011 fefe 	bl	8014b78 <strchr>
 8002d7c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	}
	char *result = strndup(value, end - value);
 8002d80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002d90:	f011 ff96 	bl	8014cc0 <strndup>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  // Actuar localmente sobre los LEDs o alguna otra cosa
	//if(buffer1[0]=='1') BSP_LED_On(LED2);
	//if(buffer1[0]=='0') BSP_LED_Off(LED2);

	resultado_int = atoi(result);
 8002d9a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002d9e:	f010 fd43 	bl	8013828 <atoi>
 8002da2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	//printf("Resultado entero: %d.\n\r",resultado_int);

	return resultado_int;
 8002da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c

}
 8002daa:	4618      	mov	r0, r3
 8002dac:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	08018af0 	.word	0x08018af0

08002db8 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8002dc6:	f00e ff87 	bl	8011cd8 <xTaskGetTickCount>
 8002dca:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <prvGetTimeMs+0x2c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8002dda:	683b      	ldr	r3, [r7, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000fac 	.word	0x20000fac

08002de8 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    //printf("Ha llegado un paquete MQTT. \n\r");
    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfc:	2b30      	cmp	r3, #48	; 0x30
 8002dfe:	d108      	bne.n	8002e12 <prvEventCallback+0x2a>
    {
        //printf("Ha llegado un paquete tipo Publish. \n\r");
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
    	modo_operacion = prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff3f 	bl	8002c88 <prvMQTTProcessIncomingPublish>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <prvEventCallback+0x44>)
 8002e0e:	6013      	str	r3, [r2, #0]
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    	//printf("Modo op dentro de prvEventCallback: %d.\n\r",modo_operacion);
    }

}
 8002e10:	e007      	b.n	8002e22 <prvEventCallback+0x3a>
    	modo_operacion = prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff36 	bl	8002c88 <prvMQTTProcessIncomingPublish>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4a03      	ldr	r2, [pc, #12]	; (8002e2c <prvEventCallback+0x44>)
 8002e20:	6013      	str	r3, [r2, #0]
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000b1c 	.word	0x20000b1c

08002e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6613      	str	r3, [r2, #96]	; 0x60
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_MspInit+0x4c>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	210f      	movs	r1, #15
 8002e6a:	f06f 0001 	mvn.w	r0, #1
 8002e6e:	f000 fdf4 	bl	8003a5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0ac      	sub	sp, #176	; 0xb0
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2288      	movs	r2, #136	; 0x88
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f011 fe61 	bl	8014b68 <memset>
  if(DFSDM1_Init == 0)
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d142      	bne.n	8002f34 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 f952 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002eca:	f7ff fd7f 	bl	80029cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002eec:	f043 0310 	orr.w	r3, r3, #16
 8002ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002efe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002f18:	2306      	movs	r3, #6
 8002f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f22:	4619      	mov	r1, r3
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002f26:	f000 ff69 	bl	8003dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a02      	ldr	r2, [pc, #8]	; (8002f3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002f32:	6013      	str	r3, [r2, #0]
  }

}
 8002f34:	bf00      	nop
 8002f36:	37b0      	adds	r7, #176	; 0xb0
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000fb0 	.word	0x20000fb0
 8002f40:	40021000 	.word	0x40021000
 8002f44:	48001000 	.word	0x48001000

08002f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0ac      	sub	sp, #176	; 0xb0
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2288      	movs	r2, #136	; 0x88
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f011 fdfd 	bl	8014b68 <memset>
  if(hi2c->Instance==I2C2)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <HAL_I2C_MspInit+0xb0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d13b      	bne.n	8002ff0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 f8ef 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f90:	f7ff fd1c 	bl	80029cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_I2C_MspInit+0xb4>)
 8002f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_I2C_MspInit+0xb4>)
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <HAL_I2C_MspInit+0xb4>)
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002fac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fb4:	2312      	movs	r3, #18
 8002fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	480b      	ldr	r0, [pc, #44]	; (8003000 <HAL_I2C_MspInit+0xb8>)
 8002fd4:	f000 ff12 	bl	8003dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_I2C_MspInit+0xb4>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_I2C_MspInit+0xb4>)
 8002fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_I2C_MspInit+0xb4>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	37b0      	adds	r7, #176	; 0xb0
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40005800 	.word	0x40005800
 8002ffc:	40021000 	.word	0x40021000
 8003000:	48000400 	.word	0x48000400

08003004 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <HAL_I2C_MspDeInit+0x3c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10f      	bne.n	8003036 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_I2C_MspDeInit+0x40>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_I2C_MspDeInit+0x40>)
 800301c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003020:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003026:	4808      	ldr	r0, [pc, #32]	; (8003048 <HAL_I2C_MspDeInit+0x44>)
 8003028:	f001 f892 	bl	8004150 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800302c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <HAL_I2C_MspDeInit+0x44>)
 8003032:	f001 f88d 	bl	8004150 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40005800 	.word	0x40005800
 8003044:	40021000 	.word	0x40021000
 8003048:	48000400 	.word	0x48000400

0800304c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_QSPI_MspInit+0x7c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d128      	bne.n	80030c0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_QSPI_MspInit+0x80>)
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_QSPI_MspInit+0x80>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6513      	str	r3, [r2, #80]	; 0x50
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_QSPI_MspInit+0x80>)
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_QSPI_MspInit+0x80>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_QSPI_MspInit+0x80>)
 800308c:	f043 0310 	orr.w	r3, r3, #16
 8003090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_QSPI_MspInit+0x80>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800309e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80030a2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80030b0:	230a      	movs	r3, #10
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <HAL_QSPI_MspInit+0x84>)
 80030bc:	f000 fe9e 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80030c0:	bf00      	nop
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	a0001000 	.word	0xa0001000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	48001000 	.word	0x48001000

080030d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0a4      	sub	sp, #144	; 0x90
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	2288      	movs	r2, #136	; 0x88
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f011 fd3f 	bl	8014b68 <memset>
  if(hrtc->Instance==RTC)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a10      	ldr	r2, [pc, #64]	; (8003130 <HAL_RTC_MspInit+0x5c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d118      	bne.n	8003126 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	4618      	mov	r0, r3
 8003108:	f003 f82e 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003112:	f7ff fc5b 	bl	80029cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_RTC_MspInit+0x60>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <HAL_RTC_MspInit+0x60>)
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3790      	adds	r7, #144	; 0x90
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40002800 	.word	0x40002800
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_SPI_MspInit+0x8c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d130      	bne.n	80031bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_SPI_MspInit+0x90>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_SPI_MspInit+0x90>)
 8003160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_SPI_MspInit+0x90>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_SPI_MspInit+0x90>)
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_SPI_MspInit+0x90>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_SPI_MspInit+0x90>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800318a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800318e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003198:	2303      	movs	r3, #3
 800319a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800319c:	2306      	movs	r3, #6
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_SPI_MspInit+0x94>)
 80031a8:	f000 fe28 	bl	8003dfc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2105      	movs	r1, #5
 80031b0:	2033      	movs	r0, #51	; 0x33
 80031b2:	f000 fc52 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80031b6:	2033      	movs	r0, #51	; 0x33
 80031b8:	f000 fc6b 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031bc:	bf00      	nop
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40003c00 	.word	0x40003c00
 80031c8:	40021000 	.word	0x40021000
 80031cc:	48000800 	.word	0x48000800

080031d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_SPI_MspDeInit+0x38>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10d      	bne.n	80031fe <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_SPI_MspDeInit+0x3c>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_SPI_MspDeInit+0x3c>)
 80031e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031ec:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80031ee:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80031f2:	4807      	ldr	r0, [pc, #28]	; (8003210 <HAL_SPI_MspDeInit+0x40>)
 80031f4:	f000 ffac 	bl	8004150 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 80031f8:	2033      	movs	r0, #51	; 0x33
 80031fa:	f000 fc58 	bl	8003aae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40003c00 	.word	0x40003c00
 800320c:	40021000 	.word	0x40021000
 8003210:	48000800 	.word	0x48000800

08003214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0ae      	sub	sp, #184	; 0xb8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2288      	movs	r2, #136	; 0x88
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f011 fc97 	bl	8014b68 <memset>
  if(huart->Instance==USART1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a46      	ldr	r2, [pc, #280]	; (8003358 <HAL_UART_MspInit+0x144>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d143      	bne.n	80032cc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003244:	2301      	movs	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003248:	2300      	movs	r3, #0
 800324a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	4618      	mov	r0, r3
 8003252:	f002 ff89 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800325c:	f7ff fbb6 	bl	80029cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003260:	4b3e      	ldr	r3, [pc, #248]	; (800335c <HAL_UART_MspInit+0x148>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003264:	4a3d      	ldr	r2, [pc, #244]	; (800335c <HAL_UART_MspInit+0x148>)
 8003266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326a:	6613      	str	r3, [r2, #96]	; 0x60
 800326c:	4b3b      	ldr	r3, [pc, #236]	; (800335c <HAL_UART_MspInit+0x148>)
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003278:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_UART_MspInit+0x148>)
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	4a37      	ldr	r2, [pc, #220]	; (800335c <HAL_UART_MspInit+0x148>)
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003284:	4b35      	ldr	r3, [pc, #212]	; (800335c <HAL_UART_MspInit+0x148>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003290:	23c0      	movs	r3, #192	; 0xc0
 8003292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a2:	2303      	movs	r3, #3
 80032a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a8:	2307      	movs	r3, #7
 80032aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032b2:	4619      	mov	r1, r3
 80032b4:	482a      	ldr	r0, [pc, #168]	; (8003360 <HAL_UART_MspInit+0x14c>)
 80032b6:	f000 fda1 	bl	8003dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2105      	movs	r1, #5
 80032be:	2025      	movs	r0, #37	; 0x25
 80032c0:	f000 fbcb 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032c4:	2025      	movs	r0, #37	; 0x25
 80032c6:	f000 fbe4 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032ca:	e040      	b.n	800334e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_UART_MspInit+0x150>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d13b      	bne.n	800334e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80032d6:	2304      	movs	r3, #4
 80032d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80032da:	2300      	movs	r3, #0
 80032dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 ff40 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 80032ee:	f7ff fb6d 	bl	80029cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <HAL_UART_MspInit+0x148>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	4a19      	ldr	r2, [pc, #100]	; (800335c <HAL_UART_MspInit+0x148>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fc:	6593      	str	r3, [r2, #88]	; 0x58
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_UART_MspInit+0x148>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_UART_MspInit+0x148>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	4a13      	ldr	r2, [pc, #76]	; (800335c <HAL_UART_MspInit+0x148>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_UART_MspInit+0x148>)
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800333c:	2307      	movs	r3, #7
 800333e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003342:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003346:	4619      	mov	r1, r3
 8003348:	4807      	ldr	r0, [pc, #28]	; (8003368 <HAL_UART_MspInit+0x154>)
 800334a:	f000 fd57 	bl	8003dfc <HAL_GPIO_Init>
}
 800334e:	bf00      	nop
 8003350:	37b8      	adds	r7, #184	; 0xb8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40013800 	.word	0x40013800
 800335c:	40021000 	.word	0x40021000
 8003360:	48000400 	.word	0x48000400
 8003364:	40004800 	.word	0x40004800
 8003368:	48000c00 	.word	0x48000c00

0800336c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b0ac      	sub	sp, #176	; 0xb0
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	2288      	movs	r2, #136	; 0x88
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f011 fbeb 	bl	8014b68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339a:	d17c      	bne.n	8003496 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800339c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80033a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80033b2:	2318      	movs	r3, #24
 80033b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80033b6:	2307      	movs	r3, #7
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80033ba:	2302      	movs	r3, #2
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80033be:	2302      	movs	r3, #2
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80033c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 fecb 	bl	8006168 <HAL_RCCEx_PeriphCLKConfig>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80033d8:	f7ff faf8 	bl	80029cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 80033de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e0:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80033f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003412:	f000 fcf3 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003416:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003430:	230a      	movs	r3, #10
 8003432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003436:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800343a:	4619      	mov	r1, r3
 800343c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003440:	f000 fcdc 	bl	8003dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 800344a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800344e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d114      	bne.n	8003492 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	; 0x58
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003480:	f001 ffa6 	bl	80053d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_PCD_MspInit+0x134>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003490:	e001      	b.n	8003496 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003492:	f001 ff9d 	bl	80053d0 <HAL_PWREx_EnableVddUSB>
}
 8003496:	bf00      	nop
 8003498:	37b0      	adds	r7, #176	; 0xb0
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000

080034a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <NMI_Handler+0x4>

080034aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ae:	e7fe      	b.n	80034ae <HardFault_Handler+0x4>

080034b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b4:	e7fe      	b.n	80034b4 <MemManage_Handler+0x4>

080034b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ba:	e7fe      	b.n	80034ba <BusFault_Handler+0x4>

080034bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <UsageFault_Handler+0x4>

080034c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d4:	f000 f97e 	bl	80037d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80034d8:	f00e ff34 	bl	8012344 <xTaskGetSchedulerState>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80034e2:	f00f ff09 	bl	80132f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}

080034ea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 80034ee:	2002      	movs	r0, #2
 80034f0:	f000 ff52 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80034fc:	2020      	movs	r0, #32
 80034fe:	f000 ff4b 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003502:	2040      	movs	r0, #64	; 0x40
 8003504:	f000 ff48 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003508:	2080      	movs	r0, #128	; 0x80
 800350a:	f000 ff45 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800350e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003512:	f000 ff41 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <USART1_IRQHandler+0x10>)
 8003522:	f005 fa6d 	bl	8008a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000494 	.word	0x20000494

08003530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003534:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003538:	f000 ff2e 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800353c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003540:	f000 ff2a 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003544:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003548:	f000 ff26 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800354c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003550:	f000 ff22 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003554:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003558:	f000 ff1e 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	bd80      	pop	{r7, pc}

08003560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return 1;
 8003564:	2301      	movs	r3, #1
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <_kill>:

int _kill(int pid, int sig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800357a:	f011 fc0f 	bl	8014d9c <__errno>
 800357e:	4603      	mov	r3, r0
 8003580:	2216      	movs	r2, #22
 8003582:	601a      	str	r2, [r3, #0]
  return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_exit>:

void _exit (int status)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003598:	f04f 31ff 	mov.w	r1, #4294967295
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ffe7 	bl	8003570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035a2:	e7fe      	b.n	80035a2 <_exit+0x12>

080035a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e00a      	b.n	80035cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035b6:	f3af 8000 	nop.w
 80035ba:	4601      	mov	r1, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	60ba      	str	r2, [r7, #8]
 80035c2:	b2ca      	uxtb	r2, r1
 80035c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3301      	adds	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dbf0      	blt.n	80035b6 <_read+0x12>
  }

  return len;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_close>:
  }
  return len;
}

int _close(int file)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003606:	605a      	str	r2, [r3, #4]
  return 0;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_isatty>:

int _isatty(int file)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <_sbrk+0x5c>)
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <_sbrk+0x60>)
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <_sbrk+0x64>)
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <_sbrk+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003678:	f011 fb90 	bl	8014d9c <__errno>
 800367c:	4603      	mov	r3, r0
 800367e:	220c      	movs	r2, #12
 8003680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	e009      	b.n	800369c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <_sbrk+0x64>)
 8003698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20018000 	.word	0x20018000
 80036a8:	00000400 	.word	0x00000400
 80036ac:	20000fb4 	.word	0x20000fb4
 80036b0:	20004ff0 	.word	0x20004ff0

080036b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <SystemInit+0x20>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <SystemInit+0x20>)
 80036c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <Reset_Handler>:
 80036d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003710 <LoopForever+0x2>
 80036dc:	f7ff ffea 	bl	80036b4 <SystemInit>
 80036e0:	480c      	ldr	r0, [pc, #48]	; (8003714 <LoopForever+0x6>)
 80036e2:	490d      	ldr	r1, [pc, #52]	; (8003718 <LoopForever+0xa>)
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <LoopForever+0xe>)
 80036e6:	2300      	movs	r3, #0
 80036e8:	e002      	b.n	80036f0 <LoopCopyDataInit>

080036ea <CopyDataInit>:
 80036ea:	58d4      	ldr	r4, [r2, r3]
 80036ec:	50c4      	str	r4, [r0, r3]
 80036ee:	3304      	adds	r3, #4

080036f0 <LoopCopyDataInit>:
 80036f0:	18c4      	adds	r4, r0, r3
 80036f2:	428c      	cmp	r4, r1
 80036f4:	d3f9      	bcc.n	80036ea <CopyDataInit>
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <LoopForever+0x12>)
 80036f8:	4c0a      	ldr	r4, [pc, #40]	; (8003724 <LoopForever+0x16>)
 80036fa:	2300      	movs	r3, #0
 80036fc:	e001      	b.n	8003702 <LoopFillZerobss>

080036fe <FillZerobss>:
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	3204      	adds	r2, #4

08003702 <LoopFillZerobss>:
 8003702:	42a2      	cmp	r2, r4
 8003704:	d3fb      	bcc.n	80036fe <FillZerobss>
 8003706:	f011 fb4f 	bl	8014da8 <__libc_init_array>
 800370a:	f7fd fcb5 	bl	8001078 <main>

0800370e <LoopForever>:
 800370e:	e7fe      	b.n	800370e <LoopForever>
 8003710:	20018000 	.word	0x20018000
 8003714:	20000000 	.word	0x20000000
 8003718:	200002e0 	.word	0x200002e0
 800371c:	0801a3d4 	.word	0x0801a3d4
 8003720:	200002e0 	.word	0x200002e0
 8003724:	20004fec 	.word	0x20004fec

08003728 <ADC1_2_IRQHandler>:
 8003728:	e7fe      	b.n	8003728 <ADC1_2_IRQHandler>

0800372a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003734:	2003      	movs	r0, #3
 8003736:	f000 f985 	bl	8003a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800373a:	200f      	movs	r0, #15
 800373c:	f000 f80e 	bl	800375c <HAL_InitTick>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	71fb      	strb	r3, [r7, #7]
 800374a:	e001      	b.n	8003750 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800374c:	f7ff fb70 	bl	8002e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003750:	79fb      	ldrb	r3, [r7, #7]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <HAL_InitTick+0x6c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d023      	beq.n	80037b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <HAL_InitTick+0x70>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_InitTick+0x6c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f99f 	bl	8003aca <HAL_SYSTICK_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	d809      	bhi.n	80037ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003798:	2200      	movs	r2, #0
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f000 f95b 	bl	8003a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_InitTick+0x74>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e007      	b.n	80037bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	e004      	b.n	80037bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	e001      	b.n	80037bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200000b4 	.word	0x200000b4
 80037cc:	200000ac 	.word	0x200000ac
 80037d0:	200000b0 	.word	0x200000b0

080037d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_IncTick+0x20>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_IncTick+0x24>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_IncTick+0x24>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	200000b4 	.word	0x200000b4
 80037f8:	20000fb8 	.word	0x20000fb8

080037fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_GetTick+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000fb8 	.word	0x20000fb8

08003814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7ff ffee 	bl	80037fc <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d005      	beq.n	800383a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_Delay+0x44>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800383a:	bf00      	nop
 800383c:	f7ff ffde 	bl	80037fc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d8f7      	bhi.n	800383c <HAL_Delay+0x28>
  {
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200000b4 	.word	0x200000b4

0800385c <__NVIC_SetPriorityGrouping>:
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <__NVIC_SetPriorityGrouping+0x44>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003878:	4013      	ands	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	60d3      	str	r3, [r2, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_GetPriorityGrouping>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <__NVIC_GetPriorityGrouping+0x18>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	f003 0307 	and.w	r3, r3, #7
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <__NVIC_EnableIRQ>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	db0b      	blt.n	80038ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	4907      	ldr	r1, [pc, #28]	; (80038f8 <__NVIC_EnableIRQ+0x38>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2001      	movs	r0, #1
 80038e2:	fa00 f202 	lsl.w	r2, r0, r2
 80038e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	e000e100 	.word	0xe000e100

080038fc <__NVIC_DisableIRQ>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db12      	blt.n	8003934 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	490a      	ldr	r1, [pc, #40]	; (8003940 <__NVIC_DisableIRQ+0x44>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	3320      	adds	r3, #32
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003928:	f3bf 8f4f 	dsb	sy
}
 800392c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800392e:	f3bf 8f6f 	isb	sy
}
 8003932:	bf00      	nop
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100

08003944 <__NVIC_SetPriority>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	; (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	; (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <NVIC_EncodePriority>:
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f1c3 0307 	rsb	r3, r3, #7
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	bf28      	it	cs
 80039b6:	2304      	movcs	r3, #4
 80039b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3304      	adds	r3, #4
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d902      	bls.n	80039c8 <NVIC_EncodePriority+0x30>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3b03      	subs	r3, #3
 80039c6:	e000      	b.n	80039ca <NVIC_EncodePriority+0x32>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	401a      	ands	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43d9      	mvns	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	4313      	orrs	r3, r2
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <SysTick_Config>:
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a10:	d301      	bcc.n	8003a16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00f      	b.n	8003a36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <SysTick_Config+0x40>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1e:	210f      	movs	r1, #15
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	f7ff ff8e 	bl	8003944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <SysTick_Config+0x40>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SysTick_Config+0x40>)
 8003a30:	2207      	movs	r2, #7
 8003a32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000e010 	.word	0xe000e010

08003a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff05 	bl	800385c <__NVIC_SetPriorityGrouping>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a6c:	f7ff ff1a 	bl	80038a4 <__NVIC_GetPriorityGrouping>
 8003a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff ff8e 	bl	8003998 <NVIC_EncodePriority>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff5d 	bl	8003944 <__NVIC_SetPriority>
}
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff0d 	bl	80038c0 <__NVIC_EnableIRQ>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff1d 	bl	80038fc <__NVIC_DisableIRQ>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff94 	bl	8003a00 <SysTick_Config>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0ac      	b.n	8003c50 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f8b2 	bl	8003c64 <DFSDM_GetChannelFromInstance>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4a55      	ldr	r2, [pc, #340]	; (8003c58 <HAL_DFSDM_ChannelInit+0x174>)
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e09f      	b.n	8003c50 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff f9b5 	bl	8002e80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b16:	4b51      	ldr	r3, [pc, #324]	; (8003c5c <HAL_DFSDM_ChannelInit+0x178>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a4f      	ldr	r2, [pc, #316]	; (8003c5c <HAL_DFSDM_ChannelInit+0x178>)
 8003b1e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b20:	4b4e      	ldr	r3, [pc, #312]	; (8003c5c <HAL_DFSDM_ChannelInit+0x178>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d125      	bne.n	8003b74 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b28:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b32:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b34:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4948      	ldr	r1, [pc, #288]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a46      	ldr	r2, [pc, #280]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b48:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003b4c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	791b      	ldrb	r3, [r3, #4]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d108      	bne.n	8003b68 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b56:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	493f      	ldr	r1, [pc, #252]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b68:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b72:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b82:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b92:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b98:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 020f 	bic.w	r2, r2, #15
 8003bb0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6819      	ldr	r1, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003bd8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6899      	ldr	r1, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	3b01      	subs	r3, #1
 8003bea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f002 0207 	and.w	r2, r2, #7
 8003c04:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f810 	bl	8003c64 <DFSDM_GetChannelFromInstance>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4904      	ldr	r1, [pc, #16]	; (8003c58 <HAL_DFSDM_ChannelInit+0x174>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000fc0 	.word	0x20000fc0
 8003c5c:	20000fbc 	.word	0x20000fbc
 8003c60:	40016000 	.word	0x40016000

08003c64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d102      	bne.n	8003c7a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e02b      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <DFSDM_GetChannelFromInstance+0x80>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d102      	bne.n	8003c88 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e024      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <DFSDM_GetChannelFromInstance+0x84>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d102      	bne.n	8003c96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003c90:	2302      	movs	r3, #2
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e01d      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <DFSDM_GetChannelFromInstance+0x88>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d102      	bne.n	8003ca4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e016      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d102      	bne.n	8003cb2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003cac:	2305      	movs	r3, #5
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e00f      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <DFSDM_GetChannelFromInstance+0x90>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d102      	bne.n	8003cc0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003cba:	2306      	movs	r3, #6
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e008      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <DFSDM_GetChannelFromInstance+0x94>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003cc8:	2307      	movs	r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e001      	b.n	8003cd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40016000 	.word	0x40016000
 8003ce4:	40016020 	.word	0x40016020
 8003ce8:	40016040 	.word	0x40016040
 8003cec:	40016080 	.word	0x40016080
 8003cf0:	400160a0 	.word	0x400160a0
 8003cf4:	400160c0 	.word	0x400160c0
 8003cf8:	400160e0 	.word	0x400160e0

08003cfc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d008      	beq.n	8003d26 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e022      	b.n	8003d6c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 020e 	bic.w	r2, r2, #14
 8003d34:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f003 021c 	and.w	r2, r3, #28
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d005      	beq.n	8003d9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e029      	b.n	8003df0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 020e 	bic.w	r2, r2, #14
 8003daa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	f003 021c 	and.w	r2, r3, #28
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
    }
  }
  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0a:	e17f      	b.n	800410c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8171 	beq.w	8004106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d005      	beq.n	8003e3c <HAL_GPIO_Init+0x40>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d130      	bne.n	8003e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e72:	2201      	movs	r2, #1
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	f003 0201 	and.w	r2, r3, #1
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d118      	bne.n	8003edc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	08db      	lsrs	r3, r3, #3
 8003ec6:	f003 0201 	and.w	r2, r3, #1
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d017      	beq.n	8003f18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d123      	bne.n	8003f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	08da      	lsrs	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3208      	adds	r2, #8
 8003f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	220f      	movs	r2, #15
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	08da      	lsrs	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3208      	adds	r2, #8
 8003f66:	6939      	ldr	r1, [r7, #16]
 8003f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80ac 	beq.w	8004106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fae:	4b5f      	ldr	r3, [pc, #380]	; (800412c <HAL_GPIO_Init+0x330>)
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	4a5e      	ldr	r2, [pc, #376]	; (800412c <HAL_GPIO_Init+0x330>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8003fba:	4b5c      	ldr	r3, [pc, #368]	; (800412c <HAL_GPIO_Init+0x330>)
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fc6:	4a5a      	ldr	r2, [pc, #360]	; (8004130 <HAL_GPIO_Init+0x334>)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	089b      	lsrs	r3, r3, #2
 8003fcc:	3302      	adds	r3, #2
 8003fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ff0:	d025      	beq.n	800403e <HAL_GPIO_Init+0x242>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4f      	ldr	r2, [pc, #316]	; (8004134 <HAL_GPIO_Init+0x338>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01f      	beq.n	800403a <HAL_GPIO_Init+0x23e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4e      	ldr	r2, [pc, #312]	; (8004138 <HAL_GPIO_Init+0x33c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d019      	beq.n	8004036 <HAL_GPIO_Init+0x23a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4d      	ldr	r2, [pc, #308]	; (800413c <HAL_GPIO_Init+0x340>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0x236>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4c      	ldr	r2, [pc, #304]	; (8004140 <HAL_GPIO_Init+0x344>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00d      	beq.n	800402e <HAL_GPIO_Init+0x232>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4b      	ldr	r2, [pc, #300]	; (8004144 <HAL_GPIO_Init+0x348>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <HAL_GPIO_Init+0x22e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <HAL_GPIO_Init+0x34c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_GPIO_Init+0x22a>
 8004022:	2306      	movs	r3, #6
 8004024:	e00c      	b.n	8004040 <HAL_GPIO_Init+0x244>
 8004026:	2307      	movs	r3, #7
 8004028:	e00a      	b.n	8004040 <HAL_GPIO_Init+0x244>
 800402a:	2305      	movs	r3, #5
 800402c:	e008      	b.n	8004040 <HAL_GPIO_Init+0x244>
 800402e:	2304      	movs	r3, #4
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x244>
 8004032:	2303      	movs	r3, #3
 8004034:	e004      	b.n	8004040 <HAL_GPIO_Init+0x244>
 8004036:	2302      	movs	r3, #2
 8004038:	e002      	b.n	8004040 <HAL_GPIO_Init+0x244>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_GPIO_Init+0x244>
 800403e:	2300      	movs	r3, #0
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	f002 0203 	and.w	r2, r2, #3
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	4093      	lsls	r3, r2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004050:	4937      	ldr	r1, [pc, #220]	; (8004130 <HAL_GPIO_Init+0x334>)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800405e:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_GPIO_Init+0x350>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004082:	4a32      	ldr	r2, [pc, #200]	; (800414c <HAL_GPIO_Init+0x350>)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_GPIO_Init+0x350>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <HAL_GPIO_Init+0x350>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040b2:	4b26      	ldr	r3, [pc, #152]	; (800414c <HAL_GPIO_Init+0x350>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040d6:	4a1d      	ldr	r2, [pc, #116]	; (800414c <HAL_GPIO_Init+0x350>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_GPIO_Init+0x350>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004100:	4a12      	ldr	r2, [pc, #72]	; (800414c <HAL_GPIO_Init+0x350>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3301      	adds	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	fa22 f303 	lsr.w	r3, r2, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	f47f ae78 	bne.w	8003e0c <HAL_GPIO_Init+0x10>
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40010000 	.word	0x40010000
 8004134:	48000400 	.word	0x48000400
 8004138:	48000800 	.word	0x48000800
 800413c:	48000c00 	.word	0x48000c00
 8004140:	48001000 	.word	0x48001000
 8004144:	48001400 	.word	0x48001400
 8004148:	48001800 	.word	0x48001800
 800414c:	40010400 	.word	0x40010400

08004150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800415e:	e0cd      	b.n	80042fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004160:	2201      	movs	r2, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80c0 	beq.w	80042f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004176:	4a68      	ldr	r2, [pc, #416]	; (8004318 <HAL_GPIO_DeInit+0x1c8>)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	3302      	adds	r3, #2
 800417e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004182:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	220f      	movs	r2, #15
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800419e:	d025      	beq.n	80041ec <HAL_GPIO_DeInit+0x9c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a5e      	ldr	r2, [pc, #376]	; (800431c <HAL_GPIO_DeInit+0x1cc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d01f      	beq.n	80041e8 <HAL_GPIO_DeInit+0x98>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a5d      	ldr	r2, [pc, #372]	; (8004320 <HAL_GPIO_DeInit+0x1d0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d019      	beq.n	80041e4 <HAL_GPIO_DeInit+0x94>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a5c      	ldr	r2, [pc, #368]	; (8004324 <HAL_GPIO_DeInit+0x1d4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_GPIO_DeInit+0x90>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a5b      	ldr	r2, [pc, #364]	; (8004328 <HAL_GPIO_DeInit+0x1d8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00d      	beq.n	80041dc <HAL_GPIO_DeInit+0x8c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a5a      	ldr	r2, [pc, #360]	; (800432c <HAL_GPIO_DeInit+0x1dc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <HAL_GPIO_DeInit+0x88>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a59      	ldr	r2, [pc, #356]	; (8004330 <HAL_GPIO_DeInit+0x1e0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_GPIO_DeInit+0x84>
 80041d0:	2306      	movs	r3, #6
 80041d2:	e00c      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041d4:	2307      	movs	r3, #7
 80041d6:	e00a      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041d8:	2305      	movs	r3, #5
 80041da:	e008      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041dc:	2304      	movs	r3, #4
 80041de:	e006      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041e0:	2303      	movs	r3, #3
 80041e2:	e004      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e002      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_GPIO_DeInit+0x9e>
 80041ec:	2300      	movs	r3, #0
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	f002 0203 	and.w	r2, r2, #3
 80041f4:	0092      	lsls	r2, r2, #2
 80041f6:	4093      	lsls	r3, r2
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d132      	bne.n	8004264 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041fe:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	43db      	mvns	r3, r3
 8004206:	494b      	ldr	r1, [pc, #300]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 8004208:	4013      	ands	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800420c:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	4947      	ldr	r1, [pc, #284]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 8004216:	4013      	ands	r3, r2
 8004218:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800421a:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	4944      	ldr	r1, [pc, #272]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 8004224:	4013      	ands	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004228:	4b42      	ldr	r3, [pc, #264]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	43db      	mvns	r3, r3
 8004230:	4940      	ldr	r1, [pc, #256]	; (8004334 <HAL_GPIO_DeInit+0x1e4>)
 8004232:	4013      	ands	r3, r2
 8004234:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	220f      	movs	r2, #15
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004246:	4a34      	ldr	r2, [pc, #208]	; (8004318 <HAL_GPIO_DeInit+0x1c8>)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	43da      	mvns	r2, r3
 8004256:	4830      	ldr	r0, [pc, #192]	; (8004318 <HAL_GPIO_DeInit+0x1c8>)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	400a      	ands	r2, r1
 800425e:	3302      	adds	r3, #2
 8004260:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	2103      	movs	r1, #3
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	08da      	lsrs	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3208      	adds	r2, #8
 8004280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	08d2      	lsrs	r2, r2, #3
 8004298:	4019      	ands	r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3208      	adds	r2, #8
 800429e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2103      	movs	r1, #3
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	2101      	movs	r1, #1
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2103      	movs	r1, #3
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	401a      	ands	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e6:	2101      	movs	r1, #1
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	401a      	ands	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3301      	adds	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f af2b 	bne.w	8004160 <HAL_GPIO_DeInit+0x10>
  }
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000
 800431c:	48000400 	.word	0x48000400
 8004320:	48000800 	.word	0x48000800
 8004324:	48000c00 	.word	0x48000c00
 8004328:	48001000 	.word	0x48001000
 800432c:	48001400 	.word	0x48001400
 8004330:	48001800 	.word	0x48001800
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e001      	b.n	800435a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]
 8004374:	4613      	mov	r3, r2
 8004376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004378:	787b      	ldrb	r3, [r7, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004384:	e002      	b.n	800438c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd fc2e 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40010400 	.word	0x40010400

080043c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e08d      	b.n	80044f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe fdaa 	bl	8002f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e006      	b.n	8004450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800444e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d108      	bne.n	800446a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	e007      	b.n	800447a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e021      	b.n	8004554 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fe fd6b 	bl	8003004 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b20      	cmp	r3, #32
 8004580:	f040 80f9 	bne.w	8004776 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_I2C_Mem_Write+0x34>
 800458a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0ed      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_I2C_Mem_Write+0x4e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0e6      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045b2:	f7ff f923 	bl	80037fc <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2319      	movs	r3, #25
 80045be:	2201      	movs	r2, #1
 80045c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fac3 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0d1      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2221      	movs	r2, #33	; 0x21
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2240      	movs	r2, #64	; 0x40
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fc:	88f8      	ldrh	r0, [r7, #6]
 80045fe:	893a      	ldrh	r2, [r7, #8]
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4603      	mov	r3, r0
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f9d3 	bl	80049b8 <I2C_RequestMemoryWrite>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0a9      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2bff      	cmp	r3, #255	; 0xff
 800462c:	d90e      	bls.n	800464c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	22ff      	movs	r2, #255	; 0xff
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	2300      	movs	r3, #0
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fc3d 	bl	8004ec4 <I2C_TransferConfig>
 800464a:	e00f      	b.n	800466c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	b2da      	uxtb	r2, r3
 800465c:	8979      	ldrh	r1, [r7, #10]
 800465e:	2300      	movs	r3, #0
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fc2c 	bl	8004ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fabc 	bl	8004bee <I2C_WaitOnTXISFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e07b      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d034      	beq.n	8004724 <HAL_I2C_Mem_Write+0x1c8>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d130      	bne.n	8004724 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	2200      	movs	r2, #0
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fa3f 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e04d      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2bff      	cmp	r3, #255	; 0xff
 80046e4:	d90e      	bls.n	8004704 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	8979      	ldrh	r1, [r7, #10]
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fbe1 	bl	8004ec4 <I2C_TransferConfig>
 8004702:	e00f      	b.n	8004724 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	b2da      	uxtb	r2, r3
 8004714:	8979      	ldrh	r1, [r7, #10]
 8004716:	2300      	movs	r3, #0
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fbd0 	bl	8004ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d19e      	bne.n	800466c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 faa2 	bl	8004c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e01a      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2220      	movs	r2, #32
 8004748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_I2C_Mem_Write+0x224>)
 8004756:	400b      	ands	r3, r1
 8004758:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	fe00e800 	.word	0xfe00e800

08004784 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4603      	mov	r3, r0
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	460b      	mov	r3, r1
 8004798:	813b      	strh	r3, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	f040 80fd 	bne.w	80049a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_I2C_Mem_Read+0x34>
 80047b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0f1      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_I2C_Mem_Read+0x4e>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e0ea      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047da:	f7ff f80f 	bl	80037fc <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2319      	movs	r3, #25
 80047e6:	2201      	movs	r2, #1
 80047e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f9af 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0d5      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2222      	movs	r2, #34	; 0x22
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2240      	movs	r2, #64	; 0x40
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004824:	88f8      	ldrh	r0, [r7, #6]
 8004826:	893a      	ldrh	r2, [r7, #8]
 8004828:	8979      	ldrh	r1, [r7, #10]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4603      	mov	r3, r0
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f913 	bl	8004a60 <I2C_RequestMemoryRead>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0ad      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2bff      	cmp	r3, #255	; 0xff
 8004854:	d90e      	bls.n	8004874 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	22ff      	movs	r2, #255	; 0xff
 800485a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	b2da      	uxtb	r2, r3
 8004862:	8979      	ldrh	r1, [r7, #10]
 8004864:	4b52      	ldr	r3, [pc, #328]	; (80049b0 <HAL_I2C_Mem_Read+0x22c>)
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fb29 	bl	8004ec4 <I2C_TransferConfig>
 8004872:	e00f      	b.n	8004894 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004882:	b2da      	uxtb	r2, r3
 8004884:	8979      	ldrh	r1, [r7, #10]
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_I2C_Mem_Read+0x22c>)
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fb18 	bl	8004ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	2200      	movs	r2, #0
 800489c:	2104      	movs	r1, #4
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f956 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e07c      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d034      	beq.n	8004954 <HAL_I2C_Mem_Read+0x1d0>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d130      	bne.n	8004954 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	2200      	movs	r2, #0
 80048fa:	2180      	movs	r1, #128	; 0x80
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f927 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e04d      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2bff      	cmp	r3, #255	; 0xff
 8004914:	d90e      	bls.n	8004934 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	22ff      	movs	r2, #255	; 0xff
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	b2da      	uxtb	r2, r3
 8004922:	8979      	ldrh	r1, [r7, #10]
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fac9 	bl	8004ec4 <I2C_TransferConfig>
 8004932:	e00f      	b.n	8004954 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	b2da      	uxtb	r2, r3
 8004944:	8979      	ldrh	r1, [r7, #10]
 8004946:	2300      	movs	r3, #0
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fab8 	bl	8004ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d19a      	bne.n	8004894 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f98a 	bl	8004c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e01a      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2220      	movs	r2, #32
 8004978:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_I2C_Mem_Read+0x230>)
 8004986:	400b      	ands	r3, r1
 8004988:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
  }
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	80002400 	.word	0x80002400
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	817b      	strh	r3, [r7, #10]
 80049ca:	460b      	mov	r3, r1
 80049cc:	813b      	strh	r3, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	8979      	ldrh	r1, [r7, #10]
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <I2C_RequestMemoryWrite+0xa4>)
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fa6f 	bl	8004ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f8ff 	bl	8004bee <I2C_WaitOnTXISFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e02c      	b.n	8004a54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a00:	893b      	ldrh	r3, [r7, #8]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	629a      	str	r2, [r3, #40]	; 0x28
 8004a0a:	e015      	b.n	8004a38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f8e5 	bl	8004bee <I2C_WaitOnTXISFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e012      	b.n	8004a54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a2e:	893b      	ldrh	r3, [r7, #8]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2180      	movs	r1, #128	; 0x80
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f884 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	80002000 	.word	0x80002000

08004a60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	8979      	ldrh	r1, [r7, #10]
 8004a80:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <I2C_RequestMemoryRead+0xa4>)
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa1c 	bl	8004ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8ac 	bl	8004bee <I2C_WaitOnTXISFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e02c      	b.n	8004afa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa6:	893b      	ldrh	r3, [r7, #8]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
 8004ab0:	e015      	b.n	8004ade <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ab2:	893b      	ldrh	r3, [r7, #8]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	69b9      	ldr	r1, [r7, #24]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f892 	bl	8004bee <I2C_WaitOnTXISFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e012      	b.n	8004afa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad4:	893b      	ldrh	r3, [r7, #8]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2140      	movs	r1, #64	; 0x40
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f831 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	80002000 	.word	0x80002000

08004b08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d103      	bne.n	8004b26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d007      	beq.n	8004b44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	619a      	str	r2, [r3, #24]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b60:	e031      	b.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d02d      	beq.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fe fe47 	bl	80037fc <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d122      	bne.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d113      	bne.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00f      	b.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	bf0c      	ite	eq
 8004bd6:	2301      	moveq	r3, #1
 8004bd8:	2300      	movne	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d0be      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bfa:	e033      	b.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f87f 	bl	8004d04 <I2C_IsErrorOccurred>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e031      	b.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d025      	beq.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe fdf0 	bl	80037fc <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11a      	bne.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d013      	beq.n	8004c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e007      	b.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d1c4      	bne.n	8004bfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c88:	e02f      	b.n	8004cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f838 	bl	8004d04 <I2C_IsErrorOccurred>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e02d      	b.n	8004cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7fe fdad 	bl	80037fc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d302      	bcc.n	8004cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11a      	bne.n	8004cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d013      	beq.n	8004cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e007      	b.n	8004cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d1c8      	bne.n	8004c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d068      	beq.n	8004e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2210      	movs	r2, #16
 8004d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d38:	e049      	b.n	8004dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d045      	beq.n	8004dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fe fd5b 	bl	80037fc <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_IsErrorOccurred+0x54>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d13a      	bne.n	8004dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7a:	d121      	bne.n	8004dc0 <I2C_IsErrorOccurred+0xbc>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d82:	d01d      	beq.n	8004dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d01a      	beq.n	8004dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d9a:	f7fe fd2f 	bl	80037fc <HAL_GetTick>
 8004d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da0:	e00e      	b.n	8004dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004da2:	f7fe fd2b 	bl	80037fc <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b19      	cmp	r3, #25
 8004dae:	d907      	bls.n	8004dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	f043 0320 	orr.w	r3, r3, #32
 8004db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004dbe:	e006      	b.n	8004dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d1e9      	bne.n	8004da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d003      	beq.n	8004de4 <I2C_IsErrorOccurred+0xe0>
 8004ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0aa      	beq.n	8004d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2220      	movs	r2, #32
 8004df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	f043 0304 	orr.w	r3, r3, #4
 8004dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f043 0308 	orr.w	r3, r3, #8
 8004e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f043 0302 	orr.w	r3, r3, #2
 8004e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01c      	beq.n	8004eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fe45 	bl	8004b08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <I2C_IsErrorOccurred+0x1bc>)
 8004e8a:	400b      	ands	r3, r1
 8004e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	fe00e800 	.word	0xfe00e800

08004ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	817b      	strh	r3, [r7, #10]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ed6:	897b      	ldrh	r3, [r7, #10]
 8004ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004edc:	7a7b      	ldrb	r3, [r7, #9]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ee4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ef2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	0d5b      	lsrs	r3, r3, #21
 8004efe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <I2C_TransferConfig+0x60>)
 8004f04:	430b      	orrs	r3, r1
 8004f06:	43db      	mvns	r3, r3
 8004f08:	ea02 0103 	and.w	r1, r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	03ff63ff 	.word	0x03ff63ff

08004f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d138      	bne.n	8004fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e032      	b.n	8004fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2224      	movs	r2, #36	; 0x24
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6819      	ldr	r1, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d139      	bne.n	8005048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e033      	b.n	800504a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2224      	movs	r2, #36	; 0x24
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005058:	b08f      	sub	sp, #60	; 0x3c
 800505a:	af0a      	add	r7, sp, #40	; 0x28
 800505c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e116      	b.n	8005296 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fe f972 	bl	800336c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2203      	movs	r2, #3
 800508c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f004 ff7a 	bl	8009fa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	687e      	ldr	r6, [r7, #4]
 80050b4:	466d      	mov	r5, sp
 80050b6:	f106 0410 	add.w	r4, r6, #16
 80050ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ca:	1d33      	adds	r3, r6, #4
 80050cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050ce:	6838      	ldr	r0, [r7, #0]
 80050d0:	f004 ff3a 	bl	8009f48 <USB_CoreInit>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0d7      	b.n	8005296 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2100      	movs	r1, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 ff68 	bl	8009fc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	e04a      	b.n	800518e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	333d      	adds	r3, #61	; 0x3d
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800510c:	7bfa      	ldrb	r2, [r7, #15]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	333c      	adds	r3, #60	; 0x3c
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005120:	7bfa      	ldrb	r2, [r7, #15]
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	b298      	uxth	r0, r3
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3356      	adds	r3, #86	; 0x56
 8005134:	4602      	mov	r2, r0
 8005136:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	3340      	adds	r3, #64	; 0x40
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3344      	adds	r3, #68	; 0x44
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	3348      	adds	r3, #72	; 0x48
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	334c      	adds	r3, #76	; 0x4c
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	3301      	adds	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	7bfa      	ldrb	r2, [r7, #15]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d3af      	bcc.n	80050f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005198:	2300      	movs	r3, #0
 800519a:	73fb      	strb	r3, [r7, #15]
 800519c:	e044      	b.n	8005228 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051ca:	7bfa      	ldrb	r2, [r7, #15]
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051e0:	7bfa      	ldrb	r2, [r7, #15]
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800520c:	7bfa      	ldrb	r2, [r7, #15]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	3301      	adds	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d3b5      	bcc.n	800519e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	687e      	ldr	r6, [r7, #4]
 800523a:	466d      	mov	r5, sp
 800523c:	f106 0410 	add.w	r4, r6, #16
 8005240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005248:	e894 0003 	ldmia.w	r4, {r0, r1}
 800524c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005250:	1d33      	adds	r3, r6, #4
 8005252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005254:	6838      	ldr	r0, [r7, #0]
 8005256:	f004 ff01 	bl	800a05c <USB_DevInit>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e014      	b.n	8005296 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d102      	bne.n	800528a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f80a 	bl	800529e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f005 f8a3 	bl	800a3da <USB_DevDisconnect>

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800529e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d0:	f043 0303 	orr.w	r3, r3, #3
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f6:	6013      	str	r3, [r2, #0]
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40007000 	.word	0x40007000

08005308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <HAL_PWREx_GetVoltageRange+0x18>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005314:	4618      	mov	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40007000 	.word	0x40007000

08005324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005332:	d130      	bne.n	8005396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005334:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800533c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005340:	d038      	beq.n	80053b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005342:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800534c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2232      	movs	r2, #50	; 0x32
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	0c9b      	lsrs	r3, r3, #18
 8005364:	3301      	adds	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005368:	e002      	b.n	8005370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b01      	subs	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005370:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537c:	d102      	bne.n	8005384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f2      	bne.n	800536a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d110      	bne.n	80053b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d007      	beq.n	80053b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053ac:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40007000 	.word	0x40007000
 80053c8:	200000ac 	.word	0x200000ac
 80053cc:	431bde83 	.word	0x431bde83

080053d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a04      	ldr	r2, [pc, #16]	; (80053ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80053da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053de:	6053      	str	r3, [r2, #4]
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40007000 	.word	0x40007000

080053f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053f8:	f7fe fa00 	bl	80037fc <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e063      	b.n	80054d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fd fe15 	bl	800304c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005422:	f241 3188 	movw	r1, #5000	; 0x1388
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f858 	bl	80054dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	3b01      	subs	r3, #1
 800543c:	021a      	lsls	r2, r3, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	2120      	movs	r1, #32
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f850 	bl	80054f8 <QSPI_WaitFlagStateUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800545c:	7afb      	ldrb	r3, [r7, #11]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d131      	bne.n	80054c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800546c:	f023 0310 	bic.w	r3, r3, #16
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6852      	ldr	r2, [r2, #4]
 8005474:	0611      	lsls	r1, r2, #24
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68d2      	ldr	r2, [r2, #12]
 800547a:	4311      	orrs	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	430b      	orrs	r3, r1
 8005482:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_QSPI_Init+0xe8>)
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6912      	ldr	r2, [r2, #16]
 8005492:	0411      	lsls	r1, r2, #16
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6952      	ldr	r2, [r2, #20]
 8005498:	4311      	orrs	r1, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6992      	ldr	r2, [r2, #24]
 800549e:	4311      	orrs	r1, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80054ce:	7afb      	ldrb	r3, [r7, #11]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	ffe0f8fe 	.word	0xffe0f8fe

080054dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005508:	e01a      	b.n	8005540 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d016      	beq.n	8005540 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fe f973 	bl	80037fc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2204      	movs	r2, #4
 800552c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	f043 0201 	orr.w	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e00e      	b.n	800555e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	429a      	cmp	r2, r3
 800555a:	d1d6      	bne.n	800550a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e3ca      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557a:	4b97      	ldr	r3, [pc, #604]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005584:	4b94      	ldr	r3, [pc, #592]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80e4 	beq.w	8005764 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_RCC_OscConfig+0x4a>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	f040 808b 	bne.w	80056c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 8087 	bne.w	80056c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055b2:	4b89      	ldr	r3, [pc, #548]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCC_OscConfig+0x62>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e3a2      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	4b82      	ldr	r3, [pc, #520]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <HAL_RCC_OscConfig+0x7c>
 80055da:	4b7f      	ldr	r3, [pc, #508]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e2:	e005      	b.n	80055f0 <HAL_RCC_OscConfig+0x88>
 80055e4:	4b7c      	ldr	r3, [pc, #496]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d223      	bcs.n	800563c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fd55 	bl	80060a8 <RCC_SetFlashLatencyFromMSIRange>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e383      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005608:	4b73      	ldr	r3, [pc, #460]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a72      	ldr	r2, [pc, #456]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800560e:	f043 0308 	orr.w	r3, r3, #8
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	4b70      	ldr	r3, [pc, #448]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	496d      	ldr	r1, [pc, #436]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005626:	4b6c      	ldr	r3, [pc, #432]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	4968      	ldr	r1, [pc, #416]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005636:	4313      	orrs	r3, r2
 8005638:	604b      	str	r3, [r1, #4]
 800563a:	e025      	b.n	8005688 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800563c:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a65      	ldr	r2, [pc, #404]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005642:	f043 0308 	orr.w	r3, r3, #8
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4960      	ldr	r1, [pc, #384]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800565a:	4b5f      	ldr	r3, [pc, #380]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	495b      	ldr	r1, [pc, #364]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800566a:	4313      	orrs	r3, r2
 800566c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fd15 	bl	80060a8 <RCC_SetFlashLatencyFromMSIRange>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e343      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005688:	f000 fc4a 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b52      	ldr	r3, [pc, #328]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	091b      	lsrs	r3, r3, #4
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	4950      	ldr	r1, [pc, #320]	; (80057dc <HAL_RCC_OscConfig+0x274>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	4a4e      	ldr	r2, [pc, #312]	; (80057e0 <HAL_RCC_OscConfig+0x278>)
 80056a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80056a8:	4b4e      	ldr	r3, [pc, #312]	; (80057e4 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe f855 	bl	800375c <HAL_InitTick>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d052      	beq.n	8005762 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	e327      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d032      	beq.n	800572e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a42      	ldr	r2, [pc, #264]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056d4:	f7fe f892 	bl	80037fc <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056dc:	f7fe f88e 	bl	80037fc <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e310      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056ee:	4b3a      	ldr	r3, [pc, #232]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a36      	ldr	r2, [pc, #216]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005700:	f043 0308 	orr.w	r3, r3, #8
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4931      	ldr	r1, [pc, #196]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005718:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	492c      	ldr	r1, [pc, #176]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]
 800572c:	e01a      	b.n	8005764 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800572e:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a29      	ldr	r2, [pc, #164]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800573a:	f7fe f85f 	bl	80037fc <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005742:	f7fe f85b 	bl	80037fc <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e2dd      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005754:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f0      	bne.n	8005742 <HAL_RCC_OscConfig+0x1da>
 8005760:	e000      	b.n	8005764 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005762:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d074      	beq.n	800585a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2b08      	cmp	r3, #8
 8005774:	d005      	beq.n	8005782 <HAL_RCC_OscConfig+0x21a>
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b0c      	cmp	r3, #12
 800577a:	d10e      	bne.n	800579a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d10b      	bne.n	800579a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d064      	beq.n	8005858 <HAL_RCC_OscConfig+0x2f0>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d160      	bne.n	8005858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e2ba      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a2:	d106      	bne.n	80057b2 <HAL_RCC_OscConfig+0x24a>
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80057aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	e026      	b.n	8005800 <HAL_RCC_OscConfig+0x298>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ba:	d115      	bne.n	80057e8 <HAL_RCC_OscConfig+0x280>
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80057c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a02      	ldr	r2, [pc, #8]	; (80057d8 <HAL_RCC_OscConfig+0x270>)
 80057ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e014      	b.n	8005800 <HAL_RCC_OscConfig+0x298>
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	08019c2c 	.word	0x08019c2c
 80057e0:	200000ac 	.word	0x200000ac
 80057e4:	200000b0 	.word	0x200000b0
 80057e8:	4ba0      	ldr	r3, [pc, #640]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a9f      	ldr	r2, [pc, #636]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b9d      	ldr	r3, [pc, #628]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a9c      	ldr	r2, [pc, #624]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd fff8 	bl	80037fc <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd fff4 	bl	80037fc <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e276      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005822:	4b92      	ldr	r3, [pc, #584]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x2a8>
 800582e:	e014      	b.n	800585a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fd ffe4 	bl	80037fc <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fd ffe0 	bl	80037fc <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e262      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800584a:	4b88      	ldr	r3, [pc, #544]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x2d0>
 8005856:	e000      	b.n	800585a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d060      	beq.n	8005928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d005      	beq.n	8005878 <HAL_RCC_OscConfig+0x310>
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b0c      	cmp	r3, #12
 8005870:	d119      	bne.n	80058a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d116      	bne.n	80058a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005878:	4b7c      	ldr	r3, [pc, #496]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_OscConfig+0x328>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e23f      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4b76      	ldr	r3, [pc, #472]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	061b      	lsls	r3, r3, #24
 800589e:	4973      	ldr	r1, [pc, #460]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a4:	e040      	b.n	8005928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d023      	beq.n	80058f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ae:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6e      	ldr	r2, [pc, #440]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ba:	f7fd ff9f 	bl	80037fc <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c2:	f7fd ff9b 	bl	80037fc <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e21d      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d4:	4b65      	ldr	r3, [pc, #404]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e0:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	495f      	ldr	r1, [pc, #380]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	604b      	str	r3, [r1, #4]
 80058f4:	e018      	b.n	8005928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f6:	4b5d      	ldr	r3, [pc, #372]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a5c      	ldr	r2, [pc, #368]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80058fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005902:	f7fd ff7b 	bl	80037fc <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800590a:	f7fd ff77 	bl	80037fc <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e1f9      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800591c:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d03c      	beq.n	80059ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01c      	beq.n	8005976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593c:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 800593e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005942:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fd ff56 	bl	80037fc <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005954:	f7fd ff52 	bl	80037fc <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1d4      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005966:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ef      	beq.n	8005954 <HAL_RCC_OscConfig+0x3ec>
 8005974:	e01b      	b.n	80059ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005976:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800597c:	4a3b      	ldr	r2, [pc, #236]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005986:	f7fd ff39 	bl	80037fc <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800598e:	f7fd ff35 	bl	80037fc <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e1b7      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059a0:	4b32      	ldr	r3, [pc, #200]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80059a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ef      	bne.n	800598e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80a6 	beq.w	8005b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059bc:	2300      	movs	r3, #0
 80059be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059c0:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10d      	bne.n	80059e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059cc:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d0:	4a26      	ldr	r2, [pc, #152]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d6:	6593      	str	r3, [r2, #88]	; 0x58
 80059d8:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 80059da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059e8:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_RCC_OscConfig+0x508>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d118      	bne.n	8005a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059f4:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <HAL_RCC_OscConfig+0x508>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <HAL_RCC_OscConfig+0x508>)
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a00:	f7fd fefc 	bl	80037fc <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a08:	f7fd fef8 	bl	80037fc <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e17a      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <HAL_RCC_OscConfig+0x508>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d108      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4d8>
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a3e:	e029      	b.n	8005a94 <HAL_RCC_OscConfig+0x52c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b05      	cmp	r3, #5
 8005a46:	d115      	bne.n	8005a74 <HAL_RCC_OscConfig+0x50c>
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5e:	4a03      	ldr	r2, [pc, #12]	; (8005a6c <HAL_RCC_OscConfig+0x504>)
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a68:	e014      	b.n	8005a94 <HAL_RCC_OscConfig+0x52c>
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40007000 	.word	0x40007000
 8005a74:	4b9c      	ldr	r3, [pc, #624]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	4a9b      	ldr	r2, [pc, #620]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a84:	4b98      	ldr	r3, [pc, #608]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8a:	4a97      	ldr	r2, [pc, #604]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d016      	beq.n	8005aca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fd feae 	bl	80037fc <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aa2:	e00a      	b.n	8005aba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa4:	f7fd feaa 	bl	80037fc <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e12a      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aba:	4b8b      	ldr	r3, [pc, #556]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ed      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x53c>
 8005ac8:	e015      	b.n	8005af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fd fe97 	bl	80037fc <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad2:	f7fd fe93 	bl	80037fc <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e113      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ae8:	4b7f      	ldr	r3, [pc, #508]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ed      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005af6:	7ffb      	ldrb	r3, [r7, #31]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d105      	bne.n	8005b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afc:	4b7a      	ldr	r3, [pc, #488]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	4a79      	ldr	r2, [pc, #484]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80fe 	beq.w	8005d0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	f040 80d0 	bne.w	8005cbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b1c:	4b72      	ldr	r3, [pc, #456]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 0203 	and.w	r2, r3, #3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d130      	bne.n	8005b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d127      	bne.n	8005b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d11f      	bne.n	8005b92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b5c:	2a07      	cmp	r2, #7
 8005b5e:	bf14      	ite	ne
 8005b60:	2201      	movne	r2, #1
 8005b62:	2200      	moveq	r2, #0
 8005b64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d113      	bne.n	8005b92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d109      	bne.n	8005b92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d06e      	beq.n	8005c70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d069      	beq.n	8005c6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b98:	4b53      	ldr	r3, [pc, #332]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ba4:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0ad      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005bb4:	4b4c      	ldr	r3, [pc, #304]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a4b      	ldr	r2, [pc, #300]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bc0:	f7fd fe1c 	bl	80037fc <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fd fe18 	bl	80037fc <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e09a      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bda:	4b43      	ldr	r3, [pc, #268]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	4b40      	ldr	r3, [pc, #256]	; (8005cec <HAL_RCC_OscConfig+0x784>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	0112      	lsls	r2, r2, #4
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c00:	0212      	lsls	r2, r2, #8
 8005c02:	4311      	orrs	r1, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c08:	0852      	lsrs	r2, r2, #1
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	0552      	lsls	r2, r2, #21
 8005c0e:	4311      	orrs	r1, r2
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c14:	0852      	lsrs	r2, r2, #1
 8005c16:	3a01      	subs	r2, #1
 8005c18:	0652      	lsls	r2, r2, #25
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c20:	0912      	lsrs	r2, r2, #4
 8005c22:	0452      	lsls	r2, r2, #17
 8005c24:	430a      	orrs	r2, r1
 8005c26:	4930      	ldr	r1, [pc, #192]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c2c:	4b2e      	ldr	r3, [pc, #184]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c38:	4b2b      	ldr	r3, [pc, #172]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c44:	f7fd fdda 	bl	80037fc <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fd fdd6 	bl	80037fc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e058      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c5e:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c6a:	e050      	b.n	8005d0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e04f      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c70:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d148      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c94:	f7fd fdb2 	bl	80037fc <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fd fdae 	bl	80037fc <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e030      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cae:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x734>
 8005cba:	e028      	b.n	8005d0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	d023      	beq.n	8005d0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <HAL_RCC_OscConfig+0x780>)
 8005cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cce:	f7fd fd95 	bl	80037fc <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cd4:	e00c      	b.n	8005cf0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd6:	f7fd fd91 	bl	80037fc <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d905      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e013      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_RCC_OscConfig+0x7b0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ec      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_RCC_OscConfig+0x7b0>)
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	4905      	ldr	r1, [pc, #20]	; (8005d18 <HAL_RCC_OscConfig+0x7b0>)
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCC_OscConfig+0x7b4>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	60cb      	str	r3, [r1, #12]
 8005d08:	e001      	b.n	8005d0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	feeefffc 	.word	0xfeeefffc

08005d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0e7      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d34:	4b75      	ldr	r3, [pc, #468]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d910      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d42:	4b72      	ldr	r3, [pc, #456]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f023 0207 	bic.w	r2, r3, #7
 8005d4a:	4970      	ldr	r1, [pc, #448]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b6e      	ldr	r3, [pc, #440]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0cf      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d010      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	4b66      	ldr	r3, [pc, #408]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d908      	bls.n	8005d92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d80:	4b63      	ldr	r3, [pc, #396]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4960      	ldr	r1, [pc, #384]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d04c      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d107      	bne.n	8005db6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da6:	4b5a      	ldr	r3, [pc, #360]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d121      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0a6      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dbe:	4b54      	ldr	r3, [pc, #336]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d115      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e09a      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dd6:	4b4e      	ldr	r3, [pc, #312]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e08e      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de6:	4b4a      	ldr	r3, [pc, #296]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e086      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005df6:	4b46      	ldr	r3, [pc, #280]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f023 0203 	bic.w	r2, r3, #3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4943      	ldr	r1, [pc, #268]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e08:	f7fd fcf8 	bl	80037fc <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0e:	e00a      	b.n	8005e26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e10:	f7fd fcf4 	bl	80037fc <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e06e      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e26:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 020c 	and.w	r2, r3, #12
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d1eb      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d208      	bcs.n	8005e66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e54:	4b2e      	ldr	r3, [pc, #184]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	492b      	ldr	r1, [pc, #172]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d210      	bcs.n	8005e96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f023 0207 	bic.w	r2, r3, #7
 8005e7c:	4923      	ldr	r1, [pc, #140]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e84:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <HAL_RCC_ClockConfig+0x1ec>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d001      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e036      	b.n	8005f04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4918      	ldr	r1, [pc, #96]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4910      	ldr	r1, [pc, #64]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ed4:	f000 f824 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <HAL_RCC_ClockConfig+0x1f0>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	490b      	ldr	r1, [pc, #44]	; (8005f14 <HAL_RCC_ClockConfig+0x1f4>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <HAL_RCC_ClockConfig+0x1f8>)
 8005ef2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_RCC_ClockConfig+0x1fc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd fc2f 	bl	800375c <HAL_InitTick>
 8005efe:	4603      	mov	r3, r0
 8005f00:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40021000 	.word	0x40021000
 8005f14:	08019c2c 	.word	0x08019c2c
 8005f18:	200000ac 	.word	0x200000ac
 8005f1c:	200000b0 	.word	0x200000b0

08005f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b089      	sub	sp, #36	; 0x24
 8005f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f2e:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
 8005f36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f38:	4b3b      	ldr	r3, [pc, #236]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x34>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b0c      	cmp	r3, #12
 8005f4c:	d121      	bne.n	8005f92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d11e      	bne.n	8005f92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f54:	4b34      	ldr	r3, [pc, #208]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d107      	bne.n	8005f70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f60:	4b31      	ldr	r3, [pc, #196]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	e005      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f70:	4b2d      	ldr	r3, [pc, #180]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	; (800602c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10d      	bne.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d102      	bne.n	8005f9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	e004      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fa4:	4b23      	ldr	r3, [pc, #140]	; (8006034 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	d134      	bne.n	8006018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d003      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d003      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0xac>
 8005fc4:	e005      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fc6:	4b1a      	ldr	r3, [pc, #104]	; (8006030 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fc8:	617b      	str	r3, [r7, #20]
      break;
 8005fca:	e005      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_RCC_GetSysClockFreq+0x114>)
 8005fce:	617b      	str	r3, [r7, #20]
      break;
 8005fd0:	e002      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	617b      	str	r3, [r7, #20]
      break;
 8005fd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	fb03 f202 	mul.w	r2, r3, r2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <HAL_RCC_GetSysClockFreq+0x108>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	0e5b      	lsrs	r3, r3, #25
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	3301      	adds	r3, #1
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006018:	69bb      	ldr	r3, [r7, #24]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3724      	adds	r7, #36	; 0x24
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40021000 	.word	0x40021000
 800602c:	08019c44 	.word	0x08019c44
 8006030:	00f42400 	.word	0x00f42400
 8006034:	007a1200 	.word	0x007a1200

08006038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_RCC_GetHCLKFreq+0x14>)
 800603e:	681b      	ldr	r3, [r3, #0]
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200000ac 	.word	0x200000ac

08006050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006054:	f7ff fff0 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006058:	4602      	mov	r2, r0
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	0a1b      	lsrs	r3, r3, #8
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	4904      	ldr	r1, [pc, #16]	; (8006078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006066:	5ccb      	ldrb	r3, [r1, r3]
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40021000 	.word	0x40021000
 8006078:	08019c3c 	.word	0x08019c3c

0800607c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006080:	f7ff ffda 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8006084:	4602      	mov	r2, r0
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0adb      	lsrs	r3, r3, #11
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4904      	ldr	r1, [pc, #16]	; (80060a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006092:	5ccb      	ldrb	r3, [r1, r3]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	08019c3c 	.word	0x08019c3c

080060a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060b4:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060c0:	f7ff f922 	bl	8005308 <HAL_PWREx_GetVoltageRange>
 80060c4:	6178      	str	r0, [r7, #20]
 80060c6:	e014      	b.n	80060f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060cc:	4a24      	ldr	r2, [pc, #144]	; (8006160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d2:	6593      	str	r3, [r2, #88]	; 0x58
 80060d4:	4b22      	ldr	r3, [pc, #136]	; (8006160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060e0:	f7ff f912 	bl	8005308 <HAL_PWREx_GetVoltageRange>
 80060e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d10b      	bne.n	8006112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d919      	bls.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2ba0      	cmp	r3, #160	; 0xa0
 8006104:	d902      	bls.n	800610c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006106:	2302      	movs	r3, #2
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	e013      	b.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800610c:	2301      	movs	r3, #1
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e010      	b.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d902      	bls.n	800611e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006118:	2303      	movs	r3, #3
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e00a      	b.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d102      	bne.n	800612a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006124:	2302      	movs	r3, #2
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e004      	b.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b70      	cmp	r3, #112	; 0x70
 800612e:	d101      	bne.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006130:	2301      	movs	r3, #1
 8006132:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f023 0207 	bic.w	r2, r3, #7
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	429a      	cmp	r2, r3
 8006150:	d001      	beq.n	8006156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40021000 	.word	0x40021000
 8006164:	40022000 	.word	0x40022000

08006168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006170:	2300      	movs	r3, #0
 8006172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006174:	2300      	movs	r3, #0
 8006176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006180:	2b00      	cmp	r3, #0
 8006182:	d041      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800618c:	d02a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800618e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006192:	d824      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006198:	d008      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800619a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800619e:	d81e      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a8:	d010      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061aa:	e018      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061ac:	4b86      	ldr	r3, [pc, #536]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a85      	ldr	r2, [pc, #532]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061b8:	e015      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 facb 	bl	800675c <RCCEx_PLLSAI1_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061ca:	e00c      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3320      	adds	r3, #32
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fbb6 	bl	8006944 <RCCEx_PLLSAI2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061dc:	e003      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	74fb      	strb	r3, [r7, #19]
      break;
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e6:	7cfb      	ldrb	r3, [r7, #19]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061ec:	4b76      	ldr	r3, [pc, #472]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061fa:	4973      	ldr	r1, [pc, #460]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006202:	e001      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	7cfb      	ldrb	r3, [r7, #19]
 8006206:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d041      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006218:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800621c:	d02a      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800621e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006222:	d824      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006228:	d008      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800622a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800622e:	d81e      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006238:	d010      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800623a:	e018      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800623c:	4b62      	ldr	r3, [pc, #392]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4a61      	ldr	r2, [pc, #388]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006246:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006248:	e015      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fa83 	bl	800675c <RCCEx_PLLSAI1_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800625a:	e00c      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3320      	adds	r3, #32
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fb6e 	bl	8006944 <RCCEx_PLLSAI2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	74fb      	strb	r3, [r7, #19]
      break;
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800627c:	4b52      	ldr	r3, [pc, #328]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800628a:	494f      	ldr	r1, [pc, #316]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006292:	e001      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80a0 	beq.w	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00d      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c0:	4b41      	ldr	r3, [pc, #260]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	4a40      	ldr	r2, [pc, #256]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ca:	6593      	str	r3, [r2, #88]	; 0x58
 80062cc:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d8:	2301      	movs	r3, #1
 80062da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062dc:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3a      	ldr	r2, [pc, #232]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80062e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062e8:	f7fd fa88 	bl	80037fc <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80062ee:	e009      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f0:	f7fd fa84 	bl	80037fc <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d902      	bls.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	74fb      	strb	r3, [r7, #19]
        break;
 8006302:	e005      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006304:	4b31      	ldr	r3, [pc, #196]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0ef      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d15c      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006316:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006320:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01f      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	429a      	cmp	r2, r3
 8006332:	d019      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006334:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006350:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006360:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fd fa43 	bl	80037fc <HAL_GetTick>
 8006376:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006378:	e00b      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637a:	f7fd fa3f 	bl	80037fc <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f241 3288 	movw	r2, #5000	; 0x1388
 8006388:	4293      	cmp	r3, r2
 800638a:	d902      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	74fb      	strb	r3, [r7, #19]
            break;
 8006390:	e006      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0ec      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063a0:	7cfb      	ldrb	r3, [r7, #19]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b6:	4904      	ldr	r1, [pc, #16]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063be:	e009      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	74bb      	strb	r3, [r7, #18]
 80063c4:	e006      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80063c6:	bf00      	nop
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063d4:	7c7b      	ldrb	r3, [r7, #17]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d105      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063da:	4b9e      	ldr	r3, [pc, #632]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	4a9d      	ldr	r2, [pc, #628]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063f2:	4b98      	ldr	r3, [pc, #608]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f023 0203 	bic.w	r2, r3, #3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	4994      	ldr	r1, [pc, #592]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006414:	4b8f      	ldr	r3, [pc, #572]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641a:	f023 020c 	bic.w	r2, r3, #12
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	498c      	ldr	r1, [pc, #560]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006436:	4b87      	ldr	r3, [pc, #540]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	4983      	ldr	r1, [pc, #524]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006458:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	497b      	ldr	r1, [pc, #492]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800647a:	4b76      	ldr	r3, [pc, #472]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006488:	4972      	ldr	r1, [pc, #456]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800649c:	4b6d      	ldr	r3, [pc, #436]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064aa:	496a      	ldr	r1, [pc, #424]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064be:	4b65      	ldr	r3, [pc, #404]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	4961      	ldr	r1, [pc, #388]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064e0:	4b5c      	ldr	r3, [pc, #368]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ee:	4959      	ldr	r1, [pc, #356]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006502:	4b54      	ldr	r3, [pc, #336]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006510:	4950      	ldr	r1, [pc, #320]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006524:	4b4b      	ldr	r3, [pc, #300]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	4948      	ldr	r1, [pc, #288]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006546:	4b43      	ldr	r3, [pc, #268]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006554:	493f      	ldr	r1, [pc, #252]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d028      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006568:	4b3a      	ldr	r3, [pc, #232]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006576:	4937      	ldr	r1, [pc, #220]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006586:	d106      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006588:	4b32      	ldr	r3, [pc, #200]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4a31      	ldr	r2, [pc, #196]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006592:	60d3      	str	r3, [r2, #12]
 8006594:	e011      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800659a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800659e:	d10c      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3304      	adds	r3, #4
 80065a4:	2101      	movs	r1, #1
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f8d8 	bl	800675c <RCCEx_PLLSAI1_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065b0:	7cfb      	ldrb	r3, [r7, #19]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d028      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065c6:	4b23      	ldr	r3, [pc, #140]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	491f      	ldr	r1, [pc, #124]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e4:	d106      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e6:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f0:	60d3      	str	r3, [r2, #12]
 80065f2:	e011      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065fc:	d10c      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	2101      	movs	r1, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f000 f8a9 	bl	800675c <RCCEx_PLLSAI1_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006614:	7cfb      	ldrb	r3, [r7, #19]
 8006616:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02b      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006632:	4908      	ldr	r1, [pc, #32]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006642:	d109      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4a02      	ldr	r2, [pc, #8]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800664e:	60d3      	str	r3, [r2, #12]
 8006650:	e014      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006660:	d10c      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f877 	bl	800675c <RCCEx_PLLSAI1_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006672:	7cfb      	ldrb	r3, [r7, #19]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02f      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006688:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006696:	4928      	ldr	r1, [pc, #160]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	2102      	movs	r1, #2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f854 	bl	800675c <RCCEx_PLLSAI1_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066b8:	7cfb      	ldrb	r3, [r7, #19]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d014      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	74bb      	strb	r3, [r7, #18]
 80066c2:	e011      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3320      	adds	r3, #32
 80066d2:	2102      	movs	r1, #2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f935 	bl	8006944 <RCCEx_PLLSAI2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066de:	7cfb      	ldrb	r3, [r7, #19]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006702:	490d      	ldr	r1, [pc, #52]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006726:	4904      	ldr	r1, [pc, #16]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800672e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40021000 	.word	0x40021000

0800673c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006746:	f043 0304 	orr.w	r3, r3, #4
 800674a:	6013      	str	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000

0800675c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800676a:	4b75      	ldr	r3, [pc, #468]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d018      	beq.n	80067a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006776:	4b72      	ldr	r3, [pc, #456]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f003 0203 	and.w	r2, r3, #3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d10d      	bne.n	80067a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
       ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800678e:	4b6c      	ldr	r3, [pc, #432]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	091b      	lsrs	r3, r3, #4
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
       ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d047      	beq.n	8006832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e044      	b.n	8006832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d018      	beq.n	80067e2 <RCCEx_PLLSAI1_Config+0x86>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d825      	bhi.n	8006800 <RCCEx_PLLSAI1_Config+0xa4>
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d002      	beq.n	80067be <RCCEx_PLLSAI1_Config+0x62>
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d009      	beq.n	80067d0 <RCCEx_PLLSAI1_Config+0x74>
 80067bc:	e020      	b.n	8006800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067be:	4b60      	ldr	r3, [pc, #384]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d11d      	bne.n	8006806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ce:	e01a      	b.n	8006806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067d0:	4b5b      	ldr	r3, [pc, #364]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d116      	bne.n	800680a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e0:	e013      	b.n	800680a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067e2:	4b57      	ldr	r3, [pc, #348]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10f      	bne.n	800680e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067ee:	4b54      	ldr	r3, [pc, #336]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067fe:	e006      	b.n	800680e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
      break;
 8006804:	e004      	b.n	8006810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006806:	bf00      	nop
 8006808:	e002      	b.n	8006810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800680e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006816:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	3b01      	subs	r3, #1
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	430b      	orrs	r3, r1
 800682c:	4944      	ldr	r1, [pc, #272]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682e:	4313      	orrs	r3, r2
 8006830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d17d      	bne.n	8006934 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006838:	4b41      	ldr	r3, [pc, #260]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a40      	ldr	r2, [pc, #256]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800683e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006844:	f7fc ffda 	bl	80037fc <HAL_GetTick>
 8006848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800684a:	e009      	b.n	8006860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800684c:	f7fc ffd6 	bl	80037fc <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d902      	bls.n	8006860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	73fb      	strb	r3, [r7, #15]
        break;
 800685e:	e005      	b.n	800686c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006860:	4b37      	ldr	r3, [pc, #220]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ef      	bne.n	800684c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d160      	bne.n	8006934 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d111      	bne.n	800689c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006878:	4b31      	ldr	r3, [pc, #196]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6892      	ldr	r2, [r2, #8]
 8006888:	0211      	lsls	r1, r2, #8
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68d2      	ldr	r2, [r2, #12]
 800688e:	0912      	lsrs	r2, r2, #4
 8006890:	0452      	lsls	r2, r2, #17
 8006892:	430a      	orrs	r2, r1
 8006894:	492a      	ldr	r1, [pc, #168]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	610b      	str	r3, [r1, #16]
 800689a:	e027      	b.n	80068ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d112      	bne.n	80068c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068a2:	4b27      	ldr	r3, [pc, #156]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6892      	ldr	r2, [r2, #8]
 80068b2:	0211      	lsls	r1, r2, #8
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6912      	ldr	r2, [r2, #16]
 80068b8:	0852      	lsrs	r2, r2, #1
 80068ba:	3a01      	subs	r2, #1
 80068bc:	0552      	lsls	r2, r2, #21
 80068be:	430a      	orrs	r2, r1
 80068c0:	491f      	ldr	r1, [pc, #124]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	610b      	str	r3, [r1, #16]
 80068c6:	e011      	b.n	80068ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	0211      	lsls	r1, r2, #8
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6952      	ldr	r2, [r2, #20]
 80068de:	0852      	lsrs	r2, r2, #1
 80068e0:	3a01      	subs	r2, #1
 80068e2:	0652      	lsls	r2, r2, #25
 80068e4:	430a      	orrs	r2, r1
 80068e6:	4916      	ldr	r1, [pc, #88]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068ec:	4b14      	ldr	r3, [pc, #80]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f8:	f7fc ff80 	bl	80037fc <HAL_GetTick>
 80068fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068fe:	e009      	b.n	8006914 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006900:	f7fc ff7c 	bl	80037fc <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d902      	bls.n	8006914 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	73fb      	strb	r3, [r7, #15]
          break;
 8006912:	e005      	b.n	8006920 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006914:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ef      	beq.n	8006900 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	4904      	ldr	r1, [pc, #16]	; (8006940 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40021000 	.word	0x40021000

08006944 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006952:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d018      	beq.n	8006990 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800695e:	4b67      	ldr	r3, [pc, #412]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0203 	and.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d10d      	bne.n	800698a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
       ||
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006976:	4b61      	ldr	r3, [pc, #388]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
       ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d047      	beq.n	8006a1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	e044      	b.n	8006a1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b03      	cmp	r3, #3
 8006996:	d018      	beq.n	80069ca <RCCEx_PLLSAI2_Config+0x86>
 8006998:	2b03      	cmp	r3, #3
 800699a:	d825      	bhi.n	80069e8 <RCCEx_PLLSAI2_Config+0xa4>
 800699c:	2b01      	cmp	r3, #1
 800699e:	d002      	beq.n	80069a6 <RCCEx_PLLSAI2_Config+0x62>
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d009      	beq.n	80069b8 <RCCEx_PLLSAI2_Config+0x74>
 80069a4:	e020      	b.n	80069e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069a6:	4b55      	ldr	r3, [pc, #340]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d11d      	bne.n	80069ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069b6:	e01a      	b.n	80069ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069b8:	4b50      	ldr	r3, [pc, #320]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d116      	bne.n	80069f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069c8:	e013      	b.n	80069f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ca:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10f      	bne.n	80069f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069d6:	4b49      	ldr	r3, [pc, #292]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069e6:	e006      	b.n	80069f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e004      	b.n	80069f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069ee:	bf00      	nop
 80069f0:	e002      	b.n	80069f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069f2:	bf00      	nop
 80069f4:	e000      	b.n	80069f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80069f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069fe:	4b3f      	ldr	r3, [pc, #252]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	430b      	orrs	r3, r1
 8006a14:	4939      	ldr	r1, [pc, #228]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d167      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a20:	4b36      	ldr	r3, [pc, #216]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a35      	ldr	r2, [pc, #212]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a2c:	f7fc fee6 	bl	80037fc <HAL_GetTick>
 8006a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a32:	e009      	b.n	8006a48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a34:	f7fc fee2 	bl	80037fc <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d902      	bls.n	8006a48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	73fb      	strb	r3, [r7, #15]
        break;
 8006a46:	e005      	b.n	8006a54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a48:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1ef      	bne.n	8006a34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d14a      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d111      	bne.n	8006a84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a60:	4b26      	ldr	r3, [pc, #152]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6892      	ldr	r2, [r2, #8]
 8006a70:	0211      	lsls	r1, r2, #8
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68d2      	ldr	r2, [r2, #12]
 8006a76:	0912      	lsrs	r2, r2, #4
 8006a78:	0452      	lsls	r2, r2, #17
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	491f      	ldr	r1, [pc, #124]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	614b      	str	r3, [r1, #20]
 8006a82:	e011      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6892      	ldr	r2, [r2, #8]
 8006a94:	0211      	lsls	r1, r2, #8
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6912      	ldr	r2, [r2, #16]
 8006a9a:	0852      	lsrs	r2, r2, #1
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	0652      	lsls	r2, r2, #25
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	4916      	ldr	r1, [pc, #88]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a13      	ldr	r2, [pc, #76]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab4:	f7fc fea2 	bl	80037fc <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006aba:	e009      	b.n	8006ad0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006abc:	f7fc fe9e 	bl	80037fc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d902      	bls.n	8006ad0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ace:	e005      	b.n	8006adc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ef      	beq.n	8006abc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4904      	ldr	r1, [pc, #16]	; (8006afc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000

08006b00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d079      	beq.n	8006c06 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fc fad4 	bl	80030d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d058      	beq.n	8006bf4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	22ca      	movs	r2, #202	; 0xca
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2253      	movs	r2, #83	; 0x53
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa4e 	bl	8006ff4 <RTC_EnterInitMode>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d127      	bne.n	8006bb2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b74:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6899      	ldr	r1, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	68d2      	ldr	r2, [r2, #12]
 8006b9c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6919      	ldr	r1, [r3, #16]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	041a      	lsls	r2, r3, #16
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa52 	bl	800705c <RTC_ExitInitMode>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d113      	bne.n	8006bea <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0203 	bic.w	r2, r2, #3
 8006bd0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8006bf2:	e001      	b.n	8006bf8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_RTC_SetTime+0x1a>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e08b      	b.n	8006d42 <HAL_RTC_SetTime+0x132>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	22ca      	movs	r2, #202	; 0xca
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2253      	movs	r2, #83	; 0x53
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9d2 	bl	8006ff4 <RTC_EnterInitMode>
 8006c50:	4603      	mov	r3, r0
 8006c52:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006c54:	7cfb      	ldrb	r3, [r7, #19]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d163      	bne.n	8006d22 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d126      	bne.n	8006cae <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2200      	movs	r2, #0
 8006c72:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fa2d 	bl	80070d8 <RTC_ByteToBcd2>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fa26 	bl	80070d8 <RTC_ByteToBcd2>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c90:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	789b      	ldrb	r3, [r3, #2]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fa1e 	bl	80070d8 <RTC_ByteToBcd2>
 8006c9c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c9e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	78db      	ldrb	r3, [r3, #3]
 8006ca6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e018      	b.n	8006ce0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cce:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cd4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	78db      	ldrb	r3, [r3, #3]
 8006cda:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6899      	ldr	r1, [r3, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f99f 	bl	800705c <RTC_ExitInitMode>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	22ff      	movs	r2, #255	; 0xff
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d2a:	7cfb      	ldrb	r3, [r7, #19]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd90      	pop	{r4, r7, pc}

08006d4a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	0c1b      	lsrs	r3, r3, #16
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	0a1b      	lsrs	r3, r3, #8
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	0d9b      	lsrs	r3, r3, #22
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11a      	bne.n	8006df8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f9a6 	bl	8007118 <RTC_Bcd2ToByte>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f99d 	bl	8007118 <RTC_Bcd2ToByte>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	789b      	ldrb	r3, [r3, #2]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f994 	bl	8007118 <RTC_Bcd2ToByte>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e02:	b590      	push	{r4, r7, lr}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_RTC_SetDate+0x1a>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e075      	b.n	8006f08 <HAL_RTC_SetDate+0x106>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10e      	bne.n	8006e50 <HAL_RTC_SetDate+0x4e>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	f023 0310 	bic.w	r3, r3, #16
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	330a      	adds	r3, #10
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11c      	bne.n	8006e90 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	78db      	ldrb	r3, [r3, #3]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f93c 	bl	80070d8 <RTC_ByteToBcd2>
 8006e60:	4603      	mov	r3, r0
 8006e62:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 f935 	bl	80070d8 <RTC_ByteToBcd2>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e72:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	789b      	ldrb	r3, [r3, #2]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f92d 	bl	80070d8 <RTC_ByteToBcd2>
 8006e7e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e80:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e00e      	b.n	8006eae <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	78db      	ldrb	r3, [r3, #3]
 8006e94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e9c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ea2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	22ca      	movs	r2, #202	; 0xca
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2253      	movs	r2, #83	; 0x53
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f898 	bl	8006ff4 <RTC_EnterInitMode>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006ec8:	7cfb      	ldrb	r3, [r7, #19]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ed8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006edc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f8bc 	bl	800705c <RTC_ExitInitMode>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	22ff      	movs	r2, #255	; 0xff
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006ef0:	7cfb      	ldrb	r3, [r7, #19]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006f06:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd90      	pop	{r4, r7, pc}

08006f10 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	0a1b      	lsrs	r3, r3, #8
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	0b5b      	lsrs	r3, r3, #13
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d11a      	bne.n	8006fa0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 f8d2 	bl	8007118 <RTC_Bcd2ToByte>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f8c9 	bl	8007118 <RTC_Bcd2ToByte>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	789b      	ldrb	r3, [r3, #2]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f8c0 	bl	8007118 <RTC_Bcd2ToByte>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a0d      	ldr	r2, [pc, #52]	; (8006ff0 <HAL_RTC_WaitForSynchro+0x44>)
 8006fba:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006fbc:	f7fc fc1e 	bl	80037fc <HAL_GetTick>
 8006fc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fc2:	e009      	b.n	8006fd8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fc4:	f7fc fc1a 	bl	80037fc <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e007      	b.n	8006fe8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0ee      	beq.n	8006fc4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	0003ff5f 	.word	0x0003ff5f

08006ff4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d120      	bne.n	8007050 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f04f 32ff 	mov.w	r2, #4294967295
 8007016:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007018:	f7fc fbf0 	bl	80037fc <HAL_GetTick>
 800701c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800701e:	e00d      	b.n	800703c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007020:	f7fc fbec 	bl	80037fc <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800702e:	d905      	bls.n	800703c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2203      	movs	r2, #3
 8007038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <RTC_EnterInitMode+0x5c>
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d1e7      	bne.n	8007020 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <RTC_ExitInitMode+0x78>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <RTC_ExitInitMode+0x78>)
 800706e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007072:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <RTC_ExitInitMode+0x78>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10c      	bne.n	800709a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff ff93 	bl	8006fac <HAL_RTC_WaitForSynchro>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01e      	beq.n	80070ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2203      	movs	r2, #3
 8007090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	73fb      	strb	r3, [r7, #15]
 8007098:	e017      	b.n	80070ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800709a:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <RTC_ExitInitMode+0x78>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	4a0d      	ldr	r2, [pc, #52]	; (80070d4 <RTC_ExitInitMode+0x78>)
 80070a0:	f023 0320 	bic.w	r3, r3, #32
 80070a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff ff80 	bl	8006fac <HAL_RTC_WaitForSynchro>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2203      	movs	r2, #3
 80070b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <RTC_ExitInitMode+0x78>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <RTC_ExitInitMode+0x78>)
 80070c4:	f043 0320 	orr.w	r3, r3, #32
 80070c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40002800 	.word	0x40002800

080070d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80070ea:	e005      	b.n	80070f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	3b0a      	subs	r3, #10
 80070f6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d8f6      	bhi.n	80070ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	b2da      	uxtb	r2, r3
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	4313      	orrs	r3, r2
 800710a:	b2db      	uxtb	r3, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	b2db      	uxtb	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	0092      	lsls	r2, r2, #2
 800712c:	4413      	add	r3, r2
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	b2da      	uxtb	r2, r3
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	4413      	add	r3, r2
 800713e:	b2db      	uxtb	r3, r3
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e095      	b.n	800728a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d108      	bne.n	8007178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800716e:	d009      	beq.n	8007184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	61da      	str	r2, [r3, #28]
 8007176:	e005      	b.n	8007184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fb ffca 	bl	8003138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c4:	d902      	bls.n	80071cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e002      	b.n	80071d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071da:	d007      	beq.n	80071ec <HAL_SPI_Init+0xa0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071e4:	d002      	beq.n	80071ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722e:	ea42 0103 	orr.w	r1, r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	f003 0204 	and.w	r2, r3, #4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007268:	ea42 0103 	orr.w	r1, r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e01a      	b.n	80072da <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7fb ff87 	bl	80031d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b088      	sub	sp, #32
 80072e6:	af02      	add	r7, sp, #8
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d002      	beq.n	8007308 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007302:	2302      	movs	r3, #2
 8007304:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007306:	e11a      	b.n	800753e <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007310:	d112      	bne.n	8007338 <HAL_SPI_Receive+0x56>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10e      	bne.n	8007338 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2204      	movs	r2, #4
 800731e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007322:	88fa      	ldrh	r2, [r7, #6]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	4613      	mov	r3, r2
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f90e 	bl	8007550 <HAL_SPI_TransmitReceive>
 8007334:	4603      	mov	r3, r0
 8007336:	e107      	b.n	8007548 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_SPI_Receive+0x64>
 8007342:	2302      	movs	r3, #2
 8007344:	e100      	b.n	8007548 <HAL_SPI_Receive+0x266>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800734e:	f7fc fa55 	bl	80037fc <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Receive+0x7e>
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007364:	e0eb      	b.n	800753e <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2204      	movs	r2, #4
 800736a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	88fa      	ldrh	r2, [r7, #6]
 800737e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073b0:	d908      	bls.n	80073c4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e007      	b.n	80073d4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073dc:	d10f      	bne.n	80073fe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	d007      	beq.n	800741c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007424:	d86f      	bhi.n	8007506 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007426:	e034      	b.n	8007492 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d117      	bne.n	8007466 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f103 020c 	add.w	r2, r3, #12
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	7812      	ldrb	r2, [r2, #0]
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007464:	e015      	b.n	8007492 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007466:	f7fc f9c9 	bl	80037fc <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d803      	bhi.n	800747e <HAL_SPI_Receive+0x19c>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d102      	bne.n	8007484 <HAL_SPI_Receive+0x1a2>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007490:	e055      	b.n	800753e <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1c4      	bne.n	8007428 <HAL_SPI_Receive+0x146>
 800749e:	e038      	b.n	8007512 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d115      	bne.n	80074da <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	b292      	uxth	r2, r2
 80074ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	1c9a      	adds	r2, r3, #2
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80074d8:	e015      	b.n	8007506 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074da:	f7fc f98f 	bl	80037fc <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d803      	bhi.n	80074f2 <HAL_SPI_Receive+0x210>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d102      	bne.n	80074f8 <HAL_SPI_Receive+0x216>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007504:	e01b      	b.n	800753e <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1c6      	bne.n	80074a0 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fffe 	bl	8008518 <SPI_EndRxTransaction>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
 8007534:	e003      	b.n	800753e <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800755e:	2301      	movs	r3, #1
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x26>
 8007572:	2302      	movs	r3, #2
 8007574:	e20a      	b.n	800798c <HAL_SPI_TransmitReceive+0x43c>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800757e:	f7fc f93d 	bl	80037fc <HAL_GetTick>
 8007582:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800758a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007592:	887b      	ldrh	r3, [r7, #2]
 8007594:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007596:	887b      	ldrh	r3, [r7, #2]
 8007598:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800759a:	7efb      	ldrb	r3, [r7, #27]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d00e      	beq.n	80075be <HAL_SPI_TransmitReceive+0x6e>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a6:	d106      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x66>
 80075b0:	7efb      	ldrb	r3, [r7, #27]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d003      	beq.n	80075be <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
 80075b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80075bc:	e1e0      	b.n	8007980 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_SPI_TransmitReceive+0x80>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_SPI_TransmitReceive+0x80>
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80075d6:	e1d3      	b.n	8007980 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d003      	beq.n	80075ec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2205      	movs	r2, #5
 80075e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	887a      	ldrh	r2, [r7, #2]
 80075fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	887a      	ldrh	r2, [r7, #2]
 8007604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	887a      	ldrh	r2, [r7, #2]
 8007612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	887a      	ldrh	r2, [r7, #2]
 8007618:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800762e:	d802      	bhi.n	8007636 <HAL_SPI_TransmitReceive+0xe6>
 8007630:	8a3b      	ldrh	r3, [r7, #16]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d908      	bls.n	8007648 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007644:	605a      	str	r2, [r3, #4]
 8007646:	e007      	b.n	8007658 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d007      	beq.n	8007676 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800767e:	f240 8081 	bls.w	8007784 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x140>
 800768a:	8a7b      	ldrh	r3, [r7, #18]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d16d      	bne.n	800776c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	881a      	ldrh	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b4:	e05a      	b.n	800776c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d11b      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x1ac>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x1ac>
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d113      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	881a      	ldrh	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	1c9a      	adds	r2, r3, #2
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	d11c      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x1f4>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d016      	beq.n	8007744 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	b292      	uxth	r2, r2
 8007722:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	1c9a      	adds	r2, r3, #2
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007740:	2301      	movs	r3, #1
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007744:	f7fc f85a 	bl	80037fc <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007750:	429a      	cmp	r2, r3
 8007752:	d80b      	bhi.n	800776c <HAL_SPI_TransmitReceive+0x21c>
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d007      	beq.n	800776c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800776a:	e109      	b.n	8007980 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d19f      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x166>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d199      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x166>
 8007782:	e0e3      	b.n	800794c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x244>
 800778c:	8a7b      	ldrh	r3, [r7, #18]
 800778e:	2b01      	cmp	r3, #1
 8007790:	f040 80cf 	bne.w	8007932 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d912      	bls.n	80077c4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b02      	subs	r3, #2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077c2:	e0b6      	b.n	8007932 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ea:	e0a2      	b.n	8007932 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d134      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x314>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x314>
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	2b01      	cmp	r3, #1
 8007808:	d12c      	bne.n	8007864 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d912      	bls.n	800783a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	881a      	ldrh	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b02      	subs	r3, #2
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007838:	e012      	b.n	8007860 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b01      	cmp	r3, #1
 8007870:	d148      	bne.n	8007904 <HAL_SPI_TransmitReceive+0x3b4>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d042      	beq.n	8007904 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d923      	bls.n	80078d2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	b292      	uxth	r2, r2
 8007896:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	1c9a      	adds	r2, r3, #2
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b02      	subs	r3, #2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d81f      	bhi.n	8007900 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ce:	605a      	str	r2, [r3, #4]
 80078d0:	e016      	b.n	8007900 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f103 020c 	add.w	r2, r3, #12
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	7812      	ldrb	r2, [r2, #0]
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007900:	2301      	movs	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007904:	f7fb ff7a 	bl	80037fc <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007910:	429a      	cmp	r2, r3
 8007912:	d803      	bhi.n	800791c <HAL_SPI_TransmitReceive+0x3cc>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d102      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x3d2>
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	2b00      	cmp	r3, #0
 8007920:	d107      	bne.n	8007932 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007930:	e026      	b.n	8007980 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f af57 	bne.w	80077ec <HAL_SPI_TransmitReceive+0x29c>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	f47f af50 	bne.w	80077ec <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fe39 	bl	80085c8 <SPI_EndRxTxTransaction>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007976:	e003      	b.n	8007980 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	; 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_SPI_Transmit_IT+0x1e>
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079b6:	e06d      	b.n	8007a94 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d002      	beq.n	80079ca <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80079c4:	2302      	movs	r3, #2
 80079c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079c8:	e064      	b.n	8007a94 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_SPI_Transmit_IT+0x44>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e05e      	b.n	8007a96 <HAL_SPI_Transmit_IT+0x102>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2203      	movs	r2, #3
 80079e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a24:	d903      	bls.n	8007a2e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <HAL_SPI_Transmit_IT+0x110>)
 8007a2a:	651a      	str	r2, [r3, #80]	; 0x50
 8007a2c:	e002      	b.n	8007a34 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4a1d      	ldr	r2, [pc, #116]	; (8007aa8 <HAL_SPI_Transmit_IT+0x114>)
 8007a32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3c:	d10f      	bne.n	8007a5e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b40      	cmp	r3, #64	; 0x40
 8007a6a:	d007      	beq.n	8007a7c <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007a92:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	08008297 	.word	0x08008297
 8007aa8:	08008251 	.word	0x08008251

08007aac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d002      	beq.n	8007ad0 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
 8007acc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ace:	e092      	b.n	8007bf6 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d110      	bne.n	8007afa <HAL_SPI_Receive_IT+0x4e>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae0:	d10b      	bne.n	8007afa <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f889 	bl	8007c08 <HAL_SPI_TransmitReceive_IT>
 8007af6:	4603      	mov	r3, r0
 8007af8:	e07e      	b.n	8007bf8 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_SPI_Receive_IT+0x5a>
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b0a:	e074      	b.n	8007bf6 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <HAL_SPI_Receive_IT+0x6e>
 8007b16:	2302      	movs	r3, #2
 8007b18:	e06e      	b.n	8007bf8 <HAL_SPI_Receive_IT+0x14c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2204      	movs	r2, #4
 8007b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	88fa      	ldrh	r2, [r7, #6]
 8007b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	88fa      	ldrh	r2, [r7, #6]
 8007b42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b66:	d90b      	bls.n	8007b80 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b76:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <HAL_SPI_Receive_IT+0x154>)
 8007b7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8007b7e:	e00a      	b.n	8007b96 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b8e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a1c      	ldr	r2, [pc, #112]	; (8007c04 <HAL_SPI_Receive_IT+0x158>)
 8007b94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b9e:	d10f      	bne.n	8007bc0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bbe:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	d007      	beq.n	8007bde <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bdc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007bf4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08008205 	.word	0x08008205
 8007c04:	080081b5 	.word	0x080081b5

08007c08 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c20:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c28:	7dbb      	ldrb	r3, [r7, #22]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d00d      	beq.n	8007c4a <HAL_SPI_TransmitReceive_IT+0x42>
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c34:	d106      	bne.n	8007c44 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007c3e:	7dbb      	ldrb	r3, [r7, #22]
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d002      	beq.n	8007c4a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
 8007c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c48:	e07d      	b.n	8007d46 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_SPI_TransmitReceive_IT+0x54>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <HAL_SPI_TransmitReceive_IT+0x54>
 8007c56:	887b      	ldrh	r3, [r7, #2]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c60:	e071      	b.n	8007d46 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_SPI_TransmitReceive_IT+0x68>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e06b      	b.n	8007d48 <HAL_SPI_TransmitReceive_IT+0x140>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d003      	beq.n	8007c8c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2205      	movs	r2, #5
 8007c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	887a      	ldrh	r2, [r7, #2]
 8007c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	887a      	ldrh	r2, [r7, #2]
 8007ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	887a      	ldrh	r2, [r7, #2]
 8007cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	887a      	ldrh	r2, [r7, #2]
 8007cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cc2:	d906      	bls.n	8007cd2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a23      	ldr	r2, [pc, #140]	; (8007d54 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007cc8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007cce:	651a      	str	r2, [r3, #80]	; 0x50
 8007cd0:	e005      	b.n	8007cde <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <HAL_SPI_TransmitReceive_IT+0x154>)
 8007cd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4a21      	ldr	r2, [pc, #132]	; (8007d60 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007cdc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ce6:	d802      	bhi.n	8007cee <HAL_SPI_TransmitReceive_IT+0xe6>
 8007ce8:	887b      	ldrh	r3, [r7, #2]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d908      	bls.n	8007d00 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	e007      	b.n	8007d10 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d0e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b40      	cmp	r3, #64	; 0x40
 8007d1c:	d007      	beq.n	8007d2e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d2c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007d44:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	080080ef 	.word	0x080080ef
 8007d58:	08008155 	.word	0x08008155
 8007d5c:	08007f9f 	.word	0x08007f9f
 8007d60:	0800805d 	.word	0x0800805d

08007d64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10e      	bne.n	8007da4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d009      	beq.n	8007da4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
    return;
 8007da2:	e0ce      	b.n	8007f42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d009      	beq.n	8007dc2 <HAL_SPI_IRQHandler+0x5e>
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
    return;
 8007dc0:	e0bf      	b.n	8007f42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <HAL_SPI_IRQHandler+0x7e>
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80b0 	beq.w	8007f42 <HAL_SPI_IRQHandler+0x1de>
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 80aa 	beq.w	8007f42 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d023      	beq.n	8007e40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d011      	beq.n	8007e28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e08:	f043 0204 	orr.w	r2, r3, #4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	e00b      	b.n	8007e40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	693b      	ldr	r3, [r7, #16]
        return;
 8007e3e:	e080      	b.n	8007f42 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d014      	beq.n	8007e74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4e:	f043 0201 	orr.w	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e82:	f043 0208 	orr.w	r2, r3, #8
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60bb      	str	r3, [r7, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	60bb      	str	r3, [r7, #8]
 8007e96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d04f      	beq.n	8007f40 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <HAL_SPI_IRQHandler+0x168>
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d034      	beq.n	8007f36 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0203 	bic.w	r2, r2, #3
 8007eda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d011      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee8:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <HAL_SPI_IRQHandler+0x1e4>)
 8007eea:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fb ff41 	bl	8003d78 <HAL_DMA_Abort_IT>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d016      	beq.n	8007f3e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f14:	4a0c      	ldr	r2, [pc, #48]	; (8007f48 <HAL_SPI_IRQHandler+0x1e4>)
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fb ff2b 	bl	8003d78 <HAL_DMA_Abort_IT>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007f34:	e003      	b.n	8007f3e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f812 	bl	8007f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f3c:	e000      	b.n	8007f40 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007f3e:	bf00      	nop
    return;
 8007f40:	bf00      	nop
  }
}
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	08007f75 	.word	0x08007f75

08007f4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff ffe5 	bl	8007f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f96:	bf00      	nop
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d923      	bls.n	8007ffa <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	b292      	uxth	r2, r2
 8007fbe:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	1c9a      	adds	r2, r3, #2
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b02      	subs	r3, #2
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d11f      	bne.n	8008028 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	e016      	b.n	8008028 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f103 020c 	add.w	r2, r3, #12
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10f      	bne.n	8008054 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008042:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fb00 	bl	8008654 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b01      	cmp	r3, #1
 800806c:	d912      	bls.n	8008094 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	881a      	ldrh	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	1c9a      	adds	r2, r3, #2
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b02      	subs	r3, #2
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008092:	e012      	b.n	80080ba <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d110      	bne.n	80080e6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080d2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d102      	bne.n	80080e6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fab7 	bl	8008654 <SPI_CloseRxTx_ISR>
    }
  }
}
 80080e6:	bf00      	nop
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	b292      	uxth	r2, r2
 8008102:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10f      	bne.n	800814c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa84 	bl	8008654 <SPI_CloseRxTx_ISR>
    }
  }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	881a      	ldrh	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	1c9a      	adds	r2, r3, #2
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d110      	bne.n	80081ac <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008198:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa54 	bl	8008654 <SPI_CloseRxTx_ISR>
    }
  }
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f103 020c 	add.w	r2, r3, #12
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa6e 	bl	80086d8 <SPI_CloseRx_ISR>
  }
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	b292      	uxth	r2, r2
 8008218:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	1c9a      	adds	r2, r3, #2
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800822a:	b29b      	uxth	r3, r3
 800822c:	3b01      	subs	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d102      	bne.n	8008248 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa48 	bl	80086d8 <SPI_CloseRx_ISR>
  }
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fa55 	bl	8008738 <SPI_CloseTx_ISR>
  }
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	881a      	ldrh	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	1c9a      	adds	r2, r3, #2
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa33 	bl	8008738 <SPI_CloseTx_ISR>
  }
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	4613      	mov	r3, r2
 80082ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082ec:	f7fb fa86 	bl	80037fc <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f4:	1a9b      	subs	r3, r3, r2
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	4413      	add	r3, r2
 80082fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082fc:	f7fb fa7e 	bl	80037fc <HAL_GetTick>
 8008300:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008302:	4b39      	ldr	r3, [pc, #228]	; (80083e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	015b      	lsls	r3, r3, #5
 8008308:	0d1b      	lsrs	r3, r3, #20
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	fb02 f303 	mul.w	r3, r2, r3
 8008310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008312:	e054      	b.n	80083be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d050      	beq.n	80083be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800831c:	f7fb fa6e 	bl	80037fc <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	429a      	cmp	r2, r3
 800832a:	d902      	bls.n	8008332 <SPI_WaitFlagStateUntilTimeout+0x56>
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d13d      	bne.n	80083ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800834a:	d111      	bne.n	8008370 <SPI_WaitFlagStateUntilTimeout+0x94>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008354:	d004      	beq.n	8008360 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835e:	d107      	bne.n	8008370 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800836e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008378:	d10f      	bne.n	800839a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e017      	b.n	80083de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4013      	ands	r3, r2
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	bf0c      	ite	eq
 80083ce:	2301      	moveq	r3, #1
 80083d0:	2300      	movne	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d19b      	bne.n	8008314 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200000ac 	.word	0x200000ac

080083ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	; 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083fe:	f7fb f9fd 	bl	80037fc <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	4413      	add	r3, r2
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800840e:	f7fb f9f5 	bl	80037fc <HAL_GetTick>
 8008412:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800841c:	4b3d      	ldr	r3, [pc, #244]	; (8008514 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	0d1b      	lsrs	r3, r3, #20
 800842c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842e:	fb02 f303 	mul.w	r3, r2, r3
 8008432:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008434:	e060      	b.n	80084f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800843c:	d107      	bne.n	800844e <SPI_WaitFifoStateUntilTimeout+0x62>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800844c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008454:	d050      	beq.n	80084f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008456:	f7fb f9d1 	bl	80037fc <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008462:	429a      	cmp	r2, r3
 8008464:	d902      	bls.n	800846c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d13d      	bne.n	80084e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800847a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008484:	d111      	bne.n	80084aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800848e:	d004      	beq.n	800849a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008498:	d107      	bne.n	80084aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b2:	d10f      	bne.n	80084d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e010      	b.n	800850a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4013      	ands	r3, r2
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d196      	bne.n	8008436 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	; 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200000ac 	.word	0x200000ac

08008518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800852c:	d111      	bne.n	8008552 <SPI_EndRxTransaction+0x3a>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008536:	d004      	beq.n	8008542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008540:	d107      	bne.n	8008552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008550:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2200      	movs	r2, #0
 800855a:	2180      	movs	r1, #128	; 0x80
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff febd 	bl	80082dc <SPI_WaitFlagStateUntilTimeout>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856c:	f043 0220 	orr.w	r2, r3, #32
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e023      	b.n	80085c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008580:	d11d      	bne.n	80085be <SPI_EndRxTransaction+0xa6>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858a:	d004      	beq.n	8008596 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008594:	d113      	bne.n	80085be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2200      	movs	r2, #0
 800859e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff ff22 	bl	80083ec <SPI_WaitFifoStateUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b2:	f043 0220 	orr.w	r2, r3, #32
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e000      	b.n	80085c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2200      	movs	r2, #0
 80085dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff ff03 	bl	80083ec <SPI_WaitFifoStateUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f0:	f043 0220 	orr.w	r2, r3, #32
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e027      	b.n	800864c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	2180      	movs	r1, #128	; 0x80
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff fe68 	bl	80082dc <SPI_WaitFlagStateUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008616:	f043 0220 	orr.w	r2, r3, #32
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e014      	b.n	800864c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff fedc 	bl	80083ec <SPI_WaitFifoStateUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e000      	b.n	800864c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800865c:	f7fb f8ce 	bl	80037fc <HAL_GetTick>
 8008660:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0220 	bic.w	r2, r2, #32
 8008670:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	2164      	movs	r1, #100	; 0x64
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff ffa6 	bl	80085c8 <SPI_EndRxTxTransaction>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008686:	f043 0220 	orr.w	r2, r3, #32
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008692:	2b00      	cmp	r3, #0
 8008694:	d115      	bne.n	80086c2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d107      	bne.n	80086b2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f003 fefc 	bl	800c4a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80086b0:	e00e      	b.n	80086d0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff fc46 	bl	8007f4c <HAL_SPI_TxRxCpltCallback>
}
 80086c0:	e006      	b.n	80086d0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fc48 	bl	8007f60 <HAL_SPI_ErrorCallback>
}
 80086d0:	bf00      	nop
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80086ee:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80086f0:	f7fb f884 	bl	80037fc <HAL_GetTick>
 80086f4:	4603      	mov	r3, r0
 80086f6:	461a      	mov	r2, r3
 80086f8:	2164      	movs	r1, #100	; 0x64
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff ff0c 	bl	8008518 <SPI_EndRxTransaction>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870a:	f043 0220 	orr.w	r2, r3, #32
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 fec0 	bl	800c4a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008728:	e002      	b.n	8008730 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff fc18 	bl	8007f60 <HAL_SPI_ErrorCallback>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008740:	f7fb f85c 	bl	80037fc <HAL_GetTick>
 8008744:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008754:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	2164      	movs	r1, #100	; 0x64
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ff34 	bl	80085c8 <SPI_EndRxTxTransaction>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800877a:	2300      	movs	r3, #0
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	60bb      	str	r3, [r7, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	60bb      	str	r3, [r7, #8]
 800878e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff fbdd 	bl	8007f60 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80087a6:	e002      	b.n	80087ae <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f003 fe91 	bl	800c4d0 <HAL_SPI_TxCpltCallback>
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e040      	b.n	800884a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fa fd1b 	bl	8003214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2224      	movs	r2, #36	; 0x24
 80087e2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fec1 	bl	8009584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fc06 	bl	8009014 <UART_SetConfig>
 8008808:	4603      	mov	r3, r0
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e01b      	b.n	800884a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008820:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008830:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0201 	orr.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 ff40 	bl	80096c8 <UART_CheckIdleState>
 8008848:	4603      	mov	r3, r0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b08a      	sub	sp, #40	; 0x28
 8008856:	af02      	add	r7, sp, #8
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	603b      	str	r3, [r7, #0]
 800885e:	4613      	mov	r3, r2
 8008860:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008866:	2b20      	cmp	r3, #32
 8008868:	d178      	bne.n	800895c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_UART_Transmit+0x24>
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e071      	b.n	800895e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2221      	movs	r2, #33	; 0x21
 8008886:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008888:	f7fa ffb8 	bl	80037fc <HAL_GetTick>
 800888c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	88fa      	ldrh	r2, [r7, #6]
 800889a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d108      	bne.n	80088ba <HAL_UART_Transmit+0x68>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	61bb      	str	r3, [r7, #24]
 80088b8:	e003      	b.n	80088c2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088c2:	e030      	b.n	8008926 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	2200      	movs	r2, #0
 80088cc:	2180      	movs	r1, #128	; 0x80
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 ffa2 	bl	8009818 <UART_WaitOnFlagUntilTimeout>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2220      	movs	r2, #32
 80088de:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e03c      	b.n	800895e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10b      	bne.n	8008902 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	881a      	ldrh	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088f6:	b292      	uxth	r2, r2
 80088f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	3302      	adds	r3, #2
 80088fe:	61bb      	str	r3, [r7, #24]
 8008900:	e008      	b.n	8008914 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	b292      	uxth	r2, r2
 800890c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3301      	adds	r3, #1
 8008912:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1c8      	bne.n	80088c4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2200      	movs	r2, #0
 800893a:	2140      	movs	r1, #64	; 0x40
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 ff6b 	bl	8009818 <UART_WaitOnFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d004      	beq.n	8008952 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2220      	movs	r2, #32
 800894c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e005      	b.n	800895e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2220      	movs	r2, #32
 8008956:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	e000      	b.n	800895e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800895c:	2302      	movs	r3, #2
  }
}
 800895e:	4618      	mov	r0, r3
 8008960:	3720      	adds	r7, #32
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	; 0x28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800897c:	2b20      	cmp	r3, #32
 800897e:	d137      	bne.n	80089f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_UART_Receive_IT+0x24>
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e030      	b.n	80089f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a18      	ldr	r2, [pc, #96]	; (80089fc <HAL_UART_Receive_IT+0x94>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d01f      	beq.n	80089e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d018      	beq.n	80089e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	613b      	str	r3, [r7, #16]
   return(result);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	461a      	mov	r2, r3
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	623b      	str	r3, [r7, #32]
 80089ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	69f9      	ldr	r1, [r7, #28]
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e6      	bne.n	80089ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 ff7e 	bl	80098e8 <UART_Start_Receive_IT>
 80089ec:	4603      	mov	r3, r0
 80089ee:	e000      	b.n	80089f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089f0:	2302      	movs	r3, #2
  }
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3728      	adds	r7, #40	; 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	40008000 	.word	0x40008000

08008a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b0ba      	sub	sp, #232	; 0xe8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a2e:	4013      	ands	r3, r2
 8008a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d115      	bne.n	8008a68 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00f      	beq.n	8008a68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 82ae 	beq.w	8008fba <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	4798      	blx	r3
      }
      return;
 8008a66:	e2a8      	b.n	8008fba <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8117 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008a82:	4b85      	ldr	r3, [pc, #532]	; (8008c98 <HAL_UART_IRQHandler+0x298>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 810a 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d011      	beq.n	8008abc <HAL_UART_IRQHandler+0xbc>
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00b      	beq.n	8008abc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab2:	f043 0201 	orr.w	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d011      	beq.n	8008aec <HAL_UART_IRQHandler+0xec>
 8008ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae2:	f043 0204 	orr.w	r2, r3, #4
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d011      	beq.n	8008b1c <HAL_UART_IRQHandler+0x11c>
 8008af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2204      	movs	r2, #4
 8008b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b12:	f043 0202 	orr.w	r2, r3, #2
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b20:	f003 0308 	and.w	r3, r3, #8
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d017      	beq.n	8008b58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2208      	movs	r2, #8
 8008b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4e:	f043 0208 	orr.w	r2, r3, #8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d012      	beq.n	8008b8a <HAL_UART_IRQHandler+0x18a>
 8008b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b80:	f043 0220 	orr.w	r2, r3, #32
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8214 	beq.w	8008fbe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00d      	beq.n	8008bbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d005      	beq.n	8008be2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d04f      	beq.n	8008c82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 ff46 	bl	8009a74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b40      	cmp	r3, #64	; 0x40
 8008bf4:	d141      	bne.n	8008c7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1d9      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d013      	beq.n	8008c72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c4e:	4a13      	ldr	r2, [pc, #76]	; (8008c9c <HAL_UART_IRQHandler+0x29c>)
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fb f88e 	bl	8003d78 <HAL_DMA_Abort_IT>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d017      	beq.n	8008c92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	e00f      	b.n	8008c92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f9b8 	bl	8008fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c78:	e00b      	b.n	8008c92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f9b4 	bl	8008fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c80:	e007      	b.n	8008c92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f9b0 	bl	8008fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008c90:	e195      	b.n	8008fbe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c92:	bf00      	nop
    return;
 8008c94:	e193      	b.n	8008fbe <HAL_UART_IRQHandler+0x5be>
 8008c96:	bf00      	nop
 8008c98:	04000120 	.word	0x04000120
 8008c9c:	08009b3d 	.word	0x08009b3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	f040 814e 	bne.w	8008f46 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cae:	f003 0310 	and.w	r3, r3, #16
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 8147 	beq.w	8008f46 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 8140 	beq.w	8008f46 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2210      	movs	r2, #16
 8008ccc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd8:	2b40      	cmp	r3, #64	; 0x40
 8008cda:	f040 80b8 	bne.w	8008e4e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8167 	beq.w	8008fc2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	f080 815f 	bcs.w	8008fc2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f040 8086 	bne.w	8008e2c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1da      	bne.n	8008d20 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e1      	bne.n	8008d6a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3308      	adds	r3, #8
 8008dac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008dca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008dcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008dd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e3      	bne.n	8008da6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dfc:	f023 0310 	bic.w	r3, r3, #16
 8008e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e4      	bne.n	8008dec <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fa ff68 	bl	8003cfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f8d8 	bl	8008ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e4c:	e0b9      	b.n	8008fc2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80ab 	beq.w	8008fc6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8008e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80a6 	beq.w	8008fc6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e4      	bne.n	8008e7a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	f023 0301 	bic.w	r3, r3, #1
 8008ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ed4:	633a      	str	r2, [r7, #48]	; 0x30
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e3      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f023 0310 	bic.w	r3, r3, #16
 8008f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	69b9      	ldr	r1, [r7, #24]
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e4      	bne.n	8008efc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f85c 	bl	8008ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f44:	e03f      	b.n	8008fc6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00e      	beq.n	8008f70 <HAL_UART_IRQHandler+0x570>
 8008f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d008      	beq.n	8008f70 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 ffe3 	bl	8009f34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f6e:	e02d      	b.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00e      	beq.n	8008f9a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d008      	beq.n	8008f9a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01c      	beq.n	8008fca <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
    }
    return;
 8008f98:	e017      	b.n	8008fca <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d012      	beq.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
 8008fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00c      	beq.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fdd8 	bl	8009b68 <UART_EndTransmit_IT>
    return;
 8008fb8:	e008      	b.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
      return;
 8008fba:	bf00      	nop
 8008fbc:	e006      	b.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
    return;
 8008fbe:	bf00      	nop
 8008fc0:	e004      	b.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
      return;
 8008fc2:	bf00      	nop
 8008fc4:	e002      	b.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
      return;
 8008fc6:	bf00      	nop
 8008fc8:	e000      	b.n	8008fcc <HAL_UART_IRQHandler+0x5cc>
    return;
 8008fca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008fcc:	37e8      	adds	r7, #232	; 0xe8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop

08008fd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009018:	b08a      	sub	sp, #40	; 0x28
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	431a      	orrs	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	431a      	orrs	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	4313      	orrs	r3, r2
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4ba4      	ldr	r3, [pc, #656]	; (80092d4 <UART_SetConfig+0x2c0>)
 8009044:	4013      	ands	r3, r2
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	6812      	ldr	r2, [r2, #0]
 800904a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800904c:	430b      	orrs	r3, r1
 800904e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a99      	ldr	r2, [pc, #612]	; (80092d8 <UART_SetConfig+0x2c4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d004      	beq.n	8009080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907c:	4313      	orrs	r3, r2
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009090:	430a      	orrs	r2, r1
 8009092:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a90      	ldr	r2, [pc, #576]	; (80092dc <UART_SetConfig+0x2c8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d126      	bne.n	80090ec <UART_SetConfig+0xd8>
 800909e:	4b90      	ldr	r3, [pc, #576]	; (80092e0 <UART_SetConfig+0x2cc>)
 80090a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d81b      	bhi.n	80090e4 <UART_SetConfig+0xd0>
 80090ac:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <UART_SetConfig+0xa0>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	080090d5 	.word	0x080090d5
 80090bc:	080090cd 	.word	0x080090cd
 80090c0:	080090dd 	.word	0x080090dd
 80090c4:	2301      	movs	r3, #1
 80090c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ca:	e116      	b.n	80092fa <UART_SetConfig+0x2e6>
 80090cc:	2302      	movs	r3, #2
 80090ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090d2:	e112      	b.n	80092fa <UART_SetConfig+0x2e6>
 80090d4:	2304      	movs	r3, #4
 80090d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090da:	e10e      	b.n	80092fa <UART_SetConfig+0x2e6>
 80090dc:	2308      	movs	r3, #8
 80090de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090e2:	e10a      	b.n	80092fa <UART_SetConfig+0x2e6>
 80090e4:	2310      	movs	r3, #16
 80090e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ea:	e106      	b.n	80092fa <UART_SetConfig+0x2e6>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a7c      	ldr	r2, [pc, #496]	; (80092e4 <UART_SetConfig+0x2d0>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d138      	bne.n	8009168 <UART_SetConfig+0x154>
 80090f6:	4b7a      	ldr	r3, [pc, #488]	; (80092e0 <UART_SetConfig+0x2cc>)
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fc:	f003 030c 	and.w	r3, r3, #12
 8009100:	2b0c      	cmp	r3, #12
 8009102:	d82d      	bhi.n	8009160 <UART_SetConfig+0x14c>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0xf8>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009141 	.word	0x08009141
 8009110:	08009161 	.word	0x08009161
 8009114:	08009161 	.word	0x08009161
 8009118:	08009161 	.word	0x08009161
 800911c:	08009151 	.word	0x08009151
 8009120:	08009161 	.word	0x08009161
 8009124:	08009161 	.word	0x08009161
 8009128:	08009161 	.word	0x08009161
 800912c:	08009149 	.word	0x08009149
 8009130:	08009161 	.word	0x08009161
 8009134:	08009161 	.word	0x08009161
 8009138:	08009161 	.word	0x08009161
 800913c:	08009159 	.word	0x08009159
 8009140:	2300      	movs	r3, #0
 8009142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009146:	e0d8      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009148:	2302      	movs	r3, #2
 800914a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800914e:	e0d4      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009150:	2304      	movs	r3, #4
 8009152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009156:	e0d0      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009158:	2308      	movs	r3, #8
 800915a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800915e:	e0cc      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009160:	2310      	movs	r3, #16
 8009162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009166:	e0c8      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a5e      	ldr	r2, [pc, #376]	; (80092e8 <UART_SetConfig+0x2d4>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d125      	bne.n	80091be <UART_SetConfig+0x1aa>
 8009172:	4b5b      	ldr	r3, [pc, #364]	; (80092e0 <UART_SetConfig+0x2cc>)
 8009174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009178:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800917c:	2b30      	cmp	r3, #48	; 0x30
 800917e:	d016      	beq.n	80091ae <UART_SetConfig+0x19a>
 8009180:	2b30      	cmp	r3, #48	; 0x30
 8009182:	d818      	bhi.n	80091b6 <UART_SetConfig+0x1a2>
 8009184:	2b20      	cmp	r3, #32
 8009186:	d00a      	beq.n	800919e <UART_SetConfig+0x18a>
 8009188:	2b20      	cmp	r3, #32
 800918a:	d814      	bhi.n	80091b6 <UART_SetConfig+0x1a2>
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <UART_SetConfig+0x182>
 8009190:	2b10      	cmp	r3, #16
 8009192:	d008      	beq.n	80091a6 <UART_SetConfig+0x192>
 8009194:	e00f      	b.n	80091b6 <UART_SetConfig+0x1a2>
 8009196:	2300      	movs	r3, #0
 8009198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800919c:	e0ad      	b.n	80092fa <UART_SetConfig+0x2e6>
 800919e:	2302      	movs	r3, #2
 80091a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091a4:	e0a9      	b.n	80092fa <UART_SetConfig+0x2e6>
 80091a6:	2304      	movs	r3, #4
 80091a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ac:	e0a5      	b.n	80092fa <UART_SetConfig+0x2e6>
 80091ae:	2308      	movs	r3, #8
 80091b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091b4:	e0a1      	b.n	80092fa <UART_SetConfig+0x2e6>
 80091b6:	2310      	movs	r3, #16
 80091b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091bc:	e09d      	b.n	80092fa <UART_SetConfig+0x2e6>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a4a      	ldr	r2, [pc, #296]	; (80092ec <UART_SetConfig+0x2d8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d125      	bne.n	8009214 <UART_SetConfig+0x200>
 80091c8:	4b45      	ldr	r3, [pc, #276]	; (80092e0 <UART_SetConfig+0x2cc>)
 80091ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091d2:	2bc0      	cmp	r3, #192	; 0xc0
 80091d4:	d016      	beq.n	8009204 <UART_SetConfig+0x1f0>
 80091d6:	2bc0      	cmp	r3, #192	; 0xc0
 80091d8:	d818      	bhi.n	800920c <UART_SetConfig+0x1f8>
 80091da:	2b80      	cmp	r3, #128	; 0x80
 80091dc:	d00a      	beq.n	80091f4 <UART_SetConfig+0x1e0>
 80091de:	2b80      	cmp	r3, #128	; 0x80
 80091e0:	d814      	bhi.n	800920c <UART_SetConfig+0x1f8>
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <UART_SetConfig+0x1d8>
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d008      	beq.n	80091fc <UART_SetConfig+0x1e8>
 80091ea:	e00f      	b.n	800920c <UART_SetConfig+0x1f8>
 80091ec:	2300      	movs	r3, #0
 80091ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091f2:	e082      	b.n	80092fa <UART_SetConfig+0x2e6>
 80091f4:	2302      	movs	r3, #2
 80091f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091fa:	e07e      	b.n	80092fa <UART_SetConfig+0x2e6>
 80091fc:	2304      	movs	r3, #4
 80091fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009202:	e07a      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009204:	2308      	movs	r3, #8
 8009206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800920a:	e076      	b.n	80092fa <UART_SetConfig+0x2e6>
 800920c:	2310      	movs	r3, #16
 800920e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009212:	e072      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a35      	ldr	r2, [pc, #212]	; (80092f0 <UART_SetConfig+0x2dc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d12a      	bne.n	8009274 <UART_SetConfig+0x260>
 800921e:	4b30      	ldr	r3, [pc, #192]	; (80092e0 <UART_SetConfig+0x2cc>)
 8009220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800922c:	d01a      	beq.n	8009264 <UART_SetConfig+0x250>
 800922e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009232:	d81b      	bhi.n	800926c <UART_SetConfig+0x258>
 8009234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009238:	d00c      	beq.n	8009254 <UART_SetConfig+0x240>
 800923a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800923e:	d815      	bhi.n	800926c <UART_SetConfig+0x258>
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <UART_SetConfig+0x238>
 8009244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009248:	d008      	beq.n	800925c <UART_SetConfig+0x248>
 800924a:	e00f      	b.n	800926c <UART_SetConfig+0x258>
 800924c:	2300      	movs	r3, #0
 800924e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009252:	e052      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009254:	2302      	movs	r3, #2
 8009256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800925a:	e04e      	b.n	80092fa <UART_SetConfig+0x2e6>
 800925c:	2304      	movs	r3, #4
 800925e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009262:	e04a      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009264:	2308      	movs	r3, #8
 8009266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800926a:	e046      	b.n	80092fa <UART_SetConfig+0x2e6>
 800926c:	2310      	movs	r3, #16
 800926e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009272:	e042      	b.n	80092fa <UART_SetConfig+0x2e6>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a17      	ldr	r2, [pc, #92]	; (80092d8 <UART_SetConfig+0x2c4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d13a      	bne.n	80092f4 <UART_SetConfig+0x2e0>
 800927e:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <UART_SetConfig+0x2cc>)
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800928c:	d01a      	beq.n	80092c4 <UART_SetConfig+0x2b0>
 800928e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009292:	d81b      	bhi.n	80092cc <UART_SetConfig+0x2b8>
 8009294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009298:	d00c      	beq.n	80092b4 <UART_SetConfig+0x2a0>
 800929a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800929e:	d815      	bhi.n	80092cc <UART_SetConfig+0x2b8>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <UART_SetConfig+0x298>
 80092a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a8:	d008      	beq.n	80092bc <UART_SetConfig+0x2a8>
 80092aa:	e00f      	b.n	80092cc <UART_SetConfig+0x2b8>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092b2:	e022      	b.n	80092fa <UART_SetConfig+0x2e6>
 80092b4:	2302      	movs	r3, #2
 80092b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ba:	e01e      	b.n	80092fa <UART_SetConfig+0x2e6>
 80092bc:	2304      	movs	r3, #4
 80092be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092c2:	e01a      	b.n	80092fa <UART_SetConfig+0x2e6>
 80092c4:	2308      	movs	r3, #8
 80092c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ca:	e016      	b.n	80092fa <UART_SetConfig+0x2e6>
 80092cc:	2310      	movs	r3, #16
 80092ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092d2:	e012      	b.n	80092fa <UART_SetConfig+0x2e6>
 80092d4:	efff69f3 	.word	0xefff69f3
 80092d8:	40008000 	.word	0x40008000
 80092dc:	40013800 	.word	0x40013800
 80092e0:	40021000 	.word	0x40021000
 80092e4:	40004400 	.word	0x40004400
 80092e8:	40004800 	.word	0x40004800
 80092ec:	40004c00 	.word	0x40004c00
 80092f0:	40005000 	.word	0x40005000
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a9f      	ldr	r2, [pc, #636]	; (800957c <UART_SetConfig+0x568>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d17a      	bne.n	80093fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009308:	2b08      	cmp	r3, #8
 800930a:	d824      	bhi.n	8009356 <UART_SetConfig+0x342>
 800930c:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <UART_SetConfig+0x300>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	08009339 	.word	0x08009339
 8009318:	08009357 	.word	0x08009357
 800931c:	08009341 	.word	0x08009341
 8009320:	08009357 	.word	0x08009357
 8009324:	08009347 	.word	0x08009347
 8009328:	08009357 	.word	0x08009357
 800932c:	08009357 	.word	0x08009357
 8009330:	08009357 	.word	0x08009357
 8009334:	0800934f 	.word	0x0800934f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009338:	f7fc fe8a 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 800933c:	61f8      	str	r0, [r7, #28]
        break;
 800933e:	e010      	b.n	8009362 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009340:	4b8f      	ldr	r3, [pc, #572]	; (8009580 <UART_SetConfig+0x56c>)
 8009342:	61fb      	str	r3, [r7, #28]
        break;
 8009344:	e00d      	b.n	8009362 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009346:	f7fc fdeb 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800934a:	61f8      	str	r0, [r7, #28]
        break;
 800934c:	e009      	b.n	8009362 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800934e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009352:	61fb      	str	r3, [r7, #28]
        break;
 8009354:	e005      	b.n	8009362 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009360:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80fb 	beq.w	8009560 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	4413      	add	r3, r2
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	429a      	cmp	r2, r3
 8009378:	d305      	bcc.n	8009386 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	429a      	cmp	r2, r3
 8009384:	d903      	bls.n	800938e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800938c:	e0e8      	b.n	8009560 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2200      	movs	r2, #0
 8009392:	461c      	mov	r4, r3
 8009394:	4615      	mov	r5, r2
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	022b      	lsls	r3, r5, #8
 80093a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80093a4:	0222      	lsls	r2, r4, #8
 80093a6:	68f9      	ldr	r1, [r7, #12]
 80093a8:	6849      	ldr	r1, [r1, #4]
 80093aa:	0849      	lsrs	r1, r1, #1
 80093ac:	2000      	movs	r0, #0
 80093ae:	4688      	mov	r8, r1
 80093b0:	4681      	mov	r9, r0
 80093b2:	eb12 0a08 	adds.w	sl, r2, r8
 80093b6:	eb43 0b09 	adc.w	fp, r3, r9
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c8:	4650      	mov	r0, sl
 80093ca:	4659      	mov	r1, fp
 80093cc:	f7f7 fc5c 	bl	8000c88 <__aeabi_uldivmod>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4613      	mov	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093de:	d308      	bcc.n	80093f2 <UART_SetConfig+0x3de>
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e6:	d204      	bcs.n	80093f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	60da      	str	r2, [r3, #12]
 80093f0:	e0b6      	b.n	8009560 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80093f8:	e0b2      	b.n	8009560 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009402:	d15e      	bne.n	80094c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009408:	2b08      	cmp	r3, #8
 800940a:	d828      	bhi.n	800945e <UART_SetConfig+0x44a>
 800940c:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <UART_SetConfig+0x400>)
 800940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009412:	bf00      	nop
 8009414:	08009439 	.word	0x08009439
 8009418:	08009441 	.word	0x08009441
 800941c:	08009449 	.word	0x08009449
 8009420:	0800945f 	.word	0x0800945f
 8009424:	0800944f 	.word	0x0800944f
 8009428:	0800945f 	.word	0x0800945f
 800942c:	0800945f 	.word	0x0800945f
 8009430:	0800945f 	.word	0x0800945f
 8009434:	08009457 	.word	0x08009457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009438:	f7fc fe0a 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 800943c:	61f8      	str	r0, [r7, #28]
        break;
 800943e:	e014      	b.n	800946a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009440:	f7fc fe1c 	bl	800607c <HAL_RCC_GetPCLK2Freq>
 8009444:	61f8      	str	r0, [r7, #28]
        break;
 8009446:	e010      	b.n	800946a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009448:	4b4d      	ldr	r3, [pc, #308]	; (8009580 <UART_SetConfig+0x56c>)
 800944a:	61fb      	str	r3, [r7, #28]
        break;
 800944c:	e00d      	b.n	800946a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800944e:	f7fc fd67 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 8009452:	61f8      	str	r0, [r7, #28]
        break;
 8009454:	e009      	b.n	800946a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800945a:	61fb      	str	r3, [r7, #28]
        break;
 800945c:	e005      	b.n	800946a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d077      	beq.n	8009560 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	005a      	lsls	r2, r3, #1
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	085b      	lsrs	r3, r3, #1
 800947a:	441a      	add	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	fbb2 f3f3 	udiv	r3, r2, r3
 8009484:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	2b0f      	cmp	r3, #15
 800948a:	d916      	bls.n	80094ba <UART_SetConfig+0x4a6>
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009492:	d212      	bcs.n	80094ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f023 030f 	bic.w	r3, r3, #15
 800949c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	8afb      	ldrh	r3, [r7, #22]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	8afa      	ldrh	r2, [r7, #22]
 80094b6:	60da      	str	r2, [r3, #12]
 80094b8:	e052      	b.n	8009560 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80094c0:	e04e      	b.n	8009560 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094c6:	2b08      	cmp	r3, #8
 80094c8:	d827      	bhi.n	800951a <UART_SetConfig+0x506>
 80094ca:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <UART_SetConfig+0x4bc>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	080094f5 	.word	0x080094f5
 80094d4:	080094fd 	.word	0x080094fd
 80094d8:	08009505 	.word	0x08009505
 80094dc:	0800951b 	.word	0x0800951b
 80094e0:	0800950b 	.word	0x0800950b
 80094e4:	0800951b 	.word	0x0800951b
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	0800951b 	.word	0x0800951b
 80094f0:	08009513 	.word	0x08009513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f4:	f7fc fdac 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 80094f8:	61f8      	str	r0, [r7, #28]
        break;
 80094fa:	e014      	b.n	8009526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094fc:	f7fc fdbe 	bl	800607c <HAL_RCC_GetPCLK2Freq>
 8009500:	61f8      	str	r0, [r7, #28]
        break;
 8009502:	e010      	b.n	8009526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009504:	4b1e      	ldr	r3, [pc, #120]	; (8009580 <UART_SetConfig+0x56c>)
 8009506:	61fb      	str	r3, [r7, #28]
        break;
 8009508:	e00d      	b.n	8009526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800950a:	f7fc fd09 	bl	8005f20 <HAL_RCC_GetSysClockFreq>
 800950e:	61f8      	str	r0, [r7, #28]
        break;
 8009510:	e009      	b.n	8009526 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009516:	61fb      	str	r3, [r7, #28]
        break;
 8009518:	e005      	b.n	8009526 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800951a:	2300      	movs	r3, #0
 800951c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009524:	bf00      	nop
    }

    if (pclk != 0U)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d019      	beq.n	8009560 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	085a      	lsrs	r2, r3, #1
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	fbb2 f3f3 	udiv	r3, r2, r3
 800953e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b0f      	cmp	r3, #15
 8009544:	d909      	bls.n	800955a <UART_SetConfig+0x546>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800954c:	d205      	bcs.n	800955a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	60da      	str	r2, [r3, #12]
 8009558:	e002      	b.n	8009560 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800956c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009570:	4618      	mov	r0, r3
 8009572:	3728      	adds	r7, #40	; 0x28
 8009574:	46bd      	mov	sp, r7
 8009576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800957a:	bf00      	nop
 800957c:	40008000 	.word	0x40008000
 8009580:	00f42400 	.word	0x00f42400

08009584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00a      	beq.n	80095ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	f003 0302 	and.w	r3, r3, #2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00a      	beq.n	80095f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	f003 0304 	and.w	r3, r3, #4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	430a      	orrs	r2, r1
 8009612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00a      	beq.n	8009636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	430a      	orrs	r2, r1
 8009634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01a      	beq.n	800969a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009682:	d10a      	bne.n	800969a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	605a      	str	r2, [r3, #4]
  }
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b098      	sub	sp, #96	; 0x60
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d8:	f7fa f890 	bl	80037fc <HAL_GetTick>
 80096dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d12e      	bne.n	800974a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096f4:	2200      	movs	r2, #0
 80096f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f88c 	bl	8009818 <UART_WaitOnFlagUntilTimeout>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d021      	beq.n	800974a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	e853 3f00 	ldrex	r3, [r3]
 8009712:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971a:	653b      	str	r3, [r7, #80]	; 0x50
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009724:	647b      	str	r3, [r7, #68]	; 0x44
 8009726:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800972a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e6      	bne.n	8009706 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2220      	movs	r2, #32
 800973c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e062      	b.n	8009810 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b04      	cmp	r3, #4
 8009756:	d149      	bne.n	80097ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009760:	2200      	movs	r2, #0
 8009762:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f856 	bl	8009818 <UART_WaitOnFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d03c      	beq.n	80097ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	623b      	str	r3, [r7, #32]
   return(result);
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009790:	633b      	str	r3, [r7, #48]	; 0x30
 8009792:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e6      	bne.n	8009772 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097c4:	61fa      	str	r2, [r7, #28]
 80097c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	69b9      	ldr	r1, [r7, #24]
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	617b      	str	r3, [r7, #20]
   return(result);
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e5      	bne.n	80097a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e011      	b.n	8009810 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2220      	movs	r2, #32
 80097f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3758      	adds	r7, #88	; 0x58
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	4613      	mov	r3, r2
 8009826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009828:	e049      	b.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009830:	d045      	beq.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009832:	f7f9 ffe3 	bl	80037fc <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	429a      	cmp	r2, r3
 8009840:	d302      	bcc.n	8009848 <UART_WaitOnFlagUntilTimeout+0x30>
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e048      	b.n	80098de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d031      	beq.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b08      	cmp	r3, #8
 8009866:	d110      	bne.n	800988a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2208      	movs	r2, #8
 800986e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f8ff 	bl	8009a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2208      	movs	r2, #8
 800987a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e029      	b.n	80098de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009898:	d111      	bne.n	80098be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 f8e5 	bl	8009a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e00f      	b.n	80098de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4013      	ands	r3, r2
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	bf0c      	ite	eq
 80098ce:	2301      	moveq	r3, #1
 80098d0:	2300      	movne	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d0a6      	beq.n	800982a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b097      	sub	sp, #92	; 0x5c
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991a:	d10e      	bne.n	800993a <UART_Start_Receive_IT+0x52>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d105      	bne.n	8009930 <UART_Start_Receive_IT+0x48>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f240 12ff 	movw	r2, #511	; 0x1ff
 800992a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800992e:	e02d      	b.n	800998c <UART_Start_Receive_IT+0xa4>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	22ff      	movs	r2, #255	; 0xff
 8009934:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009938:	e028      	b.n	800998c <UART_Start_Receive_IT+0xa4>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10d      	bne.n	800995e <UART_Start_Receive_IT+0x76>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d104      	bne.n	8009954 <UART_Start_Receive_IT+0x6c>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	22ff      	movs	r2, #255	; 0xff
 800994e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009952:	e01b      	b.n	800998c <UART_Start_Receive_IT+0xa4>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	227f      	movs	r2, #127	; 0x7f
 8009958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800995c:	e016      	b.n	800998c <UART_Start_Receive_IT+0xa4>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009966:	d10d      	bne.n	8009984 <UART_Start_Receive_IT+0x9c>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d104      	bne.n	800997a <UART_Start_Receive_IT+0x92>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	227f      	movs	r2, #127	; 0x7f
 8009974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009978:	e008      	b.n	800998c <UART_Start_Receive_IT+0xa4>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	223f      	movs	r2, #63	; 0x3f
 800997e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009982:	e003      	b.n	800998c <UART_Start_Receive_IT+0xa4>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2222      	movs	r2, #34	; 0x22
 8009998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	f043 0301 	orr.w	r3, r3, #1
 80099b2:	657b      	str	r3, [r7, #84]	; 0x54
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80099be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80099ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e5      	bne.n	800999c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d8:	d107      	bne.n	80099ea <UART_Start_Receive_IT+0x102>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d103      	bne.n	80099ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4a21      	ldr	r2, [pc, #132]	; (8009a6c <UART_Start_Receive_IT+0x184>)
 80099e6:	669a      	str	r2, [r3, #104]	; 0x68
 80099e8:	e002      	b.n	80099f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4a20      	ldr	r2, [pc, #128]	; (8009a70 <UART_Start_Receive_IT+0x188>)
 80099ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d019      	beq.n	8009a2c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a16:	637b      	str	r3, [r7, #52]	; 0x34
 8009a18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e6      	bne.n	80099f8 <UART_Start_Receive_IT+0x110>
 8009a2a:	e018      	b.n	8009a5e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f043 0320 	orr.w	r3, r3, #32
 8009a40:	653b      	str	r3, [r7, #80]	; 0x50
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4a:	623b      	str	r3, [r7, #32]
 8009a4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	69f9      	ldr	r1, [r7, #28]
 8009a50:	6a3a      	ldr	r2, [r7, #32]
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e6      	bne.n	8009a2c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	375c      	adds	r7, #92	; 0x5c
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	08009d79 	.word	0x08009d79
 8009a70:	08009bbd 	.word	0x08009bbd

08009a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b095      	sub	sp, #84	; 0x54
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e6      	bne.n	8009a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	f023 0301 	bic.w	r3, r3, #1
 8009ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e5      	bne.n	8009aae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d118      	bne.n	8009b1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f023 0310 	bic.w	r3, r3, #16
 8009afe:	647b      	str	r3, [r7, #68]	; 0x44
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6979      	ldr	r1, [r7, #20]
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	613b      	str	r3, [r7, #16]
   return(result);
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b30:	bf00      	nop
 8009b32:	3754      	adds	r7, #84	; 0x54
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff fa44 	bl	8008fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	e853 3f00 	ldrex	r3, [r3]
 8009b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b84:	61fb      	str	r3, [r7, #28]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	6979      	ldr	r1, [r7, #20]
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	e841 2300 	strex	r3, r2, [r1]
 8009b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1e6      	bne.n	8009b70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff fa10 	bl	8008fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bb4:	bf00      	nop
 8009bb6:	3720      	adds	r7, #32
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b09c      	sub	sp, #112	; 0x70
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd4:	2b22      	cmp	r3, #34	; 0x22
 8009bd6:	f040 80be 	bne.w	8009d56 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009be0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009be4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009be8:	b2d9      	uxtb	r1, r3
 8009bea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf4:	400a      	ands	r2, r1
 8009bf6:	b2d2      	uxtb	r2, r2
 8009bf8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f040 80a3 	bne.w	8009d6a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c42:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e6      	bne.n	8009c24 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c68:	f023 0301 	bic.w	r3, r3, #1
 8009c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c76:	647a      	str	r2, [r7, #68]	; 0x44
 8009c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c7e:	e841 2300 	strex	r3, r2, [r1]
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e5      	bne.n	8009c56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a34      	ldr	r2, [pc, #208]	; (8009d74 <UART_RxISR_8BIT+0x1b8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d01f      	beq.n	8009ce8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d018      	beq.n	8009ce8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	e853 3f00 	ldrex	r3, [r3]
 8009cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cca:	663b      	str	r3, [r7, #96]	; 0x60
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8009cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cdc:	e841 2300 	strex	r3, r2, [r1]
 8009ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1e6      	bne.n	8009cb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d12e      	bne.n	8009d4e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0310 	bic.w	r3, r3, #16
 8009d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	69b9      	ldr	r1, [r7, #24]
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	617b      	str	r3, [r7, #20]
   return(result);
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e6      	bne.n	8009cf6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d103      	bne.n	8009d3e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2210      	movs	r2, #16
 8009d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff f958 	bl	8008ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d4c:	e00d      	b.n	8009d6a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7f7 ff7e 	bl	8001c50 <HAL_UART_RxCpltCallback>
}
 8009d54:	e009      	b.n	8009d6a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	8b1b      	ldrh	r3, [r3, #24]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0208 	orr.w	r2, r2, #8
 8009d66:	b292      	uxth	r2, r2
 8009d68:	831a      	strh	r2, [r3, #24]
}
 8009d6a:	bf00      	nop
 8009d6c:	3770      	adds	r7, #112	; 0x70
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	40008000 	.word	0x40008000

08009d78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b09c      	sub	sp, #112	; 0x70
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d90:	2b22      	cmp	r3, #34	; 0x22
 8009d92:	f040 80be 	bne.w	8009f12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009da6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009daa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009dae:	4013      	ands	r3, r2
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009db4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dba:	1c9a      	adds	r2, r3, #2
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f040 80a3 	bne.w	8009f26 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009df4:	667b      	str	r3, [r7, #100]	; 0x64
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8009e00:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e6      	bne.n	8009de0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3308      	adds	r3, #8
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	f023 0301 	bic.w	r3, r3, #1
 8009e28:	663b      	str	r3, [r7, #96]	; 0x60
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e32:	643a      	str	r2, [r7, #64]	; 0x40
 8009e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e5      	bne.n	8009e12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a34      	ldr	r2, [pc, #208]	; (8009f30 <UART_RxISR_16BIT+0x1b8>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d01f      	beq.n	8009ea4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d018      	beq.n	8009ea4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e6      	bne.n	8009e72 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d12e      	bne.n	8009f0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f023 0310 	bic.w	r3, r3, #16
 8009ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6979      	ldr	r1, [r7, #20]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e6      	bne.n	8009eb2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	f003 0310 	and.w	r3, r3, #16
 8009eee:	2b10      	cmp	r3, #16
 8009ef0:	d103      	bne.n	8009efa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2210      	movs	r2, #16
 8009ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff f87a 	bl	8008ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f08:	e00d      	b.n	8009f26 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7f7 fea0 	bl	8001c50 <HAL_UART_RxCpltCallback>
}
 8009f10:	e009      	b.n	8009f26 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	8b1b      	ldrh	r3, [r3, #24]
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0208 	orr.w	r2, r2, #8
 8009f22:	b292      	uxth	r2, r2
 8009f24:	831a      	strh	r2, [r3, #24]
}
 8009f26:	bf00      	nop
 8009f28:	3770      	adds	r7, #112	; 0x70
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	40008000 	.word	0x40008000

08009f34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f48:	b084      	sub	sp, #16
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	f107 001c 	add.w	r0, r7, #28
 8009f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa66 	bl	800a438 <USB_CoreReset>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38
 8009f82:	e005      	b.n	8009f90 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f9c:	b004      	add	sp, #16
 8009f9e:	4770      	bx	lr

08009fa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f023 0201 	bic.w	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d115      	bne.n	800a010 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f7f9 fc0f 	bl	8003814 <HAL_Delay>
      ms++;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fa0d 	bl	800a41c <USB_GetMode>
 800a002:	4603      	mov	r3, r0
 800a004:	2b01      	cmp	r3, #1
 800a006:	d01e      	beq.n	800a046 <USB_SetCurrentMode+0x84>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b31      	cmp	r3, #49	; 0x31
 800a00c:	d9f0      	bls.n	8009ff0 <USB_SetCurrentMode+0x2e>
 800a00e:	e01a      	b.n	800a046 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d115      	bne.n	800a042 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a022:	2001      	movs	r0, #1
 800a024:	f7f9 fbf6 	bl	8003814 <HAL_Delay>
      ms++;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f9f4 	bl	800a41c <USB_GetMode>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <USB_SetCurrentMode+0x84>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b31      	cmp	r3, #49	; 0x31
 800a03e:	d9f0      	bls.n	800a022 <USB_SetCurrentMode+0x60>
 800a040:	e001      	b.n	800a046 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e005      	b.n	800a052 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b32      	cmp	r3, #50	; 0x32
 800a04a:	d101      	bne.n	800a050 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e000      	b.n	800a052 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a05c:	b084      	sub	sp, #16
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	e009      	b.n	800a090 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3340      	adds	r3, #64	; 0x40
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	2200      	movs	r2, #0
 800a088:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	3301      	adds	r3, #1
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2b0e      	cmp	r3, #14
 800a094:	d9f2      	bls.n	800a07c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d11c      	bne.n	800a0d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0aa:	f043 0302 	orr.w	r3, r3, #2
 800a0ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e005      	b.n	800a0e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a0ee:	2103      	movs	r1, #3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f959 	bl	800a3a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0f6:	2110      	movs	r1, #16
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f8f1 	bl	800a2e0 <USB_FlushTxFifo>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f91d 	bl	800a348 <USB_FlushRxFifo>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11e:	461a      	mov	r2, r3
 800a120:	2300      	movs	r3, #0
 800a122:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12a:	461a      	mov	r2, r3
 800a12c:	2300      	movs	r3, #0
 800a12e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a136:	461a      	mov	r2, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a13c:	2300      	movs	r3, #0
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	e043      	b.n	800a1ca <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a158:	d118      	bne.n	800a18c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16c:	461a      	mov	r2, r3
 800a16e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	e013      	b.n	800a19e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	461a      	mov	r2, r3
 800a184:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	e008      	b.n	800a19e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	015a      	lsls	r2, r3, #5
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4413      	add	r3, r2
 800a194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a198:	461a      	mov	r2, r3
 800a19a:	2300      	movs	r3, #0
 800a19c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	015a      	lsls	r2, r3, #5
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1bc:	461a      	mov	r2, r3
 800a1be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	613b      	str	r3, [r7, #16]
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d3b7      	bcc.n	800a142 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	e043      	b.n	800a260 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1ee:	d118      	bne.n	800a222 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10a      	bne.n	800a20c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	461a      	mov	r2, r3
 800a204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	e013      	b.n	800a234 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a218:	461a      	mov	r2, r3
 800a21a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	e008      	b.n	800a234 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	461a      	mov	r2, r3
 800a230:	2300      	movs	r3, #0
 800a232:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a240:	461a      	mov	r2, r3
 800a242:	2300      	movs	r3, #0
 800a244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a252:	461a      	mov	r2, r3
 800a254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a258:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	3301      	adds	r3, #1
 800a25e:	613b      	str	r3, [r7, #16]
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	429a      	cmp	r2, r3
 800a266:	d3b7      	bcc.n	800a1d8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a27a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a288:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	f043 0210 	orr.w	r2, r3, #16
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	4b10      	ldr	r3, [pc, #64]	; (800a2dc <USB_DevInit+0x280>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	f043 0208 	orr.w	r2, r3, #8
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d107      	bne.n	800a2ca <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2c2:	f043 0304 	orr.w	r3, r3, #4
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2d6:	b004      	add	sp, #16
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	803c3800 	.word	0x803c3800

0800a2e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4a13      	ldr	r2, [pc, #76]	; (800a344 <USB_FlushTxFifo+0x64>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d901      	bls.n	800a300 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e01b      	b.n	800a338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	daf2      	bge.n	800a2ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	019b      	lsls	r3, r3, #6
 800a310:	f043 0220 	orr.w	r2, r3, #32
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3301      	adds	r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	4a08      	ldr	r2, [pc, #32]	; (800a344 <USB_FlushTxFifo+0x64>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d901      	bls.n	800a32a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e006      	b.n	800a338 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f003 0320 	and.w	r3, r3, #32
 800a332:	2b20      	cmp	r3, #32
 800a334:	d0f0      	beq.n	800a318 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	00030d40 	.word	0x00030d40

0800a348 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4a11      	ldr	r2, [pc, #68]	; (800a3a4 <USB_FlushRxFifo+0x5c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d901      	bls.n	800a366 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e018      	b.n	800a398 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	daf2      	bge.n	800a354 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2210      	movs	r2, #16
 800a376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3301      	adds	r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4a08      	ldr	r2, [pc, #32]	; (800a3a4 <USB_FlushRxFifo+0x5c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d901      	bls.n	800a38a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e006      	b.n	800a398 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0310 	and.w	r3, r3, #16
 800a392:	2b10      	cmp	r3, #16
 800a394:	d0f0      	beq.n	800a378 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	00030d40 	.word	0x00030d40

0800a3a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	68f9      	ldr	r1, [r7, #12]
 800a3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b085      	sub	sp, #20
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a408:	f043 0302 	orr.w	r3, r3, #2
 800a40c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	f003 0301 	and.w	r3, r3, #1
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4a13      	ldr	r2, [pc, #76]	; (800a49c <USB_CoreReset+0x64>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d901      	bls.n	800a456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e01b      	b.n	800a48e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	daf2      	bge.n	800a444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f043 0201 	orr.w	r2, r3, #1
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4a09      	ldr	r2, [pc, #36]	; (800a49c <USB_CoreReset+0x64>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d901      	bls.n	800a480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e006      	b.n	800a48e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d0f0      	beq.n	800a46e <USB_CoreReset+0x36>

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	00030d40 	.word	0x00030d40

0800a4a0 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08a      	sub	sp, #40	; 0x28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6039      	str	r1, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10b      	bne.n	800a4ca <BSP_COM_Init+0x2a>
 800a4b2:	4b2d      	ldr	r3, [pc, #180]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	4a2c      	ldr	r2, [pc, #176]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4b8:	f043 0302 	orr.w	r3, r3, #2
 800a4bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4be:	4b2a      	ldr	r3, [pc, #168]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	613b      	str	r3, [r7, #16]
 800a4c8:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10b      	bne.n	800a4e8 <BSP_COM_Init+0x48>
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d4:	4a24      	ldr	r2, [pc, #144]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4d6:	f043 0302 	orr.w	r3, r3, #2
 800a4da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4dc:	4b22      	ldr	r3, [pc, #136]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <BSP_COM_Init+0x66>
 800a4ee:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f2:	4a1d      	ldr	r2, [pc, #116]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4f8:	6613      	str	r3, [r2, #96]	; 0x60
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <BSP_COM_Init+0xc8>)
 800a4fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a502:	60bb      	str	r3, [r7, #8]
 800a504:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800a506:	2340      	movs	r3, #64	; 0x40
 800a508:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800a50a:	2302      	movs	r3, #2
 800a50c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800a50e:	2302      	movs	r3, #2
 800a510:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800a512:	2300      	movs	r3, #0
 800a514:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800a516:	2307      	movs	r3, #7
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	4a13      	ldr	r2, [pc, #76]	; (800a56c <BSP_COM_Init+0xcc>)
 800a51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a522:	f107 0214 	add.w	r2, r7, #20
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7f9 fc67 	bl	8003dfc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800a52e:	2380      	movs	r3, #128	; 0x80
 800a530:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800a532:	2302      	movs	r3, #2
 800a534:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800a536:	2307      	movs	r3, #7
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	4a0c      	ldr	r2, [pc, #48]	; (800a570 <BSP_COM_Init+0xd0>)
 800a53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a542:	f107 0214 	add.w	r2, r7, #20
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7f9 fc57 	bl	8003dfc <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	4a08      	ldr	r2, [pc, #32]	; (800a574 <BSP_COM_Init+0xd4>)
 800a552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800a55a:	6838      	ldr	r0, [r7, #0]
 800a55c:	f7fe f92b 	bl	80087b6 <HAL_UART_Init>
}
 800a560:	bf00      	nop
 800a562:	3728      	adds	r7, #40	; 0x28
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	40021000 	.word	0x40021000
 800a56c:	200000bc 	.word	0x200000bc
 800a570:	200000c0 	.word	0x200000c0
 800a574:	200000b8 	.word	0x200000b8

0800a578 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800a580:	4b27      	ldr	r3, [pc, #156]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a584:	4a26      	ldr	r2, [pc, #152]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a586:	f043 0302 	orr.w	r3, r3, #2
 800a58a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a58c:	4b24      	ldr	r3, [pc, #144]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800a598:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a59c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800a59e:	2312      	movs	r3, #18
 800a5a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a5ae:	f107 0314 	add.w	r3, r7, #20
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	481b      	ldr	r0, [pc, #108]	; (800a624 <I2Cx_MspInit+0xac>)
 800a5b6:	f7f9 fc21 	bl	8003dfc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4818      	ldr	r0, [pc, #96]	; (800a624 <I2Cx_MspInit+0xac>)
 800a5c2:	f7f9 fc1b 	bl	8003dfc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800a5c6:	4b16      	ldr	r3, [pc, #88]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ca:	4a15      	ldr	r2, [pc, #84]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a5d2:	4b13      	ldr	r3, [pc, #76]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800a5de:	4b10      	ldr	r3, [pc, #64]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	4a0f      	ldr	r2, [pc, #60]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	4a0c      	ldr	r2, [pc, #48]	; (800a620 <I2Cx_MspInit+0xa8>)
 800a5f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a5f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	210f      	movs	r1, #15
 800a5fa:	2021      	movs	r0, #33	; 0x21
 800a5fc:	f7f9 fa2d 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800a600:	2021      	movs	r0, #33	; 0x21
 800a602:	f7f9 fa46 	bl	8003a92 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800a606:	2200      	movs	r2, #0
 800a608:	210f      	movs	r1, #15
 800a60a:	2022      	movs	r0, #34	; 0x22
 800a60c:	f7f9 fa25 	bl	8003a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800a610:	2022      	movs	r0, #34	; 0x22
 800a612:	f7f9 fa3e 	bl	8003a92 <HAL_NVIC_EnableIRQ>
}
 800a616:	bf00      	nop
 800a618:	3728      	adds	r7, #40	; 0x28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	40021000 	.word	0x40021000
 800a624:	48000400 	.word	0x48000400

0800a628 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a12      	ldr	r2, [pc, #72]	; (800a67c <I2Cx_Init+0x54>)
 800a634:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a11      	ldr	r2, [pc, #68]	; (800a680 <I2Cx_Init+0x58>)
 800a63a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff ff89 	bl	800a578 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7f9 feae 	bl	80043c8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800a66c:	2100      	movs	r1, #0
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7fa fc5a 	bl	8004f28 <HAL_I2CEx_ConfigAnalogFilter>
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	40005800 	.word	0x40005800
 800a680:	00702681 	.word	0x00702681

0800a684 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08a      	sub	sp, #40	; 0x28
 800a688:	af04      	add	r7, sp, #16
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	4608      	mov	r0, r1
 800a68e:	4611      	mov	r1, r2
 800a690:	461a      	mov	r2, r3
 800a692:	4603      	mov	r3, r0
 800a694:	72fb      	strb	r3, [r7, #11]
 800a696:	460b      	mov	r3, r1
 800a698:	813b      	strh	r3, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a6a2:	7afb      	ldrb	r3, [r7, #11]
 800a6a4:	b299      	uxth	r1, r3
 800a6a6:	88f8      	ldrh	r0, [r7, #6]
 800a6a8:	893a      	ldrh	r2, [r7, #8]
 800a6aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6ae:	9302      	str	r3, [sp, #8]
 800a6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7fa f862 	bl	8004784 <HAL_I2C_Mem_Read>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d004      	beq.n	800a6d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 f832 	bl	800a738 <I2Cx_Error>
  }
  return status;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b08a      	sub	sp, #40	; 0x28
 800a6e2:	af04      	add	r7, sp, #16
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	72fb      	strb	r3, [r7, #11]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	813b      	strh	r3, [r7, #8]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	b299      	uxth	r1, r3
 800a700:	88f8      	ldrh	r0, [r7, #6]
 800a702:	893a      	ldrh	r2, [r7, #8]
 800a704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a708:	9302      	str	r3, [sp, #8]
 800a70a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	4603      	mov	r3, r0
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7f9 ff21 	bl	800455c <HAL_I2C_Mem_Write>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	4619      	mov	r1, r3
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 f805 	bl	800a738 <I2Cx_Error>
  }
  return status;
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7f9 feda 	bl	80044fe <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff ff6c 	bl	800a628 <I2Cx_Init>
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a75c:	4802      	ldr	r0, [pc, #8]	; (800a768 <SENSOR_IO_Init+0x10>)
 800a75e:	f7ff ff63 	bl	800a628 <I2Cx_Init>
}
 800a762:	bf00      	nop
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20000fe0 	.word	0x20000fe0

0800a76c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af02      	add	r7, sp, #8
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
 800a776:	460b      	mov	r3, r1
 800a778:	71bb      	strb	r3, [r7, #6]
 800a77a:	4613      	mov	r3, r2
 800a77c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a77e:	79bb      	ldrb	r3, [r7, #6]
 800a780:	b29a      	uxth	r2, r3
 800a782:	79f9      	ldrb	r1, [r7, #7]
 800a784:	2301      	movs	r3, #1
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	1d7b      	adds	r3, r7, #5
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	2301      	movs	r3, #1
 800a78e:	4803      	ldr	r0, [pc, #12]	; (800a79c <SENSOR_IO_Write+0x30>)
 800a790:	f7ff ffa5 	bl	800a6de <I2Cx_WriteMultiple>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000fe0 	.word	0x20000fe0

0800a7a0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	460a      	mov	r2, r1
 800a7aa:	71fb      	strb	r3, [r7, #7]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a7b4:	79bb      	ldrb	r3, [r7, #6]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	79f9      	ldrb	r1, [r7, #7]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	f107 030f 	add.w	r3, r7, #15
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	4804      	ldr	r0, [pc, #16]	; (800a7d8 <SENSOR_IO_Read+0x38>)
 800a7c8:	f7ff ff5c 	bl	800a684 <I2Cx_ReadMultiple>

  return read_value;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000fe0 	.word	0x20000fe0

0800a7dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	603a      	str	r2, [r7, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	71fb      	strb	r3, [r7, #7]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	71bb      	strb	r3, [r7, #6]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a7f2:	79bb      	ldrb	r3, [r7, #6]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	79f9      	ldrb	r1, [r7, #7]
 800a7f8:	88bb      	ldrh	r3, [r7, #4]
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2301      	movs	r3, #1
 800a802:	4804      	ldr	r0, [pc, #16]	; (800a814 <SENSOR_IO_ReadMultiple+0x38>)
 800a804:	f7ff ff3e 	bl	800a684 <I2Cx_ReadMultiple>
 800a808:	4603      	mov	r3, r0
 800a80a:	b29b      	uxth	r3, r3
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20000fe0 	.word	0x20000fe0

0800a818 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800a822:	2300      	movs	r3, #0
 800a824:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800a826:	4b19      	ldr	r3, [pc, #100]	; (800a88c <BSP_ACCELERO_Init+0x74>)
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	4798      	blx	r3
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b6a      	cmp	r3, #106	; 0x6a
 800a830:	d002      	beq.n	800a838 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	e024      	b.n	800a882 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800a838:	4b15      	ldr	r3, [pc, #84]	; (800a890 <BSP_ACCELERO_Init+0x78>)
 800a83a:	4a14      	ldr	r2, [pc, #80]	; (800a88c <BSP_ACCELERO_Init+0x74>)
 800a83c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800a83e:	2330      	movs	r3, #48	; 0x30
 800a840:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800a842:	2300      	movs	r3, #0
 800a844:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800a846:	2300      	movs	r3, #0
 800a848:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800a84a:	2340      	movs	r3, #64	; 0x40
 800a84c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800a856:	797a      	ldrb	r2, [r7, #5]
 800a858:	7abb      	ldrb	r3, [r7, #10]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800a860:	7a3b      	ldrb	r3, [r7, #8]
 800a862:	f043 0304 	orr.w	r3, r3, #4
 800a866:	b2db      	uxtb	r3, r3
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	b21a      	sxth	r2, r3
 800a86c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a870:	4313      	orrs	r3, r2
 800a872:	b21b      	sxth	r3, r3
 800a874:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <BSP_ACCELERO_Init+0x78>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	89ba      	ldrh	r2, [r7, #12]
 800a87e:	4610      	mov	r0, r2
 800a880:	4798      	blx	r3
  }  

  return ret;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	200000e0 	.word	0x200000e0
 800a890:	200010bc 	.word	0x200010bc

0800a894 <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <BSP_ACCELERO_LowPower+0x30>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 800a8a6:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <BSP_ACCELERO_LowPower+0x30>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 800a8b0:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <BSP_ACCELERO_LowPower+0x30>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	88fa      	ldrh	r2, [r7, #6]
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4798      	blx	r3
    }
  }
}
 800a8bc:	bf00      	nop
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200010bc 	.word	0x200010bc

0800a8c8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 800a8d0:	4b08      	ldr	r3, [pc, #32]	; (800a8f4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d009      	beq.n	800a8ec <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800a8d8:	4b06      	ldr	r3, [pc, #24]	; (800a8f4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d004      	beq.n	800a8ec <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800a8e2:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	4798      	blx	r3


    }
  }
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	200010bc 	.word	0x200010bc

0800a8f8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800a8fe:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <BSP_HSENSOR_Init+0x38>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	20be      	movs	r0, #190	; 0xbe
 800a904:	4798      	blx	r3
 800a906:	4603      	mov	r3, r0
 800a908:	2bbc      	cmp	r3, #188	; 0xbc
 800a90a:	d002      	beq.n	800a912 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	607b      	str	r3, [r7, #4]
 800a910:	e009      	b.n	800a926 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800a912:	4b08      	ldr	r3, [pc, #32]	; (800a934 <BSP_HSENSOR_Init+0x3c>)
 800a914:	4a06      	ldr	r2, [pc, #24]	; (800a930 <BSP_HSENSOR_Init+0x38>)
 800a916:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <BSP_HSENSOR_Init+0x3c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	20be      	movs	r0, #190	; 0xbe
 800a920:	4798      	blx	r3
    ret = HSENSOR_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800a926:	687b      	ldr	r3, [r7, #4]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	200000c4 	.word	0x200000c4
 800a934:	200010c0 	.word	0x200010c0

0800a938 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800a93c:	4b04      	ldr	r3, [pc, #16]	; (800a950 <BSP_HSENSOR_ReadHumidity+0x18>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	20be      	movs	r0, #190	; 0xbe
 800a944:	4798      	blx	r3
 800a946:	eef0 7a40 	vmov.f32	s15, s0
}
 800a94a:	eeb0 0a67 	vmov.f32	s0, s15
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	200010c0 	.word	0x200010c0

0800a954 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800a95e:	4b09      	ldr	r3, [pc, #36]	; (800a984 <BSP_TSENSOR_Init+0x30>)
 800a960:	4a09      	ldr	r2, [pc, #36]	; (800a988 <BSP_TSENSOR_Init+0x34>)
 800a962:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800a964:	f7ff fef8 	bl	800a758 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <BSP_TSENSOR_Init+0x30>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2100      	movs	r1, #0
 800a970:	20be      	movs	r0, #190	; 0xbe
 800a972:	4798      	blx	r3

  ret = TSENSOR_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800a978:	79fb      	ldrb	r3, [r7, #7]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200010c4 	.word	0x200010c4
 800a988:	200000d0 	.word	0x200000d0

0800a98c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800a990:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <BSP_TSENSOR_ReadTemp+0x18>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	20be      	movs	r0, #190	; 0xbe
 800a998:	4798      	blx	r3
 800a99a:	eef0 7a40 	vmov.f32	s15, s0
}
 800a99e:	eeb0 0a67 	vmov.f32	s0, s15
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	200010c4 	.word	0x200010c4

0800a9a8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2120      	movs	r1, #32
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fef1 	bl	800a7a0 <SENSOR_IO_Read>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	f023 0304 	bic.w	r3, r3, #4
 800a9c8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	f043 0304 	orr.w	r3, r3, #4
 800a9d0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	f043 0301 	orr.w	r3, r3, #1
 800a9e0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9e8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800a9ea:	88fb      	ldrh	r3, [r7, #6]
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	7bfa      	ldrb	r2, [r7, #15]
 800a9f0:	2120      	movs	r1, #32
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff feba 	bl	800a76c <SENSOR_IO_Write>
}
 800a9f8:	bf00      	nop
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800aa0e:	f7ff fea3 	bl	800a758 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800aa12:	88fb      	ldrh	r3, [r7, #6]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	210f      	movs	r1, #15
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff fec1 	bl	800a7a0 <SENSOR_IO_Read>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b088      	sub	sp, #32
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	b2d8      	uxtb	r0, r3
 800aa3a:	f107 020c 	add.w	r2, r7, #12
 800aa3e:	2302      	movs	r3, #2
 800aa40:	21b0      	movs	r1, #176	; 0xb0
 800aa42:	f7ff fecb 	bl	800a7dc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800aa46:	7b3b      	ldrb	r3, [r7, #12]
 800aa48:	085b      	lsrs	r3, r3, #1
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800aa4e:	7b7b      	ldrb	r3, [r7, #13]
 800aa50:	085b      	lsrs	r3, r3, #1
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	b2d8      	uxtb	r0, r3
 800aa5a:	f107 020c 	add.w	r2, r7, #12
 800aa5e:	2302      	movs	r3, #2
 800aa60:	21b6      	movs	r1, #182	; 0xb6
 800aa62:	f7ff febb 	bl	800a7dc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800aa66:	7b7b      	ldrb	r3, [r7, #13]
 800aa68:	021b      	lsls	r3, r3, #8
 800aa6a:	b21a      	sxth	r2, r3
 800aa6c:	7b3b      	ldrb	r3, [r7, #12]
 800aa6e:	b21b      	sxth	r3, r3
 800aa70:	4313      	orrs	r3, r2
 800aa72:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800aa74:	88fb      	ldrh	r3, [r7, #6]
 800aa76:	b2d8      	uxtb	r0, r3
 800aa78:	f107 020c 	add.w	r2, r7, #12
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	21ba      	movs	r1, #186	; 0xba
 800aa80:	f7ff feac 	bl	800a7dc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800aa84:	7b7b      	ldrb	r3, [r7, #13]
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	b21a      	sxth	r2, r3
 800aa8a:	7b3b      	ldrb	r3, [r7, #12]
 800aa8c:	b21b      	sxth	r3, r3
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	b2d8      	uxtb	r0, r3
 800aa96:	f107 020c 	add.w	r2, r7, #12
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	21a8      	movs	r1, #168	; 0xa8
 800aa9e:	f7ff fe9d 	bl	800a7dc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800aaa2:	7b7b      	ldrb	r3, [r7, #13]
 800aaa4:	021b      	lsls	r3, r3, #8
 800aaa6:	b21a      	sxth	r2, r3
 800aaa8:	7b3b      	ldrb	r3, [r7, #12]
 800aaaa:	b21b      	sxth	r3, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800aab0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800aab4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aac2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800aac6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	ee07 3a90 	vmov	s15, r3
 800aad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aad4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aad8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800aadc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aafa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aafe:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800ab02:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab0e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800ab12:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab16:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ab5c <HTS221_H_ReadHumidity+0x130>
 800ab1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab22:	dd01      	ble.n	800ab28 <HTS221_H_ReadHumidity+0xfc>
 800ab24:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <HTS221_H_ReadHumidity+0x134>)
 800ab26:	e00a      	b.n	800ab3e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800ab28:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab34:	d502      	bpl.n	800ab3c <HTS221_H_ReadHumidity+0x110>
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	e000      	b.n	800ab3e <HTS221_H_ReadHumidity+0x112>
 800ab3c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800ab3e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800ab40:	edd7 7a04 	vldr	s15, [r7, #16]
 800ab44:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ab4c:	eef0 7a66 	vmov.f32	s15, s13
}
 800ab50:	eeb0 0a67 	vmov.f32	s0, s15
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	447a0000 	.word	0x447a0000
 800ab60:	447a0000 	.word	0x447a0000

0800ab64 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	6039      	str	r1, [r7, #0]
 800ab6e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800ab70:	88fb      	ldrh	r3, [r7, #6]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2120      	movs	r1, #32
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fe12 	bl	800a7a0 <SENSOR_IO_Read>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	f023 0304 	bic.w	r3, r3, #4
 800ab86:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800ab88:	7bfb      	ldrb	r3, [r7, #15]
 800ab8a:	f043 0304 	orr.w	r3, r3, #4
 800ab8e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	f023 0303 	bic.w	r3, r3, #3
 800ab96:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	f043 0301 	orr.w	r3, r3, #1
 800ab9e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aba6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	7bfa      	ldrb	r2, [r7, #15]
 800abae:	2120      	movs	r1, #32
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff fddb 	bl	800a76c <SENSOR_IO_Write>
}
 800abb6:	bf00      	nop
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b088      	sub	sp, #32
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	4603      	mov	r3, r0
 800abc6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800abc8:	88fb      	ldrh	r3, [r7, #6]
 800abca:	b2d8      	uxtb	r0, r3
 800abcc:	f107 0208 	add.w	r2, r7, #8
 800abd0:	2302      	movs	r3, #2
 800abd2:	21b2      	movs	r1, #178	; 0xb2
 800abd4:	f7ff fe02 	bl	800a7dc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2135      	movs	r1, #53	; 0x35
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff fdde 	bl	800a7a0 <SENSOR_IO_Read>
 800abe4:	4603      	mov	r3, r0
 800abe6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800abe8:	7ffb      	ldrb	r3, [r7, #31]
 800abea:	021b      	lsls	r3, r3, #8
 800abec:	b21b      	sxth	r3, r3
 800abee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf2:	b21a      	sxth	r2, r3
 800abf4:	7a3b      	ldrb	r3, [r7, #8]
 800abf6:	b21b      	sxth	r3, r3
 800abf8:	4313      	orrs	r3, r2
 800abfa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800abfc:	7ffb      	ldrb	r3, [r7, #31]
 800abfe:	019b      	lsls	r3, r3, #6
 800ac00:	b21b      	sxth	r3, r3
 800ac02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac06:	b21a      	sxth	r2, r3
 800ac08:	7a7b      	ldrb	r3, [r7, #9]
 800ac0a:	b21b      	sxth	r3, r3
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800ac10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ac14:	10db      	asrs	r3, r3, #3
 800ac16:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800ac18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ac1c:	10db      	asrs	r3, r3, #3
 800ac1e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800ac20:	88fb      	ldrh	r3, [r7, #6]
 800ac22:	b2d8      	uxtb	r0, r3
 800ac24:	f107 0208 	add.w	r2, r7, #8
 800ac28:	2304      	movs	r3, #4
 800ac2a:	21bc      	movs	r1, #188	; 0xbc
 800ac2c:	f7ff fdd6 	bl	800a7dc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800ac30:	7a7b      	ldrb	r3, [r7, #9]
 800ac32:	021b      	lsls	r3, r3, #8
 800ac34:	b21a      	sxth	r2, r3
 800ac36:	7a3b      	ldrb	r3, [r7, #8]
 800ac38:	b21b      	sxth	r3, r3
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	b21a      	sxth	r2, r3
 800ac44:	7abb      	ldrb	r3, [r7, #10]
 800ac46:	b21b      	sxth	r3, r3
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800ac4c:	88fb      	ldrh	r3, [r7, #6]
 800ac4e:	b2d8      	uxtb	r0, r3
 800ac50:	f107 0208 	add.w	r2, r7, #8
 800ac54:	2302      	movs	r3, #2
 800ac56:	21aa      	movs	r1, #170	; 0xaa
 800ac58:	f7ff fdc0 	bl	800a7dc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800ac5c:	7a7b      	ldrb	r3, [r7, #9]
 800ac5e:	021b      	lsls	r3, r3, #8
 800ac60:	b21a      	sxth	r2, r3
 800ac62:	7a3b      	ldrb	r3, [r7, #8]
 800ac64:	b21b      	sxth	r3, r3
 800ac66:	4313      	orrs	r3, r2
 800ac68:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800ac6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ac6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	ee07 3a90 	vmov	s15, r3
 800ac78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac80:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac8e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ac92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ac96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	ee07 3a90 	vmov	s15, r3
 800aca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acb8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	ee07 3a90 	vmov	s15, r3
}
 800acc2:	eeb0 0a67 	vmov.f32	s0, s15
 800acc6:	3720      	adds	r7, #32
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800acda:	2110      	movs	r1, #16
 800acdc:	20d4      	movs	r0, #212	; 0xd4
 800acde:	f7ff fd5f 	bl	800a7a0 <SENSOR_IO_Read>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	f003 0303 	and.w	r3, r3, #3
 800acf0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800acf2:	7bba      	ldrb	r2, [r7, #14]
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	461a      	mov	r2, r3
 800acfe:	2110      	movs	r1, #16
 800ad00:	20d4      	movs	r0, #212	; 0xd4
 800ad02:	f7ff fd33 	bl	800a76c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800ad06:	2112      	movs	r1, #18
 800ad08:	20d4      	movs	r0, #212	; 0xd4
 800ad0a:	f7ff fd49 	bl	800a7a0 <SENSOR_IO_Read>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800ad12:	88fb      	ldrh	r3, [r7, #6]
 800ad14:	0a1b      	lsrs	r3, r3, #8
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800ad20:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800ad22:	7bba      	ldrb	r2, [r7, #14]
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2112      	movs	r1, #18
 800ad30:	20d4      	movs	r0, #212	; 0xd4
 800ad32:	f7ff fd1b 	bl	800a76c <SENSOR_IO_Write>
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800ad44:	2300      	movs	r3, #0
 800ad46:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800ad48:	2110      	movs	r1, #16
 800ad4a:	20d4      	movs	r0, #212	; 0xd4
 800ad4c:	f7ff fd28 	bl	800a7a0 <SENSOR_IO_Read>
 800ad50:	4603      	mov	r3, r0
 800ad52:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800ad54:	79fb      	ldrb	r3, [r7, #7]
 800ad56:	f003 030f 	and.w	r3, r3, #15
 800ad5a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	2110      	movs	r1, #16
 800ad62:	20d4      	movs	r0, #212	; 0xd4
 800ad64:	f7ff fd02 	bl	800a76c <SENSOR_IO_Write>
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800ad74:	f7ff fcf0 	bl	800a758 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800ad78:	210f      	movs	r1, #15
 800ad7a:	20d4      	movs	r0, #212	; 0xd4
 800ad7c:	f7ff fd10 	bl	800a7a0 <SENSOR_IO_Read>
 800ad80:	4603      	mov	r3, r0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800ad94:	2115      	movs	r1, #21
 800ad96:	20d4      	movs	r0, #212	; 0xd4
 800ad98:	f7ff fd02 	bl	800a7a0 <SENSOR_IO_Read>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	f023 0310 	bic.w	r3, r3, #16
 800ada6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	f043 0310 	orr.w	r3, r3, #16
 800adb4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	461a      	mov	r2, r3
 800adba:	2115      	movs	r1, #21
 800adbc:	20d4      	movs	r0, #212	; 0xd4
 800adbe:	f7ff fcd5 	bl	800a76c <SENSOR_IO_Write>
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800add4:	2300      	movs	r3, #0
 800add6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800addc:	f04f 0300 	mov.w	r3, #0
 800ade0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800ade2:	2110      	movs	r1, #16
 800ade4:	20d4      	movs	r0, #212	; 0xd4
 800ade6:	f7ff fcdb 	bl	800a7a0 <SENSOR_IO_Read>
 800adea:	4603      	mov	r3, r0
 800adec:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800adee:	f107 0208 	add.w	r2, r7, #8
 800adf2:	2306      	movs	r3, #6
 800adf4:	2128      	movs	r1, #40	; 0x28
 800adf6:	20d4      	movs	r0, #212	; 0xd4
 800adf8:	f7ff fcf0 	bl	800a7dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800adfc:	2300      	movs	r3, #0
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	e01c      	b.n	800ae3c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800ae02:	7ffb      	ldrb	r3, [r7, #31]
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	3301      	adds	r3, #1
 800ae08:	3320      	adds	r3, #32
 800ae0a:	443b      	add	r3, r7
 800ae0c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	021b      	lsls	r3, r3, #8
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	7ffb      	ldrb	r3, [r7, #31]
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	3320      	adds	r3, #32
 800ae1c:	443b      	add	r3, r7
 800ae1e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	4413      	add	r3, r2
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	7ffb      	ldrb	r3, [r7, #31]
 800ae2a:	b212      	sxth	r2, r2
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	3320      	adds	r3, #32
 800ae30:	443b      	add	r3, r7
 800ae32:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800ae36:	7ffb      	ldrb	r3, [r7, #31]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	77fb      	strb	r3, [r7, #31]
 800ae3c:	7ffb      	ldrb	r3, [r7, #31]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d9df      	bls.n	800ae02 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	f003 030c 	and.w	r3, r3, #12
 800ae48:	2b0c      	cmp	r3, #12
 800ae4a:	d829      	bhi.n	800aea0 <LSM6DSL_AccReadXYZ+0xd4>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <LSM6DSL_AccReadXYZ+0x88>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae89 	.word	0x0800ae89
 800ae58:	0800aea1 	.word	0x0800aea1
 800ae5c:	0800aea1 	.word	0x0800aea1
 800ae60:	0800aea1 	.word	0x0800aea1
 800ae64:	0800ae9b 	.word	0x0800ae9b
 800ae68:	0800aea1 	.word	0x0800aea1
 800ae6c:	0800aea1 	.word	0x0800aea1
 800ae70:	0800aea1 	.word	0x0800aea1
 800ae74:	0800ae8f 	.word	0x0800ae8f
 800ae78:	0800aea1 	.word	0x0800aea1
 800ae7c:	0800aea1 	.word	0x0800aea1
 800ae80:	0800aea1 	.word	0x0800aea1
 800ae84:	0800ae95 	.word	0x0800ae95
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800ae88:	4b18      	ldr	r3, [pc, #96]	; (800aeec <LSM6DSL_AccReadXYZ+0x120>)
 800ae8a:	61bb      	str	r3, [r7, #24]
    break;
 800ae8c:	e008      	b.n	800aea0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800ae8e:	4b18      	ldr	r3, [pc, #96]	; (800aef0 <LSM6DSL_AccReadXYZ+0x124>)
 800ae90:	61bb      	str	r3, [r7, #24]
    break;
 800ae92:	e005      	b.n	800aea0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800ae94:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <LSM6DSL_AccReadXYZ+0x128>)
 800ae96:	61bb      	str	r3, [r7, #24]
    break;
 800ae98:	e002      	b.n	800aea0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800ae9a:	4b17      	ldr	r3, [pc, #92]	; (800aef8 <LSM6DSL_AccReadXYZ+0x12c>)
 800ae9c:	61bb      	str	r3, [r7, #24]
    break;    
 800ae9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800aea0:	2300      	movs	r3, #0
 800aea2:	77fb      	strb	r3, [r7, #31]
 800aea4:	e01a      	b.n	800aedc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800aea6:	7ffb      	ldrb	r3, [r7, #31]
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	3320      	adds	r3, #32
 800aeac:	443b      	add	r3, r7
 800aeae:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aeba:	edd7 7a06 	vldr	s15, [r7, #24]
 800aebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec2:	7ffb      	ldrb	r3, [r7, #31]
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4413      	add	r3, r2
 800aeca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aece:	ee17 2a90 	vmov	r2, s15
 800aed2:	b212      	sxth	r2, r2
 800aed4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800aed6:	7ffb      	ldrb	r3, [r7, #31]
 800aed8:	3301      	adds	r3, #1
 800aeda:	77fb      	strb	r3, [r7, #31]
 800aedc:	7ffb      	ldrb	r3, [r7, #31]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d9e1      	bls.n	800aea6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	3720      	adds	r7, #32
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	3d79db23 	.word	0x3d79db23
 800aef0:	3df9db23 	.word	0x3df9db23
 800aef4:	3e79db23 	.word	0x3e79db23
 800aef8:	3ef9db23 	.word	0x3ef9db23

0800aefc <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	2b2f      	cmp	r3, #47	; 0x2f
 800af0a:	d906      	bls.n	800af1a <Hex2Num+0x1e>
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	2b39      	cmp	r3, #57	; 0x39
 800af10:	d803      	bhi.n	800af1a <Hex2Num+0x1e>
        return a - '0';
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	3b30      	subs	r3, #48	; 0x30
 800af16:	b2db      	uxtb	r3, r3
 800af18:	e014      	b.n	800af44 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	2b60      	cmp	r3, #96	; 0x60
 800af1e:	d906      	bls.n	800af2e <Hex2Num+0x32>
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b66      	cmp	r3, #102	; 0x66
 800af24:	d803      	bhi.n	800af2e <Hex2Num+0x32>
        return (a - 'a') + 10;
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	3b57      	subs	r3, #87	; 0x57
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	e00a      	b.n	800af44 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	d906      	bls.n	800af42 <Hex2Num+0x46>
 800af34:	79fb      	ldrb	r3, [r7, #7]
 800af36:	2b46      	cmp	r3, #70	; 0x46
 800af38:	d803      	bhi.n	800af42 <Hex2Num+0x46>
        return (a - 'A') + 10;
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	3b37      	subs	r3, #55	; 0x37
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	e000      	b.n	800af44 <Hex2Num+0x48>
    }

    return 0;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800af62:	e012      	b.n	800af8a <ParseHexNumber+0x3a>
        sum <<= 4;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff ffc4 	bl	800aefc <Hex2Num>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]
        ptr++;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3301      	adds	r3, #1
 800af82:	607b      	str	r3, [r7, #4]
        i++;
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	3301      	adds	r3, #1
 800af88:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	2b2f      	cmp	r3, #47	; 0x2f
 800af90:	d903      	bls.n	800af9a <ParseHexNumber+0x4a>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b39      	cmp	r3, #57	; 0x39
 800af98:	d9e4      	bls.n	800af64 <ParseHexNumber+0x14>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b60      	cmp	r3, #96	; 0x60
 800afa0:	d903      	bls.n	800afaa <ParseHexNumber+0x5a>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b66      	cmp	r3, #102	; 0x66
 800afa8:	d9dc      	bls.n	800af64 <ParseHexNumber+0x14>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b40      	cmp	r3, #64	; 0x40
 800afb0:	d903      	bls.n	800afba <ParseHexNumber+0x6a>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b46      	cmp	r3, #70	; 0x46
 800afb8:	d9d4      	bls.n	800af64 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <ParseHexNumber+0x76>
        *cnt = i;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	7afa      	ldrb	r2, [r7, #11]
 800afc4:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800afc6:	68fb      	ldr	r3, [r7, #12]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	73fb      	strb	r3, [r7, #15]
 800afde:	2300      	movs	r3, #0
 800afe0:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b2d      	cmp	r3, #45	; 0x2d
 800afec:	d119      	bne.n	800b022 <ParseNumber+0x52>
        minus = 1;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3301      	adds	r3, #1
 800aff6:	607b      	str	r3, [r7, #4]
        i++;
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	3301      	adds	r3, #1
 800affc:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800affe:	e010      	b.n	800b022 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	461a      	mov	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	3b30      	subs	r3, #48	; 0x30
 800b012:	4413      	add	r3, r2
 800b014:	60bb      	str	r3, [r7, #8]
        ptr++;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3301      	adds	r3, #1
 800b01a:	607b      	str	r3, [r7, #4]
        i++;
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	3301      	adds	r3, #1
 800b020:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b2f      	cmp	r3, #47	; 0x2f
 800b028:	d903      	bls.n	800b032 <ParseNumber+0x62>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b39      	cmp	r3, #57	; 0x39
 800b030:	d9e6      	bls.n	800b000 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <ParseNumber+0x6e>
        *cnt = i;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	7bba      	ldrb	r2, [r7, #14]
 800b03c:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <ParseNumber+0x7a>
        return 0 - sum;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	425b      	negs	r3, r3
 800b048:	e000      	b.n	800b04c <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 800b04a:	68bb      	ldr	r3, [r7, #8]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800b066:	e019      	b.n	800b09c <ParseMAC+0x44>
    hexcnt = 1;
 800b068:	2301      	movs	r3, #1
 800b06a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b3a      	cmp	r3, #58	; 0x3a
 800b072:	d00e      	beq.n	800b092 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 800b074:	f107 030e 	add.w	r3, r7, #14
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff ff68 	bl	800af50 <ParseHexNumber>
 800b080:	4601      	mov	r1, r0
 800b082:	7bfb      	ldrb	r3, [r7, #15]
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	73fa      	strb	r2, [r7, #15]
 800b088:	461a      	mov	r2, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	4413      	add	r3, r2
 800b08e:	b2ca      	uxtb	r2, r1
 800b090:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	461a      	mov	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4413      	add	r3, r2
 800b09a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e1      	bne.n	800b068 <ParseMAC+0x10>
  }
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800b0bc:	e019      	b.n	800b0f2 <ParseIP+0x44>
    hexcnt = 1;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0c8:	d00e      	beq.n	800b0e8 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800b0ca:	f107 030e 	add.w	r3, r7, #14
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff ff7d 	bl	800afd0 <ParseNumber>
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	73fa      	strb	r2, [r7, #15]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	b2ca      	uxtb	r2, r1
 800b0e6:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e1      	bne.n	800b0be <ParseIP+0x10>
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	3302      	adds	r3, #2
 800b116:	4934      	ldr	r1, [pc, #208]	; (800b1e8 <AT_ParseInfo+0xe4>)
 800b118:	4618      	mov	r0, r3
 800b11a:	f009 fd5f 	bl	8014bdc <strtok>
 800b11e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800b120:	e05a      	b.n	800b1d8 <AT_ParseInfo+0xd4>
    switch (num++) {
 800b122:	7afb      	ldrb	r3, [r7, #11]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	72fa      	strb	r2, [r7, #11]
 800b128:	2b06      	cmp	r3, #6
 800b12a:	d84f      	bhi.n	800b1cc <AT_ParseInfo+0xc8>
 800b12c:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <AT_ParseInfo+0x30>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b151 	.word	0x0800b151
 800b138:	0800b15f 	.word	0x0800b15f
 800b13c:	0800b16f 	.word	0x0800b16f
 800b140:	0800b17f 	.word	0x0800b17f
 800b144:	0800b18f 	.word	0x0800b18f
 800b148:	0800b19f 	.word	0x0800b19f
 800b14c:	0800b1b3 	.word	0x0800b1b3
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2220      	movs	r2, #32
 800b154:	68f9      	ldr	r1, [r7, #12]
 800b156:	4618      	mov	r0, r3
 800b158:	f009 fd2d 	bl	8014bb6 <strncpy>
      break;
 800b15c:	e037      	b.n	800b1ce <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3320      	adds	r3, #32
 800b162:	2218      	movs	r2, #24
 800b164:	68f9      	ldr	r1, [r7, #12]
 800b166:	4618      	mov	r0, r3
 800b168:	f009 fd25 	bl	8014bb6 <strncpy>
      break;
 800b16c:	e02f      	b.n	800b1ce <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3338      	adds	r3, #56	; 0x38
 800b172:	2210      	movs	r2, #16
 800b174:	68f9      	ldr	r1, [r7, #12]
 800b176:	4618      	mov	r0, r3
 800b178:	f009 fd1d 	bl	8014bb6 <strncpy>
      break;
 800b17c:	e027      	b.n	800b1ce <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3348      	adds	r3, #72	; 0x48
 800b182:	2210      	movs	r2, #16
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	4618      	mov	r0, r3
 800b188:	f009 fd15 	bl	8014bb6 <strncpy>
      break;
 800b18c:	e01f      	b.n	800b1ce <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3358      	adds	r3, #88	; 0x58
 800b192:	2210      	movs	r2, #16
 800b194:	68f9      	ldr	r1, [r7, #12]
 800b196:	4618      	mov	r0, r3
 800b198:	f009 fd0d 	bl	8014bb6 <strncpy>
      break;
 800b19c:	e017      	b.n	800b1ce <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800b19e:	2100      	movs	r1, #0
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff ff15 	bl	800afd0 <ParseNumber>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800b1b0:	e00d      	b.n	800b1ce <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800b1b2:	490e      	ldr	r1, [pc, #56]	; (800b1ec <AT_ParseInfo+0xe8>)
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f009 fd11 	bl	8014bdc <strtok>
 800b1ba:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3368      	adds	r3, #104	; 0x68
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	68f9      	ldr	r1, [r7, #12]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f009 fcf6 	bl	8014bb6 <strncpy>
      break;
 800b1ca:	e000      	b.n	800b1ce <AT_ParseInfo+0xca>

    default: break;
 800b1cc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800b1ce:	4906      	ldr	r1, [pc, #24]	; (800b1e8 <AT_ParseInfo+0xe4>)
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f009 fd03 	bl	8014bdc <strtok>
 800b1d6:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1a1      	bne.n	800b122 <AT_ParseInfo+0x1e>
  }
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	08018be8 	.word	0x08018be8
 800b1ec:	08018bec 	.word	0x08018bec

0800b1f0 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3302      	adds	r3, #2
 800b202:	4952      	ldr	r1, [pc, #328]	; (800b34c <AT_ParseConnSettings+0x15c>)
 800b204:	4618      	mov	r0, r3
 800b206:	f009 fce9 	bl	8014bdc <strtok>
 800b20a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800b20c:	e095      	b.n	800b33a <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	73fa      	strb	r2, [r7, #15]
 800b214:	2b0b      	cmp	r3, #11
 800b216:	d87f      	bhi.n	800b318 <AT_ParseConnSettings+0x128>
 800b218:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <AT_ParseConnSettings+0x30>)
 800b21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800b251 	.word	0x0800b251
 800b224:	0800b25f 	.word	0x0800b25f
 800b228:	0800b26f 	.word	0x0800b26f
 800b22c:	0800b283 	.word	0x0800b283
 800b230:	0800b297 	.word	0x0800b297
 800b234:	0800b2ab 	.word	0x0800b2ab
 800b238:	0800b2b9 	.word	0x0800b2b9
 800b23c:	0800b2c7 	.word	0x0800b2c7
 800b240:	0800b2d5 	.word	0x0800b2d5
 800b244:	0800b2e3 	.word	0x0800b2e3
 800b248:	0800b2f1 	.word	0x0800b2f1
 800b24c:	0800b305 	.word	0x0800b305
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2221      	movs	r2, #33	; 0x21
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	4618      	mov	r0, r3
 800b258:	f009 fcad 	bl	8014bb6 <strncpy>
      break;
 800b25c:	e05d      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	3321      	adds	r3, #33	; 0x21
 800b262:	2221      	movs	r2, #33	; 0x21
 800b264:	68b9      	ldr	r1, [r7, #8]
 800b266:	4618      	mov	r0, r3
 800b268:	f009 fca5 	bl	8014bb6 <strncpy>
      break;
 800b26c:	e055      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800b26e:	2100      	movs	r1, #0
 800b270:	68b8      	ldr	r0, [r7, #8]
 800b272:	f7ff fead 	bl	800afd0 <ParseNumber>
 800b276:	4603      	mov	r3, r0
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 800b280:	e04b      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800b282:	2100      	movs	r1, #0
 800b284:	68b8      	ldr	r0, [r7, #8]
 800b286:	f7ff fea3 	bl	800afd0 <ParseNumber>
 800b28a:	4603      	mov	r3, r0
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800b294:	e041      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800b296:	2100      	movs	r1, #0
 800b298:	68b8      	ldr	r0, [r7, #8]
 800b29a:	f7ff fe99 	bl	800afd0 <ParseNumber>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800b2a8:	e037      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	3348      	adds	r3, #72	; 0x48
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	68b8      	ldr	r0, [r7, #8]
 800b2b2:	f7ff fefc 	bl	800b0ae <ParseIP>
      break;
 800b2b6:	e030      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	334c      	adds	r3, #76	; 0x4c
 800b2bc:	4619      	mov	r1, r3
 800b2be:	68b8      	ldr	r0, [r7, #8]
 800b2c0:	f7ff fef5 	bl	800b0ae <ParseIP>
      break;
 800b2c4:	e029      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	3350      	adds	r3, #80	; 0x50
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68b8      	ldr	r0, [r7, #8]
 800b2ce:	f7ff feee 	bl	800b0ae <ParseIP>
      break;
 800b2d2:	e022      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	3354      	adds	r3, #84	; 0x54
 800b2d8:	4619      	mov	r1, r3
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f7ff fee7 	bl	800b0ae <ParseIP>
      break;
 800b2e0:	e01b      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	3358      	adds	r3, #88	; 0x58
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68b8      	ldr	r0, [r7, #8]
 800b2ea:	f7ff fee0 	bl	800b0ae <ParseIP>
      break;
 800b2ee:	e014      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	68b8      	ldr	r0, [r7, #8]
 800b2f4:	f7ff fe6c 	bl	800afd0 <ParseNumber>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800b302:	e00a      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800b304:	2100      	movs	r1, #0
 800b306:	68b8      	ldr	r0, [r7, #8]
 800b308:	f7ff fe62 	bl	800afd0 <ParseNumber>
 800b30c:	4603      	mov	r3, r0
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800b316:	e000      	b.n	800b31a <AT_ParseConnSettings+0x12a>

    default:
      break;
 800b318:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800b31a:	490c      	ldr	r1, [pc, #48]	; (800b34c <AT_ParseConnSettings+0x15c>)
 800b31c:	2000      	movs	r0, #0
 800b31e:	f009 fc5d 	bl	8014bdc <strtok>
 800b322:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d007      	beq.n	800b33a <AT_ParseConnSettings+0x14a>
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	2b2c      	cmp	r3, #44	; 0x2c
 800b332:	d102      	bne.n	800b33a <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	3301      	adds	r3, #1
 800b338:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f47f af66 	bne.w	800b20e <AT_ParseConnSettings+0x1e>
    }
  }
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	08018be8 	.word	0x08018be8

0800b350 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3302      	adds	r3, #2
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b31      	cmp	r3, #49	; 0x31
 800b362:	bf0c      	ite	eq
 800b364:	2301      	moveq	r3, #1
 800b366:	2300      	movne	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	461a      	mov	r2, r3
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	701a      	strb	r2, [r3, #0]
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800b396:	68b8      	ldr	r0, [r7, #8]
 800b398:	f7f4 ff6a 	bl	8000270 <strlen>
 800b39c:	4603      	mov	r3, r0
 800b39e:	b299      	uxth	r1, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	68b8      	ldr	r0, [r7, #8]
 800b3aa:	47a0      	blx	r4
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dd3e      	ble.n	800b434 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b3c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800b3ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dd27      	ble.n	800b426 <AT_ExecuteCommand+0xaa>
 800b3d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b3da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b3de:	dc22      	bgt.n	800b426 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800b3e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b3e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b3e8:	d105      	bne.n	800b3f6 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800b3ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800b3f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800b402:	490f      	ldr	r1, [pc, #60]	; (800b440 <AT_ExecuteCommand+0xc4>)
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f009 fc45 	bl	8014c94 <strstr>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800b410:	2300      	movs	r3, #0
 800b412:	e010      	b.n	800b436 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800b414:	490b      	ldr	r1, [pc, #44]	; (800b444 <AT_ExecuteCommand+0xc8>)
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f009 fc3c 	bl	8014c94 <strstr>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b422:	2305      	movs	r3, #5
 800b424:	e007      	b.n	800b436 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800b426:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b42a:	f113 0f04 	cmn.w	r3, #4
 800b42e:	d101      	bne.n	800b434 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800b430:	2306      	movs	r3, #6
 800b432:	e000      	b.n	800b436 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800b434:	2304      	movs	r3, #4
}
 800b436:	4618      	mov	r0, r3
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd90      	pop	{r4, r7, pc}
 800b43e:	bf00      	nop
 800b440:	08018bfc 	.word	0x08018bfc
 800b444:	08018c08 	.word	0x08018c08

0800b448 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800b462:	68b8      	ldr	r0, [r7, #8]
 800b464:	f7f4 ff04 	bl	8000270 <strlen>
 800b468:	4603      	mov	r3, r0
 800b46a:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800b46c:	8a7b      	ldrh	r3, [r7, #18]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <AT_RequestSendData+0x32>
 800b476:	2302      	movs	r3, #2
 800b478:	e053      	b.n	800b522 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b486:	8a79      	ldrh	r1, [r7, #18]
 800b488:	68b8      	ldr	r0, [r7, #8]
 800b48a:	4798      	blx	r3
 800b48c:	4603      	mov	r3, r0
 800b48e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800b490:	8a3a      	ldrh	r2, [r7, #16]
 800b492:	8a7b      	ldrh	r3, [r7, #18]
 800b494:	429a      	cmp	r2, r3
 800b496:	d143      	bne.n	800b520 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b4a4:	8879      	ldrh	r1, [r7, #2]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	4798      	blx	r3
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800b4ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b4b2:	887b      	ldrh	r3, [r7, #2]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d131      	bne.n	800b51c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6a38      	ldr	r0, [r7, #32]
 800b4c8:	4798      	blx	r3
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800b4ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	dd19      	ble.n	800b50a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800b4d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b4da:	6a3a      	ldr	r2, [r7, #32]
 800b4dc:	4413      	add	r3, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800b4e2:	4912      	ldr	r1, [pc, #72]	; (800b52c <AT_RequestSendData+0xe4>)
 800b4e4:	6a38      	ldr	r0, [r7, #32]
 800b4e6:	f009 fbd5 	bl	8014c94 <strstr>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e016      	b.n	800b522 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800b4f4:	490e      	ldr	r1, [pc, #56]	; (800b530 <AT_RequestSendData+0xe8>)
 800b4f6:	6a38      	ldr	r0, [r7, #32]
 800b4f8:	f009 fbcc 	bl	8014c94 <strstr>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b502:	2305      	movs	r3, #5
 800b504:	e00d      	b.n	800b522 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800b506:	2302      	movs	r3, #2
 800b508:	e00b      	b.n	800b522 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800b50a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b50e:	f113 0f04 	cmn.w	r3, #4
 800b512:	d101      	bne.n	800b518 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800b514:	2306      	movs	r3, #6
 800b516:	e004      	b.n	800b522 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800b518:	2302      	movs	r3, #2
 800b51a:	e002      	b.n	800b522 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800b51c:	2302      	movs	r3, #2
 800b51e:	e000      	b.n	800b522 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800b520:	2304      	movs	r3, #4
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	08018bfc 	.word	0x08018bfc
 800b530:	08018c08 	.word	0x08018c08

0800b534 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b548:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800b550:	68b8      	ldr	r0, [r7, #8]
 800b552:	f7f4 fe8d 	bl	8000270 <strlen>
 800b556:	4603      	mov	r3, r0
 800b558:	b299      	uxth	r1, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800b560:	461a      	mov	r2, r3
 800b562:	68b8      	ldr	r0, [r7, #8]
 800b564:	47a0      	blx	r4
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dd6f      	ble.n	800b64c <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800b578:	2100      	movs	r1, #0
 800b57a:	6938      	ldr	r0, [r7, #16]
 800b57c:	4798      	blx	r3
 800b57e:	4603      	mov	r3, r0
 800b580:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b0d      	cmp	r3, #13
 800b588:	d104      	bne.n	800b594 <AT_RequestReceiveData+0x60>
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	3301      	adds	r3, #1
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b0a      	cmp	r3, #10
 800b592:	d001      	beq.n	800b598 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800b594:	2304      	movs	r3, #4
 800b596:	e05a      	b.n	800b64e <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	3b02      	subs	r3, #2
 800b59c:	617b      	str	r3, [r7, #20]
    p+=2;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2b07      	cmp	r3, #7
 800b5a8:	d94a      	bls.n	800b640 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800b5aa:	e002      	b.n	800b5b2 <AT_RequestReceiveData+0x7e>
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d006      	beq.n	800b5c6 <AT_RequestReceiveData+0x92>
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	4413      	add	r3, r2
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b15      	cmp	r3, #21
 800b5c4:	d0f2      	beq.n	800b5ac <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	693a      	ldr	r2, [r7, #16]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	3b08      	subs	r3, #8
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	491f      	ldr	r1, [pc, #124]	; (800b658 <AT_RequestReceiveData+0x124>)
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f009 fb5a 	bl	8014c94 <strstr>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d016      	beq.n	800b614 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	3b08      	subs	r3, #8
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	887a      	ldrh	r2, [r7, #2]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d202      	bcs.n	800b602 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	887a      	ldrh	r2, [r7, #2]
 800b600:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	461a      	mov	r2, r3
 800b608:	6939      	ldr	r1, [r7, #16]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f009 fbfb 	bl	8014e06 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	e01c      	b.n	800b64e <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	3b04      	subs	r3, #4
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	4413      	add	r3, r2
 800b61c:	2204      	movs	r2, #4
 800b61e:	490f      	ldr	r1, [pc, #60]	; (800b65c <AT_RequestReceiveData+0x128>)
 800b620:	4618      	mov	r0, r3
 800b622:	f009 fa77 	bl	8014b14 <memcmp>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d104      	bne.n	800b636 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	2200      	movs	r2, #0
 800b630:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b632:	2305      	movs	r3, #5
 800b634:	e00b      	b.n	800b64e <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	2200      	movs	r2, #0
 800b63a:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800b63c:	2305      	movs	r3, #5
 800b63e:	e006      	b.n	800b64e <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f113 0f04 	cmn.w	r3, #4
 800b646:	d101      	bne.n	800b64c <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800b648:	2306      	movs	r3, #6
 800b64a:	e000      	b.n	800b64e <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800b64c:	2304      	movs	r3, #4
}
 800b64e:	4618      	mov	r0, r3
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}
 800b656:	bf00      	nop
 800b658:	08018bfc 	.word	0x08018bfc
 800b65c:	08018c10 	.word	0x08018c10

0800b660 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800b668:	2302      	movs	r3, #2
 800b66a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f247 5230 	movw	r2, #30000	; 0x7530
 800b672:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b67c:	2000      	movs	r0, #0
 800b67e:	4798      	blx	r3
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d113      	bne.n	800b6ae <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b68c:	461a      	mov	r2, r3
 800b68e:	490a      	ldr	r1, [pc, #40]	; (800b6b8 <ES_WIFI_Init+0x58>)
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff fe73 	bl	800b37c <AT_ExecuteCommand>
 800b696:	4603      	mov	r3, r0
 800b698:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fd2b 	bl	800b104 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	08018c18 	.word	0x08018c18

0800b6bc <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00b      	beq.n	800b6e8 <ES_WIFI_RegisterBusIO+0x2c>
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <ES_WIFI_RegisterBusIO+0x2c>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <ES_WIFI_RegisterBusIO+0x2c>
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <ES_WIFI_RegisterBusIO+0x2c>
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e014      	b.n	800b716 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	4932      	ldr	r1, [pc, #200]	; (800b804 <ES_WIFI_Connect+0xe0>)
 800b73c:	4618      	mov	r0, r3
 800b73e:	f009 f8f1 	bl	8014924 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b74e:	461a      	mov	r2, r3
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff fe13 	bl	800b37c <AT_ExecuteCommand>
 800b756:	4603      	mov	r3, r0
 800b758:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d14b      	bne.n	800b7f8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4927      	ldr	r1, [pc, #156]	; (800b808 <ES_WIFI_Connect+0xe4>)
 800b76a:	4618      	mov	r0, r3
 800b76c:	f009 f8da 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b77c:	461a      	mov	r2, r3
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff fdfc 	bl	800b37c <AT_ExecuteCommand>
 800b784:	4603      	mov	r3, r0
 800b786:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d134      	bne.n	800b7f8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	78fa      	ldrb	r2, [r7, #3]
 800b792:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	491b      	ldr	r1, [pc, #108]	; (800b80c <ES_WIFI_Connect+0xe8>)
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f009 f8bf 	bl	8014924 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f7ff fde1 	bl	800b37c <AT_ExecuteCommand>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d119      	bne.n	800b7f8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b7ca:	4911      	ldr	r1, [pc, #68]	; (800b810 <ES_WIFI_Connect+0xec>)
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f009 f8a9 	bl	8014924 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b7de:	461a      	mov	r2, r3
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f7ff fdcb 	bl	800b37c <AT_ExecuteCommand>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d103      	bne.n	800b7f8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800b7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	08018c30 	.word	0x08018c30
 800b808:	08018c38 	.word	0x08018c38
 800b80c:	08018c40 	.word	0x08018c40
 800b810:	08018c48 	.word	0x08018c48

0800b814 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b822:	4911      	ldr	r1, [pc, #68]	; (800b868 <ES_WIFI_IsConnected+0x54>)
 800b824:	4618      	mov	r0, r3
 800b826:	f009 f87d 	bl	8014924 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b836:	461a      	mov	r2, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff fd9f 	bl	800b37c <AT_ExecuteCommand>
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800b842:	7bfb      	ldrb	r3, [r7, #15]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d108      	bne.n	800b85a <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	33d2      	adds	r3, #210	; 0xd2
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f7ff fd7b 	bl	800b350 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	08018c4c 	.word	0x08018c4c

0800b86c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b87a:	4910      	ldr	r1, [pc, #64]	; (800b8bc <ES_WIFI_GetNetworkSettings+0x50>)
 800b87c:	4618      	mov	r0, r3
 800b87e:	f009 f851 	bl	8014924 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b88e:	461a      	mov	r2, r3
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff fd73 	bl	800b37c <AT_ExecuteCommand>
 800b896:	4603      	mov	r3, r0
 800b898:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d108      	bne.n	800b8b2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	338d      	adds	r3, #141	; 0x8d
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7ff fc9f 	bl	800b1f0 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	08018c54 	.word	0x08018c54

0800b8c0 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8d0:	4912      	ldr	r1, [pc, #72]	; (800b91c <ES_WIFI_GetMACAddress+0x5c>)
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f009 f826 	bl	8014924 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff fd48 	bl	800b37c <AT_ExecuteCommand>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10c      	bne.n	800b910 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b8fc:	3302      	adds	r3, #2
 800b8fe:	4908      	ldr	r1, [pc, #32]	; (800b920 <ES_WIFI_GetMACAddress+0x60>)
 800b900:	4618      	mov	r0, r3
 800b902:	f009 f96b 	bl	8014bdc <strtok>
 800b906:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	68b8      	ldr	r0, [r7, #8]
 800b90c:	f7ff fba4 	bl	800b058 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800b910:	7bfb      	ldrb	r3, [r7, #15]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	08018ca4 	.word	0x08018ca4
 800b920:	08018ca8 	.word	0x08018ca8

0800b924 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b087      	sub	sp, #28
 800b928:	af02      	add	r7, sp, #8
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <ES_WIFI_StartClientConnection+0x1e>
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d105      	bne.n	800b94e <ES_WIFI_StartClientConnection+0x2a>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	885b      	ldrh	r3, [r3, #2]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <ES_WIFI_StartClientConnection+0x2a>
 800b94a:	2302      	movs	r3, #2
 800b94c:	e0c1      	b.n	800bad2 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	461a      	mov	r2, r3
 800b95a:	4960      	ldr	r1, [pc, #384]	; (800badc <ES_WIFI_StartClientConnection+0x1b8>)
 800b95c:	f008 ffe2 	bl	8014924 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b96c:	461a      	mov	r2, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7ff fd04 	bl	800b37c <AT_ExecuteCommand>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d114      	bne.n	800b9a8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	4955      	ldr	r1, [pc, #340]	; (800bae0 <ES_WIFI_StartClientConnection+0x1bc>)
 800b98c:	f008 ffca 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b99c:	461a      	mov	r2, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff fcec 	bl	800b37c <AT_ExecuteCommand>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d114      	bne.n	800b9d8 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	889b      	ldrh	r3, [r3, #4]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	494a      	ldr	r1, [pc, #296]	; (800bae4 <ES_WIFI_StartClientConnection+0x1c0>)
 800b9bc:	f008 ffb2 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fcd4 	bl	800b37c <AT_ExecuteCommand>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d11c      	bne.n	800ba18 <ES_WIFI_StartClientConnection+0xf4>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <ES_WIFI_StartClientConnection+0xca>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d114      	bne.n	800ba18 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	885b      	ldrh	r3, [r3, #2]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	493b      	ldr	r1, [pc, #236]	; (800bae8 <ES_WIFI_StartClientConnection+0x1c4>)
 800b9fc:	f008 ff92 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fcb4 	bl	800b37c <AT_ExecuteCommand>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d128      	bne.n	800ba70 <ES_WIFI_StartClientConnection+0x14c>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <ES_WIFI_StartClientConnection+0x10a>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d120      	bne.n	800ba70 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	799b      	ldrb	r3, [r3, #6]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	79db      	ldrb	r3, [r3, #7]
 800ba3e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800ba44:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	9200      	str	r2, [sp, #0]
 800ba4e:	4623      	mov	r3, r4
 800ba50:	460a      	mov	r2, r1
 800ba52:	4926      	ldr	r1, [pc, #152]	; (800baec <ES_WIFI_StartClientConnection+0x1c8>)
 800ba54:	f008 ff66 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba64:	461a      	mov	r2, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7ff fc88 	bl	800b37c <AT_ExecuteCommand>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d116      	bne.n	800baa4 <ES_WIFI_StartClientConnection+0x180>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d112      	bne.n	800baa4 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba84:	491a      	ldr	r1, [pc, #104]	; (800baf0 <ES_WIFI_StartClientConnection+0x1cc>)
 800ba86:	4618      	mov	r0, r3
 800ba88:	f008 ff4c 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7ff fc6e 	bl	800b37c <AT_ExecuteCommand>
 800baa0:	4603      	mov	r3, r0
 800baa2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d112      	bne.n	800bad0 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bab0:	4910      	ldr	r1, [pc, #64]	; (800baf4 <ES_WIFI_StartClientConnection+0x1d0>)
 800bab2:	4618      	mov	r0, r3
 800bab4:	f008 ff36 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bac4:	461a      	mov	r2, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff fc58 	bl	800b37c <AT_ExecuteCommand>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd90      	pop	{r4, r7, pc}
 800bada:	bf00      	nop
 800badc:	08018d0c 	.word	0x08018d0c
 800bae0:	08018d14 	.word	0x08018d14
 800bae4:	08018d1c 	.word	0x08018d1c
 800bae8:	08018d24 	.word	0x08018d24
 800baec:	08018d2c 	.word	0x08018d2c
 800baf0:	08018d3c 	.word	0x08018d3c
 800baf4:	08018d44 	.word	0x08018d44

0800baf8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	461a      	mov	r2, r3
 800bb04:	460b      	mov	r3, r1
 800bb06:	72fb      	strb	r3, [r7, #11]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d102      	bne.n	800bb1c <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800bb16:	2301      	movs	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e001      	b.n	800bb20 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800bb20:	893b      	ldrh	r3, [r7, #8]
 800bb22:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800bb26:	d302      	bcc.n	800bb2e <ES_WIFI_SendData+0x36>
 800bb28:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800bb2c:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	893a      	ldrh	r2, [r7, #8]
 800bb32:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb3a:	7afa      	ldrb	r2, [r7, #11]
 800bb3c:	4942      	ldr	r1, [pc, #264]	; (800bc48 <ES_WIFI_SendData+0x150>)
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f008 fef0 	bl	8014924 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb50:	461a      	mov	r2, r3
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f7ff fc12 	bl	800b37c <AT_ExecuteCommand>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800bb5c:	7cfb      	ldrb	r3, [r7, #19]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d15e      	bne.n	800bc20 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	4938      	ldr	r1, [pc, #224]	; (800bc4c <ES_WIFI_SendData+0x154>)
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f008 fed9 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb7e:	461a      	mov	r2, r3
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fbfb 	bl	800b37c <AT_ExecuteCommand>
 800bb86:	4603      	mov	r3, r0
 800bb88:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800bb8a:	7cfb      	ldrb	r3, [r7, #19]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d13d      	bne.n	800bc0c <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bb96:	893a      	ldrh	r2, [r7, #8]
 800bb98:	492d      	ldr	r1, [pc, #180]	; (800bc50 <ES_WIFI_SendData+0x158>)
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f008 fec2 	bl	8014924 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bbac:	893a      	ldrh	r2, [r7, #8]
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f7ff fc47 	bl	800b448 <AT_RequestSendData>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800bbbe:	7cfb      	ldrb	r3, [r7, #19]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d119      	bne.n	800bbf8 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bbca:	4922      	ldr	r1, [pc, #136]	; (800bc54 <ES_WIFI_SendData+0x15c>)
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f009 f861 	bl	8014c94 <strstr>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d02c      	beq.n	800bc32 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800bbd8:	f640 024c 	movw	r2, #2124	; 0x84c
 800bbdc:	491e      	ldr	r1, [pc, #120]	; (800bc58 <ES_WIFI_SendData+0x160>)
 800bbde:	481f      	ldr	r0, [pc, #124]	; (800bc5c <ES_WIFI_SendData+0x164>)
 800bbe0:	f008 fdfe 	bl	80147e0 <iprintf>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bbea:	4619      	mov	r1, r3
 800bbec:	481c      	ldr	r0, [pc, #112]	; (800bc60 <ES_WIFI_SendData+0x168>)
 800bbee:	f008 fdf7 	bl	80147e0 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	74fb      	strb	r3, [r7, #19]
 800bbf6:	e01c      	b.n	800bc32 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800bbf8:	f640 0252 	movw	r2, #2130	; 0x852
 800bbfc:	4916      	ldr	r1, [pc, #88]	; (800bc58 <ES_WIFI_SendData+0x160>)
 800bbfe:	4817      	ldr	r0, [pc, #92]	; (800bc5c <ES_WIFI_SendData+0x164>)
 800bc00:	f008 fdee 	bl	80147e0 <iprintf>
 800bc04:	4817      	ldr	r0, [pc, #92]	; (800bc64 <ES_WIFI_SendData+0x16c>)
 800bc06:	f008 fe51 	bl	80148ac <puts>
 800bc0a:	e012      	b.n	800bc32 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800bc0c:	f640 0257 	movw	r2, #2135	; 0x857
 800bc10:	4911      	ldr	r1, [pc, #68]	; (800bc58 <ES_WIFI_SendData+0x160>)
 800bc12:	4812      	ldr	r0, [pc, #72]	; (800bc5c <ES_WIFI_SendData+0x164>)
 800bc14:	f008 fde4 	bl	80147e0 <iprintf>
 800bc18:	4813      	ldr	r0, [pc, #76]	; (800bc68 <ES_WIFI_SendData+0x170>)
 800bc1a:	f008 fe47 	bl	80148ac <puts>
 800bc1e:	e008      	b.n	800bc32 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800bc20:	f640 025c 	movw	r2, #2140	; 0x85c
 800bc24:	490c      	ldr	r1, [pc, #48]	; (800bc58 <ES_WIFI_SendData+0x160>)
 800bc26:	480d      	ldr	r0, [pc, #52]	; (800bc5c <ES_WIFI_SendData+0x164>)
 800bc28:	f008 fdda 	bl	80147e0 <iprintf>
 800bc2c:	480f      	ldr	r0, [pc, #60]	; (800bc6c <ES_WIFI_SendData+0x174>)
 800bc2e:	f008 fe3d 	bl	80148ac <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800bc32:	7cfb      	ldrb	r3, [r7, #19]
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d102      	bne.n	800bc3e <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800bc3e:	7cfb      	ldrb	r3, [r7, #19]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	08018d0c 	.word	0x08018d0c
 800bc4c:	08018ec4 	.word	0x08018ec4
 800bc50:	08018ecc 	.word	0x08018ecc
 800bc54:	08018ed8 	.word	0x08018ed8
 800bc58:	08018d9c 	.word	0x08018d9c
 800bc5c:	08018db8 	.word	0x08018db8
 800bc60:	08018ee0 	.word	0x08018ee0
 800bc64:	08018efc 	.word	0x08018efc
 800bc68:	08018f18 	.word	0x08018f18
 800bc6c:	08018f2c 	.word	0x08018f2c

0800bc70 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af02      	add	r7, sp, #8
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	607a      	str	r2, [r7, #4]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	72fb      	strb	r3, [r7, #11]
 800bc80:	4613      	mov	r3, r2
 800bc82:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800bc84:	2302      	movs	r3, #2
 800bc86:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d102      	bne.n	800bc94 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	e001      	b.n	800bc98 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800bc98:	893b      	ldrh	r3, [r7, #8]
 800bc9a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800bc9e:	f200 808b 	bhi.w	800bdb8 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bca8:	7afa      	ldrb	r2, [r7, #11]
 800bcaa:	4946      	ldr	r1, [pc, #280]	; (800bdc4 <ES_WIFI_ReceiveData+0x154>)
 800bcac:	4618      	mov	r0, r3
 800bcae:	f008 fe39 	bl	8014924 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fb5b 	bl	800b37c <AT_ExecuteCommand>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800bcca:	7cfb      	ldrb	r3, [r7, #19]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d165      	bne.n	800bd9c <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bcd6:	893a      	ldrh	r2, [r7, #8]
 800bcd8:	493b      	ldr	r1, [pc, #236]	; (800bdc8 <ES_WIFI_ReceiveData+0x158>)
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f008 fe22 	bl	8014924 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bcec:	461a      	mov	r2, r3
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff fb44 	bl	800b37c <AT_ExecuteCommand>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800bcf8:	7cfb      	ldrb	r3, [r7, #19]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d141      	bne.n	800bd82 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4931      	ldr	r1, [pc, #196]	; (800bdcc <ES_WIFI_ReceiveData+0x15c>)
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f008 fe0b 	bl	8014924 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7ff fb2d 	bl	800b37c <AT_ExecuteCommand>
 800bd22:	4603      	mov	r3, r0
 800bd24:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800bd26:	7cfb      	ldrb	r3, [r7, #19]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d120      	bne.n	800bd6e <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bd32:	4927      	ldr	r1, [pc, #156]	; (800bdd0 <ES_WIFI_ReceiveData+0x160>)
 800bd34:	4618      	mov	r0, r3
 800bd36:	f008 fdf5 	bl	8014924 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800bd40:	893a      	ldrh	r2, [r7, #8]
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	4613      	mov	r3, r2
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fbf2 	bl	800b534 <AT_RequestReceiveData>
 800bd50:	4603      	mov	r3, r0
 800bd52:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800bd54:	7cfb      	ldrb	r3, [r7, #19]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d02e      	beq.n	800bdb8 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800bd5a:	f640 02ed 	movw	r2, #2285	; 0x8ed
 800bd5e:	491d      	ldr	r1, [pc, #116]	; (800bdd4 <ES_WIFI_ReceiveData+0x164>)
 800bd60:	481d      	ldr	r0, [pc, #116]	; (800bdd8 <ES_WIFI_ReceiveData+0x168>)
 800bd62:	f008 fd3d 	bl	80147e0 <iprintf>
 800bd66:	481d      	ldr	r0, [pc, #116]	; (800bddc <ES_WIFI_ReceiveData+0x16c>)
 800bd68:	f008 fda0 	bl	80148ac <puts>
 800bd6c:	e024      	b.n	800bdb8 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800bd6e:	f640 02f2 	movw	r2, #2290	; 0x8f2
 800bd72:	4918      	ldr	r1, [pc, #96]	; (800bdd4 <ES_WIFI_ReceiveData+0x164>)
 800bd74:	4818      	ldr	r0, [pc, #96]	; (800bdd8 <ES_WIFI_ReceiveData+0x168>)
 800bd76:	f008 fd33 	bl	80147e0 <iprintf>
 800bd7a:	4819      	ldr	r0, [pc, #100]	; (800bde0 <ES_WIFI_ReceiveData+0x170>)
 800bd7c:	f008 fd96 	bl	80148ac <puts>
 800bd80:	e01a      	b.n	800bdb8 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800bd82:	f640 02f7 	movw	r2, #2295	; 0x8f7
 800bd86:	4913      	ldr	r1, [pc, #76]	; (800bdd4 <ES_WIFI_ReceiveData+0x164>)
 800bd88:	4813      	ldr	r0, [pc, #76]	; (800bdd8 <ES_WIFI_ReceiveData+0x168>)
 800bd8a:	f008 fd29 	bl	80147e0 <iprintf>
 800bd8e:	4815      	ldr	r0, [pc, #84]	; (800bde4 <ES_WIFI_ReceiveData+0x174>)
 800bd90:	f008 fd8c 	bl	80148ac <puts>
        *Receivedlen = 0;
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	2200      	movs	r2, #0
 800bd98:	801a      	strh	r2, [r3, #0]
 800bd9a:	e00d      	b.n	800bdb8 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800bd9c:	f640 02fd 	movw	r2, #2301	; 0x8fd
 800bda0:	490c      	ldr	r1, [pc, #48]	; (800bdd4 <ES_WIFI_ReceiveData+0x164>)
 800bda2:	480d      	ldr	r0, [pc, #52]	; (800bdd8 <ES_WIFI_ReceiveData+0x168>)
 800bda4:	f008 fd1c 	bl	80147e0 <iprintf>
 800bda8:	480f      	ldr	r0, [pc, #60]	; (800bde8 <ES_WIFI_ReceiveData+0x178>)
 800bdaa:	f008 fd7f 	bl	80148ac <puts>
      issue15++;
 800bdae:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <ES_WIFI_ReceiveData+0x17c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	4a0d      	ldr	r2, [pc, #52]	; (800bdec <ES_WIFI_ReceiveData+0x17c>)
 800bdb6:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800bdb8:	7cfb      	ldrb	r3, [r7, #19]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	08018d0c 	.word	0x08018d0c
 800bdc8:	08018f50 	.word	0x08018f50
 800bdcc:	08018f58 	.word	0x08018f58
 800bdd0:	08018f60 	.word	0x08018f60
 800bdd4:	08018d9c 	.word	0x08018d9c
 800bdd8:	08018db8 	.word	0x08018db8
 800bddc:	08018f64 	.word	0x08018f64
 800bde0:	08018f84 	.word	0x08018f84
 800bde4:	08018f9c 	.word	0x08018f9c
 800bde8:	08018fbc 	.word	0x08018fbc
 800bdec:	200010c8 	.word	0x200010c8

0800bdf0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08c      	sub	sp, #48	; 0x30
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800bdf8:	4b57      	ldr	r3, [pc, #348]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800bdfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdfc:	4a56      	ldr	r2, [pc, #344]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800bdfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be02:	6593      	str	r3, [r2, #88]	; 0x58
 800be04:	4b54      	ldr	r3, [pc, #336]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be0c:	61bb      	str	r3, [r7, #24]
 800be0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be10:	4b51      	ldr	r3, [pc, #324]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be14:	4a50      	ldr	r2, [pc, #320]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be16:	f043 0302 	orr.w	r3, r3, #2
 800be1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be1c:	4b4e      	ldr	r3, [pc, #312]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be20:	f003 0302 	and.w	r3, r3, #2
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800be28:	4b4b      	ldr	r3, [pc, #300]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be2c:	4a4a      	ldr	r2, [pc, #296]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be2e:	f043 0304 	orr.w	r3, r3, #4
 800be32:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be34:	4b48      	ldr	r3, [pc, #288]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	613b      	str	r3, [r7, #16]
 800be3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800be40:	4b45      	ldr	r3, [pc, #276]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be44:	4a44      	ldr	r2, [pc, #272]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be46:	f043 0310 	orr.w	r3, r3, #16
 800be4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800be4c:	4b42      	ldr	r3, [pc, #264]	; (800bf58 <SPI_WIFI_MspInit+0x168>)
 800be4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be50:	f003 0310 	and.w	r3, r3, #16
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800be58:	2200      	movs	r2, #0
 800be5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be5e:	483f      	ldr	r0, [pc, #252]	; (800bf5c <SPI_WIFI_MspInit+0x16c>)
 800be60:	f7f8 fa82 	bl	8004368 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800be64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be68:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800be6a:	2301      	movs	r3, #1
 800be6c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800be72:	2300      	movs	r3, #0
 800be74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800be76:	f107 031c 	add.w	r3, r7, #28
 800be7a:	4619      	mov	r1, r3
 800be7c:	4837      	ldr	r0, [pc, #220]	; (800bf5c <SPI_WIFI_MspInit+0x16c>)
 800be7e:	f7f7 ffbd 	bl	8003dfc <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800be82:	2302      	movs	r3, #2
 800be84:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800be86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800be8a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800be8c:	2300      	movs	r3, #0
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800be90:	2300      	movs	r3, #0
 800be92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800be94:	f107 031c 	add.w	r3, r7, #28
 800be98:	4619      	mov	r1, r3
 800be9a:	4831      	ldr	r0, [pc, #196]	; (800bf60 <SPI_WIFI_MspInit+0x170>)
 800be9c:	f7f7 ffae 	bl	8003dfc <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800bea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bea4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800bea6:	2301      	movs	r3, #1
 800bea8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800beae:	2300      	movs	r3, #0
 800beb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800beb6:	f107 031c 	add.w	r3, r7, #28
 800beba:	4619      	mov	r1, r3
 800bebc:	4828      	ldr	r0, [pc, #160]	; (800bf60 <SPI_WIFI_MspInit+0x170>)
 800bebe:	f7f7 ff9d 	bl	8003dfc <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800bec2:	2201      	movs	r2, #1
 800bec4:	2101      	movs	r1, #1
 800bec6:	4826      	ldr	r0, [pc, #152]	; (800bf60 <SPI_WIFI_MspInit+0x170>)
 800bec8:	f7f8 fa4e 	bl	8004368 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800becc:	2301      	movs	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800bed0:	2301      	movs	r3, #1
 800bed2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bed4:	2300      	movs	r3, #0
 800bed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bed8:	2301      	movs	r3, #1
 800beda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800bedc:	f107 031c 	add.w	r3, r7, #28
 800bee0:	4619      	mov	r1, r3
 800bee2:	481f      	ldr	r0, [pc, #124]	; (800bf60 <SPI_WIFI_MspInit+0x170>)
 800bee4:	f7f7 ff8a 	bl	8003dfc <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800bee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beec:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800beee:	2302      	movs	r3, #2
 800bef0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bef6:	2301      	movs	r3, #1
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800befa:	2306      	movs	r3, #6
 800befc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800befe:	f107 031c 	add.w	r3, r7, #28
 800bf02:	4619      	mov	r1, r3
 800bf04:	4817      	ldr	r0, [pc, #92]	; (800bf64 <SPI_WIFI_MspInit+0x174>)
 800bf06:	f7f7 ff79 	bl	8003dfc <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800bf0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf0e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800bf10:	2302      	movs	r3, #2
 800bf12:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800bf1c:	2306      	movs	r3, #6
 800bf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800bf20:	f107 031c 	add.w	r3, r7, #28
 800bf24:	4619      	mov	r1, r3
 800bf26:	480f      	ldr	r0, [pc, #60]	; (800bf64 <SPI_WIFI_MspInit+0x174>)
 800bf28:	f7f7 ff68 	bl	8003dfc <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800bf2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf30:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800bf32:	2302      	movs	r3, #2
 800bf34:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800bf36:	2301      	movs	r3, #1
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800bf3e:	2306      	movs	r3, #6
 800bf40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800bf42:	f107 031c 	add.w	r3, r7, #28
 800bf46:	4619      	mov	r1, r3
 800bf48:	4806      	ldr	r0, [pc, #24]	; (800bf64 <SPI_WIFI_MspInit+0x174>)
 800bf4a:	f7f7 ff57 	bl	8003dfc <HAL_GPIO_Init>
}
 800bf4e:	bf00      	nop
 800bf50:	3730      	adds	r7, #48	; 0x30
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	40021000 	.word	0x40021000
 800bf5c:	48000400 	.word	0x48000400
 800bf60:	48001000 	.word	0x48001000
 800bf64:	48000800 	.word	0x48000800

0800bf68 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	4603      	mov	r3, r0
 800bf70:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d145      	bne.n	800c008 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800bf7c:	4b27      	ldr	r3, [pc, #156]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bf7e:	4a28      	ldr	r2, [pc, #160]	; (800c020 <SPI_WIFI_Init+0xb8>)
 800bf80:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800bf82:	4826      	ldr	r0, [pc, #152]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bf84:	f7ff ff34 	bl	800bdf0 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800bf88:	4b24      	ldr	r3, [pc, #144]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bf8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bf8e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800bf90:	4b22      	ldr	r3, [pc, #136]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800bf96:	4b21      	ldr	r3, [pc, #132]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bf98:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800bf9c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800bf9e:	4b1f      	ldr	r3, [pc, #124]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800bfa4:	4b1d      	ldr	r3, [pc, #116]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800bfaa:	4b1c      	ldr	r3, [pc, #112]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfb0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800bfb2:	4b1a      	ldr	r3, [pc, #104]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800bfb8:	4b18      	ldr	r3, [pc, #96]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800bfbe:	4b17      	ldr	r3, [pc, #92]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800bfc4:	4b15      	ldr	r3, [pc, #84]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800bfca:	4b14      	ldr	r3, [pc, #80]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800bfd0:	4812      	ldr	r0, [pc, #72]	; (800c01c <SPI_WIFI_Init+0xb4>)
 800bfd2:	f7fb f8bb 	bl	800714c <HAL_SPI_Init>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800bfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe0:	e018      	b.n	800c014 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	2007      	movs	r0, #7
 800bfe8:	f7f7 fd37 	bl	8003a5a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800bfec:	2007      	movs	r0, #7
 800bfee:	f7f7 fd50 	bl	8003a92 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800bff2:	2200      	movs	r2, #0
 800bff4:	2100      	movs	r1, #0
 800bff6:	2033      	movs	r0, #51	; 0x33
 800bff8:	f7f7 fd2f 	bl	8003a5a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800bffc:	2033      	movs	r0, #51	; 0x33
 800bffe:	f7f7 fd48 	bl	8003a92 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800c002:	200a      	movs	r0, #10
 800c004:	f000 f9fe 	bl	800c404 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800c008:	f000 f80c 	bl	800c024 <SPI_WIFI_ResetModule>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]

  return rc;
 800c010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	200010cc 	.word	0x200010cc
 800c020:	40003c00 	.word	0x40003c00

0800c024 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800c02a:	f7f7 fbe7 	bl	80037fc <HAL_GetTick>
 800c02e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800c034:	2200      	movs	r2, #0
 800c036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c03a:	4830      	ldr	r0, [pc, #192]	; (800c0fc <SPI_WIFI_ResetModule+0xd8>)
 800c03c:	f7f8 f994 	bl	8004368 <HAL_GPIO_WritePin>
 800c040:	200a      	movs	r0, #10
 800c042:	f7f7 fbe7 	bl	8003814 <HAL_Delay>
 800c046:	2201      	movs	r2, #1
 800c048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c04c:	482b      	ldr	r0, [pc, #172]	; (800c0fc <SPI_WIFI_ResetModule+0xd8>)
 800c04e:	f7f8 f98b 	bl	8004368 <HAL_GPIO_WritePin>
 800c052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c056:	f7f7 fbdd 	bl	8003814 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800c05a:	2200      	movs	r2, #0
 800c05c:	2101      	movs	r1, #1
 800c05e:	4827      	ldr	r0, [pc, #156]	; (800c0fc <SPI_WIFI_ResetModule+0xd8>)
 800c060:	f7f8 f982 	bl	8004368 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800c064:	200f      	movs	r0, #15
 800c066:	f000 f9cd 	bl	800c404 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800c06a:	e020      	b.n	800c0ae <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	463a      	mov	r2, r7
 800c070:	18d1      	adds	r1, r2, r3
 800c072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c076:	2201      	movs	r2, #1
 800c078:	4821      	ldr	r0, [pc, #132]	; (800c100 <SPI_WIFI_ResetModule+0xdc>)
 800c07a:	f7fb f932 	bl	80072e2 <HAL_SPI_Receive>
 800c07e:	4603      	mov	r3, r0
 800c080:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	3302      	adds	r3, #2
 800c086:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800c088:	f7f7 fbb8 	bl	80037fc <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c096:	d202      	bcs.n	800c09e <SPI_WIFI_ResetModule+0x7a>
 800c098:	79fb      	ldrb	r3, [r7, #7]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d007      	beq.n	800c0ae <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800c09e:	2201      	movs	r2, #1
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4816      	ldr	r0, [pc, #88]	; (800c0fc <SPI_WIFI_ResetModule+0xd8>)
 800c0a4:	f7f8 f960 	bl	8004368 <HAL_GPIO_WritePin>
      return -1;
 800c0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ac:	e021      	b.n	800c0f2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800c0ae:	2102      	movs	r1, #2
 800c0b0:	4812      	ldr	r0, [pc, #72]	; (800c0fc <SPI_WIFI_ResetModule+0xd8>)
 800c0b2:	f7f8 f941 	bl	8004338 <HAL_GPIO_ReadPin>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d0d7      	beq.n	800c06c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800c0bc:	2201      	movs	r2, #1
 800c0be:	2101      	movs	r1, #1
 800c0c0:	480e      	ldr	r0, [pc, #56]	; (800c0fc <SPI_WIFI_ResetModule+0xd8>)
 800c0c2:	f7f8 f951 	bl	8004368 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800c0c6:	783b      	ldrb	r3, [r7, #0]
 800c0c8:	2b15      	cmp	r3, #21
 800c0ca:	d10e      	bne.n	800c0ea <SPI_WIFI_ResetModule+0xc6>
 800c0cc:	787b      	ldrb	r3, [r7, #1]
 800c0ce:	2b15      	cmp	r3, #21
 800c0d0:	d10b      	bne.n	800c0ea <SPI_WIFI_ResetModule+0xc6>
 800c0d2:	78bb      	ldrb	r3, [r7, #2]
 800c0d4:	2b0d      	cmp	r3, #13
 800c0d6:	d108      	bne.n	800c0ea <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800c0d8:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800c0da:	2b0a      	cmp	r3, #10
 800c0dc:	d105      	bne.n	800c0ea <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800c0de:	793b      	ldrb	r3, [r7, #4]
 800c0e0:	2b3e      	cmp	r3, #62	; 0x3e
 800c0e2:	d102      	bne.n	800c0ea <SPI_WIFI_ResetModule+0xc6>
 800c0e4:	797b      	ldrb	r3, [r7, #5]
 800c0e6:	2b20      	cmp	r3, #32
 800c0e8:	d002      	beq.n	800c0f0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ee:	e000      	b.n	800c0f2 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	48001000 	.word	0x48001000
 800c100:	200010cc 	.word	0x200010cc

0800c104 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800c108:	4802      	ldr	r0, [pc, #8]	; (800c114 <SPI_WIFI_DeInit+0x10>)
 800c10a:	f7fb f8c2 	bl	8007292 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	bd80      	pop	{r7, pc}
 800c114:	200010cc 	.word	0x200010cc

0800c118 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800c120:	f7f7 fb6c 	bl	80037fc <HAL_GetTick>
 800c124:	4603      	mov	r3, r0
 800c126:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800c128:	e00a      	b.n	800c140 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800c12a:	f7f7 fb67 	bl	80037fc <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	1ad2      	subs	r2, r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	429a      	cmp	r2, r3
 800c138:	d902      	bls.n	800c140 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800c13a:	f04f 33ff 	mov.w	r3, #4294967295
 800c13e:	e007      	b.n	800c150 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800c140:	2102      	movs	r1, #2
 800c142:	4805      	ldr	r0, [pc, #20]	; (800c158 <wait_cmddata_rdy_high+0x40>)
 800c144:	f7f8 f8f8 	bl	8004338 <HAL_GPIO_ReadPin>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d1ed      	bne.n	800c12a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	48001000 	.word	0x48001000

0800c15c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800c164:	f7f7 fb4a 	bl	80037fc <HAL_GetTick>
 800c168:	4603      	mov	r3, r0
 800c16a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800c16c:	e00a      	b.n	800c184 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800c16e:	f7f7 fb45 	bl	80037fc <HAL_GetTick>
 800c172:	4602      	mov	r2, r0
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	1ad2      	subs	r2, r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d902      	bls.n	800c184 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800c17e:	f04f 33ff 	mov.w	r3, #4294967295
 800c182:	e004      	b.n	800c18e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800c184:	4b04      	ldr	r3, [pc, #16]	; (800c198 <wait_cmddata_rdy_rising_event+0x3c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d0f0      	beq.n	800c16e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800c18c:	2300      	movs	r3, #0
#endif
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20001138 	.word	0x20001138

0800c19c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800c1a4:	f7f7 fb2a 	bl	80037fc <HAL_GetTick>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800c1ac:	e00a      	b.n	800c1c4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800c1ae:	f7f7 fb25 	bl	80037fc <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	1ad2      	subs	r2, r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d902      	bls.n	800c1c4 <wait_spi_rx_event+0x28>
    {
      return -1;
 800c1be:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c2:	e004      	b.n	800c1ce <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800c1c4:	4b04      	ldr	r3, [pc, #16]	; (800c1d8 <wait_spi_rx_event+0x3c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d0f0      	beq.n	800c1ae <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800c1cc:	2300      	movs	r3, #0
#endif
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20001130 	.word	0x20001130

0800c1dc <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800c1e4:	f7f7 fb0a 	bl	80037fc <HAL_GetTick>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800c1ec:	e00a      	b.n	800c204 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800c1ee:	f7f7 fb05 	bl	80037fc <HAL_GetTick>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	1ad2      	subs	r2, r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d902      	bls.n	800c204 <wait_spi_tx_event+0x28>
    {
      return -1;
 800c1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c202:	e004      	b.n	800c20e <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <wait_spi_tx_event+0x3c>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d0f0      	beq.n	800c1ee <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800c20c:	2300      	movs	r3, #0
#endif
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20001134 	.word	0x20001134

0800c21c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	460b      	mov	r3, r1
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800c22e:	2201      	movs	r2, #1
 800c230:	2101      	movs	r1, #1
 800c232:	4834      	ldr	r0, [pc, #208]	; (800c304 <SPI_WIFI_ReceiveData+0xe8>)
 800c234:	f7f8 f898 	bl	8004368 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800c238:	2003      	movs	r0, #3
 800c23a:	f000 f8e3 	bl	800c404 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff ff8b 	bl	800c15c <wait_cmddata_rdy_rising_event>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	da02      	bge.n	800c252 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800c24c:	f06f 0302 	mvn.w	r3, #2
 800c250:	e054      	b.n	800c2fc <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800c252:	2200      	movs	r2, #0
 800c254:	2101      	movs	r1, #1
 800c256:	482b      	ldr	r0, [pc, #172]	; (800c304 <SPI_WIFI_ReceiveData+0xe8>)
 800c258:	f7f8 f886 	bl	8004368 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800c25c:	200f      	movs	r0, #15
 800c25e:	f000 f8d1 	bl	800c404 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800c262:	e03d      	b.n	800c2e0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800c264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c268:	897b      	ldrh	r3, [r7, #10]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	db02      	blt.n	800c274 <SPI_WIFI_ReceiveData+0x58>
 800c26e:	897b      	ldrh	r3, [r7, #10]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d13c      	bne.n	800c2ee <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800c274:	4b24      	ldr	r3, [pc, #144]	; (800c308 <SPI_WIFI_ReceiveData+0xec>)
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800c27a:	f107 0314 	add.w	r3, r7, #20
 800c27e:	2201      	movs	r2, #1
 800c280:	4619      	mov	r1, r3
 800c282:	4822      	ldr	r0, [pc, #136]	; (800c30c <SPI_WIFI_ReceiveData+0xf0>)
 800c284:	f7fb fc12 	bl	8007aac <HAL_SPI_Receive_IT>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d007      	beq.n	800c29e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800c28e:	2201      	movs	r2, #1
 800c290:	2101      	movs	r1, #1
 800c292:	481c      	ldr	r0, [pc, #112]	; (800c304 <SPI_WIFI_ReceiveData+0xe8>)
 800c294:	f7f8 f868 	bl	8004368 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
 800c29c:	e02e      	b.n	800c2fc <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff ff7b 	bl	800c19c <wait_spi_rx_event>

      pData[0] = tmp[0];
 800c2a6:	7d3a      	ldrb	r2, [r7, #20]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	7d7a      	ldrb	r2, [r7, #21]
 800c2b2:	701a      	strb	r2, [r3, #0]
      length += 2;
 800c2b4:	8afb      	ldrh	r3, [r7, #22]
 800c2b6:	3302      	adds	r3, #2
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3302      	adds	r3, #2
 800c2c0:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800c2c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c2c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c2ca:	db09      	blt.n	800c2e0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	480c      	ldr	r0, [pc, #48]	; (800c304 <SPI_WIFI_ReceiveData+0xe8>)
 800c2d2:	f7f8 f849 	bl	8004368 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800c2d6:	f7ff fea5 	bl	800c024 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800c2da:	f06f 0303 	mvn.w	r3, #3
 800c2de:	e00d      	b.n	800c2fc <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800c2e0:	2102      	movs	r1, #2
 800c2e2:	4808      	ldr	r0, [pc, #32]	; (800c304 <SPI_WIFI_ReceiveData+0xe8>)
 800c2e4:	f7f8 f828 	bl	8004338 <HAL_GPIO_ReadPin>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d0ba      	beq.n	800c264 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	4804      	ldr	r0, [pc, #16]	; (800c304 <SPI_WIFI_ReceiveData+0xe8>)
 800c2f4:	f7f8 f838 	bl	8004368 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800c2f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	48001000 	.word	0x48001000
 800c308:	20001130 	.word	0x20001130
 800c30c:	200010cc 	.word	0x200010cc

0800c310 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	460b      	mov	r3, r1
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4618      	mov	r0, r3
 800c322:	f7ff fef9 	bl	800c118 <wait_cmddata_rdy_high>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	da02      	bge.n	800c332 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800c32c:	f04f 33ff 	mov.w	r3, #4294967295
 800c330:	e04f      	b.n	800c3d2 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800c332:	4b2a      	ldr	r3, [pc, #168]	; (800c3dc <SPI_WIFI_SendData+0xcc>)
 800c334:	2201      	movs	r2, #1
 800c336:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800c338:	2200      	movs	r2, #0
 800c33a:	2101      	movs	r1, #1
 800c33c:	4828      	ldr	r0, [pc, #160]	; (800c3e0 <SPI_WIFI_SendData+0xd0>)
 800c33e:	f7f8 f813 	bl	8004368 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800c342:	200f      	movs	r0, #15
 800c344:	f000 f85e 	bl	800c404 <SPI_WIFI_DelayUs>
  if (len > 1)
 800c348:	897b      	ldrh	r3, [r7, #10]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d919      	bls.n	800c382 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800c34e:	4b25      	ldr	r3, [pc, #148]	; (800c3e4 <SPI_WIFI_SendData+0xd4>)
 800c350:	2201      	movs	r2, #1
 800c352:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800c354:	897b      	ldrh	r3, [r7, #10]
 800c356:	085b      	lsrs	r3, r3, #1
 800c358:	b29b      	uxth	r3, r3
 800c35a:	461a      	mov	r2, r3
 800c35c:	68f9      	ldr	r1, [r7, #12]
 800c35e:	4822      	ldr	r0, [pc, #136]	; (800c3e8 <SPI_WIFI_SendData+0xd8>)
 800c360:	f7fb fb18 	bl	8007994 <HAL_SPI_Transmit_IT>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d007      	beq.n	800c37a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800c36a:	2201      	movs	r2, #1
 800c36c:	2101      	movs	r1, #1
 800c36e:	481c      	ldr	r0, [pc, #112]	; (800c3e0 <SPI_WIFI_SendData+0xd0>)
 800c370:	f7f7 fffa 	bl	8004368 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800c374:	f04f 33ff 	mov.w	r3, #4294967295
 800c378:	e02b      	b.n	800c3d2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ff2d 	bl	800c1dc <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800c382:	897b      	ldrh	r3, [r7, #10]
 800c384:	f003 0301 	and.w	r3, r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d020      	beq.n	800c3ce <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800c38c:	897b      	ldrh	r3, [r7, #10]
 800c38e:	3b01      	subs	r3, #1
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	4413      	add	r3, r2
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800c398:	230a      	movs	r3, #10
 800c39a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800c39c:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <SPI_WIFI_SendData+0xd4>)
 800c39e:	2201      	movs	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800c3a2:	f107 0314 	add.w	r3, r7, #20
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	480f      	ldr	r0, [pc, #60]	; (800c3e8 <SPI_WIFI_SendData+0xd8>)
 800c3ac:	f7fb faf2 	bl	8007994 <HAL_SPI_Transmit_IT>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d007      	beq.n	800c3c6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	4809      	ldr	r0, [pc, #36]	; (800c3e0 <SPI_WIFI_SendData+0xd0>)
 800c3bc:	f7f7 ffd4 	bl	8004368 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800c3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c4:	e005      	b.n	800c3d2 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff ff07 	bl	800c1dc <wait_spi_tx_event>
    
  }
  return len;
 800c3ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3718      	adds	r7, #24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20001138 	.word	0x20001138
 800c3e0:	48001000 	.word	0x48001000
 800c3e4:	20001134 	.word	0x20001134
 800c3e8:	200010cc 	.word	0x200010cc

0800c3ec <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7f7 fa0d 	bl	8003814 <HAL_Delay>
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
	...

0800c404 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800c414:	4b20      	ldr	r3, [pc, #128]	; (800c498 <SPI_WIFI_DelayUs+0x94>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d122      	bne.n	800c462 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800c41c:	4b1f      	ldr	r3, [pc, #124]	; (800c49c <SPI_WIFI_DelayUs+0x98>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a1f      	ldr	r2, [pc, #124]	; (800c4a0 <SPI_WIFI_DelayUs+0x9c>)
 800c422:	fba2 2303 	umull	r2, r3, r2, r3
 800c426:	099b      	lsrs	r3, r3, #6
 800c428:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800c432:	f7f7 f9e3 	bl	80037fc <HAL_GetTick>
 800c436:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800c438:	e002      	b.n	800c440 <SPI_WIFI_DelayUs+0x3c>
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	60bb      	str	r3, [r7, #8]
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1f9      	bne.n	800c43a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800c446:	f7f7 f9d9 	bl	80037fc <HAL_GetTick>
 800c44a:	4602      	mov	r2, r0
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	4a11      	ldr	r2, [pc, #68]	; (800c498 <SPI_WIFI_DelayUs+0x94>)
 800c452:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800c454:	4b10      	ldr	r3, [pc, #64]	; (800c498 <SPI_WIFI_DelayUs+0x94>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d102      	bne.n	800c462 <SPI_WIFI_DelayUs+0x5e>
 800c45c:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <SPI_WIFI_DelayUs+0x94>)
 800c45e:	2201      	movs	r2, #1
 800c460:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800c462:	4b0e      	ldr	r3, [pc, #56]	; (800c49c <SPI_WIFI_DelayUs+0x98>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a0f      	ldr	r2, [pc, #60]	; (800c4a4 <SPI_WIFI_DelayUs+0xa0>)
 800c468:	fba2 2303 	umull	r2, r3, r2, r3
 800c46c:	0c9a      	lsrs	r2, r3, #18
 800c46e:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <SPI_WIFI_DelayUs+0x94>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	fbb2 f3f3 	udiv	r3, r2, r3
 800c476:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	697a      	ldr	r2, [r7, #20]
 800c47c:	fb02 f303 	mul.w	r3, r2, r3
 800c480:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800c482:	e002      	b.n	800c48a <SPI_WIFI_DelayUs+0x86>
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	3b01      	subs	r3, #1
 800c488:	60bb      	str	r3, [r7, #8]
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1f9      	bne.n	800c484 <SPI_WIFI_DelayUs+0x80>
  return;
 800c490:	bf00      	nop
}
 800c492:	3718      	adds	r7, #24
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	2000113c 	.word	0x2000113c
 800c49c:	200000ac 	.word	0x200000ac
 800c4a0:	10624dd3 	.word	0x10624dd3
 800c4a4:	431bde83 	.word	0x431bde83

0800c4a8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800c4b0:	4b06      	ldr	r3, [pc, #24]	; (800c4cc <HAL_SPI_RxCpltCallback+0x24>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800c4b8:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <HAL_SPI_RxCpltCallback+0x24>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
  }
}
 800c4be:	bf00      	nop
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20001130 	.word	0x20001130

0800c4d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800c4d8:	4b06      	ldr	r3, [pc, #24]	; (800c4f4 <HAL_SPI_TxCpltCallback+0x24>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800c4e0:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <HAL_SPI_TxCpltCallback+0x24>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
  }
}
 800c4e6:	bf00      	nop
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20001134 	.word	0x20001134

0800c4f8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800c4fc:	4b05      	ldr	r3, [pc, #20]	; (800c514 <SPI_WIFI_ISR+0x1c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d102      	bne.n	800c50a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800c504:	4b03      	ldr	r3, [pc, #12]	; (800c514 <SPI_WIFI_ISR+0x1c>)
 800c506:	2200      	movs	r2, #0
 800c508:	601a      	str	r2, [r3, #0]
   }
}
 800c50a:	bf00      	nop
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20001138 	.word	0x20001138

0800c518 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800c522:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <WIFI_Init+0x40>)
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	4b0d      	ldr	r3, [pc, #52]	; (800c55c <WIFI_Init+0x44>)
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	4b0d      	ldr	r3, [pc, #52]	; (800c560 <WIFI_Init+0x48>)
 800c52c:	4a0d      	ldr	r2, [pc, #52]	; (800c564 <WIFI_Init+0x4c>)
 800c52e:	490e      	ldr	r1, [pc, #56]	; (800c568 <WIFI_Init+0x50>)
 800c530:	480e      	ldr	r0, [pc, #56]	; (800c56c <WIFI_Init+0x54>)
 800c532:	f7ff f8c3 	bl	800b6bc <ES_WIFI_RegisterBusIO>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d107      	bne.n	800c54c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800c53c:	480b      	ldr	r0, [pc, #44]	; (800c56c <WIFI_Init+0x54>)
 800c53e:	f7ff f88f 	bl	800b660 <ES_WIFI_Init>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d101      	bne.n	800c54c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800c54c:	79fb      	ldrb	r3, [r7, #7]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	0800c21d 	.word	0x0800c21d
 800c55c:	0800c311 	.word	0x0800c311
 800c560:	0800c3ed 	.word	0x0800c3ed
 800c564:	0800c105 	.word	0x0800c105
 800c568:	0800bf69 	.word	0x0800bf69
 800c56c:	20001140 	.word	0x20001140

0800c570 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4613      	mov	r3, r2
 800c57c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800c582:	79fb      	ldrb	r3, [r7, #7]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	4809      	ldr	r0, [pc, #36]	; (800c5b0 <WIFI_Connect+0x40>)
 800c58a:	f7ff f8cb 	bl	800b724 <ES_WIFI_Connect>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d107      	bne.n	800c5a4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800c594:	4806      	ldr	r0, [pc, #24]	; (800c5b0 <WIFI_Connect+0x40>)
 800c596:	f7ff f969 	bl	800b86c <ES_WIFI_GetNetworkSettings>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d101      	bne.n	800c5a4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20001140 	.word	0x20001140

0800c5b4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	4806      	ldr	r0, [pc, #24]	; (800c5dc <WIFI_GetMAC_Address+0x28>)
 800c5c4:	f7ff f97c 	bl	800b8c0 <ES_WIFI_GetMACAddress>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20001140 	.word	0x20001140

0800c5e0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800c5ec:	4809      	ldr	r0, [pc, #36]	; (800c614 <WIFI_GetIP_Address+0x34>)
 800c5ee:	f7ff f911 	bl	800b814 <ES_WIFI_IsConnected>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d107      	bne.n	800c608 <WIFI_GetIP_Address+0x28>
 800c5f8:	4b06      	ldr	r3, [pc, #24]	; (800c614 <WIFI_GetIP_Address+0x34>)
 800c5fa:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800c5fe:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20001140 	.word	0x20001140

0800c618 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08a      	sub	sp, #40	; 0x28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	607a      	str	r2, [r7, #4]
 800c622:	603b      	str	r3, [r7, #0]
 800c624:	460b      	mov	r3, r1
 800c626:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800c634:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c636:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800c638:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c63a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800c63c:	7afb      	ldrb	r3, [r7, #11]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bf14      	ite	ne
 800c642:	2301      	movne	r3, #1
 800c644:	2300      	moveq	r3, #0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	785b      	ldrb	r3, [r3, #1]
 800c654:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	789b      	ldrb	r3, [r3, #2]
 800c65a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	78db      	ldrb	r3, [r3, #3]
 800c660:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800c662:	f107 0310 	add.w	r3, r7, #16
 800c666:	4619      	mov	r1, r3
 800c668:	4807      	ldr	r0, [pc, #28]	; (800c688 <WIFI_OpenClientConnection+0x70>)
 800c66a:	f7ff f95b 	bl	800b924 <ES_WIFI_StartClientConnection>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800c674:	2300      	movs	r3, #0
 800c676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800c67a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3728      	adds	r7, #40	; 0x28
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20001140 	.word	0x20001140

0800c68c <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08a      	sub	sp, #40	; 0x28
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t startTime;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <sendMessageVector+0x2c>
 800c6aa:	4b66      	ldr	r3, [pc, #408]	; (800c844 <sendMessageVector+0x1b8>)
 800c6ac:	4a66      	ldr	r2, [pc, #408]	; (800c848 <sendMessageVector+0x1bc>)
 800c6ae:	f240 3107 	movw	r1, #775	; 0x307
 800c6b2:	4866      	ldr	r0, [pc, #408]	; (800c84c <sendMessageVector+0x1c0>)
 800c6b4:	f007 f89a 	bl	80137ec <__assert_func>
    assert( pIoVec != NULL );
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d106      	bne.n	800c6cc <sendMessageVector+0x40>
 800c6be:	4b64      	ldr	r3, [pc, #400]	; (800c850 <sendMessageVector+0x1c4>)
 800c6c0:	4a61      	ldr	r2, [pc, #388]	; (800c848 <sendMessageVector+0x1bc>)
 800c6c2:	f44f 7142 	mov.w	r1, #776	; 0x308
 800c6c6:	4861      	ldr	r0, [pc, #388]	; (800c84c <sendMessageVector+0x1c0>)
 800c6c8:	f007 f890 	bl	80137ec <__assert_func>
    assert( pContext->getTime != NULL );
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d106      	bne.n	800c6e2 <sendMessageVector+0x56>
 800c6d4:	4b5f      	ldr	r3, [pc, #380]	; (800c854 <sendMessageVector+0x1c8>)
 800c6d6:	4a5c      	ldr	r2, [pc, #368]	; (800c848 <sendMessageVector+0x1bc>)
 800c6d8:	f240 3109 	movw	r1, #777	; 0x309
 800c6dc:	485b      	ldr	r0, [pc, #364]	; (800c84c <sendMessageVector+0x1c0>)
 800c6de:	f007 f885 	bl	80137ec <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d106      	bne.n	800c6f8 <sendMessageVector+0x6c>
 800c6ea:	4b5b      	ldr	r3, [pc, #364]	; (800c858 <sendMessageVector+0x1cc>)
 800c6ec:	4a56      	ldr	r2, [pc, #344]	; (800c848 <sendMessageVector+0x1bc>)
 800c6ee:	f240 310b 	movw	r1, #779	; 0x30b
 800c6f2:	4856      	ldr	r0, [pc, #344]	; (800c84c <sendMessageVector+0x1c0>)
 800c6f4:	f007 f87a 	bl	80137ec <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	623b      	str	r3, [r7, #32]
 800c6fc:	e007      	b.n	800c70e <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	4413      	add	r3, r2
 800c706:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800c708:	6a3b      	ldr	r3, [r7, #32]
 800c70a:	3308      	adds	r3, #8
 800c70c:	623b      	str	r3, [r7, #32]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c714:	3b01      	subs	r3, #1
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	4413      	add	r3, r2
 800c71c:	6a3a      	ldr	r2, [r7, #32]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d9ed      	bls.n	800c6fe <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	623b      	str	r3, [r7, #32]

    /* Note the start time. */
    startTime = pContext->getTime();
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72a:	4798      	blx	r3
 800c72c:	6138      	str	r0, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c72e:	e079      	b.n	800c824 <sendMessageVector+0x198>
    {
        if( pContext->transportInterface.writev != NULL )
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d008      	beq.n	800c74a <sendMessageVector+0xbe>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	69d0      	ldr	r0, [r2, #28]
 800c740:	69fa      	ldr	r2, [r7, #28]
 800c742:	6a39      	ldr	r1, [r7, #32]
 800c744:	4798      	blx	r3
 800c746:	6278      	str	r0, [r7, #36]	; 0x24
 800c748:	e009      	b.n	800c75e <sendMessageVector+0xd2>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	69d0      	ldr	r0, [r2, #28]
 800c752:	6a3a      	ldr	r2, [r7, #32]
 800c754:	6811      	ldr	r1, [r2, #0]
 800c756:	6a3a      	ldr	r2, [r7, #32]
 800c758:	6852      	ldr	r2, [r2, #4]
 800c75a:	4798      	blx	r3
 800c75c:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	2b00      	cmp	r3, #0
 800c762:	dd17      	ble.n	800c794 <sendMessageVector+0x108>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800c764:	69ba      	ldr	r2, [r7, #24]
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76c:	429a      	cmp	r2, r3
 800c76e:	dd06      	ble.n	800c77e <sendMessageVector+0xf2>
 800c770:	4b3a      	ldr	r3, [pc, #232]	; (800c85c <sendMessageVector+0x1d0>)
 800c772:	4a35      	ldr	r2, [pc, #212]	; (800c848 <sendMessageVector+0x1bc>)
 800c774:	f44f 714b 	mov.w	r1, #812	; 0x32c
 800c778:	4834      	ldr	r0, [pc, #208]	; (800c84c <sendMessageVector+0x1c0>)
 800c77a:	f007 f837 	bl	80137ec <__assert_func>

            bytesSentOrError += sendResult;
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	4413      	add	r3, r2
 800c784:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78a:	4798      	blx	r3
 800c78c:	4602      	mov	r2, r0
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	635a      	str	r2, [r3, #52]	; 0x34
 800c792:	e004      	b.n	800c79e <sendMessageVector+0x112>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	2b00      	cmp	r3, #0
 800c798:	da01      	bge.n	800c79e <sendMessageVector+0x112>
        {
            bytesSentOrError = sendResult;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( calculateElapsedTime( pContext->getTime(), startTime ) > MQTT_SEND_TIMEOUT_MS )
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a2:	4798      	blx	r3
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	6939      	ldr	r1, [r7, #16]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 f8e7 	bl	800c97c <calculateElapsedTime>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d83e      	bhi.n	800c836 <sendMessageVector+0x1aa>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800c7b8:	e00b      	b.n	800c7d2 <sendMessageVector+0x146>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	4413      	add	r3, r2
 800c7e0:	6a3a      	ldr	r2, [r7, #32]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d805      	bhi.n	800c7f2 <sendMessageVector+0x166>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	dae3      	bge.n	800c7ba <sendMessageVector+0x12e>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dd15      	ble.n	800c824 <sendMessageVector+0x198>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c7fe:	3b01      	subs	r3, #1
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800c806:	6a3a      	ldr	r2, [r7, #32]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d80b      	bhi.n	800c824 <sendMessageVector+0x198>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	441a      	add	r2, r3
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800c818:	6a3b      	ldr	r3, [r7, #32]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81e:	1ad2      	subs	r2, r2, r3
 800c820:	6a3b      	ldr	r3, [r7, #32]
 800c822:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	429a      	cmp	r2, r3
 800c82a:	da05      	bge.n	800c838 <sendMessageVector+0x1ac>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f6bf af7e 	bge.w	800c730 <sendMessageVector+0xa4>
 800c834:	e000      	b.n	800c838 <sendMessageVector+0x1ac>
            break;
 800c836:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800c838:	697b      	ldr	r3, [r7, #20]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3728      	adds	r7, #40	; 0x28
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	08019164 	.word	0x08019164
 800c848:	08019c74 	.word	0x08019c74
 800c84c:	08019088 	.word	0x08019088
 800c850:	08019178 	.word	0x08019178
 800c854:	08019188 	.word	0x08019188
 800c858:	080191a4 	.word	0x080191a4
 800c85c:	080191d0 	.word	0x080191d0

0800c860 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <sendBuffer+0x28>
 800c87a:	4b39      	ldr	r3, [pc, #228]	; (800c960 <sendBuffer+0x100>)
 800c87c:	4a39      	ldr	r2, [pc, #228]	; (800c964 <sendBuffer+0x104>)
 800c87e:	f44f 715a 	mov.w	r1, #872	; 0x368
 800c882:	4839      	ldr	r0, [pc, #228]	; (800c968 <sendBuffer+0x108>)
 800c884:	f006 ffb2 	bl	80137ec <__assert_func>
    assert( pContext->getTime != NULL );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <sendBuffer+0x3e>
 800c890:	4b36      	ldr	r3, [pc, #216]	; (800c96c <sendBuffer+0x10c>)
 800c892:	4a34      	ldr	r2, [pc, #208]	; (800c964 <sendBuffer+0x104>)
 800c894:	f240 3169 	movw	r1, #873	; 0x369
 800c898:	4833      	ldr	r0, [pc, #204]	; (800c968 <sendBuffer+0x108>)
 800c89a:	f006 ffa7 	bl	80137ec <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <sendBuffer+0x54>
 800c8a6:	4b32      	ldr	r3, [pc, #200]	; (800c970 <sendBuffer+0x110>)
 800c8a8:	4a2e      	ldr	r2, [pc, #184]	; (800c964 <sendBuffer+0x104>)
 800c8aa:	f240 316a 	movw	r1, #874	; 0x36a
 800c8ae:	482e      	ldr	r0, [pc, #184]	; (800c968 <sendBuffer+0x108>)
 800c8b0:	f006 ff9c 	bl	80137ec <__assert_func>
    assert( pIndex != NULL );
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <sendBuffer+0x68>
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <sendBuffer+0x114>)
 800c8bc:	4a29      	ldr	r2, [pc, #164]	; (800c964 <sendBuffer+0x104>)
 800c8be:	f240 316b 	movw	r1, #875	; 0x36b
 800c8c2:	4829      	ldr	r0, [pc, #164]	; (800c968 <sendBuffer+0x108>)
 800c8c4:	f006 ff92 	bl	80137ec <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	4798      	blx	r3
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800c8d4:	3320      	adds	r3, #32
 800c8d6:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c8d8:	e034      	b.n	800c944 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800c8e2:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	1a8a      	subs	r2, r1, r2
 800c8e8:	69b9      	ldr	r1, [r7, #24]
 800c8ea:	4798      	blx	r3
 800c8ec:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dd1b      	ble.n	800c92c <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	dd06      	ble.n	800c90e <sendBuffer+0xae>
 800c900:	4b1d      	ldr	r3, [pc, #116]	; (800c978 <sendBuffer+0x118>)
 800c902:	4a18      	ldr	r2, [pc, #96]	; (800c964 <sendBuffer+0x104>)
 800c904:	f240 317a 	movw	r1, #890	; 0x37a
 800c908:	4817      	ldr	r0, [pc, #92]	; (800c968 <sendBuffer+0x108>)
 800c90a:	f006 ff6f 	bl	80137ec <__assert_func>

            bytesSentOrError += sendResult;
 800c90e:	69fa      	ldr	r2, [r7, #28]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	4413      	add	r3, r2
 800c914:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	69ba      	ldr	r2, [r7, #24]
 800c91a:	4413      	add	r3, r2
 800c91c:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c922:	4798      	blx	r3
 800c924:	4602      	mov	r2, r0
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	635a      	str	r2, [r3, #52]	; 0x34
 800c92a:	e004      	b.n	800c936 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da01      	bge.n	800c936 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93a:	4798      	blx	r3
 800c93c:	4602      	mov	r2, r0
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	4293      	cmp	r3, r2
 800c942:	d907      	bls.n	800c954 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	69fa      	ldr	r2, [r7, #28]
 800c948:	429a      	cmp	r2, r3
 800c94a:	da04      	bge.n	800c956 <sendBuffer+0xf6>
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dac3      	bge.n	800c8da <sendBuffer+0x7a>
 800c952:	e000      	b.n	800c956 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800c954:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800c956:	69fb      	ldr	r3, [r7, #28]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3720      	adds	r7, #32
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	08019164 	.word	0x08019164
 800c964:	08019c88 	.word	0x08019c88
 800c968:	08019088 	.word	0x08019088
 800c96c:	08019188 	.word	0x08019188
 800c970:	080191a4 	.word	0x080191a4
 800c974:	08019210 	.word	0x08019210
 800c978:	080191d0 	.word	0x080191d0

0800c97c <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
    return later - start;
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	1ad3      	subs	r3, r2, r3
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800c9a6:	79fb      	ldrb	r3, [r7, #7]
 800c9a8:	2b62      	cmp	r3, #98	; 0x62
 800c9aa:	d00c      	beq.n	800c9c6 <getAckFromPacketType+0x2e>
 800c9ac:	2b62      	cmp	r3, #98	; 0x62
 800c9ae:	dc0d      	bgt.n	800c9cc <getAckFromPacketType+0x34>
 800c9b0:	2b40      	cmp	r3, #64	; 0x40
 800c9b2:	d002      	beq.n	800c9ba <getAckFromPacketType+0x22>
 800c9b4:	2b50      	cmp	r3, #80	; 0x50
 800c9b6:	d003      	beq.n	800c9c0 <getAckFromPacketType+0x28>
 800c9b8:	e008      	b.n	800c9cc <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	73fb      	strb	r3, [r7, #15]
            break;
 800c9be:	e012      	b.n	800c9e6 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	73fb      	strb	r3, [r7, #15]
            break;
 800c9c4:	e00f      	b.n	800c9e6 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	73fb      	strb	r3, [r7, #15]
            break;
 800c9ca:	e00c      	b.n	800c9e6 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800c9cc:	79fb      	ldrb	r3, [r7, #7]
 800c9ce:	2b70      	cmp	r3, #112	; 0x70
 800c9d0:	d006      	beq.n	800c9e0 <getAckFromPacketType+0x48>
 800c9d2:	4b07      	ldr	r3, [pc, #28]	; (800c9f0 <getAckFromPacketType+0x58>)
 800c9d4:	4a07      	ldr	r2, [pc, #28]	; (800c9f4 <getAckFromPacketType+0x5c>)
 800c9d6:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800c9da:	4807      	ldr	r0, [pc, #28]	; (800c9f8 <getAckFromPacketType+0x60>)
 800c9dc:	f006 ff06 	bl	80137ec <__assert_func>
            ackType = MQTTPubcomp;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	73fb      	strb	r3, [r7, #15]
            break;
 800c9e4:	bf00      	nop
    }

    return ackType;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	08019220 	.word	0x08019220
 800c9f4:	08019c94 	.word	0x08019c94
 800c9f8:	08019088 	.word	0x08019088

0800c9fc <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08c      	sub	sp, #48	; 0x30
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	623b      	str	r3, [r7, #32]
 800ca16:	2300      	movs	r3, #0
 800ca18:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800ca22:	2300      	movs	r3, #0
 800ca24:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d106      	bne.n	800ca3a <recvExact+0x3e>
 800ca2c:	4b44      	ldr	r3, [pc, #272]	; (800cb40 <recvExact+0x144>)
 800ca2e:	4a45      	ldr	r2, [pc, #276]	; (800cb44 <recvExact+0x148>)
 800ca30:	f240 31d1 	movw	r1, #977	; 0x3d1
 800ca34:	4844      	ldr	r0, [pc, #272]	; (800cb48 <recvExact+0x14c>)
 800ca36:	f006 fed9 	bl	80137ec <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d906      	bls.n	800ca52 <recvExact+0x56>
 800ca44:	4b41      	ldr	r3, [pc, #260]	; (800cb4c <recvExact+0x150>)
 800ca46:	4a3f      	ldr	r2, [pc, #252]	; (800cb44 <recvExact+0x148>)
 800ca48:	f240 31d2 	movw	r1, #978	; 0x3d2
 800ca4c:	483e      	ldr	r0, [pc, #248]	; (800cb48 <recvExact+0x14c>)
 800ca4e:	f006 fecd 	bl	80137ec <__assert_func>
    assert( pContext->getTime != NULL );
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <recvExact+0x6c>
 800ca5a:	4b3d      	ldr	r3, [pc, #244]	; (800cb50 <recvExact+0x154>)
 800ca5c:	4a39      	ldr	r2, [pc, #228]	; (800cb44 <recvExact+0x148>)
 800ca5e:	f240 31d3 	movw	r1, #979	; 0x3d3
 800ca62:	4839      	ldr	r0, [pc, #228]	; (800cb48 <recvExact+0x14c>)
 800ca64:	f006 fec2 	bl	80137ec <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d106      	bne.n	800ca7e <recvExact+0x82>
 800ca70:	4b38      	ldr	r3, [pc, #224]	; (800cb54 <recvExact+0x158>)
 800ca72:	4a34      	ldr	r2, [pc, #208]	; (800cb44 <recvExact+0x148>)
 800ca74:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800ca78:	4833      	ldr	r0, [pc, #204]	; (800cb48 <recvExact+0x14c>)
 800ca7a:	f006 feb7 	bl	80137ec <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d106      	bne.n	800ca94 <recvExact+0x98>
 800ca86:	4b34      	ldr	r3, [pc, #208]	; (800cb58 <recvExact+0x15c>)
 800ca88:	4a2e      	ldr	r2, [pc, #184]	; (800cb44 <recvExact+0x148>)
 800ca8a:	f240 31d5 	movw	r1, #981	; 0x3d5
 800ca8e:	482e      	ldr	r0, [pc, #184]	; (800cb48 <recvExact+0x14c>)
 800ca90:	f006 feac 	bl	80137ec <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a1b      	ldr	r3, [r3, #32]
 800ca98:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	4798      	blx	r3
 800caaa:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800caac:	e039      	b.n	800cb22 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	69d8      	ldr	r0, [r3, #28]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cab8:	4798      	blx	r3
 800caba:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	da04      	bge.n	800cacc <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800cac6:	2301      	movs	r3, #1
 800cac8:	77fb      	strb	r3, [r7, #31]
 800caca:	e02a      	b.n	800cb22 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dd1a      	ble.n	800cb08 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	4798      	blx	r3
 800cad6:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cadc:	429a      	cmp	r2, r3
 800cade:	d206      	bcs.n	800caee <recvExact+0xf2>
 800cae0:	4b1e      	ldr	r3, [pc, #120]	; (800cb5c <recvExact+0x160>)
 800cae2:	4a18      	ldr	r2, [pc, #96]	; (800cb44 <recvExact+0x148>)
 800cae4:	f240 31f5 	movw	r1, #1013	; 0x3f5
 800cae8:	4817      	ldr	r0, [pc, #92]	; (800cb48 <recvExact+0x14c>)
 800caea:	f006 fe7f 	bl	80137ec <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800caf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	4413      	add	r3, r2
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb02:	4413      	add	r3, r2
 800cb04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb06:	e00c      	b.n	800cb22 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	4798      	blx	r3
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	6a39      	ldr	r1, [r7, #32]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7ff ff33 	bl	800c97c <calculateElapsedTime>
 800cb16:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b09      	cmp	r3, #9
 800cb1c:	d901      	bls.n	800cb22 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <recvExact+0x138>
 800cb28:	7ffb      	ldrb	r3, [r7, #31]
 800cb2a:	f083 0301 	eor.w	r3, r3, #1
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1bc      	bne.n	800caae <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3730      	adds	r7, #48	; 0x30
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	08019164 	.word	0x08019164
 800cb44:	08019cac 	.word	0x08019cac
 800cb48:	08019088 	.word	0x08019088
 800cb4c:	08019248 	.word	0x08019248
 800cb50:	08019188 	.word	0x08019188
 800cb54:	08019274 	.word	0x08019274
 800cb58:	080192a0 	.word	0x080192a0
 800cb5c:	080192c8 	.word	0x080192c8

0800cb60 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b08c      	sub	sp, #48	; 0x30
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800cb6c:	2304      	movs	r3, #4
 800cb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d106      	bne.n	800cba4 <discardPacket+0x44>
 800cb96:	4b2f      	ldr	r3, [pc, #188]	; (800cc54 <discardPacket+0xf4>)
 800cb98:	4a2f      	ldr	r2, [pc, #188]	; (800cc58 <discardPacket+0xf8>)
 800cb9a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800cb9e:	482f      	ldr	r0, [pc, #188]	; (800cc5c <discardPacket+0xfc>)
 800cba0:	f006 fe24 	bl	80137ec <__assert_func>
    assert( pContext->getTime != NULL );
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d106      	bne.n	800cbba <discardPacket+0x5a>
 800cbac:	4b2c      	ldr	r3, [pc, #176]	; (800cc60 <discardPacket+0x100>)
 800cbae:	4a2a      	ldr	r2, [pc, #168]	; (800cc58 <discardPacket+0xf8>)
 800cbb0:	f240 4121 	movw	r1, #1057	; 0x421
 800cbb4:	4829      	ldr	r0, [pc, #164]	; (800cc5c <discardPacket+0xfc>)
 800cbb6:	f006 fe19 	bl	80137ec <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbe:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc4:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	4798      	blx	r3
 800cbca:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800cbcc:	e029      	b.n	800cc22 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d903      	bls.n	800cbe2 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800cbe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f7ff ff09 	bl	800c9fc <recvExact>
 800cbea:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	69fa      	ldr	r2, [r7, #28]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d003      	beq.n	800cbfc <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cbfa:	e012      	b.n	800cc22 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc00:	4413      	add	r3, r2
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	4798      	blx	r3
 800cc08:	4603      	mov	r3, r0
 800cc0a:	69b9      	ldr	r1, [r7, #24]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff feb5 	bl	800c97c <calculateElapsedTime>
 800cc12:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d302      	bcc.n	800cc22 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800cc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d206      	bcs.n	800cc38 <discardPacket+0xd8>
 800cc2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc2e:	f083 0301 	eor.w	r3, r3, #1
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1ca      	bne.n	800cbce <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800cc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d102      	bne.n	800cc46 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800cc40:	2307      	movs	r3, #7
 800cc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800cc46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3730      	adds	r7, #48	; 0x30
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	08019164 	.word	0x08019164
 800cc58:	08019cb8 	.word	0x08019cb8
 800cc5c:	08019088 	.word	0x08019088
 800cc60:	08019188 	.word	0x08019188

0800cc64 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b08a      	sub	sp, #40	; 0x28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800cc6e:	2304      	movs	r3, #4
 800cc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800cc80:	2300      	movs	r3, #0
 800cc82:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <discardStoredPacket+0x38>
 800cc8e:	4b34      	ldr	r3, [pc, #208]	; (800cd60 <discardStoredPacket+0xfc>)
 800cc90:	4a34      	ldr	r2, [pc, #208]	; (800cd64 <discardStoredPacket+0x100>)
 800cc92:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800cc96:	4834      	ldr	r0, [pc, #208]	; (800cd68 <discardStoredPacket+0x104>)
 800cc98:	f006 fda8 	bl	80137ec <__assert_func>
    assert( pPacketInfo != NULL );
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d106      	bne.n	800ccb0 <discardStoredPacket+0x4c>
 800cca2:	4b32      	ldr	r3, [pc, #200]	; (800cd6c <discardStoredPacket+0x108>)
 800cca4:	4a2f      	ldr	r2, [pc, #188]	; (800cd64 <discardStoredPacket+0x100>)
 800cca6:	f240 4161 	movw	r1, #1121	; 0x461
 800ccaa:	482f      	ldr	r0, [pc, #188]	; (800cd68 <discardStoredPacket+0x104>)
 800ccac:	f006 fd9e 	bl	80137ec <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	689a      	ldr	r2, [r3, #8]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	4413      	add	r3, r2
 800ccba:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d806      	bhi.n	800ccd4 <discardStoredPacket+0x70>
 800ccc6:	4b2a      	ldr	r3, [pc, #168]	; (800cd70 <discardStoredPacket+0x10c>)
 800ccc8:	4a26      	ldr	r2, [pc, #152]	; (800cd64 <discardStoredPacket+0x100>)
 800ccca:	f240 4167 	movw	r1, #1127	; 0x467
 800ccce:	4826      	ldr	r0, [pc, #152]	; (800cd68 <discardStoredPacket+0x104>)
 800ccd0:	f006 fd8c 	bl	80137ec <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800cce4:	e019      	b.n	800cd1a <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	6a3a      	ldr	r2, [r7, #32]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d903      	bls.n	800ccfa <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800ccfa:	6a39      	ldr	r1, [r7, #32]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff fe7d 	bl	800c9fc <recvExact>
 800cd02:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d002      	beq.n	800cd12 <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	76fb      	strb	r3, [r7, #27]
 800cd10:	e003      	b.n	800cd1a <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	4413      	add	r3, r2
 800cd18:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800cd1a:	69fa      	ldr	r2, [r7, #28]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d205      	bcs.n	800cd2e <discardStoredPacket+0xca>
 800cd22:	7efb      	ldrb	r3, [r7, #27]
 800cd24:	f083 0301 	eor.w	r3, r3, #1
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1db      	bne.n	800cce6 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800cd2e:	69fa      	ldr	r2, [r7, #28]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d102      	bne.n	800cd3c <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800cd36:	2307      	movs	r3, #7
 800cd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a18      	ldr	r0, [r3, #32]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	461a      	mov	r2, r3
 800cd46:	2100      	movs	r1, #0
 800cd48:	f007 ff0e 	bl	8014b68 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800cd52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3728      	adds	r7, #40	; 0x28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	08019164 	.word	0x08019164
 800cd64:	08019cc8 	.word	0x08019cc8
 800cd68:	08019088 	.word	0x08019088
 800cd6c:	080192f0 	.word	0x080192f0
 800cd70:	08019304 	.word	0x08019304

0800cd74 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800cd74:	b084      	sub	sp, #16
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b086      	sub	sp, #24
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cd82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800cd86:	2300      	movs	r3, #0
 800cd88:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <receivePacket+0x32>
 800cd98:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <receivePacket+0x90>)
 800cd9a:	4a1b      	ldr	r2, [pc, #108]	; (800ce08 <receivePacket+0x94>)
 800cd9c:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800cda0:	481a      	ldr	r0, [pc, #104]	; (800ce0c <receivePacket+0x98>)
 800cda2:	f006 fd23 	bl	80137ec <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a1b      	ldr	r3, [r3, #32]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d106      	bne.n	800cdbc <receivePacket+0x48>
 800cdae:	4b18      	ldr	r3, [pc, #96]	; (800ce10 <receivePacket+0x9c>)
 800cdb0:	4a15      	ldr	r2, [pc, #84]	; (800ce08 <receivePacket+0x94>)
 800cdb2:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800cdb6:	4815      	ldr	r0, [pc, #84]	; (800ce0c <receivePacket+0x98>)
 800cdb8:	f006 fd18 	bl	80137ec <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800cdbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d908      	bls.n	800cdd8 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fec7 	bl	800cb60 <discardPacket>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]
 800cdd6:	e00c      	b.n	800cdf2 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800cddc:	68f9      	ldr	r1, [r7, #12]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fe0c 	bl	800c9fc <recvExact>
 800cde4:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d001      	beq.n	800cdf2 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800cdee:	2304      	movs	r3, #4
 800cdf0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3718      	adds	r7, #24
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdfe:	b004      	add	sp, #16
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	08019164 	.word	0x08019164
 800ce08:	08019cdc 	.word	0x08019cdc
 800ce0c:	08019088 	.word	0x08019088
 800ce10:	080192a0 	.word	0x080192a0

0800ce14 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	3b02      	subs	r3, #2
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d816      	bhi.n	800ce58 <getAckTypeToSend+0x44>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <getAckTypeToSend+0x1c>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce41 	.word	0x0800ce41
 800ce34:	0800ce47 	.word	0x0800ce47
 800ce38:	0800ce4d 	.word	0x0800ce4d
 800ce3c:	0800ce53 	.word	0x0800ce53
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	73fb      	strb	r3, [r7, #15]
            break;
 800ce44:	e009      	b.n	800ce5a <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800ce46:	2350      	movs	r3, #80	; 0x50
 800ce48:	73fb      	strb	r3, [r7, #15]
            break;
 800ce4a:	e006      	b.n	800ce5a <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800ce4c:	2362      	movs	r3, #98	; 0x62
 800ce4e:	73fb      	strb	r3, [r7, #15]
            break;
 800ce50:	e003      	b.n	800ce5a <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800ce52:	2370      	movs	r3, #112	; 0x70
 800ce54:	73fb      	strb	r3, [r7, #15]
            break;
 800ce56:	e000      	b.n	800ce5a <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800ce58:	bf00      	nop
    }

    return packetTypeByte;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b08a      	sub	sp, #40	; 0x28
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	807b      	strh	r3, [r7, #2]
 800ce74:	4613      	mov	r3, r2
 800ce76:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800ce88:	f107 0308 	add.w	r3, r7, #8
 800ce8c:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800ce8e:	2304      	movs	r3, #4
 800ce90:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <sendPublishAcks+0x3e>
 800ce98:	4b21      	ldr	r3, [pc, #132]	; (800cf20 <sendPublishAcks+0xb8>)
 800ce9a:	4a22      	ldr	r2, [pc, #136]	; (800cf24 <sendPublishAcks+0xbc>)
 800ce9c:	f240 5101 	movw	r1, #1281	; 0x501
 800cea0:	4821      	ldr	r0, [pc, #132]	; (800cf28 <sendPublishAcks+0xc0>)
 800cea2:	f006 fca3 	bl	80137ec <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800cea6:	787b      	ldrb	r3, [r7, #1]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff ffb3 	bl	800ce14 <getAckTypeToSend>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d02d      	beq.n	800cf14 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800ceb8:	7dfb      	ldrb	r3, [r7, #23]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff fd6c 	bl	800c998 <getAckFromPacketType>
 800cec0:	4603      	mov	r3, r0
 800cec2:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800cec4:	887a      	ldrh	r2, [r7, #2]
 800cec6:	7df9      	ldrb	r1, [r7, #23]
 800cec8:	f107 030c 	add.w	r3, r7, #12
 800cecc:	4618      	mov	r0, r3
 800cece:	f002 f8e3 	bl	800f098 <MQTT_SerializeAck>
 800ced2:	4603      	mov	r3, r0
 800ced4:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800ced6:	7ffb      	ldrb	r3, [r7, #31]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800cedc:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800cede:	2204      	movs	r2, #4
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff fcbc 	bl	800c860 <sendBuffer>
 800cee8:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	2b04      	cmp	r3, #4
 800ceee:	d10f      	bne.n	800cf10 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800cef8:	7dba      	ldrb	r2, [r7, #22]
 800cefa:	8879      	ldrh	r1, [r7, #2]
 800cefc:	f107 0315 	add.w	r3, r7, #21
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	2300      	movs	r3, #0
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f002 ff93 	bl	800fe30 <MQTT_UpdateStateAck>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	77fb      	strb	r3, [r7, #31]
 800cf0e:	e001      	b.n	800cf14 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800cf10:	2303      	movs	r3, #3
 800cf12:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800cf14:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3720      	adds	r7, #32
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	08019164 	.word	0x08019164
 800cf24:	08019cec 	.word	0x08019cec
 800cf28:	08019088 	.word	0x08019088

0800cf2c <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800cf34:	2300      	movs	r3, #0
 800cf36:	77fb      	strb	r3, [r7, #31]
    uint32_t now = 0U;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	617b      	str	r3, [r7, #20]
    uint32_t packetTxTimeoutMs = 0U;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	61bb      	str	r3, [r7, #24]
    uint32_t lastPacketTxTime = 0U;
 800cf40:	2300      	movs	r3, #0
 800cf42:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d106      	bne.n	800cf58 <handleKeepAlive+0x2c>
 800cf4a:	4b33      	ldr	r3, [pc, #204]	; (800d018 <handleKeepAlive+0xec>)
 800cf4c:	4a33      	ldr	r2, [pc, #204]	; (800d01c <handleKeepAlive+0xf0>)
 800cf4e:	f240 5144 	movw	r1, #1348	; 0x544
 800cf52:	4833      	ldr	r0, [pc, #204]	; (800d020 <handleKeepAlive+0xf4>)
 800cf54:	f006 fc4a 	bl	80137ec <__assert_func>
    assert( pContext->getTime != NULL );
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <handleKeepAlive+0x42>
 800cf60:	4b30      	ldr	r3, [pc, #192]	; (800d024 <handleKeepAlive+0xf8>)
 800cf62:	4a2e      	ldr	r2, [pc, #184]	; (800d01c <handleKeepAlive+0xf0>)
 800cf64:	f240 5145 	movw	r1, #1349	; 0x545
 800cf68:	482d      	ldr	r0, [pc, #180]	; (800d020 <handleKeepAlive+0xf4>)
 800cf6a:	f006 fc3f 	bl	80137ec <__assert_func>

    now = pContext->getTime();
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	4798      	blx	r3
 800cf74:	6178      	str	r0, [r7, #20]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf82:	fb02 f303 	mul.w	r3, r2, r3
 800cf86:	61bb      	str	r3, [r7, #24]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	f247 5230 	movw	r2, #30000	; 0x7530
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d902      	bls.n	800cf98 <handleKeepAlive+0x6c>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800cf92:	f247 5330 	movw	r3, #30000	; 0x7530
 800cf96:	61bb      	str	r3, [r7, #24]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00d      	beq.n	800cfbe <handleKeepAlive+0x92>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6978      	ldr	r0, [r7, #20]
 800cfaa:	f7ff fce7 	bl	800c97c <calculateElapsedTime>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d92a      	bls.n	800d00e <handleKeepAlive+0xe2>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800cfb8:	230a      	movs	r3, #10
 800cfba:	77fb      	strb	r3, [r7, #31]
 800cfbc:	e027      	b.n	800d00e <handleKeepAlive+0xe2>
        }
    }
    else
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );
        lastPacketTxTime = pContext->lastPacketTxTime;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc2:	613b      	str	r3, [r7, #16]
        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00d      	beq.n	800cfe6 <handleKeepAlive+0xba>
 800cfca:	6939      	ldr	r1, [r7, #16]
 800cfcc:	6978      	ldr	r0, [r7, #20]
 800cfce:	f7ff fcd5 	bl	800c97c <calculateElapsedTime>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d805      	bhi.n	800cfe6 <handleKeepAlive+0xba>
        {
            status = MQTT_Ping( pContext );
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f001 f8a2 	bl	800e124 <MQTT_Ping>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	77fb      	strb	r3, [r7, #31]
 800cfe4:	e013      	b.n	800d00e <handleKeepAlive+0xe2>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfea:	4619      	mov	r1, r3
 800cfec:	6978      	ldr	r0, [r7, #20]
 800cfee:	f7ff fcc5 	bl	800c97c <calculateElapsedTime>
 800cff2:	60f8      	str	r0, [r7, #12]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d009      	beq.n	800d00e <handleKeepAlive+0xe2>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f247 522f 	movw	r2, #29999	; 0x752f
 800d000:	4293      	cmp	r3, r2
 800d002:	d904      	bls.n	800d00e <handleKeepAlive+0xe2>
            {
                status = MQTT_Ping( pContext );
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 f88d 	bl	800e124 <MQTT_Ping>
 800d00a:	4603      	mov	r3, r0
 800d00c:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    return status;
 800d00e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3720      	adds	r7, #32
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	08019164 	.word	0x08019164
 800d01c:	08019cfc 	.word	0x08019cfc
 800d020:	08019088 	.word	0x08019088
 800d024:	08019188 	.word	0x08019188

0800d028 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08e      	sub	sp, #56	; 0x38
 800d02c:	af02      	add	r7, sp, #8
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800d032:	2301      	movs	r3, #1
 800d034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800d038:	2300      	movs	r3, #0
 800d03a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800d03e:	2300      	movs	r3, #0
 800d040:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800d042:	2300      	movs	r3, #0
 800d044:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d106      	bne.n	800d05c <handleIncomingPublish+0x34>
 800d04e:	4b43      	ldr	r3, [pc, #268]	; (800d15c <handleIncomingPublish+0x134>)
 800d050:	4a43      	ldr	r2, [pc, #268]	; (800d160 <handleIncomingPublish+0x138>)
 800d052:	f240 517e 	movw	r1, #1406	; 0x57e
 800d056:	4843      	ldr	r0, [pc, #268]	; (800d164 <handleIncomingPublish+0x13c>)
 800d058:	f006 fbc8 	bl	80137ec <__assert_func>
    assert( pIncomingPacket != NULL );
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <handleIncomingPublish+0x48>
 800d062:	4b41      	ldr	r3, [pc, #260]	; (800d168 <handleIncomingPublish+0x140>)
 800d064:	4a3e      	ldr	r2, [pc, #248]	; (800d160 <handleIncomingPublish+0x138>)
 800d066:	f240 517f 	movw	r1, #1407	; 0x57f
 800d06a:	483e      	ldr	r0, [pc, #248]	; (800d164 <handleIncomingPublish+0x13c>)
 800d06c:	f006 fbbe 	bl	80137ec <__assert_func>
    assert( pContext->appCallback != NULL );
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d074:	2b00      	cmp	r3, #0
 800d076:	d106      	bne.n	800d086 <handleIncomingPublish+0x5e>
 800d078:	4b3c      	ldr	r3, [pc, #240]	; (800d16c <handleIncomingPublish+0x144>)
 800d07a:	4a39      	ldr	r2, [pc, #228]	; (800d160 <handleIncomingPublish+0x138>)
 800d07c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800d080:	4838      	ldr	r0, [pc, #224]	; (800d164 <handleIncomingPublish+0x13c>)
 800d082:	f006 fbb3 	bl	80137ec <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800d086:	f107 0214 	add.w	r2, r7, #20
 800d08a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d08e:	4619      	mov	r1, r3
 800d090:	6838      	ldr	r0, [r7, #0]
 800d092:	f002 f898 	bl	800f1c6 <MQTT_DeserializePublish>
 800d096:	4603      	mov	r3, r0
 800d098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800d09c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d109      	bne.n	800d0b8 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d105      	bne.n	800d0b8 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800d0ac:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800d0b2:	2304      	movs	r3, #4
 800d0b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800d0b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d122      	bne.n	800d106 <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800d0c0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800d0c2:	7d3a      	ldrb	r2, [r7, #20]
 800d0c4:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f002 fe3b 	bl	800fd4a <MQTT_UpdateStatePublish>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800d0da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d011      	beq.n	800d106 <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800d0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0e6:	2b09      	cmp	r3, #9
 800d0e8:	d10d      	bne.n	800d106 <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800d0f6:	7d3b      	ldrb	r3, [r7, #20]
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	f002 fdf6 	bl	800fcec <MQTT_CalculateStatePublish>
 800d100:	4603      	mov	r3, r0
 800d102:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800d106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d11f      	bne.n	800d14e <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800d10e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d110:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800d112:	f107 0314 	add.w	r3, r7, #20
 800d116:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800d118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d11c:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800d11e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d122:	f083 0301 	eor.w	r3, r3, #1
 800d126:	b2db      	uxtb	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d130:	f107 0208 	add.w	r2, r7, #8
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800d13a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d13c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7ff fe90 	bl	800ce68 <sendPublishAcks>
 800d148:	4603      	mov	r3, r0
 800d14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800d14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d152:	4618      	mov	r0, r3
 800d154:	3730      	adds	r7, #48	; 0x30
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	08019164 	.word	0x08019164
 800d160:	08019d0c 	.word	0x08019d0c
 800d164:	08019088 	.word	0x08019088
 800d168:	08019334 	.word	0x08019334
 800d16c:	0801934c 	.word	0x0801934c

0800d170 <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08a      	sub	sp, #40	; 0x28
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800d17a:	2305      	movs	r3, #5
 800d17c:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800d17e:	2300      	movs	r3, #0
 800d180:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <handlePublishAcks+0x26>
 800d188:	4b2c      	ldr	r3, [pc, #176]	; (800d23c <handlePublishAcks+0xcc>)
 800d18a:	4a2d      	ldr	r2, [pc, #180]	; (800d240 <handlePublishAcks+0xd0>)
 800d18c:	f240 51ff 	movw	r1, #1535	; 0x5ff
 800d190:	482c      	ldr	r0, [pc, #176]	; (800d244 <handlePublishAcks+0xd4>)
 800d192:	f006 fb2b 	bl	80137ec <__assert_func>
    assert( pIncomingPacket != NULL );
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <handlePublishAcks+0x3a>
 800d19c:	4b2a      	ldr	r3, [pc, #168]	; (800d248 <handlePublishAcks+0xd8>)
 800d19e:	4a28      	ldr	r2, [pc, #160]	; (800d240 <handlePublishAcks+0xd0>)
 800d1a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d1a4:	4827      	ldr	r0, [pc, #156]	; (800d244 <handlePublishAcks+0xd4>)
 800d1a6:	f006 fb21 	bl	80137ec <__assert_func>
    assert( pContext->appCallback != NULL );
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d106      	bne.n	800d1c0 <handlePublishAcks+0x50>
 800d1b2:	4b26      	ldr	r3, [pc, #152]	; (800d24c <handlePublishAcks+0xdc>)
 800d1b4:	4a22      	ldr	r2, [pc, #136]	; (800d240 <handlePublishAcks+0xd0>)
 800d1b6:	f240 6101 	movw	r1, #1537	; 0x601
 800d1ba:	4822      	ldr	r0, [pc, #136]	; (800d244 <handlePublishAcks+0xd4>)
 800d1bc:	f006 fb16 	bl	80137ec <__assert_func>

    appCallback = pContext->appCallback;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c4:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff fbe4 	bl	800c998 <getAckFromPacketType>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	2200      	movs	r2, #0
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6838      	ldr	r0, [r7, #0]
 800d1de:	f002 f822 	bl	800f226 <MQTT_DeserializeAck>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800d1e6:	7ffb      	ldrb	r3, [r7, #31]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10a      	bne.n	800d202 <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800d1ec:	8ab9      	ldrh	r1, [r7, #20]
 800d1ee:	7dfa      	ldrb	r2, [r7, #23]
 800d1f0:	f107 0316 	add.w	r3, r7, #22
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f002 fe19 	bl	800fe30 <MQTT_UpdateStateAck>
 800d1fe:	4603      	mov	r3, r0
 800d200:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800d202:	7ffb      	ldrb	r3, [r7, #31]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d113      	bne.n	800d230 <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800d208:	8abb      	ldrh	r3, [r7, #20]
 800d20a:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800d20c:	7ffb      	ldrb	r3, [r7, #31]
 800d20e:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800d214:	f107 0208 	add.w	r2, r7, #8
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800d220:	8abb      	ldrh	r3, [r7, #20]
 800d222:	7dba      	ldrb	r2, [r7, #22]
 800d224:	4619      	mov	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff fe1e 	bl	800ce68 <sendPublishAcks>
 800d22c:	4603      	mov	r3, r0
 800d22e:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800d230:	7ffb      	ldrb	r3, [r7, #31]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	08019164 	.word	0x08019164
 800d240:	08019d24 	.word	0x08019d24
 800d244:	08019088 	.word	0x08019088
 800d248:	08019334 	.word	0x08019334
 800d24c:	0801934c 	.word	0x0801934c

0800d250 <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b08a      	sub	sp, #40	; 0x28
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	4613      	mov	r3, r2
 800d25c:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800d25e:	2305      	movs	r3, #5
 800d260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800d264:	2300      	movs	r3, #0
 800d266:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800d268:	2300      	movs	r3, #0
 800d26a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <handleIncomingAck+0x36>
 800d278:	4b54      	ldr	r3, [pc, #336]	; (800d3cc <handleIncomingAck+0x17c>)
 800d27a:	4a55      	ldr	r2, [pc, #340]	; (800d3d0 <handleIncomingAck+0x180>)
 800d27c:	f240 614a 	movw	r1, #1610	; 0x64a
 800d280:	4854      	ldr	r0, [pc, #336]	; (800d3d4 <handleIncomingAck+0x184>)
 800d282:	f006 fab3 	bl	80137ec <__assert_func>
    assert( pIncomingPacket != NULL );
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <handleIncomingAck+0x4a>
 800d28c:	4b52      	ldr	r3, [pc, #328]	; (800d3d8 <handleIncomingAck+0x188>)
 800d28e:	4a50      	ldr	r2, [pc, #320]	; (800d3d0 <handleIncomingAck+0x180>)
 800d290:	f240 614b 	movw	r1, #1611	; 0x64b
 800d294:	484f      	ldr	r0, [pc, #316]	; (800d3d4 <handleIncomingAck+0x184>)
 800d296:	f006 faa9 	bl	80137ec <__assert_func>
    assert( pContext->appCallback != NULL );
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <handleIncomingAck+0x60>
 800d2a2:	4b4e      	ldr	r3, [pc, #312]	; (800d3dc <handleIncomingAck+0x18c>)
 800d2a4:	4a4a      	ldr	r2, [pc, #296]	; (800d3d0 <handleIncomingAck+0x180>)
 800d2a6:	f240 614c 	movw	r1, #1612	; 0x64c
 800d2aa:	484a      	ldr	r0, [pc, #296]	; (800d3d4 <handleIncomingAck+0x184>)
 800d2ac:	f006 fa9e 	bl	80137ec <__assert_func>

    appCallback = pContext->appCallback;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b4:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2bd0      	cmp	r3, #208	; 0xd0
 800d2bc:	d01d      	beq.n	800d2fa <handleIncomingAck+0xaa>
 800d2be:	2bd0      	cmp	r3, #208	; 0xd0
 800d2c0:	dc64      	bgt.n	800d38c <handleIncomingAck+0x13c>
 800d2c2:	2bb0      	cmp	r3, #176	; 0xb0
 800d2c4:	d044      	beq.n	800d350 <handleIncomingAck+0x100>
 800d2c6:	2bb0      	cmp	r3, #176	; 0xb0
 800d2c8:	dc60      	bgt.n	800d38c <handleIncomingAck+0x13c>
 800d2ca:	2b90      	cmp	r3, #144	; 0x90
 800d2cc:	d040      	beq.n	800d350 <handleIncomingAck+0x100>
 800d2ce:	2b90      	cmp	r3, #144	; 0x90
 800d2d0:	dc5c      	bgt.n	800d38c <handleIncomingAck+0x13c>
 800d2d2:	2b70      	cmp	r3, #112	; 0x70
 800d2d4:	d009      	beq.n	800d2ea <handleIncomingAck+0x9a>
 800d2d6:	2b70      	cmp	r3, #112	; 0x70
 800d2d8:	dc58      	bgt.n	800d38c <handleIncomingAck+0x13c>
 800d2da:	2b62      	cmp	r3, #98	; 0x62
 800d2dc:	d005      	beq.n	800d2ea <handleIncomingAck+0x9a>
 800d2de:	2b62      	cmp	r3, #98	; 0x62
 800d2e0:	dc54      	bgt.n	800d38c <handleIncomingAck+0x13c>
 800d2e2:	2b40      	cmp	r3, #64	; 0x40
 800d2e4:	d001      	beq.n	800d2ea <handleIncomingAck+0x9a>
 800d2e6:	2b50      	cmp	r3, #80	; 0x50
 800d2e8:	d150      	bne.n	800d38c <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7ff ff3f 	bl	800d170 <handlePublishAcks>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800d2f8:	e04d      	b.n	800d396 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800d2fa:	f107 031e 	add.w	r3, r7, #30
 800d2fe:	2200      	movs	r2, #0
 800d300:	4619      	mov	r1, r3
 800d302:	68b8      	ldr	r0, [r7, #8]
 800d304:	f001 ff8f 	bl	800f226 <MQTT_DeserializeAck>
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800d30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d312:	2b00      	cmp	r3, #0
 800d314:	d107      	bne.n	800d326 <handleIncomingAck+0xd6>
 800d316:	79fb      	ldrb	r3, [r7, #7]
 800d318:	f083 0301 	eor.w	r3, r3, #1
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <handleIncomingAck+0xd6>
 800d322:	2301      	movs	r3, #1
 800d324:	e000      	b.n	800d328 <handleIncomingAck+0xd8>
 800d326:	2300      	movs	r3, #0
 800d328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d32c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800d338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d129      	bne.n	800d394 <handleIncomingAck+0x144>
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d026      	beq.n	800d394 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800d34e:	e021      	b.n	800d394 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800d350:	f107 031e 	add.w	r3, r7, #30
 800d354:	2200      	movs	r2, #0
 800d356:	4619      	mov	r1, r3
 800d358:	68b8      	ldr	r0, [r7, #8]
 800d35a:	f001 ff64 	bl	800f226 <MQTT_DeserializeAck>
 800d35e:	4603      	mov	r3, r0
 800d360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800d364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <handleIncomingAck+0x124>
 800d36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d370:	2b06      	cmp	r3, #6
 800d372:	d101      	bne.n	800d378 <handleIncomingAck+0x128>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <handleIncomingAck+0x12a>
 800d378:	2300      	movs	r3, #0
 800d37a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d37e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800d38a:	e004      	b.n	800d396 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800d38c:	2305      	movs	r3, #5
 800d38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d392:	e000      	b.n	800d396 <handleIncomingAck+0x146>
            break;
 800d394:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800d396:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00f      	beq.n	800d3be <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800d39e:	8bfb      	ldrh	r3, [r7, #30]
 800d3a0:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800d3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a6:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800d3ac:	f107 0210 	add.w	r2, r7, #16
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	68b9      	ldr	r1, [r7, #8]
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800d3be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3728      	adds	r7, #40	; 0x28
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	08019164 	.word	0x08019164
 800d3d0:	08019d38 	.word	0x08019d38
 800d3d4:	08019088 	.word	0x08019088
 800d3d8:	08019334 	.word	0x08019334
 800d3dc:	0801934c 	.word	0x0801934c

0800d3e0 <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800d3e0:	b590      	push	{r4, r7, lr}
 800d3e2:	b08b      	sub	sp, #44	; 0x2c
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800d3f2:	f107 0308 	add.w	r3, r7, #8
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	605a      	str	r2, [r3, #4]
 800d3fc:	609a      	str	r2, [r3, #8]
 800d3fe:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d106      	bne.n	800d418 <receiveSingleIteration+0x38>
 800d40a:	4b67      	ldr	r3, [pc, #412]	; (800d5a8 <receiveSingleIteration+0x1c8>)
 800d40c:	4a67      	ldr	r2, [pc, #412]	; (800d5ac <receiveSingleIteration+0x1cc>)
 800d40e:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800d412:	4867      	ldr	r0, [pc, #412]	; (800d5b0 <receiveSingleIteration+0x1d0>)
 800d414:	f006 f9ea 	bl	80137ec <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d106      	bne.n	800d42e <receiveSingleIteration+0x4e>
 800d420:	4b64      	ldr	r3, [pc, #400]	; (800d5b4 <receiveSingleIteration+0x1d4>)
 800d422:	4a62      	ldr	r2, [pc, #392]	; (800d5ac <receiveSingleIteration+0x1cc>)
 800d424:	f240 6191 	movw	r1, #1681	; 0x691
 800d428:	4861      	ldr	r0, [pc, #388]	; (800d5b0 <receiveSingleIteration+0x1d0>)
 800d42a:	f006 f9df 	bl	80137ec <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	691b      	ldr	r3, [r3, #16]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	6a11      	ldr	r1, [r2, #32]
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d43e:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800d448:	1a8a      	subs	r2, r1, r2
 800d44a:	4621      	mov	r1, r4
 800d44c:	4798      	blx	r3
 800d44e:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	2b00      	cmp	r3, #0
 800d454:	da03      	bge.n	800d45e <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800d456:	2304      	movs	r3, #4
 800d458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d45c:	e020      	b.n	800d4a0 <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d107      	bne.n	800d474 <receiveSingleIteration+0x94>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800d46c:	2307      	movs	r3, #7
 800d46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d472:	e015      	b.n	800d4a0 <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	441a      	add	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6a18      	ldr	r0, [r3, #32]
                                                          &( pContext->index ),
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800d488:	f107 0208 	add.w	r2, r7, #8
 800d48c:	4619      	mov	r1, r3
 800d48e:	f001 ff83 	bl	800f398 <MQTT_ProcessIncomingPacketTypeAndLength>
 800d492:	4603      	mov	r3, r0
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	4413      	add	r3, r2
 800d49e:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d112      	bne.n	800d4cc <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800d4a6:	78fb      	ldrb	r3, [r7, #3]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00f      	beq.n	800d4cc <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800d4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b0:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fd3a 	bl	800cf2c <handleKeepAlive>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800d4be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d102      	bne.n	800d4cc <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800d4c6:	7efb      	ldrb	r3, [r7, #27]
 800d4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800d4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4d0:	2b0b      	cmp	r3, #11
 800d4d2:	d01e      	beq.n	800d512 <receiveSingleIteration+0x132>
 800d4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4d8:	2b07      	cmp	r3, #7
 800d4da:	d01a      	beq.n	800d512 <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800d4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d116      	bne.n	800d512 <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e8:	6a3a      	ldr	r2, [r7, #32]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d909      	bls.n	800d502 <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800d4ee:	f107 0308 	add.w	r3, r7, #8
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff fbb5 	bl	800cc64 <discardStoredPacket>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d500:	e007      	b.n	800d512 <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d506:	6a3a      	ldr	r2, [r7, #32]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d902      	bls.n	800d512 <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800d50c:	230b      	movs	r3, #11
 800d50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800d512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d516:	2b00      	cmp	r3, #0
 800d518:	d138      	bne.n	800d58c <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1a      	ldr	r2, [r3, #32]
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	4413      	add	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800d524:	7a3b      	ldrb	r3, [r7, #8]
 800d526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d52a:	2b30      	cmp	r3, #48	; 0x30
 800d52c:	d109      	bne.n	800d542 <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800d52e:	f107 0308 	add.w	r3, r7, #8
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff fd77 	bl	800d028 <handleIncomingPublish>
 800d53a:	4603      	mov	r3, r0
 800d53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d540:	e009      	b.n	800d556 <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800d542:	78fa      	ldrb	r2, [r7, #3]
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	4619      	mov	r1, r3
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff fe80 	bl	800d250 <handleIncomingAck>
 800d550:	4603      	mov	r3, r0
 800d552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	1ad2      	subs	r2, r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a1a      	ldr	r2, [r3, #32]
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d572:	461a      	mov	r2, r3
 800d574:	f007 fade 	bl	8014b34 <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800d578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d105      	bne.n	800d58c <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	4798      	blx	r3
 800d586:	4602      	mov	r2, r0
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800d58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d590:	2b07      	cmp	r3, #7
 800d592:	d102      	bne.n	800d59a <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800d594:	2300      	movs	r3, #0
 800d596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800d59a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	372c      	adds	r7, #44	; 0x2c
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd90      	pop	{r4, r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	08019164 	.word	0x08019164
 800d5ac:	08019d4c 	.word	0x08019d4c
 800d5b0:	08019088 	.word	0x08019088
 800d5b4:	080192a0 	.word	0x080192a0

0800d5b8 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b087      	sub	sp, #28
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <validateSubscribeUnsubscribeParams+0x1e>
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	75fb      	strb	r3, [r7, #23]
 800d5da:	e020      	b.n	800d61e <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d102      	bne.n	800d5e8 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	75fb      	strb	r3, [r7, #23]
 800d5e6:	e01a      	b.n	800d61e <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800d5e8:	887b      	ldrh	r3, [r7, #2]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d102      	bne.n	800d5f4 <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	75fb      	strb	r3, [r7, #23]
 800d5f2:	e014      	b.n	800d61e <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d110      	bne.n	800d61e <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	e009      	b.n	800d616 <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800d60a:	2301      	movs	r3, #1
 800d60c:	75fb      	strb	r3, [r7, #23]
                    break;
 800d60e:	e006      	b.n	800d61e <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	3301      	adds	r3, #1
 800d614:	613b      	str	r3, [r7, #16]
 800d616:	693a      	ldr	r2, [r7, #16]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d3f1      	bcc.n	800d602 <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d620:	4618      	mov	r0, r3
 800d622:	371c      	adds	r7, #28
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serializedLength[ CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	603b      	str	r3, [r7, #0]
 800d638:	4613      	mov	r3, r2
 800d63a:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800d63c:	2300      	movs	r3, #0
 800d63e:	61fb      	str	r3, [r7, #28]
    TransportOutVector_t * pLocalIterator = iterator;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	617b      	str	r3, [r7, #20]
    size_t vectorsAdded = 0U;
 800d644:	2300      	movs	r3, #0
 800d646:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) ? ( string != NULL ) : true );
 800d648:	88fb      	ldrh	r3, [r7, #6]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <addEncodedStringToVector+0x36>
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <addEncodedStringToVector+0x36>
 800d654:	4b1e      	ldr	r3, [pc, #120]	; (800d6d0 <addEncodedStringToVector+0xa4>)
 800d656:	4a1f      	ldr	r2, [pc, #124]	; (800d6d4 <addEncodedStringToVector+0xa8>)
 800d658:	f240 7151 	movw	r1, #1873	; 0x751
 800d65c:	481e      	ldr	r0, [pc, #120]	; (800d6d8 <addEncodedStringToVector+0xac>)
 800d65e:	f006 f8c5 	bl	80137ec <__assert_func>

    serializedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800d662:	88fb      	ldrh	r3, [r7, #6]
 800d664:	0a1b      	lsrs	r3, r3, #8
 800d666:	b29b      	uxth	r3, r3
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	701a      	strb	r2, [r3, #0]
    serializedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3301      	adds	r3, #1
 800d672:	88fa      	ldrh	r2, [r7, #6]
 800d674:	b2d2      	uxtb	r2, r2
 800d676:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serializedLength;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	2202      	movs	r2, #2
 800d682:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	3301      	adds	r3, #1
 800d688:	61bb      	str	r3, [r7, #24]
    packetLength = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800d68a:	2302      	movs	r3, #2
 800d68c:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d011      	beq.n	800d6b8 <addEncodedStringToVector+0x8c>
 800d694:	88fb      	ldrh	r3, [r7, #6]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00e      	beq.n	800d6b8 <addEncodedStringToVector+0x8c>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	3308      	adds	r3, #8
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	88fa      	ldrh	r2, [r7, #6]
 800d6a8:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800d6b0:	88fb      	ldrh	r3, [r7, #6]
 800d6b2:	69fa      	ldr	r2, [r7, #28]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	441a      	add	r2, r3
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3720      	adds	r7, #32
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0801936c 	.word	0x0801936c
 800d6d4:	08019d64 	.word	0x08019d64
 800d6d8:	08019088 	.word	0x08019088

0800d6dc <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b09a      	sub	sp, #104	; 0x68
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES ];
    size_t totalPacketLength = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61bb      	str	r3, [r7, #24]
    size_t ioVectorLength = 0U;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	657b      	str	r3, [r7, #84]	; 0x54
    size_t subscriptionsSent = 0U;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	653b      	str	r3, [r7, #80]	; 0x50

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= CORE_MQTT_SUBSCRIBE_PER_TOPIC_VECTOR_LENGTH );

    pIndex = subscribeheader;
 800d6fc:	f107 0310 	add.w	r3, r7, #16
 800d700:	64bb      	str	r3, [r7, #72]	; 0x48
    pIterator = pIoVector;
 800d702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d706:	65bb      	str	r3, [r7, #88]	; 0x58

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800d708:	887b      	ldrh	r3, [r7, #2]
 800d70a:	461a      	mov	r2, r3
 800d70c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d70e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d710:	f001 fc6a 	bl	800efe8 <MQTT_SerializeSubscribeHeader>
 800d714:	64b8      	str	r0, [r7, #72]	; 0x48
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800d716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d718:	f107 0210 	add.w	r2, r7, #16
 800d71c:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800d71e:	f107 0310 	add.w	r3, r7, #16
 800d722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	461a      	mov	r2, r3
 800d728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d72a:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800d72c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	4413      	add	r3, r2
 800d734:	61bb      	str	r3, [r7, #24]
    pIterator++;
 800d736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d738:	3308      	adds	r3, #8
 800d73a:	65bb      	str	r3, [r7, #88]	; 0x58
    ioVectorLength++;
 800d73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d73e:	3301      	adds	r3, #1
 800d740:	657b      	str	r3, [r7, #84]	; 0x54

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800d742:	e062      	b.n	800d80a <sendSubscribeWithoutCopy+0x12e>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - CORE_MQTT_SUBSCRIBE_PER_TOPIC_VECTOR_LENGTH ) ) &&
 800d748:	e043      	b.n	800d7d2 <sendSubscribeWithoutCopy+0xf6>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter and the filter length gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800d74a:	f107 021c 	add.w	r2, r7, #28
 800d74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d750:	005b      	lsls	r3, r3, #1
 800d752:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800d754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d756:	4613      	mov	r3, r2
 800d758:	005b      	lsls	r3, r3, #1
 800d75a:	4413      	add	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	461a      	mov	r2, r3
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	4413      	add	r3, r2
 800d764:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800d766:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d768:	4613      	mov	r3, r2
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	4413      	add	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	461a      	mov	r2, r3
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	4413      	add	r3, r2
 800d776:	891a      	ldrh	r2, [r3, #8]
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800d778:	f107 0318 	add.w	r3, r7, #24
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d780:	f7ff ff54 	bl	800d62c <addEncodedStringToVector>
 800d784:	6478      	str	r0, [r7, #68]	; 0x44
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800d786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d788:	00db      	lsls	r3, r3, #3
 800d78a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d78c:	4413      	add	r3, r2
 800d78e:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800d790:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d792:	4613      	mov	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4413      	add	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	461a      	mov	r2, r3
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	4413      	add	r3, r2
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7a4:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800d7a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800d7ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	61bb      	str	r3, [r7, #24]

            /* Increment the pointer. */
            pIterator++;
 800d7b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7b8:	3308      	adds	r3, #8
 800d7ba:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800d7bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7c0:	4413      	add	r3, r2
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	657b      	str	r3, [r7, #84]	; 0x54

            subscriptionsSent++;
 800d7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	653b      	str	r3, [r7, #80]	; 0x50

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800d7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - CORE_MQTT_SUBSCRIBE_PER_TOPIC_VECTOR_LENGTH ) ) &&
 800d7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d803      	bhi.n	800d7e0 <sendSubscribeWithoutCopy+0x104>
 800d7d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d3b4      	bcc.n	800d74a <sendSubscribeWithoutCopy+0x6e>
        }

        if( sendMessageVector( pContext,
 800d7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f7fe ff4f 	bl	800c68c <sendMessageVector>
 800d7ee:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800d7f0:	69ba      	ldr	r2, [r7, #24]
        if( sendMessageVector( pContext,
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d002      	beq.n	800d7fc <sendSubscribeWithoutCopy+0x120>
        {
            status = MQTTSendFailed;
 800d7f6:	2303      	movs	r3, #3
 800d7f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800d7fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d800:	65bb      	str	r3, [r7, #88]	; 0x58
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800d802:	2300      	movs	r3, #0
 800d804:	657b      	str	r3, [r7, #84]	; 0x54
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	61bb      	str	r3, [r7, #24]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800d80a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d103      	bne.n	800d81a <sendSubscribeWithoutCopy+0x13e>
 800d812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	429a      	cmp	r2, r3
 800d818:	d394      	bcc.n	800d744 <sendSubscribeWithoutCopy+0x68>
    }

    return status;
 800d81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3760      	adds	r7, #96	; 0x60
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b090      	sub	sp, #64	; 0x40
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	607a      	str	r2, [r7, #4]
 800d832:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d834:	2300      	movs	r3, #0
 800d836:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     * Packet ID (only when QoS > QoS0)                    + 1 = 3
     * Payload                                             + 1 = 4  */
    TransportOutVector_t pIoVector[ 4U ];

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	613b      	str	r3, [r7, #16]
    pIoVector[ 0U ].iov_len = headerSize;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	617b      	str	r3, [r7, #20]
    totalMessageLength = headerSize;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	637b      	str	r3, [r7, #52]	; 0x34

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	61bb      	str	r3, [r7, #24]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	891b      	ldrh	r3, [r3, #8]
 800d850:	61fb      	str	r3, [r7, #28]
    totalMessageLength += pPublishInfo->topicNameLength;
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	891b      	ldrh	r3, [r3, #8]
 800d856:	461a      	mov	r2, r3
 800d858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d85a:	4413      	add	r3, r2
 800d85c:	637b      	str	r3, [r7, #52]	; 0x34

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800d85e:	2302      	movs	r3, #2
 800d860:	63bb      	str	r3, [r7, #56]	; 0x38

    if( pPublishInfo->qos > MQTTQoS0 )
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d020      	beq.n	800d8ac <sendPublishWithoutCopy+0x86>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800d86a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d86e:	0a1b      	lsrs	r3, r3, #8
 800d870:	b29b      	uxth	r3, r3
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800d878:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800d882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d884:	00db      	lsls	r3, r3, #3
 800d886:	3340      	adds	r3, #64	; 0x40
 800d888:	443b      	add	r3, r7
 800d88a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d88e:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = sizeof( serializedPacketID );
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	3340      	adds	r3, #64	; 0x40
 800d898:	443b      	add	r3, r7
 800d89a:	2202      	movs	r2, #2
 800d89c:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += sizeof( serializedPacketID );
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	3302      	adds	r3, #2
 800d8aa:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d017      	beq.n	800d8e4 <sendPublishWithoutCopy+0xbe>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	68da      	ldr	r2, [r3, #12]
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	3340      	adds	r3, #64	; 0x40
 800d8be:	443b      	add	r3, r7
 800d8c0:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	691a      	ldr	r2, [r3, #16]
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	3340      	adds	r3, #64	; 0x40
 800d8ce:	443b      	add	r3, r7
 800d8d0:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += pPublishInfo->payloadLength;
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8e0:	4413      	add	r3, r2
 800d8e2:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800d8e4:	f107 0310 	add.w	r3, r7, #16
 800d8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f7fe fecd 	bl	800c68c <sendMessageVector>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d002      	beq.n	800d900 <sendPublishWithoutCopy+0xda>
    {
        status = MQTTSendFailed;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    return status;
 800d900:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d904:	4618      	mov	r0, r3
 800d906:	3740      	adds	r7, #64	; 0x40
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b0ac      	sub	sp, #176	; 0xb0
 800d910:	af02      	add	r7, sp, #8
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d91a:	2300      	movs	r3, #0
 800d91c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800d920:	2300      	movs	r3, #0
 800d922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800d926:	2300      	movs	r3, #0
 800d928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     * Will payload        + 2 = 7
     * Username            + 2 = 9
     * Password            + 2 = 11 */
    TransportOutVector_t pIoVector[ 11U ];

    iterator = pIoVector;
 800d92c:	f107 0310 	add.w	r3, r7, #16
 800d930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    pIndex = connectPacketHeader;
 800d934:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d007      	beq.n	800d952 <sendConnectWithoutCopy+0x46>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d103      	bne.n	800d952 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800d94a:	2301      	movs	r3, #1
 800d94c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800d950:	e0ec      	b.n	800db2c <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800d95c:	f001 fa36 	bl	800edcc <MQTT_SerializeConnectFixedHeader>
 800d960:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= sizeof( connectPacketHeader ) );
 800d964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d968:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	2b0f      	cmp	r3, #15
 800d970:	d906      	bls.n	800d980 <sendConnectWithoutCopy+0x74>
 800d972:	4b71      	ldr	r3, [pc, #452]	; (800db38 <sendConnectWithoutCopy+0x22c>)
 800d974:	4a71      	ldr	r2, [pc, #452]	; (800db3c <sendConnectWithoutCopy+0x230>)
 800d976:	f640 01ad 	movw	r1, #2221	; 0x8ad
 800d97a:	4871      	ldr	r0, [pc, #452]	; (800db40 <sendConnectWithoutCopy+0x234>)
 800d97c:	f005 ff36 	bl	80137ec <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800d980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d984:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d988:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800d98a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d98e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	461a      	mov	r2, r3
 800d996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d99a:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800d99c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9a0:	685a      	ldr	r2, [r3, #4]
 800d9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800d9ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800d9b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
                                                 pConnectInfo->pClientIdentifier,
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	6859      	ldr	r1, [r3, #4]
                                                 pConnectInfo->clientIdentifierLength,
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	891a      	ldrh	r2, [r3, #8]
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800d9c8:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800d9cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9d6:	f7ff fe29 	bl	800d62c <addEncodedStringToVector>
 800d9da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800d9de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d9e8:	4413      	add	r3, r2
 800d9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800d9ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d9f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9f6:	4413      	add	r3, r2
 800d9f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d03c      	beq.n	800da7c <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
                                                     pWillInfo->pTopicName,
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6859      	ldr	r1, [r3, #4]
                                                     pWillInfo->topicNameLength,
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	891a      	ldrh	r2, [r3, #8]
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800da0a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800da0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da18:	f7ff fe08 	bl	800d62c <addEncodedStringToVector>
 800da1c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800da20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800da2a:	4413      	add	r3, r2
 800da2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800da30:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800da34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da38:	4413      	add	r3, r2
 800da3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800da46:	b29a      	uxth	r2, r3
 800da48:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800da4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da56:	f7ff fde9 	bl	800d62c <addEncodedStringToVector>
 800da5a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800da5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800da68:	4413      	add	r3, r2
 800da6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800da6e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800da72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da76:	4413      	add	r3, r2
 800da78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d01d      	beq.n	800dac0 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
                                                     pConnectInfo->pUserName,
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	68d9      	ldr	r1, [r3, #12]
                                                     pConnectInfo->userNameLength,
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	8a1a      	ldrh	r2, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800da8c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800da90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da9a:	f7ff fdc7 	bl	800d62c <addEncodedStringToVector>
 800da9e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800daa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daa6:	00db      	lsls	r3, r3, #3
 800daa8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800daac:	4413      	add	r3, r2
 800daae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800dab2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daba:	4413      	add	r3, r2
 800dabc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	695b      	ldr	r3, [r3, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01d      	beq.n	800db04 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
                                                     pConnectInfo->pPassword,
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	6959      	ldr	r1, [r3, #20]
                                                     pConnectInfo->passwordLength,
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	8b1a      	ldrh	r2, [r3, #24]
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800dad0:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800dad4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dade:	f7ff fda5 	bl	800d62c <addEncodedStringToVector>
 800dae2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800dae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daea:	00db      	lsls	r3, r3, #3
 800daec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800daf0:	4413      	add	r3, r2
 800daf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800daf6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dafa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dafe:	4413      	add	r3, r2
 800db00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800db04:	f107 0310 	add.w	r3, r7, #16
 800db08:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800db0c:	4619      	mov	r1, r3
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f7fe fdbc 	bl	800c68c <sendMessageVector>
 800db14:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800db18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db1c:	461a      	mov	r2, r3
 800db1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db22:	4293      	cmp	r3, r2
 800db24:	d002      	beq.n	800db2c <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800db26:	2303      	movs	r3, #3
 800db28:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800db2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800db30:	4618      	mov	r0, r3
 800db32:	37a8      	adds	r7, #168	; 0xa8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	0801939c 	.word	0x0801939c
 800db3c:	08019d80 	.word	0x08019d80
 800db40:	08019088 	.word	0x08019088

0800db44 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08c      	sub	sp, #48	; 0x30
 800db48:	af02      	add	r7, sp, #8
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	603b      	str	r3, [r7, #0]
 800db50:	4613      	mov	r3, r2
 800db52:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800db54:	2300      	movs	r3, #0
 800db56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
 800db62:	2300      	movs	r3, #0
 800db64:	623b      	str	r3, [r7, #32]
 800db66:	2300      	movs	r3, #0
 800db68:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800db6a:	2300      	movs	r3, #0
 800db6c:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800db6e:	2300      	movs	r3, #0
 800db70:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <receiveConnack+0x42>
 800db78:	4b4e      	ldr	r3, [pc, #312]	; (800dcb4 <receiveConnack+0x170>)
 800db7a:	4a4f      	ldr	r2, [pc, #316]	; (800dcb8 <receiveConnack+0x174>)
 800db7c:	f640 1115 	movw	r1, #2325	; 0x915
 800db80:	484e      	ldr	r0, [pc, #312]	; (800dcbc <receiveConnack+0x178>)
 800db82:	f005 fe33 	bl	80137ec <__assert_func>
    assert( pIncomingPacket != NULL );
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d106      	bne.n	800db9a <receiveConnack+0x56>
 800db8c:	4b4c      	ldr	r3, [pc, #304]	; (800dcc0 <receiveConnack+0x17c>)
 800db8e:	4a4a      	ldr	r2, [pc, #296]	; (800dcb8 <receiveConnack+0x174>)
 800db90:	f640 1116 	movw	r1, #2326	; 0x916
 800db94:	4849      	ldr	r0, [pc, #292]	; (800dcbc <receiveConnack+0x178>)
 800db96:	f005 fe29 	bl	80137ec <__assert_func>
    assert( pContext->getTime != NULL );
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <receiveConnack+0x6c>
 800dba2:	4b48      	ldr	r3, [pc, #288]	; (800dcc4 <receiveConnack+0x180>)
 800dba4:	4a44      	ldr	r2, [pc, #272]	; (800dcb8 <receiveConnack+0x174>)
 800dba6:	f640 1117 	movw	r1, #2327	; 0x917
 800dbaa:	4844      	ldr	r0, [pc, #272]	; (800dcbc <receiveConnack+0x178>)
 800dbac:	f005 fe1e 	bl	80137ec <__assert_func>

    getTimeStamp = pContext->getTime;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	4798      	blx	r3
 800dbba:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6918      	ldr	r0, [r3, #16]
                                                      pContext->transportInterface.pNetworkContext,
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	69db      	ldr	r3, [r3, #28]
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	f001 fba0 	bl	800f30c <MQTT_GetIncomingPacketTypeAndLength>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00e      	beq.n	800dbf6 <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	4798      	blx	r3
 800dbdc:	4603      	mov	r3, r0
 800dbde:	6979      	ldr	r1, [r7, #20]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fecb 	bl	800c97c <calculateElapsedTime>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	4293      	cmp	r3, r2
 800dbec:	bf94      	ite	ls
 800dbee:	2301      	movls	r3, #1
 800dbf0:	2300      	movhi	r3, #0
 800dbf2:	77fb      	strb	r3, [r7, #31]
 800dbf4:	e008      	b.n	800dc08 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800dbf6:	8bbb      	ldrh	r3, [r7, #28]
 800dbf8:	2b04      	cmp	r3, #4
 800dbfa:	bf8c      	ite	hi
 800dbfc:	2301      	movhi	r3, #1
 800dbfe:	2300      	movls	r3, #0
 800dc00:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800dc02:	8bbb      	ldrh	r3, [r7, #28]
 800dc04:	3301      	adds	r3, #1
 800dc06:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800dc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc0c:	2b07      	cmp	r3, #7
 800dc0e:	d105      	bne.n	800dc1c <receiveConnack+0xd8>
 800dc10:	7ffb      	ldrb	r3, [r7, #31]
 800dc12:	f083 0301 	eor.w	r3, r3, #1
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1cf      	bne.n	800dbbc <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800dc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d123      	bne.n	800dc6c <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	4798      	blx	r3
 800dc28:	4603      	mov	r3, r0
 800dc2a:	6979      	ldr	r1, [r7, #20]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fe fea5 	bl	800c97c <calculateElapsedTime>
 800dc32:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800dc34:	693a      	ldr	r2, [r7, #16]
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d203      	bcs.n	800dc44 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b20      	cmp	r3, #32
 800dc4a:	d10c      	bne.n	800dc66 <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	6a3a      	ldr	r2, [r7, #32]
 800dc50:	9201      	str	r2, [sp, #4]
 800dc52:	68da      	ldr	r2, [r3, #12]
 800dc54:	9200      	str	r2, [sp, #0]
 800dc56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7ff f88b 	bl	800cd74 <receivePacket>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc64:	e002      	b.n	800dc6c <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800dc66:	2305      	movs	r3, #5
 800dc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10b      	bne.n	800dc8c <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6a1a      	ldr	r2, [r3, #32]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800dc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc7e:	2100      	movs	r1, #0
 800dc80:	6838      	ldr	r0, [r7, #0]
 800dc82:	f001 fad0 	bl	800f226 <MQTT_DeserializeAck>
 800dc86:	4603      	mov	r3, r0
 800dc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800dc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d109      	bne.n	800dca8 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d006      	beq.n	800dca8 <receiveConnack+0x164>
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800dca2:	2305      	movs	r3, #5
 800dca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800dca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3728      	adds	r7, #40	; 0x28
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	08019164 	.word	0x08019164
 800dcb8:	08019d98 	.word	0x08019d98
 800dcbc:	08019088 	.word	0x08019088
 800dcc0:	08019334 	.word	0x08019334
 800dcc4:	08019188 	.word	0x08019188

0800dcc8 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d106      	bne.n	800dcf8 <handleSessionResumption+0x30>
 800dcea:	4b2c      	ldr	r3, [pc, #176]	; (800dd9c <handleSessionResumption+0xd4>)
 800dcec:	4a2c      	ldr	r2, [pc, #176]	; (800dda0 <handleSessionResumption+0xd8>)
 800dcee:	f640 118d 	movw	r1, #2445	; 0x98d
 800dcf2:	482c      	ldr	r0, [pc, #176]	; (800dda4 <handleSessionResumption+0xdc>)
 800dcf4:	f005 fd7a 	bl	80137ec <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a18      	ldr	r0, [r3, #32]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd06:	461a      	mov	r2, r3
 800dd08:	2100      	movs	r1, #0
 800dd0a:	f006 ff2d 	bl	8014b68 <memset>

    if( sessionPresent == true )
 800dd0e:	78fb      	ldrb	r3, [r7, #3]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d023      	beq.n	800dd5c <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800dd14:	f107 020f 	add.w	r2, r7, #15
 800dd18:	f107 0310 	add.w	r3, r7, #16
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f002 f901 	bl	800ff26 <MQTT_PubrelToResend>
 800dd24:	4603      	mov	r3, r0
 800dd26:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800dd28:	e011      	b.n	800dd4e <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800dd2a:	7bfa      	ldrb	r2, [r7, #15]
 800dd2c:	8abb      	ldrh	r3, [r7, #20]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff f899 	bl	800ce68 <sendPublishAcks>
 800dd36:	4603      	mov	r3, r0
 800dd38:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800dd3a:	f107 020f 	add.w	r2, r7, #15
 800dd3e:	f107 0310 	add.w	r3, r7, #16
 800dd42:	4619      	mov	r1, r3
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f002 f8ee 	bl	800ff26 <MQTT_PubrelToResend>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800dd4e:	8abb      	ldrh	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d01d      	beq.n	800dd90 <handleSessionResumption+0xc8>
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0e7      	beq.n	800dd2a <handleSessionResumption+0x62>
 800dd5a:	e019      	b.n	800dd90 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d008      	beq.n	800dd76 <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	461a      	mov	r2, r3
 800dd70:	2100      	movs	r1, #0
 800dd72:	f006 fef9 	bl	8014b68 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	461a      	mov	r2, r3
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	f006 feec 	bl	8014b68 <memset>
        }
    }

    return status;
 800dd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	08019164 	.word	0x08019164
 800dda0:	08019da8 	.word	0x08019da8
 800dda4:	08019088 	.word	0x08019088

0800dda8 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <validatePublishParams+0x1e>
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d102      	bne.n	800ddcc <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	75fb      	strb	r3, [r7, #23]
 800ddca:	e01e      	b.n	800de0a <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d005      	beq.n	800dde0 <validatePublishParams+0x38>
 800ddd4:	88fb      	ldrh	r3, [r7, #6]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d102      	bne.n	800dde0 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800ddda:	2301      	movs	r3, #1
 800dddc:	75fb      	strb	r3, [r7, #23]
 800ddde:	e014      	b.n	800de0a <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <validatePublishParams+0x4e>
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d102      	bne.n	800ddf6 <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	75fb      	strb	r3, [r7, #23]
 800ddf4:	e009      	b.n	800de0a <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <validatePublishParams+0x62>
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800de06:	2301      	movs	r3, #1
 800de08:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	371c      	adds	r7, #28
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800de18:	b590      	push	{r4, r7, lr}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800de26:	2300      	movs	r3, #0
 800de28:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d005      	beq.n	800de3c <MQTT_Init+0x24>
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <MQTT_Init+0x24>
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d102      	bne.n	800de42 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800de3c:	2301      	movs	r3, #1
 800de3e:	75fb      	strb	r3, [r7, #23]
 800de40:	e03a      	b.n	800deb8 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d102      	bne.n	800de4e <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800de48:	2301      	movs	r3, #1
 800de4a:	75fb      	strb	r3, [r7, #23]
 800de4c:	e034      	b.n	800deb8 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d102      	bne.n	800de5a <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800de54:	2301      	movs	r3, #1
 800de56:	75fb      	strb	r3, [r7, #23]
 800de58:	e02e      	b.n	800deb8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d102      	bne.n	800de68 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800de62:	2301      	movs	r3, #1
 800de64:	75fb      	strb	r3, [r7, #23]
 800de66:	e027      	b.n	800deb8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800de70:	2301      	movs	r3, #1
 800de72:	75fb      	strb	r3, [r7, #23]
 800de74:	e020      	b.n	800deb8 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800de76:	2250      	movs	r2, #80	; 0x50
 800de78:	2100      	movs	r1, #0
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f006 fe74 	bl	8014b68 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	f103 0410 	add.w	r4, r3, #16
 800de90:	4613      	mov	r3, r2
 800de92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	683a      	ldr	r2, [r7, #0]
 800dea2:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dea8:	3320      	adds	r3, #32
 800deaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800deae:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2201      	movs	r2, #1
 800deb6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800deb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deba:	4618      	mov	r0, r3
 800debc:	371c      	adds	r7, #28
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd90      	pop	{r4, r7, pc}

0800dec2 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b08e      	sub	sp, #56	; 0x38
 800dec6:	af02      	add	r7, sp, #8
 800dec8:	60f8      	str	r0, [r7, #12]
 800deca:	60b9      	str	r1, [r7, #8]
 800decc:	607a      	str	r2, [r7, #4]
 800dece:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800ded0:	2300      	movs	r3, #0
 800ded2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ded4:	2300      	movs	r3, #0
 800ded6:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800ded8:	2300      	movs	r3, #0
 800deda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800dede:	f107 0314 	add.w	r3, r7, #20
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	605a      	str	r2, [r3, #4]
 800dee8:	609a      	str	r2, [r3, #8]
 800deea:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800deec:	2300      	movs	r3, #0
 800deee:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d005      	beq.n	800df02 <MQTT_Connect+0x40>
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <MQTT_Connect+0x40>
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	2b00      	cmp	r3, #0
 800df00:	d102      	bne.n	800df08 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800df02:	2301      	movs	r3, #1
 800df04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800df08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10a      	bne.n	800df26 <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800df10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	68b8      	ldr	r0, [r7, #8]
 800df1c:	f000 ffce 	bl	800eebc <MQTT_GetConnectPacketSize>
 800df20:	4603      	mov	r3, r0
 800df22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800df26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d108      	bne.n	800df40 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7ff fce9 	bl	800d90c <sendConnectWithoutCopy>
 800df3a:	4603      	mov	r3, r0
 800df3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800df40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10d      	bne.n	800df64 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
                                 timeoutMs,
                                 pConnectInfo->cleanSession,
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	781a      	ldrb	r2, [r3, #0]
        status = receiveConnack( pContext,
 800df4c:	f107 0114 	add.w	r1, r7, #20
 800df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	460b      	mov	r3, r1
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f7ff fdf3 	bl	800db44 <receiveConnack>
 800df5e:	4603      	mov	r3, r0
 800df60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800df64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d108      	bne.n	800df7e <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800df6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	4619      	mov	r1, r3
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7ff fea8 	bl	800dcc8 <handleSessionResumption>
 800df78:	4603      	mov	r3, r0
 800df7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800df7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10f      	bne.n	800dfa6 <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	885a      	ldrh	r2, [r3, #2]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800dfa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3730      	adds	r7, #48	; 0x30
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b08a      	sub	sp, #40	; 0x28
 800dfb6:	af02      	add	r7, sp, #8
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	607a      	str	r2, [r7, #4]
 800dfbe:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	61bb      	str	r3, [r7, #24]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800dfc8:	887b      	ldrh	r3, [r7, #2]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	68b9      	ldr	r1, [r7, #8]
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7ff faf2 	bl	800d5b8 <validateSubscribeUnsubscribeParams>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800dfd8:	7ffb      	ldrb	r3, [r7, #31]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d109      	bne.n	800dff2 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800dfde:	f107 0314 	add.w	r3, r7, #20
 800dfe2:	f107 0218 	add.w	r2, r7, #24
 800dfe6:	6879      	ldr	r1, [r7, #4]
 800dfe8:	68b8      	ldr	r0, [r7, #8]
 800dfea:	f000 ffd3 	bl	800ef94 <MQTT_GetSubscribePacketSize>
 800dfee:	4603      	mov	r3, r0
 800dff0:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800dff2:	7ffb      	ldrb	r3, [r7, #31]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10a      	bne.n	800e00e <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	887a      	ldrh	r2, [r7, #2]
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	4613      	mov	r3, r2
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	68b9      	ldr	r1, [r7, #8]
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f7ff fb69 	bl	800d6dc <sendSubscribeWithoutCopy>
 800e00a:	4603      	mov	r3, r0
 800e00c:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800e00e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3720      	adds	r7, #32
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b08c      	sub	sp, #48	; 0x30
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	4613      	mov	r3, r2
 800e024:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800e026:	2300      	movs	r3, #0
 800e028:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800e02e:	2300      	movs	r3, #0
 800e030:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800e032:	2300      	movs	r3, #0
 800e034:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800e036:	2300      	movs	r3, #0
 800e038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     * an extra call to 'send' (in case writev is not defined) to send the
     * topic length.    */
    uint8_t mqttHeader[ 7U ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800e03c:	88fb      	ldrh	r3, [r7, #6]
 800e03e:	461a      	mov	r2, r3
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f7ff feb0 	bl	800dda8 <validatePublishParams>
 800e048:	4603      	mov	r3, r0
 800e04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800e04e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10a      	bne.n	800e06c <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800e056:	f107 0218 	add.w	r2, r7, #24
 800e05a:	f107 031c 	add.w	r3, r7, #28
 800e05e:	4619      	mov	r1, r3
 800e060:	68b8      	ldr	r0, [r7, #8]
 800e062:	f000 ffe8 	bl	800f036 <MQTT_GetPublishPacketSize>
 800e066:	4603      	mov	r3, r0
 800e068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800e06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e070:	2b00      	cmp	r3, #0
 800e072:	d10a      	bne.n	800e08a <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800e074:	69f9      	ldr	r1, [r7, #28]
 800e076:	f107 0320 	add.w	r3, r7, #32
 800e07a:	f107 0210 	add.w	r2, r7, #16
 800e07e:	68b8      	ldr	r0, [r7, #8]
 800e080:	f000 fa00 	bl	800e484 <MQTT_SerializePublishHeaderWithoutTopic>
 800e084:	4603      	mov	r3, r0
 800e086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800e08a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d11b      	bne.n	800e0ca <MQTT_Publish+0xb2>
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d017      	beq.n	800e0ca <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800e09a:	2301      	movs	r3, #1
 800e09c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
                                    packetId,
                                    pPublishInfo->qos );
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_ReserveState( pContext,
 800e0a4:	88fb      	ldrh	r3, [r7, #6]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f001 fdf5 	bl	800fc98 <MQTT_ReserveState>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800e0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b8:	2b09      	cmp	r3, #9
 800e0ba:	d106      	bne.n	800e0ca <MQTT_Publish+0xb2>
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	789b      	ldrb	r3, [r3, #2]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800e0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10c      	bne.n	800e0ec <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800e0d2:	6a39      	ldr	r1, [r7, #32]
 800e0d4:	f107 0210 	add.w	r2, r7, #16
 800e0d8:	88fb      	ldrh	r3, [r7, #6]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	68b9      	ldr	r1, [r7, #8]
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f7ff fba0 	bl	800d826 <sendPublishWithoutCopy>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800e0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d111      	bne.n	800e118 <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00d      	beq.n	800e118 <MQTT_Publish+0x100>
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
                                          packetId,
                                          MQTT_SEND,
                                          pPublishInfo->qos,
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_UpdateStatePublish( pContext,
 800e100:	88f9      	ldrh	r1, [r7, #6]
 800e102:	f107 0317 	add.w	r3, r7, #23
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	4613      	mov	r3, r2
 800e10a:	2200      	movs	r2, #0
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f001 fe1c 	bl	800fd4a <MQTT_UpdateStatePublish>
 800e112:	4603      	mov	r3, r0
 800e114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800e118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3728      	adds	r7, #40	; 0x28
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b088      	sub	sp, #32
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800e130:	2300      	movs	r3, #0
 800e132:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800e134:	2300      	movs	r3, #0
 800e136:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800e138:	f107 0310 	add.w	r3, r7, #16
 800e13c:	60bb      	str	r3, [r7, #8]
    localBuffer.size = sizeof( pingreqPacket );
 800e13e:	2302      	movs	r3, #2
 800e140:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800e148:	2301      	movs	r3, #1
 800e14a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800e14c:	7ffb      	ldrb	r3, [r7, #31]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d114      	bne.n	800e17c <MQTT_Ping+0x58>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800e152:	f107 0314 	add.w	r3, r7, #20
 800e156:	4618      	mov	r0, r3
 800e158:	f000 fff1 	bl	800f13e <MQTT_GetPingreqPacketSize>
 800e15c:	4603      	mov	r3, r0
 800e15e:	77fb      	strb	r3, [r7, #31]

        if( status == MQTTSuccess )
 800e160:	7ffb      	ldrb	r3, [r7, #31]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10a      	bne.n	800e17c <MQTT_Ping+0x58>
        {
            assert( packetSize == localBuffer.size );
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d006      	beq.n	800e17c <MQTT_Ping+0x58>
 800e16e:	4b18      	ldr	r3, [pc, #96]	; (800e1d0 <MQTT_Ping+0xac>)
 800e170:	4a18      	ldr	r2, [pc, #96]	; (800e1d4 <MQTT_Ping+0xb0>)
 800e172:	f640 3184 	movw	r1, #2948	; 0xb84
 800e176:	4818      	ldr	r0, [pc, #96]	; (800e1d8 <MQTT_Ping+0xb4>)
 800e178:	f005 fb38 	bl	80137ec <__assert_func>
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800e17c:	7ffb      	ldrb	r3, [r7, #31]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d106      	bne.n	800e190 <MQTT_Ping+0x6c>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4618      	mov	r0, r3
 800e188:	f000 ffef 	bl	800f16a <MQTT_SerializePingreq>
 800e18c:	4603      	mov	r3, r0
 800e18e:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800e190:	7ffb      	ldrb	r3, [r7, #31]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d116      	bne.n	800e1c4 <MQTT_Ping+0xa0>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800e196:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800e198:	697a      	ldr	r2, [r7, #20]
 800e19a:	4619      	mov	r1, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7fe fb5f 	bl	800c860 <sendBuffer>
 800e1a2:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	da02      	bge.n	800e1b4 <MQTT_Ping+0x90>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	77fb      	strb	r3, [r7, #31]
 800e1b2:	e007      	b.n	800e1c4 <MQTT_Ping+0xa0>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800e1c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3720      	adds	r7, #32
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	080193e0 	.word	0x080193e0
 800e1d4:	08019dc0 	.word	0x08019dc0
 800e1d8:	08019088 	.word	0x08019088

0800e1dc <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d011      	beq.n	800e212 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d009      	beq.n	800e212 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2200      	movs	r2, #0
 800e202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800e206:	2101      	movs	r1, #1
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff f8e9 	bl	800d3e0 <receiveSingleIteration>
 800e20e:	4603      	mov	r3, r0
 800e210:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800e212:	7bfb      	ldrb	r3, [r7, #15]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800e224:	2300      	movs	r3, #0
 800e226:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d012      	beq.n	800e254 <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e232:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d103      	bne.n	800e248 <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	851a      	strh	r2, [r3, #40]	; 0x28
 800e246:	e005      	b.n	800e254 <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e24c:	3301      	adds	r3, #1
 800e24e:	b29a      	uxth	r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800e254:	89fb      	ldrh	r3, [r7, #14]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800e262:	b480      	push	{r7}
 800e264:	b085      	sub	sp, #20
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b7f      	cmp	r3, #127	; 0x7f
 800e26e:	d802      	bhi.n	800e276 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800e270:	2301      	movs	r3, #1
 800e272:	60fb      	str	r3, [r7, #12]
 800e274:	e00f      	b.n	800e296 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e27c:	d202      	bcs.n	800e284 <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800e27e:	2302      	movs	r3, #2
 800e280:	60fb      	str	r3, [r7, #12]
 800e282:	e008      	b.n	800e296 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e28a:	d202      	bcs.n	800e292 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800e28c:	2303      	movs	r3, #3
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	e001      	b.n	800e296 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800e292:	2304      	movs	r3, #4
 800e294:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800e296:	68fb      	ldr	r3, [r7, #12]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr

0800e2a4 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d106      	bne.n	800e2ca <encodeRemainingLength+0x26>
 800e2bc:	4b12      	ldr	r3, [pc, #72]	; (800e308 <encodeRemainingLength+0x64>)
 800e2be:	4a13      	ldr	r2, [pc, #76]	; (800e30c <encodeRemainingLength+0x68>)
 800e2c0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800e2c4:	4812      	ldr	r0, [pc, #72]	; (800e310 <encodeRemainingLength+0x6c>)
 800e2c6:	f005 fa91 	bl	80137ec <__assert_func>

    pLengthEnd = pDestination;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2d6:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	09db      	lsrs	r3, r3, #7
 800e2dc:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d003      	beq.n	800e2ec <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800e2e4:	7dfb      	ldrb	r3, [r7, #23]
 800e2e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e2ea:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	7dfa      	ldrb	r2, [r7, #23]
 800e2f0:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1e7      	bne.n	800e2ce <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800e2fe:	693b      	ldr	r3, [r7, #16]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3718      	adds	r7, #24
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	080194f8 	.word	0x080194f8
 800e30c:	08019dcc 	.word	0x08019dcc
 800e310:	08019510 	.word	0x08019510

0800e314 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b086      	sub	sp, #24
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	4613      	mov	r3, r2
 800e320:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d106      	bne.n	800e33e <encodeString+0x2a>
 800e330:	4b15      	ldr	r3, [pc, #84]	; (800e388 <encodeString+0x74>)
 800e332:	4a16      	ldr	r2, [pc, #88]	; (800e38c <encodeString+0x78>)
 800e334:	f44f 7105 	mov.w	r1, #532	; 0x214
 800e338:	4815      	ldr	r0, [pc, #84]	; (800e390 <encodeString+0x7c>)
 800e33a:	f005 fa57 	bl	80137ec <__assert_func>

    pBuffer = pDestination;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800e342:	88fb      	ldrh	r3, [r7, #6]
 800e344:	0a1b      	lsrs	r3, r3, #8
 800e346:	b29b      	uxth	r3, r3
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	3301      	adds	r3, #1
 800e352:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800e354:	88fb      	ldrh	r3, [r7, #6]
 800e356:	b2da      	uxtb	r2, r3
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	3301      	adds	r3, #1
 800e360:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800e368:	88fb      	ldrh	r3, [r7, #6]
 800e36a:	461a      	mov	r2, r3
 800e36c:	6939      	ldr	r1, [r7, #16]
 800e36e:	6978      	ldr	r0, [r7, #20]
 800e370:	f006 fd49 	bl	8014e06 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800e374:	88fb      	ldrh	r3, [r7, #6]
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4413      	add	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800e37c:	697b      	ldr	r3, [r7, #20]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	080194f8 	.word	0x080194f8
 800e38c:	08019de4 	.word	0x08019de4
 800e390:	08019510 	.word	0x08019510

0800e394 <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b088      	sub	sp, #32
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
    bool status = true;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61bb      	str	r3, [r7, #24]
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <calculatePublishPacketSize+0x2c>
 800e3b2:	4b2e      	ldr	r3, [pc, #184]	; (800e46c <calculatePublishPacketSize+0xd8>)
 800e3b4:	4a2e      	ldr	r2, [pc, #184]	; (800e470 <calculatePublishPacketSize+0xdc>)
 800e3b6:	f240 2135 	movw	r1, #565	; 0x235
 800e3ba:	482e      	ldr	r0, [pc, #184]	; (800e474 <calculatePublishPacketSize+0xe0>)
 800e3bc:	f005 fa16 	bl	80137ec <__assert_func>
    assert( pRemainingLength != NULL );
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <calculatePublishPacketSize+0x40>
 800e3c6:	4b2c      	ldr	r3, [pc, #176]	; (800e478 <calculatePublishPacketSize+0xe4>)
 800e3c8:	4a29      	ldr	r2, [pc, #164]	; (800e470 <calculatePublishPacketSize+0xdc>)
 800e3ca:	f240 2136 	movw	r1, #566	; 0x236
 800e3ce:	4829      	ldr	r0, [pc, #164]	; (800e474 <calculatePublishPacketSize+0xe0>)
 800e3d0:	f005 fa0c 	bl	80137ec <__assert_func>
    assert( pPacketSize != NULL );
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <calculatePublishPacketSize+0x54>
 800e3da:	4b28      	ldr	r3, [pc, #160]	; (800e47c <calculatePublishPacketSize+0xe8>)
 800e3dc:	4a24      	ldr	r2, [pc, #144]	; (800e470 <calculatePublishPacketSize+0xdc>)
 800e3de:	f240 2137 	movw	r1, #567	; 0x237
 800e3e2:	4824      	ldr	r0, [pc, #144]	; (800e474 <calculatePublishPacketSize+0xe0>)
 800e3e4:	f005 fa02 	bl	80137ec <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	891b      	ldrh	r3, [r3, #8]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	3302      	adds	r3, #2
 800e3f4:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	3302      	adds	r3, #2
 800e402:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800e404:	69ba      	ldr	r2, [r7, #24]
 800e406:	4b1e      	ldr	r3, [pc, #120]	; (800e480 <calculatePublishPacketSize+0xec>)
 800e408:	1a9b      	subs	r3, r3, r2
 800e40a:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	691b      	ldr	r3, [r3, #16]
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	429a      	cmp	r2, r3
 800e414:	d202      	bcs.n	800e41c <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800e416:	2300      	movs	r3, #0
 800e418:	77fb      	strb	r3, [r7, #31]
 800e41a:	e021      	b.n	800e460 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	69ba      	ldr	r2, [r7, #24]
 800e422:	4413      	add	r3, r2
 800e424:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800e426:	69b8      	ldr	r0, [r7, #24]
 800e428:	f7ff ff1b 	bl	800e262 <remainingLengthEncodedSize>
 800e42c:	4602      	mov	r2, r0
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	1a9b      	subs	r3, r3, r2
 800e432:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d202      	bcs.n	800e444 <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800e43e:	2300      	movs	r3, #0
 800e440:	77fb      	strb	r3, [r7, #31]
 800e442:	e00d      	b.n	800e460 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	69ba      	ldr	r2, [r7, #24]
 800e448:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800e44a:	69b8      	ldr	r0, [r7, #24]
 800e44c:	f7ff ff09 	bl	800e262 <remainingLengthEncodedSize>
 800e450:	4603      	mov	r3, r0
 800e452:	3301      	adds	r3, #1
 800e454:	69ba      	ldr	r2, [r7, #24]
 800e456:	4413      	add	r3, r2
 800e458:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	69ba      	ldr	r2, [r7, #24]
 800e45e:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800e460:	7ffb      	ldrb	r3, [r7, #31]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3720      	adds	r7, #32
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	08019544 	.word	0x08019544
 800e470:	08019df4 	.word	0x08019df4
 800e474:	08019510 	.word	0x08019510
 800e478:	0801955c 	.word	0x0801955c
 800e47c:	08019578 	.word	0x08019578
 800e480:	0ffffffe 	.word	0x0ffffffe

0800e484 <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b088      	sub	sp, #32
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800e492:	2300      	movs	r3, #0
 800e494:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800e496:	2330      	movs	r3, #48	; 0x30
 800e498:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800e49e:	68b8      	ldr	r0, [r7, #8]
 800e4a0:	f7ff fedf 	bl	800e262 <remainingLengthEncodedSize>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	3303      	adds	r3, #3
 800e4a8:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d104      	bne.n	800e4bc <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800e4b2:	7ffb      	ldrb	r3, [r7, #31]
 800e4b4:	f043 0302 	orr.w	r3, r3, #2
 800e4b8:	77fb      	strb	r3, [r7, #31]
 800e4ba:	e007      	b.n	800e4cc <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d103      	bne.n	800e4cc <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800e4c4:	7ffb      	ldrb	r3, [r7, #31]
 800e4c6:	f043 0304 	orr.w	r3, r3, #4
 800e4ca:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	785b      	ldrb	r3, [r3, #1]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d003      	beq.n	800e4dc <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800e4d4:	7ffb      	ldrb	r3, [r7, #31]
 800e4d6:	f043 0301 	orr.w	r3, r3, #1
 800e4da:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	789b      	ldrb	r3, [r3, #2]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d003      	beq.n	800e4ec <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800e4e4:	7ffb      	ldrb	r3, [r7, #31]
 800e4e6:	f043 0308 	orr.w	r3, r3, #8
 800e4ea:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	7ffa      	ldrb	r2, [r7, #31]
 800e4f0:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800e4f8:	68b9      	ldr	r1, [r7, #8]
 800e4fa:	69b8      	ldr	r0, [r7, #24]
 800e4fc:	f7ff fed2 	bl	800e2a4 <encodeRemainingLength>
 800e500:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	891b      	ldrh	r3, [r3, #8]
 800e506:	0a1b      	lsrs	r3, r3, #8
 800e508:	b29b      	uxth	r3, r3
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	3301      	adds	r3, #1
 800e514:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	891b      	ldrh	r3, [r3, #8]
 800e51a:	b2da      	uxtb	r2, r3
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	3301      	adds	r3, #1
 800e524:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	601a      	str	r2, [r3, #0]

    return status;
 800e52c:	7fbb      	ldrb	r3, [r7, #30]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3720      	adds	r7, #32
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b088      	sub	sp, #32
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	61fb      	str	r3, [r7, #28]
 800e544:	2301      	movs	r3, #1
 800e546:	61bb      	str	r3, [r7, #24]
 800e548:	2300      	movs	r3, #0
 800e54a:	617b      	str	r3, [r7, #20]
 800e54c:	2300      	movs	r3, #0
 800e54e:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e55e:	d903      	bls.n	800e568 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e560:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e564:	61fb      	str	r3, [r7, #28]
 800e566:	e01c      	b.n	800e5a2 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800e568:	f107 010b 	add.w	r1, r7, #11
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	6838      	ldr	r0, [r7, #0]
 800e572:	4798      	blx	r3
 800e574:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d10f      	bne.n	800e59c <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800e57c:	7afb      	ldrb	r3, [r7, #11]
 800e57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e582:	69ba      	ldr	r2, [r7, #24]
 800e584:	fb02 f303 	mul.w	r3, r2, r3
 800e588:	69fa      	ldr	r2, [r7, #28]
 800e58a:	4413      	add	r3, r2
 800e58c:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	01db      	lsls	r3, r3, #7
 800e592:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	3301      	adds	r3, #1
 800e598:	617b      	str	r3, [r7, #20]
 800e59a:	e002      	b.n	800e5a2 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e59c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5a0:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5a8:	d004      	beq.n	800e5b4 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800e5aa:	7afb      	ldrb	r3, [r7, #11]
 800e5ac:	b25b      	sxtb	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	dbd2      	blt.n	800e558 <getRemainingLength+0x22>
 800e5b2:	e000      	b.n	800e5b6 <getRemainingLength+0x80>
            break;
 800e5b4:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5bc:	d00a      	beq.n	800e5d4 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800e5be:	69f8      	ldr	r0, [r7, #28]
 800e5c0:	f7ff fe4f 	bl	800e262 <remainingLengthEncodedSize>
 800e5c4:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d002      	beq.n	800e5d4 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e5ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5d2:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800e5d4:	69fb      	ldr	r3, [r7, #28]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3720      	adds	r7, #32
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b08a      	sub	sp, #40	; 0x28
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	60f8      	str	r0, [r7, #12]
 800e5e6:	60b9      	str	r1, [r7, #8]
 800e5e8:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800e5fe:	2300      	movs	r3, #0
 800e600:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e608:	d905      	bls.n	800e616 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800e60a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800e610:	2305      	movs	r3, #5
 800e612:	76bb      	strb	r3, [r7, #26]
 800e614:	e01d      	b.n	800e652 <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	3301      	adds	r3, #1
 800e61e:	429a      	cmp	r2, r3
 800e620:	d915      	bls.n	800e64e <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	3301      	adds	r3, #1
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	4413      	add	r3, r2
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800e62e:	7efb      	ldrb	r3, [r7, #27]
 800e630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e634:	6a3a      	ldr	r2, [r7, #32]
 800e636:	fb02 f303 	mul.w	r3, r2, r3
 800e63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63c:	4413      	add	r3, r2
 800e63e:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800e640:	6a3b      	ldr	r3, [r7, #32]
 800e642:	01db      	lsls	r3, r3, #7
 800e644:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	3301      	adds	r3, #1
 800e64a:	61fb      	str	r3, [r7, #28]
 800e64c:	e001      	b.n	800e652 <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800e64e:	230b      	movs	r3, #11
 800e650:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e658:	d006      	beq.n	800e668 <processRemainingLength+0x8a>
 800e65a:	7ebb      	ldrb	r3, [r7, #26]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d103      	bne.n	800e668 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800e660:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e664:	2b00      	cmp	r3, #0
 800e666:	dbcc      	blt.n	800e602 <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800e668:	7ebb      	ldrb	r3, [r7, #26]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d111      	bne.n	800e692 <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800e66e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e670:	f7ff fdf7 	bl	800e262 <remainingLengthEncodedSize>
 800e674:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800e676:	69fa      	ldr	r2, [r7, #28]
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d002      	beq.n	800e684 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800e67e:	2305      	movs	r3, #5
 800e680:	76bb      	strb	r3, [r7, #26]
 800e682:	e006      	b.n	800e692 <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e688:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800e692:	7ebb      	ldrb	r3, [r7, #26]
}
 800e694:	4618      	mov	r0, r3
 800e696:	3728      	adds	r7, #40	; 0x28
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800e6aa:	79fb      	ldrb	r3, [r7, #7]
 800e6ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6b0:	2bd0      	cmp	r3, #208	; 0xd0
 800e6b2:	d01d      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6b4:	2bd0      	cmp	r3, #208	; 0xd0
 800e6b6:	d826      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6b8:	2bb0      	cmp	r3, #176	; 0xb0
 800e6ba:	d019      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6bc:	2bb0      	cmp	r3, #176	; 0xb0
 800e6be:	d822      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6c0:	2b90      	cmp	r3, #144	; 0x90
 800e6c2:	d015      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6c4:	2b90      	cmp	r3, #144	; 0x90
 800e6c6:	d81e      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6c8:	2b70      	cmp	r3, #112	; 0x70
 800e6ca:	d011      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6cc:	2b70      	cmp	r3, #112	; 0x70
 800e6ce:	d81a      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6d0:	2b60      	cmp	r3, #96	; 0x60
 800e6d2:	d010      	beq.n	800e6f6 <incomingPacketValid+0x5a>
 800e6d4:	2b60      	cmp	r3, #96	; 0x60
 800e6d6:	d816      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6d8:	2b50      	cmp	r3, #80	; 0x50
 800e6da:	d009      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6dc:	2b50      	cmp	r3, #80	; 0x50
 800e6de:	d812      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6e0:	2b40      	cmp	r3, #64	; 0x40
 800e6e2:	d005      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6e4:	2b40      	cmp	r3, #64	; 0x40
 800e6e6:	d80e      	bhi.n	800e706 <incomingPacketValid+0x6a>
 800e6e8:	2b20      	cmp	r3, #32
 800e6ea:	d001      	beq.n	800e6f0 <incomingPacketValid+0x54>
 800e6ec:	2b30      	cmp	r3, #48	; 0x30
 800e6ee:	d10a      	bne.n	800e706 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	73fb      	strb	r3, [r7, #15]
            break;
 800e6f4:	e00a      	b.n	800e70c <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	f003 0302 	and.w	r3, r3, #2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d004      	beq.n	800e70a <incomingPacketValid+0x6e>
            {
                status = true;
 800e700:	2301      	movs	r3, #1
 800e702:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800e704:	e001      	b.n	800e70a <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800e706:	bf00      	nop
 800e708:	e000      	b.n	800e70c <incomingPacketValid+0x70>
            break;
 800e70a:	bf00      	nop
    }

    return status;
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800e71a:	b480      	push	{r7}
 800e71c:	b087      	sub	sp, #28
 800e71e:	af00      	add	r7, sp, #0
 800e720:	60f8      	str	r0, [r7, #12]
 800e722:	460b      	mov	r3, r1
 800e724:	607a      	str	r2, [r7, #4]
 800e726:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800e728:	2300      	movs	r3, #0
 800e72a:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800e72c:	7afb      	ldrb	r3, [r7, #11]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d106      	bne.n	800e740 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800e732:	68fa      	ldr	r2, [r7, #12]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	429a      	cmp	r2, r3
 800e738:	d209      	bcs.n	800e74e <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800e73a:	2305      	movs	r3, #5
 800e73c:	75fb      	strb	r3, [r7, #23]
 800e73e:	e006      	b.n	800e74e <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3302      	adds	r3, #2
 800e744:	68fa      	ldr	r2, [r7, #12]
 800e746:	429a      	cmp	r2, r3
 800e748:	d201      	bcs.n	800e74e <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800e74a:	2305      	movs	r3, #5
 800e74c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e750:	4618      	mov	r0, r3
 800e752:	371c      	adds	r7, #28
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	4603      	mov	r3, r0
 800e764:	6039      	str	r1, [r7, #0]
 800e766:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800e768:	2300      	movs	r3, #0
 800e76a:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <processPublishFlags+0x24>
 800e772:	4b20      	ldr	r3, [pc, #128]	; (800e7f4 <processPublishFlags+0x98>)
 800e774:	4a20      	ldr	r2, [pc, #128]	; (800e7f8 <processPublishFlags+0x9c>)
 800e776:	f240 31ee 	movw	r1, #1006	; 0x3ee
 800e77a:	4820      	ldr	r0, [pc, #128]	; (800e7fc <processPublishFlags+0xa0>)
 800e77c:	f005 f836 	bl	80137ec <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800e780:	79fb      	ldrb	r3, [r7, #7]
 800e782:	f003 0304 	and.w	r3, r3, #4
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00b      	beq.n	800e7a2 <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	f003 0302 	and.w	r3, r3, #2
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800e794:	2305      	movs	r3, #5
 800e796:	73fb      	strb	r3, [r7, #15]
 800e798:	e00f      	b.n	800e7ba <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2202      	movs	r2, #2
 800e79e:	701a      	strb	r2, [r3, #0]
 800e7a0:	e00b      	b.n	800e7ba <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	f003 0302 	and.w	r3, r3, #2
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	701a      	strb	r2, [r3, #0]
 800e7b2:	e002      	b.n	800e7ba <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800e7ba:	7bfb      	ldrb	r3, [r7, #15]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d113      	bne.n	800e7e8 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	f003 0301 	and.w	r3, r3, #1
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	bf14      	ite	ne
 800e7ca:	2301      	movne	r3, #1
 800e7cc:	2300      	moveq	r3, #0
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800e7d4:	79fb      	ldrb	r3, [r7, #7]
 800e7d6:	f003 0308 	and.w	r3, r3, #8
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	bf14      	ite	ne
 800e7de:	2301      	movne	r3, #1
 800e7e0:	2300      	moveq	r3, #0
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	08019544 	.word	0x08019544
 800e7f8:	08019e10 	.word	0x08019e10
 800e7fc:	08019510 	.word	0x08019510

0800e800 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800e800:	b5b0      	push	{r4, r5, r7, lr}
 800e802:	b088      	sub	sp, #32
 800e804:	af00      	add	r7, sp, #0
 800e806:	4603      	mov	r3, r0
 800e808:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800e80a:	4b0c      	ldr	r3, [pc, #48]	; (800e83c <logConnackResponse+0x3c>)
 800e80c:	f107 0408 	add.w	r4, r7, #8
 800e810:	461d      	mov	r5, r3
 800e812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e816:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e81a:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	2b05      	cmp	r3, #5
 800e822:	d906      	bls.n	800e832 <logConnackResponse+0x32>
 800e824:	4b06      	ldr	r3, [pc, #24]	; (800e840 <logConnackResponse+0x40>)
 800e826:	4a07      	ldr	r2, [pc, #28]	; (800e844 <logConnackResponse+0x44>)
 800e828:	f240 412e 	movw	r1, #1070	; 0x42e
 800e82c:	4806      	ldr	r0, [pc, #24]	; (800e848 <logConnackResponse+0x48>)
 800e82e:	f004 ffdd 	bl	80137ec <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800e832:	bf00      	nop
 800e834:	3720      	adds	r7, #32
 800e836:	46bd      	mov	sp, r7
 800e838:	bdb0      	pop	{r4, r5, r7, pc}
 800e83a:	bf00      	nop
 800e83c:	08019798 	.word	0x08019798
 800e840:	08019690 	.word	0x08019690
 800e844:	08019e24 	.word	0x08019e24
 800e848:	08019510 	.word	0x08019510

0800e84c <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d106      	bne.n	800e872 <deserializeConnack+0x26>
 800e864:	4b2a      	ldr	r3, [pc, #168]	; (800e910 <deserializeConnack+0xc4>)
 800e866:	4a2b      	ldr	r2, [pc, #172]	; (800e914 <deserializeConnack+0xc8>)
 800e868:	f240 4144 	movw	r1, #1092	; 0x444
 800e86c:	482a      	ldr	r0, [pc, #168]	; (800e918 <deserializeConnack+0xcc>)
 800e86e:	f004 ffbd 	bl	80137ec <__assert_func>
    assert( pSessionPresent != NULL );
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <deserializeConnack+0x3a>
 800e878:	4b28      	ldr	r3, [pc, #160]	; (800e91c <deserializeConnack+0xd0>)
 800e87a:	4a26      	ldr	r2, [pc, #152]	; (800e914 <deserializeConnack+0xc8>)
 800e87c:	f240 4145 	movw	r1, #1093	; 0x445
 800e880:	4825      	ldr	r0, [pc, #148]	; (800e918 <deserializeConnack+0xcc>)
 800e882:	f004 ffb3 	bl	80137ec <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	2b02      	cmp	r3, #2
 800e892:	d002      	beq.n	800e89a <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800e894:	2305      	movs	r3, #5
 800e896:	73fb      	strb	r3, [r7, #15]
 800e898:	e01d      	b.n	800e8d6 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	f043 0301 	orr.w	r3, r3, #1
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d002      	beq.n	800e8ae <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800e8a8:	2305      	movs	r3, #5
 800e8aa:	73fb      	strb	r3, [r7, #15]
 800e8ac:	e013      	b.n	800e8d6 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00a      	beq.n	800e8d0 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d005      	beq.n	800e8d6 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800e8ca:	2305      	movs	r3, #5
 800e8cc:	73fb      	strb	r3, [r7, #15]
 800e8ce:	e002      	b.n	800e8d6 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d114      	bne.n	800e906 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b05      	cmp	r3, #5
 800e8e4:	d902      	bls.n	800e8ec <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800e8e6:	2305      	movs	r3, #5
 800e8e8:	73fb      	strb	r3, [r7, #15]
 800e8ea:	e00c      	b.n	800e906 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff ff84 	bl	800e800 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800e902:	2306      	movs	r3, #6
 800e904:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800e906:	7bfb      	ldrb	r3, [r7, #15]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	080197b0 	.word	0x080197b0
 800e914:	08019e38 	.word	0x08019e38
 800e918:	08019510 	.word	0x08019510
 800e91c:	080197c4 	.word	0x080197c4

0800e920 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800e92e:	2300      	movs	r3, #0
 800e930:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	61bb      	str	r3, [r7, #24]
 800e936:	2300      	movs	r3, #0
 800e938:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d106      	bne.n	800e94e <calculateSubscriptionPacketSize+0x2e>
 800e940:	4b3d      	ldr	r3, [pc, #244]	; (800ea38 <calculateSubscriptionPacketSize+0x118>)
 800e942:	4a3e      	ldr	r2, [pc, #248]	; (800ea3c <calculateSubscriptionPacketSize+0x11c>)
 800e944:	f240 419a 	movw	r1, #1178	; 0x49a
 800e948:	483d      	ldr	r0, [pc, #244]	; (800ea40 <calculateSubscriptionPacketSize+0x120>)
 800e94a:	f004 ff4f 	bl	80137ec <__assert_func>
    assert( subscriptionCount != 0U );
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d106      	bne.n	800e962 <calculateSubscriptionPacketSize+0x42>
 800e954:	4b3b      	ldr	r3, [pc, #236]	; (800ea44 <calculateSubscriptionPacketSize+0x124>)
 800e956:	4a39      	ldr	r2, [pc, #228]	; (800ea3c <calculateSubscriptionPacketSize+0x11c>)
 800e958:	f240 419b 	movw	r1, #1179	; 0x49b
 800e95c:	4838      	ldr	r0, [pc, #224]	; (800ea40 <calculateSubscriptionPacketSize+0x120>)
 800e95e:	f004 ff45 	bl	80137ec <__assert_func>
    assert( pRemainingLength != NULL );
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d106      	bne.n	800e976 <calculateSubscriptionPacketSize+0x56>
 800e968:	4b37      	ldr	r3, [pc, #220]	; (800ea48 <calculateSubscriptionPacketSize+0x128>)
 800e96a:	4a34      	ldr	r2, [pc, #208]	; (800ea3c <calculateSubscriptionPacketSize+0x11c>)
 800e96c:	f240 419c 	movw	r1, #1180	; 0x49c
 800e970:	4833      	ldr	r0, [pc, #204]	; (800ea40 <calculateSubscriptionPacketSize+0x120>)
 800e972:	f004 ff3b 	bl	80137ec <__assert_func>
    assert( pPacketSize != NULL );
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d106      	bne.n	800e98a <calculateSubscriptionPacketSize+0x6a>
 800e97c:	4b33      	ldr	r3, [pc, #204]	; (800ea4c <calculateSubscriptionPacketSize+0x12c>)
 800e97e:	4a2f      	ldr	r2, [pc, #188]	; (800ea3c <calculateSubscriptionPacketSize+0x11c>)
 800e980:	f240 419d 	movw	r1, #1181	; 0x49d
 800e984:	482e      	ldr	r0, [pc, #184]	; (800ea40 <calculateSubscriptionPacketSize+0x120>)
 800e986:	f004 ff31 	bl	80137ec <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	3302      	adds	r3, #2
 800e98e:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800e990:	2300      	movs	r3, #0
 800e992:	61bb      	str	r3, [r7, #24]
 800e994:	e02f      	b.n	800e9f6 <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	891b      	ldrh	r3, [r3, #8]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800e9b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d102      	bne.n	800e9c0 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800e9c0:	69ba      	ldr	r2, [r7, #24]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	891b      	ldrh	r3, [r3, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00a      	beq.n	800e9ec <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800e9d6:	69ba      	ldr	r2, [r7, #24]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	005b      	lsls	r3, r3, #1
 800e9dc:	4413      	add	r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d101      	bne.n	800e9f0 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	61bb      	str	r3, [r7, #24]
 800e9f6:	69ba      	ldr	r2, [r7, #24]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d3cb      	bcc.n	800e996 <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea04:	d301      	bcc.n	800ea0a <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800ea06:	2301      	movs	r3, #1
 800ea08:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800ea0a:	7ffb      	ldrb	r3, [r7, #31]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10d      	bne.n	800ea2c <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800ea16:	6978      	ldr	r0, [r7, #20]
 800ea18:	f7ff fc23 	bl	800e262 <remainingLengthEncodedSize>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	3301      	adds	r3, #1
 800ea20:	697a      	ldr	r2, [r7, #20]
 800ea22:	4413      	add	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	697a      	ldr	r2, [r7, #20]
 800ea2a:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800ea2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3720      	adds	r7, #32
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	080197dc 	.word	0x080197dc
 800ea3c:	08019e4c 	.word	0x08019e4c
 800ea40:	08019510 	.word	0x08019510
 800ea44:	080197f8 	.word	0x080197f8
 800ea48:	0801955c 	.word	0x0801955c
 800ea4c:	08019578 	.word	0x08019578

0800ea50 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d106      	bne.n	800ea7a <readSubackStatus+0x2a>
 800ea6c:	4b17      	ldr	r3, [pc, #92]	; (800eacc <readSubackStatus+0x7c>)
 800ea6e:	4a18      	ldr	r2, [pc, #96]	; (800ead0 <readSubackStatus+0x80>)
 800ea70:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800ea74:	4817      	ldr	r0, [pc, #92]	; (800ead4 <readSubackStatus+0x84>)
 800ea76:	f004 feb9 	bl	80137ec <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	613b      	str	r3, [r7, #16]
 800ea7e:	e019      	b.n	800eab4 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	4413      	add	r3, r2
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800ea8a:	7bfb      	ldrb	r3, [r7, #15]
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	dc02      	bgt.n	800ea96 <readSubackStatus+0x46>
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	da08      	bge.n	800eaa6 <readSubackStatus+0x56>
 800ea94:	e004      	b.n	800eaa0 <readSubackStatus+0x50>
 800ea96:	2b80      	cmp	r3, #128	; 0x80
 800ea98:	d102      	bne.n	800eaa0 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800ea9a:	2306      	movs	r3, #6
 800ea9c:	75fb      	strb	r3, [r7, #23]

                break;
 800ea9e:	e003      	b.n	800eaa8 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800eaa0:	2305      	movs	r3, #5
 800eaa2:	75fb      	strb	r3, [r7, #23]

                break;
 800eaa4:	e000      	b.n	800eaa8 <readSubackStatus+0x58>
                break;
 800eaa6:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	2b05      	cmp	r3, #5
 800eaac:	d007      	beq.n	800eabe <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	3301      	adds	r3, #1
 800eab2:	613b      	str	r3, [r7, #16]
 800eab4:	693a      	ldr	r2, [r7, #16]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d3e1      	bcc.n	800ea80 <readSubackStatus+0x30>
 800eabc:	e000      	b.n	800eac0 <readSubackStatus+0x70>
        {
            break;
 800eabe:	bf00      	nop
        }
    }

    return status;
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	08019810 	.word	0x08019810
 800ead0:	08019e6c 	.word	0x08019e6c
 800ead4:	08019510 	.word	0x08019510

0800ead8 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800eae2:	2300      	movs	r3, #0
 800eae4:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d106      	bne.n	800eafe <deserializeSuback+0x26>
 800eaf0:	4b1f      	ldr	r3, [pc, #124]	; (800eb70 <deserializeSuback+0x98>)
 800eaf2:	4a20      	ldr	r2, [pc, #128]	; (800eb74 <deserializeSuback+0x9c>)
 800eaf4:	f240 511f 	movw	r1, #1311	; 0x51f
 800eaf8:	481f      	ldr	r0, [pc, #124]	; (800eb78 <deserializeSuback+0xa0>)
 800eafa:	f004 fe77 	bl	80137ec <__assert_func>
    assert( pPacketIdentifier != NULL );
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d106      	bne.n	800eb12 <deserializeSuback+0x3a>
 800eb04:	4b1d      	ldr	r3, [pc, #116]	; (800eb7c <deserializeSuback+0xa4>)
 800eb06:	4a1b      	ldr	r2, [pc, #108]	; (800eb74 <deserializeSuback+0x9c>)
 800eb08:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800eb0c:	481a      	ldr	r0, [pc, #104]	; (800eb78 <deserializeSuback+0xa0>)
 800eb0e:	f004 fe6d 	bl	80137ec <__assert_func>

    remainingLength = pSuback->remainingLength;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b02      	cmp	r3, #2
 800eb22:	d802      	bhi.n	800eb2a <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800eb24:	2305      	movs	r3, #5
 800eb26:	75fb      	strb	r3, [r7, #23]
 800eb28:	e01d      	b.n	800eb66 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	021b      	lsls	r3, r3, #8
 800eb30:	b21a      	sxth	r2, r3
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	3301      	adds	r3, #1
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	b21b      	sxth	r3, r3
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	b21b      	sxth	r3, r3
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d102      	bne.n	800eb52 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800eb4c:	2305      	movs	r3, #5
 800eb4e:	75fb      	strb	r3, [r7, #23]
 800eb50:	e009      	b.n	800eb66 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	1e9a      	subs	r2, r3, #2
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	3302      	adds	r3, #2
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7ff ff77 	bl	800ea50 <readSubackStatus>
 800eb62:	4603      	mov	r3, r0
 800eb64:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	08019828 	.word	0x08019828
 800eb74:	08019e80 	.word	0x08019e80
 800eb78:	08019510 	.word	0x08019510
 800eb7c:	08019838 	.word	0x08019838

0800eb80 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d106      	bne.n	800eba8 <deserializePublish+0x28>
 800eb9a:	4b53      	ldr	r3, [pc, #332]	; (800ece8 <deserializePublish+0x168>)
 800eb9c:	4a53      	ldr	r2, [pc, #332]	; (800ecec <deserializePublish+0x16c>)
 800eb9e:	f240 5184 	movw	r1, #1412	; 0x584
 800eba2:	4853      	ldr	r0, [pc, #332]	; (800ecf0 <deserializePublish+0x170>)
 800eba4:	f004 fe22 	bl	80137ec <__assert_func>
    assert( pPacketId != NULL );
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <deserializePublish+0x3c>
 800ebae:	4b51      	ldr	r3, [pc, #324]	; (800ecf4 <deserializePublish+0x174>)
 800ebb0:	4a4e      	ldr	r2, [pc, #312]	; (800ecec <deserializePublish+0x16c>)
 800ebb2:	f240 5185 	movw	r1, #1413	; 0x585
 800ebb6:	484e      	ldr	r0, [pc, #312]	; (800ecf0 <deserializePublish+0x170>)
 800ebb8:	f004 fe18 	bl	80137ec <__assert_func>
    assert( pPublishInfo != NULL );
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d106      	bne.n	800ebd0 <deserializePublish+0x50>
 800ebc2:	4b4d      	ldr	r3, [pc, #308]	; (800ecf8 <deserializePublish+0x178>)
 800ebc4:	4a49      	ldr	r2, [pc, #292]	; (800ecec <deserializePublish+0x16c>)
 800ebc6:	f240 5186 	movw	r1, #1414	; 0x586
 800ebca:	4849      	ldr	r0, [pc, #292]	; (800ecf0 <deserializePublish+0x170>)
 800ebcc:	f004 fe0e 	bl	80137ec <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d106      	bne.n	800ebe6 <deserializePublish+0x66>
 800ebd8:	4b48      	ldr	r3, [pc, #288]	; (800ecfc <deserializePublish+0x17c>)
 800ebda:	4a44      	ldr	r2, [pc, #272]	; (800ecec <deserializePublish+0x16c>)
 800ebdc:	f240 5187 	movw	r1, #1415	; 0x587
 800ebe0:	4843      	ldr	r0, [pc, #268]	; (800ecf0 <deserializePublish+0x170>)
 800ebe2:	f004 fe03 	bl	80137ec <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	f003 030f 	and.w	r3, r3, #15
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	6879      	ldr	r1, [r7, #4]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff fdaf 	bl	800e75c <processPublishFlags>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800ec02:	7ffb      	ldrb	r3, [r7, #31]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d109      	bne.n	800ec1c <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6898      	ldr	r0, [r3, #8]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	2203      	movs	r2, #3
 800ec12:	4619      	mov	r1, r3
 800ec14:	f7ff fd81 	bl	800e71a <checkPublishRemainingLength>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800ec1c:	7ffb      	ldrb	r3, [r7, #31]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d118      	bne.n	800ec54 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	021b      	lsls	r3, r3, #8
 800ec28:	b21a      	sxth	r2, r3
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	b21b      	sxth	r3, r3
 800ec32:	4313      	orrs	r3, r2
 800ec34:	b21b      	sxth	r3, r3
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6898      	ldr	r0, [r3, #8]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800ec48:	3302      	adds	r3, #2
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	f7ff fd65 	bl	800e71a <checkPublishRemainingLength>
 800ec50:	4603      	mov	r3, r0
 800ec52:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800ec54:	7ffb      	ldrb	r3, [r7, #31]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d123      	bne.n	800eca2 <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	1c9a      	adds	r2, r3, #2
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	8912      	ldrh	r2, [r2, #8]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d015      	beq.n	800eca2 <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	021b      	lsls	r3, r3, #8
 800ec7c:	b21a      	sxth	r2, r3
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	3301      	adds	r3, #1
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	b21b      	sxth	r3, r3
 800ec86:	4313      	orrs	r3, r2
 800ec88:	b21b      	sxth	r3, r3
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	3302      	adds	r3, #2
 800ec94:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d101      	bne.n	800eca2 <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800ec9e:	2305      	movs	r3, #5
 800eca0:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800eca2:	7ffb      	ldrb	r3, [r7, #31]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d119      	bne.n	800ecdc <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	8912      	ldrh	r2, [r2, #8]
 800ecb0:	1a9b      	subs	r3, r3, r2
 800ecb2:	1e9a      	subs	r2, r3, #2
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	1e9a      	subs	r2, r3, #2
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	691b      	ldr	r3, [r3, #16]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <deserializePublish+0x156>
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	e000      	b.n	800ecd8 <deserializePublish+0x158>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800ecdc:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3720      	adds	r7, #32
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08019854 	.word	0x08019854
 800ecec:	08019e94 	.word	0x08019e94
 800ecf0:	08019510 	.word	0x08019510
 800ecf4:	0801986c 	.word	0x0801986c
 800ecf8:	08019544 	.word	0x08019544
 800ecfc:	08019880 	.word	0x08019880

0800ed00 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d106      	bne.n	800ed22 <deserializeSimpleAck+0x22>
 800ed14:	4b18      	ldr	r3, [pc, #96]	; (800ed78 <deserializeSimpleAck+0x78>)
 800ed16:	4a19      	ldr	r2, [pc, #100]	; (800ed7c <deserializeSimpleAck+0x7c>)
 800ed18:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800ed1c:	4818      	ldr	r0, [pc, #96]	; (800ed80 <deserializeSimpleAck+0x80>)
 800ed1e:	f004 fd65 	bl	80137ec <__assert_func>
    assert( pPacketIdentifier != NULL );
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d106      	bne.n	800ed36 <deserializeSimpleAck+0x36>
 800ed28:	4b16      	ldr	r3, [pc, #88]	; (800ed84 <deserializeSimpleAck+0x84>)
 800ed2a:	4a14      	ldr	r2, [pc, #80]	; (800ed7c <deserializeSimpleAck+0x7c>)
 800ed2c:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800ed30:	4813      	ldr	r0, [pc, #76]	; (800ed80 <deserializeSimpleAck+0x80>)
 800ed32:	f004 fd5b 	bl	80137ec <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	2b02      	cmp	r3, #2
 800ed3c:	d002      	beq.n	800ed44 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800ed3e:	2305      	movs	r3, #5
 800ed40:	73fb      	strb	r3, [r7, #15]
 800ed42:	e014      	b.n	800ed6e <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	021b      	lsls	r3, r3, #8
 800ed4c:	b21a      	sxth	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	3301      	adds	r3, #1
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	b21b      	sxth	r3, r3
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	b21b      	sxth	r3, r3
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800ed6a:	2305      	movs	r3, #5
 800ed6c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800ed6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	080198a8 	.word	0x080198a8
 800ed7c:	08019ea8 	.word	0x08019ea8
 800ed80:	08019510 	.word	0x08019510
 800ed84:	08019838 	.word	0x08019838

0800ed88 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800ed90:	2300      	movs	r3, #0
 800ed92:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d106      	bne.n	800eda8 <deserializePingresp+0x20>
 800ed9a:	4b09      	ldr	r3, [pc, #36]	; (800edc0 <deserializePingresp+0x38>)
 800ed9c:	4a09      	ldr	r2, [pc, #36]	; (800edc4 <deserializePingresp+0x3c>)
 800ed9e:	f240 6104 	movw	r1, #1540	; 0x604
 800eda2:	4809      	ldr	r0, [pc, #36]	; (800edc8 <deserializePingresp+0x40>)
 800eda4:	f004 fd22 	bl	80137ec <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800edb0:	2305      	movs	r3, #5
 800edb2:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	080198b8 	.word	0x080198b8
 800edc4:	08019ec0 	.word	0x08019ec0
 800edc8:	08019510 	.word	0x08019510

0800edcc <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
 800edd8:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800edde:	2300      	movs	r3, #0
 800ede0:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	2210      	movs	r2, #16
 800ede6:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	3301      	adds	r3, #1
 800edec:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6938      	ldr	r0, [r7, #16]
 800edf2:	f7ff fa57 	bl	800e2a4 <encodeRemainingLength>
 800edf6:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800edf8:	2204      	movs	r2, #4
 800edfa:	492f      	ldr	r1, [pc, #188]	; (800eeb8 <MQTT_SerializeConnectFixedHeader+0xec>)
 800edfc:	6938      	ldr	r0, [r7, #16]
 800edfe:	f7ff fa89 	bl	800e314 <encodeString>
 800ee02:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	2204      	movs	r2, #4
 800ee08:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d003      	beq.n	800ee20 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	f043 0302 	orr.w	r3, r3, #2
 800ee1e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d003      	beq.n	800ee30 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee2e:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d003      	beq.n	800ee40 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d01c      	beq.n	800ee80 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800ee46:	7dfb      	ldrb	r3, [r7, #23]
 800ee48:	f043 0304 	orr.w	r3, r3, #4
 800ee4c:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d104      	bne.n	800ee60 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800ee56:	7dfb      	ldrb	r3, [r7, #23]
 800ee58:	f043 0308 	orr.w	r3, r3, #8
 800ee5c:	75fb      	strb	r3, [r7, #23]
 800ee5e:	e007      	b.n	800ee70 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d103      	bne.n	800ee70 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	f043 0310 	orr.w	r3, r3, #16
 800ee6e:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	785b      	ldrb	r3, [r3, #1]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800ee78:	7dfb      	ldrb	r3, [r7, #23]
 800ee7a:	f043 0320 	orr.w	r3, r3, #32
 800ee7e:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	7dfa      	ldrb	r2, [r7, #23]
 800ee84:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	885b      	ldrh	r3, [r3, #2]
 800ee90:	0a1b      	lsrs	r3, r3, #8
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	b2da      	uxtb	r2, r3
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	885a      	ldrh	r2, [r3, #2]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	3301      	adds	r3, #1
 800eea2:	b2d2      	uxtb	r2, r2
 800eea4:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	3302      	adds	r3, #2
 800eeaa:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800eeac:	693b      	ldr	r3, [r7, #16]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3718      	adds	r7, #24
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	080198cc 	.word	0x080198cc

0800eebc <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
 800eec8:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800eeca:	2300      	movs	r3, #0
 800eecc:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800eece:	230a      	movs	r3, #10
 800eed0:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d005      	beq.n	800eee4 <MQTT_GetConnectPacketSize+0x28>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d002      	beq.n	800eee4 <MQTT_GetConnectPacketSize+0x28>
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d102      	bne.n	800eeea <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800eee4:	2301      	movs	r3, #1
 800eee6:	77fb      	strb	r3, [r7, #31]
 800eee8:	e04f      	b.n	800ef8a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	891b      	ldrh	r3, [r3, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d003      	beq.n	800eefa <MQTT_GetConnectPacketSize+0x3e>
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d102      	bne.n	800ef00 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800eefa:	2301      	movs	r3, #1
 800eefc:	77fb      	strb	r3, [r7, #31]
 800eefe:	e044      	b.n	800ef8a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d007      	beq.n	800ef16 <MQTT_GetConnectPacketSize+0x5a>
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef0e:	d302      	bcc.n	800ef16 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800ef10:	2301      	movs	r3, #1
 800ef12:	77fb      	strb	r3, [r7, #31]
 800ef14:	e039      	b.n	800ef8a <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	891b      	ldrh	r3, [r3, #8]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	4413      	add	r3, r2
 800ef20:	3302      	adds	r3, #2
 800ef22:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d009      	beq.n	800ef3e <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	891b      	ldrh	r3, [r3, #8]
 800ef2e:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ef34:	441a      	add	r2, r3
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	4413      	add	r3, r2
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d006      	beq.n	800ef54 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	8a1b      	ldrh	r3, [r3, #16]
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	4413      	add	r3, r2
 800ef50:	3302      	adds	r3, #2
 800ef52:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	695b      	ldr	r3, [r3, #20]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d006      	beq.n	800ef6a <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	8b1b      	ldrh	r3, [r3, #24]
 800ef60:	461a      	mov	r2, r3
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	4413      	add	r3, r2
 800ef66:	3302      	adds	r3, #2
 800ef68:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800ef6e:	69b8      	ldr	r0, [r7, #24]
 800ef70:	f7ff f977 	bl	800e262 <remainingLengthEncodedSize>
 800ef74:	4603      	mov	r3, r0
 800ef76:	3301      	adds	r3, #1
 800ef78:	69ba      	ldr	r2, [r7, #24]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	69ba      	ldr	r2, [r7, #24]
 800ef88:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800ef8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3720      	adds	r7, #32
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
 800efa0:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800efa2:	2300      	movs	r3, #0
 800efa4:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d005      	beq.n	800efb8 <MQTT_GetSubscribePacketSize+0x24>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d002      	beq.n	800efb8 <MQTT_GetSubscribePacketSize+0x24>
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800efb8:	2301      	movs	r3, #1
 800efba:	75fb      	strb	r3, [r7, #23]
 800efbc:	e00f      	b.n	800efde <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d102      	bne.n	800efca <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800efc4:	2301      	movs	r3, #1
 800efc6:	75fb      	strb	r3, [r7, #23]
 800efc8:	e009      	b.n	800efde <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800efca:	2300      	movs	r3, #0
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7ff fca3 	bl	800e920 <calculateSubscriptionPacketSize>
 800efda:	4603      	mov	r3, r0
 800efdc:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800efde:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3718      	adds	r7, #24
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4613      	mov	r3, r2
 800eff4:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2282      	movs	r2, #130	; 0x82
 800effe:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	3301      	adds	r3, #1
 800f004:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800f006:	68f9      	ldr	r1, [r7, #12]
 800f008:	6978      	ldr	r0, [r7, #20]
 800f00a:	f7ff f94b 	bl	800e2a4 <encodeRemainingLength>
 800f00e:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800f010:	88fb      	ldrh	r3, [r7, #6]
 800f012:	0a1b      	lsrs	r3, r3, #8
 800f014:	b29b      	uxth	r3, r3
 800f016:	b2da      	uxtb	r2, r3
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	3301      	adds	r3, #1
 800f020:	88fa      	ldrh	r2, [r7, #6]
 800f022:	b2d2      	uxtb	r2, r2
 800f024:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	3302      	adds	r3, #2
 800f02a:	617b      	str	r3, [r7, #20]

    return pIterator;
 800f02c:	697b      	ldr	r3, [r7, #20]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b086      	sub	sp, #24
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	60f8      	str	r0, [r7, #12]
 800f03e:	60b9      	str	r1, [r7, #8]
 800f040:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f042:	2300      	movs	r3, #0
 800f044:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d005      	beq.n	800f058 <MQTT_GetPublishPacketSize+0x22>
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d002      	beq.n	800f058 <MQTT_GetPublishPacketSize+0x22>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d102      	bne.n	800f05e <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800f058:	2301      	movs	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]
 800f05c:	e017      	b.n	800f08e <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d003      	beq.n	800f06e <MQTT_GetPublishPacketSize+0x38>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	891b      	ldrh	r3, [r3, #8]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d102      	bne.n	800f074 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800f06e:	2301      	movs	r3, #1
 800f070:	75fb      	strb	r3, [r7, #23]
 800f072:	e00c      	b.n	800f08e <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7ff f98b 	bl	800e394 <calculatePublishPacketSize>
 800f07e:	4603      	mov	r3, r0
 800f080:	f083 0301 	eor.w	r3, r3, #1
 800f084:	b2db      	uxtb	r3, r3
 800f086:	2b00      	cmp	r3, #0
 800f088:	d001      	beq.n	800f08e <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800f08a:	2301      	movs	r3, #1
 800f08c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800f08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3718      	adds	r7, #24
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	70fb      	strb	r3, [r7, #3]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d102      	bne.n	800f0b8 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	73fb      	strb	r3, [r7, #15]
 800f0b6:	e03b      	b.n	800f130 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d102      	bne.n	800f0c6 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	73fb      	strb	r3, [r7, #15]
 800f0c4:	e034      	b.n	800f130 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d802      	bhi.n	800f0d4 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	73fb      	strb	r3, [r7, #15]
 800f0d2:	e02d      	b.n	800f130 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800f0d4:	883b      	ldrh	r3, [r7, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d102      	bne.n	800f0e0 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	73fb      	strb	r3, [r7, #15]
 800f0de:	e027      	b.n	800f130 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800f0e0:	78fb      	ldrb	r3, [r7, #3]
 800f0e2:	2b70      	cmp	r3, #112	; 0x70
 800f0e4:	d009      	beq.n	800f0fa <MQTT_SerializeAck+0x62>
 800f0e6:	2b70      	cmp	r3, #112	; 0x70
 800f0e8:	dc1f      	bgt.n	800f12a <MQTT_SerializeAck+0x92>
 800f0ea:	2b62      	cmp	r3, #98	; 0x62
 800f0ec:	d005      	beq.n	800f0fa <MQTT_SerializeAck+0x62>
 800f0ee:	2b62      	cmp	r3, #98	; 0x62
 800f0f0:	dc1b      	bgt.n	800f12a <MQTT_SerializeAck+0x92>
 800f0f2:	2b40      	cmp	r3, #64	; 0x40
 800f0f4:	d001      	beq.n	800f0fa <MQTT_SerializeAck+0x62>
 800f0f6:	2b50      	cmp	r3, #80	; 0x50
 800f0f8:	d117      	bne.n	800f12a <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	78fa      	ldrb	r2, [r7, #3]
 800f100:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	3301      	adds	r3, #1
 800f108:	2202      	movs	r2, #2
 800f10a:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800f10c:	883b      	ldrh	r3, [r7, #0]
 800f10e:	0a1b      	lsrs	r3, r3, #8
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	3302      	adds	r3, #2
 800f118:	b2d2      	uxtb	r2, r2
 800f11a:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	3303      	adds	r3, #3
 800f122:	883a      	ldrh	r2, [r7, #0]
 800f124:	b2d2      	uxtb	r2, r2
 800f126:	701a      	strb	r2, [r3, #0]
                break;
 800f128:	e002      	b.n	800f130 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800f12a:	2301      	movs	r3, #1
 800f12c:	73fb      	strb	r3, [r7, #15]
                break;
 800f12e:	bf00      	nop
        }
    }

    return status;
 800f130:	7bfb      	ldrb	r3, [r7, #15]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800f13e:	b480      	push	{r7}
 800f140:	b085      	sub	sp, #20
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f146:	2300      	movs	r3, #0
 800f148:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d102      	bne.n	800f156 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800f150:	2301      	movs	r3, #1
 800f152:	73fb      	strb	r3, [r7, #15]
 800f154:	e002      	b.n	800f15c <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2202      	movs	r2, #2
 800f15a:	601a      	str	r2, [r3, #0]
    }

    return status;
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr

0800f16a <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800f16a:	b480      	push	{r7}
 800f16c:	b085      	sub	sp, #20
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f172:	2300      	movs	r3, #0
 800f174:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d102      	bne.n	800f182 <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800f17c:	2301      	movs	r3, #1
 800f17e:	73fb      	strb	r3, [r7, #15]
 800f180:	e005      	b.n	800f18e <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d101      	bne.n	800f18e <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800f18a:	2301      	movs	r3, #1
 800f18c:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d105      	bne.n	800f1a0 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d801      	bhi.n	800f1a0 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800f19c:	2302      	movs	r3, #2
 800f19e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d108      	bne.n	800f1b8 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	22c0      	movs	r2, #192	; 0xc0
 800f1ac:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3714      	adds	r7, #20
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b086      	sub	sp, #24
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	60f8      	str	r0, [r7, #12]
 800f1ce:	60b9      	str	r1, [r7, #8]
 800f1d0:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d005      	beq.n	800f1e8 <MQTT_DeserializePublish+0x22>
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <MQTT_DeserializePublish+0x22>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	75fb      	strb	r3, [r7, #23]
 800f1ec:	e016      	b.n	800f21c <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1f6:	2b30      	cmp	r3, #48	; 0x30
 800f1f8:	d002      	beq.n	800f200 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	75fb      	strb	r3, [r7, #23]
 800f1fe:	e00d      	b.n	800f21c <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d102      	bne.n	800f20e <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800f208:	2301      	movs	r3, #1
 800f20a:	75fb      	strb	r3, [r7, #23]
 800f20c:	e006      	b.n	800f21c <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	68b9      	ldr	r1, [r7, #8]
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f7ff fcb4 	bl	800eb80 <deserializePublish>
 800f218:	4603      	mov	r3, r0
 800f21a:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b086      	sub	sp, #24
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	60f8      	str	r0, [r7, #12]
 800f22e:	60b9      	str	r1, [r7, #8]
 800f230:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f232:	2300      	movs	r3, #0
 800f234:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800f23c:	2301      	movs	r3, #1
 800f23e:	75fb      	strb	r3, [r7, #23]
 800f240:	e05f      	b.n	800f302 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10a      	bne.n	800f25e <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800f24c:	2b20      	cmp	r3, #32
 800f24e:	d006      	beq.n	800f25e <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800f254:	2bd0      	cmp	r3, #208	; 0xd0
 800f256:	d002      	beq.n	800f25e <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800f258:	2301      	movs	r3, #1
 800f25a:	75fb      	strb	r3, [r7, #23]
 800f25c:	e051      	b.n	800f302 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d106      	bne.n	800f272 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800f268:	2b20      	cmp	r3, #32
 800f26a:	d102      	bne.n	800f272 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800f26c:	2301      	movs	r3, #1
 800f26e:	75fb      	strb	r3, [r7, #23]
 800f270:	e047      	b.n	800f302 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d106      	bne.n	800f288 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800f27e:	2bd0      	cmp	r3, #208	; 0xd0
 800f280:	d002      	beq.n	800f288 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800f282:	2301      	movs	r3, #1
 800f284:	75fb      	strb	r3, [r7, #23]
 800f286:	e03c      	b.n	800f302 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	2bd0      	cmp	r3, #208	; 0xd0
 800f28e:	d028      	beq.n	800f2e2 <MQTT_DeserializeAck+0xbc>
 800f290:	2bd0      	cmp	r3, #208	; 0xd0
 800f292:	dc33      	bgt.n	800f2fc <MQTT_DeserializeAck+0xd6>
 800f294:	2bb0      	cmp	r3, #176	; 0xb0
 800f296:	d02a      	beq.n	800f2ee <MQTT_DeserializeAck+0xc8>
 800f298:	2bb0      	cmp	r3, #176	; 0xb0
 800f29a:	dc2f      	bgt.n	800f2fc <MQTT_DeserializeAck+0xd6>
 800f29c:	2b90      	cmp	r3, #144	; 0x90
 800f29e:	d019      	beq.n	800f2d4 <MQTT_DeserializeAck+0xae>
 800f2a0:	2b90      	cmp	r3, #144	; 0x90
 800f2a2:	dc2b      	bgt.n	800f2fc <MQTT_DeserializeAck+0xd6>
 800f2a4:	2b70      	cmp	r3, #112	; 0x70
 800f2a6:	d022      	beq.n	800f2ee <MQTT_DeserializeAck+0xc8>
 800f2a8:	2b70      	cmp	r3, #112	; 0x70
 800f2aa:	dc27      	bgt.n	800f2fc <MQTT_DeserializeAck+0xd6>
 800f2ac:	2b62      	cmp	r3, #98	; 0x62
 800f2ae:	d01e      	beq.n	800f2ee <MQTT_DeserializeAck+0xc8>
 800f2b0:	2b62      	cmp	r3, #98	; 0x62
 800f2b2:	dc23      	bgt.n	800f2fc <MQTT_DeserializeAck+0xd6>
 800f2b4:	2b50      	cmp	r3, #80	; 0x50
 800f2b6:	d01a      	beq.n	800f2ee <MQTT_DeserializeAck+0xc8>
 800f2b8:	2b50      	cmp	r3, #80	; 0x50
 800f2ba:	dc1f      	bgt.n	800f2fc <MQTT_DeserializeAck+0xd6>
 800f2bc:	2b20      	cmp	r3, #32
 800f2be:	d002      	beq.n	800f2c6 <MQTT_DeserializeAck+0xa0>
 800f2c0:	2b40      	cmp	r3, #64	; 0x40
 800f2c2:	d014      	beq.n	800f2ee <MQTT_DeserializeAck+0xc8>
 800f2c4:	e01a      	b.n	800f2fc <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800f2c6:	6879      	ldr	r1, [r7, #4]
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f7ff fabf 	bl	800e84c <deserializeConnack>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	75fb      	strb	r3, [r7, #23]
                break;
 800f2d2:	e016      	b.n	800f302 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff fbfe 	bl	800ead8 <deserializeSuback>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	75fb      	strb	r3, [r7, #23]
                break;
 800f2e0:	e00f      	b.n	800f302 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f7ff fd50 	bl	800ed88 <deserializePingresp>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	75fb      	strb	r3, [r7, #23]
                break;
 800f2ec:	e009      	b.n	800f302 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800f2ee:	68b9      	ldr	r1, [r7, #8]
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f7ff fd05 	bl	800ed00 <deserializeSimpleAck>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	75fb      	strb	r3, [r7, #23]
                break;
 800f2fa:	e002      	b.n	800f302 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800f2fc:	2305      	movs	r3, #5
 800f2fe:	75fb      	strb	r3, [r7, #23]
                break;
 800f300:	bf00      	nop
        }
    }

    return status;
 800f302:	7dfb      	ldrb	r3, [r7, #23]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f318:	2300      	movs	r3, #0
 800f31a:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800f326:	2301      	movs	r3, #1
 800f328:	75fb      	strb	r3, [r7, #23]
 800f32a:	e005      	b.n	800f338 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800f32c:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2201      	movs	r2, #1
 800f332:	68b8      	ldr	r0, [r7, #8]
 800f334:	4798      	blx	r3
 800f336:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d119      	bne.n	800f372 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	4618      	mov	r0, r3
 800f344:	f7ff f9aa 	bl	800e69c <incomingPacketValid>
 800f348:	4603      	mov	r3, r0
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00e      	beq.n	800f36c <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800f34e:	68b9      	ldr	r1, [r7, #8]
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7ff f8f0 	bl	800e536 <getRemainingLength>
 800f356:	4602      	mov	r2, r0
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f364:	d113      	bne.n	800f38e <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800f366:	2305      	movs	r3, #5
 800f368:	75fb      	strb	r3, [r7, #23]
 800f36a:	e010      	b.n	800f38e <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800f36c:	2305      	movs	r3, #5
 800f36e:	75fb      	strb	r3, [r7, #23]
 800f370:	e00d      	b.n	800f38e <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d005      	beq.n	800f384 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800f37e:	2307      	movs	r3, #7
 800f380:	75fb      	strb	r3, [r7, #23]
 800f382:	e004      	b.n	800f38e <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800f384:	7dfb      	ldrb	r3, [r7, #23]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d001      	beq.n	800f38e <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800f38a:	2304      	movs	r3, #4
 800f38c:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800f38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3718      	adds	r7, #24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d102      	bne.n	800f3b4 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	75fb      	strb	r3, [r7, #23]
 800f3b2:	e016      	b.n	800f3e2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d102      	bne.n	800f3c0 <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	75fb      	strb	r3, [r7, #23]
 800f3be:	e010      	b.n	800f3e2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d102      	bne.n	800f3cc <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	75fb      	strb	r3, [r7, #23]
 800f3ca:	e00a      	b.n	800f3e2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d102      	bne.n	800f3da <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800f3d4:	2307      	movs	r3, #7
 800f3d6:	75fb      	strb	r3, [r7, #23]
 800f3d8:	e003      	b.n	800f3e2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d111      	bne.n	800f40c <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7ff f955 	bl	800e69c <incomingPacketValid>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d007      	beq.n	800f408 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	68b9      	ldr	r1, [r7, #8]
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7ff f8ee 	bl	800e5de <processRemainingLength>
 800f402:	4603      	mov	r3, r0
 800f404:	75fb      	strb	r3, [r7, #23]
 800f406:	e001      	b.n	800f40c <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800f408:	2305      	movs	r3, #5
 800f40a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800f40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3718      	adds	r7, #24
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
	...

0800f418 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800f418:	b490      	push	{r4, r7}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	4604      	mov	r4, r0
 800f420:	4608      	mov	r0, r1
 800f422:	4611      	mov	r1, r2
 800f424:	461a      	mov	r2, r3
 800f426:	4623      	mov	r3, r4
 800f428:	71fb      	strb	r3, [r7, #7]
 800f42a:	4603      	mov	r3, r0
 800f42c:	71bb      	strb	r3, [r7, #6]
 800f42e:	460b      	mov	r3, r1
 800f430:	717b      	strb	r3, [r7, #5]
 800f432:	4613      	mov	r3, r2
 800f434:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800f436:	2300      	movs	r3, #0
 800f438:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	2b07      	cmp	r3, #7
 800f43e:	d848      	bhi.n	800f4d2 <validateTransitionPublish+0xba>
 800f440:	a201      	add	r2, pc, #4	; (adr r2, 800f448 <validateTransitionPublish+0x30>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f469 	.word	0x0800f469
 800f44c:	0800f48d 	.word	0x0800f48d
 800f450:	0800f4d3 	.word	0x0800f4d3
 800f454:	0800f4d3 	.word	0x0800f4d3
 800f458:	0800f4d3 	.word	0x0800f4d3
 800f45c:	0800f4d3 	.word	0x0800f4d3
 800f460:	0800f4b7 	.word	0x0800f4b7
 800f464:	0800f4c5 	.word	0x0800f4c5
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800f468:	797b      	ldrb	r3, [r7, #5]
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d133      	bne.n	800f4d6 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800f46e:	79bb      	ldrb	r3, [r7, #6]
 800f470:	2b02      	cmp	r3, #2
 800f472:	d002      	beq.n	800f47a <validateTransitionPublish+0x62>
 800f474:	79bb      	ldrb	r3, [r7, #6]
 800f476:	2b03      	cmp	r3, #3
 800f478:	d101      	bne.n	800f47e <validateTransitionPublish+0x66>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e000      	b.n	800f480 <validateTransitionPublish+0x68>
 800f47e:	2300      	movs	r3, #0
 800f480:	73fb      	strb	r3, [r7, #15]
 800f482:	7bfb      	ldrb	r3, [r7, #15]
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800f48a:	e024      	b.n	800f4d6 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800f48c:	793b      	ldrb	r3, [r7, #4]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d002      	beq.n	800f498 <validateTransitionPublish+0x80>
 800f492:	2b02      	cmp	r3, #2
 800f494:	d007      	beq.n	800f4a6 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800f496:	e00d      	b.n	800f4b4 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800f498:	79bb      	ldrb	r3, [r7, #6]
 800f49a:	2b06      	cmp	r3, #6
 800f49c:	bf0c      	ite	eq
 800f49e:	2301      	moveq	r3, #1
 800f4a0:	2300      	movne	r3, #0
 800f4a2:	73fb      	strb	r3, [r7, #15]
                    break;
 800f4a4:	e006      	b.n	800f4b4 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800f4a6:	79bb      	ldrb	r3, [r7, #6]
 800f4a8:	2b07      	cmp	r3, #7
 800f4aa:	bf0c      	ite	eq
 800f4ac:	2301      	moveq	r3, #1
 800f4ae:	2300      	movne	r3, #0
 800f4b0:	73fb      	strb	r3, [r7, #15]
                    break;
 800f4b2:	bf00      	nop
            }

            break;
 800f4b4:	e010      	b.n	800f4d8 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800f4b6:	79bb      	ldrb	r3, [r7, #6]
 800f4b8:	2b06      	cmp	r3, #6
 800f4ba:	bf0c      	ite	eq
 800f4bc:	2301      	moveq	r3, #1
 800f4be:	2300      	movne	r3, #0
 800f4c0:	73fb      	strb	r3, [r7, #15]

            break;
 800f4c2:	e009      	b.n	800f4d8 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800f4c4:	79bb      	ldrb	r3, [r7, #6]
 800f4c6:	2b07      	cmp	r3, #7
 800f4c8:	bf0c      	ite	eq
 800f4ca:	2301      	moveq	r3, #1
 800f4cc:	2300      	movne	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]

            break;
 800f4d0:	e002      	b.n	800f4d8 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800f4d2:	bf00      	nop
 800f4d4:	e000      	b.n	800f4d8 <validateTransitionPublish+0xc0>
            break;
 800f4d6:	bf00      	nop
    }

    return isValid;
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bc90      	pop	{r4, r7}
 800f4e2:	4770      	bx	lr

0800f4e4 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	460a      	mov	r2, r1
 800f4ee:	71fb      	strb	r3, [r7, #7]
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	3b02      	subs	r3, #2
 800f4fc:	2b07      	cmp	r3, #7
 800f4fe:	d85c      	bhi.n	800f5ba <validateTransitionAck+0xd6>
 800f500:	a201      	add	r2, pc, #4	; (adr r2, 800f508 <validateTransitionAck+0x24>)
 800f502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f506:	bf00      	nop
 800f508:	0800f529 	.word	0x0800f529
 800f50c:	0800f537 	.word	0x0800f537
 800f510:	0800f58f 	.word	0x0800f58f
 800f514:	0800f563 	.word	0x0800f563
 800f518:	0800f529 	.word	0x0800f529
 800f51c:	0800f581 	.word	0x0800f581
 800f520:	0800f545 	.word	0x0800f545
 800f524:	0800f59d 	.word	0x0800f59d
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800f528:	79bb      	ldrb	r3, [r7, #6]
 800f52a:	2b0a      	cmp	r3, #10
 800f52c:	bf0c      	ite	eq
 800f52e:	2301      	moveq	r3, #1
 800f530:	2300      	movne	r3, #0
 800f532:	73fb      	strb	r3, [r7, #15]
            break;
 800f534:	e042      	b.n	800f5bc <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800f536:	79bb      	ldrb	r3, [r7, #6]
 800f538:	2b08      	cmp	r3, #8
 800f53a:	bf0c      	ite	eq
 800f53c:	2301      	moveq	r3, #1
 800f53e:	2300      	movne	r3, #0
 800f540:	73fb      	strb	r3, [r7, #15]
            break;
 800f542:	e03b      	b.n	800f5bc <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800f544:	79bb      	ldrb	r3, [r7, #6]
 800f546:	2b05      	cmp	r3, #5
 800f548:	d002      	beq.n	800f550 <validateTransitionAck+0x6c>
 800f54a:	79bb      	ldrb	r3, [r7, #6]
 800f54c:	2b08      	cmp	r3, #8
 800f54e:	d101      	bne.n	800f554 <validateTransitionAck+0x70>
 800f550:	2301      	movs	r3, #1
 800f552:	e000      	b.n	800f556 <validateTransitionAck+0x72>
 800f554:	2300      	movs	r3, #0
 800f556:	73fb      	strb	r3, [r7, #15]
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	f003 0301 	and.w	r3, r3, #1
 800f55e:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800f560:	e02c      	b.n	800f5bc <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800f562:	79bb      	ldrb	r3, [r7, #6]
 800f564:	2b0a      	cmp	r3, #10
 800f566:	d002      	beq.n	800f56e <validateTransitionAck+0x8a>
 800f568:	79bb      	ldrb	r3, [r7, #6]
 800f56a:	2b05      	cmp	r3, #5
 800f56c:	d101      	bne.n	800f572 <validateTransitionAck+0x8e>
 800f56e:	2301      	movs	r3, #1
 800f570:	e000      	b.n	800f574 <validateTransitionAck+0x90>
 800f572:	2300      	movs	r3, #0
 800f574:	73fb      	strb	r3, [r7, #15]
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800f57e:	e01d      	b.n	800f5bc <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800f580:	79bb      	ldrb	r3, [r7, #6]
 800f582:	2b04      	cmp	r3, #4
 800f584:	bf0c      	ite	eq
 800f586:	2301      	moveq	r3, #1
 800f588:	2300      	movne	r3, #0
 800f58a:	73fb      	strb	r3, [r7, #15]
            break;
 800f58c:	e016      	b.n	800f5bc <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800f58e:	79bb      	ldrb	r3, [r7, #6]
 800f590:	2b09      	cmp	r3, #9
 800f592:	bf0c      	ite	eq
 800f594:	2301      	moveq	r3, #1
 800f596:	2300      	movne	r3, #0
 800f598:	73fb      	strb	r3, [r7, #15]
            break;
 800f59a:	e00f      	b.n	800f5bc <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800f59c:	79bb      	ldrb	r3, [r7, #6]
 800f59e:	2b0a      	cmp	r3, #10
 800f5a0:	d002      	beq.n	800f5a8 <validateTransitionAck+0xc4>
 800f5a2:	79bb      	ldrb	r3, [r7, #6]
 800f5a4:	2b09      	cmp	r3, #9
 800f5a6:	d101      	bne.n	800f5ac <validateTransitionAck+0xc8>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e000      	b.n	800f5ae <validateTransitionAck+0xca>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	73fb      	strb	r3, [r7, #15]
 800f5b0:	7bfb      	ldrb	r3, [r7, #15]
 800f5b2:	f003 0301 	and.w	r3, r3, #1
 800f5b6:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800f5b8:	e000      	b.n	800f5bc <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800f5ba:	bf00      	nop
    }

    return isValid;
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop

0800f5cc <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	460a      	mov	r2, r1
 800f5d6:	71fb      	strb	r3, [r7, #7]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800f5e0:	79fb      	ldrb	r3, [r7, #7]
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d009      	beq.n	800f5fa <isPublishOutgoing+0x2e>
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	dc15      	bgt.n	800f616 <isPublishOutgoing+0x4a>
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	dc02      	bgt.n	800f5f4 <isPublishOutgoing+0x28>
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	da03      	bge.n	800f5fa <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800f5f2:	e010      	b.n	800f616 <isPublishOutgoing+0x4a>
    switch( packetType )
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	d007      	beq.n	800f608 <isPublishOutgoing+0x3c>
            break;
 800f5f8:	e00d      	b.n	800f616 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800f5fa:	79bb      	ldrb	r3, [r7, #6]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	bf0c      	ite	eq
 800f600:	2301      	moveq	r3, #1
 800f602:	2300      	movne	r3, #0
 800f604:	73fb      	strb	r3, [r7, #15]
            break;
 800f606:	e007      	b.n	800f618 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800f608:	79bb      	ldrb	r3, [r7, #6]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	bf0c      	ite	eq
 800f60e:	2301      	moveq	r3, #1
 800f610:	2300      	movne	r3, #0
 800f612:	73fb      	strb	r3, [r7, #15]
            break;
 800f614:	e000      	b.n	800f618 <isPublishOutgoing+0x4c>
            break;
 800f616:	bf00      	nop
    }

    return isOutgoing;
 800f618:	7bfb      	ldrb	r3, [r7, #15]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
	...

0800f628 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	4613      	mov	r3, r2
 800f636:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800f638:	2300      	movs	r3, #0
 800f63a:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800f63c:	88fb      	ldrh	r3, [r7, #6]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d106      	bne.n	800f650 <findInRecord+0x28>
 800f642:	4b1b      	ldr	r3, [pc, #108]	; (800f6b0 <findInRecord+0x88>)
 800f644:	4a1b      	ldr	r2, [pc, #108]	; (800f6b4 <findInRecord+0x8c>)
 800f646:	f240 11c7 	movw	r1, #455	; 0x1c7
 800f64a:	481b      	ldr	r0, [pc, #108]	; (800f6b8 <findInRecord+0x90>)
 800f64c:	f004 f8ce 	bl	80137ec <__assert_func>

    *pCurrentState = MQTTStateNull;
 800f650:	6a3b      	ldr	r3, [r7, #32]
 800f652:	2200      	movs	r2, #0
 800f654:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800f656:	2300      	movs	r3, #0
 800f658:	617b      	str	r3, [r7, #20]
 800f65a:	e019      	b.n	800f690 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	4413      	add	r3, r2
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	88fa      	ldrh	r2, [r7, #6]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d10e      	bne.n	800f68a <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	4413      	add	r3, r2
 800f674:	789a      	ldrb	r2, [r3, #2]
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	4413      	add	r3, r2
 800f682:	78da      	ldrb	r2, [r3, #3]
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	701a      	strb	r2, [r3, #0]
            break;
 800f688:	e006      	b.n	800f698 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	3301      	adds	r3, #1
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	429a      	cmp	r2, r3
 800f696:	d3e1      	bcc.n	800f65c <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800f698:	697a      	ldr	r2, [r7, #20]
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d102      	bne.n	800f6a6 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	43db      	mvns	r3, r3
 800f6a4:	617b      	str	r3, [r7, #20]
    }

    return index;
 800f6a6:	697b      	ldr	r3, [r7, #20]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	080198ec 	.word	0x080198ec
 800f6b4:	08019ed4 	.word	0x08019ed4
 800f6b8:	08019910 	.word	0x08019910

0800f6bc <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	43db      	mvns	r3, r3
 800f6ce:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d150      	bne.n	800f778 <compactRecords+0xbc>
 800f6d6:	4b2d      	ldr	r3, [pc, #180]	; (800f78c <compactRecords+0xd0>)
 800f6d8:	4a2d      	ldr	r2, [pc, #180]	; (800f790 <compactRecords+0xd4>)
 800f6da:	f240 11e5 	movw	r1, #485	; 0x1e5
 800f6de:	482d      	ldr	r0, [pc, #180]	; (800f794 <compactRecords+0xd8>)
 800f6e0:	f004 f884 	bl	80137ec <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d107      	bne.n	800f702 <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	43db      	mvns	r3, r3
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d13a      	bne.n	800f772 <compactRecords+0xb6>
            {
                emptyIndex = index;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	60bb      	str	r3, [r7, #8]
 800f700:	e037      	b.n	800f772 <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800f702:	2300      	movs	r3, #0
 800f704:	43db      	mvns	r3, r3
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d032      	beq.n	800f772 <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	441a      	add	r2, r3
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	440b      	add	r3, r1
 800f71c:	8812      	ldrh	r2, [r2, #0]
 800f71e:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	441a      	add	r2, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	6879      	ldr	r1, [r7, #4]
 800f72e:	440b      	add	r3, r1
 800f730:	7892      	ldrb	r2, [r2, #2]
 800f732:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	441a      	add	r2, r3
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	6879      	ldr	r1, [r7, #4]
 800f742:	440b      	add	r3, r1
 800f744:	78d2      	ldrb	r2, [r2, #3]
 800f746:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	4413      	add	r3, r2
 800f750:	2200      	movs	r2, #0
 800f752:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	4413      	add	r3, r2
 800f75c:	2200      	movs	r2, #0
 800f75e:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	4413      	add	r3, r2
 800f768:	2200      	movs	r2, #0
 800f76a:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	3301      	adds	r3, #1
 800f770:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3301      	adds	r3, #1
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d3b1      	bcc.n	800f6e4 <compactRecords+0x28>
            }
        }
    }
}
 800f780:	bf00      	nop
 800f782:	bf00      	nop
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	08019940 	.word	0x08019940
 800f790:	08019ee4 	.word	0x08019ee4
 800f794:	08019910 	.word	0x08019910

0800f798 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b088      	sub	sp, #32
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	80fb      	strh	r3, [r7, #6]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800f7be:	88fb      	ldrh	r3, [r7, #6]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d106      	bne.n	800f7d2 <addRecord+0x3a>
 800f7c4:	4b32      	ldr	r3, [pc, #200]	; (800f890 <addRecord+0xf8>)
 800f7c6:	4a33      	ldr	r2, [pc, #204]	; (800f894 <addRecord+0xfc>)
 800f7c8:	f44f 7105 	mov.w	r1, #532	; 0x214
 800f7cc:	4832      	ldr	r0, [pc, #200]	; (800f898 <addRecord+0x100>)
 800f7ce:	f004 f80d 	bl	80137ec <__assert_func>
    assert( qos != MQTTQoS0 );
 800f7d2:	797b      	ldrb	r3, [r7, #5]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d106      	bne.n	800f7e6 <addRecord+0x4e>
 800f7d8:	4b30      	ldr	r3, [pc, #192]	; (800f89c <addRecord+0x104>)
 800f7da:	4a2e      	ldr	r2, [pc, #184]	; (800f894 <addRecord+0xfc>)
 800f7dc:	f240 2115 	movw	r1, #533	; 0x215
 800f7e0:	482d      	ldr	r0, [pc, #180]	; (800f898 <addRecord+0x100>)
 800f7e2:	f004 f803 	bl	80137ec <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f7ec:	3b01      	subs	r3, #1
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d003      	beq.n	800f802 <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800f7fa:	68b9      	ldr	r1, [r7, #8]
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f7ff ff5d 	bl	800f6bc <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	3b01      	subs	r3, #1
 800f806:	61bb      	str	r3, [r7, #24]
 800f808:	e021      	b.n	800f84e <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	4413      	add	r3, r2
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d108      	bne.n	800f82a <addRecord+0x92>
        {
            if( validEntryFound == false )
 800f818:	7cfb      	ldrb	r3, [r7, #19]
 800f81a:	f083 0301 	eor.w	r3, r3, #1
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b00      	cmp	r3, #0
 800f822:	d011      	beq.n	800f848 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	617b      	str	r3, [r7, #20]
 800f828:	e00e      	b.n	800f848 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800f82a:	2301      	movs	r3, #1
 800f82c:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	4413      	add	r3, r2
 800f836:	881b      	ldrh	r3, [r3, #0]
 800f838:	88fa      	ldrh	r2, [r7, #6]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d104      	bne.n	800f848 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800f83e:	2309      	movs	r3, #9
 800f840:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	617b      	str	r3, [r7, #20]
                break;
 800f846:	e005      	b.n	800f854 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	61bb      	str	r3, [r7, #24]
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	2b00      	cmp	r3, #0
 800f852:	dada      	bge.n	800f80a <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d214      	bcs.n	800f886 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	4413      	add	r3, r2
 800f864:	88fa      	ldrh	r2, [r7, #6]
 800f866:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	797a      	ldrb	r2, [r7, #5]
 800f872:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	4413      	add	r3, r2
 800f87c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f880:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800f882:	2300      	movs	r3, #0
 800f884:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800f886:	7ffb      	ldrb	r3, [r7, #31]
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3720      	adds	r7, #32
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	080198ec 	.word	0x080198ec
 800f894:	08019ef4 	.word	0x08019ef4
 800f898:	08019910 	.word	0x08019910
 800f89c:	08019950 	.word	0x08019950

0800f8a0 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	71fb      	strb	r3, [r7, #7]
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d106      	bne.n	800f8ca <updateRecord+0x2a>
 800f8bc:	4b13      	ldr	r3, [pc, #76]	; (800f90c <updateRecord+0x6c>)
 800f8be:	4a14      	ldr	r2, [pc, #80]	; (800f910 <updateRecord+0x70>)
 800f8c0:	f240 2151 	movw	r1, #593	; 0x251
 800f8c4:	4813      	ldr	r0, [pc, #76]	; (800f914 <updateRecord+0x74>)
 800f8c6:	f003 ff91 	bl	80137ec <__assert_func>

    if( shouldDelete == true )
 800f8ca:	79bb      	ldrb	r3, [r7, #6]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d012      	beq.n	800f8f6 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	68fa      	ldr	r2, [r7, #12]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	2200      	movs	r2, #0
 800f8da:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800f8f4:	e005      	b.n	800f902 <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	79fa      	ldrb	r2, [r7, #7]
 800f900:	70da      	strb	r2, [r3, #3]
}
 800f902:	bf00      	nop
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	08019940 	.word	0x08019940
 800f910:	08019f00 	.word	0x08019f00
 800f914:	08019910 	.word	0x08019910

0800f918 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b088      	sub	sp, #32
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	460b      	mov	r3, r1
 800f922:	607a      	str	r2, [r7, #4]
 800f924:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800f926:	2300      	movs	r3, #0
 800f928:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800f92a:	2300      	movs	r3, #0
 800f92c:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800f92e:	2300      	movs	r3, #0
 800f930:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800f932:	2300      	movs	r3, #0
 800f934:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d106      	bne.n	800f94a <stateSelect+0x32>
 800f93c:	4b43      	ldr	r3, [pc, #268]	; (800fa4c <stateSelect+0x134>)
 800f93e:	4a44      	ldr	r2, [pc, #272]	; (800fa50 <stateSelect+0x138>)
 800f940:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800f944:	4843      	ldr	r0, [pc, #268]	; (800fa54 <stateSelect+0x13c>)
 800f946:	f003 ff51 	bl	80137ec <__assert_func>
    assert( searchStates != 0U );
 800f94a:	897b      	ldrh	r3, [r7, #10]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d106      	bne.n	800f95e <stateSelect+0x46>
 800f950:	4b41      	ldr	r3, [pc, #260]	; (800fa58 <stateSelect+0x140>)
 800f952:	4a3f      	ldr	r2, [pc, #252]	; (800fa50 <stateSelect+0x138>)
 800f954:	f240 216d 	movw	r1, #621	; 0x26d
 800f958:	483e      	ldr	r0, [pc, #248]	; (800fa54 <stateSelect+0x13c>)
 800f95a:	f003 ff47 	bl	80137ec <__assert_func>
    assert( pCursor != NULL );
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d106      	bne.n	800f972 <stateSelect+0x5a>
 800f964:	4b3d      	ldr	r3, [pc, #244]	; (800fa5c <stateSelect+0x144>)
 800f966:	4a3a      	ldr	r2, [pc, #232]	; (800fa50 <stateSelect+0x138>)
 800f968:	f240 216e 	movw	r1, #622	; 0x26e
 800f96c:	4839      	ldr	r0, [pc, #228]	; (800fa54 <stateSelect+0x13c>)
 800f96e:	f003 ff3d 	bl	80137ec <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800f972:	8bbb      	ldrh	r3, [r7, #28]
 800f974:	f043 0302 	orr.w	r3, r3, #2
 800f978:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800f97a:	8bbb      	ldrh	r3, [r7, #28]
 800f97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f980:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800f982:	8bbb      	ldrh	r3, [r7, #28]
 800f984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f988:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800f98a:	8bbb      	ldrh	r3, [r7, #28]
 800f98c:	f043 0310 	orr.w	r3, r3, #16
 800f990:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800f992:	8bbb      	ldrh	r3, [r7, #28]
 800f994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f998:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800f99a:	8bba      	ldrh	r2, [r7, #28]
 800f99c:	897b      	ldrh	r3, [r7, #10]
 800f99e:	4013      	ands	r3, r2
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <stateSelect+0x9c>
 800f9a6:	4b2e      	ldr	r3, [pc, #184]	; (800fa60 <stateSelect+0x148>)
 800f9a8:	4a29      	ldr	r2, [pc, #164]	; (800fa50 <stateSelect+0x138>)
 800f9aa:	f44f 711e 	mov.w	r1, #632	; 0x278
 800f9ae:	4829      	ldr	r0, [pc, #164]	; (800fa54 <stateSelect+0x13c>)
 800f9b0:	f003 ff1c 	bl	80137ec <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800f9b4:	8bbb      	ldrh	r3, [r7, #28]
 800f9b6:	43da      	mvns	r2, r3
 800f9b8:	897b      	ldrh	r3, [r7, #10]
 800f9ba:	4013      	ands	r3, r2
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d006      	beq.n	800f9ce <stateSelect+0xb6>
 800f9c0:	4b28      	ldr	r3, [pc, #160]	; (800fa64 <stateSelect+0x14c>)
 800f9c2:	4a23      	ldr	r2, [pc, #140]	; (800fa50 <stateSelect+0x138>)
 800f9c4:	f240 2179 	movw	r1, #633	; 0x279
 800f9c8:	4822      	ldr	r0, [pc, #136]	; (800fa54 <stateSelect+0x13c>)
 800f9ca:	f003 ff0f 	bl	80137ec <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800f9da:	e02d      	b.n	800fa38 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800f9dc:	897a      	ldrh	r2, [r7, #10]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	69b9      	ldr	r1, [r7, #24]
 800f9e6:	440b      	add	r3, r1
 800f9e8:	78db      	ldrb	r3, [r3, #3]
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	408b      	lsls	r3, r1
 800f9f0:	401a      	ands	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	69b9      	ldr	r1, [r7, #24]
 800f9fa:	440b      	add	r3, r1
 800f9fc:	78db      	ldrb	r3, [r3, #3]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	2301      	movs	r3, #1
 800fa02:	408b      	lsls	r3, r1
 800fa04:	429a      	cmp	r2, r3
 800fa06:	bf0c      	ite	eq
 800fa08:	2301      	moveq	r3, #1
 800fa0a:	2300      	movne	r3, #0
 800fa0c:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800fa0e:	7dfb      	ldrb	r3, [r7, #23]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00c      	beq.n	800fa2e <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	69ba      	ldr	r2, [r7, #24]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	1c5a      	adds	r2, r3, #1
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	601a      	str	r2, [r3, #0]
            break;
 800fa2c:	e009      	b.n	800fa42 <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	693a      	ldr	r2, [r7, #16]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d8cc      	bhi.n	800f9dc <stateSelect+0xc4>
    }

    return packetId;
 800fa42:	8bfb      	ldrh	r3, [r7, #30]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3720      	adds	r7, #32
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	08019960 	.word	0x08019960
 800fa50:	08019f10 	.word	0x08019f10
 800fa54:	08019910 	.word	0x08019910
 800fa58:	08019978 	.word	0x08019978
 800fa5c:	0801998c 	.word	0x0801998c
 800fa60:	0801999c 	.word	0x0801999c
 800fa64:	080199c4 	.word	0x080199c4

0800fa68 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	71fb      	strb	r3, [r7, #7]
 800fa72:	460b      	mov	r3, r1
 800fa74:	71bb      	strb	r3, [r7, #6]
 800fa76:	4613      	mov	r3, r2
 800fa78:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800fa7e:	797b      	ldrb	r3, [r7, #5]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	bf0c      	ite	eq
 800fa84:	2301      	moveq	r3, #1
 800fa86:	2300      	movne	r3, #0
 800fa88:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800fa8a:	79fb      	ldrb	r3, [r7, #7]
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d827      	bhi.n	800fae0 <MQTT_CalculateStateAck+0x78>
 800fa90:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <MQTT_CalculateStateAck+0x30>)
 800fa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa96:	bf00      	nop
 800fa98:	0800faa9 	.word	0x0800faa9
 800fa9c:	0800fabb 	.word	0x0800fabb
 800faa0:	0800facb 	.word	0x0800facb
 800faa4:	0800fadb 	.word	0x0800fadb
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800faa8:	797b      	ldrb	r3, [r7, #5]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	bf0c      	ite	eq
 800faae:	2301      	moveq	r3, #1
 800fab0:	2300      	movne	r3, #0
 800fab2:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800fab4:	230a      	movs	r3, #10
 800fab6:	73fb      	strb	r3, [r7, #15]
            break;
 800fab8:	e013      	b.n	800fae2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800faba:	79bb      	ldrb	r3, [r7, #6]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <MQTT_CalculateStateAck+0x5c>
 800fac0:	2308      	movs	r3, #8
 800fac2:	e000      	b.n	800fac6 <MQTT_CalculateStateAck+0x5e>
 800fac4:	2304      	movs	r3, #4
 800fac6:	73fb      	strb	r3, [r7, #15]
            break;
 800fac8:	e00b      	b.n	800fae2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800faca:	79bb      	ldrb	r3, [r7, #6]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <MQTT_CalculateStateAck+0x6c>
 800fad0:	2309      	movs	r3, #9
 800fad2:	e000      	b.n	800fad6 <MQTT_CalculateStateAck+0x6e>
 800fad4:	2305      	movs	r3, #5
 800fad6:	73fb      	strb	r3, [r7, #15]
            break;
 800fad8:	e003      	b.n	800fae2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800fada:	230a      	movs	r3, #10
 800fadc:	73fb      	strb	r3, [r7, #15]
            break;
 800fade:	e000      	b.n	800fae2 <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800fae0:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800fae2:	7bbb      	ldrb	r3, [r7, #14]
 800fae4:	f083 0301 	eor.w	r3, r3, #1
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800faee:	2300      	movs	r3, #0
 800faf0:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800faf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3714      	adds	r7, #20
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b088      	sub	sp, #32
 800fb04:	af02      	add	r7, sp, #8
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
 800fb0c:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800fb0e:	2308      	movs	r3, #8
 800fb10:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800fb12:	2300      	movs	r3, #0
 800fb14:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800fb16:	2300      	movs	r3, #0
 800fb18:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d106      	bne.n	800fb2e <updateStateAck+0x2e>
 800fb20:	4b22      	ldr	r3, [pc, #136]	; (800fbac <updateStateAck+0xac>)
 800fb22:	4a23      	ldr	r2, [pc, #140]	; (800fbb0 <updateStateAck+0xb0>)
 800fb24:	f240 21ce 	movw	r1, #718	; 0x2ce
 800fb28:	4822      	ldr	r0, [pc, #136]	; (800fbb4 <updateStateAck+0xb4>)
 800fb2a:	f003 fe5f 	bl	80137ec <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800fb2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb32:	2b0a      	cmp	r3, #10
 800fb34:	d003      	beq.n	800fb3e <updateStateAck+0x3e>
 800fb36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb3a:	2b04      	cmp	r3, #4
 800fb3c:	d101      	bne.n	800fb42 <updateStateAck+0x42>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <updateStateAck+0x44>
 800fb42:	2300      	movs	r3, #0
 800fb44:	75bb      	strb	r3, [r7, #22]
 800fb46:	7dbb      	ldrb	r3, [r7, #22]
 800fb48:	f003 0301 	and.w	r3, r3, #1
 800fb4c:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800fb4e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800fb52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb56:	4611      	mov	r1, r2
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7ff fcc3 	bl	800f4e4 <validateTransitionAck>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800fb62:	7d7b      	ldrb	r3, [r7, #21]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d01c      	beq.n	800fba2 <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800fb6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fb70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d014      	beq.n	800fba2 <updateStateAck+0xa2>
        {
            updateRecord( records,
 800fb78:	7dbb      	ldrb	r3, [r7, #22]
 800fb7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800fb7e:	6879      	ldr	r1, [r7, #4]
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f7ff fe8d 	bl	800f8a0 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800fb86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb8a:	2b04      	cmp	r3, #4
 800fb8c:	d109      	bne.n	800fba2 <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800fb8e:	887a      	ldrh	r2, [r7, #2]
 800fb90:	2304      	movs	r3, #4
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	2302      	movs	r3, #2
 800fb96:	68b9      	ldr	r1, [r7, #8]
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f7ff fdfd 	bl	800f798 <addRecord>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800fba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	08019940 	.word	0x08019940
 800fbb0:	08019f1c 	.word	0x08019f1c
 800fbb4:	08019910 	.word	0x08019910

0800fbb8 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800fbb8:	b590      	push	{r4, r7, lr}
 800fbba:	b089      	sub	sp, #36	; 0x24
 800fbbc:	af02      	add	r7, sp, #8
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	80fb      	strh	r3, [r7, #6]
 800fbca:	4613      	mov	r3, r2
 800fbcc:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d106      	bne.n	800fbea <updateStatePublish+0x32>
 800fbdc:	4b29      	ldr	r3, [pc, #164]	; (800fc84 <updateStatePublish+0xcc>)
 800fbde:	4a2a      	ldr	r2, [pc, #168]	; (800fc88 <updateStatePublish+0xd0>)
 800fbe0:	f240 310b 	movw	r1, #779	; 0x30b
 800fbe4:	4829      	ldr	r0, [pc, #164]	; (800fc8c <updateStatePublish+0xd4>)
 800fbe6:	f003 fe01 	bl	80137ec <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800fbea:	88fb      	ldrh	r3, [r7, #6]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d106      	bne.n	800fbfe <updateStatePublish+0x46>
 800fbf0:	4b27      	ldr	r3, [pc, #156]	; (800fc90 <updateStatePublish+0xd8>)
 800fbf2:	4a25      	ldr	r2, [pc, #148]	; (800fc88 <updateStatePublish+0xd0>)
 800fbf4:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800fbf8:	4824      	ldr	r0, [pc, #144]	; (800fc8c <updateStatePublish+0xd4>)
 800fbfa:	f003 fdf7 	bl	80137ec <__assert_func>
    assert( qos != MQTTQoS0 );
 800fbfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <updateStatePublish+0x5c>
 800fc06:	4b23      	ldr	r3, [pc, #140]	; (800fc94 <updateStatePublish+0xdc>)
 800fc08:	4a1f      	ldr	r2, [pc, #124]	; (800fc88 <updateStatePublish+0xd0>)
 800fc0a:	f240 310d 	movw	r1, #781	; 0x30d
 800fc0e:	481f      	ldr	r0, [pc, #124]	; (800fc8c <updateStatePublish+0xd4>)
 800fc10:	f003 fdec 	bl	80137ec <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800fc14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc18:	797a      	ldrb	r2, [r7, #5]
 800fc1a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800fc1e:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800fc22:	f7ff fbf9 	bl	800f418 <validateTransitionPublish>
 800fc26:	4603      	mov	r3, r0
 800fc28:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800fc2a:	7dbb      	ldrb	r3, [r7, #22]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d021      	beq.n	800fc74 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800fc30:	797b      	ldrb	r3, [r7, #5]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d10f      	bne.n	800fc56 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6858      	ldr	r0, [r3, #4]
                                pMqttContext->incomingPublishRecordMaxCount,
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	68d9      	ldr	r1, [r3, #12]
            status = addRecord( pMqttContext->incomingPublishRecords,
 800fc3e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800fc42:	88fa      	ldrh	r2, [r7, #6]
 800fc44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800fc48:	9300      	str	r3, [sp, #0]
 800fc4a:	4623      	mov	r3, r4
 800fc4c:	f7ff fda4 	bl	800f798 <addRecord>
 800fc50:	4603      	mov	r3, r0
 800fc52:	75fb      	strb	r3, [r7, #23]
 800fc54:	e010      	b.n	800fc78 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800fc56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fc5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d00a      	beq.n	800fc78 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6818      	ldr	r0, [r3, #0]
 800fc66:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	68b9      	ldr	r1, [r7, #8]
 800fc6e:	f7ff fe17 	bl	800f8a0 <updateRecord>
 800fc72:	e001      	b.n	800fc78 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800fc74:	2308      	movs	r3, #8
 800fc76:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800fc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	371c      	adds	r7, #28
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd90      	pop	{r4, r7, pc}
 800fc82:	bf00      	nop
 800fc84:	08019960 	.word	0x08019960
 800fc88:	08019f2c 	.word	0x08019f2c
 800fc8c:	08019910 	.word	0x08019910
 800fc90:	080198ec 	.word	0x080198ec
 800fc94:	08019950 	.word	0x08019950

0800fc98 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800fc98:	b590      	push	{r4, r7, lr}
 800fc9a:	b087      	sub	sp, #28
 800fc9c:	af02      	add	r7, sp, #8
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	807b      	strh	r3, [r7, #2]
 800fca4:	4613      	mov	r3, r2
 800fca6:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800fcac:	787b      	ldrb	r3, [r7, #1]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d102      	bne.n	800fcb8 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	73fb      	strb	r3, [r7, #15]
 800fcb6:	e014      	b.n	800fce2 <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800fcb8:	887b      	ldrh	r3, [r7, #2]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <MQTT_ReserveState+0x2c>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d102      	bne.n	800fcca <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	73fb      	strb	r3, [r7, #15]
 800fcc8:	e00b      	b.n	800fce2 <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6818      	ldr	r0, [r3, #0]
                            pMqttContext->outgoingPublishRecordMaxCount,
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6899      	ldr	r1, [r3, #8]
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800fcd2:	787b      	ldrb	r3, [r7, #1]
 800fcd4:	887a      	ldrh	r2, [r7, #2]
 800fcd6:	2401      	movs	r4, #1
 800fcd8:	9400      	str	r4, [sp, #0]
 800fcda:	f7ff fd5d 	bl	800f798 <addRecord>
 800fcde:	4603      	mov	r3, r0
 800fce0:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800fce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3714      	adds	r7, #20
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd90      	pop	{r4, r7, pc}

0800fcec <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	71fb      	strb	r3, [r7, #7]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800fd00:	79bb      	ldrb	r3, [r7, #6]
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	d011      	beq.n	800fd2a <MQTT_CalculateStatePublish+0x3e>
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	dc17      	bgt.n	800fd3a <MQTT_CalculateStatePublish+0x4e>
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d002      	beq.n	800fd14 <MQTT_CalculateStatePublish+0x28>
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d003      	beq.n	800fd1a <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800fd12:	e012      	b.n	800fd3a <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800fd14:	230a      	movs	r3, #10
 800fd16:	73fb      	strb	r3, [r7, #15]
            break;
 800fd18:	e010      	b.n	800fd3c <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d101      	bne.n	800fd24 <MQTT_CalculateStatePublish+0x38>
 800fd20:	2306      	movs	r3, #6
 800fd22:	e000      	b.n	800fd26 <MQTT_CalculateStatePublish+0x3a>
 800fd24:	2302      	movs	r3, #2
 800fd26:	73fb      	strb	r3, [r7, #15]
            break;
 800fd28:	e008      	b.n	800fd3c <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <MQTT_CalculateStatePublish+0x48>
 800fd30:	2307      	movs	r3, #7
 800fd32:	e000      	b.n	800fd36 <MQTT_CalculateStatePublish+0x4a>
 800fd34:	2303      	movs	r3, #3
 800fd36:	73fb      	strb	r3, [r7, #15]
            break;
 800fd38:	e000      	b.n	800fd3c <MQTT_CalculateStatePublish+0x50>
            break;
 800fd3a:	bf00      	nop
    }

    return calculatedState;
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr

0800fd4a <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800fd4a:	b590      	push	{r4, r7, lr}
 800fd4c:	b08b      	sub	sp, #44	; 0x2c
 800fd4e:	af04      	add	r7, sp, #16
 800fd50:	6078      	str	r0, [r7, #4]
 800fd52:	4608      	mov	r0, r1
 800fd54:	4611      	mov	r1, r2
 800fd56:	461a      	mov	r2, r3
 800fd58:	4603      	mov	r3, r0
 800fd5a:	807b      	strh	r3, [r7, #2]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	707b      	strb	r3, [r7, #1]
 800fd60:	4613      	mov	r3, r2
 800fd62:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800fd64:	2300      	movs	r3, #0
 800fd66:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800fd70:	2300      	movs	r3, #0
 800fd72:	43db      	mvns	r3, r3
 800fd74:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <MQTT_UpdateStatePublish+0x3c>
 800fd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d102      	bne.n	800fd8c <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800fd86:	2301      	movs	r3, #1
 800fd88:	75fb      	strb	r3, [r7, #23]
 800fd8a:	e028      	b.n	800fdde <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800fd8c:	783b      	ldrb	r3, [r7, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d103      	bne.n	800fd9a <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800fd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd94:	220a      	movs	r2, #10
 800fd96:	701a      	strb	r2, [r3, #0]
 800fd98:	e021      	b.n	800fdde <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800fd9a:	887b      	ldrh	r3, [r7, #2]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800fda0:	2301      	movs	r3, #1
 800fda2:	75fb      	strb	r3, [r7, #23]
 800fda4:	e01b      	b.n	800fdde <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800fda6:	787b      	ldrb	r3, [r7, #1]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d118      	bne.n	800fdde <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6818      	ldr	r0, [r3, #0]
                                    pMqttContext->outgoingPublishRecordMaxCount,
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6899      	ldr	r1, [r3, #8]
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800fdb4:	f107 040d 	add.w	r4, r7, #13
 800fdb8:	887a      	ldrh	r2, [r7, #2]
 800fdba:	f107 030e 	add.w	r3, r7, #14
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	4623      	mov	r3, r4
 800fdc2:	f7ff fc31 	bl	800f628 <findInRecord>
 800fdc6:	6138      	str	r0, [r7, #16]
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800fdc8:	2300      	movs	r3, #0
 800fdca:	43db      	mvns	r3, r3
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d003      	beq.n	800fdda <MQTT_UpdateStatePublish+0x90>
 800fdd2:	7b7b      	ldrb	r3, [r7, #13]
 800fdd4:	783a      	ldrb	r2, [r7, #0]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d001      	beq.n	800fdde <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800fdda:	2301      	movs	r3, #1
 800fddc:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800fdde:	783b      	ldrb	r3, [r7, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d020      	beq.n	800fe26 <MQTT_UpdateStatePublish+0xdc>
 800fde4:	7dfb      	ldrb	r3, [r7, #23]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d11d      	bne.n	800fe26 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800fdea:	783a      	ldrb	r2, [r7, #0]
 800fdec:	787b      	ldrb	r3, [r7, #1]
 800fdee:	4611      	mov	r1, r2
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff ff7b 	bl	800fcec <MQTT_CalculateStatePublish>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800fdfa:	7bbb      	ldrb	r3, [r7, #14]
 800fdfc:	7878      	ldrb	r0, [r7, #1]
 800fdfe:	8879      	ldrh	r1, [r7, #2]
 800fe00:	7bfa      	ldrb	r2, [r7, #15]
 800fe02:	9202      	str	r2, [sp, #8]
 800fe04:	9301      	str	r3, [sp, #4]
 800fe06:	783b      	ldrb	r3, [r7, #0]
 800fe08:	9300      	str	r3, [sp, #0]
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	460a      	mov	r2, r1
 800fe0e:	6939      	ldr	r1, [r7, #16]
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7ff fed1 	bl	800fbb8 <updateStatePublish>
 800fe16:	4603      	mov	r3, r0
 800fe18:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800fe1a:	7dfb      	ldrb	r3, [r7, #23]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d102      	bne.n	800fe26 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800fe20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe22:	7bfa      	ldrb	r2, [r7, #15]
 800fe24:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	371c      	adds	r7, #28
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd90      	pop	{r4, r7, pc}

0800fe30 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08a      	sub	sp, #40	; 0x28
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	4608      	mov	r0, r1
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	4603      	mov	r3, r0
 800fe40:	807b      	strh	r3, [r7, #2]
 800fe42:	460b      	mov	r3, r1
 800fe44:	707b      	strb	r3, [r7, #1]
 800fe46:	4613      	mov	r3, r2
 800fe48:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800fe52:	783a      	ldrb	r2, [r7, #0]
 800fe54:	787b      	ldrb	r3, [r7, #1]
 800fe56:	4611      	mov	r1, r2
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fbb7 	bl	800f5cc <isPublishOutgoing>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800fe66:	2300      	movs	r3, #0
 800fe68:	43db      	mvns	r3, r3
 800fe6a:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	43db      	mvns	r3, r3
 800fe70:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800fe76:	2305      	movs	r3, #5
 800fe78:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <MQTT_UpdateStateAck+0x56>
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d102      	bne.n	800fe8c <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800fe86:	2301      	movs	r3, #1
 800fe88:	74fb      	strb	r3, [r7, #19]
 800fe8a:	e027      	b.n	800fedc <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800fe8c:	887b      	ldrh	r3, [r7, #2]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d102      	bne.n	800fe98 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800fe92:	2301      	movs	r3, #1
 800fe94:	74fb      	strb	r3, [r7, #19]
 800fe96:	e021      	b.n	800fedc <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800fe98:	787b      	ldrb	r3, [r7, #1]
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d902      	bls.n	800fea4 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	74fb      	strb	r3, [r7, #19]
 800fea2:	e01b      	b.n	800fedc <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800fea4:	7c7b      	ldrb	r3, [r7, #17]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d006      	beq.n	800feb8 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	61fb      	str	r3, [r7, #28]
 800feb6:	e005      	b.n	800fec4 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800fec4:	f107 010f 	add.w	r1, r7, #15
 800fec8:	887a      	ldrh	r2, [r7, #2]
 800feca:	f107 0310 	add.w	r3, r7, #16
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	460b      	mov	r3, r1
 800fed2:	69f9      	ldr	r1, [r7, #28]
 800fed4:	6978      	ldr	r0, [r7, #20]
 800fed6:	f7ff fba7 	bl	800f628 <findInRecord>
 800feda:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800fedc:	2300      	movs	r3, #0
 800fede:	43db      	mvns	r3, r3
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d01a      	beq.n	800ff1c <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800fee6:	7bfa      	ldrb	r2, [r7, #15]
 800fee8:	7839      	ldrb	r1, [r7, #0]
 800feea:	787b      	ldrb	r3, [r7, #1]
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff fdbb 	bl	800fa68 <MQTT_CalculateStateAck>
 800fef2:	4603      	mov	r3, r0
 800fef4:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800fef6:	7c3b      	ldrb	r3, [r7, #16]
 800fef8:	8879      	ldrh	r1, [r7, #2]
 800fefa:	7cba      	ldrb	r2, [r7, #18]
 800fefc:	9201      	str	r2, [sp, #4]
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	460b      	mov	r3, r1
 800ff02:	69ba      	ldr	r2, [r7, #24]
 800ff04:	69f9      	ldr	r1, [r7, #28]
 800ff06:	6978      	ldr	r0, [r7, #20]
 800ff08:	f7ff fdfa 	bl	800fb00 <updateStateAck>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800ff10:	7cfb      	ldrb	r3, [r7, #19]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	7cba      	ldrb	r2, [r7, #18]
 800ff1a:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800ff1c:	7cfb      	ldrb	r3, [r7, #19]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b086      	sub	sp, #24
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	60f8      	str	r0, [r7, #12]
 800ff2e:	60b9      	str	r1, [r7, #8]
 800ff30:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800ff32:	2300      	movs	r3, #0
 800ff34:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800ff36:	2300      	movs	r3, #0
 800ff38:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d01b      	beq.n	800ff78 <MQTT_PubrelToResend+0x52>
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d018      	beq.n	800ff78 <MQTT_PubrelToResend+0x52>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d015      	beq.n	800ff78 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800ff4c:	8abb      	ldrh	r3, [r7, #20]
 800ff4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ff52:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800ff54:	8abb      	ldrh	r3, [r7, #20]
 800ff56:	f043 0310 	orr.w	r3, r3, #16
 800ff5a:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800ff5c:	8abb      	ldrh	r3, [r7, #20]
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	4619      	mov	r1, r3
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f7ff fcd8 	bl	800f918 <stateSelect>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800ff6c:	8afb      	ldrh	r3, [r7, #22]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d002      	beq.n	800ff78 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2204      	movs	r2, #4
 800ff76:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800ff78:	8afb      	ldrh	r3, [r7, #22]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3718      	adds	r7, #24
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
	...

0800ff84 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800ff8a:	af02      	add	r7, sp, #8
 800ff8c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ff90:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ff94:	6018      	str	r0, [r3, #0]
 800ff96:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ff9a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ff9e:	6019      	str	r1, [r3, #0]
 800ffa0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffa4:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ffa8:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ffb0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffb4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	781a      	ldrb	r2, [r3, #0]
 800ffbc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffc0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ffc4:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800ffc6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffca:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	88da      	ldrh	r2, [r3, #6]
 800ffd2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffd6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ffda:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800ffdc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffe0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ffe8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ffec:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800fff0:	2200      	movs	r2, #0
 800fff2:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800fff4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800fff8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	789a      	ldrb	r2, [r3, #2]
 8010000:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010004:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8010008:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 801000a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801000e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	78da      	ldrb	r2, [r3, #3]
 8010016:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801001a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 801001e:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 8010020:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010024:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	791a      	ldrb	r2, [r3, #4]
 801002c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010030:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8010034:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 8010036:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801003a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	795a      	ldrb	r2, [r3, #5]
 8010042:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010046:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 801004a:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 801004c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010050:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	785b      	ldrb	r3, [r3, #1]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d115      	bne.n	8010088 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 801005c:	f107 0314 	add.w	r3, r7, #20
 8010060:	4619      	mov	r1, r3
 8010062:	482a      	ldr	r0, [pc, #168]	; (801010c <transport_recv+0x188>)
 8010064:	f7fb fc5e 	bl	800b924 <ES_WIFI_StartClientConnection>
 8010068:	4603      	mov	r3, r0
 801006a:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 801006e:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <transport_recv+0xf6>
			return 0;
 8010076:	2300      	movs	r3, #0
 8010078:	e042      	b.n	8010100 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 801007a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801007e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2201      	movs	r2, #1
 8010086:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 8010088:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801008c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	7819      	ldrb	r1, [r3, #0]
 8010094:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010098:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	b298      	uxth	r0, r3
 80100a0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80100a4:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 80100a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100ac:	9301      	str	r3, [sp, #4]
 80100ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	4603      	mov	r3, r0
 80100b6:	6812      	ldr	r2, [r2, #0]
 80100b8:	4814      	ldr	r0, [pc, #80]	; (801010c <transport_recv+0x188>)
 80100ba:	f7fb fdd9 	bl	800bc70 <ES_WIFI_ReceiveData>
 80100be:	4603      	mov	r3, r0
 80100c0:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 80100c4:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00a      	beq.n	80100e2 <transport_recv+0x15e>
		socketStatus=0;
 80100cc:	2300      	movs	r3, #0
 80100ce:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 80100d2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80100d6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2200      	movs	r2, #0
 80100de:	705a      	strb	r2, [r3, #1]
 80100e0:	e00c      	b.n	80100fc <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 80100e2:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 80100e6:	461a      	mov	r2, r3
 80100e8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80100ec:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80100f0:	2100      	movs	r1, #0
 80100f2:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 80100f4:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 80100f8:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 80100fc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 8010100:	4618      	mov	r0, r3
 8010102:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	20001140 	.word	0x20001140

08010110 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08e      	sub	sp, #56	; 0x38
 8010114:	af02      	add	r7, sp, #8
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 801011c:	2300      	movs	r3, #0
 801011e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	88db      	ldrh	r3, [r3, #6]
 801012a:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 8010130:	2300      	movs	r3, #0
 8010132:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	789b      	ldrb	r3, [r3, #2]
 8010138:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	78db      	ldrb	r3, [r3, #3]
 801013e:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	791b      	ldrb	r3, [r3, #4]
 8010144:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	795b      	ldrb	r3, [r3, #5]
 801014a:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	785b      	ldrb	r3, [r3, #1]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d111      	bne.n	8010178 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 8010154:	f107 0314 	add.w	r3, r7, #20
 8010158:	4619      	mov	r1, r3
 801015a:	481c      	ldr	r0, [pc, #112]	; (80101cc <transport_send+0xbc>)
 801015c:	f7fb fbe2 	bl	800b924 <ES_WIFI_StartClientConnection>
 8010160:	4603      	mov	r3, r0
 8010162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 8010166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801016a:	2b00      	cmp	r3, #0
 801016c:	d001      	beq.n	8010172 <transport_send+0x62>
			return 0;
 801016e:	2300      	movs	r3, #0
 8010170:	e027      	b.n	80101c2 <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2201      	movs	r2, #1
 8010176:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	7819      	ldrb	r1, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	b29a      	uxth	r2, r3
 8010180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	4613      	mov	r3, r2
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	480e      	ldr	r0, [pc, #56]	; (80101cc <transport_send+0xbc>)
 8010192:	f7fb fcb1 	bl	800baf8 <ES_WIFI_SendData>
 8010196:	4603      	mov	r3, r0
 8010198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 801019c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00a      	beq.n	80101ba <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2200      	movs	r2, #0
 80101a8:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 80101aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101ae:	4619      	mov	r1, r3
 80101b0:	4807      	ldr	r0, [pc, #28]	; (80101d0 <transport_send+0xc0>)
 80101b2:	f004 fb15 	bl	80147e0 <iprintf>
		return 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e003      	b.n	80101c2 <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 80101ba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80101be:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 80101c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3730      	adds	r7, #48	; 0x30
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20001140 	.word	0x20001140
 80101d0:	08019ac4 	.word	0x08019ac4

080101d4 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60ba      	str	r2, [r7, #8]
 80101dc:	607b      	str	r3, [r7, #4]
 80101de:	4603      	mov	r3, r0
 80101e0:	73fb      	strb	r3, [r7, #15]
 80101e2:	460b      	mov	r3, r1
 80101e4:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	7bfa      	ldrb	r2, [r7, #15]
 80101ea:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	7bba      	ldrb	r2, [r7, #14]
 80101f0:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a08      	ldr	r2, [pc, #32]	; (8010218 <init_transport_from_socket+0x44>)
 80101f6:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4a08      	ldr	r2, [pc, #32]	; (801021c <init_transport_from_socket+0x48>)
 80101fc:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	60da      	str	r2, [r3, #12]
}
 801020a:	bf00      	nop
 801020c:	3714      	adds	r7, #20
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	0800ff85 	.word	0x0800ff85
 801021c:	08010111 	.word	0x08010111

08010220 <__NVIC_SetPriority>:
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	6039      	str	r1, [r7, #0]
 801022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010230:	2b00      	cmp	r3, #0
 8010232:	db0a      	blt.n	801024a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	b2da      	uxtb	r2, r3
 8010238:	490c      	ldr	r1, [pc, #48]	; (801026c <__NVIC_SetPriority+0x4c>)
 801023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801023e:	0112      	lsls	r2, r2, #4
 8010240:	b2d2      	uxtb	r2, r2
 8010242:	440b      	add	r3, r1
 8010244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010248:	e00a      	b.n	8010260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	b2da      	uxtb	r2, r3
 801024e:	4908      	ldr	r1, [pc, #32]	; (8010270 <__NVIC_SetPriority+0x50>)
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	f003 030f 	and.w	r3, r3, #15
 8010256:	3b04      	subs	r3, #4
 8010258:	0112      	lsls	r2, r2, #4
 801025a:	b2d2      	uxtb	r2, r2
 801025c:	440b      	add	r3, r1
 801025e:	761a      	strb	r2, [r3, #24]
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr
 801026c:	e000e100 	.word	0xe000e100
 8010270:	e000ed00 	.word	0xe000ed00

08010274 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010274:	b580      	push	{r7, lr}
 8010276:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010278:	2100      	movs	r1, #0
 801027a:	f06f 0004 	mvn.w	r0, #4
 801027e:	f7ff ffcf 	bl	8010220 <__NVIC_SetPriority>
#endif
}
 8010282:	bf00      	nop
 8010284:	bd80      	pop	{r7, pc}
	...

08010288 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801028e:	f3ef 8305 	mrs	r3, IPSR
 8010292:	603b      	str	r3, [r7, #0]
  return(result);
 8010294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010296:	2b00      	cmp	r3, #0
 8010298:	d003      	beq.n	80102a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801029a:	f06f 0305 	mvn.w	r3, #5
 801029e:	607b      	str	r3, [r7, #4]
 80102a0:	e00c      	b.n	80102bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80102a2:	4b0a      	ldr	r3, [pc, #40]	; (80102cc <osKernelInitialize+0x44>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d105      	bne.n	80102b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80102aa:	4b08      	ldr	r3, [pc, #32]	; (80102cc <osKernelInitialize+0x44>)
 80102ac:	2201      	movs	r2, #1
 80102ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	607b      	str	r3, [r7, #4]
 80102b4:	e002      	b.n	80102bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80102b6:	f04f 33ff 	mov.w	r3, #4294967295
 80102ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80102bc:	687b      	ldr	r3, [r7, #4]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	370c      	adds	r7, #12
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop
 80102cc:	20001a40 	.word	0x20001a40

080102d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102d6:	f3ef 8305 	mrs	r3, IPSR
 80102da:	603b      	str	r3, [r7, #0]
  return(result);
 80102dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d003      	beq.n	80102ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80102e2:	f06f 0305 	mvn.w	r3, #5
 80102e6:	607b      	str	r3, [r7, #4]
 80102e8:	e010      	b.n	801030c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80102ea:	4b0b      	ldr	r3, [pc, #44]	; (8010318 <osKernelStart+0x48>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d109      	bne.n	8010306 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80102f2:	f7ff ffbf 	bl	8010274 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80102f6:	4b08      	ldr	r3, [pc, #32]	; (8010318 <osKernelStart+0x48>)
 80102f8:	2202      	movs	r2, #2
 80102fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80102fc:	f001 fbda 	bl	8011ab4 <vTaskStartScheduler>
      stat = osOK;
 8010300:	2300      	movs	r3, #0
 8010302:	607b      	str	r3, [r7, #4]
 8010304:	e002      	b.n	801030c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010306:	f04f 33ff 	mov.w	r3, #4294967295
 801030a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801030c:	687b      	ldr	r3, [r7, #4]
}
 801030e:	4618      	mov	r0, r3
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	20001a40 	.word	0x20001a40

0801031c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801031c:	b580      	push	{r7, lr}
 801031e:	b08e      	sub	sp, #56	; 0x38
 8010320:	af04      	add	r7, sp, #16
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010328:	2300      	movs	r3, #0
 801032a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801032c:	f3ef 8305 	mrs	r3, IPSR
 8010330:	617b      	str	r3, [r7, #20]
  return(result);
 8010332:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010334:	2b00      	cmp	r3, #0
 8010336:	d17e      	bne.n	8010436 <osThreadNew+0x11a>
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d07b      	beq.n	8010436 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801033e:	2380      	movs	r3, #128	; 0x80
 8010340:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010342:	2318      	movs	r3, #24
 8010344:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801034a:	f04f 33ff 	mov.w	r3, #4294967295
 801034e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d045      	beq.n	80103e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d002      	beq.n	8010364 <osThreadNew+0x48>
        name = attr->name;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	699b      	ldr	r3, [r3, #24]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	699b      	ldr	r3, [r3, #24]
 8010370:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d008      	beq.n	801038a <osThreadNew+0x6e>
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	2b38      	cmp	r3, #56	; 0x38
 801037c:	d805      	bhi.n	801038a <osThreadNew+0x6e>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	f003 0301 	and.w	r3, r3, #1
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <osThreadNew+0x72>
        return (NULL);
 801038a:	2300      	movs	r3, #0
 801038c:	e054      	b.n	8010438 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	695b      	ldr	r3, [r3, #20]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d003      	beq.n	801039e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	695b      	ldr	r3, [r3, #20]
 801039a:	089b      	lsrs	r3, r3, #2
 801039c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00e      	beq.n	80103c4 <osThreadNew+0xa8>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	2b5b      	cmp	r3, #91	; 0x5b
 80103ac:	d90a      	bls.n	80103c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d006      	beq.n	80103c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	695b      	ldr	r3, [r3, #20]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d002      	beq.n	80103c4 <osThreadNew+0xa8>
        mem = 1;
 80103be:	2301      	movs	r3, #1
 80103c0:	61bb      	str	r3, [r7, #24]
 80103c2:	e010      	b.n	80103e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d10c      	bne.n	80103e6 <osThreadNew+0xca>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d108      	bne.n	80103e6 <osThreadNew+0xca>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d104      	bne.n	80103e6 <osThreadNew+0xca>
          mem = 0;
 80103dc:	2300      	movs	r3, #0
 80103de:	61bb      	str	r3, [r7, #24]
 80103e0:	e001      	b.n	80103e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d110      	bne.n	801040e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80103f4:	9202      	str	r2, [sp, #8]
 80103f6:	9301      	str	r3, [sp, #4]
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	6a3a      	ldr	r2, [r7, #32]
 8010400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010402:	68f8      	ldr	r0, [r7, #12]
 8010404:	f001 f90a 	bl	801161c <xTaskCreateStatic>
 8010408:	4603      	mov	r3, r0
 801040a:	613b      	str	r3, [r7, #16]
 801040c:	e013      	b.n	8010436 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d110      	bne.n	8010436 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010414:	6a3b      	ldr	r3, [r7, #32]
 8010416:	b29a      	uxth	r2, r3
 8010418:	f107 0310 	add.w	r3, r7, #16
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f001 f955 	bl	80116d6 <xTaskCreate>
 801042c:	4603      	mov	r3, r0
 801042e:	2b01      	cmp	r3, #1
 8010430:	d001      	beq.n	8010436 <osThreadNew+0x11a>
            hTask = NULL;
 8010432:	2300      	movs	r3, #0
 8010434:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010436:	693b      	ldr	r3, [r7, #16]
}
 8010438:	4618      	mov	r0, r3
 801043a:	3728      	adds	r7, #40	; 0x28
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801044c:	f3ef 8305 	mrs	r3, IPSR
 8010450:	60fb      	str	r3, [r7, #12]
  return(result);
 8010452:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010454:	2b00      	cmp	r3, #0
 8010456:	d003      	beq.n	8010460 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8010458:	f06f 0305 	mvn.w	r3, #5
 801045c:	617b      	str	r3, [r7, #20]
 801045e:	e00b      	b.n	8010478 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d103      	bne.n	801046e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8010466:	f06f 0303 	mvn.w	r3, #3
 801046a:	617b      	str	r3, [r7, #20]
 801046c:	e004      	b.n	8010478 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801046e:	2300      	movs	r3, #0
 8010470:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8010472:	6938      	ldr	r0, [r7, #16]
 8010474:	f001 faa8 	bl	80119c8 <vTaskSuspend>
  }

  return (stat);
 8010478:	697b      	ldr	r3, [r7, #20]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
	...

08010484 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8010484:	b580      	push	{r7, lr}
 8010486:	b088      	sub	sp, #32
 8010488:	af02      	add	r7, sp, #8
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d002      	beq.n	801049e <osThreadFlagsSet+0x1a>
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	da03      	bge.n	80104a6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801049e:	f06f 0303 	mvn.w	r3, #3
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	e035      	b.n	8010512 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80104a6:	f04f 33ff 	mov.w	r3, #4294967295
 80104aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104ac:	f3ef 8305 	mrs	r3, IPSR
 80104b0:	613b      	str	r3, [r7, #16]
  return(result);
 80104b2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d01f      	beq.n	80104f8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80104b8:	2300      	movs	r3, #0
 80104ba:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80104bc:	f107 0308 	add.w	r3, r7, #8
 80104c0:	9300      	str	r3, [sp, #0]
 80104c2:	2300      	movs	r3, #0
 80104c4:	2201      	movs	r2, #1
 80104c6:	6839      	ldr	r1, [r7, #0]
 80104c8:	6978      	ldr	r0, [r7, #20]
 80104ca:	f002 f8d9 	bl	8012680 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80104ce:	f107 030c 	add.w	r3, r7, #12
 80104d2:	2200      	movs	r2, #0
 80104d4:	9200      	str	r2, [sp, #0]
 80104d6:	2200      	movs	r2, #0
 80104d8:	2100      	movs	r1, #0
 80104da:	6978      	ldr	r0, [r7, #20]
 80104dc:	f002 f8d0 	bl	8012680 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d015      	beq.n	8010512 <osThreadFlagsSet+0x8e>
 80104e6:	4b0d      	ldr	r3, [pc, #52]	; (801051c <osThreadFlagsSet+0x98>)
 80104e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	f3bf 8f6f 	isb	sy
 80104f6:	e00c      	b.n	8010512 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80104f8:	2300      	movs	r3, #0
 80104fa:	2201      	movs	r2, #1
 80104fc:	6839      	ldr	r1, [r7, #0]
 80104fe:	6978      	ldr	r0, [r7, #20]
 8010500:	f002 f806 	bl	8012510 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8010504:	f107 030c 	add.w	r3, r7, #12
 8010508:	2200      	movs	r2, #0
 801050a:	2100      	movs	r1, #0
 801050c:	6978      	ldr	r0, [r7, #20]
 801050e:	f001 ffff 	bl	8012510 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8010512:	68fb      	ldr	r3, [r7, #12]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3718      	adds	r7, #24
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	e000ed04 	.word	0xe000ed04

08010520 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8010520:	b580      	push	{r7, lr}
 8010522:	b08c      	sub	sp, #48	; 0x30
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801052c:	f3ef 8305 	mrs	r3, IPSR
 8010530:	617b      	str	r3, [r7, #20]
  return(result);
 8010532:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8010534:	2b00      	cmp	r3, #0
 8010536:	d003      	beq.n	8010540 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8010538:	f06f 0305 	mvn.w	r3, #5
 801053c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801053e:	e06b      	b.n	8010618 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2b00      	cmp	r3, #0
 8010544:	da03      	bge.n	801054e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8010546:	f06f 0303 	mvn.w	r3, #3
 801054a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801054c:	e064      	b.n	8010618 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	f003 0302 	and.w	r3, r3, #2
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8010558:	2300      	movs	r3, #0
 801055a:	62bb      	str	r3, [r7, #40]	; 0x28
 801055c:	e001      	b.n	8010562 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8010562:	2300      	movs	r3, #0
 8010564:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 801056a:	f001 fbb5 	bl	8011cd8 <xTaskGetTickCount>
 801056e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8010570:	f107 0210 	add.w	r2, r7, #16
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010578:	2000      	movs	r0, #0
 801057a:	f001 ff6f 	bl	801245c <xTaskNotifyWait>
 801057e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d137      	bne.n	80105f6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8010586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	4013      	ands	r3, r2
 801058c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010592:	4313      	orrs	r3, r2
 8010594:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	f003 0301 	and.w	r3, r3, #1
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00c      	beq.n	80105ba <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a4:	4013      	ands	r3, r2
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d032      	beq.n	8010612 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10f      	bne.n	80105d2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80105b2:	f06f 0302 	mvn.w	r3, #2
 80105b6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80105b8:	e02e      	b.n	8010618 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	4013      	ands	r3, r2
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d128      	bne.n	8010616 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d103      	bne.n	80105d2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80105ca:	f06f 0302 	mvn.w	r3, #2
 80105ce:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80105d0:	e022      	b.n	8010618 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80105d2:	f001 fb81 	bl	8011cd8 <xTaskGetTickCount>
 80105d6:	4602      	mov	r2, r0
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80105de:	69ba      	ldr	r2, [r7, #24]
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d902      	bls.n	80105ec <osThreadFlagsWait+0xcc>
          tout  = 0;
 80105e6:	2300      	movs	r3, #0
 80105e8:	627b      	str	r3, [r7, #36]	; 0x24
 80105ea:	e00e      	b.n	801060a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80105ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	627b      	str	r3, [r7, #36]	; 0x24
 80105f4:	e009      	b.n	801060a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d103      	bne.n	8010604 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80105fc:	f06f 0302 	mvn.w	r3, #2
 8010600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010602:	e002      	b.n	801060a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8010604:	f06f 0301 	mvn.w	r3, #1
 8010608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1af      	bne.n	8010570 <osThreadFlagsWait+0x50>
 8010610:	e002      	b.n	8010618 <osThreadFlagsWait+0xf8>
            break;
 8010612:	bf00      	nop
 8010614:	e000      	b.n	8010618 <osThreadFlagsWait+0xf8>
            break;
 8010616:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801061a:	4618      	mov	r0, r3
 801061c:	3730      	adds	r7, #48	; 0x30
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010622:	b580      	push	{r7, lr}
 8010624:	b084      	sub	sp, #16
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801062a:	f3ef 8305 	mrs	r3, IPSR
 801062e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010630:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010632:	2b00      	cmp	r3, #0
 8010634:	d003      	beq.n	801063e <osDelay+0x1c>
    stat = osErrorISR;
 8010636:	f06f 0305 	mvn.w	r3, #5
 801063a:	60fb      	str	r3, [r7, #12]
 801063c:	e007      	b.n	801064e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801063e:	2300      	movs	r3, #0
 8010640:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d002      	beq.n	801064e <osDelay+0x2c>
      vTaskDelay(ticks);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f001 f989 	bl	8011960 <vTaskDelay>
    }
  }

  return (stat);
 801064e:	68fb      	ldr	r3, [r7, #12]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010658:	b580      	push	{r7, lr}
 801065a:	b08a      	sub	sp, #40	; 0x28
 801065c:	af02      	add	r7, sp, #8
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010664:	2300      	movs	r3, #0
 8010666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010668:	f3ef 8305 	mrs	r3, IPSR
 801066c:	613b      	str	r3, [r7, #16]
  return(result);
 801066e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010670:	2b00      	cmp	r3, #0
 8010672:	d15f      	bne.n	8010734 <osMessageQueueNew+0xdc>
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d05c      	beq.n	8010734 <osMessageQueueNew+0xdc>
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d059      	beq.n	8010734 <osMessageQueueNew+0xdc>
    mem = -1;
 8010680:	f04f 33ff 	mov.w	r3, #4294967295
 8010684:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d029      	beq.n	80106e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	689b      	ldr	r3, [r3, #8]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d012      	beq.n	80106ba <osMessageQueueNew+0x62>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	2b4f      	cmp	r3, #79	; 0x4f
 801069a:	d90e      	bls.n	80106ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00a      	beq.n	80106ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	695a      	ldr	r2, [r3, #20]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	68b9      	ldr	r1, [r7, #8]
 80106ac:	fb01 f303 	mul.w	r3, r1, r3
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d302      	bcc.n	80106ba <osMessageQueueNew+0x62>
        mem = 1;
 80106b4:	2301      	movs	r3, #1
 80106b6:	61bb      	str	r3, [r7, #24]
 80106b8:	e014      	b.n	80106e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d110      	bne.n	80106e4 <osMessageQueueNew+0x8c>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d10c      	bne.n	80106e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d108      	bne.n	80106e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	695b      	ldr	r3, [r3, #20]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d104      	bne.n	80106e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	61bb      	str	r3, [r7, #24]
 80106de:	e001      	b.n	80106e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d10b      	bne.n	8010702 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	691a      	ldr	r2, [r3, #16]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	689b      	ldr	r3, [r3, #8]
 80106f2:	2100      	movs	r1, #0
 80106f4:	9100      	str	r1, [sp, #0]
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 fa51 	bl	8010ba0 <xQueueGenericCreateStatic>
 80106fe:	61f8      	str	r0, [r7, #28]
 8010700:	e008      	b.n	8010714 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d105      	bne.n	8010714 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010708:	2200      	movs	r2, #0
 801070a:	68b9      	ldr	r1, [r7, #8]
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f000 fabf 	bl	8010c90 <xQueueGenericCreate>
 8010712:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00c      	beq.n	8010734 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d003      	beq.n	8010728 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	617b      	str	r3, [r7, #20]
 8010726:	e001      	b.n	801072c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010728:	2300      	movs	r3, #0
 801072a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801072c:	6979      	ldr	r1, [r7, #20]
 801072e:	69f8      	ldr	r0, [r7, #28]
 8010730:	f000 ff16 	bl	8011560 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010734:	69fb      	ldr	r3, [r7, #28]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3720      	adds	r7, #32
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
	...

08010740 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	603b      	str	r3, [r7, #0]
 801074c:	4613      	mov	r3, r2
 801074e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010754:	2300      	movs	r3, #0
 8010756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010758:	f3ef 8305 	mrs	r3, IPSR
 801075c:	617b      	str	r3, [r7, #20]
  return(result);
 801075e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010760:	2b00      	cmp	r3, #0
 8010762:	d028      	beq.n	80107b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d005      	beq.n	8010776 <osMessageQueuePut+0x36>
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <osMessageQueuePut+0x36>
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d003      	beq.n	801077e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010776:	f06f 0303 	mvn.w	r3, #3
 801077a:	61fb      	str	r3, [r7, #28]
 801077c:	e038      	b.n	80107f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801077e:	2300      	movs	r3, #0
 8010780:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010782:	f107 0210 	add.w	r2, r7, #16
 8010786:	2300      	movs	r3, #0
 8010788:	68b9      	ldr	r1, [r7, #8]
 801078a:	69b8      	ldr	r0, [r7, #24]
 801078c:	f000 fbdc 	bl	8010f48 <xQueueGenericSendFromISR>
 8010790:	4603      	mov	r3, r0
 8010792:	2b01      	cmp	r3, #1
 8010794:	d003      	beq.n	801079e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010796:	f06f 0302 	mvn.w	r3, #2
 801079a:	61fb      	str	r3, [r7, #28]
 801079c:	e028      	b.n	80107f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d025      	beq.n	80107f0 <osMessageQueuePut+0xb0>
 80107a4:	4b15      	ldr	r3, [pc, #84]	; (80107fc <osMessageQueuePut+0xbc>)
 80107a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107aa:	601a      	str	r2, [r3, #0]
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	e01c      	b.n	80107f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <osMessageQueuePut+0x82>
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d103      	bne.n	80107ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80107c2:	f06f 0303 	mvn.w	r3, #3
 80107c6:	61fb      	str	r3, [r7, #28]
 80107c8:	e012      	b.n	80107f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80107ca:	2300      	movs	r3, #0
 80107cc:	683a      	ldr	r2, [r7, #0]
 80107ce:	68b9      	ldr	r1, [r7, #8]
 80107d0:	69b8      	ldr	r0, [r7, #24]
 80107d2:	f000 fabb 	bl	8010d4c <xQueueGenericSend>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d009      	beq.n	80107f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d003      	beq.n	80107ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80107e2:	f06f 0301 	mvn.w	r3, #1
 80107e6:	61fb      	str	r3, [r7, #28]
 80107e8:	e002      	b.n	80107f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80107ea:	f06f 0302 	mvn.w	r3, #2
 80107ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80107f0:	69fb      	ldr	r3, [r7, #28]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3720      	adds	r7, #32
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	e000ed04 	.word	0xe000ed04

08010800 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010800:	b580      	push	{r7, lr}
 8010802:	b088      	sub	sp, #32
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
 801080c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010812:	2300      	movs	r3, #0
 8010814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010816:	f3ef 8305 	mrs	r3, IPSR
 801081a:	617b      	str	r3, [r7, #20]
  return(result);
 801081c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801081e:	2b00      	cmp	r3, #0
 8010820:	d028      	beq.n	8010874 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010822:	69bb      	ldr	r3, [r7, #24]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d005      	beq.n	8010834 <osMessageQueueGet+0x34>
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d002      	beq.n	8010834 <osMessageQueueGet+0x34>
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d003      	beq.n	801083c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010834:	f06f 0303 	mvn.w	r3, #3
 8010838:	61fb      	str	r3, [r7, #28]
 801083a:	e037      	b.n	80108ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801083c:	2300      	movs	r3, #0
 801083e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010840:	f107 0310 	add.w	r3, r7, #16
 8010844:	461a      	mov	r2, r3
 8010846:	68b9      	ldr	r1, [r7, #8]
 8010848:	69b8      	ldr	r0, [r7, #24]
 801084a:	f000 fcf9 	bl	8011240 <xQueueReceiveFromISR>
 801084e:	4603      	mov	r3, r0
 8010850:	2b01      	cmp	r3, #1
 8010852:	d003      	beq.n	801085c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010854:	f06f 0302 	mvn.w	r3, #2
 8010858:	61fb      	str	r3, [r7, #28]
 801085a:	e027      	b.n	80108ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d024      	beq.n	80108ac <osMessageQueueGet+0xac>
 8010862:	4b15      	ldr	r3, [pc, #84]	; (80108b8 <osMessageQueueGet+0xb8>)
 8010864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	f3bf 8f6f 	isb	sy
 8010872:	e01b      	b.n	80108ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <osMessageQueueGet+0x80>
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d103      	bne.n	8010888 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010880:	f06f 0303 	mvn.w	r3, #3
 8010884:	61fb      	str	r3, [r7, #28]
 8010886:	e011      	b.n	80108ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010888:	683a      	ldr	r2, [r7, #0]
 801088a:	68b9      	ldr	r1, [r7, #8]
 801088c:	69b8      	ldr	r0, [r7, #24]
 801088e:	f000 fbf7 	bl	8011080 <xQueueReceive>
 8010892:	4603      	mov	r3, r0
 8010894:	2b01      	cmp	r3, #1
 8010896:	d009      	beq.n	80108ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d003      	beq.n	80108a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801089e:	f06f 0301 	mvn.w	r3, #1
 80108a2:	61fb      	str	r3, [r7, #28]
 80108a4:	e002      	b.n	80108ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80108a6:	f06f 0302 	mvn.w	r3, #2
 80108aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80108ac:	69fb      	ldr	r3, [r7, #28]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	e000ed04 	.word	0xe000ed04

080108bc <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 80108bc:	b580      	push	{r7, lr}
 80108be:	b086      	sub	sp, #24
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108c8:	f3ef 8305 	mrs	r3, IPSR
 80108cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80108ce:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d003      	beq.n	80108dc <osMessageQueueReset+0x20>
    stat = osErrorISR;
 80108d4:	f06f 0305 	mvn.w	r3, #5
 80108d8:	617b      	str	r3, [r7, #20]
 80108da:	e00c      	b.n	80108f6 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d103      	bne.n	80108ea <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 80108e2:	f06f 0303 	mvn.w	r3, #3
 80108e6:	617b      	str	r3, [r7, #20]
 80108e8:	e005      	b.n	80108f6 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 80108ea:	2300      	movs	r3, #0
 80108ec:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 80108ee:	2100      	movs	r1, #0
 80108f0:	6938      	ldr	r0, [r7, #16]
 80108f2:	f000 f8ed 	bl	8010ad0 <xQueueGenericReset>
  }

  return (stat);
 80108f6:	697b      	ldr	r3, [r7, #20]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3718      	adds	r7, #24
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	4a07      	ldr	r2, [pc, #28]	; (801092c <vApplicationGetIdleTaskMemory+0x2c>)
 8010910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	4a06      	ldr	r2, [pc, #24]	; (8010930 <vApplicationGetIdleTaskMemory+0x30>)
 8010916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2280      	movs	r2, #128	; 0x80
 801091c:	601a      	str	r2, [r3, #0]
}
 801091e:	bf00      	nop
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop
 801092c:	20001a44 	.word	0x20001a44
 8010930:	20001aa0 	.word	0x20001aa0

08010934 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	4a07      	ldr	r2, [pc, #28]	; (8010960 <vApplicationGetTimerTaskMemory+0x2c>)
 8010944:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	4a06      	ldr	r2, [pc, #24]	; (8010964 <vApplicationGetTimerTaskMemory+0x30>)
 801094a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010952:	601a      	str	r2, [r3, #0]
}
 8010954:	bf00      	nop
 8010956:	3714      	adds	r7, #20
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr
 8010960:	20001ca0 	.word	0x20001ca0
 8010964:	20001cfc 	.word	0x20001cfc

08010968 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f103 0208 	add.w	r2, r3, #8
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f04f 32ff 	mov.w	r2, #4294967295
 8010980:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f103 0208 	add.w	r2, r3, #8
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f103 0208 	add.w	r2, r3, #8
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801099c:	bf00      	nop
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80109b6:	bf00      	nop
 80109b8:	370c      	adds	r7, #12
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr

080109c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109c2:	b480      	push	{r7}
 80109c4:	b085      	sub	sp, #20
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
 80109ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	689a      	ldr	r2, [r3, #8]
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	683a      	ldr	r2, [r7, #0]
 80109e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	1c5a      	adds	r2, r3, #1
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	601a      	str	r2, [r3, #0]
}
 80109fe:	bf00      	nop
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
 8010a12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a20:	d103      	bne.n	8010a2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	691b      	ldr	r3, [r3, #16]
 8010a26:	60fb      	str	r3, [r7, #12]
 8010a28:	e00c      	b.n	8010a44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	3308      	adds	r3, #8
 8010a2e:	60fb      	str	r3, [r7, #12]
 8010a30:	e002      	b.n	8010a38 <vListInsert+0x2e>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	60fb      	str	r3, [r7, #12]
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d2f6      	bcs.n	8010a32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	685a      	ldr	r2, [r3, #4]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	683a      	ldr	r2, [r7, #0]
 8010a5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	1c5a      	adds	r2, r3, #1
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	601a      	str	r2, [r3, #0]
}
 8010a70:	bf00      	nop
 8010a72:	3714      	adds	r7, #20
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	691b      	ldr	r3, [r3, #16]
 8010a88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	6892      	ldr	r2, [r2, #8]
 8010a92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	6852      	ldr	r2, [r2, #4]
 8010a9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d103      	bne.n	8010ab0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	689a      	ldr	r2, [r3, #8]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	1e5a      	subs	r2, r3, #1
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3714      	adds	r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d10a      	bne.n	8010afa <xQueueGenericReset+0x2a>
	__asm volatile
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	60bb      	str	r3, [r7, #8]
}
 8010af6:	bf00      	nop
 8010af8:	e7fe      	b.n	8010af8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010afa:	f002 fb6b 	bl	80131d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b06:	68f9      	ldr	r1, [r7, #12]
 8010b08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b0a:	fb01 f303 	mul.w	r3, r1, r3
 8010b0e:	441a      	add	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2200      	movs	r2, #0
 8010b18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	68f9      	ldr	r1, [r7, #12]
 8010b2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b30:	fb01 f303 	mul.w	r3, r1, r3
 8010b34:	441a      	add	r2, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	22ff      	movs	r2, #255	; 0xff
 8010b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	22ff      	movs	r2, #255	; 0xff
 8010b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d114      	bne.n	8010b7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	691b      	ldr	r3, [r3, #16]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d01a      	beq.n	8010b8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3310      	adds	r3, #16
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f001 fa33 	bl	8011fc8 <xTaskRemoveFromEventList>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d012      	beq.n	8010b8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010b68:	4b0c      	ldr	r3, [pc, #48]	; (8010b9c <xQueueGenericReset+0xcc>)
 8010b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b6e:	601a      	str	r2, [r3, #0]
 8010b70:	f3bf 8f4f 	dsb	sy
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	e009      	b.n	8010b8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	3310      	adds	r3, #16
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7ff fef2 	bl	8010968 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	3324      	adds	r3, #36	; 0x24
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7ff feed 	bl	8010968 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010b8e:	f002 fb51 	bl	8013234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010b92:	2301      	movs	r3, #1
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	e000ed04 	.word	0xe000ed04

08010ba0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b08e      	sub	sp, #56	; 0x38
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
 8010bac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d10a      	bne.n	8010bca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010bc6:	bf00      	nop
 8010bc8:	e7fe      	b.n	8010bc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d10a      	bne.n	8010be6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd4:	f383 8811 	msr	BASEPRI, r3
 8010bd8:	f3bf 8f6f 	isb	sy
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010be2:	bf00      	nop
 8010be4:	e7fe      	b.n	8010be4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d002      	beq.n	8010bf2 <xQueueGenericCreateStatic+0x52>
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <xQueueGenericCreateStatic+0x56>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e000      	b.n	8010bf8 <xQueueGenericCreateStatic+0x58>
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d10a      	bne.n	8010c12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c00:	f383 8811 	msr	BASEPRI, r3
 8010c04:	f3bf 8f6f 	isb	sy
 8010c08:	f3bf 8f4f 	dsb	sy
 8010c0c:	623b      	str	r3, [r7, #32]
}
 8010c0e:	bf00      	nop
 8010c10:	e7fe      	b.n	8010c10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d102      	bne.n	8010c1e <xQueueGenericCreateStatic+0x7e>
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <xQueueGenericCreateStatic+0x82>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e000      	b.n	8010c24 <xQueueGenericCreateStatic+0x84>
 8010c22:	2300      	movs	r3, #0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d10a      	bne.n	8010c3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	61fb      	str	r3, [r7, #28]
}
 8010c3a:	bf00      	nop
 8010c3c:	e7fe      	b.n	8010c3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010c3e:	2350      	movs	r3, #80	; 0x50
 8010c40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	2b50      	cmp	r3, #80	; 0x50
 8010c46:	d00a      	beq.n	8010c5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4c:	f383 8811 	msr	BASEPRI, r3
 8010c50:	f3bf 8f6f 	isb	sy
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	61bb      	str	r3, [r7, #24]
}
 8010c5a:	bf00      	nop
 8010c5c:	e7fe      	b.n	8010c5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010c5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00d      	beq.n	8010c86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010c72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	68b9      	ldr	r1, [r7, #8]
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f000 f83f 	bl	8010d04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3730      	adds	r7, #48	; 0x30
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08a      	sub	sp, #40	; 0x28
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10a      	bne.n	8010cba <xQueueGenericCreate+0x2a>
	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	613b      	str	r3, [r7, #16]
}
 8010cb6:	bf00      	nop
 8010cb8:	e7fe      	b.n	8010cb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	fb02 f303 	mul.w	r3, r2, r3
 8010cc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	3350      	adds	r3, #80	; 0x50
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f002 fba5 	bl	8013418 <pvPortMalloc>
 8010cce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d011      	beq.n	8010cfa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	3350      	adds	r3, #80	; 0x50
 8010cde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ce8:	79fa      	ldrb	r2, [r7, #7]
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	9300      	str	r3, [sp, #0]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	697a      	ldr	r2, [r7, #20]
 8010cf2:	68b9      	ldr	r1, [r7, #8]
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	f000 f805 	bl	8010d04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3720      	adds	r7, #32
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
 8010d10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d103      	bne.n	8010d20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010d18:	69bb      	ldr	r3, [r7, #24]
 8010d1a:	69ba      	ldr	r2, [r7, #24]
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	e002      	b.n	8010d26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010d32:	2101      	movs	r1, #1
 8010d34:	69b8      	ldr	r0, [r7, #24]
 8010d36:	f7ff fecb 	bl	8010ad0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	78fa      	ldrb	r2, [r7, #3]
 8010d3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010d42:	bf00      	nop
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
	...

08010d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b08e      	sub	sp, #56	; 0x38
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]
 8010d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d10a      	bne.n	8010d7e <xQueueGenericSend+0x32>
	__asm volatile
 8010d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010d7a:	bf00      	nop
 8010d7c:	e7fe      	b.n	8010d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d103      	bne.n	8010d8c <xQueueGenericSend+0x40>
 8010d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d101      	bne.n	8010d90 <xQueueGenericSend+0x44>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e000      	b.n	8010d92 <xQueueGenericSend+0x46>
 8010d90:	2300      	movs	r3, #0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10a      	bne.n	8010dac <xQueueGenericSend+0x60>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	f383 8811 	msr	BASEPRI, r3
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	f3bf 8f4f 	dsb	sy
 8010da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010da8:	bf00      	nop
 8010daa:	e7fe      	b.n	8010daa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d103      	bne.n	8010dba <xQueueGenericSend+0x6e>
 8010db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d101      	bne.n	8010dbe <xQueueGenericSend+0x72>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e000      	b.n	8010dc0 <xQueueGenericSend+0x74>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10a      	bne.n	8010dda <xQueueGenericSend+0x8e>
	__asm volatile
 8010dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	623b      	str	r3, [r7, #32]
}
 8010dd6:	bf00      	nop
 8010dd8:	e7fe      	b.n	8010dd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dda:	f001 fab3 	bl	8012344 <xTaskGetSchedulerState>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d102      	bne.n	8010dea <xQueueGenericSend+0x9e>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d101      	bne.n	8010dee <xQueueGenericSend+0xa2>
 8010dea:	2301      	movs	r3, #1
 8010dec:	e000      	b.n	8010df0 <xQueueGenericSend+0xa4>
 8010dee:	2300      	movs	r3, #0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d10a      	bne.n	8010e0a <xQueueGenericSend+0xbe>
	__asm volatile
 8010df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df8:	f383 8811 	msr	BASEPRI, r3
 8010dfc:	f3bf 8f6f 	isb	sy
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	61fb      	str	r3, [r7, #28]
}
 8010e06:	bf00      	nop
 8010e08:	e7fe      	b.n	8010e08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e0a:	f002 f9e3 	bl	80131d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d302      	bcc.n	8010e20 <xQueueGenericSend+0xd4>
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	2b02      	cmp	r3, #2
 8010e1e:	d129      	bne.n	8010e74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e20:	683a      	ldr	r2, [r7, #0]
 8010e22:	68b9      	ldr	r1, [r7, #8]
 8010e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e26:	f000 fa8b 	bl	8011340 <prvCopyDataToQueue>
 8010e2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d010      	beq.n	8010e56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e36:	3324      	adds	r3, #36	; 0x24
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f001 f8c5 	bl	8011fc8 <xTaskRemoveFromEventList>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d013      	beq.n	8010e6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010e44:	4b3f      	ldr	r3, [pc, #252]	; (8010f44 <xQueueGenericSend+0x1f8>)
 8010e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	e00a      	b.n	8010e6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d007      	beq.n	8010e6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010e5c:	4b39      	ldr	r3, [pc, #228]	; (8010f44 <xQueueGenericSend+0x1f8>)
 8010e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e62:	601a      	str	r2, [r3, #0]
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010e6c:	f002 f9e2 	bl	8013234 <vPortExitCritical>
				return pdPASS;
 8010e70:	2301      	movs	r3, #1
 8010e72:	e063      	b.n	8010f3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d103      	bne.n	8010e82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e7a:	f002 f9db 	bl	8013234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	e05c      	b.n	8010f3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d106      	bne.n	8010e96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e88:	f107 0314 	add.w	r3, r7, #20
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f001 f8ff 	bl	8012090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e92:	2301      	movs	r3, #1
 8010e94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e96:	f002 f9cd 	bl	8013234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e9a:	f000 fe71 	bl	8011b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e9e:	f002 f999 	bl	80131d4 <vPortEnterCritical>
 8010ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ea8:	b25b      	sxtb	r3, r3
 8010eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eae:	d103      	bne.n	8010eb8 <xQueueGenericSend+0x16c>
 8010eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ebe:	b25b      	sxtb	r3, r3
 8010ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec4:	d103      	bne.n	8010ece <xQueueGenericSend+0x182>
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ece:	f002 f9b1 	bl	8013234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ed2:	1d3a      	adds	r2, r7, #4
 8010ed4:	f107 0314 	add.w	r3, r7, #20
 8010ed8:	4611      	mov	r1, r2
 8010eda:	4618      	mov	r0, r3
 8010edc:	f001 f8ee 	bl	80120bc <xTaskCheckForTimeOut>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d124      	bne.n	8010f30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ee8:	f000 fb22 	bl	8011530 <prvIsQueueFull>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d018      	beq.n	8010f24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef4:	3310      	adds	r3, #16
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	4611      	mov	r1, r2
 8010efa:	4618      	mov	r0, r3
 8010efc:	f001 f814 	bl	8011f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f02:	f000 faad 	bl	8011460 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010f06:	f000 fe49 	bl	8011b9c <xTaskResumeAll>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f47f af7c 	bne.w	8010e0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010f12:	4b0c      	ldr	r3, [pc, #48]	; (8010f44 <xQueueGenericSend+0x1f8>)
 8010f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f18:	601a      	str	r2, [r3, #0]
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	f3bf 8f6f 	isb	sy
 8010f22:	e772      	b.n	8010e0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f26:	f000 fa9b 	bl	8011460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f2a:	f000 fe37 	bl	8011b9c <xTaskResumeAll>
 8010f2e:	e76c      	b.n	8010e0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f32:	f000 fa95 	bl	8011460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f36:	f000 fe31 	bl	8011b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3738      	adds	r7, #56	; 0x38
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	e000ed04 	.word	0xe000ed04

08010f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b090      	sub	sp, #64	; 0x40
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	607a      	str	r2, [r7, #4]
 8010f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10a      	bne.n	8010f76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010f72:	bf00      	nop
 8010f74:	e7fe      	b.n	8010f74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d103      	bne.n	8010f84 <xQueueGenericSendFromISR+0x3c>
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <xQueueGenericSendFromISR+0x40>
 8010f84:	2301      	movs	r3, #1
 8010f86:	e000      	b.n	8010f8a <xQueueGenericSendFromISR+0x42>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10a      	bne.n	8010fa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f92:	f383 8811 	msr	BASEPRI, r3
 8010f96:	f3bf 8f6f 	isb	sy
 8010f9a:	f3bf 8f4f 	dsb	sy
 8010f9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010fa0:	bf00      	nop
 8010fa2:	e7fe      	b.n	8010fa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	2b02      	cmp	r3, #2
 8010fa8:	d103      	bne.n	8010fb2 <xQueueGenericSendFromISR+0x6a>
 8010faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d101      	bne.n	8010fb6 <xQueueGenericSendFromISR+0x6e>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	e000      	b.n	8010fb8 <xQueueGenericSendFromISR+0x70>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d10a      	bne.n	8010fd2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc0:	f383 8811 	msr	BASEPRI, r3
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	f3bf 8f4f 	dsb	sy
 8010fcc:	623b      	str	r3, [r7, #32]
}
 8010fce:	bf00      	nop
 8010fd0:	e7fe      	b.n	8010fd0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010fd2:	f002 f9e1 	bl	8013398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	61fa      	str	r2, [r7, #28]
 8010fec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010fee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ff0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d302      	bcc.n	8011004 <xQueueGenericSendFromISR+0xbc>
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	2b02      	cmp	r3, #2
 8011002:	d12f      	bne.n	8011064 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801100a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801100e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011012:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	68b9      	ldr	r1, [r7, #8]
 8011018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801101a:	f000 f991 	bl	8011340 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801101e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011026:	d112      	bne.n	801104e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102c:	2b00      	cmp	r3, #0
 801102e:	d016      	beq.n	801105e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	3324      	adds	r3, #36	; 0x24
 8011034:	4618      	mov	r0, r3
 8011036:	f000 ffc7 	bl	8011fc8 <xTaskRemoveFromEventList>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00e      	beq.n	801105e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00b      	beq.n	801105e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	601a      	str	r2, [r3, #0]
 801104c:	e007      	b.n	801105e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801104e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011052:	3301      	adds	r3, #1
 8011054:	b2db      	uxtb	r3, r3
 8011056:	b25a      	sxtb	r2, r3
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801105e:	2301      	movs	r3, #1
 8011060:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011062:	e001      	b.n	8011068 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011064:	2300      	movs	r3, #0
 8011066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011072:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011076:	4618      	mov	r0, r3
 8011078:	3740      	adds	r7, #64	; 0x40
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
	...

08011080 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b08c      	sub	sp, #48	; 0x30
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801108c:	2300      	movs	r3, #0
 801108e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011096:	2b00      	cmp	r3, #0
 8011098:	d10a      	bne.n	80110b0 <xQueueReceive+0x30>
	__asm volatile
 801109a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109e:	f383 8811 	msr	BASEPRI, r3
 80110a2:	f3bf 8f6f 	isb	sy
 80110a6:	f3bf 8f4f 	dsb	sy
 80110aa:	623b      	str	r3, [r7, #32]
}
 80110ac:	bf00      	nop
 80110ae:	e7fe      	b.n	80110ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d103      	bne.n	80110be <xQueueReceive+0x3e>
 80110b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d101      	bne.n	80110c2 <xQueueReceive+0x42>
 80110be:	2301      	movs	r3, #1
 80110c0:	e000      	b.n	80110c4 <xQueueReceive+0x44>
 80110c2:	2300      	movs	r3, #0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d10a      	bne.n	80110de <xQueueReceive+0x5e>
	__asm volatile
 80110c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	61fb      	str	r3, [r7, #28]
}
 80110da:	bf00      	nop
 80110dc:	e7fe      	b.n	80110dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110de:	f001 f931 	bl	8012344 <xTaskGetSchedulerState>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d102      	bne.n	80110ee <xQueueReceive+0x6e>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d101      	bne.n	80110f2 <xQueueReceive+0x72>
 80110ee:	2301      	movs	r3, #1
 80110f0:	e000      	b.n	80110f4 <xQueueReceive+0x74>
 80110f2:	2300      	movs	r3, #0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d10a      	bne.n	801110e <xQueueReceive+0x8e>
	__asm volatile
 80110f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110fc:	f383 8811 	msr	BASEPRI, r3
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	61bb      	str	r3, [r7, #24]
}
 801110a:	bf00      	nop
 801110c:	e7fe      	b.n	801110c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801110e:	f002 f861 	bl	80131d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011116:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	2b00      	cmp	r3, #0
 801111c:	d01f      	beq.n	801115e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801111e:	68b9      	ldr	r1, [r7, #8]
 8011120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011122:	f000 f977 	bl	8011414 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011128:	1e5a      	subs	r2, r3, #1
 801112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011130:	691b      	ldr	r3, [r3, #16]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00f      	beq.n	8011156 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	3310      	adds	r3, #16
 801113a:	4618      	mov	r0, r3
 801113c:	f000 ff44 	bl	8011fc8 <xTaskRemoveFromEventList>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d007      	beq.n	8011156 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011146:	4b3d      	ldr	r3, [pc, #244]	; (801123c <xQueueReceive+0x1bc>)
 8011148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011156:	f002 f86d 	bl	8013234 <vPortExitCritical>
				return pdPASS;
 801115a:	2301      	movs	r3, #1
 801115c:	e069      	b.n	8011232 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d103      	bne.n	801116c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011164:	f002 f866 	bl	8013234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011168:	2300      	movs	r3, #0
 801116a:	e062      	b.n	8011232 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116e:	2b00      	cmp	r3, #0
 8011170:	d106      	bne.n	8011180 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011172:	f107 0310 	add.w	r3, r7, #16
 8011176:	4618      	mov	r0, r3
 8011178:	f000 ff8a 	bl	8012090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801117c:	2301      	movs	r3, #1
 801117e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011180:	f002 f858 	bl	8013234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011184:	f000 fcfc 	bl	8011b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011188:	f002 f824 	bl	80131d4 <vPortEnterCritical>
 801118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011192:	b25b      	sxtb	r3, r3
 8011194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011198:	d103      	bne.n	80111a2 <xQueueReceive+0x122>
 801119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119c:	2200      	movs	r2, #0
 801119e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111a8:	b25b      	sxtb	r3, r3
 80111aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ae:	d103      	bne.n	80111b8 <xQueueReceive+0x138>
 80111b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b2:	2200      	movs	r2, #0
 80111b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111b8:	f002 f83c 	bl	8013234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111bc:	1d3a      	adds	r2, r7, #4
 80111be:	f107 0310 	add.w	r3, r7, #16
 80111c2:	4611      	mov	r1, r2
 80111c4:	4618      	mov	r0, r3
 80111c6:	f000 ff79 	bl	80120bc <xTaskCheckForTimeOut>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d123      	bne.n	8011218 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111d2:	f000 f997 	bl	8011504 <prvIsQueueEmpty>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d017      	beq.n	801120c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111de:	3324      	adds	r3, #36	; 0x24
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	4611      	mov	r1, r2
 80111e4:	4618      	mov	r0, r3
 80111e6:	f000 fe9f 	bl	8011f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111ec:	f000 f938 	bl	8011460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111f0:	f000 fcd4 	bl	8011b9c <xTaskResumeAll>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d189      	bne.n	801110e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80111fa:	4b10      	ldr	r3, [pc, #64]	; (801123c <xQueueReceive+0x1bc>)
 80111fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	f3bf 8f4f 	dsb	sy
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	e780      	b.n	801110e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801120c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801120e:	f000 f927 	bl	8011460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011212:	f000 fcc3 	bl	8011b9c <xTaskResumeAll>
 8011216:	e77a      	b.n	801110e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801121a:	f000 f921 	bl	8011460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801121e:	f000 fcbd 	bl	8011b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011224:	f000 f96e 	bl	8011504 <prvIsQueueEmpty>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	f43f af6f 	beq.w	801110e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011230:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011232:	4618      	mov	r0, r3
 8011234:	3730      	adds	r7, #48	; 0x30
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	e000ed04 	.word	0xe000ed04

08011240 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08e      	sub	sp, #56	; 0x38
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011252:	2b00      	cmp	r3, #0
 8011254:	d10a      	bne.n	801126c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125a:	f383 8811 	msr	BASEPRI, r3
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	623b      	str	r3, [r7, #32]
}
 8011268:	bf00      	nop
 801126a:	e7fe      	b.n	801126a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d103      	bne.n	801127a <xQueueReceiveFromISR+0x3a>
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011276:	2b00      	cmp	r3, #0
 8011278:	d101      	bne.n	801127e <xQueueReceiveFromISR+0x3e>
 801127a:	2301      	movs	r3, #1
 801127c:	e000      	b.n	8011280 <xQueueReceiveFromISR+0x40>
 801127e:	2300      	movs	r3, #0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d10a      	bne.n	801129a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011288:	f383 8811 	msr	BASEPRI, r3
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	f3bf 8f4f 	dsb	sy
 8011294:	61fb      	str	r3, [r7, #28]
}
 8011296:	bf00      	nop
 8011298:	e7fe      	b.n	8011298 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801129a:	f002 f87d 	bl	8013398 <vPortValidateInterruptPriority>
	__asm volatile
 801129e:	f3ef 8211 	mrs	r2, BASEPRI
 80112a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a6:	f383 8811 	msr	BASEPRI, r3
 80112aa:	f3bf 8f6f 	isb	sy
 80112ae:	f3bf 8f4f 	dsb	sy
 80112b2:	61ba      	str	r2, [r7, #24]
 80112b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d02f      	beq.n	8011326 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80112c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112d0:	68b9      	ldr	r1, [r7, #8]
 80112d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112d4:	f000 f89e 	bl	8011414 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	1e5a      	subs	r2, r3, #1
 80112dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80112e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80112e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e8:	d112      	bne.n	8011310 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d016      	beq.n	8011320 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f4:	3310      	adds	r3, #16
 80112f6:	4618      	mov	r0, r3
 80112f8:	f000 fe66 	bl	8011fc8 <xTaskRemoveFromEventList>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d00e      	beq.n	8011320 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00b      	beq.n	8011320 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2201      	movs	r2, #1
 801130c:	601a      	str	r2, [r3, #0]
 801130e:	e007      	b.n	8011320 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011314:	3301      	adds	r3, #1
 8011316:	b2db      	uxtb	r3, r3
 8011318:	b25a      	sxtb	r2, r3
 801131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011320:	2301      	movs	r3, #1
 8011322:	637b      	str	r3, [r7, #52]	; 0x34
 8011324:	e001      	b.n	801132a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011326:	2300      	movs	r3, #0
 8011328:	637b      	str	r3, [r7, #52]	; 0x34
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	f383 8811 	msr	BASEPRI, r3
}
 8011334:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011338:	4618      	mov	r0, r3
 801133a:	3738      	adds	r7, #56	; 0x38
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801134c:	2300      	movs	r3, #0
 801134e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011354:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801135a:	2b00      	cmp	r3, #0
 801135c:	d10d      	bne.n	801137a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d14d      	bne.n	8011402 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	689b      	ldr	r3, [r3, #8]
 801136a:	4618      	mov	r0, r3
 801136c:	f001 f808 	bl	8012380 <xTaskPriorityDisinherit>
 8011370:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2200      	movs	r2, #0
 8011376:	609a      	str	r2, [r3, #8]
 8011378:	e043      	b.n	8011402 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d119      	bne.n	80113b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	6858      	ldr	r0, [r3, #4]
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011388:	461a      	mov	r2, r3
 801138a:	68b9      	ldr	r1, [r7, #8]
 801138c:	f003 fd3b 	bl	8014e06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	685a      	ldr	r2, [r3, #4]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011398:	441a      	add	r2, r3
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	685a      	ldr	r2, [r3, #4]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d32b      	bcc.n	8011402 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	605a      	str	r2, [r3, #4]
 80113b2:	e026      	b.n	8011402 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	68d8      	ldr	r0, [r3, #12]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113bc:	461a      	mov	r2, r3
 80113be:	68b9      	ldr	r1, [r7, #8]
 80113c0:	f003 fd21 	bl	8014e06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	68da      	ldr	r2, [r3, #12]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113cc:	425b      	negs	r3, r3
 80113ce:	441a      	add	r2, r3
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	68da      	ldr	r2, [r3, #12]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	429a      	cmp	r2, r3
 80113de:	d207      	bcs.n	80113f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	689a      	ldr	r2, [r3, #8]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113e8:	425b      	negs	r3, r3
 80113ea:	441a      	add	r2, r3
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d105      	bne.n	8011402 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d002      	beq.n	8011402 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	3b01      	subs	r3, #1
 8011400:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	1c5a      	adds	r2, r3, #1
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801140a:	697b      	ldr	r3, [r7, #20]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3718      	adds	r7, #24
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011422:	2b00      	cmp	r3, #0
 8011424:	d018      	beq.n	8011458 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	68da      	ldr	r2, [r3, #12]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801142e:	441a      	add	r2, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	68da      	ldr	r2, [r3, #12]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	429a      	cmp	r2, r3
 801143e:	d303      	bcc.n	8011448 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	68d9      	ldr	r1, [r3, #12]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011450:	461a      	mov	r2, r3
 8011452:	6838      	ldr	r0, [r7, #0]
 8011454:	f003 fcd7 	bl	8014e06 <memcpy>
	}
}
 8011458:	bf00      	nop
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b084      	sub	sp, #16
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011468:	f001 feb4 	bl	80131d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011472:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011474:	e011      	b.n	801149a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801147a:	2b00      	cmp	r3, #0
 801147c:	d012      	beq.n	80114a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	3324      	adds	r3, #36	; 0x24
 8011482:	4618      	mov	r0, r3
 8011484:	f000 fda0 	bl	8011fc8 <xTaskRemoveFromEventList>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d001      	beq.n	8011492 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801148e:	f000 fe77 	bl	8012180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011492:	7bfb      	ldrb	r3, [r7, #15]
 8011494:	3b01      	subs	r3, #1
 8011496:	b2db      	uxtb	r3, r3
 8011498:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	dce9      	bgt.n	8011476 <prvUnlockQueue+0x16>
 80114a2:	e000      	b.n	80114a6 <prvUnlockQueue+0x46>
					break;
 80114a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	22ff      	movs	r2, #255	; 0xff
 80114aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80114ae:	f001 fec1 	bl	8013234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80114b2:	f001 fe8f 	bl	80131d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114be:	e011      	b.n	80114e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	691b      	ldr	r3, [r3, #16]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d012      	beq.n	80114ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3310      	adds	r3, #16
 80114cc:	4618      	mov	r0, r3
 80114ce:	f000 fd7b 	bl	8011fc8 <xTaskRemoveFromEventList>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d001      	beq.n	80114dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80114d8:	f000 fe52 	bl	8012180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80114dc:	7bbb      	ldrb	r3, [r7, #14]
 80114de:	3b01      	subs	r3, #1
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	dce9      	bgt.n	80114c0 <prvUnlockQueue+0x60>
 80114ec:	e000      	b.n	80114f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80114ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	22ff      	movs	r2, #255	; 0xff
 80114f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80114f8:	f001 fe9c 	bl	8013234 <vPortExitCritical>
}
 80114fc:	bf00      	nop
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801150c:	f001 fe62 	bl	80131d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011514:	2b00      	cmp	r3, #0
 8011516:	d102      	bne.n	801151e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011518:	2301      	movs	r3, #1
 801151a:	60fb      	str	r3, [r7, #12]
 801151c:	e001      	b.n	8011522 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801151e:	2300      	movs	r3, #0
 8011520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011522:	f001 fe87 	bl	8013234 <vPortExitCritical>

	return xReturn;
 8011526:	68fb      	ldr	r3, [r7, #12]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011538:	f001 fe4c 	bl	80131d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011544:	429a      	cmp	r2, r3
 8011546:	d102      	bne.n	801154e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011548:	2301      	movs	r3, #1
 801154a:	60fb      	str	r3, [r7, #12]
 801154c:	e001      	b.n	8011552 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801154e:	2300      	movs	r3, #0
 8011550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011552:	f001 fe6f 	bl	8013234 <vPortExitCritical>

	return xReturn;
 8011556:	68fb      	ldr	r3, [r7, #12]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011560:	b480      	push	{r7}
 8011562:	b085      	sub	sp, #20
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801156a:	2300      	movs	r3, #0
 801156c:	60fb      	str	r3, [r7, #12]
 801156e:	e014      	b.n	801159a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011570:	4a0f      	ldr	r2, [pc, #60]	; (80115b0 <vQueueAddToRegistry+0x50>)
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d10b      	bne.n	8011594 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801157c:	490c      	ldr	r1, [pc, #48]	; (80115b0 <vQueueAddToRegistry+0x50>)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	683a      	ldr	r2, [r7, #0]
 8011582:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011586:	4a0a      	ldr	r2, [pc, #40]	; (80115b0 <vQueueAddToRegistry+0x50>)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	00db      	lsls	r3, r3, #3
 801158c:	4413      	add	r3, r2
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011592:	e006      	b.n	80115a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	3301      	adds	r3, #1
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2b07      	cmp	r3, #7
 801159e:	d9e7      	bls.n	8011570 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80115a0:	bf00      	nop
 80115a2:	bf00      	nop
 80115a4:	3714      	adds	r7, #20
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	200020fc 	.word	0x200020fc

080115b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80115c4:	f001 fe06 	bl	80131d4 <vPortEnterCritical>
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ce:	b25b      	sxtb	r3, r3
 80115d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d4:	d103      	bne.n	80115de <vQueueWaitForMessageRestricted+0x2a>
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2200      	movs	r2, #0
 80115da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115e4:	b25b      	sxtb	r3, r3
 80115e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ea:	d103      	bne.n	80115f4 <vQueueWaitForMessageRestricted+0x40>
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	2200      	movs	r2, #0
 80115f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115f4:	f001 fe1e 	bl	8013234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d106      	bne.n	801160e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	3324      	adds	r3, #36	; 0x24
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	68b9      	ldr	r1, [r7, #8]
 8011608:	4618      	mov	r0, r3
 801160a:	f000 fcb1 	bl	8011f70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801160e:	6978      	ldr	r0, [r7, #20]
 8011610:	f7ff ff26 	bl	8011460 <prvUnlockQueue>
	}
 8011614:	bf00      	nop
 8011616:	3718      	adds	r7, #24
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801161c:	b580      	push	{r7, lr}
 801161e:	b08e      	sub	sp, #56	; 0x38
 8011620:	af04      	add	r7, sp, #16
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162c:	2b00      	cmp	r3, #0
 801162e:	d10a      	bne.n	8011646 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	623b      	str	r3, [r7, #32]
}
 8011642:	bf00      	nop
 8011644:	e7fe      	b.n	8011644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011648:	2b00      	cmp	r3, #0
 801164a:	d10a      	bne.n	8011662 <xTaskCreateStatic+0x46>
	__asm volatile
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	61fb      	str	r3, [r7, #28]
}
 801165e:	bf00      	nop
 8011660:	e7fe      	b.n	8011660 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011662:	235c      	movs	r3, #92	; 0x5c
 8011664:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	2b5c      	cmp	r3, #92	; 0x5c
 801166a:	d00a      	beq.n	8011682 <xTaskCreateStatic+0x66>
	__asm volatile
 801166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011670:	f383 8811 	msr	BASEPRI, r3
 8011674:	f3bf 8f6f 	isb	sy
 8011678:	f3bf 8f4f 	dsb	sy
 801167c:	61bb      	str	r3, [r7, #24]
}
 801167e:	bf00      	nop
 8011680:	e7fe      	b.n	8011680 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011682:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011686:	2b00      	cmp	r3, #0
 8011688:	d01e      	beq.n	80116c8 <xTaskCreateStatic+0xac>
 801168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801168c:	2b00      	cmp	r3, #0
 801168e:	d01b      	beq.n	80116c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	2202      	movs	r2, #2
 801169e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80116a2:	2300      	movs	r3, #0
 80116a4:	9303      	str	r3, [sp, #12]
 80116a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a8:	9302      	str	r3, [sp, #8]
 80116aa:	f107 0314 	add.w	r3, r7, #20
 80116ae:	9301      	str	r3, [sp, #4]
 80116b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	68b9      	ldr	r1, [r7, #8]
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f000 f850 	bl	8011760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116c2:	f000 f8dd 	bl	8011880 <prvAddNewTaskToReadyList>
 80116c6:	e001      	b.n	80116cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80116c8:	2300      	movs	r3, #0
 80116ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116cc:	697b      	ldr	r3, [r7, #20]
	}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3728      	adds	r7, #40	; 0x28
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b08c      	sub	sp, #48	; 0x30
 80116da:	af04      	add	r7, sp, #16
 80116dc:	60f8      	str	r0, [r7, #12]
 80116de:	60b9      	str	r1, [r7, #8]
 80116e0:	603b      	str	r3, [r7, #0]
 80116e2:	4613      	mov	r3, r2
 80116e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80116e6:	88fb      	ldrh	r3, [r7, #6]
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	4618      	mov	r0, r3
 80116ec:	f001 fe94 	bl	8013418 <pvPortMalloc>
 80116f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d00e      	beq.n	8011716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80116f8:	205c      	movs	r0, #92	; 0x5c
 80116fa:	f001 fe8d 	bl	8013418 <pvPortMalloc>
 80116fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d003      	beq.n	801170e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	631a      	str	r2, [r3, #48]	; 0x30
 801170c:	e005      	b.n	801171a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801170e:	6978      	ldr	r0, [r7, #20]
 8011710:	f001 ff4e 	bl	80135b0 <vPortFree>
 8011714:	e001      	b.n	801171a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011716:	2300      	movs	r3, #0
 8011718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d017      	beq.n	8011750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	2200      	movs	r2, #0
 8011724:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011728:	88fa      	ldrh	r2, [r7, #6]
 801172a:	2300      	movs	r3, #0
 801172c:	9303      	str	r3, [sp, #12]
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	9302      	str	r3, [sp, #8]
 8011732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011734:	9301      	str	r3, [sp, #4]
 8011736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	68b9      	ldr	r1, [r7, #8]
 801173e:	68f8      	ldr	r0, [r7, #12]
 8011740:	f000 f80e 	bl	8011760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011744:	69f8      	ldr	r0, [r7, #28]
 8011746:	f000 f89b 	bl	8011880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801174a:	2301      	movs	r3, #1
 801174c:	61bb      	str	r3, [r7, #24]
 801174e:	e002      	b.n	8011756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011750:	f04f 33ff 	mov.w	r3, #4294967295
 8011754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011756:	69bb      	ldr	r3, [r7, #24]
	}
 8011758:	4618      	mov	r0, r3
 801175a:	3720      	adds	r7, #32
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011770:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	461a      	mov	r2, r3
 8011778:	21a5      	movs	r1, #165	; 0xa5
 801177a:	f003 f9f5 	bl	8014b68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011788:	3b01      	subs	r3, #1
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	4413      	add	r3, r2
 801178e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	f023 0307 	bic.w	r3, r3, #7
 8011796:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	f003 0307 	and.w	r3, r3, #7
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d00a      	beq.n	80117b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80117a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a6:	f383 8811 	msr	BASEPRI, r3
 80117aa:	f3bf 8f6f 	isb	sy
 80117ae:	f3bf 8f4f 	dsb	sy
 80117b2:	617b      	str	r3, [r7, #20]
}
 80117b4:	bf00      	nop
 80117b6:	e7fe      	b.n	80117b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d01f      	beq.n	80117fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117be:	2300      	movs	r3, #0
 80117c0:	61fb      	str	r3, [r7, #28]
 80117c2:	e012      	b.n	80117ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	4413      	add	r3, r2
 80117ca:	7819      	ldrb	r1, [r3, #0]
 80117cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	4413      	add	r3, r2
 80117d2:	3334      	adds	r3, #52	; 0x34
 80117d4:	460a      	mov	r2, r1
 80117d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80117d8:	68ba      	ldr	r2, [r7, #8]
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	4413      	add	r3, r2
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d006      	beq.n	80117f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	3301      	adds	r3, #1
 80117e8:	61fb      	str	r3, [r7, #28]
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	2b0f      	cmp	r3, #15
 80117ee:	d9e9      	bls.n	80117c4 <prvInitialiseNewTask+0x64>
 80117f0:	e000      	b.n	80117f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80117f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80117fc:	e003      	b.n	8011806 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80117fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011800:	2200      	movs	r2, #0
 8011802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011808:	2b37      	cmp	r3, #55	; 0x37
 801180a:	d901      	bls.n	8011810 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801180c:	2337      	movs	r3, #55	; 0x37
 801180e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801181a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181e:	2200      	movs	r2, #0
 8011820:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011824:	3304      	adds	r3, #4
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff f8be 	bl	80109a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182e:	3318      	adds	r3, #24
 8011830:	4618      	mov	r0, r3
 8011832:	f7ff f8b9 	bl	80109a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801183a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801184a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184e:	2200      	movs	r2, #0
 8011850:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011854:	2200      	movs	r2, #0
 8011856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801185a:	683a      	ldr	r2, [r7, #0]
 801185c:	68f9      	ldr	r1, [r7, #12]
 801185e:	69b8      	ldr	r0, [r7, #24]
 8011860:	f001 fb8c 	bl	8012f7c <pxPortInitialiseStack>
 8011864:	4602      	mov	r2, r0
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011876:	bf00      	nop
 8011878:	3720      	adds	r7, #32
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
	...

08011880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011888:	f001 fca4 	bl	80131d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801188c:	4b2d      	ldr	r3, [pc, #180]	; (8011944 <prvAddNewTaskToReadyList+0xc4>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3301      	adds	r3, #1
 8011892:	4a2c      	ldr	r2, [pc, #176]	; (8011944 <prvAddNewTaskToReadyList+0xc4>)
 8011894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011896:	4b2c      	ldr	r3, [pc, #176]	; (8011948 <prvAddNewTaskToReadyList+0xc8>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d109      	bne.n	80118b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801189e:	4a2a      	ldr	r2, [pc, #168]	; (8011948 <prvAddNewTaskToReadyList+0xc8>)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118a4:	4b27      	ldr	r3, [pc, #156]	; (8011944 <prvAddNewTaskToReadyList+0xc4>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d110      	bne.n	80118ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118ac:	f000 fc8c 	bl	80121c8 <prvInitialiseTaskLists>
 80118b0:	e00d      	b.n	80118ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118b2:	4b26      	ldr	r3, [pc, #152]	; (801194c <prvAddNewTaskToReadyList+0xcc>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d109      	bne.n	80118ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118ba:	4b23      	ldr	r3, [pc, #140]	; (8011948 <prvAddNewTaskToReadyList+0xc8>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d802      	bhi.n	80118ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118c8:	4a1f      	ldr	r2, [pc, #124]	; (8011948 <prvAddNewTaskToReadyList+0xc8>)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118ce:	4b20      	ldr	r3, [pc, #128]	; (8011950 <prvAddNewTaskToReadyList+0xd0>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	3301      	adds	r3, #1
 80118d4:	4a1e      	ldr	r2, [pc, #120]	; (8011950 <prvAddNewTaskToReadyList+0xd0>)
 80118d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80118d8:	4b1d      	ldr	r3, [pc, #116]	; (8011950 <prvAddNewTaskToReadyList+0xd0>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118e4:	4b1b      	ldr	r3, [pc, #108]	; (8011954 <prvAddNewTaskToReadyList+0xd4>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d903      	bls.n	80118f4 <prvAddNewTaskToReadyList+0x74>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f0:	4a18      	ldr	r2, [pc, #96]	; (8011954 <prvAddNewTaskToReadyList+0xd4>)
 80118f2:	6013      	str	r3, [r2, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f8:	4613      	mov	r3, r2
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4413      	add	r3, r2
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	4a15      	ldr	r2, [pc, #84]	; (8011958 <prvAddNewTaskToReadyList+0xd8>)
 8011902:	441a      	add	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	3304      	adds	r3, #4
 8011908:	4619      	mov	r1, r3
 801190a:	4610      	mov	r0, r2
 801190c:	f7ff f859 	bl	80109c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011910:	f001 fc90 	bl	8013234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011914:	4b0d      	ldr	r3, [pc, #52]	; (801194c <prvAddNewTaskToReadyList+0xcc>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00e      	beq.n	801193a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801191c:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <prvAddNewTaskToReadyList+0xc8>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011926:	429a      	cmp	r2, r3
 8011928:	d207      	bcs.n	801193a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801192a:	4b0c      	ldr	r3, [pc, #48]	; (801195c <prvAddNewTaskToReadyList+0xdc>)
 801192c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011930:	601a      	str	r2, [r3, #0]
 8011932:	f3bf 8f4f 	dsb	sy
 8011936:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801193a:	bf00      	nop
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	20002610 	.word	0x20002610
 8011948:	2000213c 	.word	0x2000213c
 801194c:	2000261c 	.word	0x2000261c
 8011950:	2000262c 	.word	0x2000262c
 8011954:	20002618 	.word	0x20002618
 8011958:	20002140 	.word	0x20002140
 801195c:	e000ed04 	.word	0xe000ed04

08011960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011968:	2300      	movs	r3, #0
 801196a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d017      	beq.n	80119a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011972:	4b13      	ldr	r3, [pc, #76]	; (80119c0 <vTaskDelay+0x60>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d00a      	beq.n	8011990 <vTaskDelay+0x30>
	__asm volatile
 801197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	60bb      	str	r3, [r7, #8]
}
 801198c:	bf00      	nop
 801198e:	e7fe      	b.n	801198e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011990:	f000 f8f6 	bl	8011b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011994:	2100      	movs	r1, #0
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f000 ff4e 	bl	8012838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801199c:	f000 f8fe 	bl	8011b9c <xTaskResumeAll>
 80119a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d107      	bne.n	80119b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80119a8:	4b06      	ldr	r3, [pc, #24]	; (80119c4 <vTaskDelay+0x64>)
 80119aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ae:	601a      	str	r2, [r3, #0]
 80119b0:	f3bf 8f4f 	dsb	sy
 80119b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119b8:	bf00      	nop
 80119ba:	3710      	adds	r7, #16
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	20002638 	.word	0x20002638
 80119c4:	e000ed04 	.word	0xe000ed04

080119c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80119d0:	f001 fc00 	bl	80131d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d102      	bne.n	80119e0 <vTaskSuspend+0x18>
 80119da:	4b30      	ldr	r3, [pc, #192]	; (8011a9c <vTaskSuspend+0xd4>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	e000      	b.n	80119e2 <vTaskSuspend+0x1a>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	3304      	adds	r3, #4
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7ff f847 	bl	8010a7c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d004      	beq.n	8011a00 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	3318      	adds	r3, #24
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff f83e 	bl	8010a7c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	3304      	adds	r3, #4
 8011a04:	4619      	mov	r1, r3
 8011a06:	4826      	ldr	r0, [pc, #152]	; (8011aa0 <vTaskSuspend+0xd8>)
 8011a08:	f7fe ffdb 	bl	80109c2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d103      	bne.n	8011a20 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8011a20:	f001 fc08 	bl	8013234 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8011a24:	4b1f      	ldr	r3, [pc, #124]	; (8011aa4 <vTaskSuspend+0xdc>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d005      	beq.n	8011a38 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8011a2c:	f001 fbd2 	bl	80131d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8011a30:	f000 fc68 	bl	8012304 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8011a34:	f001 fbfe 	bl	8013234 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8011a38:	4b18      	ldr	r3, [pc, #96]	; (8011a9c <vTaskSuspend+0xd4>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	68fa      	ldr	r2, [r7, #12]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d127      	bne.n	8011a92 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8011a42:	4b18      	ldr	r3, [pc, #96]	; (8011aa4 <vTaskSuspend+0xdc>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d017      	beq.n	8011a7a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8011a4a:	4b17      	ldr	r3, [pc, #92]	; (8011aa8 <vTaskSuspend+0xe0>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00a      	beq.n	8011a68 <vTaskSuspend+0xa0>
	__asm volatile
 8011a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a56:	f383 8811 	msr	BASEPRI, r3
 8011a5a:	f3bf 8f6f 	isb	sy
 8011a5e:	f3bf 8f4f 	dsb	sy
 8011a62:	60bb      	str	r3, [r7, #8]
}
 8011a64:	bf00      	nop
 8011a66:	e7fe      	b.n	8011a66 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8011a68:	4b10      	ldr	r3, [pc, #64]	; (8011aac <vTaskSuspend+0xe4>)
 8011a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a6e:	601a      	str	r2, [r3, #0]
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011a78:	e00b      	b.n	8011a92 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8011a7a:	4b09      	ldr	r3, [pc, #36]	; (8011aa0 <vTaskSuspend+0xd8>)
 8011a7c:	681a      	ldr	r2, [r3, #0]
 8011a7e:	4b0c      	ldr	r3, [pc, #48]	; (8011ab0 <vTaskSuspend+0xe8>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d103      	bne.n	8011a8e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <vTaskSuspend+0xd4>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	601a      	str	r2, [r3, #0]
	}
 8011a8c:	e001      	b.n	8011a92 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8011a8e:	f000 f9ed 	bl	8011e6c <vTaskSwitchContext>
	}
 8011a92:	bf00      	nop
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	2000213c 	.word	0x2000213c
 8011aa0:	200025fc 	.word	0x200025fc
 8011aa4:	2000261c 	.word	0x2000261c
 8011aa8:	20002638 	.word	0x20002638
 8011aac:	e000ed04 	.word	0xe000ed04
 8011ab0:	20002610 	.word	0x20002610

08011ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b08a      	sub	sp, #40	; 0x28
 8011ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011aba:	2300      	movs	r3, #0
 8011abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011ac2:	463a      	mov	r2, r7
 8011ac4:	1d39      	adds	r1, r7, #4
 8011ac6:	f107 0308 	add.w	r3, r7, #8
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fe ff18 	bl	8010900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	9202      	str	r2, [sp, #8]
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	2300      	movs	r3, #0
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	2300      	movs	r3, #0
 8011ae0:	460a      	mov	r2, r1
 8011ae2:	4921      	ldr	r1, [pc, #132]	; (8011b68 <vTaskStartScheduler+0xb4>)
 8011ae4:	4821      	ldr	r0, [pc, #132]	; (8011b6c <vTaskStartScheduler+0xb8>)
 8011ae6:	f7ff fd99 	bl	801161c <xTaskCreateStatic>
 8011aea:	4603      	mov	r3, r0
 8011aec:	4a20      	ldr	r2, [pc, #128]	; (8011b70 <vTaskStartScheduler+0xbc>)
 8011aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011af0:	4b1f      	ldr	r3, [pc, #124]	; (8011b70 <vTaskStartScheduler+0xbc>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011af8:	2301      	movs	r3, #1
 8011afa:	617b      	str	r3, [r7, #20]
 8011afc:	e001      	b.n	8011b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d102      	bne.n	8011b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011b08:	f000 feea 	bl	80128e0 <xTimerCreateTimerTask>
 8011b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d116      	bne.n	8011b42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	613b      	str	r3, [r7, #16]
}
 8011b26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011b28:	4b12      	ldr	r3, [pc, #72]	; (8011b74 <vTaskStartScheduler+0xc0>)
 8011b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011b30:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <vTaskStartScheduler+0xc4>)
 8011b32:	2201      	movs	r2, #1
 8011b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011b36:	4b11      	ldr	r3, [pc, #68]	; (8011b7c <vTaskStartScheduler+0xc8>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011b3c:	f001 faa8 	bl	8013090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011b40:	e00e      	b.n	8011b60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b48:	d10a      	bne.n	8011b60 <vTaskStartScheduler+0xac>
	__asm volatile
 8011b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b4e:	f383 8811 	msr	BASEPRI, r3
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	f3bf 8f4f 	dsb	sy
 8011b5a:	60fb      	str	r3, [r7, #12]
}
 8011b5c:	bf00      	nop
 8011b5e:	e7fe      	b.n	8011b5e <vTaskStartScheduler+0xaa>
}
 8011b60:	bf00      	nop
 8011b62:	3718      	adds	r7, #24
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	08019af4 	.word	0x08019af4
 8011b6c:	08012199 	.word	0x08012199
 8011b70:	20002634 	.word	0x20002634
 8011b74:	20002630 	.word	0x20002630
 8011b78:	2000261c 	.word	0x2000261c
 8011b7c:	20002614 	.word	0x20002614

08011b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011b80:	b480      	push	{r7}
 8011b82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011b84:	4b04      	ldr	r3, [pc, #16]	; (8011b98 <vTaskSuspendAll+0x18>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	4a03      	ldr	r2, [pc, #12]	; (8011b98 <vTaskSuspendAll+0x18>)
 8011b8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011b8e:	bf00      	nop
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr
 8011b98:	20002638 	.word	0x20002638

08011b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011baa:	4b42      	ldr	r3, [pc, #264]	; (8011cb4 <xTaskResumeAll+0x118>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d10a      	bne.n	8011bc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8011bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb6:	f383 8811 	msr	BASEPRI, r3
 8011bba:	f3bf 8f6f 	isb	sy
 8011bbe:	f3bf 8f4f 	dsb	sy
 8011bc2:	603b      	str	r3, [r7, #0]
}
 8011bc4:	bf00      	nop
 8011bc6:	e7fe      	b.n	8011bc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011bc8:	f001 fb04 	bl	80131d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011bcc:	4b39      	ldr	r3, [pc, #228]	; (8011cb4 <xTaskResumeAll+0x118>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	4a38      	ldr	r2, [pc, #224]	; (8011cb4 <xTaskResumeAll+0x118>)
 8011bd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bd6:	4b37      	ldr	r3, [pc, #220]	; (8011cb4 <xTaskResumeAll+0x118>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d162      	bne.n	8011ca4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011bde:	4b36      	ldr	r3, [pc, #216]	; (8011cb8 <xTaskResumeAll+0x11c>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d05e      	beq.n	8011ca4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011be6:	e02f      	b.n	8011c48 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011be8:	4b34      	ldr	r3, [pc, #208]	; (8011cbc <xTaskResumeAll+0x120>)
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	3318      	adds	r3, #24
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fe ff41 	bl	8010a7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7fe ff3c 	bl	8010a7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c08:	4b2d      	ldr	r3, [pc, #180]	; (8011cc0 <xTaskResumeAll+0x124>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d903      	bls.n	8011c18 <xTaskResumeAll+0x7c>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c14:	4a2a      	ldr	r2, [pc, #168]	; (8011cc0 <xTaskResumeAll+0x124>)
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4413      	add	r3, r2
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	4a27      	ldr	r2, [pc, #156]	; (8011cc4 <xTaskResumeAll+0x128>)
 8011c26:	441a      	add	r2, r3
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7fe fec7 	bl	80109c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c38:	4b23      	ldr	r3, [pc, #140]	; (8011cc8 <xTaskResumeAll+0x12c>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d302      	bcc.n	8011c48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011c42:	4b22      	ldr	r3, [pc, #136]	; (8011ccc <xTaskResumeAll+0x130>)
 8011c44:	2201      	movs	r2, #1
 8011c46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c48:	4b1c      	ldr	r3, [pc, #112]	; (8011cbc <xTaskResumeAll+0x120>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1cb      	bne.n	8011be8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d001      	beq.n	8011c5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011c56:	f000 fb55 	bl	8012304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011c5a:	4b1d      	ldr	r3, [pc, #116]	; (8011cd0 <xTaskResumeAll+0x134>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d010      	beq.n	8011c88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011c66:	f000 f847 	bl	8011cf8 <xTaskIncrementTick>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d002      	beq.n	8011c76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011c70:	4b16      	ldr	r3, [pc, #88]	; (8011ccc <xTaskResumeAll+0x130>)
 8011c72:	2201      	movs	r2, #1
 8011c74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	3b01      	subs	r3, #1
 8011c7a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d1f1      	bne.n	8011c66 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011c82:	4b13      	ldr	r3, [pc, #76]	; (8011cd0 <xTaskResumeAll+0x134>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011c88:	4b10      	ldr	r3, [pc, #64]	; (8011ccc <xTaskResumeAll+0x130>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d009      	beq.n	8011ca4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011c90:	2301      	movs	r3, #1
 8011c92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011c94:	4b0f      	ldr	r3, [pc, #60]	; (8011cd4 <xTaskResumeAll+0x138>)
 8011c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c9a:	601a      	str	r2, [r3, #0]
 8011c9c:	f3bf 8f4f 	dsb	sy
 8011ca0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ca4:	f001 fac6 	bl	8013234 <vPortExitCritical>

	return xAlreadyYielded;
 8011ca8:	68bb      	ldr	r3, [r7, #8]
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	20002638 	.word	0x20002638
 8011cb8:	20002610 	.word	0x20002610
 8011cbc:	200025d0 	.word	0x200025d0
 8011cc0:	20002618 	.word	0x20002618
 8011cc4:	20002140 	.word	0x20002140
 8011cc8:	2000213c 	.word	0x2000213c
 8011ccc:	20002624 	.word	0x20002624
 8011cd0:	20002620 	.word	0x20002620
 8011cd4:	e000ed04 	.word	0xe000ed04

08011cd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011cde:	4b05      	ldr	r3, [pc, #20]	; (8011cf4 <xTaskGetTickCount+0x1c>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011ce4:	687b      	ldr	r3, [r7, #4]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	370c      	adds	r7, #12
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20002614 	.word	0x20002614

08011cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d02:	4b4f      	ldr	r3, [pc, #316]	; (8011e40 <xTaskIncrementTick+0x148>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f040 808f 	bne.w	8011e2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011d0c:	4b4d      	ldr	r3, [pc, #308]	; (8011e44 <xTaskIncrementTick+0x14c>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	3301      	adds	r3, #1
 8011d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011d14:	4a4b      	ldr	r2, [pc, #300]	; (8011e44 <xTaskIncrementTick+0x14c>)
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d120      	bne.n	8011d62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011d20:	4b49      	ldr	r3, [pc, #292]	; (8011e48 <xTaskIncrementTick+0x150>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d00a      	beq.n	8011d40 <xTaskIncrementTick+0x48>
	__asm volatile
 8011d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	603b      	str	r3, [r7, #0]
}
 8011d3c:	bf00      	nop
 8011d3e:	e7fe      	b.n	8011d3e <xTaskIncrementTick+0x46>
 8011d40:	4b41      	ldr	r3, [pc, #260]	; (8011e48 <xTaskIncrementTick+0x150>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	60fb      	str	r3, [r7, #12]
 8011d46:	4b41      	ldr	r3, [pc, #260]	; (8011e4c <xTaskIncrementTick+0x154>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4a3f      	ldr	r2, [pc, #252]	; (8011e48 <xTaskIncrementTick+0x150>)
 8011d4c:	6013      	str	r3, [r2, #0]
 8011d4e:	4a3f      	ldr	r2, [pc, #252]	; (8011e4c <xTaskIncrementTick+0x154>)
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	6013      	str	r3, [r2, #0]
 8011d54:	4b3e      	ldr	r3, [pc, #248]	; (8011e50 <xTaskIncrementTick+0x158>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	3301      	adds	r3, #1
 8011d5a:	4a3d      	ldr	r2, [pc, #244]	; (8011e50 <xTaskIncrementTick+0x158>)
 8011d5c:	6013      	str	r3, [r2, #0]
 8011d5e:	f000 fad1 	bl	8012304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d62:	4b3c      	ldr	r3, [pc, #240]	; (8011e54 <xTaskIncrementTick+0x15c>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	693a      	ldr	r2, [r7, #16]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d349      	bcc.n	8011e00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d6c:	4b36      	ldr	r3, [pc, #216]	; (8011e48 <xTaskIncrementTick+0x150>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d104      	bne.n	8011d80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d76:	4b37      	ldr	r3, [pc, #220]	; (8011e54 <xTaskIncrementTick+0x15c>)
 8011d78:	f04f 32ff 	mov.w	r2, #4294967295
 8011d7c:	601a      	str	r2, [r3, #0]
					break;
 8011d7e:	e03f      	b.n	8011e00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d80:	4b31      	ldr	r3, [pc, #196]	; (8011e48 <xTaskIncrementTick+0x150>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011d90:	693a      	ldr	r2, [r7, #16]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d203      	bcs.n	8011da0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011d98:	4a2e      	ldr	r2, [pc, #184]	; (8011e54 <xTaskIncrementTick+0x15c>)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011d9e:	e02f      	b.n	8011e00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	3304      	adds	r3, #4
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fe fe69 	bl	8010a7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d004      	beq.n	8011dbc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	3318      	adds	r3, #24
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fe fe60 	bl	8010a7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc0:	4b25      	ldr	r3, [pc, #148]	; (8011e58 <xTaskIncrementTick+0x160>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d903      	bls.n	8011dd0 <xTaskIncrementTick+0xd8>
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dcc:	4a22      	ldr	r2, [pc, #136]	; (8011e58 <xTaskIncrementTick+0x160>)
 8011dce:	6013      	str	r3, [r2, #0]
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	4413      	add	r3, r2
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	4a1f      	ldr	r2, [pc, #124]	; (8011e5c <xTaskIncrementTick+0x164>)
 8011dde:	441a      	add	r2, r3
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	3304      	adds	r3, #4
 8011de4:	4619      	mov	r1, r3
 8011de6:	4610      	mov	r0, r2
 8011de8:	f7fe fdeb 	bl	80109c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011df0:	4b1b      	ldr	r3, [pc, #108]	; (8011e60 <xTaskIncrementTick+0x168>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d3b8      	bcc.n	8011d6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dfe:	e7b5      	b.n	8011d6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011e00:	4b17      	ldr	r3, [pc, #92]	; (8011e60 <xTaskIncrementTick+0x168>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e06:	4915      	ldr	r1, [pc, #84]	; (8011e5c <xTaskIncrementTick+0x164>)
 8011e08:	4613      	mov	r3, r2
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	4413      	add	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	440b      	add	r3, r1
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d901      	bls.n	8011e1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011e1c:	4b11      	ldr	r3, [pc, #68]	; (8011e64 <xTaskIncrementTick+0x16c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d007      	beq.n	8011e34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011e24:	2301      	movs	r3, #1
 8011e26:	617b      	str	r3, [r7, #20]
 8011e28:	e004      	b.n	8011e34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011e2a:	4b0f      	ldr	r3, [pc, #60]	; (8011e68 <xTaskIncrementTick+0x170>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	4a0d      	ldr	r2, [pc, #52]	; (8011e68 <xTaskIncrementTick+0x170>)
 8011e32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011e34:	697b      	ldr	r3, [r7, #20]
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3718      	adds	r7, #24
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	20002638 	.word	0x20002638
 8011e44:	20002614 	.word	0x20002614
 8011e48:	200025c8 	.word	0x200025c8
 8011e4c:	200025cc 	.word	0x200025cc
 8011e50:	20002628 	.word	0x20002628
 8011e54:	20002630 	.word	0x20002630
 8011e58:	20002618 	.word	0x20002618
 8011e5c:	20002140 	.word	0x20002140
 8011e60:	2000213c 	.word	0x2000213c
 8011e64:	20002624 	.word	0x20002624
 8011e68:	20002620 	.word	0x20002620

08011e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e72:	4b28      	ldr	r3, [pc, #160]	; (8011f14 <vTaskSwitchContext+0xa8>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d003      	beq.n	8011e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011e7a:	4b27      	ldr	r3, [pc, #156]	; (8011f18 <vTaskSwitchContext+0xac>)
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011e80:	e041      	b.n	8011f06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8011e82:	4b25      	ldr	r3, [pc, #148]	; (8011f18 <vTaskSwitchContext+0xac>)
 8011e84:	2200      	movs	r2, #0
 8011e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e88:	4b24      	ldr	r3, [pc, #144]	; (8011f1c <vTaskSwitchContext+0xb0>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	60fb      	str	r3, [r7, #12]
 8011e8e:	e010      	b.n	8011eb2 <vTaskSwitchContext+0x46>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d10a      	bne.n	8011eac <vTaskSwitchContext+0x40>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9a:	f383 8811 	msr	BASEPRI, r3
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f3bf 8f4f 	dsb	sy
 8011ea6:	607b      	str	r3, [r7, #4]
}
 8011ea8:	bf00      	nop
 8011eaa:	e7fe      	b.n	8011eaa <vTaskSwitchContext+0x3e>
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	3b01      	subs	r3, #1
 8011eb0:	60fb      	str	r3, [r7, #12]
 8011eb2:	491b      	ldr	r1, [pc, #108]	; (8011f20 <vTaskSwitchContext+0xb4>)
 8011eb4:	68fa      	ldr	r2, [r7, #12]
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	4413      	add	r3, r2
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	440b      	add	r3, r1
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d0e4      	beq.n	8011e90 <vTaskSwitchContext+0x24>
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	4a13      	ldr	r2, [pc, #76]	; (8011f20 <vTaskSwitchContext+0xb4>)
 8011ed2:	4413      	add	r3, r2
 8011ed4:	60bb      	str	r3, [r7, #8]
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	685a      	ldr	r2, [r3, #4]
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	605a      	str	r2, [r3, #4]
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	685a      	ldr	r2, [r3, #4]
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	3308      	adds	r3, #8
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d104      	bne.n	8011ef6 <vTaskSwitchContext+0x8a>
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	605a      	str	r2, [r3, #4]
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	4a09      	ldr	r2, [pc, #36]	; (8011f24 <vTaskSwitchContext+0xb8>)
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	4a06      	ldr	r2, [pc, #24]	; (8011f1c <vTaskSwitchContext+0xb0>)
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	6013      	str	r3, [r2, #0]
}
 8011f06:	bf00      	nop
 8011f08:	3714      	adds	r7, #20
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	20002638 	.word	0x20002638
 8011f18:	20002624 	.word	0x20002624
 8011f1c:	20002618 	.word	0x20002618
 8011f20:	20002140 	.word	0x20002140
 8011f24:	2000213c 	.word	0x2000213c

08011f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d10a      	bne.n	8011f4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3c:	f383 8811 	msr	BASEPRI, r3
 8011f40:	f3bf 8f6f 	isb	sy
 8011f44:	f3bf 8f4f 	dsb	sy
 8011f48:	60fb      	str	r3, [r7, #12]
}
 8011f4a:	bf00      	nop
 8011f4c:	e7fe      	b.n	8011f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f4e:	4b07      	ldr	r3, [pc, #28]	; (8011f6c <vTaskPlaceOnEventList+0x44>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	3318      	adds	r3, #24
 8011f54:	4619      	mov	r1, r3
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7fe fd57 	bl	8010a0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f5c:	2101      	movs	r1, #1
 8011f5e:	6838      	ldr	r0, [r7, #0]
 8011f60:	f000 fc6a 	bl	8012838 <prvAddCurrentTaskToDelayedList>
}
 8011f64:	bf00      	nop
 8011f66:	3710      	adds	r7, #16
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	2000213c 	.word	0x2000213c

08011f70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d10a      	bne.n	8011f98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f86:	f383 8811 	msr	BASEPRI, r3
 8011f8a:	f3bf 8f6f 	isb	sy
 8011f8e:	f3bf 8f4f 	dsb	sy
 8011f92:	617b      	str	r3, [r7, #20]
}
 8011f94:	bf00      	nop
 8011f96:	e7fe      	b.n	8011f96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f98:	4b0a      	ldr	r3, [pc, #40]	; (8011fc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	3318      	adds	r3, #24
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f7fe fd0e 	bl	80109c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011fac:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011fb2:	6879      	ldr	r1, [r7, #4]
 8011fb4:	68b8      	ldr	r0, [r7, #8]
 8011fb6:	f000 fc3f 	bl	8012838 <prvAddCurrentTaskToDelayedList>
	}
 8011fba:	bf00      	nop
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	2000213c 	.word	0x2000213c

08011fc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d10a      	bne.n	8011ff4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe2:	f383 8811 	msr	BASEPRI, r3
 8011fe6:	f3bf 8f6f 	isb	sy
 8011fea:	f3bf 8f4f 	dsb	sy
 8011fee:	60fb      	str	r3, [r7, #12]
}
 8011ff0:	bf00      	nop
 8011ff2:	e7fe      	b.n	8011ff2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	3318      	adds	r3, #24
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fe fd3f 	bl	8010a7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ffe:	4b1e      	ldr	r3, [pc, #120]	; (8012078 <xTaskRemoveFromEventList+0xb0>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d11d      	bne.n	8012042 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	3304      	adds	r3, #4
 801200a:	4618      	mov	r0, r3
 801200c:	f7fe fd36 	bl	8010a7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012014:	4b19      	ldr	r3, [pc, #100]	; (801207c <xTaskRemoveFromEventList+0xb4>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	429a      	cmp	r2, r3
 801201a:	d903      	bls.n	8012024 <xTaskRemoveFromEventList+0x5c>
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012020:	4a16      	ldr	r2, [pc, #88]	; (801207c <xTaskRemoveFromEventList+0xb4>)
 8012022:	6013      	str	r3, [r2, #0]
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012028:	4613      	mov	r3, r2
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	4413      	add	r3, r2
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	4a13      	ldr	r2, [pc, #76]	; (8012080 <xTaskRemoveFromEventList+0xb8>)
 8012032:	441a      	add	r2, r3
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	3304      	adds	r3, #4
 8012038:	4619      	mov	r1, r3
 801203a:	4610      	mov	r0, r2
 801203c:	f7fe fcc1 	bl	80109c2 <vListInsertEnd>
 8012040:	e005      	b.n	801204e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	3318      	adds	r3, #24
 8012046:	4619      	mov	r1, r3
 8012048:	480e      	ldr	r0, [pc, #56]	; (8012084 <xTaskRemoveFromEventList+0xbc>)
 801204a:	f7fe fcba 	bl	80109c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012052:	4b0d      	ldr	r3, [pc, #52]	; (8012088 <xTaskRemoveFromEventList+0xc0>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012058:	429a      	cmp	r2, r3
 801205a:	d905      	bls.n	8012068 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801205c:	2301      	movs	r3, #1
 801205e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012060:	4b0a      	ldr	r3, [pc, #40]	; (801208c <xTaskRemoveFromEventList+0xc4>)
 8012062:	2201      	movs	r2, #1
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	e001      	b.n	801206c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012068:	2300      	movs	r3, #0
 801206a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801206c:	697b      	ldr	r3, [r7, #20]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3718      	adds	r7, #24
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	20002638 	.word	0x20002638
 801207c:	20002618 	.word	0x20002618
 8012080:	20002140 	.word	0x20002140
 8012084:	200025d0 	.word	0x200025d0
 8012088:	2000213c 	.word	0x2000213c
 801208c:	20002624 	.word	0x20002624

08012090 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012098:	4b06      	ldr	r3, [pc, #24]	; (80120b4 <vTaskInternalSetTimeOutState+0x24>)
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80120a0:	4b05      	ldr	r3, [pc, #20]	; (80120b8 <vTaskInternalSetTimeOutState+0x28>)
 80120a2:	681a      	ldr	r2, [r3, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	605a      	str	r2, [r3, #4]
}
 80120a8:	bf00      	nop
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr
 80120b4:	20002628 	.word	0x20002628
 80120b8:	20002614 	.word	0x20002614

080120bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b088      	sub	sp, #32
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d10a      	bne.n	80120e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80120cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d0:	f383 8811 	msr	BASEPRI, r3
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	f3bf 8f4f 	dsb	sy
 80120dc:	613b      	str	r3, [r7, #16]
}
 80120de:	bf00      	nop
 80120e0:	e7fe      	b.n	80120e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d10a      	bne.n	80120fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80120e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ec:	f383 8811 	msr	BASEPRI, r3
 80120f0:	f3bf 8f6f 	isb	sy
 80120f4:	f3bf 8f4f 	dsb	sy
 80120f8:	60fb      	str	r3, [r7, #12]
}
 80120fa:	bf00      	nop
 80120fc:	e7fe      	b.n	80120fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80120fe:	f001 f869 	bl	80131d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012102:	4b1d      	ldr	r3, [pc, #116]	; (8012178 <xTaskCheckForTimeOut+0xbc>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	69ba      	ldr	r2, [r7, #24]
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801211a:	d102      	bne.n	8012122 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801211c:	2300      	movs	r3, #0
 801211e:	61fb      	str	r3, [r7, #28]
 8012120:	e023      	b.n	801216a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	4b15      	ldr	r3, [pc, #84]	; (801217c <xTaskCheckForTimeOut+0xc0>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	429a      	cmp	r2, r3
 801212c:	d007      	beq.n	801213e <xTaskCheckForTimeOut+0x82>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	69ba      	ldr	r2, [r7, #24]
 8012134:	429a      	cmp	r2, r3
 8012136:	d302      	bcc.n	801213e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012138:	2301      	movs	r3, #1
 801213a:	61fb      	str	r3, [r7, #28]
 801213c:	e015      	b.n	801216a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	697a      	ldr	r2, [r7, #20]
 8012144:	429a      	cmp	r2, r3
 8012146:	d20b      	bcs.n	8012160 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	1ad2      	subs	r2, r2, r3
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff ff9b 	bl	8012090 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801215a:	2300      	movs	r3, #0
 801215c:	61fb      	str	r3, [r7, #28]
 801215e:	e004      	b.n	801216a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012166:	2301      	movs	r3, #1
 8012168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801216a:	f001 f863 	bl	8013234 <vPortExitCritical>

	return xReturn;
 801216e:	69fb      	ldr	r3, [r7, #28]
}
 8012170:	4618      	mov	r0, r3
 8012172:	3720      	adds	r7, #32
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	20002614 	.word	0x20002614
 801217c:	20002628 	.word	0x20002628

08012180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012180:	b480      	push	{r7}
 8012182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012184:	4b03      	ldr	r3, [pc, #12]	; (8012194 <vTaskMissedYield+0x14>)
 8012186:	2201      	movs	r2, #1
 8012188:	601a      	str	r2, [r3, #0]
}
 801218a:	bf00      	nop
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr
 8012194:	20002624 	.word	0x20002624

08012198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80121a0:	f000 f852 	bl	8012248 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80121a4:	4b06      	ldr	r3, [pc, #24]	; (80121c0 <prvIdleTask+0x28>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d9f9      	bls.n	80121a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80121ac:	4b05      	ldr	r3, [pc, #20]	; (80121c4 <prvIdleTask+0x2c>)
 80121ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121b2:	601a      	str	r2, [r3, #0]
 80121b4:	f3bf 8f4f 	dsb	sy
 80121b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80121bc:	e7f0      	b.n	80121a0 <prvIdleTask+0x8>
 80121be:	bf00      	nop
 80121c0:	20002140 	.word	0x20002140
 80121c4:	e000ed04 	.word	0xe000ed04

080121c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121ce:	2300      	movs	r3, #0
 80121d0:	607b      	str	r3, [r7, #4]
 80121d2:	e00c      	b.n	80121ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	4613      	mov	r3, r2
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	4413      	add	r3, r2
 80121dc:	009b      	lsls	r3, r3, #2
 80121de:	4a12      	ldr	r2, [pc, #72]	; (8012228 <prvInitialiseTaskLists+0x60>)
 80121e0:	4413      	add	r3, r2
 80121e2:	4618      	mov	r0, r3
 80121e4:	f7fe fbc0 	bl	8010968 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	3301      	adds	r3, #1
 80121ec:	607b      	str	r3, [r7, #4]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2b37      	cmp	r3, #55	; 0x37
 80121f2:	d9ef      	bls.n	80121d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80121f4:	480d      	ldr	r0, [pc, #52]	; (801222c <prvInitialiseTaskLists+0x64>)
 80121f6:	f7fe fbb7 	bl	8010968 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80121fa:	480d      	ldr	r0, [pc, #52]	; (8012230 <prvInitialiseTaskLists+0x68>)
 80121fc:	f7fe fbb4 	bl	8010968 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012200:	480c      	ldr	r0, [pc, #48]	; (8012234 <prvInitialiseTaskLists+0x6c>)
 8012202:	f7fe fbb1 	bl	8010968 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012206:	480c      	ldr	r0, [pc, #48]	; (8012238 <prvInitialiseTaskLists+0x70>)
 8012208:	f7fe fbae 	bl	8010968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801220c:	480b      	ldr	r0, [pc, #44]	; (801223c <prvInitialiseTaskLists+0x74>)
 801220e:	f7fe fbab 	bl	8010968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012212:	4b0b      	ldr	r3, [pc, #44]	; (8012240 <prvInitialiseTaskLists+0x78>)
 8012214:	4a05      	ldr	r2, [pc, #20]	; (801222c <prvInitialiseTaskLists+0x64>)
 8012216:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012218:	4b0a      	ldr	r3, [pc, #40]	; (8012244 <prvInitialiseTaskLists+0x7c>)
 801221a:	4a05      	ldr	r2, [pc, #20]	; (8012230 <prvInitialiseTaskLists+0x68>)
 801221c:	601a      	str	r2, [r3, #0]
}
 801221e:	bf00      	nop
 8012220:	3708      	adds	r7, #8
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	20002140 	.word	0x20002140
 801222c:	200025a0 	.word	0x200025a0
 8012230:	200025b4 	.word	0x200025b4
 8012234:	200025d0 	.word	0x200025d0
 8012238:	200025e4 	.word	0x200025e4
 801223c:	200025fc 	.word	0x200025fc
 8012240:	200025c8 	.word	0x200025c8
 8012244:	200025cc 	.word	0x200025cc

08012248 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801224e:	e019      	b.n	8012284 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012250:	f000 ffc0 	bl	80131d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012254:	4b10      	ldr	r3, [pc, #64]	; (8012298 <prvCheckTasksWaitingTermination+0x50>)
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	68db      	ldr	r3, [r3, #12]
 801225a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	3304      	adds	r3, #4
 8012260:	4618      	mov	r0, r3
 8012262:	f7fe fc0b 	bl	8010a7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012266:	4b0d      	ldr	r3, [pc, #52]	; (801229c <prvCheckTasksWaitingTermination+0x54>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	3b01      	subs	r3, #1
 801226c:	4a0b      	ldr	r2, [pc, #44]	; (801229c <prvCheckTasksWaitingTermination+0x54>)
 801226e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012270:	4b0b      	ldr	r3, [pc, #44]	; (80122a0 <prvCheckTasksWaitingTermination+0x58>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	3b01      	subs	r3, #1
 8012276:	4a0a      	ldr	r2, [pc, #40]	; (80122a0 <prvCheckTasksWaitingTermination+0x58>)
 8012278:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801227a:	f000 ffdb 	bl	8013234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 f810 	bl	80122a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012284:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <prvCheckTasksWaitingTermination+0x58>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1e1      	bne.n	8012250 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801228c:	bf00      	nop
 801228e:	bf00      	nop
 8012290:	3708      	adds	r7, #8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	200025e4 	.word	0x200025e4
 801229c:	20002610 	.word	0x20002610
 80122a0:	200025f8 	.word	0x200025f8

080122a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d108      	bne.n	80122c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ba:	4618      	mov	r0, r3
 80122bc:	f001 f978 	bl	80135b0 <vPortFree>
				vPortFree( pxTCB );
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f001 f975 	bl	80135b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80122c6:	e018      	b.n	80122fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d103      	bne.n	80122da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f001 f96c 	bl	80135b0 <vPortFree>
	}
 80122d8:	e00f      	b.n	80122fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	d00a      	beq.n	80122fa <prvDeleteTCB+0x56>
	__asm volatile
 80122e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e8:	f383 8811 	msr	BASEPRI, r3
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	60fb      	str	r3, [r7, #12]
}
 80122f6:	bf00      	nop
 80122f8:	e7fe      	b.n	80122f8 <prvDeleteTCB+0x54>
	}
 80122fa:	bf00      	nop
 80122fc:	3710      	adds	r7, #16
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
	...

08012304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801230a:	4b0c      	ldr	r3, [pc, #48]	; (801233c <prvResetNextTaskUnblockTime+0x38>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d104      	bne.n	801231e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012314:	4b0a      	ldr	r3, [pc, #40]	; (8012340 <prvResetNextTaskUnblockTime+0x3c>)
 8012316:	f04f 32ff 	mov.w	r2, #4294967295
 801231a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801231c:	e008      	b.n	8012330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801231e:	4b07      	ldr	r3, [pc, #28]	; (801233c <prvResetNextTaskUnblockTime+0x38>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	4a04      	ldr	r2, [pc, #16]	; (8012340 <prvResetNextTaskUnblockTime+0x3c>)
 801232e:	6013      	str	r3, [r2, #0]
}
 8012330:	bf00      	nop
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr
 801233c:	200025c8 	.word	0x200025c8
 8012340:	20002630 	.word	0x20002630

08012344 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012344:	b480      	push	{r7}
 8012346:	b083      	sub	sp, #12
 8012348:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801234a:	4b0b      	ldr	r3, [pc, #44]	; (8012378 <xTaskGetSchedulerState+0x34>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d102      	bne.n	8012358 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012352:	2301      	movs	r3, #1
 8012354:	607b      	str	r3, [r7, #4]
 8012356:	e008      	b.n	801236a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012358:	4b08      	ldr	r3, [pc, #32]	; (801237c <xTaskGetSchedulerState+0x38>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d102      	bne.n	8012366 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012360:	2302      	movs	r3, #2
 8012362:	607b      	str	r3, [r7, #4]
 8012364:	e001      	b.n	801236a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012366:	2300      	movs	r3, #0
 8012368:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801236a:	687b      	ldr	r3, [r7, #4]
	}
 801236c:	4618      	mov	r0, r3
 801236e:	370c      	adds	r7, #12
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr
 8012378:	2000261c 	.word	0x2000261c
 801237c:	20002638 	.word	0x20002638

08012380 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012380:	b580      	push	{r7, lr}
 8012382:	b086      	sub	sp, #24
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801238c:	2300      	movs	r3, #0
 801238e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d056      	beq.n	8012444 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012396:	4b2e      	ldr	r3, [pc, #184]	; (8012450 <xTaskPriorityDisinherit+0xd0>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	693a      	ldr	r2, [r7, #16]
 801239c:	429a      	cmp	r2, r3
 801239e:	d00a      	beq.n	80123b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80123a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a4:	f383 8811 	msr	BASEPRI, r3
 80123a8:	f3bf 8f6f 	isb	sy
 80123ac:	f3bf 8f4f 	dsb	sy
 80123b0:	60fb      	str	r3, [r7, #12]
}
 80123b2:	bf00      	nop
 80123b4:	e7fe      	b.n	80123b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d10a      	bne.n	80123d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c2:	f383 8811 	msr	BASEPRI, r3
 80123c6:	f3bf 8f6f 	isb	sy
 80123ca:	f3bf 8f4f 	dsb	sy
 80123ce:	60bb      	str	r3, [r7, #8]
}
 80123d0:	bf00      	nop
 80123d2:	e7fe      	b.n	80123d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123d8:	1e5a      	subs	r2, r3, #1
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d02c      	beq.n	8012444 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d128      	bne.n	8012444 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	3304      	adds	r3, #4
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fe fb40 	bl	8010a7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012408:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012414:	4b0f      	ldr	r3, [pc, #60]	; (8012454 <xTaskPriorityDisinherit+0xd4>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	429a      	cmp	r2, r3
 801241a:	d903      	bls.n	8012424 <xTaskPriorityDisinherit+0xa4>
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012420:	4a0c      	ldr	r2, [pc, #48]	; (8012454 <xTaskPriorityDisinherit+0xd4>)
 8012422:	6013      	str	r3, [r2, #0]
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012428:	4613      	mov	r3, r2
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	4413      	add	r3, r2
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	4a09      	ldr	r2, [pc, #36]	; (8012458 <xTaskPriorityDisinherit+0xd8>)
 8012432:	441a      	add	r2, r3
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	3304      	adds	r3, #4
 8012438:	4619      	mov	r1, r3
 801243a:	4610      	mov	r0, r2
 801243c:	f7fe fac1 	bl	80109c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012440:	2301      	movs	r3, #1
 8012442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012444:	697b      	ldr	r3, [r7, #20]
	}
 8012446:	4618      	mov	r0, r3
 8012448:	3718      	adds	r7, #24
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	2000213c 	.word	0x2000213c
 8012454:	20002618 	.word	0x20002618
 8012458:	20002140 	.word	0x20002140

0801245c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801245c:	b580      	push	{r7, lr}
 801245e:	b086      	sub	sp, #24
 8012460:	af00      	add	r7, sp, #0
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	60b9      	str	r1, [r7, #8]
 8012466:	607a      	str	r2, [r7, #4]
 8012468:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801246a:	f000 feb3 	bl	80131d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801246e:	4b26      	ldr	r3, [pc, #152]	; (8012508 <xTaskNotifyWait+0xac>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012476:	b2db      	uxtb	r3, r3
 8012478:	2b02      	cmp	r3, #2
 801247a:	d01a      	beq.n	80124b2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801247c:	4b22      	ldr	r3, [pc, #136]	; (8012508 <xTaskNotifyWait+0xac>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	43d2      	mvns	r2, r2
 8012486:	400a      	ands	r2, r1
 8012488:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801248a:	4b1f      	ldr	r3, [pc, #124]	; (8012508 <xTaskNotifyWait+0xac>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	2201      	movs	r2, #1
 8012490:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00b      	beq.n	80124b2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801249a:	2101      	movs	r1, #1
 801249c:	6838      	ldr	r0, [r7, #0]
 801249e:	f000 f9cb 	bl	8012838 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80124a2:	4b1a      	ldr	r3, [pc, #104]	; (801250c <xTaskNotifyWait+0xb0>)
 80124a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	f3bf 8f4f 	dsb	sy
 80124ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80124b2:	f000 febf 	bl	8013234 <vPortExitCritical>

		taskENTER_CRITICAL();
 80124b6:	f000 fe8d 	bl	80131d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d004      	beq.n	80124ca <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80124c0:	4b11      	ldr	r3, [pc, #68]	; (8012508 <xTaskNotifyWait+0xac>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80124ca:	4b0f      	ldr	r3, [pc, #60]	; (8012508 <xTaskNotifyWait+0xac>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b02      	cmp	r3, #2
 80124d6:	d002      	beq.n	80124de <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80124d8:	2300      	movs	r3, #0
 80124da:	617b      	str	r3, [r7, #20]
 80124dc:	e008      	b.n	80124f0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80124de:	4b0a      	ldr	r3, [pc, #40]	; (8012508 <xTaskNotifyWait+0xac>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	43d2      	mvns	r2, r2
 80124e8:	400a      	ands	r2, r1
 80124ea:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80124ec:	2301      	movs	r3, #1
 80124ee:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80124f0:	4b05      	ldr	r3, [pc, #20]	; (8012508 <xTaskNotifyWait+0xac>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2200      	movs	r2, #0
 80124f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80124fa:	f000 fe9b 	bl	8013234 <vPortExitCritical>

		return xReturn;
 80124fe:	697b      	ldr	r3, [r7, #20]
	}
 8012500:	4618      	mov	r0, r3
 8012502:	3718      	adds	r7, #24
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	2000213c 	.word	0x2000213c
 801250c:	e000ed04 	.word	0xe000ed04

08012510 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012510:	b580      	push	{r7, lr}
 8012512:	b08a      	sub	sp, #40	; 0x28
 8012514:	af00      	add	r7, sp, #0
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	603b      	str	r3, [r7, #0]
 801251c:	4613      	mov	r3, r2
 801251e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012520:	2301      	movs	r3, #1
 8012522:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d10a      	bne.n	8012540 <xTaskGenericNotify+0x30>
	__asm volatile
 801252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	61bb      	str	r3, [r7, #24]
}
 801253c:	bf00      	nop
 801253e:	e7fe      	b.n	801253e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012544:	f000 fe46 	bl	80131d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d003      	beq.n	8012556 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801254e:	6a3b      	ldr	r3, [r7, #32]
 8012550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012556:	6a3b      	ldr	r3, [r7, #32]
 8012558:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801255c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801255e:	6a3b      	ldr	r3, [r7, #32]
 8012560:	2202      	movs	r2, #2
 8012562:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012566:	79fb      	ldrb	r3, [r7, #7]
 8012568:	2b04      	cmp	r3, #4
 801256a:	d828      	bhi.n	80125be <xTaskGenericNotify+0xae>
 801256c:	a201      	add	r2, pc, #4	; (adr r2, 8012574 <xTaskGenericNotify+0x64>)
 801256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012572:	bf00      	nop
 8012574:	080125df 	.word	0x080125df
 8012578:	08012589 	.word	0x08012589
 801257c:	08012597 	.word	0x08012597
 8012580:	080125a3 	.word	0x080125a3
 8012584:	080125ab 	.word	0x080125ab
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012588:	6a3b      	ldr	r3, [r7, #32]
 801258a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	431a      	orrs	r2, r3
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012594:	e026      	b.n	80125e4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012596:	6a3b      	ldr	r3, [r7, #32]
 8012598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801259a:	1c5a      	adds	r2, r3, #1
 801259c:	6a3b      	ldr	r3, [r7, #32]
 801259e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80125a0:	e020      	b.n	80125e4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80125a2:	6a3b      	ldr	r3, [r7, #32]
 80125a4:	68ba      	ldr	r2, [r7, #8]
 80125a6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80125a8:	e01c      	b.n	80125e4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80125aa:	7ffb      	ldrb	r3, [r7, #31]
 80125ac:	2b02      	cmp	r3, #2
 80125ae:	d003      	beq.n	80125b8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80125b0:	6a3b      	ldr	r3, [r7, #32]
 80125b2:	68ba      	ldr	r2, [r7, #8]
 80125b4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80125b6:	e015      	b.n	80125e4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80125b8:	2300      	movs	r3, #0
 80125ba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80125bc:	e012      	b.n	80125e4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80125be:	6a3b      	ldr	r3, [r7, #32]
 80125c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c6:	d00c      	beq.n	80125e2 <xTaskGenericNotify+0xd2>
	__asm volatile
 80125c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	617b      	str	r3, [r7, #20]
}
 80125da:	bf00      	nop
 80125dc:	e7fe      	b.n	80125dc <xTaskGenericNotify+0xcc>
					break;
 80125de:	bf00      	nop
 80125e0:	e000      	b.n	80125e4 <xTaskGenericNotify+0xd4>

					break;
 80125e2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80125e4:	7ffb      	ldrb	r3, [r7, #31]
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d13a      	bne.n	8012660 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125ea:	6a3b      	ldr	r3, [r7, #32]
 80125ec:	3304      	adds	r3, #4
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fe fa44 	bl	8010a7c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80125f4:	6a3b      	ldr	r3, [r7, #32]
 80125f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125f8:	4b1d      	ldr	r3, [pc, #116]	; (8012670 <xTaskGenericNotify+0x160>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d903      	bls.n	8012608 <xTaskGenericNotify+0xf8>
 8012600:	6a3b      	ldr	r3, [r7, #32]
 8012602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012604:	4a1a      	ldr	r2, [pc, #104]	; (8012670 <xTaskGenericNotify+0x160>)
 8012606:	6013      	str	r3, [r2, #0]
 8012608:	6a3b      	ldr	r3, [r7, #32]
 801260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801260c:	4613      	mov	r3, r2
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	4413      	add	r3, r2
 8012612:	009b      	lsls	r3, r3, #2
 8012614:	4a17      	ldr	r2, [pc, #92]	; (8012674 <xTaskGenericNotify+0x164>)
 8012616:	441a      	add	r2, r3
 8012618:	6a3b      	ldr	r3, [r7, #32]
 801261a:	3304      	adds	r3, #4
 801261c:	4619      	mov	r1, r3
 801261e:	4610      	mov	r0, r2
 8012620:	f7fe f9cf 	bl	80109c2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00a      	beq.n	8012642 <xTaskGenericNotify+0x132>
	__asm volatile
 801262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012630:	f383 8811 	msr	BASEPRI, r3
 8012634:	f3bf 8f6f 	isb	sy
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	613b      	str	r3, [r7, #16]
}
 801263e:	bf00      	nop
 8012640:	e7fe      	b.n	8012640 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012646:	4b0c      	ldr	r3, [pc, #48]	; (8012678 <xTaskGenericNotify+0x168>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801264c:	429a      	cmp	r2, r3
 801264e:	d907      	bls.n	8012660 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012650:	4b0a      	ldr	r3, [pc, #40]	; (801267c <xTaskGenericNotify+0x16c>)
 8012652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	f3bf 8f4f 	dsb	sy
 801265c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012660:	f000 fde8 	bl	8013234 <vPortExitCritical>

		return xReturn;
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012666:	4618      	mov	r0, r3
 8012668:	3728      	adds	r7, #40	; 0x28
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	20002618 	.word	0x20002618
 8012674:	20002140 	.word	0x20002140
 8012678:	2000213c 	.word	0x2000213c
 801267c:	e000ed04 	.word	0xe000ed04

08012680 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012680:	b580      	push	{r7, lr}
 8012682:	b08e      	sub	sp, #56	; 0x38
 8012684:	af00      	add	r7, sp, #0
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	603b      	str	r3, [r7, #0]
 801268c:	4613      	mov	r3, r2
 801268e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012690:	2301      	movs	r3, #1
 8012692:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10a      	bne.n	80126b0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269e:	f383 8811 	msr	BASEPRI, r3
 80126a2:	f3bf 8f6f 	isb	sy
 80126a6:	f3bf 8f4f 	dsb	sy
 80126aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126ac:	bf00      	nop
 80126ae:	e7fe      	b.n	80126ae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126b0:	f000 fe72 	bl	8013398 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80126b8:	f3ef 8211 	mrs	r2, BASEPRI
 80126bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	623a      	str	r2, [r7, #32]
 80126ce:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80126d0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80126d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d003      	beq.n	80126e2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80126da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80126e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80126e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	2202      	movs	r2, #2
 80126f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80126f4:	79fb      	ldrb	r3, [r7, #7]
 80126f6:	2b04      	cmp	r3, #4
 80126f8:	d828      	bhi.n	801274c <xTaskGenericNotifyFromISR+0xcc>
 80126fa:	a201      	add	r2, pc, #4	; (adr r2, 8012700 <xTaskGenericNotifyFromISR+0x80>)
 80126fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012700:	0801276d 	.word	0x0801276d
 8012704:	08012715 	.word	0x08012715
 8012708:	08012723 	.word	0x08012723
 801270c:	0801272f 	.word	0x0801272f
 8012710:	08012737 	.word	0x08012737
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	431a      	orrs	r2, r3
 801271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012720:	e027      	b.n	8012772 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012726:	1c5a      	adds	r2, r3, #1
 8012728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801272c:	e021      	b.n	8012772 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012730:	68ba      	ldr	r2, [r7, #8]
 8012732:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012734:	e01d      	b.n	8012772 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012736:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801273a:	2b02      	cmp	r3, #2
 801273c:	d003      	beq.n	8012746 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012740:	68ba      	ldr	r2, [r7, #8]
 8012742:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012744:	e015      	b.n	8012772 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8012746:	2300      	movs	r3, #0
 8012748:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801274a:	e012      	b.n	8012772 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012754:	d00c      	beq.n	8012770 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8012756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801275a:	f383 8811 	msr	BASEPRI, r3
 801275e:	f3bf 8f6f 	isb	sy
 8012762:	f3bf 8f4f 	dsb	sy
 8012766:	61bb      	str	r3, [r7, #24]
}
 8012768:	bf00      	nop
 801276a:	e7fe      	b.n	801276a <xTaskGenericNotifyFromISR+0xea>
					break;
 801276c:	bf00      	nop
 801276e:	e000      	b.n	8012772 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8012770:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012772:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012776:	2b01      	cmp	r3, #1
 8012778:	d146      	bne.n	8012808 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00a      	beq.n	8012798 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8012782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012786:	f383 8811 	msr	BASEPRI, r3
 801278a:	f3bf 8f6f 	isb	sy
 801278e:	f3bf 8f4f 	dsb	sy
 8012792:	617b      	str	r3, [r7, #20]
}
 8012794:	bf00      	nop
 8012796:	e7fe      	b.n	8012796 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012798:	4b21      	ldr	r3, [pc, #132]	; (8012820 <xTaskGenericNotifyFromISR+0x1a0>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d11d      	bne.n	80127dc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a2:	3304      	adds	r3, #4
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7fe f969 	bl	8010a7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127ae:	4b1d      	ldr	r3, [pc, #116]	; (8012824 <xTaskGenericNotifyFromISR+0x1a4>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d903      	bls.n	80127be <xTaskGenericNotifyFromISR+0x13e>
 80127b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ba:	4a1a      	ldr	r2, [pc, #104]	; (8012824 <xTaskGenericNotifyFromISR+0x1a4>)
 80127bc:	6013      	str	r3, [r2, #0]
 80127be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127c2:	4613      	mov	r3, r2
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	4413      	add	r3, r2
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	4a17      	ldr	r2, [pc, #92]	; (8012828 <xTaskGenericNotifyFromISR+0x1a8>)
 80127cc:	441a      	add	r2, r3
 80127ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d0:	3304      	adds	r3, #4
 80127d2:	4619      	mov	r1, r3
 80127d4:	4610      	mov	r0, r2
 80127d6:	f7fe f8f4 	bl	80109c2 <vListInsertEnd>
 80127da:	e005      	b.n	80127e8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80127dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127de:	3318      	adds	r3, #24
 80127e0:	4619      	mov	r1, r3
 80127e2:	4812      	ldr	r0, [pc, #72]	; (801282c <xTaskGenericNotifyFromISR+0x1ac>)
 80127e4:	f7fe f8ed 	bl	80109c2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80127e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127ec:	4b10      	ldr	r3, [pc, #64]	; (8012830 <xTaskGenericNotifyFromISR+0x1b0>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d908      	bls.n	8012808 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80127f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d002      	beq.n	8012802 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80127fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127fe:	2201      	movs	r2, #1
 8012800:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012802:	4b0c      	ldr	r3, [pc, #48]	; (8012834 <xTaskGenericNotifyFromISR+0x1b4>)
 8012804:	2201      	movs	r2, #1
 8012806:	601a      	str	r2, [r3, #0]
 8012808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	f383 8811 	msr	BASEPRI, r3
}
 8012812:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012816:	4618      	mov	r0, r3
 8012818:	3738      	adds	r7, #56	; 0x38
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20002638 	.word	0x20002638
 8012824:	20002618 	.word	0x20002618
 8012828:	20002140 	.word	0x20002140
 801282c:	200025d0 	.word	0x200025d0
 8012830:	2000213c 	.word	0x2000213c
 8012834:	20002624 	.word	0x20002624

08012838 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012842:	4b21      	ldr	r3, [pc, #132]	; (80128c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012848:	4b20      	ldr	r3, [pc, #128]	; (80128cc <prvAddCurrentTaskToDelayedList+0x94>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	3304      	adds	r3, #4
 801284e:	4618      	mov	r0, r3
 8012850:	f7fe f914 	bl	8010a7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801285a:	d10a      	bne.n	8012872 <prvAddCurrentTaskToDelayedList+0x3a>
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d007      	beq.n	8012872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012862:	4b1a      	ldr	r3, [pc, #104]	; (80128cc <prvAddCurrentTaskToDelayedList+0x94>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	3304      	adds	r3, #4
 8012868:	4619      	mov	r1, r3
 801286a:	4819      	ldr	r0, [pc, #100]	; (80128d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801286c:	f7fe f8a9 	bl	80109c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012870:	e026      	b.n	80128c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012872:	68fa      	ldr	r2, [r7, #12]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4413      	add	r3, r2
 8012878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801287a:	4b14      	ldr	r3, [pc, #80]	; (80128cc <prvAddCurrentTaskToDelayedList+0x94>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012882:	68ba      	ldr	r2, [r7, #8]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	429a      	cmp	r2, r3
 8012888:	d209      	bcs.n	801289e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801288a:	4b12      	ldr	r3, [pc, #72]	; (80128d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	4b0f      	ldr	r3, [pc, #60]	; (80128cc <prvAddCurrentTaskToDelayedList+0x94>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	3304      	adds	r3, #4
 8012894:	4619      	mov	r1, r3
 8012896:	4610      	mov	r0, r2
 8012898:	f7fe f8b7 	bl	8010a0a <vListInsert>
}
 801289c:	e010      	b.n	80128c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801289e:	4b0e      	ldr	r3, [pc, #56]	; (80128d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	4b0a      	ldr	r3, [pc, #40]	; (80128cc <prvAddCurrentTaskToDelayedList+0x94>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	3304      	adds	r3, #4
 80128a8:	4619      	mov	r1, r3
 80128aa:	4610      	mov	r0, r2
 80128ac:	f7fe f8ad 	bl	8010a0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80128b0:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	68ba      	ldr	r2, [r7, #8]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d202      	bcs.n	80128c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80128ba:	4a08      	ldr	r2, [pc, #32]	; (80128dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	6013      	str	r3, [r2, #0]
}
 80128c0:	bf00      	nop
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20002614 	.word	0x20002614
 80128cc:	2000213c 	.word	0x2000213c
 80128d0:	200025fc 	.word	0x200025fc
 80128d4:	200025cc 	.word	0x200025cc
 80128d8:	200025c8 	.word	0x200025c8
 80128dc:	20002630 	.word	0x20002630

080128e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b08a      	sub	sp, #40	; 0x28
 80128e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80128ea:	f000 fb07 	bl	8012efc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80128ee:	4b1c      	ldr	r3, [pc, #112]	; (8012960 <xTimerCreateTimerTask+0x80>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d021      	beq.n	801293a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80128f6:	2300      	movs	r3, #0
 80128f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80128fa:	2300      	movs	r3, #0
 80128fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80128fe:	1d3a      	adds	r2, r7, #4
 8012900:	f107 0108 	add.w	r1, r7, #8
 8012904:	f107 030c 	add.w	r3, r7, #12
 8012908:	4618      	mov	r0, r3
 801290a:	f7fe f813 	bl	8010934 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801290e:	6879      	ldr	r1, [r7, #4]
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	9202      	str	r2, [sp, #8]
 8012916:	9301      	str	r3, [sp, #4]
 8012918:	2302      	movs	r3, #2
 801291a:	9300      	str	r3, [sp, #0]
 801291c:	2300      	movs	r3, #0
 801291e:	460a      	mov	r2, r1
 8012920:	4910      	ldr	r1, [pc, #64]	; (8012964 <xTimerCreateTimerTask+0x84>)
 8012922:	4811      	ldr	r0, [pc, #68]	; (8012968 <xTimerCreateTimerTask+0x88>)
 8012924:	f7fe fe7a 	bl	801161c <xTaskCreateStatic>
 8012928:	4603      	mov	r3, r0
 801292a:	4a10      	ldr	r2, [pc, #64]	; (801296c <xTimerCreateTimerTask+0x8c>)
 801292c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801292e:	4b0f      	ldr	r3, [pc, #60]	; (801296c <xTimerCreateTimerTask+0x8c>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d001      	beq.n	801293a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012936:	2301      	movs	r3, #1
 8012938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10a      	bne.n	8012956 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012944:	f383 8811 	msr	BASEPRI, r3
 8012948:	f3bf 8f6f 	isb	sy
 801294c:	f3bf 8f4f 	dsb	sy
 8012950:	613b      	str	r3, [r7, #16]
}
 8012952:	bf00      	nop
 8012954:	e7fe      	b.n	8012954 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012956:	697b      	ldr	r3, [r7, #20]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3718      	adds	r7, #24
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	2000266c 	.word	0x2000266c
 8012964:	08019afc 	.word	0x08019afc
 8012968:	08012aa5 	.word	0x08012aa5
 801296c:	20002670 	.word	0x20002670

08012970 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b08a      	sub	sp, #40	; 0x28
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
 801297c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801297e:	2300      	movs	r3, #0
 8012980:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d10a      	bne.n	801299e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298c:	f383 8811 	msr	BASEPRI, r3
 8012990:	f3bf 8f6f 	isb	sy
 8012994:	f3bf 8f4f 	dsb	sy
 8012998:	623b      	str	r3, [r7, #32]
}
 801299a:	bf00      	nop
 801299c:	e7fe      	b.n	801299c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801299e:	4b1a      	ldr	r3, [pc, #104]	; (8012a08 <xTimerGenericCommand+0x98>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d02a      	beq.n	80129fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	2b05      	cmp	r3, #5
 80129b6:	dc18      	bgt.n	80129ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80129b8:	f7ff fcc4 	bl	8012344 <xTaskGetSchedulerState>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b02      	cmp	r3, #2
 80129c0:	d109      	bne.n	80129d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80129c2:	4b11      	ldr	r3, [pc, #68]	; (8012a08 <xTimerGenericCommand+0x98>)
 80129c4:	6818      	ldr	r0, [r3, #0]
 80129c6:	f107 0110 	add.w	r1, r7, #16
 80129ca:	2300      	movs	r3, #0
 80129cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129ce:	f7fe f9bd 	bl	8010d4c <xQueueGenericSend>
 80129d2:	6278      	str	r0, [r7, #36]	; 0x24
 80129d4:	e012      	b.n	80129fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80129d6:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <xTimerGenericCommand+0x98>)
 80129d8:	6818      	ldr	r0, [r3, #0]
 80129da:	f107 0110 	add.w	r1, r7, #16
 80129de:	2300      	movs	r3, #0
 80129e0:	2200      	movs	r2, #0
 80129e2:	f7fe f9b3 	bl	8010d4c <xQueueGenericSend>
 80129e6:	6278      	str	r0, [r7, #36]	; 0x24
 80129e8:	e008      	b.n	80129fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80129ea:	4b07      	ldr	r3, [pc, #28]	; (8012a08 <xTimerGenericCommand+0x98>)
 80129ec:	6818      	ldr	r0, [r3, #0]
 80129ee:	f107 0110 	add.w	r1, r7, #16
 80129f2:	2300      	movs	r3, #0
 80129f4:	683a      	ldr	r2, [r7, #0]
 80129f6:	f7fe faa7 	bl	8010f48 <xQueueGenericSendFromISR>
 80129fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3728      	adds	r7, #40	; 0x28
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	2000266c 	.word	0x2000266c

08012a0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b088      	sub	sp, #32
 8012a10:	af02      	add	r7, sp, #8
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a16:	4b22      	ldr	r3, [pc, #136]	; (8012aa0 <prvProcessExpiredTimer+0x94>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	3304      	adds	r3, #4
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fe f829 	bl	8010a7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a30:	f003 0304 	and.w	r3, r3, #4
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d022      	beq.n	8012a7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	699a      	ldr	r2, [r3, #24]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	18d1      	adds	r1, r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	683a      	ldr	r2, [r7, #0]
 8012a44:	6978      	ldr	r0, [r7, #20]
 8012a46:	f000 f8d1 	bl	8012bec <prvInsertTimerInActiveList>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d01f      	beq.n	8012a90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012a50:	2300      	movs	r3, #0
 8012a52:	9300      	str	r3, [sp, #0]
 8012a54:	2300      	movs	r3, #0
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	2100      	movs	r1, #0
 8012a5a:	6978      	ldr	r0, [r7, #20]
 8012a5c:	f7ff ff88 	bl	8012970 <xTimerGenericCommand>
 8012a60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d113      	bne.n	8012a90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6c:	f383 8811 	msr	BASEPRI, r3
 8012a70:	f3bf 8f6f 	isb	sy
 8012a74:	f3bf 8f4f 	dsb	sy
 8012a78:	60fb      	str	r3, [r7, #12]
}
 8012a7a:	bf00      	nop
 8012a7c:	e7fe      	b.n	8012a7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a84:	f023 0301 	bic.w	r3, r3, #1
 8012a88:	b2da      	uxtb	r2, r3
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	6a1b      	ldr	r3, [r3, #32]
 8012a94:	6978      	ldr	r0, [r7, #20]
 8012a96:	4798      	blx	r3
}
 8012a98:	bf00      	nop
 8012a9a:	3718      	adds	r7, #24
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	20002664 	.word	0x20002664

08012aa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012aac:	f107 0308 	add.w	r3, r7, #8
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 f857 	bl	8012b64 <prvGetNextExpireTime>
 8012ab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	4619      	mov	r1, r3
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f000 f803 	bl	8012ac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012ac2:	f000 f8d5 	bl	8012c70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012ac6:	e7f1      	b.n	8012aac <prvTimerTask+0x8>

08012ac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012ad2:	f7ff f855 	bl	8011b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ad6:	f107 0308 	add.w	r3, r7, #8
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 f866 	bl	8012bac <prvSampleTimeNow>
 8012ae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d130      	bne.n	8012b4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10a      	bne.n	8012b04 <prvProcessTimerOrBlockTask+0x3c>
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d806      	bhi.n	8012b04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012af6:	f7ff f851 	bl	8011b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012afa:	68f9      	ldr	r1, [r7, #12]
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7ff ff85 	bl	8012a0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012b02:	e024      	b.n	8012b4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d008      	beq.n	8012b1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012b0a:	4b13      	ldr	r3, [pc, #76]	; (8012b58 <prvProcessTimerOrBlockTask+0x90>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d101      	bne.n	8012b18 <prvProcessTimerOrBlockTask+0x50>
 8012b14:	2301      	movs	r3, #1
 8012b16:	e000      	b.n	8012b1a <prvProcessTimerOrBlockTask+0x52>
 8012b18:	2300      	movs	r3, #0
 8012b1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012b1c:	4b0f      	ldr	r3, [pc, #60]	; (8012b5c <prvProcessTimerOrBlockTask+0x94>)
 8012b1e:	6818      	ldr	r0, [r3, #0]
 8012b20:	687a      	ldr	r2, [r7, #4]
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	683a      	ldr	r2, [r7, #0]
 8012b28:	4619      	mov	r1, r3
 8012b2a:	f7fe fd43 	bl	80115b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012b2e:	f7ff f835 	bl	8011b9c <xTaskResumeAll>
 8012b32:	4603      	mov	r3, r0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d10a      	bne.n	8012b4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012b38:	4b09      	ldr	r3, [pc, #36]	; (8012b60 <prvProcessTimerOrBlockTask+0x98>)
 8012b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b3e:	601a      	str	r2, [r3, #0]
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	f3bf 8f6f 	isb	sy
}
 8012b48:	e001      	b.n	8012b4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012b4a:	f7ff f827 	bl	8011b9c <xTaskResumeAll>
}
 8012b4e:	bf00      	nop
 8012b50:	3710      	adds	r7, #16
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	20002668 	.word	0x20002668
 8012b5c:	2000266c 	.word	0x2000266c
 8012b60:	e000ed04 	.word	0xe000ed04

08012b64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012b64:	b480      	push	{r7}
 8012b66:	b085      	sub	sp, #20
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012b6c:	4b0e      	ldr	r3, [pc, #56]	; (8012ba8 <prvGetNextExpireTime+0x44>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d101      	bne.n	8012b7a <prvGetNextExpireTime+0x16>
 8012b76:	2201      	movs	r2, #1
 8012b78:	e000      	b.n	8012b7c <prvGetNextExpireTime+0x18>
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d105      	bne.n	8012b94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b88:	4b07      	ldr	r3, [pc, #28]	; (8012ba8 <prvGetNextExpireTime+0x44>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	60fb      	str	r3, [r7, #12]
 8012b92:	e001      	b.n	8012b98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012b94:	2300      	movs	r3, #0
 8012b96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012b98:	68fb      	ldr	r3, [r7, #12]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3714      	adds	r7, #20
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	20002664 	.word	0x20002664

08012bac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012bb4:	f7ff f890 	bl	8011cd8 <xTaskGetTickCount>
 8012bb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012bba:	4b0b      	ldr	r3, [pc, #44]	; (8012be8 <prvSampleTimeNow+0x3c>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d205      	bcs.n	8012bd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012bc4:	f000 f936 	bl	8012e34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	e002      	b.n	8012bd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012bd6:	4a04      	ldr	r2, [pc, #16]	; (8012be8 <prvSampleTimeNow+0x3c>)
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3710      	adds	r7, #16
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	20002674 	.word	0x20002674

08012bec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b086      	sub	sp, #24
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	60b9      	str	r1, [r7, #8]
 8012bf6:	607a      	str	r2, [r7, #4]
 8012bf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	68ba      	ldr	r2, [r7, #8]
 8012c02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d812      	bhi.n	8012c38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	1ad2      	subs	r2, r2, r3
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	699b      	ldr	r3, [r3, #24]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d302      	bcc.n	8012c26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012c20:	2301      	movs	r3, #1
 8012c22:	617b      	str	r3, [r7, #20]
 8012c24:	e01b      	b.n	8012c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012c26:	4b10      	ldr	r3, [pc, #64]	; (8012c68 <prvInsertTimerInActiveList+0x7c>)
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	4619      	mov	r1, r3
 8012c30:	4610      	mov	r0, r2
 8012c32:	f7fd feea 	bl	8010a0a <vListInsert>
 8012c36:	e012      	b.n	8012c5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d206      	bcs.n	8012c4e <prvInsertTimerInActiveList+0x62>
 8012c40:	68ba      	ldr	r2, [r7, #8]
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d302      	bcc.n	8012c4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	617b      	str	r3, [r7, #20]
 8012c4c:	e007      	b.n	8012c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012c4e:	4b07      	ldr	r3, [pc, #28]	; (8012c6c <prvInsertTimerInActiveList+0x80>)
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	3304      	adds	r3, #4
 8012c56:	4619      	mov	r1, r3
 8012c58:	4610      	mov	r0, r2
 8012c5a:	f7fd fed6 	bl	8010a0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012c5e:	697b      	ldr	r3, [r7, #20]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3718      	adds	r7, #24
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	20002668 	.word	0x20002668
 8012c6c:	20002664 	.word	0x20002664

08012c70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b08e      	sub	sp, #56	; 0x38
 8012c74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012c76:	e0ca      	b.n	8012e0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	da18      	bge.n	8012cb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012c7e:	1d3b      	adds	r3, r7, #4
 8012c80:	3304      	adds	r3, #4
 8012c82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10a      	bne.n	8012ca0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8e:	f383 8811 	msr	BASEPRI, r3
 8012c92:	f3bf 8f6f 	isb	sy
 8012c96:	f3bf 8f4f 	dsb	sy
 8012c9a:	61fb      	str	r3, [r7, #28]
}
 8012c9c:	bf00      	nop
 8012c9e:	e7fe      	b.n	8012c9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ca6:	6850      	ldr	r0, [r2, #4]
 8012ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012caa:	6892      	ldr	r2, [r2, #8]
 8012cac:	4611      	mov	r1, r2
 8012cae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f2c0 80ab 	blt.w	8012e0e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbe:	695b      	ldr	r3, [r3, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d004      	beq.n	8012cce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc6:	3304      	adds	r3, #4
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7fd fed7 	bl	8010a7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012cce:	463b      	mov	r3, r7
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7ff ff6b 	bl	8012bac <prvSampleTimeNow>
 8012cd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b09      	cmp	r3, #9
 8012cdc:	f200 8096 	bhi.w	8012e0c <prvProcessReceivedCommands+0x19c>
 8012ce0:	a201      	add	r2, pc, #4	; (adr r2, 8012ce8 <prvProcessReceivedCommands+0x78>)
 8012ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ce6:	bf00      	nop
 8012ce8:	08012d11 	.word	0x08012d11
 8012cec:	08012d11 	.word	0x08012d11
 8012cf0:	08012d11 	.word	0x08012d11
 8012cf4:	08012d85 	.word	0x08012d85
 8012cf8:	08012d99 	.word	0x08012d99
 8012cfc:	08012de3 	.word	0x08012de3
 8012d00:	08012d11 	.word	0x08012d11
 8012d04:	08012d11 	.word	0x08012d11
 8012d08:	08012d85 	.word	0x08012d85
 8012d0c:	08012d99 	.word	0x08012d99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d16:	f043 0301 	orr.w	r3, r3, #1
 8012d1a:	b2da      	uxtb	r2, r3
 8012d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d26:	699b      	ldr	r3, [r3, #24]
 8012d28:	18d1      	adds	r1, r2, r3
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d30:	f7ff ff5c 	bl	8012bec <prvInsertTimerInActiveList>
 8012d34:	4603      	mov	r3, r0
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d069      	beq.n	8012e0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3c:	6a1b      	ldr	r3, [r3, #32]
 8012d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d48:	f003 0304 	and.w	r3, r3, #4
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d05e      	beq.n	8012e0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d54:	699b      	ldr	r3, [r3, #24]
 8012d56:	441a      	add	r2, r3
 8012d58:	2300      	movs	r3, #0
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	2100      	movs	r1, #0
 8012d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d62:	f7ff fe05 	bl	8012970 <xTimerGenericCommand>
 8012d66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012d68:	6a3b      	ldr	r3, [r7, #32]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d14f      	bne.n	8012e0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d72:	f383 8811 	msr	BASEPRI, r3
 8012d76:	f3bf 8f6f 	isb	sy
 8012d7a:	f3bf 8f4f 	dsb	sy
 8012d7e:	61bb      	str	r3, [r7, #24]
}
 8012d80:	bf00      	nop
 8012d82:	e7fe      	b.n	8012d82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d8a:	f023 0301 	bic.w	r3, r3, #1
 8012d8e:	b2da      	uxtb	r2, r3
 8012d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012d96:	e03a      	b.n	8012e0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d9e:	f043 0301 	orr.w	r3, r3, #1
 8012da2:	b2da      	uxtb	r2, r3
 8012da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012daa:	68ba      	ldr	r2, [r7, #8]
 8012dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db2:	699b      	ldr	r3, [r3, #24]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d10a      	bne.n	8012dce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dbc:	f383 8811 	msr	BASEPRI, r3
 8012dc0:	f3bf 8f6f 	isb	sy
 8012dc4:	f3bf 8f4f 	dsb	sy
 8012dc8:	617b      	str	r3, [r7, #20]
}
 8012dca:	bf00      	nop
 8012dcc:	e7fe      	b.n	8012dcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd0:	699a      	ldr	r2, [r3, #24]
 8012dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd4:	18d1      	adds	r1, r2, r3
 8012dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ddc:	f7ff ff06 	bl	8012bec <prvInsertTimerInActiveList>
					break;
 8012de0:	e015      	b.n	8012e0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012de8:	f003 0302 	and.w	r3, r3, #2
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d103      	bne.n	8012df8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012df2:	f000 fbdd 	bl	80135b0 <vPortFree>
 8012df6:	e00a      	b.n	8012e0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012dfe:	f023 0301 	bic.w	r3, r3, #1
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012e0a:	e000      	b.n	8012e0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8012e0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012e0e:	4b08      	ldr	r3, [pc, #32]	; (8012e30 <prvProcessReceivedCommands+0x1c0>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	1d39      	adds	r1, r7, #4
 8012e14:	2200      	movs	r2, #0
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fe f932 	bl	8011080 <xQueueReceive>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	f47f af2a 	bne.w	8012c78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012e24:	bf00      	nop
 8012e26:	bf00      	nop
 8012e28:	3730      	adds	r7, #48	; 0x30
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	2000266c 	.word	0x2000266c

08012e34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b088      	sub	sp, #32
 8012e38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012e3a:	e048      	b.n	8012ece <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012e3c:	4b2d      	ldr	r3, [pc, #180]	; (8012ef4 <prvSwitchTimerLists+0xc0>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e46:	4b2b      	ldr	r3, [pc, #172]	; (8012ef4 <prvSwitchTimerLists+0xc0>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	3304      	adds	r3, #4
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7fd fe11 	bl	8010a7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6a1b      	ldr	r3, [r3, #32]
 8012e5e:	68f8      	ldr	r0, [r7, #12]
 8012e60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e68:	f003 0304 	and.w	r3, r3, #4
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d02e      	beq.n	8012ece <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	699b      	ldr	r3, [r3, #24]
 8012e74:	693a      	ldr	r2, [r7, #16]
 8012e76:	4413      	add	r3, r2
 8012e78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d90e      	bls.n	8012ea0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	68ba      	ldr	r2, [r7, #8]
 8012e86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	68fa      	ldr	r2, [r7, #12]
 8012e8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012e8e:	4b19      	ldr	r3, [pc, #100]	; (8012ef4 <prvSwitchTimerLists+0xc0>)
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	3304      	adds	r3, #4
 8012e96:	4619      	mov	r1, r3
 8012e98:	4610      	mov	r0, r2
 8012e9a:	f7fd fdb6 	bl	8010a0a <vListInsert>
 8012e9e:	e016      	b.n	8012ece <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	9300      	str	r3, [sp, #0]
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	693a      	ldr	r2, [r7, #16]
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	68f8      	ldr	r0, [r7, #12]
 8012eac:	f7ff fd60 	bl	8012970 <xTimerGenericCommand>
 8012eb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d10a      	bne.n	8012ece <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ebc:	f383 8811 	msr	BASEPRI, r3
 8012ec0:	f3bf 8f6f 	isb	sy
 8012ec4:	f3bf 8f4f 	dsb	sy
 8012ec8:	603b      	str	r3, [r7, #0]
}
 8012eca:	bf00      	nop
 8012ecc:	e7fe      	b.n	8012ecc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012ece:	4b09      	ldr	r3, [pc, #36]	; (8012ef4 <prvSwitchTimerLists+0xc0>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d1b1      	bne.n	8012e3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012ed8:	4b06      	ldr	r3, [pc, #24]	; (8012ef4 <prvSwitchTimerLists+0xc0>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012ede:	4b06      	ldr	r3, [pc, #24]	; (8012ef8 <prvSwitchTimerLists+0xc4>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	4a04      	ldr	r2, [pc, #16]	; (8012ef4 <prvSwitchTimerLists+0xc0>)
 8012ee4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012ee6:	4a04      	ldr	r2, [pc, #16]	; (8012ef8 <prvSwitchTimerLists+0xc4>)
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	6013      	str	r3, [r2, #0]
}
 8012eec:	bf00      	nop
 8012eee:	3718      	adds	r7, #24
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	20002664 	.word	0x20002664
 8012ef8:	20002668 	.word	0x20002668

08012efc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012f02:	f000 f967 	bl	80131d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012f06:	4b15      	ldr	r3, [pc, #84]	; (8012f5c <prvCheckForValidListAndQueue+0x60>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d120      	bne.n	8012f50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012f0e:	4814      	ldr	r0, [pc, #80]	; (8012f60 <prvCheckForValidListAndQueue+0x64>)
 8012f10:	f7fd fd2a 	bl	8010968 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012f14:	4813      	ldr	r0, [pc, #76]	; (8012f64 <prvCheckForValidListAndQueue+0x68>)
 8012f16:	f7fd fd27 	bl	8010968 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012f1a:	4b13      	ldr	r3, [pc, #76]	; (8012f68 <prvCheckForValidListAndQueue+0x6c>)
 8012f1c:	4a10      	ldr	r2, [pc, #64]	; (8012f60 <prvCheckForValidListAndQueue+0x64>)
 8012f1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012f20:	4b12      	ldr	r3, [pc, #72]	; (8012f6c <prvCheckForValidListAndQueue+0x70>)
 8012f22:	4a10      	ldr	r2, [pc, #64]	; (8012f64 <prvCheckForValidListAndQueue+0x68>)
 8012f24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012f26:	2300      	movs	r3, #0
 8012f28:	9300      	str	r3, [sp, #0]
 8012f2a:	4b11      	ldr	r3, [pc, #68]	; (8012f70 <prvCheckForValidListAndQueue+0x74>)
 8012f2c:	4a11      	ldr	r2, [pc, #68]	; (8012f74 <prvCheckForValidListAndQueue+0x78>)
 8012f2e:	2110      	movs	r1, #16
 8012f30:	200a      	movs	r0, #10
 8012f32:	f7fd fe35 	bl	8010ba0 <xQueueGenericCreateStatic>
 8012f36:	4603      	mov	r3, r0
 8012f38:	4a08      	ldr	r2, [pc, #32]	; (8012f5c <prvCheckForValidListAndQueue+0x60>)
 8012f3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012f3c:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <prvCheckForValidListAndQueue+0x60>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d005      	beq.n	8012f50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012f44:	4b05      	ldr	r3, [pc, #20]	; (8012f5c <prvCheckForValidListAndQueue+0x60>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	490b      	ldr	r1, [pc, #44]	; (8012f78 <prvCheckForValidListAndQueue+0x7c>)
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7fe fb08 	bl	8011560 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012f50:	f000 f970 	bl	8013234 <vPortExitCritical>
}
 8012f54:	bf00      	nop
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	2000266c 	.word	0x2000266c
 8012f60:	2000263c 	.word	0x2000263c
 8012f64:	20002650 	.word	0x20002650
 8012f68:	20002664 	.word	0x20002664
 8012f6c:	20002668 	.word	0x20002668
 8012f70:	20002718 	.word	0x20002718
 8012f74:	20002678 	.word	0x20002678
 8012f78:	08019b04 	.word	0x08019b04

08012f7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	3b04      	subs	r3, #4
 8012f8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	3b04      	subs	r3, #4
 8012f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	f023 0201 	bic.w	r2, r3, #1
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	3b04      	subs	r3, #4
 8012faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012fac:	4a0c      	ldr	r2, [pc, #48]	; (8012fe0 <pxPortInitialiseStack+0x64>)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	3b14      	subs	r3, #20
 8012fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	3b04      	subs	r3, #4
 8012fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f06f 0202 	mvn.w	r2, #2
 8012fca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	3b20      	subs	r3, #32
 8012fd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr
 8012fe0:	08012fe5 	.word	0x08012fe5

08012fe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012fea:	2300      	movs	r3, #0
 8012fec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012fee:	4b12      	ldr	r3, [pc, #72]	; (8013038 <prvTaskExitError+0x54>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ff6:	d00a      	beq.n	801300e <prvTaskExitError+0x2a>
	__asm volatile
 8012ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffc:	f383 8811 	msr	BASEPRI, r3
 8013000:	f3bf 8f6f 	isb	sy
 8013004:	f3bf 8f4f 	dsb	sy
 8013008:	60fb      	str	r3, [r7, #12]
}
 801300a:	bf00      	nop
 801300c:	e7fe      	b.n	801300c <prvTaskExitError+0x28>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	60bb      	str	r3, [r7, #8]
}
 8013020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013022:	bf00      	nop
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d0fc      	beq.n	8013024 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801302a:	bf00      	nop
 801302c:	bf00      	nop
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr
 8013038:	20000114 	.word	0x20000114
 801303c:	00000000 	.word	0x00000000

08013040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013040:	4b07      	ldr	r3, [pc, #28]	; (8013060 <pxCurrentTCBConst2>)
 8013042:	6819      	ldr	r1, [r3, #0]
 8013044:	6808      	ldr	r0, [r1, #0]
 8013046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801304a:	f380 8809 	msr	PSP, r0
 801304e:	f3bf 8f6f 	isb	sy
 8013052:	f04f 0000 	mov.w	r0, #0
 8013056:	f380 8811 	msr	BASEPRI, r0
 801305a:	4770      	bx	lr
 801305c:	f3af 8000 	nop.w

08013060 <pxCurrentTCBConst2>:
 8013060:	2000213c 	.word	0x2000213c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013064:	bf00      	nop
 8013066:	bf00      	nop

08013068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013068:	4808      	ldr	r0, [pc, #32]	; (801308c <prvPortStartFirstTask+0x24>)
 801306a:	6800      	ldr	r0, [r0, #0]
 801306c:	6800      	ldr	r0, [r0, #0]
 801306e:	f380 8808 	msr	MSP, r0
 8013072:	f04f 0000 	mov.w	r0, #0
 8013076:	f380 8814 	msr	CONTROL, r0
 801307a:	b662      	cpsie	i
 801307c:	b661      	cpsie	f
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	f3bf 8f6f 	isb	sy
 8013086:	df00      	svc	0
 8013088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801308a:	bf00      	nop
 801308c:	e000ed08 	.word	0xe000ed08

08013090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013096:	4b46      	ldr	r3, [pc, #280]	; (80131b0 <xPortStartScheduler+0x120>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	4a46      	ldr	r2, [pc, #280]	; (80131b4 <xPortStartScheduler+0x124>)
 801309c:	4293      	cmp	r3, r2
 801309e:	d10a      	bne.n	80130b6 <xPortStartScheduler+0x26>
	__asm volatile
 80130a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a4:	f383 8811 	msr	BASEPRI, r3
 80130a8:	f3bf 8f6f 	isb	sy
 80130ac:	f3bf 8f4f 	dsb	sy
 80130b0:	613b      	str	r3, [r7, #16]
}
 80130b2:	bf00      	nop
 80130b4:	e7fe      	b.n	80130b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80130b6:	4b3e      	ldr	r3, [pc, #248]	; (80131b0 <xPortStartScheduler+0x120>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a3f      	ldr	r2, [pc, #252]	; (80131b8 <xPortStartScheduler+0x128>)
 80130bc:	4293      	cmp	r3, r2
 80130be:	d10a      	bne.n	80130d6 <xPortStartScheduler+0x46>
	__asm volatile
 80130c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c4:	f383 8811 	msr	BASEPRI, r3
 80130c8:	f3bf 8f6f 	isb	sy
 80130cc:	f3bf 8f4f 	dsb	sy
 80130d0:	60fb      	str	r3, [r7, #12]
}
 80130d2:	bf00      	nop
 80130d4:	e7fe      	b.n	80130d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80130d6:	4b39      	ldr	r3, [pc, #228]	; (80131bc <xPortStartScheduler+0x12c>)
 80130d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	22ff      	movs	r2, #255	; 0xff
 80130e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80130f0:	78fb      	ldrb	r3, [r7, #3]
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80130f8:	b2da      	uxtb	r2, r3
 80130fa:	4b31      	ldr	r3, [pc, #196]	; (80131c0 <xPortStartScheduler+0x130>)
 80130fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80130fe:	4b31      	ldr	r3, [pc, #196]	; (80131c4 <xPortStartScheduler+0x134>)
 8013100:	2207      	movs	r2, #7
 8013102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013104:	e009      	b.n	801311a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013106:	4b2f      	ldr	r3, [pc, #188]	; (80131c4 <xPortStartScheduler+0x134>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	3b01      	subs	r3, #1
 801310c:	4a2d      	ldr	r2, [pc, #180]	; (80131c4 <xPortStartScheduler+0x134>)
 801310e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013110:	78fb      	ldrb	r3, [r7, #3]
 8013112:	b2db      	uxtb	r3, r3
 8013114:	005b      	lsls	r3, r3, #1
 8013116:	b2db      	uxtb	r3, r3
 8013118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801311a:	78fb      	ldrb	r3, [r7, #3]
 801311c:	b2db      	uxtb	r3, r3
 801311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013122:	2b80      	cmp	r3, #128	; 0x80
 8013124:	d0ef      	beq.n	8013106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013126:	4b27      	ldr	r3, [pc, #156]	; (80131c4 <xPortStartScheduler+0x134>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f1c3 0307 	rsb	r3, r3, #7
 801312e:	2b04      	cmp	r3, #4
 8013130:	d00a      	beq.n	8013148 <xPortStartScheduler+0xb8>
	__asm volatile
 8013132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013136:	f383 8811 	msr	BASEPRI, r3
 801313a:	f3bf 8f6f 	isb	sy
 801313e:	f3bf 8f4f 	dsb	sy
 8013142:	60bb      	str	r3, [r7, #8]
}
 8013144:	bf00      	nop
 8013146:	e7fe      	b.n	8013146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013148:	4b1e      	ldr	r3, [pc, #120]	; (80131c4 <xPortStartScheduler+0x134>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	021b      	lsls	r3, r3, #8
 801314e:	4a1d      	ldr	r2, [pc, #116]	; (80131c4 <xPortStartScheduler+0x134>)
 8013150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013152:	4b1c      	ldr	r3, [pc, #112]	; (80131c4 <xPortStartScheduler+0x134>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801315a:	4a1a      	ldr	r2, [pc, #104]	; (80131c4 <xPortStartScheduler+0x134>)
 801315c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	b2da      	uxtb	r2, r3
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013166:	4b18      	ldr	r3, [pc, #96]	; (80131c8 <xPortStartScheduler+0x138>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	4a17      	ldr	r2, [pc, #92]	; (80131c8 <xPortStartScheduler+0x138>)
 801316c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013172:	4b15      	ldr	r3, [pc, #84]	; (80131c8 <xPortStartScheduler+0x138>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4a14      	ldr	r2, [pc, #80]	; (80131c8 <xPortStartScheduler+0x138>)
 8013178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801317c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801317e:	f000 f8dd 	bl	801333c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013182:	4b12      	ldr	r3, [pc, #72]	; (80131cc <xPortStartScheduler+0x13c>)
 8013184:	2200      	movs	r2, #0
 8013186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013188:	f000 f8fc 	bl	8013384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801318c:	4b10      	ldr	r3, [pc, #64]	; (80131d0 <xPortStartScheduler+0x140>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a0f      	ldr	r2, [pc, #60]	; (80131d0 <xPortStartScheduler+0x140>)
 8013192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013198:	f7ff ff66 	bl	8013068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801319c:	f7fe fe66 	bl	8011e6c <vTaskSwitchContext>
	prvTaskExitError();
 80131a0:	f7ff ff20 	bl	8012fe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3718      	adds	r7, #24
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	e000ed00 	.word	0xe000ed00
 80131b4:	410fc271 	.word	0x410fc271
 80131b8:	410fc270 	.word	0x410fc270
 80131bc:	e000e400 	.word	0xe000e400
 80131c0:	20002768 	.word	0x20002768
 80131c4:	2000276c 	.word	0x2000276c
 80131c8:	e000ed20 	.word	0xe000ed20
 80131cc:	20000114 	.word	0x20000114
 80131d0:	e000ef34 	.word	0xe000ef34

080131d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
	__asm volatile
 80131da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131de:	f383 8811 	msr	BASEPRI, r3
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	f3bf 8f4f 	dsb	sy
 80131ea:	607b      	str	r3, [r7, #4]
}
 80131ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80131ee:	4b0f      	ldr	r3, [pc, #60]	; (801322c <vPortEnterCritical+0x58>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	3301      	adds	r3, #1
 80131f4:	4a0d      	ldr	r2, [pc, #52]	; (801322c <vPortEnterCritical+0x58>)
 80131f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80131f8:	4b0c      	ldr	r3, [pc, #48]	; (801322c <vPortEnterCritical+0x58>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d10f      	bne.n	8013220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013200:	4b0b      	ldr	r3, [pc, #44]	; (8013230 <vPortEnterCritical+0x5c>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	b2db      	uxtb	r3, r3
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00a      	beq.n	8013220 <vPortEnterCritical+0x4c>
	__asm volatile
 801320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320e:	f383 8811 	msr	BASEPRI, r3
 8013212:	f3bf 8f6f 	isb	sy
 8013216:	f3bf 8f4f 	dsb	sy
 801321a:	603b      	str	r3, [r7, #0]
}
 801321c:	bf00      	nop
 801321e:	e7fe      	b.n	801321e <vPortEnterCritical+0x4a>
	}
}
 8013220:	bf00      	nop
 8013222:	370c      	adds	r7, #12
 8013224:	46bd      	mov	sp, r7
 8013226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322a:	4770      	bx	lr
 801322c:	20000114 	.word	0x20000114
 8013230:	e000ed04 	.word	0xe000ed04

08013234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801323a:	4b12      	ldr	r3, [pc, #72]	; (8013284 <vPortExitCritical+0x50>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d10a      	bne.n	8013258 <vPortExitCritical+0x24>
	__asm volatile
 8013242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013246:	f383 8811 	msr	BASEPRI, r3
 801324a:	f3bf 8f6f 	isb	sy
 801324e:	f3bf 8f4f 	dsb	sy
 8013252:	607b      	str	r3, [r7, #4]
}
 8013254:	bf00      	nop
 8013256:	e7fe      	b.n	8013256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013258:	4b0a      	ldr	r3, [pc, #40]	; (8013284 <vPortExitCritical+0x50>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	3b01      	subs	r3, #1
 801325e:	4a09      	ldr	r2, [pc, #36]	; (8013284 <vPortExitCritical+0x50>)
 8013260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013262:	4b08      	ldr	r3, [pc, #32]	; (8013284 <vPortExitCritical+0x50>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d105      	bne.n	8013276 <vPortExitCritical+0x42>
 801326a:	2300      	movs	r3, #0
 801326c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	f383 8811 	msr	BASEPRI, r3
}
 8013274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013276:	bf00      	nop
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop
 8013284:	20000114 	.word	0x20000114
	...

08013290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013290:	f3ef 8009 	mrs	r0, PSP
 8013294:	f3bf 8f6f 	isb	sy
 8013298:	4b15      	ldr	r3, [pc, #84]	; (80132f0 <pxCurrentTCBConst>)
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	f01e 0f10 	tst.w	lr, #16
 80132a0:	bf08      	it	eq
 80132a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80132a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132aa:	6010      	str	r0, [r2, #0]
 80132ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80132b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80132b4:	f380 8811 	msr	BASEPRI, r0
 80132b8:	f3bf 8f4f 	dsb	sy
 80132bc:	f3bf 8f6f 	isb	sy
 80132c0:	f7fe fdd4 	bl	8011e6c <vTaskSwitchContext>
 80132c4:	f04f 0000 	mov.w	r0, #0
 80132c8:	f380 8811 	msr	BASEPRI, r0
 80132cc:	bc09      	pop	{r0, r3}
 80132ce:	6819      	ldr	r1, [r3, #0]
 80132d0:	6808      	ldr	r0, [r1, #0]
 80132d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d6:	f01e 0f10 	tst.w	lr, #16
 80132da:	bf08      	it	eq
 80132dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80132e0:	f380 8809 	msr	PSP, r0
 80132e4:	f3bf 8f6f 	isb	sy
 80132e8:	4770      	bx	lr
 80132ea:	bf00      	nop
 80132ec:	f3af 8000 	nop.w

080132f0 <pxCurrentTCBConst>:
 80132f0:	2000213c 	.word	0x2000213c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80132f4:	bf00      	nop
 80132f6:	bf00      	nop

080132f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
	__asm volatile
 80132fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013302:	f383 8811 	msr	BASEPRI, r3
 8013306:	f3bf 8f6f 	isb	sy
 801330a:	f3bf 8f4f 	dsb	sy
 801330e:	607b      	str	r3, [r7, #4]
}
 8013310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013312:	f7fe fcf1 	bl	8011cf8 <xTaskIncrementTick>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d003      	beq.n	8013324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801331c:	4b06      	ldr	r3, [pc, #24]	; (8013338 <xPortSysTickHandler+0x40>)
 801331e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013322:	601a      	str	r2, [r3, #0]
 8013324:	2300      	movs	r3, #0
 8013326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	f383 8811 	msr	BASEPRI, r3
}
 801332e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013330:	bf00      	nop
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	e000ed04 	.word	0xe000ed04

0801333c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801333c:	b480      	push	{r7}
 801333e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013340:	4b0b      	ldr	r3, [pc, #44]	; (8013370 <vPortSetupTimerInterrupt+0x34>)
 8013342:	2200      	movs	r2, #0
 8013344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013346:	4b0b      	ldr	r3, [pc, #44]	; (8013374 <vPortSetupTimerInterrupt+0x38>)
 8013348:	2200      	movs	r2, #0
 801334a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801334c:	4b0a      	ldr	r3, [pc, #40]	; (8013378 <vPortSetupTimerInterrupt+0x3c>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4a0a      	ldr	r2, [pc, #40]	; (801337c <vPortSetupTimerInterrupt+0x40>)
 8013352:	fba2 2303 	umull	r2, r3, r2, r3
 8013356:	099b      	lsrs	r3, r3, #6
 8013358:	4a09      	ldr	r2, [pc, #36]	; (8013380 <vPortSetupTimerInterrupt+0x44>)
 801335a:	3b01      	subs	r3, #1
 801335c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801335e:	4b04      	ldr	r3, [pc, #16]	; (8013370 <vPortSetupTimerInterrupt+0x34>)
 8013360:	2207      	movs	r2, #7
 8013362:	601a      	str	r2, [r3, #0]
}
 8013364:	bf00      	nop
 8013366:	46bd      	mov	sp, r7
 8013368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336c:	4770      	bx	lr
 801336e:	bf00      	nop
 8013370:	e000e010 	.word	0xe000e010
 8013374:	e000e018 	.word	0xe000e018
 8013378:	200000ac 	.word	0x200000ac
 801337c:	10624dd3 	.word	0x10624dd3
 8013380:	e000e014 	.word	0xe000e014

08013384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013394 <vPortEnableVFP+0x10>
 8013388:	6801      	ldr	r1, [r0, #0]
 801338a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801338e:	6001      	str	r1, [r0, #0]
 8013390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013392:	bf00      	nop
 8013394:	e000ed88 	.word	0xe000ed88

08013398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801339e:	f3ef 8305 	mrs	r3, IPSR
 80133a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	2b0f      	cmp	r3, #15
 80133a8:	d914      	bls.n	80133d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80133aa:	4a17      	ldr	r2, [pc, #92]	; (8013408 <vPortValidateInterruptPriority+0x70>)
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	4413      	add	r3, r2
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80133b4:	4b15      	ldr	r3, [pc, #84]	; (801340c <vPortValidateInterruptPriority+0x74>)
 80133b6:	781b      	ldrb	r3, [r3, #0]
 80133b8:	7afa      	ldrb	r2, [r7, #11]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d20a      	bcs.n	80133d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	607b      	str	r3, [r7, #4]
}
 80133d0:	bf00      	nop
 80133d2:	e7fe      	b.n	80133d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80133d4:	4b0e      	ldr	r3, [pc, #56]	; (8013410 <vPortValidateInterruptPriority+0x78>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80133dc:	4b0d      	ldr	r3, [pc, #52]	; (8013414 <vPortValidateInterruptPriority+0x7c>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d90a      	bls.n	80133fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80133e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e8:	f383 8811 	msr	BASEPRI, r3
 80133ec:	f3bf 8f6f 	isb	sy
 80133f0:	f3bf 8f4f 	dsb	sy
 80133f4:	603b      	str	r3, [r7, #0]
}
 80133f6:	bf00      	nop
 80133f8:	e7fe      	b.n	80133f8 <vPortValidateInterruptPriority+0x60>
	}
 80133fa:	bf00      	nop
 80133fc:	3714      	adds	r7, #20
 80133fe:	46bd      	mov	sp, r7
 8013400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013404:	4770      	bx	lr
 8013406:	bf00      	nop
 8013408:	e000e3f0 	.word	0xe000e3f0
 801340c:	20002768 	.word	0x20002768
 8013410:	e000ed0c 	.word	0xe000ed0c
 8013414:	2000276c 	.word	0x2000276c

08013418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b08a      	sub	sp, #40	; 0x28
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013420:	2300      	movs	r3, #0
 8013422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013424:	f7fe fbac 	bl	8011b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013428:	4b5b      	ldr	r3, [pc, #364]	; (8013598 <pvPortMalloc+0x180>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d101      	bne.n	8013434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013430:	f000 f920 	bl	8013674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013434:	4b59      	ldr	r3, [pc, #356]	; (801359c <pvPortMalloc+0x184>)
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	4013      	ands	r3, r2
 801343c:	2b00      	cmp	r3, #0
 801343e:	f040 8093 	bne.w	8013568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d01d      	beq.n	8013484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013448:	2208      	movs	r2, #8
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4413      	add	r3, r2
 801344e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f003 0307 	and.w	r3, r3, #7
 8013456:	2b00      	cmp	r3, #0
 8013458:	d014      	beq.n	8013484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f023 0307 	bic.w	r3, r3, #7
 8013460:	3308      	adds	r3, #8
 8013462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f003 0307 	and.w	r3, r3, #7
 801346a:	2b00      	cmp	r3, #0
 801346c:	d00a      	beq.n	8013484 <pvPortMalloc+0x6c>
	__asm volatile
 801346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013472:	f383 8811 	msr	BASEPRI, r3
 8013476:	f3bf 8f6f 	isb	sy
 801347a:	f3bf 8f4f 	dsb	sy
 801347e:	617b      	str	r3, [r7, #20]
}
 8013480:	bf00      	nop
 8013482:	e7fe      	b.n	8013482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d06e      	beq.n	8013568 <pvPortMalloc+0x150>
 801348a:	4b45      	ldr	r3, [pc, #276]	; (80135a0 <pvPortMalloc+0x188>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	429a      	cmp	r2, r3
 8013492:	d869      	bhi.n	8013568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013494:	4b43      	ldr	r3, [pc, #268]	; (80135a4 <pvPortMalloc+0x18c>)
 8013496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013498:	4b42      	ldr	r3, [pc, #264]	; (80135a4 <pvPortMalloc+0x18c>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801349e:	e004      	b.n	80134aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80134a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80134a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80134aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d903      	bls.n	80134bc <pvPortMalloc+0xa4>
 80134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d1f1      	bne.n	80134a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80134bc:	4b36      	ldr	r3, [pc, #216]	; (8013598 <pvPortMalloc+0x180>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d050      	beq.n	8013568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2208      	movs	r2, #8
 80134cc:	4413      	add	r3, r2
 80134ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	6a3b      	ldr	r3, [r7, #32]
 80134d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80134d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134da:	685a      	ldr	r2, [r3, #4]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	1ad2      	subs	r2, r2, r3
 80134e0:	2308      	movs	r3, #8
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d91f      	bls.n	8013528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80134e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4413      	add	r3, r2
 80134ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	f003 0307 	and.w	r3, r3, #7
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d00a      	beq.n	8013510 <pvPortMalloc+0xf8>
	__asm volatile
 80134fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fe:	f383 8811 	msr	BASEPRI, r3
 8013502:	f3bf 8f6f 	isb	sy
 8013506:	f3bf 8f4f 	dsb	sy
 801350a:	613b      	str	r3, [r7, #16]
}
 801350c:	bf00      	nop
 801350e:	e7fe      	b.n	801350e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013512:	685a      	ldr	r2, [r3, #4]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	1ad2      	subs	r2, r2, r3
 8013518:	69bb      	ldr	r3, [r7, #24]
 801351a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013522:	69b8      	ldr	r0, [r7, #24]
 8013524:	f000 f908 	bl	8013738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013528:	4b1d      	ldr	r3, [pc, #116]	; (80135a0 <pvPortMalloc+0x188>)
 801352a:	681a      	ldr	r2, [r3, #0]
 801352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	1ad3      	subs	r3, r2, r3
 8013532:	4a1b      	ldr	r2, [pc, #108]	; (80135a0 <pvPortMalloc+0x188>)
 8013534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013536:	4b1a      	ldr	r3, [pc, #104]	; (80135a0 <pvPortMalloc+0x188>)
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	4b1b      	ldr	r3, [pc, #108]	; (80135a8 <pvPortMalloc+0x190>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	429a      	cmp	r2, r3
 8013540:	d203      	bcs.n	801354a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013542:	4b17      	ldr	r3, [pc, #92]	; (80135a0 <pvPortMalloc+0x188>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	4a18      	ldr	r2, [pc, #96]	; (80135a8 <pvPortMalloc+0x190>)
 8013548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354c:	685a      	ldr	r2, [r3, #4]
 801354e:	4b13      	ldr	r3, [pc, #76]	; (801359c <pvPortMalloc+0x184>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	431a      	orrs	r2, r3
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355a:	2200      	movs	r2, #0
 801355c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801355e:	4b13      	ldr	r3, [pc, #76]	; (80135ac <pvPortMalloc+0x194>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	3301      	adds	r3, #1
 8013564:	4a11      	ldr	r2, [pc, #68]	; (80135ac <pvPortMalloc+0x194>)
 8013566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013568:	f7fe fb18 	bl	8011b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	f003 0307 	and.w	r3, r3, #7
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00a      	beq.n	801358c <pvPortMalloc+0x174>
	__asm volatile
 8013576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357a:	f383 8811 	msr	BASEPRI, r3
 801357e:	f3bf 8f6f 	isb	sy
 8013582:	f3bf 8f4f 	dsb	sy
 8013586:	60fb      	str	r3, [r7, #12]
}
 8013588:	bf00      	nop
 801358a:	e7fe      	b.n	801358a <pvPortMalloc+0x172>
	return pvReturn;
 801358c:	69fb      	ldr	r3, [r7, #28]
}
 801358e:	4618      	mov	r0, r3
 8013590:	3728      	adds	r7, #40	; 0x28
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
 8013596:	bf00      	nop
 8013598:	20004e88 	.word	0x20004e88
 801359c:	20004e9c 	.word	0x20004e9c
 80135a0:	20004e8c 	.word	0x20004e8c
 80135a4:	20004e80 	.word	0x20004e80
 80135a8:	20004e90 	.word	0x20004e90
 80135ac:	20004e94 	.word	0x20004e94

080135b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b086      	sub	sp, #24
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d04d      	beq.n	801365e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80135c2:	2308      	movs	r3, #8
 80135c4:	425b      	negs	r3, r3
 80135c6:	697a      	ldr	r2, [r7, #20]
 80135c8:	4413      	add	r3, r2
 80135ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	685a      	ldr	r2, [r3, #4]
 80135d4:	4b24      	ldr	r3, [pc, #144]	; (8013668 <vPortFree+0xb8>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	4013      	ands	r3, r2
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d10a      	bne.n	80135f4 <vPortFree+0x44>
	__asm volatile
 80135de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e2:	f383 8811 	msr	BASEPRI, r3
 80135e6:	f3bf 8f6f 	isb	sy
 80135ea:	f3bf 8f4f 	dsb	sy
 80135ee:	60fb      	str	r3, [r7, #12]
}
 80135f0:	bf00      	nop
 80135f2:	e7fe      	b.n	80135f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d00a      	beq.n	8013612 <vPortFree+0x62>
	__asm volatile
 80135fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013600:	f383 8811 	msr	BASEPRI, r3
 8013604:	f3bf 8f6f 	isb	sy
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	60bb      	str	r3, [r7, #8]
}
 801360e:	bf00      	nop
 8013610:	e7fe      	b.n	8013610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	685a      	ldr	r2, [r3, #4]
 8013616:	4b14      	ldr	r3, [pc, #80]	; (8013668 <vPortFree+0xb8>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	4013      	ands	r3, r2
 801361c:	2b00      	cmp	r3, #0
 801361e:	d01e      	beq.n	801365e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d11a      	bne.n	801365e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	685a      	ldr	r2, [r3, #4]
 801362c:	4b0e      	ldr	r3, [pc, #56]	; (8013668 <vPortFree+0xb8>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	43db      	mvns	r3, r3
 8013632:	401a      	ands	r2, r3
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013638:	f7fe faa2 	bl	8011b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	685a      	ldr	r2, [r3, #4]
 8013640:	4b0a      	ldr	r3, [pc, #40]	; (801366c <vPortFree+0xbc>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	4413      	add	r3, r2
 8013646:	4a09      	ldr	r2, [pc, #36]	; (801366c <vPortFree+0xbc>)
 8013648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801364a:	6938      	ldr	r0, [r7, #16]
 801364c:	f000 f874 	bl	8013738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013650:	4b07      	ldr	r3, [pc, #28]	; (8013670 <vPortFree+0xc0>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	3301      	adds	r3, #1
 8013656:	4a06      	ldr	r2, [pc, #24]	; (8013670 <vPortFree+0xc0>)
 8013658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801365a:	f7fe fa9f 	bl	8011b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801365e:	bf00      	nop
 8013660:	3718      	adds	r7, #24
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	20004e9c 	.word	0x20004e9c
 801366c:	20004e8c 	.word	0x20004e8c
 8013670:	20004e98 	.word	0x20004e98

08013674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013674:	b480      	push	{r7}
 8013676:	b085      	sub	sp, #20
 8013678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801367a:	f242 7310 	movw	r3, #10000	; 0x2710
 801367e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013680:	4b27      	ldr	r3, [pc, #156]	; (8013720 <prvHeapInit+0xac>)
 8013682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f003 0307 	and.w	r3, r3, #7
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00c      	beq.n	80136a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	3307      	adds	r3, #7
 8013692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f023 0307 	bic.w	r3, r3, #7
 801369a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	4a1f      	ldr	r2, [pc, #124]	; (8013720 <prvHeapInit+0xac>)
 80136a4:	4413      	add	r3, r2
 80136a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80136ac:	4a1d      	ldr	r2, [pc, #116]	; (8013724 <prvHeapInit+0xb0>)
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80136b2:	4b1c      	ldr	r3, [pc, #112]	; (8013724 <prvHeapInit+0xb0>)
 80136b4:	2200      	movs	r2, #0
 80136b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	68ba      	ldr	r2, [r7, #8]
 80136bc:	4413      	add	r3, r2
 80136be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80136c0:	2208      	movs	r2, #8
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	1a9b      	subs	r3, r3, r2
 80136c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f023 0307 	bic.w	r3, r3, #7
 80136ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	4a15      	ldr	r2, [pc, #84]	; (8013728 <prvHeapInit+0xb4>)
 80136d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80136d6:	4b14      	ldr	r3, [pc, #80]	; (8013728 <prvHeapInit+0xb4>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2200      	movs	r2, #0
 80136dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80136de:	4b12      	ldr	r3, [pc, #72]	; (8013728 <prvHeapInit+0xb4>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	2200      	movs	r2, #0
 80136e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	68fa      	ldr	r2, [r7, #12]
 80136ee:	1ad2      	subs	r2, r2, r3
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80136f4:	4b0c      	ldr	r3, [pc, #48]	; (8013728 <prvHeapInit+0xb4>)
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	4a0a      	ldr	r2, [pc, #40]	; (801372c <prvHeapInit+0xb8>)
 8013702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	4a09      	ldr	r2, [pc, #36]	; (8013730 <prvHeapInit+0xbc>)
 801370a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801370c:	4b09      	ldr	r3, [pc, #36]	; (8013734 <prvHeapInit+0xc0>)
 801370e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013712:	601a      	str	r2, [r3, #0]
}
 8013714:	bf00      	nop
 8013716:	3714      	adds	r7, #20
 8013718:	46bd      	mov	sp, r7
 801371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371e:	4770      	bx	lr
 8013720:	20002770 	.word	0x20002770
 8013724:	20004e80 	.word	0x20004e80
 8013728:	20004e88 	.word	0x20004e88
 801372c:	20004e90 	.word	0x20004e90
 8013730:	20004e8c 	.word	0x20004e8c
 8013734:	20004e9c 	.word	0x20004e9c

08013738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013738:	b480      	push	{r7}
 801373a:	b085      	sub	sp, #20
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013740:	4b28      	ldr	r3, [pc, #160]	; (80137e4 <prvInsertBlockIntoFreeList+0xac>)
 8013742:	60fb      	str	r3, [r7, #12]
 8013744:	e002      	b.n	801374c <prvInsertBlockIntoFreeList+0x14>
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	60fb      	str	r3, [r7, #12]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	429a      	cmp	r2, r3
 8013754:	d8f7      	bhi.n	8013746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	68ba      	ldr	r2, [r7, #8]
 8013760:	4413      	add	r3, r2
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	429a      	cmp	r2, r3
 8013766:	d108      	bne.n	801377a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	685a      	ldr	r2, [r3, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	441a      	add	r2, r3
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	68ba      	ldr	r2, [r7, #8]
 8013784:	441a      	add	r2, r3
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	429a      	cmp	r2, r3
 801378c:	d118      	bne.n	80137c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	4b15      	ldr	r3, [pc, #84]	; (80137e8 <prvInsertBlockIntoFreeList+0xb0>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	429a      	cmp	r2, r3
 8013798:	d00d      	beq.n	80137b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	685a      	ldr	r2, [r3, #4]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	441a      	add	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	681a      	ldr	r2, [r3, #0]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	601a      	str	r2, [r3, #0]
 80137b4:	e008      	b.n	80137c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80137b6:	4b0c      	ldr	r3, [pc, #48]	; (80137e8 <prvInsertBlockIntoFreeList+0xb0>)
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	601a      	str	r2, [r3, #0]
 80137be:	e003      	b.n	80137c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681a      	ldr	r2, [r3, #0]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80137c8:	68fa      	ldr	r2, [r7, #12]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d002      	beq.n	80137d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137d6:	bf00      	nop
 80137d8:	3714      	adds	r7, #20
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	20004e80 	.word	0x20004e80
 80137e8:	20004e88 	.word	0x20004e88

080137ec <__assert_func>:
 80137ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137ee:	4614      	mov	r4, r2
 80137f0:	461a      	mov	r2, r3
 80137f2:	4b09      	ldr	r3, [pc, #36]	; (8013818 <__assert_func+0x2c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4605      	mov	r5, r0
 80137f8:	68d8      	ldr	r0, [r3, #12]
 80137fa:	b14c      	cbz	r4, 8013810 <__assert_func+0x24>
 80137fc:	4b07      	ldr	r3, [pc, #28]	; (801381c <__assert_func+0x30>)
 80137fe:	9100      	str	r1, [sp, #0]
 8013800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013804:	4906      	ldr	r1, [pc, #24]	; (8013820 <__assert_func+0x34>)
 8013806:	462b      	mov	r3, r5
 8013808:	f000 ffba 	bl	8014780 <fiprintf>
 801380c:	f001 fb10 	bl	8014e30 <abort>
 8013810:	4b04      	ldr	r3, [pc, #16]	; (8013824 <__assert_func+0x38>)
 8013812:	461c      	mov	r4, r3
 8013814:	e7f3      	b.n	80137fe <__assert_func+0x12>
 8013816:	bf00      	nop
 8013818:	20000170 	.word	0x20000170
 801381c:	08019f3f 	.word	0x08019f3f
 8013820:	08019f4c 	.word	0x08019f4c
 8013824:	08019f7a 	.word	0x08019f7a

08013828 <atoi>:
 8013828:	220a      	movs	r2, #10
 801382a:	2100      	movs	r1, #0
 801382c:	f000 b884 	b.w	8013938 <strtol>

08013830 <_strtol_l.constprop.0>:
 8013830:	2b01      	cmp	r3, #1
 8013832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013836:	d001      	beq.n	801383c <_strtol_l.constprop.0+0xc>
 8013838:	2b24      	cmp	r3, #36	; 0x24
 801383a:	d906      	bls.n	801384a <_strtol_l.constprop.0+0x1a>
 801383c:	f001 faae 	bl	8014d9c <__errno>
 8013840:	2316      	movs	r3, #22
 8013842:	6003      	str	r3, [r0, #0]
 8013844:	2000      	movs	r0, #0
 8013846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801384a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013930 <_strtol_l.constprop.0+0x100>
 801384e:	460d      	mov	r5, r1
 8013850:	462e      	mov	r6, r5
 8013852:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013856:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801385a:	f017 0708 	ands.w	r7, r7, #8
 801385e:	d1f7      	bne.n	8013850 <_strtol_l.constprop.0+0x20>
 8013860:	2c2d      	cmp	r4, #45	; 0x2d
 8013862:	d132      	bne.n	80138ca <_strtol_l.constprop.0+0x9a>
 8013864:	782c      	ldrb	r4, [r5, #0]
 8013866:	2701      	movs	r7, #1
 8013868:	1cb5      	adds	r5, r6, #2
 801386a:	2b00      	cmp	r3, #0
 801386c:	d05b      	beq.n	8013926 <_strtol_l.constprop.0+0xf6>
 801386e:	2b10      	cmp	r3, #16
 8013870:	d109      	bne.n	8013886 <_strtol_l.constprop.0+0x56>
 8013872:	2c30      	cmp	r4, #48	; 0x30
 8013874:	d107      	bne.n	8013886 <_strtol_l.constprop.0+0x56>
 8013876:	782c      	ldrb	r4, [r5, #0]
 8013878:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801387c:	2c58      	cmp	r4, #88	; 0x58
 801387e:	d14d      	bne.n	801391c <_strtol_l.constprop.0+0xec>
 8013880:	786c      	ldrb	r4, [r5, #1]
 8013882:	2310      	movs	r3, #16
 8013884:	3502      	adds	r5, #2
 8013886:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801388a:	f108 38ff 	add.w	r8, r8, #4294967295
 801388e:	f04f 0e00 	mov.w	lr, #0
 8013892:	fbb8 f9f3 	udiv	r9, r8, r3
 8013896:	4676      	mov	r6, lr
 8013898:	fb03 8a19 	mls	sl, r3, r9, r8
 801389c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80138a0:	f1bc 0f09 	cmp.w	ip, #9
 80138a4:	d816      	bhi.n	80138d4 <_strtol_l.constprop.0+0xa4>
 80138a6:	4664      	mov	r4, ip
 80138a8:	42a3      	cmp	r3, r4
 80138aa:	dd24      	ble.n	80138f6 <_strtol_l.constprop.0+0xc6>
 80138ac:	f1be 3fff 	cmp.w	lr, #4294967295
 80138b0:	d008      	beq.n	80138c4 <_strtol_l.constprop.0+0x94>
 80138b2:	45b1      	cmp	r9, r6
 80138b4:	d31c      	bcc.n	80138f0 <_strtol_l.constprop.0+0xc0>
 80138b6:	d101      	bne.n	80138bc <_strtol_l.constprop.0+0x8c>
 80138b8:	45a2      	cmp	sl, r4
 80138ba:	db19      	blt.n	80138f0 <_strtol_l.constprop.0+0xc0>
 80138bc:	fb06 4603 	mla	r6, r6, r3, r4
 80138c0:	f04f 0e01 	mov.w	lr, #1
 80138c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138c8:	e7e8      	b.n	801389c <_strtol_l.constprop.0+0x6c>
 80138ca:	2c2b      	cmp	r4, #43	; 0x2b
 80138cc:	bf04      	itt	eq
 80138ce:	782c      	ldrbeq	r4, [r5, #0]
 80138d0:	1cb5      	addeq	r5, r6, #2
 80138d2:	e7ca      	b.n	801386a <_strtol_l.constprop.0+0x3a>
 80138d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80138d8:	f1bc 0f19 	cmp.w	ip, #25
 80138dc:	d801      	bhi.n	80138e2 <_strtol_l.constprop.0+0xb2>
 80138de:	3c37      	subs	r4, #55	; 0x37
 80138e0:	e7e2      	b.n	80138a8 <_strtol_l.constprop.0+0x78>
 80138e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80138e6:	f1bc 0f19 	cmp.w	ip, #25
 80138ea:	d804      	bhi.n	80138f6 <_strtol_l.constprop.0+0xc6>
 80138ec:	3c57      	subs	r4, #87	; 0x57
 80138ee:	e7db      	b.n	80138a8 <_strtol_l.constprop.0+0x78>
 80138f0:	f04f 3eff 	mov.w	lr, #4294967295
 80138f4:	e7e6      	b.n	80138c4 <_strtol_l.constprop.0+0x94>
 80138f6:	f1be 3fff 	cmp.w	lr, #4294967295
 80138fa:	d105      	bne.n	8013908 <_strtol_l.constprop.0+0xd8>
 80138fc:	2322      	movs	r3, #34	; 0x22
 80138fe:	6003      	str	r3, [r0, #0]
 8013900:	4646      	mov	r6, r8
 8013902:	b942      	cbnz	r2, 8013916 <_strtol_l.constprop.0+0xe6>
 8013904:	4630      	mov	r0, r6
 8013906:	e79e      	b.n	8013846 <_strtol_l.constprop.0+0x16>
 8013908:	b107      	cbz	r7, 801390c <_strtol_l.constprop.0+0xdc>
 801390a:	4276      	negs	r6, r6
 801390c:	2a00      	cmp	r2, #0
 801390e:	d0f9      	beq.n	8013904 <_strtol_l.constprop.0+0xd4>
 8013910:	f1be 0f00 	cmp.w	lr, #0
 8013914:	d000      	beq.n	8013918 <_strtol_l.constprop.0+0xe8>
 8013916:	1e69      	subs	r1, r5, #1
 8013918:	6011      	str	r1, [r2, #0]
 801391a:	e7f3      	b.n	8013904 <_strtol_l.constprop.0+0xd4>
 801391c:	2430      	movs	r4, #48	; 0x30
 801391e:	2b00      	cmp	r3, #0
 8013920:	d1b1      	bne.n	8013886 <_strtol_l.constprop.0+0x56>
 8013922:	2308      	movs	r3, #8
 8013924:	e7af      	b.n	8013886 <_strtol_l.constprop.0+0x56>
 8013926:	2c30      	cmp	r4, #48	; 0x30
 8013928:	d0a5      	beq.n	8013876 <_strtol_l.constprop.0+0x46>
 801392a:	230a      	movs	r3, #10
 801392c:	e7ab      	b.n	8013886 <_strtol_l.constprop.0+0x56>
 801392e:	bf00      	nop
 8013930:	08019f7c 	.word	0x08019f7c

08013934 <_strtol_r>:
 8013934:	f7ff bf7c 	b.w	8013830 <_strtol_l.constprop.0>

08013938 <strtol>:
 8013938:	4613      	mov	r3, r2
 801393a:	460a      	mov	r2, r1
 801393c:	4601      	mov	r1, r0
 801393e:	4802      	ldr	r0, [pc, #8]	; (8013948 <strtol+0x10>)
 8013940:	6800      	ldr	r0, [r0, #0]
 8013942:	f7ff bf75 	b.w	8013830 <_strtol_l.constprop.0>
 8013946:	bf00      	nop
 8013948:	20000170 	.word	0x20000170

0801394c <__cvt>:
 801394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013950:	ec55 4b10 	vmov	r4, r5, d0
 8013954:	2d00      	cmp	r5, #0
 8013956:	460e      	mov	r6, r1
 8013958:	4619      	mov	r1, r3
 801395a:	462b      	mov	r3, r5
 801395c:	bfbb      	ittet	lt
 801395e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013962:	461d      	movlt	r5, r3
 8013964:	2300      	movge	r3, #0
 8013966:	232d      	movlt	r3, #45	; 0x2d
 8013968:	700b      	strb	r3, [r1, #0]
 801396a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801396c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013970:	4691      	mov	r9, r2
 8013972:	f023 0820 	bic.w	r8, r3, #32
 8013976:	bfbc      	itt	lt
 8013978:	4622      	movlt	r2, r4
 801397a:	4614      	movlt	r4, r2
 801397c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013980:	d005      	beq.n	801398e <__cvt+0x42>
 8013982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013986:	d100      	bne.n	801398a <__cvt+0x3e>
 8013988:	3601      	adds	r6, #1
 801398a:	2102      	movs	r1, #2
 801398c:	e000      	b.n	8013990 <__cvt+0x44>
 801398e:	2103      	movs	r1, #3
 8013990:	ab03      	add	r3, sp, #12
 8013992:	9301      	str	r3, [sp, #4]
 8013994:	ab02      	add	r3, sp, #8
 8013996:	9300      	str	r3, [sp, #0]
 8013998:	ec45 4b10 	vmov	d0, r4, r5
 801399c:	4653      	mov	r3, sl
 801399e:	4632      	mov	r2, r6
 80139a0:	f001 fad6 	bl	8014f50 <_dtoa_r>
 80139a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80139a8:	4607      	mov	r7, r0
 80139aa:	d102      	bne.n	80139b2 <__cvt+0x66>
 80139ac:	f019 0f01 	tst.w	r9, #1
 80139b0:	d022      	beq.n	80139f8 <__cvt+0xac>
 80139b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80139b6:	eb07 0906 	add.w	r9, r7, r6
 80139ba:	d110      	bne.n	80139de <__cvt+0x92>
 80139bc:	783b      	ldrb	r3, [r7, #0]
 80139be:	2b30      	cmp	r3, #48	; 0x30
 80139c0:	d10a      	bne.n	80139d8 <__cvt+0x8c>
 80139c2:	2200      	movs	r2, #0
 80139c4:	2300      	movs	r3, #0
 80139c6:	4620      	mov	r0, r4
 80139c8:	4629      	mov	r1, r5
 80139ca:	f7ed f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80139ce:	b918      	cbnz	r0, 80139d8 <__cvt+0x8c>
 80139d0:	f1c6 0601 	rsb	r6, r6, #1
 80139d4:	f8ca 6000 	str.w	r6, [sl]
 80139d8:	f8da 3000 	ldr.w	r3, [sl]
 80139dc:	4499      	add	r9, r3
 80139de:	2200      	movs	r2, #0
 80139e0:	2300      	movs	r3, #0
 80139e2:	4620      	mov	r0, r4
 80139e4:	4629      	mov	r1, r5
 80139e6:	f7ed f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80139ea:	b108      	cbz	r0, 80139f0 <__cvt+0xa4>
 80139ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80139f0:	2230      	movs	r2, #48	; 0x30
 80139f2:	9b03      	ldr	r3, [sp, #12]
 80139f4:	454b      	cmp	r3, r9
 80139f6:	d307      	bcc.n	8013a08 <__cvt+0xbc>
 80139f8:	9b03      	ldr	r3, [sp, #12]
 80139fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139fc:	1bdb      	subs	r3, r3, r7
 80139fe:	4638      	mov	r0, r7
 8013a00:	6013      	str	r3, [r2, #0]
 8013a02:	b004      	add	sp, #16
 8013a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a08:	1c59      	adds	r1, r3, #1
 8013a0a:	9103      	str	r1, [sp, #12]
 8013a0c:	701a      	strb	r2, [r3, #0]
 8013a0e:	e7f0      	b.n	80139f2 <__cvt+0xa6>

08013a10 <__exponent>:
 8013a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a12:	4603      	mov	r3, r0
 8013a14:	2900      	cmp	r1, #0
 8013a16:	bfb8      	it	lt
 8013a18:	4249      	neglt	r1, r1
 8013a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8013a1e:	bfb4      	ite	lt
 8013a20:	222d      	movlt	r2, #45	; 0x2d
 8013a22:	222b      	movge	r2, #43	; 0x2b
 8013a24:	2909      	cmp	r1, #9
 8013a26:	7042      	strb	r2, [r0, #1]
 8013a28:	dd2a      	ble.n	8013a80 <__exponent+0x70>
 8013a2a:	f10d 0207 	add.w	r2, sp, #7
 8013a2e:	4617      	mov	r7, r2
 8013a30:	260a      	movs	r6, #10
 8013a32:	4694      	mov	ip, r2
 8013a34:	fb91 f5f6 	sdiv	r5, r1, r6
 8013a38:	fb06 1415 	mls	r4, r6, r5, r1
 8013a3c:	3430      	adds	r4, #48	; 0x30
 8013a3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013a42:	460c      	mov	r4, r1
 8013a44:	2c63      	cmp	r4, #99	; 0x63
 8013a46:	f102 32ff 	add.w	r2, r2, #4294967295
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	dcf1      	bgt.n	8013a32 <__exponent+0x22>
 8013a4e:	3130      	adds	r1, #48	; 0x30
 8013a50:	f1ac 0402 	sub.w	r4, ip, #2
 8013a54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013a58:	1c41      	adds	r1, r0, #1
 8013a5a:	4622      	mov	r2, r4
 8013a5c:	42ba      	cmp	r2, r7
 8013a5e:	d30a      	bcc.n	8013a76 <__exponent+0x66>
 8013a60:	f10d 0209 	add.w	r2, sp, #9
 8013a64:	eba2 020c 	sub.w	r2, r2, ip
 8013a68:	42bc      	cmp	r4, r7
 8013a6a:	bf88      	it	hi
 8013a6c:	2200      	movhi	r2, #0
 8013a6e:	4413      	add	r3, r2
 8013a70:	1a18      	subs	r0, r3, r0
 8013a72:	b003      	add	sp, #12
 8013a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013a7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013a7e:	e7ed      	b.n	8013a5c <__exponent+0x4c>
 8013a80:	2330      	movs	r3, #48	; 0x30
 8013a82:	3130      	adds	r1, #48	; 0x30
 8013a84:	7083      	strb	r3, [r0, #2]
 8013a86:	70c1      	strb	r1, [r0, #3]
 8013a88:	1d03      	adds	r3, r0, #4
 8013a8a:	e7f1      	b.n	8013a70 <__exponent+0x60>

08013a8c <_printf_float>:
 8013a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a90:	ed2d 8b02 	vpush	{d8}
 8013a94:	b08d      	sub	sp, #52	; 0x34
 8013a96:	460c      	mov	r4, r1
 8013a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013a9c:	4616      	mov	r6, r2
 8013a9e:	461f      	mov	r7, r3
 8013aa0:	4605      	mov	r5, r0
 8013aa2:	f001 f931 	bl	8014d08 <_localeconv_r>
 8013aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8013aaa:	4650      	mov	r0, sl
 8013aac:	f7ec fbe0 	bl	8000270 <strlen>
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8013ab4:	6823      	ldr	r3, [r4, #0]
 8013ab6:	9305      	str	r3, [sp, #20]
 8013ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8013abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013ac0:	3307      	adds	r3, #7
 8013ac2:	f023 0307 	bic.w	r3, r3, #7
 8013ac6:	f103 0208 	add.w	r2, r3, #8
 8013aca:	f8c8 2000 	str.w	r2, [r8]
 8013ace:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013ad6:	9307      	str	r3, [sp, #28]
 8013ad8:	f8cd 8018 	str.w	r8, [sp, #24]
 8013adc:	ee08 0a10 	vmov	s16, r0
 8013ae0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013ae4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ae8:	4b9e      	ldr	r3, [pc, #632]	; (8013d64 <_printf_float+0x2d8>)
 8013aea:	f04f 32ff 	mov.w	r2, #4294967295
 8013aee:	f7ed f81d 	bl	8000b2c <__aeabi_dcmpun>
 8013af2:	bb88      	cbnz	r0, 8013b58 <_printf_float+0xcc>
 8013af4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013af8:	4b9a      	ldr	r3, [pc, #616]	; (8013d64 <_printf_float+0x2d8>)
 8013afa:	f04f 32ff 	mov.w	r2, #4294967295
 8013afe:	f7ec fff7 	bl	8000af0 <__aeabi_dcmple>
 8013b02:	bb48      	cbnz	r0, 8013b58 <_printf_float+0xcc>
 8013b04:	2200      	movs	r2, #0
 8013b06:	2300      	movs	r3, #0
 8013b08:	4640      	mov	r0, r8
 8013b0a:	4649      	mov	r1, r9
 8013b0c:	f7ec ffe6 	bl	8000adc <__aeabi_dcmplt>
 8013b10:	b110      	cbz	r0, 8013b18 <_printf_float+0x8c>
 8013b12:	232d      	movs	r3, #45	; 0x2d
 8013b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b18:	4a93      	ldr	r2, [pc, #588]	; (8013d68 <_printf_float+0x2dc>)
 8013b1a:	4b94      	ldr	r3, [pc, #592]	; (8013d6c <_printf_float+0x2e0>)
 8013b1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013b20:	bf94      	ite	ls
 8013b22:	4690      	movls	r8, r2
 8013b24:	4698      	movhi	r8, r3
 8013b26:	2303      	movs	r3, #3
 8013b28:	6123      	str	r3, [r4, #16]
 8013b2a:	9b05      	ldr	r3, [sp, #20]
 8013b2c:	f023 0304 	bic.w	r3, r3, #4
 8013b30:	6023      	str	r3, [r4, #0]
 8013b32:	f04f 0900 	mov.w	r9, #0
 8013b36:	9700      	str	r7, [sp, #0]
 8013b38:	4633      	mov	r3, r6
 8013b3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8013b3c:	4621      	mov	r1, r4
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f000 f9da 	bl	8013ef8 <_printf_common>
 8013b44:	3001      	adds	r0, #1
 8013b46:	f040 8090 	bne.w	8013c6a <_printf_float+0x1de>
 8013b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b4e:	b00d      	add	sp, #52	; 0x34
 8013b50:	ecbd 8b02 	vpop	{d8}
 8013b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b58:	4642      	mov	r2, r8
 8013b5a:	464b      	mov	r3, r9
 8013b5c:	4640      	mov	r0, r8
 8013b5e:	4649      	mov	r1, r9
 8013b60:	f7ec ffe4 	bl	8000b2c <__aeabi_dcmpun>
 8013b64:	b140      	cbz	r0, 8013b78 <_printf_float+0xec>
 8013b66:	464b      	mov	r3, r9
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	bfbc      	itt	lt
 8013b6c:	232d      	movlt	r3, #45	; 0x2d
 8013b6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b72:	4a7f      	ldr	r2, [pc, #508]	; (8013d70 <_printf_float+0x2e4>)
 8013b74:	4b7f      	ldr	r3, [pc, #508]	; (8013d74 <_printf_float+0x2e8>)
 8013b76:	e7d1      	b.n	8013b1c <_printf_float+0x90>
 8013b78:	6863      	ldr	r3, [r4, #4]
 8013b7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013b7e:	9206      	str	r2, [sp, #24]
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	d13f      	bne.n	8013c04 <_printf_float+0x178>
 8013b84:	2306      	movs	r3, #6
 8013b86:	6063      	str	r3, [r4, #4]
 8013b88:	9b05      	ldr	r3, [sp, #20]
 8013b8a:	6861      	ldr	r1, [r4, #4]
 8013b8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013b90:	2300      	movs	r3, #0
 8013b92:	9303      	str	r3, [sp, #12]
 8013b94:	ab0a      	add	r3, sp, #40	; 0x28
 8013b96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013b9a:	ab09      	add	r3, sp, #36	; 0x24
 8013b9c:	ec49 8b10 	vmov	d0, r8, r9
 8013ba0:	9300      	str	r3, [sp, #0]
 8013ba2:	6022      	str	r2, [r4, #0]
 8013ba4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013ba8:	4628      	mov	r0, r5
 8013baa:	f7ff fecf 	bl	801394c <__cvt>
 8013bae:	9b06      	ldr	r3, [sp, #24]
 8013bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bb2:	2b47      	cmp	r3, #71	; 0x47
 8013bb4:	4680      	mov	r8, r0
 8013bb6:	d108      	bne.n	8013bca <_printf_float+0x13e>
 8013bb8:	1cc8      	adds	r0, r1, #3
 8013bba:	db02      	blt.n	8013bc2 <_printf_float+0x136>
 8013bbc:	6863      	ldr	r3, [r4, #4]
 8013bbe:	4299      	cmp	r1, r3
 8013bc0:	dd41      	ble.n	8013c46 <_printf_float+0x1ba>
 8013bc2:	f1ab 0302 	sub.w	r3, fp, #2
 8013bc6:	fa5f fb83 	uxtb.w	fp, r3
 8013bca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013bce:	d820      	bhi.n	8013c12 <_printf_float+0x186>
 8013bd0:	3901      	subs	r1, #1
 8013bd2:	465a      	mov	r2, fp
 8013bd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013bd8:	9109      	str	r1, [sp, #36]	; 0x24
 8013bda:	f7ff ff19 	bl	8013a10 <__exponent>
 8013bde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013be0:	1813      	adds	r3, r2, r0
 8013be2:	2a01      	cmp	r2, #1
 8013be4:	4681      	mov	r9, r0
 8013be6:	6123      	str	r3, [r4, #16]
 8013be8:	dc02      	bgt.n	8013bf0 <_printf_float+0x164>
 8013bea:	6822      	ldr	r2, [r4, #0]
 8013bec:	07d2      	lsls	r2, r2, #31
 8013bee:	d501      	bpl.n	8013bf4 <_printf_float+0x168>
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	6123      	str	r3, [r4, #16]
 8013bf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d09c      	beq.n	8013b36 <_printf_float+0xaa>
 8013bfc:	232d      	movs	r3, #45	; 0x2d
 8013bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c02:	e798      	b.n	8013b36 <_printf_float+0xaa>
 8013c04:	9a06      	ldr	r2, [sp, #24]
 8013c06:	2a47      	cmp	r2, #71	; 0x47
 8013c08:	d1be      	bne.n	8013b88 <_printf_float+0xfc>
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1bc      	bne.n	8013b88 <_printf_float+0xfc>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e7b9      	b.n	8013b86 <_printf_float+0xfa>
 8013c12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013c16:	d118      	bne.n	8013c4a <_printf_float+0x1be>
 8013c18:	2900      	cmp	r1, #0
 8013c1a:	6863      	ldr	r3, [r4, #4]
 8013c1c:	dd0b      	ble.n	8013c36 <_printf_float+0x1aa>
 8013c1e:	6121      	str	r1, [r4, #16]
 8013c20:	b913      	cbnz	r3, 8013c28 <_printf_float+0x19c>
 8013c22:	6822      	ldr	r2, [r4, #0]
 8013c24:	07d0      	lsls	r0, r2, #31
 8013c26:	d502      	bpl.n	8013c2e <_printf_float+0x1a2>
 8013c28:	3301      	adds	r3, #1
 8013c2a:	440b      	add	r3, r1
 8013c2c:	6123      	str	r3, [r4, #16]
 8013c2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c30:	f04f 0900 	mov.w	r9, #0
 8013c34:	e7de      	b.n	8013bf4 <_printf_float+0x168>
 8013c36:	b913      	cbnz	r3, 8013c3e <_printf_float+0x1b2>
 8013c38:	6822      	ldr	r2, [r4, #0]
 8013c3a:	07d2      	lsls	r2, r2, #31
 8013c3c:	d501      	bpl.n	8013c42 <_printf_float+0x1b6>
 8013c3e:	3302      	adds	r3, #2
 8013c40:	e7f4      	b.n	8013c2c <_printf_float+0x1a0>
 8013c42:	2301      	movs	r3, #1
 8013c44:	e7f2      	b.n	8013c2c <_printf_float+0x1a0>
 8013c46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c4c:	4299      	cmp	r1, r3
 8013c4e:	db05      	blt.n	8013c5c <_printf_float+0x1d0>
 8013c50:	6823      	ldr	r3, [r4, #0]
 8013c52:	6121      	str	r1, [r4, #16]
 8013c54:	07d8      	lsls	r0, r3, #31
 8013c56:	d5ea      	bpl.n	8013c2e <_printf_float+0x1a2>
 8013c58:	1c4b      	adds	r3, r1, #1
 8013c5a:	e7e7      	b.n	8013c2c <_printf_float+0x1a0>
 8013c5c:	2900      	cmp	r1, #0
 8013c5e:	bfd4      	ite	le
 8013c60:	f1c1 0202 	rsble	r2, r1, #2
 8013c64:	2201      	movgt	r2, #1
 8013c66:	4413      	add	r3, r2
 8013c68:	e7e0      	b.n	8013c2c <_printf_float+0x1a0>
 8013c6a:	6823      	ldr	r3, [r4, #0]
 8013c6c:	055a      	lsls	r2, r3, #21
 8013c6e:	d407      	bmi.n	8013c80 <_printf_float+0x1f4>
 8013c70:	6923      	ldr	r3, [r4, #16]
 8013c72:	4642      	mov	r2, r8
 8013c74:	4631      	mov	r1, r6
 8013c76:	4628      	mov	r0, r5
 8013c78:	47b8      	blx	r7
 8013c7a:	3001      	adds	r0, #1
 8013c7c:	d12c      	bne.n	8013cd8 <_printf_float+0x24c>
 8013c7e:	e764      	b.n	8013b4a <_printf_float+0xbe>
 8013c80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c84:	f240 80e0 	bls.w	8013e48 <_printf_float+0x3bc>
 8013c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	2300      	movs	r3, #0
 8013c90:	f7ec ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d034      	beq.n	8013d02 <_printf_float+0x276>
 8013c98:	4a37      	ldr	r2, [pc, #220]	; (8013d78 <_printf_float+0x2ec>)
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	47b8      	blx	r7
 8013ca2:	3001      	adds	r0, #1
 8013ca4:	f43f af51 	beq.w	8013b4a <_printf_float+0xbe>
 8013ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cac:	429a      	cmp	r2, r3
 8013cae:	db02      	blt.n	8013cb6 <_printf_float+0x22a>
 8013cb0:	6823      	ldr	r3, [r4, #0]
 8013cb2:	07d8      	lsls	r0, r3, #31
 8013cb4:	d510      	bpl.n	8013cd8 <_printf_float+0x24c>
 8013cb6:	ee18 3a10 	vmov	r3, s16
 8013cba:	4652      	mov	r2, sl
 8013cbc:	4631      	mov	r1, r6
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	47b8      	blx	r7
 8013cc2:	3001      	adds	r0, #1
 8013cc4:	f43f af41 	beq.w	8013b4a <_printf_float+0xbe>
 8013cc8:	f04f 0800 	mov.w	r8, #0
 8013ccc:	f104 091a 	add.w	r9, r4, #26
 8013cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cd2:	3b01      	subs	r3, #1
 8013cd4:	4543      	cmp	r3, r8
 8013cd6:	dc09      	bgt.n	8013cec <_printf_float+0x260>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	079b      	lsls	r3, r3, #30
 8013cdc:	f100 8107 	bmi.w	8013eee <_printf_float+0x462>
 8013ce0:	68e0      	ldr	r0, [r4, #12]
 8013ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ce4:	4298      	cmp	r0, r3
 8013ce6:	bfb8      	it	lt
 8013ce8:	4618      	movlt	r0, r3
 8013cea:	e730      	b.n	8013b4e <_printf_float+0xc2>
 8013cec:	2301      	movs	r3, #1
 8013cee:	464a      	mov	r2, r9
 8013cf0:	4631      	mov	r1, r6
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	47b8      	blx	r7
 8013cf6:	3001      	adds	r0, #1
 8013cf8:	f43f af27 	beq.w	8013b4a <_printf_float+0xbe>
 8013cfc:	f108 0801 	add.w	r8, r8, #1
 8013d00:	e7e6      	b.n	8013cd0 <_printf_float+0x244>
 8013d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	dc39      	bgt.n	8013d7c <_printf_float+0x2f0>
 8013d08:	4a1b      	ldr	r2, [pc, #108]	; (8013d78 <_printf_float+0x2ec>)
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	4631      	mov	r1, r6
 8013d0e:	4628      	mov	r0, r5
 8013d10:	47b8      	blx	r7
 8013d12:	3001      	adds	r0, #1
 8013d14:	f43f af19 	beq.w	8013b4a <_printf_float+0xbe>
 8013d18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	d102      	bne.n	8013d26 <_printf_float+0x29a>
 8013d20:	6823      	ldr	r3, [r4, #0]
 8013d22:	07d9      	lsls	r1, r3, #31
 8013d24:	d5d8      	bpl.n	8013cd8 <_printf_float+0x24c>
 8013d26:	ee18 3a10 	vmov	r3, s16
 8013d2a:	4652      	mov	r2, sl
 8013d2c:	4631      	mov	r1, r6
 8013d2e:	4628      	mov	r0, r5
 8013d30:	47b8      	blx	r7
 8013d32:	3001      	adds	r0, #1
 8013d34:	f43f af09 	beq.w	8013b4a <_printf_float+0xbe>
 8013d38:	f04f 0900 	mov.w	r9, #0
 8013d3c:	f104 0a1a 	add.w	sl, r4, #26
 8013d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d42:	425b      	negs	r3, r3
 8013d44:	454b      	cmp	r3, r9
 8013d46:	dc01      	bgt.n	8013d4c <_printf_float+0x2c0>
 8013d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d4a:	e792      	b.n	8013c72 <_printf_float+0x1e6>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	4652      	mov	r2, sl
 8013d50:	4631      	mov	r1, r6
 8013d52:	4628      	mov	r0, r5
 8013d54:	47b8      	blx	r7
 8013d56:	3001      	adds	r0, #1
 8013d58:	f43f aef7 	beq.w	8013b4a <_printf_float+0xbe>
 8013d5c:	f109 0901 	add.w	r9, r9, #1
 8013d60:	e7ee      	b.n	8013d40 <_printf_float+0x2b4>
 8013d62:	bf00      	nop
 8013d64:	7fefffff 	.word	0x7fefffff
 8013d68:	0801a07c 	.word	0x0801a07c
 8013d6c:	0801a080 	.word	0x0801a080
 8013d70:	0801a084 	.word	0x0801a084
 8013d74:	0801a088 	.word	0x0801a088
 8013d78:	0801a08c 	.word	0x0801a08c
 8013d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d80:	429a      	cmp	r2, r3
 8013d82:	bfa8      	it	ge
 8013d84:	461a      	movge	r2, r3
 8013d86:	2a00      	cmp	r2, #0
 8013d88:	4691      	mov	r9, r2
 8013d8a:	dc37      	bgt.n	8013dfc <_printf_float+0x370>
 8013d8c:	f04f 0b00 	mov.w	fp, #0
 8013d90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d94:	f104 021a 	add.w	r2, r4, #26
 8013d98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d9a:	9305      	str	r3, [sp, #20]
 8013d9c:	eba3 0309 	sub.w	r3, r3, r9
 8013da0:	455b      	cmp	r3, fp
 8013da2:	dc33      	bgt.n	8013e0c <_printf_float+0x380>
 8013da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013da8:	429a      	cmp	r2, r3
 8013daa:	db3b      	blt.n	8013e24 <_printf_float+0x398>
 8013dac:	6823      	ldr	r3, [r4, #0]
 8013dae:	07da      	lsls	r2, r3, #31
 8013db0:	d438      	bmi.n	8013e24 <_printf_float+0x398>
 8013db2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013db6:	eba2 0903 	sub.w	r9, r2, r3
 8013dba:	9b05      	ldr	r3, [sp, #20]
 8013dbc:	1ad2      	subs	r2, r2, r3
 8013dbe:	4591      	cmp	r9, r2
 8013dc0:	bfa8      	it	ge
 8013dc2:	4691      	movge	r9, r2
 8013dc4:	f1b9 0f00 	cmp.w	r9, #0
 8013dc8:	dc35      	bgt.n	8013e36 <_printf_float+0x3aa>
 8013dca:	f04f 0800 	mov.w	r8, #0
 8013dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013dd2:	f104 0a1a 	add.w	sl, r4, #26
 8013dd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dda:	1a9b      	subs	r3, r3, r2
 8013ddc:	eba3 0309 	sub.w	r3, r3, r9
 8013de0:	4543      	cmp	r3, r8
 8013de2:	f77f af79 	ble.w	8013cd8 <_printf_float+0x24c>
 8013de6:	2301      	movs	r3, #1
 8013de8:	4652      	mov	r2, sl
 8013dea:	4631      	mov	r1, r6
 8013dec:	4628      	mov	r0, r5
 8013dee:	47b8      	blx	r7
 8013df0:	3001      	adds	r0, #1
 8013df2:	f43f aeaa 	beq.w	8013b4a <_printf_float+0xbe>
 8013df6:	f108 0801 	add.w	r8, r8, #1
 8013dfa:	e7ec      	b.n	8013dd6 <_printf_float+0x34a>
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	4631      	mov	r1, r6
 8013e00:	4642      	mov	r2, r8
 8013e02:	4628      	mov	r0, r5
 8013e04:	47b8      	blx	r7
 8013e06:	3001      	adds	r0, #1
 8013e08:	d1c0      	bne.n	8013d8c <_printf_float+0x300>
 8013e0a:	e69e      	b.n	8013b4a <_printf_float+0xbe>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	4631      	mov	r1, r6
 8013e10:	4628      	mov	r0, r5
 8013e12:	9205      	str	r2, [sp, #20]
 8013e14:	47b8      	blx	r7
 8013e16:	3001      	adds	r0, #1
 8013e18:	f43f ae97 	beq.w	8013b4a <_printf_float+0xbe>
 8013e1c:	9a05      	ldr	r2, [sp, #20]
 8013e1e:	f10b 0b01 	add.w	fp, fp, #1
 8013e22:	e7b9      	b.n	8013d98 <_printf_float+0x30c>
 8013e24:	ee18 3a10 	vmov	r3, s16
 8013e28:	4652      	mov	r2, sl
 8013e2a:	4631      	mov	r1, r6
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	47b8      	blx	r7
 8013e30:	3001      	adds	r0, #1
 8013e32:	d1be      	bne.n	8013db2 <_printf_float+0x326>
 8013e34:	e689      	b.n	8013b4a <_printf_float+0xbe>
 8013e36:	9a05      	ldr	r2, [sp, #20]
 8013e38:	464b      	mov	r3, r9
 8013e3a:	4442      	add	r2, r8
 8013e3c:	4631      	mov	r1, r6
 8013e3e:	4628      	mov	r0, r5
 8013e40:	47b8      	blx	r7
 8013e42:	3001      	adds	r0, #1
 8013e44:	d1c1      	bne.n	8013dca <_printf_float+0x33e>
 8013e46:	e680      	b.n	8013b4a <_printf_float+0xbe>
 8013e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e4a:	2a01      	cmp	r2, #1
 8013e4c:	dc01      	bgt.n	8013e52 <_printf_float+0x3c6>
 8013e4e:	07db      	lsls	r3, r3, #31
 8013e50:	d53a      	bpl.n	8013ec8 <_printf_float+0x43c>
 8013e52:	2301      	movs	r3, #1
 8013e54:	4642      	mov	r2, r8
 8013e56:	4631      	mov	r1, r6
 8013e58:	4628      	mov	r0, r5
 8013e5a:	47b8      	blx	r7
 8013e5c:	3001      	adds	r0, #1
 8013e5e:	f43f ae74 	beq.w	8013b4a <_printf_float+0xbe>
 8013e62:	ee18 3a10 	vmov	r3, s16
 8013e66:	4652      	mov	r2, sl
 8013e68:	4631      	mov	r1, r6
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	47b8      	blx	r7
 8013e6e:	3001      	adds	r0, #1
 8013e70:	f43f ae6b 	beq.w	8013b4a <_printf_float+0xbe>
 8013e74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e78:	2200      	movs	r2, #0
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013e80:	f7ec fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e84:	b9d8      	cbnz	r0, 8013ebe <_printf_float+0x432>
 8013e86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013e8a:	f108 0201 	add.w	r2, r8, #1
 8013e8e:	4631      	mov	r1, r6
 8013e90:	4628      	mov	r0, r5
 8013e92:	47b8      	blx	r7
 8013e94:	3001      	adds	r0, #1
 8013e96:	d10e      	bne.n	8013eb6 <_printf_float+0x42a>
 8013e98:	e657      	b.n	8013b4a <_printf_float+0xbe>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	4652      	mov	r2, sl
 8013e9e:	4631      	mov	r1, r6
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	47b8      	blx	r7
 8013ea4:	3001      	adds	r0, #1
 8013ea6:	f43f ae50 	beq.w	8013b4a <_printf_float+0xbe>
 8013eaa:	f108 0801 	add.w	r8, r8, #1
 8013eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eb0:	3b01      	subs	r3, #1
 8013eb2:	4543      	cmp	r3, r8
 8013eb4:	dcf1      	bgt.n	8013e9a <_printf_float+0x40e>
 8013eb6:	464b      	mov	r3, r9
 8013eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ebc:	e6da      	b.n	8013c74 <_printf_float+0x1e8>
 8013ebe:	f04f 0800 	mov.w	r8, #0
 8013ec2:	f104 0a1a 	add.w	sl, r4, #26
 8013ec6:	e7f2      	b.n	8013eae <_printf_float+0x422>
 8013ec8:	2301      	movs	r3, #1
 8013eca:	4642      	mov	r2, r8
 8013ecc:	e7df      	b.n	8013e8e <_printf_float+0x402>
 8013ece:	2301      	movs	r3, #1
 8013ed0:	464a      	mov	r2, r9
 8013ed2:	4631      	mov	r1, r6
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	47b8      	blx	r7
 8013ed8:	3001      	adds	r0, #1
 8013eda:	f43f ae36 	beq.w	8013b4a <_printf_float+0xbe>
 8013ede:	f108 0801 	add.w	r8, r8, #1
 8013ee2:	68e3      	ldr	r3, [r4, #12]
 8013ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ee6:	1a5b      	subs	r3, r3, r1
 8013ee8:	4543      	cmp	r3, r8
 8013eea:	dcf0      	bgt.n	8013ece <_printf_float+0x442>
 8013eec:	e6f8      	b.n	8013ce0 <_printf_float+0x254>
 8013eee:	f04f 0800 	mov.w	r8, #0
 8013ef2:	f104 0919 	add.w	r9, r4, #25
 8013ef6:	e7f4      	b.n	8013ee2 <_printf_float+0x456>

08013ef8 <_printf_common>:
 8013ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013efc:	4616      	mov	r6, r2
 8013efe:	4699      	mov	r9, r3
 8013f00:	688a      	ldr	r2, [r1, #8]
 8013f02:	690b      	ldr	r3, [r1, #16]
 8013f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	bfb8      	it	lt
 8013f0c:	4613      	movlt	r3, r2
 8013f0e:	6033      	str	r3, [r6, #0]
 8013f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f14:	4607      	mov	r7, r0
 8013f16:	460c      	mov	r4, r1
 8013f18:	b10a      	cbz	r2, 8013f1e <_printf_common+0x26>
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	6033      	str	r3, [r6, #0]
 8013f1e:	6823      	ldr	r3, [r4, #0]
 8013f20:	0699      	lsls	r1, r3, #26
 8013f22:	bf42      	ittt	mi
 8013f24:	6833      	ldrmi	r3, [r6, #0]
 8013f26:	3302      	addmi	r3, #2
 8013f28:	6033      	strmi	r3, [r6, #0]
 8013f2a:	6825      	ldr	r5, [r4, #0]
 8013f2c:	f015 0506 	ands.w	r5, r5, #6
 8013f30:	d106      	bne.n	8013f40 <_printf_common+0x48>
 8013f32:	f104 0a19 	add.w	sl, r4, #25
 8013f36:	68e3      	ldr	r3, [r4, #12]
 8013f38:	6832      	ldr	r2, [r6, #0]
 8013f3a:	1a9b      	subs	r3, r3, r2
 8013f3c:	42ab      	cmp	r3, r5
 8013f3e:	dc26      	bgt.n	8013f8e <_printf_common+0x96>
 8013f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f44:	1e13      	subs	r3, r2, #0
 8013f46:	6822      	ldr	r2, [r4, #0]
 8013f48:	bf18      	it	ne
 8013f4a:	2301      	movne	r3, #1
 8013f4c:	0692      	lsls	r2, r2, #26
 8013f4e:	d42b      	bmi.n	8013fa8 <_printf_common+0xb0>
 8013f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f54:	4649      	mov	r1, r9
 8013f56:	4638      	mov	r0, r7
 8013f58:	47c0      	blx	r8
 8013f5a:	3001      	adds	r0, #1
 8013f5c:	d01e      	beq.n	8013f9c <_printf_common+0xa4>
 8013f5e:	6823      	ldr	r3, [r4, #0]
 8013f60:	6922      	ldr	r2, [r4, #16]
 8013f62:	f003 0306 	and.w	r3, r3, #6
 8013f66:	2b04      	cmp	r3, #4
 8013f68:	bf02      	ittt	eq
 8013f6a:	68e5      	ldreq	r5, [r4, #12]
 8013f6c:	6833      	ldreq	r3, [r6, #0]
 8013f6e:	1aed      	subeq	r5, r5, r3
 8013f70:	68a3      	ldr	r3, [r4, #8]
 8013f72:	bf0c      	ite	eq
 8013f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f78:	2500      	movne	r5, #0
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	bfc4      	itt	gt
 8013f7e:	1a9b      	subgt	r3, r3, r2
 8013f80:	18ed      	addgt	r5, r5, r3
 8013f82:	2600      	movs	r6, #0
 8013f84:	341a      	adds	r4, #26
 8013f86:	42b5      	cmp	r5, r6
 8013f88:	d11a      	bne.n	8013fc0 <_printf_common+0xc8>
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	e008      	b.n	8013fa0 <_printf_common+0xa8>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	4652      	mov	r2, sl
 8013f92:	4649      	mov	r1, r9
 8013f94:	4638      	mov	r0, r7
 8013f96:	47c0      	blx	r8
 8013f98:	3001      	adds	r0, #1
 8013f9a:	d103      	bne.n	8013fa4 <_printf_common+0xac>
 8013f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa4:	3501      	adds	r5, #1
 8013fa6:	e7c6      	b.n	8013f36 <_printf_common+0x3e>
 8013fa8:	18e1      	adds	r1, r4, r3
 8013faa:	1c5a      	adds	r2, r3, #1
 8013fac:	2030      	movs	r0, #48	; 0x30
 8013fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fb2:	4422      	add	r2, r4
 8013fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fbc:	3302      	adds	r3, #2
 8013fbe:	e7c7      	b.n	8013f50 <_printf_common+0x58>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	4622      	mov	r2, r4
 8013fc4:	4649      	mov	r1, r9
 8013fc6:	4638      	mov	r0, r7
 8013fc8:	47c0      	blx	r8
 8013fca:	3001      	adds	r0, #1
 8013fcc:	d0e6      	beq.n	8013f9c <_printf_common+0xa4>
 8013fce:	3601      	adds	r6, #1
 8013fd0:	e7d9      	b.n	8013f86 <_printf_common+0x8e>
	...

08013fd4 <_printf_i>:
 8013fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fd8:	7e0f      	ldrb	r7, [r1, #24]
 8013fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013fdc:	2f78      	cmp	r7, #120	; 0x78
 8013fde:	4691      	mov	r9, r2
 8013fe0:	4680      	mov	r8, r0
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	469a      	mov	sl, r3
 8013fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013fea:	d807      	bhi.n	8013ffc <_printf_i+0x28>
 8013fec:	2f62      	cmp	r7, #98	; 0x62
 8013fee:	d80a      	bhi.n	8014006 <_printf_i+0x32>
 8013ff0:	2f00      	cmp	r7, #0
 8013ff2:	f000 80d4 	beq.w	801419e <_printf_i+0x1ca>
 8013ff6:	2f58      	cmp	r7, #88	; 0x58
 8013ff8:	f000 80c0 	beq.w	801417c <_printf_i+0x1a8>
 8013ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014004:	e03a      	b.n	801407c <_printf_i+0xa8>
 8014006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801400a:	2b15      	cmp	r3, #21
 801400c:	d8f6      	bhi.n	8013ffc <_printf_i+0x28>
 801400e:	a101      	add	r1, pc, #4	; (adr r1, 8014014 <_printf_i+0x40>)
 8014010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014014:	0801406d 	.word	0x0801406d
 8014018:	08014081 	.word	0x08014081
 801401c:	08013ffd 	.word	0x08013ffd
 8014020:	08013ffd 	.word	0x08013ffd
 8014024:	08013ffd 	.word	0x08013ffd
 8014028:	08013ffd 	.word	0x08013ffd
 801402c:	08014081 	.word	0x08014081
 8014030:	08013ffd 	.word	0x08013ffd
 8014034:	08013ffd 	.word	0x08013ffd
 8014038:	08013ffd 	.word	0x08013ffd
 801403c:	08013ffd 	.word	0x08013ffd
 8014040:	08014185 	.word	0x08014185
 8014044:	080140ad 	.word	0x080140ad
 8014048:	0801413f 	.word	0x0801413f
 801404c:	08013ffd 	.word	0x08013ffd
 8014050:	08013ffd 	.word	0x08013ffd
 8014054:	080141a7 	.word	0x080141a7
 8014058:	08013ffd 	.word	0x08013ffd
 801405c:	080140ad 	.word	0x080140ad
 8014060:	08013ffd 	.word	0x08013ffd
 8014064:	08013ffd 	.word	0x08013ffd
 8014068:	08014147 	.word	0x08014147
 801406c:	682b      	ldr	r3, [r5, #0]
 801406e:	1d1a      	adds	r2, r3, #4
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	602a      	str	r2, [r5, #0]
 8014074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801407c:	2301      	movs	r3, #1
 801407e:	e09f      	b.n	80141c0 <_printf_i+0x1ec>
 8014080:	6820      	ldr	r0, [r4, #0]
 8014082:	682b      	ldr	r3, [r5, #0]
 8014084:	0607      	lsls	r7, r0, #24
 8014086:	f103 0104 	add.w	r1, r3, #4
 801408a:	6029      	str	r1, [r5, #0]
 801408c:	d501      	bpl.n	8014092 <_printf_i+0xbe>
 801408e:	681e      	ldr	r6, [r3, #0]
 8014090:	e003      	b.n	801409a <_printf_i+0xc6>
 8014092:	0646      	lsls	r6, r0, #25
 8014094:	d5fb      	bpl.n	801408e <_printf_i+0xba>
 8014096:	f9b3 6000 	ldrsh.w	r6, [r3]
 801409a:	2e00      	cmp	r6, #0
 801409c:	da03      	bge.n	80140a6 <_printf_i+0xd2>
 801409e:	232d      	movs	r3, #45	; 0x2d
 80140a0:	4276      	negs	r6, r6
 80140a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140a6:	485a      	ldr	r0, [pc, #360]	; (8014210 <_printf_i+0x23c>)
 80140a8:	230a      	movs	r3, #10
 80140aa:	e012      	b.n	80140d2 <_printf_i+0xfe>
 80140ac:	682b      	ldr	r3, [r5, #0]
 80140ae:	6820      	ldr	r0, [r4, #0]
 80140b0:	1d19      	adds	r1, r3, #4
 80140b2:	6029      	str	r1, [r5, #0]
 80140b4:	0605      	lsls	r5, r0, #24
 80140b6:	d501      	bpl.n	80140bc <_printf_i+0xe8>
 80140b8:	681e      	ldr	r6, [r3, #0]
 80140ba:	e002      	b.n	80140c2 <_printf_i+0xee>
 80140bc:	0641      	lsls	r1, r0, #25
 80140be:	d5fb      	bpl.n	80140b8 <_printf_i+0xe4>
 80140c0:	881e      	ldrh	r6, [r3, #0]
 80140c2:	4853      	ldr	r0, [pc, #332]	; (8014210 <_printf_i+0x23c>)
 80140c4:	2f6f      	cmp	r7, #111	; 0x6f
 80140c6:	bf0c      	ite	eq
 80140c8:	2308      	moveq	r3, #8
 80140ca:	230a      	movne	r3, #10
 80140cc:	2100      	movs	r1, #0
 80140ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140d2:	6865      	ldr	r5, [r4, #4]
 80140d4:	60a5      	str	r5, [r4, #8]
 80140d6:	2d00      	cmp	r5, #0
 80140d8:	bfa2      	ittt	ge
 80140da:	6821      	ldrge	r1, [r4, #0]
 80140dc:	f021 0104 	bicge.w	r1, r1, #4
 80140e0:	6021      	strge	r1, [r4, #0]
 80140e2:	b90e      	cbnz	r6, 80140e8 <_printf_i+0x114>
 80140e4:	2d00      	cmp	r5, #0
 80140e6:	d04b      	beq.n	8014180 <_printf_i+0x1ac>
 80140e8:	4615      	mov	r5, r2
 80140ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80140ee:	fb03 6711 	mls	r7, r3, r1, r6
 80140f2:	5dc7      	ldrb	r7, [r0, r7]
 80140f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80140f8:	4637      	mov	r7, r6
 80140fa:	42bb      	cmp	r3, r7
 80140fc:	460e      	mov	r6, r1
 80140fe:	d9f4      	bls.n	80140ea <_printf_i+0x116>
 8014100:	2b08      	cmp	r3, #8
 8014102:	d10b      	bne.n	801411c <_printf_i+0x148>
 8014104:	6823      	ldr	r3, [r4, #0]
 8014106:	07de      	lsls	r6, r3, #31
 8014108:	d508      	bpl.n	801411c <_printf_i+0x148>
 801410a:	6923      	ldr	r3, [r4, #16]
 801410c:	6861      	ldr	r1, [r4, #4]
 801410e:	4299      	cmp	r1, r3
 8014110:	bfde      	ittt	le
 8014112:	2330      	movle	r3, #48	; 0x30
 8014114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014118:	f105 35ff 	addle.w	r5, r5, #4294967295
 801411c:	1b52      	subs	r2, r2, r5
 801411e:	6122      	str	r2, [r4, #16]
 8014120:	f8cd a000 	str.w	sl, [sp]
 8014124:	464b      	mov	r3, r9
 8014126:	aa03      	add	r2, sp, #12
 8014128:	4621      	mov	r1, r4
 801412a:	4640      	mov	r0, r8
 801412c:	f7ff fee4 	bl	8013ef8 <_printf_common>
 8014130:	3001      	adds	r0, #1
 8014132:	d14a      	bne.n	80141ca <_printf_i+0x1f6>
 8014134:	f04f 30ff 	mov.w	r0, #4294967295
 8014138:	b004      	add	sp, #16
 801413a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801413e:	6823      	ldr	r3, [r4, #0]
 8014140:	f043 0320 	orr.w	r3, r3, #32
 8014144:	6023      	str	r3, [r4, #0]
 8014146:	4833      	ldr	r0, [pc, #204]	; (8014214 <_printf_i+0x240>)
 8014148:	2778      	movs	r7, #120	; 0x78
 801414a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	6829      	ldr	r1, [r5, #0]
 8014152:	061f      	lsls	r7, r3, #24
 8014154:	f851 6b04 	ldr.w	r6, [r1], #4
 8014158:	d402      	bmi.n	8014160 <_printf_i+0x18c>
 801415a:	065f      	lsls	r7, r3, #25
 801415c:	bf48      	it	mi
 801415e:	b2b6      	uxthmi	r6, r6
 8014160:	07df      	lsls	r7, r3, #31
 8014162:	bf48      	it	mi
 8014164:	f043 0320 	orrmi.w	r3, r3, #32
 8014168:	6029      	str	r1, [r5, #0]
 801416a:	bf48      	it	mi
 801416c:	6023      	strmi	r3, [r4, #0]
 801416e:	b91e      	cbnz	r6, 8014178 <_printf_i+0x1a4>
 8014170:	6823      	ldr	r3, [r4, #0]
 8014172:	f023 0320 	bic.w	r3, r3, #32
 8014176:	6023      	str	r3, [r4, #0]
 8014178:	2310      	movs	r3, #16
 801417a:	e7a7      	b.n	80140cc <_printf_i+0xf8>
 801417c:	4824      	ldr	r0, [pc, #144]	; (8014210 <_printf_i+0x23c>)
 801417e:	e7e4      	b.n	801414a <_printf_i+0x176>
 8014180:	4615      	mov	r5, r2
 8014182:	e7bd      	b.n	8014100 <_printf_i+0x12c>
 8014184:	682b      	ldr	r3, [r5, #0]
 8014186:	6826      	ldr	r6, [r4, #0]
 8014188:	6961      	ldr	r1, [r4, #20]
 801418a:	1d18      	adds	r0, r3, #4
 801418c:	6028      	str	r0, [r5, #0]
 801418e:	0635      	lsls	r5, r6, #24
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	d501      	bpl.n	8014198 <_printf_i+0x1c4>
 8014194:	6019      	str	r1, [r3, #0]
 8014196:	e002      	b.n	801419e <_printf_i+0x1ca>
 8014198:	0670      	lsls	r0, r6, #25
 801419a:	d5fb      	bpl.n	8014194 <_printf_i+0x1c0>
 801419c:	8019      	strh	r1, [r3, #0]
 801419e:	2300      	movs	r3, #0
 80141a0:	6123      	str	r3, [r4, #16]
 80141a2:	4615      	mov	r5, r2
 80141a4:	e7bc      	b.n	8014120 <_printf_i+0x14c>
 80141a6:	682b      	ldr	r3, [r5, #0]
 80141a8:	1d1a      	adds	r2, r3, #4
 80141aa:	602a      	str	r2, [r5, #0]
 80141ac:	681d      	ldr	r5, [r3, #0]
 80141ae:	6862      	ldr	r2, [r4, #4]
 80141b0:	2100      	movs	r1, #0
 80141b2:	4628      	mov	r0, r5
 80141b4:	f7ec f80c 	bl	80001d0 <memchr>
 80141b8:	b108      	cbz	r0, 80141be <_printf_i+0x1ea>
 80141ba:	1b40      	subs	r0, r0, r5
 80141bc:	6060      	str	r0, [r4, #4]
 80141be:	6863      	ldr	r3, [r4, #4]
 80141c0:	6123      	str	r3, [r4, #16]
 80141c2:	2300      	movs	r3, #0
 80141c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141c8:	e7aa      	b.n	8014120 <_printf_i+0x14c>
 80141ca:	6923      	ldr	r3, [r4, #16]
 80141cc:	462a      	mov	r2, r5
 80141ce:	4649      	mov	r1, r9
 80141d0:	4640      	mov	r0, r8
 80141d2:	47d0      	blx	sl
 80141d4:	3001      	adds	r0, #1
 80141d6:	d0ad      	beq.n	8014134 <_printf_i+0x160>
 80141d8:	6823      	ldr	r3, [r4, #0]
 80141da:	079b      	lsls	r3, r3, #30
 80141dc:	d413      	bmi.n	8014206 <_printf_i+0x232>
 80141de:	68e0      	ldr	r0, [r4, #12]
 80141e0:	9b03      	ldr	r3, [sp, #12]
 80141e2:	4298      	cmp	r0, r3
 80141e4:	bfb8      	it	lt
 80141e6:	4618      	movlt	r0, r3
 80141e8:	e7a6      	b.n	8014138 <_printf_i+0x164>
 80141ea:	2301      	movs	r3, #1
 80141ec:	4632      	mov	r2, r6
 80141ee:	4649      	mov	r1, r9
 80141f0:	4640      	mov	r0, r8
 80141f2:	47d0      	blx	sl
 80141f4:	3001      	adds	r0, #1
 80141f6:	d09d      	beq.n	8014134 <_printf_i+0x160>
 80141f8:	3501      	adds	r5, #1
 80141fa:	68e3      	ldr	r3, [r4, #12]
 80141fc:	9903      	ldr	r1, [sp, #12]
 80141fe:	1a5b      	subs	r3, r3, r1
 8014200:	42ab      	cmp	r3, r5
 8014202:	dcf2      	bgt.n	80141ea <_printf_i+0x216>
 8014204:	e7eb      	b.n	80141de <_printf_i+0x20a>
 8014206:	2500      	movs	r5, #0
 8014208:	f104 0619 	add.w	r6, r4, #25
 801420c:	e7f5      	b.n	80141fa <_printf_i+0x226>
 801420e:	bf00      	nop
 8014210:	0801a08e 	.word	0x0801a08e
 8014214:	0801a09f 	.word	0x0801a09f

08014218 <_scanf_float>:
 8014218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421c:	b087      	sub	sp, #28
 801421e:	4617      	mov	r7, r2
 8014220:	9303      	str	r3, [sp, #12]
 8014222:	688b      	ldr	r3, [r1, #8]
 8014224:	1e5a      	subs	r2, r3, #1
 8014226:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801422a:	bf83      	ittte	hi
 801422c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014230:	195b      	addhi	r3, r3, r5
 8014232:	9302      	strhi	r3, [sp, #8]
 8014234:	2300      	movls	r3, #0
 8014236:	bf86      	itte	hi
 8014238:	f240 135d 	movwhi	r3, #349	; 0x15d
 801423c:	608b      	strhi	r3, [r1, #8]
 801423e:	9302      	strls	r3, [sp, #8]
 8014240:	680b      	ldr	r3, [r1, #0]
 8014242:	468b      	mov	fp, r1
 8014244:	2500      	movs	r5, #0
 8014246:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801424a:	f84b 3b1c 	str.w	r3, [fp], #28
 801424e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014252:	4680      	mov	r8, r0
 8014254:	460c      	mov	r4, r1
 8014256:	465e      	mov	r6, fp
 8014258:	46aa      	mov	sl, r5
 801425a:	46a9      	mov	r9, r5
 801425c:	9501      	str	r5, [sp, #4]
 801425e:	68a2      	ldr	r2, [r4, #8]
 8014260:	b152      	cbz	r2, 8014278 <_scanf_float+0x60>
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	2b4e      	cmp	r3, #78	; 0x4e
 8014268:	d864      	bhi.n	8014334 <_scanf_float+0x11c>
 801426a:	2b40      	cmp	r3, #64	; 0x40
 801426c:	d83c      	bhi.n	80142e8 <_scanf_float+0xd0>
 801426e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014272:	b2c8      	uxtb	r0, r1
 8014274:	280e      	cmp	r0, #14
 8014276:	d93a      	bls.n	80142ee <_scanf_float+0xd6>
 8014278:	f1b9 0f00 	cmp.w	r9, #0
 801427c:	d003      	beq.n	8014286 <_scanf_float+0x6e>
 801427e:	6823      	ldr	r3, [r4, #0]
 8014280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014284:	6023      	str	r3, [r4, #0]
 8014286:	f10a 3aff 	add.w	sl, sl, #4294967295
 801428a:	f1ba 0f01 	cmp.w	sl, #1
 801428e:	f200 8113 	bhi.w	80144b8 <_scanf_float+0x2a0>
 8014292:	455e      	cmp	r6, fp
 8014294:	f200 8105 	bhi.w	80144a2 <_scanf_float+0x28a>
 8014298:	2501      	movs	r5, #1
 801429a:	4628      	mov	r0, r5
 801429c:	b007      	add	sp, #28
 801429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80142a6:	2a0d      	cmp	r2, #13
 80142a8:	d8e6      	bhi.n	8014278 <_scanf_float+0x60>
 80142aa:	a101      	add	r1, pc, #4	; (adr r1, 80142b0 <_scanf_float+0x98>)
 80142ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80142b0:	080143ef 	.word	0x080143ef
 80142b4:	08014279 	.word	0x08014279
 80142b8:	08014279 	.word	0x08014279
 80142bc:	08014279 	.word	0x08014279
 80142c0:	0801444f 	.word	0x0801444f
 80142c4:	08014427 	.word	0x08014427
 80142c8:	08014279 	.word	0x08014279
 80142cc:	08014279 	.word	0x08014279
 80142d0:	080143fd 	.word	0x080143fd
 80142d4:	08014279 	.word	0x08014279
 80142d8:	08014279 	.word	0x08014279
 80142dc:	08014279 	.word	0x08014279
 80142e0:	08014279 	.word	0x08014279
 80142e4:	080143b5 	.word	0x080143b5
 80142e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80142ec:	e7db      	b.n	80142a6 <_scanf_float+0x8e>
 80142ee:	290e      	cmp	r1, #14
 80142f0:	d8c2      	bhi.n	8014278 <_scanf_float+0x60>
 80142f2:	a001      	add	r0, pc, #4	; (adr r0, 80142f8 <_scanf_float+0xe0>)
 80142f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80142f8:	080143a7 	.word	0x080143a7
 80142fc:	08014279 	.word	0x08014279
 8014300:	080143a7 	.word	0x080143a7
 8014304:	0801443b 	.word	0x0801443b
 8014308:	08014279 	.word	0x08014279
 801430c:	08014355 	.word	0x08014355
 8014310:	08014391 	.word	0x08014391
 8014314:	08014391 	.word	0x08014391
 8014318:	08014391 	.word	0x08014391
 801431c:	08014391 	.word	0x08014391
 8014320:	08014391 	.word	0x08014391
 8014324:	08014391 	.word	0x08014391
 8014328:	08014391 	.word	0x08014391
 801432c:	08014391 	.word	0x08014391
 8014330:	08014391 	.word	0x08014391
 8014334:	2b6e      	cmp	r3, #110	; 0x6e
 8014336:	d809      	bhi.n	801434c <_scanf_float+0x134>
 8014338:	2b60      	cmp	r3, #96	; 0x60
 801433a:	d8b2      	bhi.n	80142a2 <_scanf_float+0x8a>
 801433c:	2b54      	cmp	r3, #84	; 0x54
 801433e:	d077      	beq.n	8014430 <_scanf_float+0x218>
 8014340:	2b59      	cmp	r3, #89	; 0x59
 8014342:	d199      	bne.n	8014278 <_scanf_float+0x60>
 8014344:	2d07      	cmp	r5, #7
 8014346:	d197      	bne.n	8014278 <_scanf_float+0x60>
 8014348:	2508      	movs	r5, #8
 801434a:	e029      	b.n	80143a0 <_scanf_float+0x188>
 801434c:	2b74      	cmp	r3, #116	; 0x74
 801434e:	d06f      	beq.n	8014430 <_scanf_float+0x218>
 8014350:	2b79      	cmp	r3, #121	; 0x79
 8014352:	e7f6      	b.n	8014342 <_scanf_float+0x12a>
 8014354:	6821      	ldr	r1, [r4, #0]
 8014356:	05c8      	lsls	r0, r1, #23
 8014358:	d51a      	bpl.n	8014390 <_scanf_float+0x178>
 801435a:	9b02      	ldr	r3, [sp, #8]
 801435c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014360:	6021      	str	r1, [r4, #0]
 8014362:	f109 0901 	add.w	r9, r9, #1
 8014366:	b11b      	cbz	r3, 8014370 <_scanf_float+0x158>
 8014368:	3b01      	subs	r3, #1
 801436a:	3201      	adds	r2, #1
 801436c:	9302      	str	r3, [sp, #8]
 801436e:	60a2      	str	r2, [r4, #8]
 8014370:	68a3      	ldr	r3, [r4, #8]
 8014372:	3b01      	subs	r3, #1
 8014374:	60a3      	str	r3, [r4, #8]
 8014376:	6923      	ldr	r3, [r4, #16]
 8014378:	3301      	adds	r3, #1
 801437a:	6123      	str	r3, [r4, #16]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	3b01      	subs	r3, #1
 8014380:	2b00      	cmp	r3, #0
 8014382:	607b      	str	r3, [r7, #4]
 8014384:	f340 8084 	ble.w	8014490 <_scanf_float+0x278>
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	3301      	adds	r3, #1
 801438c:	603b      	str	r3, [r7, #0]
 801438e:	e766      	b.n	801425e <_scanf_float+0x46>
 8014390:	eb1a 0f05 	cmn.w	sl, r5
 8014394:	f47f af70 	bne.w	8014278 <_scanf_float+0x60>
 8014398:	6822      	ldr	r2, [r4, #0]
 801439a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801439e:	6022      	str	r2, [r4, #0]
 80143a0:	f806 3b01 	strb.w	r3, [r6], #1
 80143a4:	e7e4      	b.n	8014370 <_scanf_float+0x158>
 80143a6:	6822      	ldr	r2, [r4, #0]
 80143a8:	0610      	lsls	r0, r2, #24
 80143aa:	f57f af65 	bpl.w	8014278 <_scanf_float+0x60>
 80143ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80143b2:	e7f4      	b.n	801439e <_scanf_float+0x186>
 80143b4:	f1ba 0f00 	cmp.w	sl, #0
 80143b8:	d10e      	bne.n	80143d8 <_scanf_float+0x1c0>
 80143ba:	f1b9 0f00 	cmp.w	r9, #0
 80143be:	d10e      	bne.n	80143de <_scanf_float+0x1c6>
 80143c0:	6822      	ldr	r2, [r4, #0]
 80143c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80143c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80143ca:	d108      	bne.n	80143de <_scanf_float+0x1c6>
 80143cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80143d0:	6022      	str	r2, [r4, #0]
 80143d2:	f04f 0a01 	mov.w	sl, #1
 80143d6:	e7e3      	b.n	80143a0 <_scanf_float+0x188>
 80143d8:	f1ba 0f02 	cmp.w	sl, #2
 80143dc:	d055      	beq.n	801448a <_scanf_float+0x272>
 80143de:	2d01      	cmp	r5, #1
 80143e0:	d002      	beq.n	80143e8 <_scanf_float+0x1d0>
 80143e2:	2d04      	cmp	r5, #4
 80143e4:	f47f af48 	bne.w	8014278 <_scanf_float+0x60>
 80143e8:	3501      	adds	r5, #1
 80143ea:	b2ed      	uxtb	r5, r5
 80143ec:	e7d8      	b.n	80143a0 <_scanf_float+0x188>
 80143ee:	f1ba 0f01 	cmp.w	sl, #1
 80143f2:	f47f af41 	bne.w	8014278 <_scanf_float+0x60>
 80143f6:	f04f 0a02 	mov.w	sl, #2
 80143fa:	e7d1      	b.n	80143a0 <_scanf_float+0x188>
 80143fc:	b97d      	cbnz	r5, 801441e <_scanf_float+0x206>
 80143fe:	f1b9 0f00 	cmp.w	r9, #0
 8014402:	f47f af3c 	bne.w	801427e <_scanf_float+0x66>
 8014406:	6822      	ldr	r2, [r4, #0]
 8014408:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801440c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014410:	f47f af39 	bne.w	8014286 <_scanf_float+0x6e>
 8014414:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014418:	6022      	str	r2, [r4, #0]
 801441a:	2501      	movs	r5, #1
 801441c:	e7c0      	b.n	80143a0 <_scanf_float+0x188>
 801441e:	2d03      	cmp	r5, #3
 8014420:	d0e2      	beq.n	80143e8 <_scanf_float+0x1d0>
 8014422:	2d05      	cmp	r5, #5
 8014424:	e7de      	b.n	80143e4 <_scanf_float+0x1cc>
 8014426:	2d02      	cmp	r5, #2
 8014428:	f47f af26 	bne.w	8014278 <_scanf_float+0x60>
 801442c:	2503      	movs	r5, #3
 801442e:	e7b7      	b.n	80143a0 <_scanf_float+0x188>
 8014430:	2d06      	cmp	r5, #6
 8014432:	f47f af21 	bne.w	8014278 <_scanf_float+0x60>
 8014436:	2507      	movs	r5, #7
 8014438:	e7b2      	b.n	80143a0 <_scanf_float+0x188>
 801443a:	6822      	ldr	r2, [r4, #0]
 801443c:	0591      	lsls	r1, r2, #22
 801443e:	f57f af1b 	bpl.w	8014278 <_scanf_float+0x60>
 8014442:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8014446:	6022      	str	r2, [r4, #0]
 8014448:	f8cd 9004 	str.w	r9, [sp, #4]
 801444c:	e7a8      	b.n	80143a0 <_scanf_float+0x188>
 801444e:	6822      	ldr	r2, [r4, #0]
 8014450:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014454:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014458:	d006      	beq.n	8014468 <_scanf_float+0x250>
 801445a:	0550      	lsls	r0, r2, #21
 801445c:	f57f af0c 	bpl.w	8014278 <_scanf_float+0x60>
 8014460:	f1b9 0f00 	cmp.w	r9, #0
 8014464:	f43f af0f 	beq.w	8014286 <_scanf_float+0x6e>
 8014468:	0591      	lsls	r1, r2, #22
 801446a:	bf58      	it	pl
 801446c:	9901      	ldrpl	r1, [sp, #4]
 801446e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014472:	bf58      	it	pl
 8014474:	eba9 0101 	subpl.w	r1, r9, r1
 8014478:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801447c:	bf58      	it	pl
 801447e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014482:	6022      	str	r2, [r4, #0]
 8014484:	f04f 0900 	mov.w	r9, #0
 8014488:	e78a      	b.n	80143a0 <_scanf_float+0x188>
 801448a:	f04f 0a03 	mov.w	sl, #3
 801448e:	e787      	b.n	80143a0 <_scanf_float+0x188>
 8014490:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014494:	4639      	mov	r1, r7
 8014496:	4640      	mov	r0, r8
 8014498:	4798      	blx	r3
 801449a:	2800      	cmp	r0, #0
 801449c:	f43f aedf 	beq.w	801425e <_scanf_float+0x46>
 80144a0:	e6ea      	b.n	8014278 <_scanf_float+0x60>
 80144a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144aa:	463a      	mov	r2, r7
 80144ac:	4640      	mov	r0, r8
 80144ae:	4798      	blx	r3
 80144b0:	6923      	ldr	r3, [r4, #16]
 80144b2:	3b01      	subs	r3, #1
 80144b4:	6123      	str	r3, [r4, #16]
 80144b6:	e6ec      	b.n	8014292 <_scanf_float+0x7a>
 80144b8:	1e6b      	subs	r3, r5, #1
 80144ba:	2b06      	cmp	r3, #6
 80144bc:	d825      	bhi.n	801450a <_scanf_float+0x2f2>
 80144be:	2d02      	cmp	r5, #2
 80144c0:	d836      	bhi.n	8014530 <_scanf_float+0x318>
 80144c2:	455e      	cmp	r6, fp
 80144c4:	f67f aee8 	bls.w	8014298 <_scanf_float+0x80>
 80144c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144d0:	463a      	mov	r2, r7
 80144d2:	4640      	mov	r0, r8
 80144d4:	4798      	blx	r3
 80144d6:	6923      	ldr	r3, [r4, #16]
 80144d8:	3b01      	subs	r3, #1
 80144da:	6123      	str	r3, [r4, #16]
 80144dc:	e7f1      	b.n	80144c2 <_scanf_float+0x2aa>
 80144de:	9802      	ldr	r0, [sp, #8]
 80144e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80144e8:	9002      	str	r0, [sp, #8]
 80144ea:	463a      	mov	r2, r7
 80144ec:	4640      	mov	r0, r8
 80144ee:	4798      	blx	r3
 80144f0:	6923      	ldr	r3, [r4, #16]
 80144f2:	3b01      	subs	r3, #1
 80144f4:	6123      	str	r3, [r4, #16]
 80144f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144fa:	fa5f fa8a 	uxtb.w	sl, sl
 80144fe:	f1ba 0f02 	cmp.w	sl, #2
 8014502:	d1ec      	bne.n	80144de <_scanf_float+0x2c6>
 8014504:	3d03      	subs	r5, #3
 8014506:	b2ed      	uxtb	r5, r5
 8014508:	1b76      	subs	r6, r6, r5
 801450a:	6823      	ldr	r3, [r4, #0]
 801450c:	05da      	lsls	r2, r3, #23
 801450e:	d52f      	bpl.n	8014570 <_scanf_float+0x358>
 8014510:	055b      	lsls	r3, r3, #21
 8014512:	d510      	bpl.n	8014536 <_scanf_float+0x31e>
 8014514:	455e      	cmp	r6, fp
 8014516:	f67f aebf 	bls.w	8014298 <_scanf_float+0x80>
 801451a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801451e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014522:	463a      	mov	r2, r7
 8014524:	4640      	mov	r0, r8
 8014526:	4798      	blx	r3
 8014528:	6923      	ldr	r3, [r4, #16]
 801452a:	3b01      	subs	r3, #1
 801452c:	6123      	str	r3, [r4, #16]
 801452e:	e7f1      	b.n	8014514 <_scanf_float+0x2fc>
 8014530:	46aa      	mov	sl, r5
 8014532:	9602      	str	r6, [sp, #8]
 8014534:	e7df      	b.n	80144f6 <_scanf_float+0x2de>
 8014536:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801453a:	6923      	ldr	r3, [r4, #16]
 801453c:	2965      	cmp	r1, #101	; 0x65
 801453e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014542:	f106 35ff 	add.w	r5, r6, #4294967295
 8014546:	6123      	str	r3, [r4, #16]
 8014548:	d00c      	beq.n	8014564 <_scanf_float+0x34c>
 801454a:	2945      	cmp	r1, #69	; 0x45
 801454c:	d00a      	beq.n	8014564 <_scanf_float+0x34c>
 801454e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014552:	463a      	mov	r2, r7
 8014554:	4640      	mov	r0, r8
 8014556:	4798      	blx	r3
 8014558:	6923      	ldr	r3, [r4, #16]
 801455a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801455e:	3b01      	subs	r3, #1
 8014560:	1eb5      	subs	r5, r6, #2
 8014562:	6123      	str	r3, [r4, #16]
 8014564:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014568:	463a      	mov	r2, r7
 801456a:	4640      	mov	r0, r8
 801456c:	4798      	blx	r3
 801456e:	462e      	mov	r6, r5
 8014570:	6825      	ldr	r5, [r4, #0]
 8014572:	f015 0510 	ands.w	r5, r5, #16
 8014576:	d158      	bne.n	801462a <_scanf_float+0x412>
 8014578:	7035      	strb	r5, [r6, #0]
 801457a:	6823      	ldr	r3, [r4, #0]
 801457c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014584:	d11c      	bne.n	80145c0 <_scanf_float+0x3a8>
 8014586:	9b01      	ldr	r3, [sp, #4]
 8014588:	454b      	cmp	r3, r9
 801458a:	eba3 0209 	sub.w	r2, r3, r9
 801458e:	d124      	bne.n	80145da <_scanf_float+0x3c2>
 8014590:	2200      	movs	r2, #0
 8014592:	4659      	mov	r1, fp
 8014594:	4640      	mov	r0, r8
 8014596:	f002 fe87 	bl	80172a8 <_strtod_r>
 801459a:	9b03      	ldr	r3, [sp, #12]
 801459c:	6821      	ldr	r1, [r4, #0]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f011 0f02 	tst.w	r1, #2
 80145a4:	ec57 6b10 	vmov	r6, r7, d0
 80145a8:	f103 0204 	add.w	r2, r3, #4
 80145ac:	d020      	beq.n	80145f0 <_scanf_float+0x3d8>
 80145ae:	9903      	ldr	r1, [sp, #12]
 80145b0:	600a      	str	r2, [r1, #0]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	e9c3 6700 	strd	r6, r7, [r3]
 80145b8:	68e3      	ldr	r3, [r4, #12]
 80145ba:	3301      	adds	r3, #1
 80145bc:	60e3      	str	r3, [r4, #12]
 80145be:	e66c      	b.n	801429a <_scanf_float+0x82>
 80145c0:	9b04      	ldr	r3, [sp, #16]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d0e4      	beq.n	8014590 <_scanf_float+0x378>
 80145c6:	9905      	ldr	r1, [sp, #20]
 80145c8:	230a      	movs	r3, #10
 80145ca:	462a      	mov	r2, r5
 80145cc:	3101      	adds	r1, #1
 80145ce:	4640      	mov	r0, r8
 80145d0:	f7ff f9b0 	bl	8013934 <_strtol_r>
 80145d4:	9b04      	ldr	r3, [sp, #16]
 80145d6:	9e05      	ldr	r6, [sp, #20]
 80145d8:	1ac2      	subs	r2, r0, r3
 80145da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80145de:	429e      	cmp	r6, r3
 80145e0:	bf28      	it	cs
 80145e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80145e6:	4912      	ldr	r1, [pc, #72]	; (8014630 <_scanf_float+0x418>)
 80145e8:	4630      	mov	r0, r6
 80145ea:	f000 f99b 	bl	8014924 <siprintf>
 80145ee:	e7cf      	b.n	8014590 <_scanf_float+0x378>
 80145f0:	f011 0f04 	tst.w	r1, #4
 80145f4:	9903      	ldr	r1, [sp, #12]
 80145f6:	600a      	str	r2, [r1, #0]
 80145f8:	d1db      	bne.n	80145b2 <_scanf_float+0x39a>
 80145fa:	f8d3 8000 	ldr.w	r8, [r3]
 80145fe:	ee10 2a10 	vmov	r2, s0
 8014602:	ee10 0a10 	vmov	r0, s0
 8014606:	463b      	mov	r3, r7
 8014608:	4639      	mov	r1, r7
 801460a:	f7ec fa8f 	bl	8000b2c <__aeabi_dcmpun>
 801460e:	b128      	cbz	r0, 801461c <_scanf_float+0x404>
 8014610:	4808      	ldr	r0, [pc, #32]	; (8014634 <_scanf_float+0x41c>)
 8014612:	f000 fc07 	bl	8014e24 <nanf>
 8014616:	ed88 0a00 	vstr	s0, [r8]
 801461a:	e7cd      	b.n	80145b8 <_scanf_float+0x3a0>
 801461c:	4630      	mov	r0, r6
 801461e:	4639      	mov	r1, r7
 8014620:	f7ec fae2 	bl	8000be8 <__aeabi_d2f>
 8014624:	f8c8 0000 	str.w	r0, [r8]
 8014628:	e7c6      	b.n	80145b8 <_scanf_float+0x3a0>
 801462a:	2500      	movs	r5, #0
 801462c:	e635      	b.n	801429a <_scanf_float+0x82>
 801462e:	bf00      	nop
 8014630:	0801a0b0 	.word	0x0801a0b0
 8014634:	08019f7a 	.word	0x08019f7a

08014638 <std>:
 8014638:	2300      	movs	r3, #0
 801463a:	b510      	push	{r4, lr}
 801463c:	4604      	mov	r4, r0
 801463e:	e9c0 3300 	strd	r3, r3, [r0]
 8014642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014646:	6083      	str	r3, [r0, #8]
 8014648:	8181      	strh	r1, [r0, #12]
 801464a:	6643      	str	r3, [r0, #100]	; 0x64
 801464c:	81c2      	strh	r2, [r0, #14]
 801464e:	6183      	str	r3, [r0, #24]
 8014650:	4619      	mov	r1, r3
 8014652:	2208      	movs	r2, #8
 8014654:	305c      	adds	r0, #92	; 0x5c
 8014656:	f000 fa87 	bl	8014b68 <memset>
 801465a:	4b0d      	ldr	r3, [pc, #52]	; (8014690 <std+0x58>)
 801465c:	6263      	str	r3, [r4, #36]	; 0x24
 801465e:	4b0d      	ldr	r3, [pc, #52]	; (8014694 <std+0x5c>)
 8014660:	62a3      	str	r3, [r4, #40]	; 0x28
 8014662:	4b0d      	ldr	r3, [pc, #52]	; (8014698 <std+0x60>)
 8014664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014666:	4b0d      	ldr	r3, [pc, #52]	; (801469c <std+0x64>)
 8014668:	6323      	str	r3, [r4, #48]	; 0x30
 801466a:	4b0d      	ldr	r3, [pc, #52]	; (80146a0 <std+0x68>)
 801466c:	6224      	str	r4, [r4, #32]
 801466e:	429c      	cmp	r4, r3
 8014670:	d006      	beq.n	8014680 <std+0x48>
 8014672:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014676:	4294      	cmp	r4, r2
 8014678:	d002      	beq.n	8014680 <std+0x48>
 801467a:	33d0      	adds	r3, #208	; 0xd0
 801467c:	429c      	cmp	r4, r3
 801467e:	d105      	bne.n	801468c <std+0x54>
 8014680:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014688:	f000 bbb2 	b.w	8014df0 <__retarget_lock_init_recursive>
 801468c:	bd10      	pop	{r4, pc}
 801468e:	bf00      	nop
 8014690:	08014965 	.word	0x08014965
 8014694:	08014987 	.word	0x08014987
 8014698:	080149bf 	.word	0x080149bf
 801469c:	080149e3 	.word	0x080149e3
 80146a0:	20004ea0 	.word	0x20004ea0

080146a4 <stdio_exit_handler>:
 80146a4:	4a02      	ldr	r2, [pc, #8]	; (80146b0 <stdio_exit_handler+0xc>)
 80146a6:	4903      	ldr	r1, [pc, #12]	; (80146b4 <stdio_exit_handler+0x10>)
 80146a8:	4803      	ldr	r0, [pc, #12]	; (80146b8 <stdio_exit_handler+0x14>)
 80146aa:	f000 b87b 	b.w	80147a4 <_fwalk_sglue>
 80146ae:	bf00      	nop
 80146b0:	20000118 	.word	0x20000118
 80146b4:	080178f9 	.word	0x080178f9
 80146b8:	20000124 	.word	0x20000124

080146bc <cleanup_stdio>:
 80146bc:	6841      	ldr	r1, [r0, #4]
 80146be:	4b0c      	ldr	r3, [pc, #48]	; (80146f0 <cleanup_stdio+0x34>)
 80146c0:	4299      	cmp	r1, r3
 80146c2:	b510      	push	{r4, lr}
 80146c4:	4604      	mov	r4, r0
 80146c6:	d001      	beq.n	80146cc <cleanup_stdio+0x10>
 80146c8:	f003 f916 	bl	80178f8 <_fflush_r>
 80146cc:	68a1      	ldr	r1, [r4, #8]
 80146ce:	4b09      	ldr	r3, [pc, #36]	; (80146f4 <cleanup_stdio+0x38>)
 80146d0:	4299      	cmp	r1, r3
 80146d2:	d002      	beq.n	80146da <cleanup_stdio+0x1e>
 80146d4:	4620      	mov	r0, r4
 80146d6:	f003 f90f 	bl	80178f8 <_fflush_r>
 80146da:	68e1      	ldr	r1, [r4, #12]
 80146dc:	4b06      	ldr	r3, [pc, #24]	; (80146f8 <cleanup_stdio+0x3c>)
 80146de:	4299      	cmp	r1, r3
 80146e0:	d004      	beq.n	80146ec <cleanup_stdio+0x30>
 80146e2:	4620      	mov	r0, r4
 80146e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146e8:	f003 b906 	b.w	80178f8 <_fflush_r>
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	bf00      	nop
 80146f0:	20004ea0 	.word	0x20004ea0
 80146f4:	20004f08 	.word	0x20004f08
 80146f8:	20004f70 	.word	0x20004f70

080146fc <global_stdio_init.part.0>:
 80146fc:	b510      	push	{r4, lr}
 80146fe:	4b0b      	ldr	r3, [pc, #44]	; (801472c <global_stdio_init.part.0+0x30>)
 8014700:	4c0b      	ldr	r4, [pc, #44]	; (8014730 <global_stdio_init.part.0+0x34>)
 8014702:	4a0c      	ldr	r2, [pc, #48]	; (8014734 <global_stdio_init.part.0+0x38>)
 8014704:	601a      	str	r2, [r3, #0]
 8014706:	4620      	mov	r0, r4
 8014708:	2200      	movs	r2, #0
 801470a:	2104      	movs	r1, #4
 801470c:	f7ff ff94 	bl	8014638 <std>
 8014710:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014714:	2201      	movs	r2, #1
 8014716:	2109      	movs	r1, #9
 8014718:	f7ff ff8e 	bl	8014638 <std>
 801471c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014720:	2202      	movs	r2, #2
 8014722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014726:	2112      	movs	r1, #18
 8014728:	f7ff bf86 	b.w	8014638 <std>
 801472c:	20004fd8 	.word	0x20004fd8
 8014730:	20004ea0 	.word	0x20004ea0
 8014734:	080146a5 	.word	0x080146a5

08014738 <__sfp_lock_acquire>:
 8014738:	4801      	ldr	r0, [pc, #4]	; (8014740 <__sfp_lock_acquire+0x8>)
 801473a:	f000 bb5a 	b.w	8014df2 <__retarget_lock_acquire_recursive>
 801473e:	bf00      	nop
 8014740:	20004fe1 	.word	0x20004fe1

08014744 <__sfp_lock_release>:
 8014744:	4801      	ldr	r0, [pc, #4]	; (801474c <__sfp_lock_release+0x8>)
 8014746:	f000 bb55 	b.w	8014df4 <__retarget_lock_release_recursive>
 801474a:	bf00      	nop
 801474c:	20004fe1 	.word	0x20004fe1

08014750 <__sinit>:
 8014750:	b510      	push	{r4, lr}
 8014752:	4604      	mov	r4, r0
 8014754:	f7ff fff0 	bl	8014738 <__sfp_lock_acquire>
 8014758:	6a23      	ldr	r3, [r4, #32]
 801475a:	b11b      	cbz	r3, 8014764 <__sinit+0x14>
 801475c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014760:	f7ff bff0 	b.w	8014744 <__sfp_lock_release>
 8014764:	4b04      	ldr	r3, [pc, #16]	; (8014778 <__sinit+0x28>)
 8014766:	6223      	str	r3, [r4, #32]
 8014768:	4b04      	ldr	r3, [pc, #16]	; (801477c <__sinit+0x2c>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d1f5      	bne.n	801475c <__sinit+0xc>
 8014770:	f7ff ffc4 	bl	80146fc <global_stdio_init.part.0>
 8014774:	e7f2      	b.n	801475c <__sinit+0xc>
 8014776:	bf00      	nop
 8014778:	080146bd 	.word	0x080146bd
 801477c:	20004fd8 	.word	0x20004fd8

08014780 <fiprintf>:
 8014780:	b40e      	push	{r1, r2, r3}
 8014782:	b503      	push	{r0, r1, lr}
 8014784:	4601      	mov	r1, r0
 8014786:	ab03      	add	r3, sp, #12
 8014788:	4805      	ldr	r0, [pc, #20]	; (80147a0 <fiprintf+0x20>)
 801478a:	f853 2b04 	ldr.w	r2, [r3], #4
 801478e:	6800      	ldr	r0, [r0, #0]
 8014790:	9301      	str	r3, [sp, #4]
 8014792:	f002 ff11 	bl	80175b8 <_vfiprintf_r>
 8014796:	b002      	add	sp, #8
 8014798:	f85d eb04 	ldr.w	lr, [sp], #4
 801479c:	b003      	add	sp, #12
 801479e:	4770      	bx	lr
 80147a0:	20000170 	.word	0x20000170

080147a4 <_fwalk_sglue>:
 80147a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147a8:	4607      	mov	r7, r0
 80147aa:	4688      	mov	r8, r1
 80147ac:	4614      	mov	r4, r2
 80147ae:	2600      	movs	r6, #0
 80147b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147b4:	f1b9 0901 	subs.w	r9, r9, #1
 80147b8:	d505      	bpl.n	80147c6 <_fwalk_sglue+0x22>
 80147ba:	6824      	ldr	r4, [r4, #0]
 80147bc:	2c00      	cmp	r4, #0
 80147be:	d1f7      	bne.n	80147b0 <_fwalk_sglue+0xc>
 80147c0:	4630      	mov	r0, r6
 80147c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147c6:	89ab      	ldrh	r3, [r5, #12]
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d907      	bls.n	80147dc <_fwalk_sglue+0x38>
 80147cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147d0:	3301      	adds	r3, #1
 80147d2:	d003      	beq.n	80147dc <_fwalk_sglue+0x38>
 80147d4:	4629      	mov	r1, r5
 80147d6:	4638      	mov	r0, r7
 80147d8:	47c0      	blx	r8
 80147da:	4306      	orrs	r6, r0
 80147dc:	3568      	adds	r5, #104	; 0x68
 80147de:	e7e9      	b.n	80147b4 <_fwalk_sglue+0x10>

080147e0 <iprintf>:
 80147e0:	b40f      	push	{r0, r1, r2, r3}
 80147e2:	b507      	push	{r0, r1, r2, lr}
 80147e4:	4906      	ldr	r1, [pc, #24]	; (8014800 <iprintf+0x20>)
 80147e6:	ab04      	add	r3, sp, #16
 80147e8:	6808      	ldr	r0, [r1, #0]
 80147ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80147ee:	6881      	ldr	r1, [r0, #8]
 80147f0:	9301      	str	r3, [sp, #4]
 80147f2:	f002 fee1 	bl	80175b8 <_vfiprintf_r>
 80147f6:	b003      	add	sp, #12
 80147f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80147fc:	b004      	add	sp, #16
 80147fe:	4770      	bx	lr
 8014800:	20000170 	.word	0x20000170

08014804 <_puts_r>:
 8014804:	6a03      	ldr	r3, [r0, #32]
 8014806:	b570      	push	{r4, r5, r6, lr}
 8014808:	6884      	ldr	r4, [r0, #8]
 801480a:	4605      	mov	r5, r0
 801480c:	460e      	mov	r6, r1
 801480e:	b90b      	cbnz	r3, 8014814 <_puts_r+0x10>
 8014810:	f7ff ff9e 	bl	8014750 <__sinit>
 8014814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014816:	07db      	lsls	r3, r3, #31
 8014818:	d405      	bmi.n	8014826 <_puts_r+0x22>
 801481a:	89a3      	ldrh	r3, [r4, #12]
 801481c:	0598      	lsls	r0, r3, #22
 801481e:	d402      	bmi.n	8014826 <_puts_r+0x22>
 8014820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014822:	f000 fae6 	bl	8014df2 <__retarget_lock_acquire_recursive>
 8014826:	89a3      	ldrh	r3, [r4, #12]
 8014828:	0719      	lsls	r1, r3, #28
 801482a:	d513      	bpl.n	8014854 <_puts_r+0x50>
 801482c:	6923      	ldr	r3, [r4, #16]
 801482e:	b18b      	cbz	r3, 8014854 <_puts_r+0x50>
 8014830:	3e01      	subs	r6, #1
 8014832:	68a3      	ldr	r3, [r4, #8]
 8014834:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014838:	3b01      	subs	r3, #1
 801483a:	60a3      	str	r3, [r4, #8]
 801483c:	b9e9      	cbnz	r1, 801487a <_puts_r+0x76>
 801483e:	2b00      	cmp	r3, #0
 8014840:	da2e      	bge.n	80148a0 <_puts_r+0x9c>
 8014842:	4622      	mov	r2, r4
 8014844:	210a      	movs	r1, #10
 8014846:	4628      	mov	r0, r5
 8014848:	f000 f8cf 	bl	80149ea <__swbuf_r>
 801484c:	3001      	adds	r0, #1
 801484e:	d007      	beq.n	8014860 <_puts_r+0x5c>
 8014850:	250a      	movs	r5, #10
 8014852:	e007      	b.n	8014864 <_puts_r+0x60>
 8014854:	4621      	mov	r1, r4
 8014856:	4628      	mov	r0, r5
 8014858:	f000 f904 	bl	8014a64 <__swsetup_r>
 801485c:	2800      	cmp	r0, #0
 801485e:	d0e7      	beq.n	8014830 <_puts_r+0x2c>
 8014860:	f04f 35ff 	mov.w	r5, #4294967295
 8014864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014866:	07da      	lsls	r2, r3, #31
 8014868:	d405      	bmi.n	8014876 <_puts_r+0x72>
 801486a:	89a3      	ldrh	r3, [r4, #12]
 801486c:	059b      	lsls	r3, r3, #22
 801486e:	d402      	bmi.n	8014876 <_puts_r+0x72>
 8014870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014872:	f000 fabf 	bl	8014df4 <__retarget_lock_release_recursive>
 8014876:	4628      	mov	r0, r5
 8014878:	bd70      	pop	{r4, r5, r6, pc}
 801487a:	2b00      	cmp	r3, #0
 801487c:	da04      	bge.n	8014888 <_puts_r+0x84>
 801487e:	69a2      	ldr	r2, [r4, #24]
 8014880:	429a      	cmp	r2, r3
 8014882:	dc06      	bgt.n	8014892 <_puts_r+0x8e>
 8014884:	290a      	cmp	r1, #10
 8014886:	d004      	beq.n	8014892 <_puts_r+0x8e>
 8014888:	6823      	ldr	r3, [r4, #0]
 801488a:	1c5a      	adds	r2, r3, #1
 801488c:	6022      	str	r2, [r4, #0]
 801488e:	7019      	strb	r1, [r3, #0]
 8014890:	e7cf      	b.n	8014832 <_puts_r+0x2e>
 8014892:	4622      	mov	r2, r4
 8014894:	4628      	mov	r0, r5
 8014896:	f000 f8a8 	bl	80149ea <__swbuf_r>
 801489a:	3001      	adds	r0, #1
 801489c:	d1c9      	bne.n	8014832 <_puts_r+0x2e>
 801489e:	e7df      	b.n	8014860 <_puts_r+0x5c>
 80148a0:	6823      	ldr	r3, [r4, #0]
 80148a2:	250a      	movs	r5, #10
 80148a4:	1c5a      	adds	r2, r3, #1
 80148a6:	6022      	str	r2, [r4, #0]
 80148a8:	701d      	strb	r5, [r3, #0]
 80148aa:	e7db      	b.n	8014864 <_puts_r+0x60>

080148ac <puts>:
 80148ac:	4b02      	ldr	r3, [pc, #8]	; (80148b8 <puts+0xc>)
 80148ae:	4601      	mov	r1, r0
 80148b0:	6818      	ldr	r0, [r3, #0]
 80148b2:	f7ff bfa7 	b.w	8014804 <_puts_r>
 80148b6:	bf00      	nop
 80148b8:	20000170 	.word	0x20000170

080148bc <sniprintf>:
 80148bc:	b40c      	push	{r2, r3}
 80148be:	b530      	push	{r4, r5, lr}
 80148c0:	4b17      	ldr	r3, [pc, #92]	; (8014920 <sniprintf+0x64>)
 80148c2:	1e0c      	subs	r4, r1, #0
 80148c4:	681d      	ldr	r5, [r3, #0]
 80148c6:	b09d      	sub	sp, #116	; 0x74
 80148c8:	da08      	bge.n	80148dc <sniprintf+0x20>
 80148ca:	238b      	movs	r3, #139	; 0x8b
 80148cc:	602b      	str	r3, [r5, #0]
 80148ce:	f04f 30ff 	mov.w	r0, #4294967295
 80148d2:	b01d      	add	sp, #116	; 0x74
 80148d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148d8:	b002      	add	sp, #8
 80148da:	4770      	bx	lr
 80148dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80148e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80148e4:	bf14      	ite	ne
 80148e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80148ea:	4623      	moveq	r3, r4
 80148ec:	9304      	str	r3, [sp, #16]
 80148ee:	9307      	str	r3, [sp, #28]
 80148f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148f4:	9002      	str	r0, [sp, #8]
 80148f6:	9006      	str	r0, [sp, #24]
 80148f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80148fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80148fe:	ab21      	add	r3, sp, #132	; 0x84
 8014900:	a902      	add	r1, sp, #8
 8014902:	4628      	mov	r0, r5
 8014904:	9301      	str	r3, [sp, #4]
 8014906:	f002 fd2f 	bl	8017368 <_svfiprintf_r>
 801490a:	1c43      	adds	r3, r0, #1
 801490c:	bfbc      	itt	lt
 801490e:	238b      	movlt	r3, #139	; 0x8b
 8014910:	602b      	strlt	r3, [r5, #0]
 8014912:	2c00      	cmp	r4, #0
 8014914:	d0dd      	beq.n	80148d2 <sniprintf+0x16>
 8014916:	9b02      	ldr	r3, [sp, #8]
 8014918:	2200      	movs	r2, #0
 801491a:	701a      	strb	r2, [r3, #0]
 801491c:	e7d9      	b.n	80148d2 <sniprintf+0x16>
 801491e:	bf00      	nop
 8014920:	20000170 	.word	0x20000170

08014924 <siprintf>:
 8014924:	b40e      	push	{r1, r2, r3}
 8014926:	b500      	push	{lr}
 8014928:	b09c      	sub	sp, #112	; 0x70
 801492a:	ab1d      	add	r3, sp, #116	; 0x74
 801492c:	9002      	str	r0, [sp, #8]
 801492e:	9006      	str	r0, [sp, #24]
 8014930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014934:	4809      	ldr	r0, [pc, #36]	; (801495c <siprintf+0x38>)
 8014936:	9107      	str	r1, [sp, #28]
 8014938:	9104      	str	r1, [sp, #16]
 801493a:	4909      	ldr	r1, [pc, #36]	; (8014960 <siprintf+0x3c>)
 801493c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014940:	9105      	str	r1, [sp, #20]
 8014942:	6800      	ldr	r0, [r0, #0]
 8014944:	9301      	str	r3, [sp, #4]
 8014946:	a902      	add	r1, sp, #8
 8014948:	f002 fd0e 	bl	8017368 <_svfiprintf_r>
 801494c:	9b02      	ldr	r3, [sp, #8]
 801494e:	2200      	movs	r2, #0
 8014950:	701a      	strb	r2, [r3, #0]
 8014952:	b01c      	add	sp, #112	; 0x70
 8014954:	f85d eb04 	ldr.w	lr, [sp], #4
 8014958:	b003      	add	sp, #12
 801495a:	4770      	bx	lr
 801495c:	20000170 	.word	0x20000170
 8014960:	ffff0208 	.word	0xffff0208

08014964 <__sread>:
 8014964:	b510      	push	{r4, lr}
 8014966:	460c      	mov	r4, r1
 8014968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801496c:	f000 f9f2 	bl	8014d54 <_read_r>
 8014970:	2800      	cmp	r0, #0
 8014972:	bfab      	itete	ge
 8014974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014976:	89a3      	ldrhlt	r3, [r4, #12]
 8014978:	181b      	addge	r3, r3, r0
 801497a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801497e:	bfac      	ite	ge
 8014980:	6563      	strge	r3, [r4, #84]	; 0x54
 8014982:	81a3      	strhlt	r3, [r4, #12]
 8014984:	bd10      	pop	{r4, pc}

08014986 <__swrite>:
 8014986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801498a:	461f      	mov	r7, r3
 801498c:	898b      	ldrh	r3, [r1, #12]
 801498e:	05db      	lsls	r3, r3, #23
 8014990:	4605      	mov	r5, r0
 8014992:	460c      	mov	r4, r1
 8014994:	4616      	mov	r6, r2
 8014996:	d505      	bpl.n	80149a4 <__swrite+0x1e>
 8014998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801499c:	2302      	movs	r3, #2
 801499e:	2200      	movs	r2, #0
 80149a0:	f000 f9c6 	bl	8014d30 <_lseek_r>
 80149a4:	89a3      	ldrh	r3, [r4, #12]
 80149a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149ae:	81a3      	strh	r3, [r4, #12]
 80149b0:	4632      	mov	r2, r6
 80149b2:	463b      	mov	r3, r7
 80149b4:	4628      	mov	r0, r5
 80149b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149ba:	f000 b9dd 	b.w	8014d78 <_write_r>

080149be <__sseek>:
 80149be:	b510      	push	{r4, lr}
 80149c0:	460c      	mov	r4, r1
 80149c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149c6:	f000 f9b3 	bl	8014d30 <_lseek_r>
 80149ca:	1c43      	adds	r3, r0, #1
 80149cc:	89a3      	ldrh	r3, [r4, #12]
 80149ce:	bf15      	itete	ne
 80149d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80149d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80149d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80149da:	81a3      	strheq	r3, [r4, #12]
 80149dc:	bf18      	it	ne
 80149de:	81a3      	strhne	r3, [r4, #12]
 80149e0:	bd10      	pop	{r4, pc}

080149e2 <__sclose>:
 80149e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e6:	f000 b993 	b.w	8014d10 <_close_r>

080149ea <__swbuf_r>:
 80149ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ec:	460e      	mov	r6, r1
 80149ee:	4614      	mov	r4, r2
 80149f0:	4605      	mov	r5, r0
 80149f2:	b118      	cbz	r0, 80149fc <__swbuf_r+0x12>
 80149f4:	6a03      	ldr	r3, [r0, #32]
 80149f6:	b90b      	cbnz	r3, 80149fc <__swbuf_r+0x12>
 80149f8:	f7ff feaa 	bl	8014750 <__sinit>
 80149fc:	69a3      	ldr	r3, [r4, #24]
 80149fe:	60a3      	str	r3, [r4, #8]
 8014a00:	89a3      	ldrh	r3, [r4, #12]
 8014a02:	071a      	lsls	r2, r3, #28
 8014a04:	d525      	bpl.n	8014a52 <__swbuf_r+0x68>
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	b31b      	cbz	r3, 8014a52 <__swbuf_r+0x68>
 8014a0a:	6823      	ldr	r3, [r4, #0]
 8014a0c:	6922      	ldr	r2, [r4, #16]
 8014a0e:	1a98      	subs	r0, r3, r2
 8014a10:	6963      	ldr	r3, [r4, #20]
 8014a12:	b2f6      	uxtb	r6, r6
 8014a14:	4283      	cmp	r3, r0
 8014a16:	4637      	mov	r7, r6
 8014a18:	dc04      	bgt.n	8014a24 <__swbuf_r+0x3a>
 8014a1a:	4621      	mov	r1, r4
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	f002 ff6b 	bl	80178f8 <_fflush_r>
 8014a22:	b9e0      	cbnz	r0, 8014a5e <__swbuf_r+0x74>
 8014a24:	68a3      	ldr	r3, [r4, #8]
 8014a26:	3b01      	subs	r3, #1
 8014a28:	60a3      	str	r3, [r4, #8]
 8014a2a:	6823      	ldr	r3, [r4, #0]
 8014a2c:	1c5a      	adds	r2, r3, #1
 8014a2e:	6022      	str	r2, [r4, #0]
 8014a30:	701e      	strb	r6, [r3, #0]
 8014a32:	6962      	ldr	r2, [r4, #20]
 8014a34:	1c43      	adds	r3, r0, #1
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d004      	beq.n	8014a44 <__swbuf_r+0x5a>
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	07db      	lsls	r3, r3, #31
 8014a3e:	d506      	bpl.n	8014a4e <__swbuf_r+0x64>
 8014a40:	2e0a      	cmp	r6, #10
 8014a42:	d104      	bne.n	8014a4e <__swbuf_r+0x64>
 8014a44:	4621      	mov	r1, r4
 8014a46:	4628      	mov	r0, r5
 8014a48:	f002 ff56 	bl	80178f8 <_fflush_r>
 8014a4c:	b938      	cbnz	r0, 8014a5e <__swbuf_r+0x74>
 8014a4e:	4638      	mov	r0, r7
 8014a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a52:	4621      	mov	r1, r4
 8014a54:	4628      	mov	r0, r5
 8014a56:	f000 f805 	bl	8014a64 <__swsetup_r>
 8014a5a:	2800      	cmp	r0, #0
 8014a5c:	d0d5      	beq.n	8014a0a <__swbuf_r+0x20>
 8014a5e:	f04f 37ff 	mov.w	r7, #4294967295
 8014a62:	e7f4      	b.n	8014a4e <__swbuf_r+0x64>

08014a64 <__swsetup_r>:
 8014a64:	b538      	push	{r3, r4, r5, lr}
 8014a66:	4b2a      	ldr	r3, [pc, #168]	; (8014b10 <__swsetup_r+0xac>)
 8014a68:	4605      	mov	r5, r0
 8014a6a:	6818      	ldr	r0, [r3, #0]
 8014a6c:	460c      	mov	r4, r1
 8014a6e:	b118      	cbz	r0, 8014a78 <__swsetup_r+0x14>
 8014a70:	6a03      	ldr	r3, [r0, #32]
 8014a72:	b90b      	cbnz	r3, 8014a78 <__swsetup_r+0x14>
 8014a74:	f7ff fe6c 	bl	8014750 <__sinit>
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a7e:	0718      	lsls	r0, r3, #28
 8014a80:	d422      	bmi.n	8014ac8 <__swsetup_r+0x64>
 8014a82:	06d9      	lsls	r1, r3, #27
 8014a84:	d407      	bmi.n	8014a96 <__swsetup_r+0x32>
 8014a86:	2309      	movs	r3, #9
 8014a88:	602b      	str	r3, [r5, #0]
 8014a8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a8e:	81a3      	strh	r3, [r4, #12]
 8014a90:	f04f 30ff 	mov.w	r0, #4294967295
 8014a94:	e034      	b.n	8014b00 <__swsetup_r+0x9c>
 8014a96:	0758      	lsls	r0, r3, #29
 8014a98:	d512      	bpl.n	8014ac0 <__swsetup_r+0x5c>
 8014a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a9c:	b141      	cbz	r1, 8014ab0 <__swsetup_r+0x4c>
 8014a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014aa2:	4299      	cmp	r1, r3
 8014aa4:	d002      	beq.n	8014aac <__swsetup_r+0x48>
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	f001 f844 	bl	8015b34 <_free_r>
 8014aac:	2300      	movs	r3, #0
 8014aae:	6363      	str	r3, [r4, #52]	; 0x34
 8014ab0:	89a3      	ldrh	r3, [r4, #12]
 8014ab2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ab6:	81a3      	strh	r3, [r4, #12]
 8014ab8:	2300      	movs	r3, #0
 8014aba:	6063      	str	r3, [r4, #4]
 8014abc:	6923      	ldr	r3, [r4, #16]
 8014abe:	6023      	str	r3, [r4, #0]
 8014ac0:	89a3      	ldrh	r3, [r4, #12]
 8014ac2:	f043 0308 	orr.w	r3, r3, #8
 8014ac6:	81a3      	strh	r3, [r4, #12]
 8014ac8:	6923      	ldr	r3, [r4, #16]
 8014aca:	b94b      	cbnz	r3, 8014ae0 <__swsetup_r+0x7c>
 8014acc:	89a3      	ldrh	r3, [r4, #12]
 8014ace:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ad6:	d003      	beq.n	8014ae0 <__swsetup_r+0x7c>
 8014ad8:	4621      	mov	r1, r4
 8014ada:	4628      	mov	r0, r5
 8014adc:	f002 ff5a 	bl	8017994 <__smakebuf_r>
 8014ae0:	89a0      	ldrh	r0, [r4, #12]
 8014ae2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ae6:	f010 0301 	ands.w	r3, r0, #1
 8014aea:	d00a      	beq.n	8014b02 <__swsetup_r+0x9e>
 8014aec:	2300      	movs	r3, #0
 8014aee:	60a3      	str	r3, [r4, #8]
 8014af0:	6963      	ldr	r3, [r4, #20]
 8014af2:	425b      	negs	r3, r3
 8014af4:	61a3      	str	r3, [r4, #24]
 8014af6:	6923      	ldr	r3, [r4, #16]
 8014af8:	b943      	cbnz	r3, 8014b0c <__swsetup_r+0xa8>
 8014afa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014afe:	d1c4      	bne.n	8014a8a <__swsetup_r+0x26>
 8014b00:	bd38      	pop	{r3, r4, r5, pc}
 8014b02:	0781      	lsls	r1, r0, #30
 8014b04:	bf58      	it	pl
 8014b06:	6963      	ldrpl	r3, [r4, #20]
 8014b08:	60a3      	str	r3, [r4, #8]
 8014b0a:	e7f4      	b.n	8014af6 <__swsetup_r+0x92>
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	e7f7      	b.n	8014b00 <__swsetup_r+0x9c>
 8014b10:	20000170 	.word	0x20000170

08014b14 <memcmp>:
 8014b14:	b510      	push	{r4, lr}
 8014b16:	3901      	subs	r1, #1
 8014b18:	4402      	add	r2, r0
 8014b1a:	4290      	cmp	r0, r2
 8014b1c:	d101      	bne.n	8014b22 <memcmp+0xe>
 8014b1e:	2000      	movs	r0, #0
 8014b20:	e005      	b.n	8014b2e <memcmp+0x1a>
 8014b22:	7803      	ldrb	r3, [r0, #0]
 8014b24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014b28:	42a3      	cmp	r3, r4
 8014b2a:	d001      	beq.n	8014b30 <memcmp+0x1c>
 8014b2c:	1b18      	subs	r0, r3, r4
 8014b2e:	bd10      	pop	{r4, pc}
 8014b30:	3001      	adds	r0, #1
 8014b32:	e7f2      	b.n	8014b1a <memcmp+0x6>

08014b34 <memmove>:
 8014b34:	4288      	cmp	r0, r1
 8014b36:	b510      	push	{r4, lr}
 8014b38:	eb01 0402 	add.w	r4, r1, r2
 8014b3c:	d902      	bls.n	8014b44 <memmove+0x10>
 8014b3e:	4284      	cmp	r4, r0
 8014b40:	4623      	mov	r3, r4
 8014b42:	d807      	bhi.n	8014b54 <memmove+0x20>
 8014b44:	1e43      	subs	r3, r0, #1
 8014b46:	42a1      	cmp	r1, r4
 8014b48:	d008      	beq.n	8014b5c <memmove+0x28>
 8014b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b52:	e7f8      	b.n	8014b46 <memmove+0x12>
 8014b54:	4402      	add	r2, r0
 8014b56:	4601      	mov	r1, r0
 8014b58:	428a      	cmp	r2, r1
 8014b5a:	d100      	bne.n	8014b5e <memmove+0x2a>
 8014b5c:	bd10      	pop	{r4, pc}
 8014b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014b66:	e7f7      	b.n	8014b58 <memmove+0x24>

08014b68 <memset>:
 8014b68:	4402      	add	r2, r0
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	d100      	bne.n	8014b72 <memset+0xa>
 8014b70:	4770      	bx	lr
 8014b72:	f803 1b01 	strb.w	r1, [r3], #1
 8014b76:	e7f9      	b.n	8014b6c <memset+0x4>

08014b78 <strchr>:
 8014b78:	b2c9      	uxtb	r1, r1
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b80:	b11a      	cbz	r2, 8014b8a <strchr+0x12>
 8014b82:	428a      	cmp	r2, r1
 8014b84:	d1f9      	bne.n	8014b7a <strchr+0x2>
 8014b86:	4618      	mov	r0, r3
 8014b88:	4770      	bx	lr
 8014b8a:	2900      	cmp	r1, #0
 8014b8c:	bf18      	it	ne
 8014b8e:	2300      	movne	r3, #0
 8014b90:	e7f9      	b.n	8014b86 <strchr+0xe>

08014b92 <strncmp>:
 8014b92:	b510      	push	{r4, lr}
 8014b94:	b16a      	cbz	r2, 8014bb2 <strncmp+0x20>
 8014b96:	3901      	subs	r1, #1
 8014b98:	1884      	adds	r4, r0, r2
 8014b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d103      	bne.n	8014bae <strncmp+0x1c>
 8014ba6:	42a0      	cmp	r0, r4
 8014ba8:	d001      	beq.n	8014bae <strncmp+0x1c>
 8014baa:	2a00      	cmp	r2, #0
 8014bac:	d1f5      	bne.n	8014b9a <strncmp+0x8>
 8014bae:	1ad0      	subs	r0, r2, r3
 8014bb0:	bd10      	pop	{r4, pc}
 8014bb2:	4610      	mov	r0, r2
 8014bb4:	e7fc      	b.n	8014bb0 <strncmp+0x1e>

08014bb6 <strncpy>:
 8014bb6:	b510      	push	{r4, lr}
 8014bb8:	3901      	subs	r1, #1
 8014bba:	4603      	mov	r3, r0
 8014bbc:	b132      	cbz	r2, 8014bcc <strncpy+0x16>
 8014bbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014bc2:	f803 4b01 	strb.w	r4, [r3], #1
 8014bc6:	3a01      	subs	r2, #1
 8014bc8:	2c00      	cmp	r4, #0
 8014bca:	d1f7      	bne.n	8014bbc <strncpy+0x6>
 8014bcc:	441a      	add	r2, r3
 8014bce:	2100      	movs	r1, #0
 8014bd0:	4293      	cmp	r3, r2
 8014bd2:	d100      	bne.n	8014bd6 <strncpy+0x20>
 8014bd4:	bd10      	pop	{r4, pc}
 8014bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8014bda:	e7f9      	b.n	8014bd0 <strncpy+0x1a>

08014bdc <strtok>:
 8014bdc:	4b16      	ldr	r3, [pc, #88]	; (8014c38 <strtok+0x5c>)
 8014bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014be0:	681e      	ldr	r6, [r3, #0]
 8014be2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8014be4:	4605      	mov	r5, r0
 8014be6:	b9fc      	cbnz	r4, 8014c28 <strtok+0x4c>
 8014be8:	2050      	movs	r0, #80	; 0x50
 8014bea:	9101      	str	r1, [sp, #4]
 8014bec:	f000 ffee 	bl	8015bcc <malloc>
 8014bf0:	9901      	ldr	r1, [sp, #4]
 8014bf2:	6470      	str	r0, [r6, #68]	; 0x44
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	b920      	cbnz	r0, 8014c02 <strtok+0x26>
 8014bf8:	4b10      	ldr	r3, [pc, #64]	; (8014c3c <strtok+0x60>)
 8014bfa:	4811      	ldr	r0, [pc, #68]	; (8014c40 <strtok+0x64>)
 8014bfc:	215b      	movs	r1, #91	; 0x5b
 8014bfe:	f7fe fdf5 	bl	80137ec <__assert_func>
 8014c02:	e9c0 4400 	strd	r4, r4, [r0]
 8014c06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014c0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014c0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014c12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014c16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014c1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014c1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014c22:	6184      	str	r4, [r0, #24]
 8014c24:	7704      	strb	r4, [r0, #28]
 8014c26:	6244      	str	r4, [r0, #36]	; 0x24
 8014c28:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	b002      	add	sp, #8
 8014c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c34:	f000 b806 	b.w	8014c44 <__strtok_r>
 8014c38:	20000170 	.word	0x20000170
 8014c3c:	0801a0b5 	.word	0x0801a0b5
 8014c40:	0801a0cc 	.word	0x0801a0cc

08014c44 <__strtok_r>:
 8014c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c46:	b908      	cbnz	r0, 8014c4c <__strtok_r+0x8>
 8014c48:	6810      	ldr	r0, [r2, #0]
 8014c4a:	b188      	cbz	r0, 8014c70 <__strtok_r+0x2c>
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014c54:	460f      	mov	r7, r1
 8014c56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014c5a:	b91e      	cbnz	r6, 8014c64 <__strtok_r+0x20>
 8014c5c:	b965      	cbnz	r5, 8014c78 <__strtok_r+0x34>
 8014c5e:	6015      	str	r5, [r2, #0]
 8014c60:	4628      	mov	r0, r5
 8014c62:	e005      	b.n	8014c70 <__strtok_r+0x2c>
 8014c64:	42b5      	cmp	r5, r6
 8014c66:	d1f6      	bne.n	8014c56 <__strtok_r+0x12>
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1f0      	bne.n	8014c4e <__strtok_r+0xa>
 8014c6c:	6014      	str	r4, [r2, #0]
 8014c6e:	7003      	strb	r3, [r0, #0]
 8014c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c72:	461c      	mov	r4, r3
 8014c74:	e00c      	b.n	8014c90 <__strtok_r+0x4c>
 8014c76:	b915      	cbnz	r5, 8014c7e <__strtok_r+0x3a>
 8014c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c7c:	460e      	mov	r6, r1
 8014c7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014c82:	42ab      	cmp	r3, r5
 8014c84:	d1f7      	bne.n	8014c76 <__strtok_r+0x32>
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d0f3      	beq.n	8014c72 <__strtok_r+0x2e>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014c90:	6014      	str	r4, [r2, #0]
 8014c92:	e7ed      	b.n	8014c70 <__strtok_r+0x2c>

08014c94 <strstr>:
 8014c94:	780a      	ldrb	r2, [r1, #0]
 8014c96:	b570      	push	{r4, r5, r6, lr}
 8014c98:	b96a      	cbnz	r2, 8014cb6 <strstr+0x22>
 8014c9a:	bd70      	pop	{r4, r5, r6, pc}
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d109      	bne.n	8014cb4 <strstr+0x20>
 8014ca0:	460c      	mov	r4, r1
 8014ca2:	4605      	mov	r5, r0
 8014ca4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d0f6      	beq.n	8014c9a <strstr+0x6>
 8014cac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014cb0:	429e      	cmp	r6, r3
 8014cb2:	d0f7      	beq.n	8014ca4 <strstr+0x10>
 8014cb4:	3001      	adds	r0, #1
 8014cb6:	7803      	ldrb	r3, [r0, #0]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d1ef      	bne.n	8014c9c <strstr+0x8>
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	e7ec      	b.n	8014c9a <strstr+0x6>

08014cc0 <strndup>:
 8014cc0:	4b02      	ldr	r3, [pc, #8]	; (8014ccc <strndup+0xc>)
 8014cc2:	460a      	mov	r2, r1
 8014cc4:	4601      	mov	r1, r0
 8014cc6:	6818      	ldr	r0, [r3, #0]
 8014cc8:	f000 b802 	b.w	8014cd0 <_strndup_r>
 8014ccc:	20000170 	.word	0x20000170

08014cd0 <_strndup_r>:
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	460d      	mov	r5, r1
 8014cd6:	440a      	add	r2, r1
 8014cd8:	4293      	cmp	r3, r2
 8014cda:	461c      	mov	r4, r3
 8014cdc:	d107      	bne.n	8014cee <_strndup_r+0x1e>
 8014cde:	1b64      	subs	r4, r4, r5
 8014ce0:	1c61      	adds	r1, r4, #1
 8014ce2:	f000 ff9b 	bl	8015c1c <_malloc_r>
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	b930      	cbnz	r0, 8014cf8 <_strndup_r+0x28>
 8014cea:	4630      	mov	r0, r6
 8014cec:	bd70      	pop	{r4, r5, r6, pc}
 8014cee:	7821      	ldrb	r1, [r4, #0]
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	2900      	cmp	r1, #0
 8014cf4:	d1f0      	bne.n	8014cd8 <_strndup_r+0x8>
 8014cf6:	e7f2      	b.n	8014cde <_strndup_r+0xe>
 8014cf8:	4622      	mov	r2, r4
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	f000 f883 	bl	8014e06 <memcpy>
 8014d00:	2300      	movs	r3, #0
 8014d02:	5533      	strb	r3, [r6, r4]
 8014d04:	e7f1      	b.n	8014cea <_strndup_r+0x1a>
	...

08014d08 <_localeconv_r>:
 8014d08:	4800      	ldr	r0, [pc, #0]	; (8014d0c <_localeconv_r+0x4>)
 8014d0a:	4770      	bx	lr
 8014d0c:	20000264 	.word	0x20000264

08014d10 <_close_r>:
 8014d10:	b538      	push	{r3, r4, r5, lr}
 8014d12:	4d06      	ldr	r5, [pc, #24]	; (8014d2c <_close_r+0x1c>)
 8014d14:	2300      	movs	r3, #0
 8014d16:	4604      	mov	r4, r0
 8014d18:	4608      	mov	r0, r1
 8014d1a:	602b      	str	r3, [r5, #0]
 8014d1c:	f7ee fc5f 	bl	80035de <_close>
 8014d20:	1c43      	adds	r3, r0, #1
 8014d22:	d102      	bne.n	8014d2a <_close_r+0x1a>
 8014d24:	682b      	ldr	r3, [r5, #0]
 8014d26:	b103      	cbz	r3, 8014d2a <_close_r+0x1a>
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	bd38      	pop	{r3, r4, r5, pc}
 8014d2c:	20004fdc 	.word	0x20004fdc

08014d30 <_lseek_r>:
 8014d30:	b538      	push	{r3, r4, r5, lr}
 8014d32:	4d07      	ldr	r5, [pc, #28]	; (8014d50 <_lseek_r+0x20>)
 8014d34:	4604      	mov	r4, r0
 8014d36:	4608      	mov	r0, r1
 8014d38:	4611      	mov	r1, r2
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	602a      	str	r2, [r5, #0]
 8014d3e:	461a      	mov	r2, r3
 8014d40:	f7ee fc74 	bl	800362c <_lseek>
 8014d44:	1c43      	adds	r3, r0, #1
 8014d46:	d102      	bne.n	8014d4e <_lseek_r+0x1e>
 8014d48:	682b      	ldr	r3, [r5, #0]
 8014d4a:	b103      	cbz	r3, 8014d4e <_lseek_r+0x1e>
 8014d4c:	6023      	str	r3, [r4, #0]
 8014d4e:	bd38      	pop	{r3, r4, r5, pc}
 8014d50:	20004fdc 	.word	0x20004fdc

08014d54 <_read_r>:
 8014d54:	b538      	push	{r3, r4, r5, lr}
 8014d56:	4d07      	ldr	r5, [pc, #28]	; (8014d74 <_read_r+0x20>)
 8014d58:	4604      	mov	r4, r0
 8014d5a:	4608      	mov	r0, r1
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	2200      	movs	r2, #0
 8014d60:	602a      	str	r2, [r5, #0]
 8014d62:	461a      	mov	r2, r3
 8014d64:	f7ee fc1e 	bl	80035a4 <_read>
 8014d68:	1c43      	adds	r3, r0, #1
 8014d6a:	d102      	bne.n	8014d72 <_read_r+0x1e>
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	b103      	cbz	r3, 8014d72 <_read_r+0x1e>
 8014d70:	6023      	str	r3, [r4, #0]
 8014d72:	bd38      	pop	{r3, r4, r5, pc}
 8014d74:	20004fdc 	.word	0x20004fdc

08014d78 <_write_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d07      	ldr	r5, [pc, #28]	; (8014d98 <_write_r+0x20>)
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	4608      	mov	r0, r1
 8014d80:	4611      	mov	r1, r2
 8014d82:	2200      	movs	r2, #0
 8014d84:	602a      	str	r2, [r5, #0]
 8014d86:	461a      	mov	r2, r3
 8014d88:	f7ec f959 	bl	800103e <_write>
 8014d8c:	1c43      	adds	r3, r0, #1
 8014d8e:	d102      	bne.n	8014d96 <_write_r+0x1e>
 8014d90:	682b      	ldr	r3, [r5, #0]
 8014d92:	b103      	cbz	r3, 8014d96 <_write_r+0x1e>
 8014d94:	6023      	str	r3, [r4, #0]
 8014d96:	bd38      	pop	{r3, r4, r5, pc}
 8014d98:	20004fdc 	.word	0x20004fdc

08014d9c <__errno>:
 8014d9c:	4b01      	ldr	r3, [pc, #4]	; (8014da4 <__errno+0x8>)
 8014d9e:	6818      	ldr	r0, [r3, #0]
 8014da0:	4770      	bx	lr
 8014da2:	bf00      	nop
 8014da4:	20000170 	.word	0x20000170

08014da8 <__libc_init_array>:
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	4d0d      	ldr	r5, [pc, #52]	; (8014de0 <__libc_init_array+0x38>)
 8014dac:	4c0d      	ldr	r4, [pc, #52]	; (8014de4 <__libc_init_array+0x3c>)
 8014dae:	1b64      	subs	r4, r4, r5
 8014db0:	10a4      	asrs	r4, r4, #2
 8014db2:	2600      	movs	r6, #0
 8014db4:	42a6      	cmp	r6, r4
 8014db6:	d109      	bne.n	8014dcc <__libc_init_array+0x24>
 8014db8:	4d0b      	ldr	r5, [pc, #44]	; (8014de8 <__libc_init_array+0x40>)
 8014dba:	4c0c      	ldr	r4, [pc, #48]	; (8014dec <__libc_init_array+0x44>)
 8014dbc:	f003 fa68 	bl	8018290 <_init>
 8014dc0:	1b64      	subs	r4, r4, r5
 8014dc2:	10a4      	asrs	r4, r4, #2
 8014dc4:	2600      	movs	r6, #0
 8014dc6:	42a6      	cmp	r6, r4
 8014dc8:	d105      	bne.n	8014dd6 <__libc_init_array+0x2e>
 8014dca:	bd70      	pop	{r4, r5, r6, pc}
 8014dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dd0:	4798      	blx	r3
 8014dd2:	3601      	adds	r6, #1
 8014dd4:	e7ee      	b.n	8014db4 <__libc_init_array+0xc>
 8014dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dda:	4798      	blx	r3
 8014ddc:	3601      	adds	r6, #1
 8014dde:	e7f2      	b.n	8014dc6 <__libc_init_array+0x1e>
 8014de0:	0801a3cc 	.word	0x0801a3cc
 8014de4:	0801a3cc 	.word	0x0801a3cc
 8014de8:	0801a3cc 	.word	0x0801a3cc
 8014dec:	0801a3d0 	.word	0x0801a3d0

08014df0 <__retarget_lock_init_recursive>:
 8014df0:	4770      	bx	lr

08014df2 <__retarget_lock_acquire_recursive>:
 8014df2:	4770      	bx	lr

08014df4 <__retarget_lock_release_recursive>:
 8014df4:	4770      	bx	lr

08014df6 <strcpy>:
 8014df6:	4603      	mov	r3, r0
 8014df8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dfc:	f803 2b01 	strb.w	r2, [r3], #1
 8014e00:	2a00      	cmp	r2, #0
 8014e02:	d1f9      	bne.n	8014df8 <strcpy+0x2>
 8014e04:	4770      	bx	lr

08014e06 <memcpy>:
 8014e06:	440a      	add	r2, r1
 8014e08:	4291      	cmp	r1, r2
 8014e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e0e:	d100      	bne.n	8014e12 <memcpy+0xc>
 8014e10:	4770      	bx	lr
 8014e12:	b510      	push	{r4, lr}
 8014e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e1c:	4291      	cmp	r1, r2
 8014e1e:	d1f9      	bne.n	8014e14 <memcpy+0xe>
 8014e20:	bd10      	pop	{r4, pc}
	...

08014e24 <nanf>:
 8014e24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014e2c <nanf+0x8>
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	7fc00000 	.word	0x7fc00000

08014e30 <abort>:
 8014e30:	b508      	push	{r3, lr}
 8014e32:	2006      	movs	r0, #6
 8014e34:	f002 fe12 	bl	8017a5c <raise>
 8014e38:	2001      	movs	r0, #1
 8014e3a:	f7ee fba9 	bl	8003590 <_exit>

08014e3e <quorem>:
 8014e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e42:	6903      	ldr	r3, [r0, #16]
 8014e44:	690c      	ldr	r4, [r1, #16]
 8014e46:	42a3      	cmp	r3, r4
 8014e48:	4607      	mov	r7, r0
 8014e4a:	db7e      	blt.n	8014f4a <quorem+0x10c>
 8014e4c:	3c01      	subs	r4, #1
 8014e4e:	f101 0814 	add.w	r8, r1, #20
 8014e52:	f100 0514 	add.w	r5, r0, #20
 8014e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e5a:	9301      	str	r3, [sp, #4]
 8014e5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e64:	3301      	adds	r3, #1
 8014e66:	429a      	cmp	r2, r3
 8014e68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8014e74:	d331      	bcc.n	8014eda <quorem+0x9c>
 8014e76:	f04f 0e00 	mov.w	lr, #0
 8014e7a:	4640      	mov	r0, r8
 8014e7c:	46ac      	mov	ip, r5
 8014e7e:	46f2      	mov	sl, lr
 8014e80:	f850 2b04 	ldr.w	r2, [r0], #4
 8014e84:	b293      	uxth	r3, r2
 8014e86:	fb06 e303 	mla	r3, r6, r3, lr
 8014e8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014e8e:	0c1a      	lsrs	r2, r3, #16
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	ebaa 0303 	sub.w	r3, sl, r3
 8014e96:	f8dc a000 	ldr.w	sl, [ip]
 8014e9a:	fa13 f38a 	uxtah	r3, r3, sl
 8014e9e:	fb06 220e 	mla	r2, r6, lr, r2
 8014ea2:	9300      	str	r3, [sp, #0]
 8014ea4:	9b00      	ldr	r3, [sp, #0]
 8014ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014eaa:	b292      	uxth	r2, r2
 8014eac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8014eb8:	4581      	cmp	r9, r0
 8014eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ebe:	f84c 3b04 	str.w	r3, [ip], #4
 8014ec2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014ec6:	d2db      	bcs.n	8014e80 <quorem+0x42>
 8014ec8:	f855 300b 	ldr.w	r3, [r5, fp]
 8014ecc:	b92b      	cbnz	r3, 8014eda <quorem+0x9c>
 8014ece:	9b01      	ldr	r3, [sp, #4]
 8014ed0:	3b04      	subs	r3, #4
 8014ed2:	429d      	cmp	r5, r3
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	d32c      	bcc.n	8014f32 <quorem+0xf4>
 8014ed8:	613c      	str	r4, [r7, #16]
 8014eda:	4638      	mov	r0, r7
 8014edc:	f001 f9f0 	bl	80162c0 <__mcmp>
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	db22      	blt.n	8014f2a <quorem+0xec>
 8014ee4:	3601      	adds	r6, #1
 8014ee6:	4629      	mov	r1, r5
 8014ee8:	2000      	movs	r0, #0
 8014eea:	f858 2b04 	ldr.w	r2, [r8], #4
 8014eee:	f8d1 c000 	ldr.w	ip, [r1]
 8014ef2:	b293      	uxth	r3, r2
 8014ef4:	1ac3      	subs	r3, r0, r3
 8014ef6:	0c12      	lsrs	r2, r2, #16
 8014ef8:	fa13 f38c 	uxtah	r3, r3, ip
 8014efc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f04:	b29b      	uxth	r3, r3
 8014f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f0a:	45c1      	cmp	r9, r8
 8014f0c:	f841 3b04 	str.w	r3, [r1], #4
 8014f10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014f14:	d2e9      	bcs.n	8014eea <quorem+0xac>
 8014f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f1e:	b922      	cbnz	r2, 8014f2a <quorem+0xec>
 8014f20:	3b04      	subs	r3, #4
 8014f22:	429d      	cmp	r5, r3
 8014f24:	461a      	mov	r2, r3
 8014f26:	d30a      	bcc.n	8014f3e <quorem+0x100>
 8014f28:	613c      	str	r4, [r7, #16]
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	b003      	add	sp, #12
 8014f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f32:	6812      	ldr	r2, [r2, #0]
 8014f34:	3b04      	subs	r3, #4
 8014f36:	2a00      	cmp	r2, #0
 8014f38:	d1ce      	bne.n	8014ed8 <quorem+0x9a>
 8014f3a:	3c01      	subs	r4, #1
 8014f3c:	e7c9      	b.n	8014ed2 <quorem+0x94>
 8014f3e:	6812      	ldr	r2, [r2, #0]
 8014f40:	3b04      	subs	r3, #4
 8014f42:	2a00      	cmp	r2, #0
 8014f44:	d1f0      	bne.n	8014f28 <quorem+0xea>
 8014f46:	3c01      	subs	r4, #1
 8014f48:	e7eb      	b.n	8014f22 <quorem+0xe4>
 8014f4a:	2000      	movs	r0, #0
 8014f4c:	e7ee      	b.n	8014f2c <quorem+0xee>
	...

08014f50 <_dtoa_r>:
 8014f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f54:	ed2d 8b04 	vpush	{d8-d9}
 8014f58:	69c5      	ldr	r5, [r0, #28]
 8014f5a:	b093      	sub	sp, #76	; 0x4c
 8014f5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014f60:	ec57 6b10 	vmov	r6, r7, d0
 8014f64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014f68:	9107      	str	r1, [sp, #28]
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8014f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8014f70:	b975      	cbnz	r5, 8014f90 <_dtoa_r+0x40>
 8014f72:	2010      	movs	r0, #16
 8014f74:	f000 fe2a 	bl	8015bcc <malloc>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	61e0      	str	r0, [r4, #28]
 8014f7c:	b920      	cbnz	r0, 8014f88 <_dtoa_r+0x38>
 8014f7e:	4bae      	ldr	r3, [pc, #696]	; (8015238 <_dtoa_r+0x2e8>)
 8014f80:	21ef      	movs	r1, #239	; 0xef
 8014f82:	48ae      	ldr	r0, [pc, #696]	; (801523c <_dtoa_r+0x2ec>)
 8014f84:	f7fe fc32 	bl	80137ec <__assert_func>
 8014f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014f8c:	6005      	str	r5, [r0, #0]
 8014f8e:	60c5      	str	r5, [r0, #12]
 8014f90:	69e3      	ldr	r3, [r4, #28]
 8014f92:	6819      	ldr	r1, [r3, #0]
 8014f94:	b151      	cbz	r1, 8014fac <_dtoa_r+0x5c>
 8014f96:	685a      	ldr	r2, [r3, #4]
 8014f98:	604a      	str	r2, [r1, #4]
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	4093      	lsls	r3, r2
 8014f9e:	608b      	str	r3, [r1, #8]
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	f000 ff07 	bl	8015db4 <_Bfree>
 8014fa6:	69e3      	ldr	r3, [r4, #28]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	601a      	str	r2, [r3, #0]
 8014fac:	1e3b      	subs	r3, r7, #0
 8014fae:	bfbb      	ittet	lt
 8014fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014fb4:	9303      	strlt	r3, [sp, #12]
 8014fb6:	2300      	movge	r3, #0
 8014fb8:	2201      	movlt	r2, #1
 8014fba:	bfac      	ite	ge
 8014fbc:	f8c8 3000 	strge.w	r3, [r8]
 8014fc0:	f8c8 2000 	strlt.w	r2, [r8]
 8014fc4:	4b9e      	ldr	r3, [pc, #632]	; (8015240 <_dtoa_r+0x2f0>)
 8014fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014fca:	ea33 0308 	bics.w	r3, r3, r8
 8014fce:	d11b      	bne.n	8015008 <_dtoa_r+0xb8>
 8014fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8014fd6:	6013      	str	r3, [r2, #0]
 8014fd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014fdc:	4333      	orrs	r3, r6
 8014fde:	f000 8593 	beq.w	8015b08 <_dtoa_r+0xbb8>
 8014fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fe4:	b963      	cbnz	r3, 8015000 <_dtoa_r+0xb0>
 8014fe6:	4b97      	ldr	r3, [pc, #604]	; (8015244 <_dtoa_r+0x2f4>)
 8014fe8:	e027      	b.n	801503a <_dtoa_r+0xea>
 8014fea:	4b97      	ldr	r3, [pc, #604]	; (8015248 <_dtoa_r+0x2f8>)
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	3308      	adds	r3, #8
 8014ff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ff2:	6013      	str	r3, [r2, #0]
 8014ff4:	9800      	ldr	r0, [sp, #0]
 8014ff6:	b013      	add	sp, #76	; 0x4c
 8014ff8:	ecbd 8b04 	vpop	{d8-d9}
 8014ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015000:	4b90      	ldr	r3, [pc, #576]	; (8015244 <_dtoa_r+0x2f4>)
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	3303      	adds	r3, #3
 8015006:	e7f3      	b.n	8014ff0 <_dtoa_r+0xa0>
 8015008:	ed9d 7b02 	vldr	d7, [sp, #8]
 801500c:	2200      	movs	r2, #0
 801500e:	ec51 0b17 	vmov	r0, r1, d7
 8015012:	eeb0 8a47 	vmov.f32	s16, s14
 8015016:	eef0 8a67 	vmov.f32	s17, s15
 801501a:	2300      	movs	r3, #0
 801501c:	f7eb fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8015020:	4681      	mov	r9, r0
 8015022:	b160      	cbz	r0, 801503e <_dtoa_r+0xee>
 8015024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015026:	2301      	movs	r3, #1
 8015028:	6013      	str	r3, [r2, #0]
 801502a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801502c:	2b00      	cmp	r3, #0
 801502e:	f000 8568 	beq.w	8015b02 <_dtoa_r+0xbb2>
 8015032:	4b86      	ldr	r3, [pc, #536]	; (801524c <_dtoa_r+0x2fc>)
 8015034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015036:	6013      	str	r3, [r2, #0]
 8015038:	3b01      	subs	r3, #1
 801503a:	9300      	str	r3, [sp, #0]
 801503c:	e7da      	b.n	8014ff4 <_dtoa_r+0xa4>
 801503e:	aa10      	add	r2, sp, #64	; 0x40
 8015040:	a911      	add	r1, sp, #68	; 0x44
 8015042:	4620      	mov	r0, r4
 8015044:	eeb0 0a48 	vmov.f32	s0, s16
 8015048:	eef0 0a68 	vmov.f32	s1, s17
 801504c:	f001 fa4e 	bl	80164ec <__d2b>
 8015050:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015054:	4682      	mov	sl, r0
 8015056:	2d00      	cmp	r5, #0
 8015058:	d07f      	beq.n	801515a <_dtoa_r+0x20a>
 801505a:	ee18 3a90 	vmov	r3, s17
 801505e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015062:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015066:	ec51 0b18 	vmov	r0, r1, d8
 801506a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801506e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015072:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015076:	4619      	mov	r1, r3
 8015078:	2200      	movs	r2, #0
 801507a:	4b75      	ldr	r3, [pc, #468]	; (8015250 <_dtoa_r+0x300>)
 801507c:	f7eb f904 	bl	8000288 <__aeabi_dsub>
 8015080:	a367      	add	r3, pc, #412	; (adr r3, 8015220 <_dtoa_r+0x2d0>)
 8015082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015086:	f7eb fab7 	bl	80005f8 <__aeabi_dmul>
 801508a:	a367      	add	r3, pc, #412	; (adr r3, 8015228 <_dtoa_r+0x2d8>)
 801508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015090:	f7eb f8fc 	bl	800028c <__adddf3>
 8015094:	4606      	mov	r6, r0
 8015096:	4628      	mov	r0, r5
 8015098:	460f      	mov	r7, r1
 801509a:	f7eb fa43 	bl	8000524 <__aeabi_i2d>
 801509e:	a364      	add	r3, pc, #400	; (adr r3, 8015230 <_dtoa_r+0x2e0>)
 80150a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a4:	f7eb faa8 	bl	80005f8 <__aeabi_dmul>
 80150a8:	4602      	mov	r2, r0
 80150aa:	460b      	mov	r3, r1
 80150ac:	4630      	mov	r0, r6
 80150ae:	4639      	mov	r1, r7
 80150b0:	f7eb f8ec 	bl	800028c <__adddf3>
 80150b4:	4606      	mov	r6, r0
 80150b6:	460f      	mov	r7, r1
 80150b8:	f7eb fd4e 	bl	8000b58 <__aeabi_d2iz>
 80150bc:	2200      	movs	r2, #0
 80150be:	4683      	mov	fp, r0
 80150c0:	2300      	movs	r3, #0
 80150c2:	4630      	mov	r0, r6
 80150c4:	4639      	mov	r1, r7
 80150c6:	f7eb fd09 	bl	8000adc <__aeabi_dcmplt>
 80150ca:	b148      	cbz	r0, 80150e0 <_dtoa_r+0x190>
 80150cc:	4658      	mov	r0, fp
 80150ce:	f7eb fa29 	bl	8000524 <__aeabi_i2d>
 80150d2:	4632      	mov	r2, r6
 80150d4:	463b      	mov	r3, r7
 80150d6:	f7eb fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80150da:	b908      	cbnz	r0, 80150e0 <_dtoa_r+0x190>
 80150dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150e0:	f1bb 0f16 	cmp.w	fp, #22
 80150e4:	d857      	bhi.n	8015196 <_dtoa_r+0x246>
 80150e6:	4b5b      	ldr	r3, [pc, #364]	; (8015254 <_dtoa_r+0x304>)
 80150e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80150ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f0:	ec51 0b18 	vmov	r0, r1, d8
 80150f4:	f7eb fcf2 	bl	8000adc <__aeabi_dcmplt>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d04e      	beq.n	801519a <_dtoa_r+0x24a>
 80150fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015100:	2300      	movs	r3, #0
 8015102:	930c      	str	r3, [sp, #48]	; 0x30
 8015104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015106:	1b5b      	subs	r3, r3, r5
 8015108:	1e5a      	subs	r2, r3, #1
 801510a:	bf45      	ittet	mi
 801510c:	f1c3 0301 	rsbmi	r3, r3, #1
 8015110:	9305      	strmi	r3, [sp, #20]
 8015112:	2300      	movpl	r3, #0
 8015114:	2300      	movmi	r3, #0
 8015116:	9206      	str	r2, [sp, #24]
 8015118:	bf54      	ite	pl
 801511a:	9305      	strpl	r3, [sp, #20]
 801511c:	9306      	strmi	r3, [sp, #24]
 801511e:	f1bb 0f00 	cmp.w	fp, #0
 8015122:	db3c      	blt.n	801519e <_dtoa_r+0x24e>
 8015124:	9b06      	ldr	r3, [sp, #24]
 8015126:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801512a:	445b      	add	r3, fp
 801512c:	9306      	str	r3, [sp, #24]
 801512e:	2300      	movs	r3, #0
 8015130:	9308      	str	r3, [sp, #32]
 8015132:	9b07      	ldr	r3, [sp, #28]
 8015134:	2b09      	cmp	r3, #9
 8015136:	d868      	bhi.n	801520a <_dtoa_r+0x2ba>
 8015138:	2b05      	cmp	r3, #5
 801513a:	bfc4      	itt	gt
 801513c:	3b04      	subgt	r3, #4
 801513e:	9307      	strgt	r3, [sp, #28]
 8015140:	9b07      	ldr	r3, [sp, #28]
 8015142:	f1a3 0302 	sub.w	r3, r3, #2
 8015146:	bfcc      	ite	gt
 8015148:	2500      	movgt	r5, #0
 801514a:	2501      	movle	r5, #1
 801514c:	2b03      	cmp	r3, #3
 801514e:	f200 8085 	bhi.w	801525c <_dtoa_r+0x30c>
 8015152:	e8df f003 	tbb	[pc, r3]
 8015156:	3b2e      	.short	0x3b2e
 8015158:	5839      	.short	0x5839
 801515a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801515e:	441d      	add	r5, r3
 8015160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015164:	2b20      	cmp	r3, #32
 8015166:	bfc1      	itttt	gt
 8015168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801516c:	fa08 f803 	lslgt.w	r8, r8, r3
 8015170:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015174:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015178:	bfd6      	itet	le
 801517a:	f1c3 0320 	rsble	r3, r3, #32
 801517e:	ea48 0003 	orrgt.w	r0, r8, r3
 8015182:	fa06 f003 	lslle.w	r0, r6, r3
 8015186:	f7eb f9bd 	bl	8000504 <__aeabi_ui2d>
 801518a:	2201      	movs	r2, #1
 801518c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015190:	3d01      	subs	r5, #1
 8015192:	920e      	str	r2, [sp, #56]	; 0x38
 8015194:	e76f      	b.n	8015076 <_dtoa_r+0x126>
 8015196:	2301      	movs	r3, #1
 8015198:	e7b3      	b.n	8015102 <_dtoa_r+0x1b2>
 801519a:	900c      	str	r0, [sp, #48]	; 0x30
 801519c:	e7b2      	b.n	8015104 <_dtoa_r+0x1b4>
 801519e:	9b05      	ldr	r3, [sp, #20]
 80151a0:	eba3 030b 	sub.w	r3, r3, fp
 80151a4:	9305      	str	r3, [sp, #20]
 80151a6:	f1cb 0300 	rsb	r3, fp, #0
 80151aa:	9308      	str	r3, [sp, #32]
 80151ac:	2300      	movs	r3, #0
 80151ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80151b0:	e7bf      	b.n	8015132 <_dtoa_r+0x1e2>
 80151b2:	2300      	movs	r3, #0
 80151b4:	9309      	str	r3, [sp, #36]	; 0x24
 80151b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	dc52      	bgt.n	8015262 <_dtoa_r+0x312>
 80151bc:	2301      	movs	r3, #1
 80151be:	9301      	str	r3, [sp, #4]
 80151c0:	9304      	str	r3, [sp, #16]
 80151c2:	461a      	mov	r2, r3
 80151c4:	920a      	str	r2, [sp, #40]	; 0x28
 80151c6:	e00b      	b.n	80151e0 <_dtoa_r+0x290>
 80151c8:	2301      	movs	r3, #1
 80151ca:	e7f3      	b.n	80151b4 <_dtoa_r+0x264>
 80151cc:	2300      	movs	r3, #0
 80151ce:	9309      	str	r3, [sp, #36]	; 0x24
 80151d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151d2:	445b      	add	r3, fp
 80151d4:	9301      	str	r3, [sp, #4]
 80151d6:	3301      	adds	r3, #1
 80151d8:	2b01      	cmp	r3, #1
 80151da:	9304      	str	r3, [sp, #16]
 80151dc:	bfb8      	it	lt
 80151de:	2301      	movlt	r3, #1
 80151e0:	69e0      	ldr	r0, [r4, #28]
 80151e2:	2100      	movs	r1, #0
 80151e4:	2204      	movs	r2, #4
 80151e6:	f102 0614 	add.w	r6, r2, #20
 80151ea:	429e      	cmp	r6, r3
 80151ec:	d93d      	bls.n	801526a <_dtoa_r+0x31a>
 80151ee:	6041      	str	r1, [r0, #4]
 80151f0:	4620      	mov	r0, r4
 80151f2:	f000 fd9f 	bl	8015d34 <_Balloc>
 80151f6:	9000      	str	r0, [sp, #0]
 80151f8:	2800      	cmp	r0, #0
 80151fa:	d139      	bne.n	8015270 <_dtoa_r+0x320>
 80151fc:	4b16      	ldr	r3, [pc, #88]	; (8015258 <_dtoa_r+0x308>)
 80151fe:	4602      	mov	r2, r0
 8015200:	f240 11af 	movw	r1, #431	; 0x1af
 8015204:	e6bd      	b.n	8014f82 <_dtoa_r+0x32>
 8015206:	2301      	movs	r3, #1
 8015208:	e7e1      	b.n	80151ce <_dtoa_r+0x27e>
 801520a:	2501      	movs	r5, #1
 801520c:	2300      	movs	r3, #0
 801520e:	9307      	str	r3, [sp, #28]
 8015210:	9509      	str	r5, [sp, #36]	; 0x24
 8015212:	f04f 33ff 	mov.w	r3, #4294967295
 8015216:	9301      	str	r3, [sp, #4]
 8015218:	9304      	str	r3, [sp, #16]
 801521a:	2200      	movs	r2, #0
 801521c:	2312      	movs	r3, #18
 801521e:	e7d1      	b.n	80151c4 <_dtoa_r+0x274>
 8015220:	636f4361 	.word	0x636f4361
 8015224:	3fd287a7 	.word	0x3fd287a7
 8015228:	8b60c8b3 	.word	0x8b60c8b3
 801522c:	3fc68a28 	.word	0x3fc68a28
 8015230:	509f79fb 	.word	0x509f79fb
 8015234:	3fd34413 	.word	0x3fd34413
 8015238:	0801a0b5 	.word	0x0801a0b5
 801523c:	0801a133 	.word	0x0801a133
 8015240:	7ff00000 	.word	0x7ff00000
 8015244:	0801a12f 	.word	0x0801a12f
 8015248:	0801a126 	.word	0x0801a126
 801524c:	0801a08d 	.word	0x0801a08d
 8015250:	3ff80000 	.word	0x3ff80000
 8015254:	0801a220 	.word	0x0801a220
 8015258:	0801a18b 	.word	0x0801a18b
 801525c:	2301      	movs	r3, #1
 801525e:	9309      	str	r3, [sp, #36]	; 0x24
 8015260:	e7d7      	b.n	8015212 <_dtoa_r+0x2c2>
 8015262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015264:	9301      	str	r3, [sp, #4]
 8015266:	9304      	str	r3, [sp, #16]
 8015268:	e7ba      	b.n	80151e0 <_dtoa_r+0x290>
 801526a:	3101      	adds	r1, #1
 801526c:	0052      	lsls	r2, r2, #1
 801526e:	e7ba      	b.n	80151e6 <_dtoa_r+0x296>
 8015270:	69e3      	ldr	r3, [r4, #28]
 8015272:	9a00      	ldr	r2, [sp, #0]
 8015274:	601a      	str	r2, [r3, #0]
 8015276:	9b04      	ldr	r3, [sp, #16]
 8015278:	2b0e      	cmp	r3, #14
 801527a:	f200 80a8 	bhi.w	80153ce <_dtoa_r+0x47e>
 801527e:	2d00      	cmp	r5, #0
 8015280:	f000 80a5 	beq.w	80153ce <_dtoa_r+0x47e>
 8015284:	f1bb 0f00 	cmp.w	fp, #0
 8015288:	dd38      	ble.n	80152fc <_dtoa_r+0x3ac>
 801528a:	4bc0      	ldr	r3, [pc, #768]	; (801558c <_dtoa_r+0x63c>)
 801528c:	f00b 020f 	and.w	r2, fp, #15
 8015290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015294:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015298:	e9d3 6700 	ldrd	r6, r7, [r3]
 801529c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80152a0:	d019      	beq.n	80152d6 <_dtoa_r+0x386>
 80152a2:	4bbb      	ldr	r3, [pc, #748]	; (8015590 <_dtoa_r+0x640>)
 80152a4:	ec51 0b18 	vmov	r0, r1, d8
 80152a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80152ac:	f7eb face 	bl	800084c <__aeabi_ddiv>
 80152b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152b4:	f008 080f 	and.w	r8, r8, #15
 80152b8:	2503      	movs	r5, #3
 80152ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015590 <_dtoa_r+0x640>
 80152be:	f1b8 0f00 	cmp.w	r8, #0
 80152c2:	d10a      	bne.n	80152da <_dtoa_r+0x38a>
 80152c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152c8:	4632      	mov	r2, r6
 80152ca:	463b      	mov	r3, r7
 80152cc:	f7eb fabe 	bl	800084c <__aeabi_ddiv>
 80152d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152d4:	e02b      	b.n	801532e <_dtoa_r+0x3de>
 80152d6:	2502      	movs	r5, #2
 80152d8:	e7ef      	b.n	80152ba <_dtoa_r+0x36a>
 80152da:	f018 0f01 	tst.w	r8, #1
 80152de:	d008      	beq.n	80152f2 <_dtoa_r+0x3a2>
 80152e0:	4630      	mov	r0, r6
 80152e2:	4639      	mov	r1, r7
 80152e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80152e8:	f7eb f986 	bl	80005f8 <__aeabi_dmul>
 80152ec:	3501      	adds	r5, #1
 80152ee:	4606      	mov	r6, r0
 80152f0:	460f      	mov	r7, r1
 80152f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80152f6:	f109 0908 	add.w	r9, r9, #8
 80152fa:	e7e0      	b.n	80152be <_dtoa_r+0x36e>
 80152fc:	f000 809f 	beq.w	801543e <_dtoa_r+0x4ee>
 8015300:	f1cb 0600 	rsb	r6, fp, #0
 8015304:	4ba1      	ldr	r3, [pc, #644]	; (801558c <_dtoa_r+0x63c>)
 8015306:	4fa2      	ldr	r7, [pc, #648]	; (8015590 <_dtoa_r+0x640>)
 8015308:	f006 020f 	and.w	r2, r6, #15
 801530c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015314:	ec51 0b18 	vmov	r0, r1, d8
 8015318:	f7eb f96e 	bl	80005f8 <__aeabi_dmul>
 801531c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015320:	1136      	asrs	r6, r6, #4
 8015322:	2300      	movs	r3, #0
 8015324:	2502      	movs	r5, #2
 8015326:	2e00      	cmp	r6, #0
 8015328:	d17e      	bne.n	8015428 <_dtoa_r+0x4d8>
 801532a:	2b00      	cmp	r3, #0
 801532c:	d1d0      	bne.n	80152d0 <_dtoa_r+0x380>
 801532e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015330:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015334:	2b00      	cmp	r3, #0
 8015336:	f000 8084 	beq.w	8015442 <_dtoa_r+0x4f2>
 801533a:	4b96      	ldr	r3, [pc, #600]	; (8015594 <_dtoa_r+0x644>)
 801533c:	2200      	movs	r2, #0
 801533e:	4640      	mov	r0, r8
 8015340:	4649      	mov	r1, r9
 8015342:	f7eb fbcb 	bl	8000adc <__aeabi_dcmplt>
 8015346:	2800      	cmp	r0, #0
 8015348:	d07b      	beq.n	8015442 <_dtoa_r+0x4f2>
 801534a:	9b04      	ldr	r3, [sp, #16]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d078      	beq.n	8015442 <_dtoa_r+0x4f2>
 8015350:	9b01      	ldr	r3, [sp, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	dd39      	ble.n	80153ca <_dtoa_r+0x47a>
 8015356:	4b90      	ldr	r3, [pc, #576]	; (8015598 <_dtoa_r+0x648>)
 8015358:	2200      	movs	r2, #0
 801535a:	4640      	mov	r0, r8
 801535c:	4649      	mov	r1, r9
 801535e:	f7eb f94b 	bl	80005f8 <__aeabi_dmul>
 8015362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015366:	9e01      	ldr	r6, [sp, #4]
 8015368:	f10b 37ff 	add.w	r7, fp, #4294967295
 801536c:	3501      	adds	r5, #1
 801536e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015372:	4628      	mov	r0, r5
 8015374:	f7eb f8d6 	bl	8000524 <__aeabi_i2d>
 8015378:	4642      	mov	r2, r8
 801537a:	464b      	mov	r3, r9
 801537c:	f7eb f93c 	bl	80005f8 <__aeabi_dmul>
 8015380:	4b86      	ldr	r3, [pc, #536]	; (801559c <_dtoa_r+0x64c>)
 8015382:	2200      	movs	r2, #0
 8015384:	f7ea ff82 	bl	800028c <__adddf3>
 8015388:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801538c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015390:	9303      	str	r3, [sp, #12]
 8015392:	2e00      	cmp	r6, #0
 8015394:	d158      	bne.n	8015448 <_dtoa_r+0x4f8>
 8015396:	4b82      	ldr	r3, [pc, #520]	; (80155a0 <_dtoa_r+0x650>)
 8015398:	2200      	movs	r2, #0
 801539a:	4640      	mov	r0, r8
 801539c:	4649      	mov	r1, r9
 801539e:	f7ea ff73 	bl	8000288 <__aeabi_dsub>
 80153a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153a6:	4680      	mov	r8, r0
 80153a8:	4689      	mov	r9, r1
 80153aa:	f7eb fbb5 	bl	8000b18 <__aeabi_dcmpgt>
 80153ae:	2800      	cmp	r0, #0
 80153b0:	f040 8296 	bne.w	80158e0 <_dtoa_r+0x990>
 80153b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80153b8:	4640      	mov	r0, r8
 80153ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153be:	4649      	mov	r1, r9
 80153c0:	f7eb fb8c 	bl	8000adc <__aeabi_dcmplt>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	f040 8289 	bne.w	80158dc <_dtoa_r+0x98c>
 80153ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80153ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f2c0 814e 	blt.w	8015672 <_dtoa_r+0x722>
 80153d6:	f1bb 0f0e 	cmp.w	fp, #14
 80153da:	f300 814a 	bgt.w	8015672 <_dtoa_r+0x722>
 80153de:	4b6b      	ldr	r3, [pc, #428]	; (801558c <_dtoa_r+0x63c>)
 80153e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80153e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	f280 80dc 	bge.w	80155a8 <_dtoa_r+0x658>
 80153f0:	9b04      	ldr	r3, [sp, #16]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f300 80d8 	bgt.w	80155a8 <_dtoa_r+0x658>
 80153f8:	f040 826f 	bne.w	80158da <_dtoa_r+0x98a>
 80153fc:	4b68      	ldr	r3, [pc, #416]	; (80155a0 <_dtoa_r+0x650>)
 80153fe:	2200      	movs	r2, #0
 8015400:	4640      	mov	r0, r8
 8015402:	4649      	mov	r1, r9
 8015404:	f7eb f8f8 	bl	80005f8 <__aeabi_dmul>
 8015408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801540c:	f7eb fb7a 	bl	8000b04 <__aeabi_dcmpge>
 8015410:	9e04      	ldr	r6, [sp, #16]
 8015412:	4637      	mov	r7, r6
 8015414:	2800      	cmp	r0, #0
 8015416:	f040 8245 	bne.w	80158a4 <_dtoa_r+0x954>
 801541a:	9d00      	ldr	r5, [sp, #0]
 801541c:	2331      	movs	r3, #49	; 0x31
 801541e:	f805 3b01 	strb.w	r3, [r5], #1
 8015422:	f10b 0b01 	add.w	fp, fp, #1
 8015426:	e241      	b.n	80158ac <_dtoa_r+0x95c>
 8015428:	07f2      	lsls	r2, r6, #31
 801542a:	d505      	bpl.n	8015438 <_dtoa_r+0x4e8>
 801542c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015430:	f7eb f8e2 	bl	80005f8 <__aeabi_dmul>
 8015434:	3501      	adds	r5, #1
 8015436:	2301      	movs	r3, #1
 8015438:	1076      	asrs	r6, r6, #1
 801543a:	3708      	adds	r7, #8
 801543c:	e773      	b.n	8015326 <_dtoa_r+0x3d6>
 801543e:	2502      	movs	r5, #2
 8015440:	e775      	b.n	801532e <_dtoa_r+0x3de>
 8015442:	9e04      	ldr	r6, [sp, #16]
 8015444:	465f      	mov	r7, fp
 8015446:	e792      	b.n	801536e <_dtoa_r+0x41e>
 8015448:	9900      	ldr	r1, [sp, #0]
 801544a:	4b50      	ldr	r3, [pc, #320]	; (801558c <_dtoa_r+0x63c>)
 801544c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015450:	4431      	add	r1, r6
 8015452:	9102      	str	r1, [sp, #8]
 8015454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015456:	eeb0 9a47 	vmov.f32	s18, s14
 801545a:	eef0 9a67 	vmov.f32	s19, s15
 801545e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015466:	2900      	cmp	r1, #0
 8015468:	d044      	beq.n	80154f4 <_dtoa_r+0x5a4>
 801546a:	494e      	ldr	r1, [pc, #312]	; (80155a4 <_dtoa_r+0x654>)
 801546c:	2000      	movs	r0, #0
 801546e:	f7eb f9ed 	bl	800084c <__aeabi_ddiv>
 8015472:	ec53 2b19 	vmov	r2, r3, d9
 8015476:	f7ea ff07 	bl	8000288 <__aeabi_dsub>
 801547a:	9d00      	ldr	r5, [sp, #0]
 801547c:	ec41 0b19 	vmov	d9, r0, r1
 8015480:	4649      	mov	r1, r9
 8015482:	4640      	mov	r0, r8
 8015484:	f7eb fb68 	bl	8000b58 <__aeabi_d2iz>
 8015488:	4606      	mov	r6, r0
 801548a:	f7eb f84b 	bl	8000524 <__aeabi_i2d>
 801548e:	4602      	mov	r2, r0
 8015490:	460b      	mov	r3, r1
 8015492:	4640      	mov	r0, r8
 8015494:	4649      	mov	r1, r9
 8015496:	f7ea fef7 	bl	8000288 <__aeabi_dsub>
 801549a:	3630      	adds	r6, #48	; 0x30
 801549c:	f805 6b01 	strb.w	r6, [r5], #1
 80154a0:	ec53 2b19 	vmov	r2, r3, d9
 80154a4:	4680      	mov	r8, r0
 80154a6:	4689      	mov	r9, r1
 80154a8:	f7eb fb18 	bl	8000adc <__aeabi_dcmplt>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d164      	bne.n	801557a <_dtoa_r+0x62a>
 80154b0:	4642      	mov	r2, r8
 80154b2:	464b      	mov	r3, r9
 80154b4:	4937      	ldr	r1, [pc, #220]	; (8015594 <_dtoa_r+0x644>)
 80154b6:	2000      	movs	r0, #0
 80154b8:	f7ea fee6 	bl	8000288 <__aeabi_dsub>
 80154bc:	ec53 2b19 	vmov	r2, r3, d9
 80154c0:	f7eb fb0c 	bl	8000adc <__aeabi_dcmplt>
 80154c4:	2800      	cmp	r0, #0
 80154c6:	f040 80b6 	bne.w	8015636 <_dtoa_r+0x6e6>
 80154ca:	9b02      	ldr	r3, [sp, #8]
 80154cc:	429d      	cmp	r5, r3
 80154ce:	f43f af7c 	beq.w	80153ca <_dtoa_r+0x47a>
 80154d2:	4b31      	ldr	r3, [pc, #196]	; (8015598 <_dtoa_r+0x648>)
 80154d4:	ec51 0b19 	vmov	r0, r1, d9
 80154d8:	2200      	movs	r2, #0
 80154da:	f7eb f88d 	bl	80005f8 <__aeabi_dmul>
 80154de:	4b2e      	ldr	r3, [pc, #184]	; (8015598 <_dtoa_r+0x648>)
 80154e0:	ec41 0b19 	vmov	d9, r0, r1
 80154e4:	2200      	movs	r2, #0
 80154e6:	4640      	mov	r0, r8
 80154e8:	4649      	mov	r1, r9
 80154ea:	f7eb f885 	bl	80005f8 <__aeabi_dmul>
 80154ee:	4680      	mov	r8, r0
 80154f0:	4689      	mov	r9, r1
 80154f2:	e7c5      	b.n	8015480 <_dtoa_r+0x530>
 80154f4:	ec51 0b17 	vmov	r0, r1, d7
 80154f8:	f7eb f87e 	bl	80005f8 <__aeabi_dmul>
 80154fc:	9b02      	ldr	r3, [sp, #8]
 80154fe:	9d00      	ldr	r5, [sp, #0]
 8015500:	930f      	str	r3, [sp, #60]	; 0x3c
 8015502:	ec41 0b19 	vmov	d9, r0, r1
 8015506:	4649      	mov	r1, r9
 8015508:	4640      	mov	r0, r8
 801550a:	f7eb fb25 	bl	8000b58 <__aeabi_d2iz>
 801550e:	4606      	mov	r6, r0
 8015510:	f7eb f808 	bl	8000524 <__aeabi_i2d>
 8015514:	3630      	adds	r6, #48	; 0x30
 8015516:	4602      	mov	r2, r0
 8015518:	460b      	mov	r3, r1
 801551a:	4640      	mov	r0, r8
 801551c:	4649      	mov	r1, r9
 801551e:	f7ea feb3 	bl	8000288 <__aeabi_dsub>
 8015522:	f805 6b01 	strb.w	r6, [r5], #1
 8015526:	9b02      	ldr	r3, [sp, #8]
 8015528:	429d      	cmp	r5, r3
 801552a:	4680      	mov	r8, r0
 801552c:	4689      	mov	r9, r1
 801552e:	f04f 0200 	mov.w	r2, #0
 8015532:	d124      	bne.n	801557e <_dtoa_r+0x62e>
 8015534:	4b1b      	ldr	r3, [pc, #108]	; (80155a4 <_dtoa_r+0x654>)
 8015536:	ec51 0b19 	vmov	r0, r1, d9
 801553a:	f7ea fea7 	bl	800028c <__adddf3>
 801553e:	4602      	mov	r2, r0
 8015540:	460b      	mov	r3, r1
 8015542:	4640      	mov	r0, r8
 8015544:	4649      	mov	r1, r9
 8015546:	f7eb fae7 	bl	8000b18 <__aeabi_dcmpgt>
 801554a:	2800      	cmp	r0, #0
 801554c:	d173      	bne.n	8015636 <_dtoa_r+0x6e6>
 801554e:	ec53 2b19 	vmov	r2, r3, d9
 8015552:	4914      	ldr	r1, [pc, #80]	; (80155a4 <_dtoa_r+0x654>)
 8015554:	2000      	movs	r0, #0
 8015556:	f7ea fe97 	bl	8000288 <__aeabi_dsub>
 801555a:	4602      	mov	r2, r0
 801555c:	460b      	mov	r3, r1
 801555e:	4640      	mov	r0, r8
 8015560:	4649      	mov	r1, r9
 8015562:	f7eb fabb 	bl	8000adc <__aeabi_dcmplt>
 8015566:	2800      	cmp	r0, #0
 8015568:	f43f af2f 	beq.w	80153ca <_dtoa_r+0x47a>
 801556c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801556e:	1e6b      	subs	r3, r5, #1
 8015570:	930f      	str	r3, [sp, #60]	; 0x3c
 8015572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015576:	2b30      	cmp	r3, #48	; 0x30
 8015578:	d0f8      	beq.n	801556c <_dtoa_r+0x61c>
 801557a:	46bb      	mov	fp, r7
 801557c:	e04a      	b.n	8015614 <_dtoa_r+0x6c4>
 801557e:	4b06      	ldr	r3, [pc, #24]	; (8015598 <_dtoa_r+0x648>)
 8015580:	f7eb f83a 	bl	80005f8 <__aeabi_dmul>
 8015584:	4680      	mov	r8, r0
 8015586:	4689      	mov	r9, r1
 8015588:	e7bd      	b.n	8015506 <_dtoa_r+0x5b6>
 801558a:	bf00      	nop
 801558c:	0801a220 	.word	0x0801a220
 8015590:	0801a1f8 	.word	0x0801a1f8
 8015594:	3ff00000 	.word	0x3ff00000
 8015598:	40240000 	.word	0x40240000
 801559c:	401c0000 	.word	0x401c0000
 80155a0:	40140000 	.word	0x40140000
 80155a4:	3fe00000 	.word	0x3fe00000
 80155a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80155ac:	9d00      	ldr	r5, [sp, #0]
 80155ae:	4642      	mov	r2, r8
 80155b0:	464b      	mov	r3, r9
 80155b2:	4630      	mov	r0, r6
 80155b4:	4639      	mov	r1, r7
 80155b6:	f7eb f949 	bl	800084c <__aeabi_ddiv>
 80155ba:	f7eb facd 	bl	8000b58 <__aeabi_d2iz>
 80155be:	9001      	str	r0, [sp, #4]
 80155c0:	f7ea ffb0 	bl	8000524 <__aeabi_i2d>
 80155c4:	4642      	mov	r2, r8
 80155c6:	464b      	mov	r3, r9
 80155c8:	f7eb f816 	bl	80005f8 <__aeabi_dmul>
 80155cc:	4602      	mov	r2, r0
 80155ce:	460b      	mov	r3, r1
 80155d0:	4630      	mov	r0, r6
 80155d2:	4639      	mov	r1, r7
 80155d4:	f7ea fe58 	bl	8000288 <__aeabi_dsub>
 80155d8:	9e01      	ldr	r6, [sp, #4]
 80155da:	9f04      	ldr	r7, [sp, #16]
 80155dc:	3630      	adds	r6, #48	; 0x30
 80155de:	f805 6b01 	strb.w	r6, [r5], #1
 80155e2:	9e00      	ldr	r6, [sp, #0]
 80155e4:	1bae      	subs	r6, r5, r6
 80155e6:	42b7      	cmp	r7, r6
 80155e8:	4602      	mov	r2, r0
 80155ea:	460b      	mov	r3, r1
 80155ec:	d134      	bne.n	8015658 <_dtoa_r+0x708>
 80155ee:	f7ea fe4d 	bl	800028c <__adddf3>
 80155f2:	4642      	mov	r2, r8
 80155f4:	464b      	mov	r3, r9
 80155f6:	4606      	mov	r6, r0
 80155f8:	460f      	mov	r7, r1
 80155fa:	f7eb fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 80155fe:	b9c8      	cbnz	r0, 8015634 <_dtoa_r+0x6e4>
 8015600:	4642      	mov	r2, r8
 8015602:	464b      	mov	r3, r9
 8015604:	4630      	mov	r0, r6
 8015606:	4639      	mov	r1, r7
 8015608:	f7eb fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 801560c:	b110      	cbz	r0, 8015614 <_dtoa_r+0x6c4>
 801560e:	9b01      	ldr	r3, [sp, #4]
 8015610:	07db      	lsls	r3, r3, #31
 8015612:	d40f      	bmi.n	8015634 <_dtoa_r+0x6e4>
 8015614:	4651      	mov	r1, sl
 8015616:	4620      	mov	r0, r4
 8015618:	f000 fbcc 	bl	8015db4 <_Bfree>
 801561c:	2300      	movs	r3, #0
 801561e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015620:	702b      	strb	r3, [r5, #0]
 8015622:	f10b 0301 	add.w	r3, fp, #1
 8015626:	6013      	str	r3, [r2, #0]
 8015628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801562a:	2b00      	cmp	r3, #0
 801562c:	f43f ace2 	beq.w	8014ff4 <_dtoa_r+0xa4>
 8015630:	601d      	str	r5, [r3, #0]
 8015632:	e4df      	b.n	8014ff4 <_dtoa_r+0xa4>
 8015634:	465f      	mov	r7, fp
 8015636:	462b      	mov	r3, r5
 8015638:	461d      	mov	r5, r3
 801563a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801563e:	2a39      	cmp	r2, #57	; 0x39
 8015640:	d106      	bne.n	8015650 <_dtoa_r+0x700>
 8015642:	9a00      	ldr	r2, [sp, #0]
 8015644:	429a      	cmp	r2, r3
 8015646:	d1f7      	bne.n	8015638 <_dtoa_r+0x6e8>
 8015648:	9900      	ldr	r1, [sp, #0]
 801564a:	2230      	movs	r2, #48	; 0x30
 801564c:	3701      	adds	r7, #1
 801564e:	700a      	strb	r2, [r1, #0]
 8015650:	781a      	ldrb	r2, [r3, #0]
 8015652:	3201      	adds	r2, #1
 8015654:	701a      	strb	r2, [r3, #0]
 8015656:	e790      	b.n	801557a <_dtoa_r+0x62a>
 8015658:	4ba3      	ldr	r3, [pc, #652]	; (80158e8 <_dtoa_r+0x998>)
 801565a:	2200      	movs	r2, #0
 801565c:	f7ea ffcc 	bl	80005f8 <__aeabi_dmul>
 8015660:	2200      	movs	r2, #0
 8015662:	2300      	movs	r3, #0
 8015664:	4606      	mov	r6, r0
 8015666:	460f      	mov	r7, r1
 8015668:	f7eb fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801566c:	2800      	cmp	r0, #0
 801566e:	d09e      	beq.n	80155ae <_dtoa_r+0x65e>
 8015670:	e7d0      	b.n	8015614 <_dtoa_r+0x6c4>
 8015672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015674:	2a00      	cmp	r2, #0
 8015676:	f000 80ca 	beq.w	801580e <_dtoa_r+0x8be>
 801567a:	9a07      	ldr	r2, [sp, #28]
 801567c:	2a01      	cmp	r2, #1
 801567e:	f300 80ad 	bgt.w	80157dc <_dtoa_r+0x88c>
 8015682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015684:	2a00      	cmp	r2, #0
 8015686:	f000 80a5 	beq.w	80157d4 <_dtoa_r+0x884>
 801568a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801568e:	9e08      	ldr	r6, [sp, #32]
 8015690:	9d05      	ldr	r5, [sp, #20]
 8015692:	9a05      	ldr	r2, [sp, #20]
 8015694:	441a      	add	r2, r3
 8015696:	9205      	str	r2, [sp, #20]
 8015698:	9a06      	ldr	r2, [sp, #24]
 801569a:	2101      	movs	r1, #1
 801569c:	441a      	add	r2, r3
 801569e:	4620      	mov	r0, r4
 80156a0:	9206      	str	r2, [sp, #24]
 80156a2:	f000 fc87 	bl	8015fb4 <__i2b>
 80156a6:	4607      	mov	r7, r0
 80156a8:	b165      	cbz	r5, 80156c4 <_dtoa_r+0x774>
 80156aa:	9b06      	ldr	r3, [sp, #24]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	dd09      	ble.n	80156c4 <_dtoa_r+0x774>
 80156b0:	42ab      	cmp	r3, r5
 80156b2:	9a05      	ldr	r2, [sp, #20]
 80156b4:	bfa8      	it	ge
 80156b6:	462b      	movge	r3, r5
 80156b8:	1ad2      	subs	r2, r2, r3
 80156ba:	9205      	str	r2, [sp, #20]
 80156bc:	9a06      	ldr	r2, [sp, #24]
 80156be:	1aed      	subs	r5, r5, r3
 80156c0:	1ad3      	subs	r3, r2, r3
 80156c2:	9306      	str	r3, [sp, #24]
 80156c4:	9b08      	ldr	r3, [sp, #32]
 80156c6:	b1f3      	cbz	r3, 8015706 <_dtoa_r+0x7b6>
 80156c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f000 80a3 	beq.w	8015816 <_dtoa_r+0x8c6>
 80156d0:	2e00      	cmp	r6, #0
 80156d2:	dd10      	ble.n	80156f6 <_dtoa_r+0x7a6>
 80156d4:	4639      	mov	r1, r7
 80156d6:	4632      	mov	r2, r6
 80156d8:	4620      	mov	r0, r4
 80156da:	f000 fd2b 	bl	8016134 <__pow5mult>
 80156de:	4652      	mov	r2, sl
 80156e0:	4601      	mov	r1, r0
 80156e2:	4607      	mov	r7, r0
 80156e4:	4620      	mov	r0, r4
 80156e6:	f000 fc7b 	bl	8015fe0 <__multiply>
 80156ea:	4651      	mov	r1, sl
 80156ec:	4680      	mov	r8, r0
 80156ee:	4620      	mov	r0, r4
 80156f0:	f000 fb60 	bl	8015db4 <_Bfree>
 80156f4:	46c2      	mov	sl, r8
 80156f6:	9b08      	ldr	r3, [sp, #32]
 80156f8:	1b9a      	subs	r2, r3, r6
 80156fa:	d004      	beq.n	8015706 <_dtoa_r+0x7b6>
 80156fc:	4651      	mov	r1, sl
 80156fe:	4620      	mov	r0, r4
 8015700:	f000 fd18 	bl	8016134 <__pow5mult>
 8015704:	4682      	mov	sl, r0
 8015706:	2101      	movs	r1, #1
 8015708:	4620      	mov	r0, r4
 801570a:	f000 fc53 	bl	8015fb4 <__i2b>
 801570e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015710:	2b00      	cmp	r3, #0
 8015712:	4606      	mov	r6, r0
 8015714:	f340 8081 	ble.w	801581a <_dtoa_r+0x8ca>
 8015718:	461a      	mov	r2, r3
 801571a:	4601      	mov	r1, r0
 801571c:	4620      	mov	r0, r4
 801571e:	f000 fd09 	bl	8016134 <__pow5mult>
 8015722:	9b07      	ldr	r3, [sp, #28]
 8015724:	2b01      	cmp	r3, #1
 8015726:	4606      	mov	r6, r0
 8015728:	dd7a      	ble.n	8015820 <_dtoa_r+0x8d0>
 801572a:	f04f 0800 	mov.w	r8, #0
 801572e:	6933      	ldr	r3, [r6, #16]
 8015730:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015734:	6918      	ldr	r0, [r3, #16]
 8015736:	f000 fbef 	bl	8015f18 <__hi0bits>
 801573a:	f1c0 0020 	rsb	r0, r0, #32
 801573e:	9b06      	ldr	r3, [sp, #24]
 8015740:	4418      	add	r0, r3
 8015742:	f010 001f 	ands.w	r0, r0, #31
 8015746:	f000 8094 	beq.w	8015872 <_dtoa_r+0x922>
 801574a:	f1c0 0320 	rsb	r3, r0, #32
 801574e:	2b04      	cmp	r3, #4
 8015750:	f340 8085 	ble.w	801585e <_dtoa_r+0x90e>
 8015754:	9b05      	ldr	r3, [sp, #20]
 8015756:	f1c0 001c 	rsb	r0, r0, #28
 801575a:	4403      	add	r3, r0
 801575c:	9305      	str	r3, [sp, #20]
 801575e:	9b06      	ldr	r3, [sp, #24]
 8015760:	4403      	add	r3, r0
 8015762:	4405      	add	r5, r0
 8015764:	9306      	str	r3, [sp, #24]
 8015766:	9b05      	ldr	r3, [sp, #20]
 8015768:	2b00      	cmp	r3, #0
 801576a:	dd05      	ble.n	8015778 <_dtoa_r+0x828>
 801576c:	4651      	mov	r1, sl
 801576e:	461a      	mov	r2, r3
 8015770:	4620      	mov	r0, r4
 8015772:	f000 fd39 	bl	80161e8 <__lshift>
 8015776:	4682      	mov	sl, r0
 8015778:	9b06      	ldr	r3, [sp, #24]
 801577a:	2b00      	cmp	r3, #0
 801577c:	dd05      	ble.n	801578a <_dtoa_r+0x83a>
 801577e:	4631      	mov	r1, r6
 8015780:	461a      	mov	r2, r3
 8015782:	4620      	mov	r0, r4
 8015784:	f000 fd30 	bl	80161e8 <__lshift>
 8015788:	4606      	mov	r6, r0
 801578a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801578c:	2b00      	cmp	r3, #0
 801578e:	d072      	beq.n	8015876 <_dtoa_r+0x926>
 8015790:	4631      	mov	r1, r6
 8015792:	4650      	mov	r0, sl
 8015794:	f000 fd94 	bl	80162c0 <__mcmp>
 8015798:	2800      	cmp	r0, #0
 801579a:	da6c      	bge.n	8015876 <_dtoa_r+0x926>
 801579c:	2300      	movs	r3, #0
 801579e:	4651      	mov	r1, sl
 80157a0:	220a      	movs	r2, #10
 80157a2:	4620      	mov	r0, r4
 80157a4:	f000 fb28 	bl	8015df8 <__multadd>
 80157a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80157ae:	4682      	mov	sl, r0
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f000 81b0 	beq.w	8015b16 <_dtoa_r+0xbc6>
 80157b6:	2300      	movs	r3, #0
 80157b8:	4639      	mov	r1, r7
 80157ba:	220a      	movs	r2, #10
 80157bc:	4620      	mov	r0, r4
 80157be:	f000 fb1b 	bl	8015df8 <__multadd>
 80157c2:	9b01      	ldr	r3, [sp, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	4607      	mov	r7, r0
 80157c8:	f300 8096 	bgt.w	80158f8 <_dtoa_r+0x9a8>
 80157cc:	9b07      	ldr	r3, [sp, #28]
 80157ce:	2b02      	cmp	r3, #2
 80157d0:	dc59      	bgt.n	8015886 <_dtoa_r+0x936>
 80157d2:	e091      	b.n	80158f8 <_dtoa_r+0x9a8>
 80157d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80157da:	e758      	b.n	801568e <_dtoa_r+0x73e>
 80157dc:	9b04      	ldr	r3, [sp, #16]
 80157de:	1e5e      	subs	r6, r3, #1
 80157e0:	9b08      	ldr	r3, [sp, #32]
 80157e2:	42b3      	cmp	r3, r6
 80157e4:	bfbf      	itttt	lt
 80157e6:	9b08      	ldrlt	r3, [sp, #32]
 80157e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80157ea:	9608      	strlt	r6, [sp, #32]
 80157ec:	1af3      	sublt	r3, r6, r3
 80157ee:	bfb4      	ite	lt
 80157f0:	18d2      	addlt	r2, r2, r3
 80157f2:	1b9e      	subge	r6, r3, r6
 80157f4:	9b04      	ldr	r3, [sp, #16]
 80157f6:	bfbc      	itt	lt
 80157f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80157fa:	2600      	movlt	r6, #0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	bfb7      	itett	lt
 8015800:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015804:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015808:	1a9d      	sublt	r5, r3, r2
 801580a:	2300      	movlt	r3, #0
 801580c:	e741      	b.n	8015692 <_dtoa_r+0x742>
 801580e:	9e08      	ldr	r6, [sp, #32]
 8015810:	9d05      	ldr	r5, [sp, #20]
 8015812:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015814:	e748      	b.n	80156a8 <_dtoa_r+0x758>
 8015816:	9a08      	ldr	r2, [sp, #32]
 8015818:	e770      	b.n	80156fc <_dtoa_r+0x7ac>
 801581a:	9b07      	ldr	r3, [sp, #28]
 801581c:	2b01      	cmp	r3, #1
 801581e:	dc19      	bgt.n	8015854 <_dtoa_r+0x904>
 8015820:	9b02      	ldr	r3, [sp, #8]
 8015822:	b9bb      	cbnz	r3, 8015854 <_dtoa_r+0x904>
 8015824:	9b03      	ldr	r3, [sp, #12]
 8015826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801582a:	b99b      	cbnz	r3, 8015854 <_dtoa_r+0x904>
 801582c:	9b03      	ldr	r3, [sp, #12]
 801582e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015832:	0d1b      	lsrs	r3, r3, #20
 8015834:	051b      	lsls	r3, r3, #20
 8015836:	b183      	cbz	r3, 801585a <_dtoa_r+0x90a>
 8015838:	9b05      	ldr	r3, [sp, #20]
 801583a:	3301      	adds	r3, #1
 801583c:	9305      	str	r3, [sp, #20]
 801583e:	9b06      	ldr	r3, [sp, #24]
 8015840:	3301      	adds	r3, #1
 8015842:	9306      	str	r3, [sp, #24]
 8015844:	f04f 0801 	mov.w	r8, #1
 8015848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801584a:	2b00      	cmp	r3, #0
 801584c:	f47f af6f 	bne.w	801572e <_dtoa_r+0x7de>
 8015850:	2001      	movs	r0, #1
 8015852:	e774      	b.n	801573e <_dtoa_r+0x7ee>
 8015854:	f04f 0800 	mov.w	r8, #0
 8015858:	e7f6      	b.n	8015848 <_dtoa_r+0x8f8>
 801585a:	4698      	mov	r8, r3
 801585c:	e7f4      	b.n	8015848 <_dtoa_r+0x8f8>
 801585e:	d082      	beq.n	8015766 <_dtoa_r+0x816>
 8015860:	9a05      	ldr	r2, [sp, #20]
 8015862:	331c      	adds	r3, #28
 8015864:	441a      	add	r2, r3
 8015866:	9205      	str	r2, [sp, #20]
 8015868:	9a06      	ldr	r2, [sp, #24]
 801586a:	441a      	add	r2, r3
 801586c:	441d      	add	r5, r3
 801586e:	9206      	str	r2, [sp, #24]
 8015870:	e779      	b.n	8015766 <_dtoa_r+0x816>
 8015872:	4603      	mov	r3, r0
 8015874:	e7f4      	b.n	8015860 <_dtoa_r+0x910>
 8015876:	9b04      	ldr	r3, [sp, #16]
 8015878:	2b00      	cmp	r3, #0
 801587a:	dc37      	bgt.n	80158ec <_dtoa_r+0x99c>
 801587c:	9b07      	ldr	r3, [sp, #28]
 801587e:	2b02      	cmp	r3, #2
 8015880:	dd34      	ble.n	80158ec <_dtoa_r+0x99c>
 8015882:	9b04      	ldr	r3, [sp, #16]
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	9b01      	ldr	r3, [sp, #4]
 8015888:	b963      	cbnz	r3, 80158a4 <_dtoa_r+0x954>
 801588a:	4631      	mov	r1, r6
 801588c:	2205      	movs	r2, #5
 801588e:	4620      	mov	r0, r4
 8015890:	f000 fab2 	bl	8015df8 <__multadd>
 8015894:	4601      	mov	r1, r0
 8015896:	4606      	mov	r6, r0
 8015898:	4650      	mov	r0, sl
 801589a:	f000 fd11 	bl	80162c0 <__mcmp>
 801589e:	2800      	cmp	r0, #0
 80158a0:	f73f adbb 	bgt.w	801541a <_dtoa_r+0x4ca>
 80158a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158a6:	9d00      	ldr	r5, [sp, #0]
 80158a8:	ea6f 0b03 	mvn.w	fp, r3
 80158ac:	f04f 0800 	mov.w	r8, #0
 80158b0:	4631      	mov	r1, r6
 80158b2:	4620      	mov	r0, r4
 80158b4:	f000 fa7e 	bl	8015db4 <_Bfree>
 80158b8:	2f00      	cmp	r7, #0
 80158ba:	f43f aeab 	beq.w	8015614 <_dtoa_r+0x6c4>
 80158be:	f1b8 0f00 	cmp.w	r8, #0
 80158c2:	d005      	beq.n	80158d0 <_dtoa_r+0x980>
 80158c4:	45b8      	cmp	r8, r7
 80158c6:	d003      	beq.n	80158d0 <_dtoa_r+0x980>
 80158c8:	4641      	mov	r1, r8
 80158ca:	4620      	mov	r0, r4
 80158cc:	f000 fa72 	bl	8015db4 <_Bfree>
 80158d0:	4639      	mov	r1, r7
 80158d2:	4620      	mov	r0, r4
 80158d4:	f000 fa6e 	bl	8015db4 <_Bfree>
 80158d8:	e69c      	b.n	8015614 <_dtoa_r+0x6c4>
 80158da:	2600      	movs	r6, #0
 80158dc:	4637      	mov	r7, r6
 80158de:	e7e1      	b.n	80158a4 <_dtoa_r+0x954>
 80158e0:	46bb      	mov	fp, r7
 80158e2:	4637      	mov	r7, r6
 80158e4:	e599      	b.n	801541a <_dtoa_r+0x4ca>
 80158e6:	bf00      	nop
 80158e8:	40240000 	.word	0x40240000
 80158ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	f000 80c8 	beq.w	8015a84 <_dtoa_r+0xb34>
 80158f4:	9b04      	ldr	r3, [sp, #16]
 80158f6:	9301      	str	r3, [sp, #4]
 80158f8:	2d00      	cmp	r5, #0
 80158fa:	dd05      	ble.n	8015908 <_dtoa_r+0x9b8>
 80158fc:	4639      	mov	r1, r7
 80158fe:	462a      	mov	r2, r5
 8015900:	4620      	mov	r0, r4
 8015902:	f000 fc71 	bl	80161e8 <__lshift>
 8015906:	4607      	mov	r7, r0
 8015908:	f1b8 0f00 	cmp.w	r8, #0
 801590c:	d05b      	beq.n	80159c6 <_dtoa_r+0xa76>
 801590e:	6879      	ldr	r1, [r7, #4]
 8015910:	4620      	mov	r0, r4
 8015912:	f000 fa0f 	bl	8015d34 <_Balloc>
 8015916:	4605      	mov	r5, r0
 8015918:	b928      	cbnz	r0, 8015926 <_dtoa_r+0x9d6>
 801591a:	4b83      	ldr	r3, [pc, #524]	; (8015b28 <_dtoa_r+0xbd8>)
 801591c:	4602      	mov	r2, r0
 801591e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015922:	f7ff bb2e 	b.w	8014f82 <_dtoa_r+0x32>
 8015926:	693a      	ldr	r2, [r7, #16]
 8015928:	3202      	adds	r2, #2
 801592a:	0092      	lsls	r2, r2, #2
 801592c:	f107 010c 	add.w	r1, r7, #12
 8015930:	300c      	adds	r0, #12
 8015932:	f7ff fa68 	bl	8014e06 <memcpy>
 8015936:	2201      	movs	r2, #1
 8015938:	4629      	mov	r1, r5
 801593a:	4620      	mov	r0, r4
 801593c:	f000 fc54 	bl	80161e8 <__lshift>
 8015940:	9b00      	ldr	r3, [sp, #0]
 8015942:	3301      	adds	r3, #1
 8015944:	9304      	str	r3, [sp, #16]
 8015946:	e9dd 2300 	ldrd	r2, r3, [sp]
 801594a:	4413      	add	r3, r2
 801594c:	9308      	str	r3, [sp, #32]
 801594e:	9b02      	ldr	r3, [sp, #8]
 8015950:	f003 0301 	and.w	r3, r3, #1
 8015954:	46b8      	mov	r8, r7
 8015956:	9306      	str	r3, [sp, #24]
 8015958:	4607      	mov	r7, r0
 801595a:	9b04      	ldr	r3, [sp, #16]
 801595c:	4631      	mov	r1, r6
 801595e:	3b01      	subs	r3, #1
 8015960:	4650      	mov	r0, sl
 8015962:	9301      	str	r3, [sp, #4]
 8015964:	f7ff fa6b 	bl	8014e3e <quorem>
 8015968:	4641      	mov	r1, r8
 801596a:	9002      	str	r0, [sp, #8]
 801596c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015970:	4650      	mov	r0, sl
 8015972:	f000 fca5 	bl	80162c0 <__mcmp>
 8015976:	463a      	mov	r2, r7
 8015978:	9005      	str	r0, [sp, #20]
 801597a:	4631      	mov	r1, r6
 801597c:	4620      	mov	r0, r4
 801597e:	f000 fcbb 	bl	80162f8 <__mdiff>
 8015982:	68c2      	ldr	r2, [r0, #12]
 8015984:	4605      	mov	r5, r0
 8015986:	bb02      	cbnz	r2, 80159ca <_dtoa_r+0xa7a>
 8015988:	4601      	mov	r1, r0
 801598a:	4650      	mov	r0, sl
 801598c:	f000 fc98 	bl	80162c0 <__mcmp>
 8015990:	4602      	mov	r2, r0
 8015992:	4629      	mov	r1, r5
 8015994:	4620      	mov	r0, r4
 8015996:	9209      	str	r2, [sp, #36]	; 0x24
 8015998:	f000 fa0c 	bl	8015db4 <_Bfree>
 801599c:	9b07      	ldr	r3, [sp, #28]
 801599e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159a0:	9d04      	ldr	r5, [sp, #16]
 80159a2:	ea43 0102 	orr.w	r1, r3, r2
 80159a6:	9b06      	ldr	r3, [sp, #24]
 80159a8:	4319      	orrs	r1, r3
 80159aa:	d110      	bne.n	80159ce <_dtoa_r+0xa7e>
 80159ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80159b0:	d029      	beq.n	8015a06 <_dtoa_r+0xab6>
 80159b2:	9b05      	ldr	r3, [sp, #20]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	dd02      	ble.n	80159be <_dtoa_r+0xa6e>
 80159b8:	9b02      	ldr	r3, [sp, #8]
 80159ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80159be:	9b01      	ldr	r3, [sp, #4]
 80159c0:	f883 9000 	strb.w	r9, [r3]
 80159c4:	e774      	b.n	80158b0 <_dtoa_r+0x960>
 80159c6:	4638      	mov	r0, r7
 80159c8:	e7ba      	b.n	8015940 <_dtoa_r+0x9f0>
 80159ca:	2201      	movs	r2, #1
 80159cc:	e7e1      	b.n	8015992 <_dtoa_r+0xa42>
 80159ce:	9b05      	ldr	r3, [sp, #20]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	db04      	blt.n	80159de <_dtoa_r+0xa8e>
 80159d4:	9907      	ldr	r1, [sp, #28]
 80159d6:	430b      	orrs	r3, r1
 80159d8:	9906      	ldr	r1, [sp, #24]
 80159da:	430b      	orrs	r3, r1
 80159dc:	d120      	bne.n	8015a20 <_dtoa_r+0xad0>
 80159de:	2a00      	cmp	r2, #0
 80159e0:	dded      	ble.n	80159be <_dtoa_r+0xa6e>
 80159e2:	4651      	mov	r1, sl
 80159e4:	2201      	movs	r2, #1
 80159e6:	4620      	mov	r0, r4
 80159e8:	f000 fbfe 	bl	80161e8 <__lshift>
 80159ec:	4631      	mov	r1, r6
 80159ee:	4682      	mov	sl, r0
 80159f0:	f000 fc66 	bl	80162c0 <__mcmp>
 80159f4:	2800      	cmp	r0, #0
 80159f6:	dc03      	bgt.n	8015a00 <_dtoa_r+0xab0>
 80159f8:	d1e1      	bne.n	80159be <_dtoa_r+0xa6e>
 80159fa:	f019 0f01 	tst.w	r9, #1
 80159fe:	d0de      	beq.n	80159be <_dtoa_r+0xa6e>
 8015a00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015a04:	d1d8      	bne.n	80159b8 <_dtoa_r+0xa68>
 8015a06:	9a01      	ldr	r2, [sp, #4]
 8015a08:	2339      	movs	r3, #57	; 0x39
 8015a0a:	7013      	strb	r3, [r2, #0]
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	461d      	mov	r5, r3
 8015a10:	3b01      	subs	r3, #1
 8015a12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015a16:	2a39      	cmp	r2, #57	; 0x39
 8015a18:	d06c      	beq.n	8015af4 <_dtoa_r+0xba4>
 8015a1a:	3201      	adds	r2, #1
 8015a1c:	701a      	strb	r2, [r3, #0]
 8015a1e:	e747      	b.n	80158b0 <_dtoa_r+0x960>
 8015a20:	2a00      	cmp	r2, #0
 8015a22:	dd07      	ble.n	8015a34 <_dtoa_r+0xae4>
 8015a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015a28:	d0ed      	beq.n	8015a06 <_dtoa_r+0xab6>
 8015a2a:	9a01      	ldr	r2, [sp, #4]
 8015a2c:	f109 0301 	add.w	r3, r9, #1
 8015a30:	7013      	strb	r3, [r2, #0]
 8015a32:	e73d      	b.n	80158b0 <_dtoa_r+0x960>
 8015a34:	9b04      	ldr	r3, [sp, #16]
 8015a36:	9a08      	ldr	r2, [sp, #32]
 8015a38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d043      	beq.n	8015ac8 <_dtoa_r+0xb78>
 8015a40:	4651      	mov	r1, sl
 8015a42:	2300      	movs	r3, #0
 8015a44:	220a      	movs	r2, #10
 8015a46:	4620      	mov	r0, r4
 8015a48:	f000 f9d6 	bl	8015df8 <__multadd>
 8015a4c:	45b8      	cmp	r8, r7
 8015a4e:	4682      	mov	sl, r0
 8015a50:	f04f 0300 	mov.w	r3, #0
 8015a54:	f04f 020a 	mov.w	r2, #10
 8015a58:	4641      	mov	r1, r8
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	d107      	bne.n	8015a6e <_dtoa_r+0xb1e>
 8015a5e:	f000 f9cb 	bl	8015df8 <__multadd>
 8015a62:	4680      	mov	r8, r0
 8015a64:	4607      	mov	r7, r0
 8015a66:	9b04      	ldr	r3, [sp, #16]
 8015a68:	3301      	adds	r3, #1
 8015a6a:	9304      	str	r3, [sp, #16]
 8015a6c:	e775      	b.n	801595a <_dtoa_r+0xa0a>
 8015a6e:	f000 f9c3 	bl	8015df8 <__multadd>
 8015a72:	4639      	mov	r1, r7
 8015a74:	4680      	mov	r8, r0
 8015a76:	2300      	movs	r3, #0
 8015a78:	220a      	movs	r2, #10
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	f000 f9bc 	bl	8015df8 <__multadd>
 8015a80:	4607      	mov	r7, r0
 8015a82:	e7f0      	b.n	8015a66 <_dtoa_r+0xb16>
 8015a84:	9b04      	ldr	r3, [sp, #16]
 8015a86:	9301      	str	r3, [sp, #4]
 8015a88:	9d00      	ldr	r5, [sp, #0]
 8015a8a:	4631      	mov	r1, r6
 8015a8c:	4650      	mov	r0, sl
 8015a8e:	f7ff f9d6 	bl	8014e3e <quorem>
 8015a92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015a96:	9b00      	ldr	r3, [sp, #0]
 8015a98:	f805 9b01 	strb.w	r9, [r5], #1
 8015a9c:	1aea      	subs	r2, r5, r3
 8015a9e:	9b01      	ldr	r3, [sp, #4]
 8015aa0:	4293      	cmp	r3, r2
 8015aa2:	dd07      	ble.n	8015ab4 <_dtoa_r+0xb64>
 8015aa4:	4651      	mov	r1, sl
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	220a      	movs	r2, #10
 8015aaa:	4620      	mov	r0, r4
 8015aac:	f000 f9a4 	bl	8015df8 <__multadd>
 8015ab0:	4682      	mov	sl, r0
 8015ab2:	e7ea      	b.n	8015a8a <_dtoa_r+0xb3a>
 8015ab4:	9b01      	ldr	r3, [sp, #4]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	bfc8      	it	gt
 8015aba:	461d      	movgt	r5, r3
 8015abc:	9b00      	ldr	r3, [sp, #0]
 8015abe:	bfd8      	it	le
 8015ac0:	2501      	movle	r5, #1
 8015ac2:	441d      	add	r5, r3
 8015ac4:	f04f 0800 	mov.w	r8, #0
 8015ac8:	4651      	mov	r1, sl
 8015aca:	2201      	movs	r2, #1
 8015acc:	4620      	mov	r0, r4
 8015ace:	f000 fb8b 	bl	80161e8 <__lshift>
 8015ad2:	4631      	mov	r1, r6
 8015ad4:	4682      	mov	sl, r0
 8015ad6:	f000 fbf3 	bl	80162c0 <__mcmp>
 8015ada:	2800      	cmp	r0, #0
 8015adc:	dc96      	bgt.n	8015a0c <_dtoa_r+0xabc>
 8015ade:	d102      	bne.n	8015ae6 <_dtoa_r+0xb96>
 8015ae0:	f019 0f01 	tst.w	r9, #1
 8015ae4:	d192      	bne.n	8015a0c <_dtoa_r+0xabc>
 8015ae6:	462b      	mov	r3, r5
 8015ae8:	461d      	mov	r5, r3
 8015aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015aee:	2a30      	cmp	r2, #48	; 0x30
 8015af0:	d0fa      	beq.n	8015ae8 <_dtoa_r+0xb98>
 8015af2:	e6dd      	b.n	80158b0 <_dtoa_r+0x960>
 8015af4:	9a00      	ldr	r2, [sp, #0]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d189      	bne.n	8015a0e <_dtoa_r+0xabe>
 8015afa:	f10b 0b01 	add.w	fp, fp, #1
 8015afe:	2331      	movs	r3, #49	; 0x31
 8015b00:	e796      	b.n	8015a30 <_dtoa_r+0xae0>
 8015b02:	4b0a      	ldr	r3, [pc, #40]	; (8015b2c <_dtoa_r+0xbdc>)
 8015b04:	f7ff ba99 	b.w	801503a <_dtoa_r+0xea>
 8015b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f47f aa6d 	bne.w	8014fea <_dtoa_r+0x9a>
 8015b10:	4b07      	ldr	r3, [pc, #28]	; (8015b30 <_dtoa_r+0xbe0>)
 8015b12:	f7ff ba92 	b.w	801503a <_dtoa_r+0xea>
 8015b16:	9b01      	ldr	r3, [sp, #4]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	dcb5      	bgt.n	8015a88 <_dtoa_r+0xb38>
 8015b1c:	9b07      	ldr	r3, [sp, #28]
 8015b1e:	2b02      	cmp	r3, #2
 8015b20:	f73f aeb1 	bgt.w	8015886 <_dtoa_r+0x936>
 8015b24:	e7b0      	b.n	8015a88 <_dtoa_r+0xb38>
 8015b26:	bf00      	nop
 8015b28:	0801a18b 	.word	0x0801a18b
 8015b2c:	0801a08c 	.word	0x0801a08c
 8015b30:	0801a126 	.word	0x0801a126

08015b34 <_free_r>:
 8015b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b36:	2900      	cmp	r1, #0
 8015b38:	d044      	beq.n	8015bc4 <_free_r+0x90>
 8015b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b3e:	9001      	str	r0, [sp, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f1a1 0404 	sub.w	r4, r1, #4
 8015b46:	bfb8      	it	lt
 8015b48:	18e4      	addlt	r4, r4, r3
 8015b4a:	f000 f8e7 	bl	8015d1c <__malloc_lock>
 8015b4e:	4a1e      	ldr	r2, [pc, #120]	; (8015bc8 <_free_r+0x94>)
 8015b50:	9801      	ldr	r0, [sp, #4]
 8015b52:	6813      	ldr	r3, [r2, #0]
 8015b54:	b933      	cbnz	r3, 8015b64 <_free_r+0x30>
 8015b56:	6063      	str	r3, [r4, #4]
 8015b58:	6014      	str	r4, [r2, #0]
 8015b5a:	b003      	add	sp, #12
 8015b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b60:	f000 b8e2 	b.w	8015d28 <__malloc_unlock>
 8015b64:	42a3      	cmp	r3, r4
 8015b66:	d908      	bls.n	8015b7a <_free_r+0x46>
 8015b68:	6825      	ldr	r5, [r4, #0]
 8015b6a:	1961      	adds	r1, r4, r5
 8015b6c:	428b      	cmp	r3, r1
 8015b6e:	bf01      	itttt	eq
 8015b70:	6819      	ldreq	r1, [r3, #0]
 8015b72:	685b      	ldreq	r3, [r3, #4]
 8015b74:	1949      	addeq	r1, r1, r5
 8015b76:	6021      	streq	r1, [r4, #0]
 8015b78:	e7ed      	b.n	8015b56 <_free_r+0x22>
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	b10b      	cbz	r3, 8015b84 <_free_r+0x50>
 8015b80:	42a3      	cmp	r3, r4
 8015b82:	d9fa      	bls.n	8015b7a <_free_r+0x46>
 8015b84:	6811      	ldr	r1, [r2, #0]
 8015b86:	1855      	adds	r5, r2, r1
 8015b88:	42a5      	cmp	r5, r4
 8015b8a:	d10b      	bne.n	8015ba4 <_free_r+0x70>
 8015b8c:	6824      	ldr	r4, [r4, #0]
 8015b8e:	4421      	add	r1, r4
 8015b90:	1854      	adds	r4, r2, r1
 8015b92:	42a3      	cmp	r3, r4
 8015b94:	6011      	str	r1, [r2, #0]
 8015b96:	d1e0      	bne.n	8015b5a <_free_r+0x26>
 8015b98:	681c      	ldr	r4, [r3, #0]
 8015b9a:	685b      	ldr	r3, [r3, #4]
 8015b9c:	6053      	str	r3, [r2, #4]
 8015b9e:	440c      	add	r4, r1
 8015ba0:	6014      	str	r4, [r2, #0]
 8015ba2:	e7da      	b.n	8015b5a <_free_r+0x26>
 8015ba4:	d902      	bls.n	8015bac <_free_r+0x78>
 8015ba6:	230c      	movs	r3, #12
 8015ba8:	6003      	str	r3, [r0, #0]
 8015baa:	e7d6      	b.n	8015b5a <_free_r+0x26>
 8015bac:	6825      	ldr	r5, [r4, #0]
 8015bae:	1961      	adds	r1, r4, r5
 8015bb0:	428b      	cmp	r3, r1
 8015bb2:	bf04      	itt	eq
 8015bb4:	6819      	ldreq	r1, [r3, #0]
 8015bb6:	685b      	ldreq	r3, [r3, #4]
 8015bb8:	6063      	str	r3, [r4, #4]
 8015bba:	bf04      	itt	eq
 8015bbc:	1949      	addeq	r1, r1, r5
 8015bbe:	6021      	streq	r1, [r4, #0]
 8015bc0:	6054      	str	r4, [r2, #4]
 8015bc2:	e7ca      	b.n	8015b5a <_free_r+0x26>
 8015bc4:	b003      	add	sp, #12
 8015bc6:	bd30      	pop	{r4, r5, pc}
 8015bc8:	20004fe4 	.word	0x20004fe4

08015bcc <malloc>:
 8015bcc:	4b02      	ldr	r3, [pc, #8]	; (8015bd8 <malloc+0xc>)
 8015bce:	4601      	mov	r1, r0
 8015bd0:	6818      	ldr	r0, [r3, #0]
 8015bd2:	f000 b823 	b.w	8015c1c <_malloc_r>
 8015bd6:	bf00      	nop
 8015bd8:	20000170 	.word	0x20000170

08015bdc <sbrk_aligned>:
 8015bdc:	b570      	push	{r4, r5, r6, lr}
 8015bde:	4e0e      	ldr	r6, [pc, #56]	; (8015c18 <sbrk_aligned+0x3c>)
 8015be0:	460c      	mov	r4, r1
 8015be2:	6831      	ldr	r1, [r6, #0]
 8015be4:	4605      	mov	r5, r0
 8015be6:	b911      	cbnz	r1, 8015bee <sbrk_aligned+0x12>
 8015be8:	f001 ff76 	bl	8017ad8 <_sbrk_r>
 8015bec:	6030      	str	r0, [r6, #0]
 8015bee:	4621      	mov	r1, r4
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	f001 ff71 	bl	8017ad8 <_sbrk_r>
 8015bf6:	1c43      	adds	r3, r0, #1
 8015bf8:	d00a      	beq.n	8015c10 <sbrk_aligned+0x34>
 8015bfa:	1cc4      	adds	r4, r0, #3
 8015bfc:	f024 0403 	bic.w	r4, r4, #3
 8015c00:	42a0      	cmp	r0, r4
 8015c02:	d007      	beq.n	8015c14 <sbrk_aligned+0x38>
 8015c04:	1a21      	subs	r1, r4, r0
 8015c06:	4628      	mov	r0, r5
 8015c08:	f001 ff66 	bl	8017ad8 <_sbrk_r>
 8015c0c:	3001      	adds	r0, #1
 8015c0e:	d101      	bne.n	8015c14 <sbrk_aligned+0x38>
 8015c10:	f04f 34ff 	mov.w	r4, #4294967295
 8015c14:	4620      	mov	r0, r4
 8015c16:	bd70      	pop	{r4, r5, r6, pc}
 8015c18:	20004fe8 	.word	0x20004fe8

08015c1c <_malloc_r>:
 8015c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c20:	1ccd      	adds	r5, r1, #3
 8015c22:	f025 0503 	bic.w	r5, r5, #3
 8015c26:	3508      	adds	r5, #8
 8015c28:	2d0c      	cmp	r5, #12
 8015c2a:	bf38      	it	cc
 8015c2c:	250c      	movcc	r5, #12
 8015c2e:	2d00      	cmp	r5, #0
 8015c30:	4607      	mov	r7, r0
 8015c32:	db01      	blt.n	8015c38 <_malloc_r+0x1c>
 8015c34:	42a9      	cmp	r1, r5
 8015c36:	d905      	bls.n	8015c44 <_malloc_r+0x28>
 8015c38:	230c      	movs	r3, #12
 8015c3a:	603b      	str	r3, [r7, #0]
 8015c3c:	2600      	movs	r6, #0
 8015c3e:	4630      	mov	r0, r6
 8015c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015d18 <_malloc_r+0xfc>
 8015c48:	f000 f868 	bl	8015d1c <__malloc_lock>
 8015c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c50:	461c      	mov	r4, r3
 8015c52:	bb5c      	cbnz	r4, 8015cac <_malloc_r+0x90>
 8015c54:	4629      	mov	r1, r5
 8015c56:	4638      	mov	r0, r7
 8015c58:	f7ff ffc0 	bl	8015bdc <sbrk_aligned>
 8015c5c:	1c43      	adds	r3, r0, #1
 8015c5e:	4604      	mov	r4, r0
 8015c60:	d155      	bne.n	8015d0e <_malloc_r+0xf2>
 8015c62:	f8d8 4000 	ldr.w	r4, [r8]
 8015c66:	4626      	mov	r6, r4
 8015c68:	2e00      	cmp	r6, #0
 8015c6a:	d145      	bne.n	8015cf8 <_malloc_r+0xdc>
 8015c6c:	2c00      	cmp	r4, #0
 8015c6e:	d048      	beq.n	8015d02 <_malloc_r+0xe6>
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	4631      	mov	r1, r6
 8015c74:	4638      	mov	r0, r7
 8015c76:	eb04 0903 	add.w	r9, r4, r3
 8015c7a:	f001 ff2d 	bl	8017ad8 <_sbrk_r>
 8015c7e:	4581      	cmp	r9, r0
 8015c80:	d13f      	bne.n	8015d02 <_malloc_r+0xe6>
 8015c82:	6821      	ldr	r1, [r4, #0]
 8015c84:	1a6d      	subs	r5, r5, r1
 8015c86:	4629      	mov	r1, r5
 8015c88:	4638      	mov	r0, r7
 8015c8a:	f7ff ffa7 	bl	8015bdc <sbrk_aligned>
 8015c8e:	3001      	adds	r0, #1
 8015c90:	d037      	beq.n	8015d02 <_malloc_r+0xe6>
 8015c92:	6823      	ldr	r3, [r4, #0]
 8015c94:	442b      	add	r3, r5
 8015c96:	6023      	str	r3, [r4, #0]
 8015c98:	f8d8 3000 	ldr.w	r3, [r8]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d038      	beq.n	8015d12 <_malloc_r+0xf6>
 8015ca0:	685a      	ldr	r2, [r3, #4]
 8015ca2:	42a2      	cmp	r2, r4
 8015ca4:	d12b      	bne.n	8015cfe <_malloc_r+0xe2>
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	605a      	str	r2, [r3, #4]
 8015caa:	e00f      	b.n	8015ccc <_malloc_r+0xb0>
 8015cac:	6822      	ldr	r2, [r4, #0]
 8015cae:	1b52      	subs	r2, r2, r5
 8015cb0:	d41f      	bmi.n	8015cf2 <_malloc_r+0xd6>
 8015cb2:	2a0b      	cmp	r2, #11
 8015cb4:	d917      	bls.n	8015ce6 <_malloc_r+0xca>
 8015cb6:	1961      	adds	r1, r4, r5
 8015cb8:	42a3      	cmp	r3, r4
 8015cba:	6025      	str	r5, [r4, #0]
 8015cbc:	bf18      	it	ne
 8015cbe:	6059      	strne	r1, [r3, #4]
 8015cc0:	6863      	ldr	r3, [r4, #4]
 8015cc2:	bf08      	it	eq
 8015cc4:	f8c8 1000 	streq.w	r1, [r8]
 8015cc8:	5162      	str	r2, [r4, r5]
 8015cca:	604b      	str	r3, [r1, #4]
 8015ccc:	4638      	mov	r0, r7
 8015cce:	f104 060b 	add.w	r6, r4, #11
 8015cd2:	f000 f829 	bl	8015d28 <__malloc_unlock>
 8015cd6:	f026 0607 	bic.w	r6, r6, #7
 8015cda:	1d23      	adds	r3, r4, #4
 8015cdc:	1af2      	subs	r2, r6, r3
 8015cde:	d0ae      	beq.n	8015c3e <_malloc_r+0x22>
 8015ce0:	1b9b      	subs	r3, r3, r6
 8015ce2:	50a3      	str	r3, [r4, r2]
 8015ce4:	e7ab      	b.n	8015c3e <_malloc_r+0x22>
 8015ce6:	42a3      	cmp	r3, r4
 8015ce8:	6862      	ldr	r2, [r4, #4]
 8015cea:	d1dd      	bne.n	8015ca8 <_malloc_r+0x8c>
 8015cec:	f8c8 2000 	str.w	r2, [r8]
 8015cf0:	e7ec      	b.n	8015ccc <_malloc_r+0xb0>
 8015cf2:	4623      	mov	r3, r4
 8015cf4:	6864      	ldr	r4, [r4, #4]
 8015cf6:	e7ac      	b.n	8015c52 <_malloc_r+0x36>
 8015cf8:	4634      	mov	r4, r6
 8015cfa:	6876      	ldr	r6, [r6, #4]
 8015cfc:	e7b4      	b.n	8015c68 <_malloc_r+0x4c>
 8015cfe:	4613      	mov	r3, r2
 8015d00:	e7cc      	b.n	8015c9c <_malloc_r+0x80>
 8015d02:	230c      	movs	r3, #12
 8015d04:	603b      	str	r3, [r7, #0]
 8015d06:	4638      	mov	r0, r7
 8015d08:	f000 f80e 	bl	8015d28 <__malloc_unlock>
 8015d0c:	e797      	b.n	8015c3e <_malloc_r+0x22>
 8015d0e:	6025      	str	r5, [r4, #0]
 8015d10:	e7dc      	b.n	8015ccc <_malloc_r+0xb0>
 8015d12:	605b      	str	r3, [r3, #4]
 8015d14:	deff      	udf	#255	; 0xff
 8015d16:	bf00      	nop
 8015d18:	20004fe4 	.word	0x20004fe4

08015d1c <__malloc_lock>:
 8015d1c:	4801      	ldr	r0, [pc, #4]	; (8015d24 <__malloc_lock+0x8>)
 8015d1e:	f7ff b868 	b.w	8014df2 <__retarget_lock_acquire_recursive>
 8015d22:	bf00      	nop
 8015d24:	20004fe0 	.word	0x20004fe0

08015d28 <__malloc_unlock>:
 8015d28:	4801      	ldr	r0, [pc, #4]	; (8015d30 <__malloc_unlock+0x8>)
 8015d2a:	f7ff b863 	b.w	8014df4 <__retarget_lock_release_recursive>
 8015d2e:	bf00      	nop
 8015d30:	20004fe0 	.word	0x20004fe0

08015d34 <_Balloc>:
 8015d34:	b570      	push	{r4, r5, r6, lr}
 8015d36:	69c6      	ldr	r6, [r0, #28]
 8015d38:	4604      	mov	r4, r0
 8015d3a:	460d      	mov	r5, r1
 8015d3c:	b976      	cbnz	r6, 8015d5c <_Balloc+0x28>
 8015d3e:	2010      	movs	r0, #16
 8015d40:	f7ff ff44 	bl	8015bcc <malloc>
 8015d44:	4602      	mov	r2, r0
 8015d46:	61e0      	str	r0, [r4, #28]
 8015d48:	b920      	cbnz	r0, 8015d54 <_Balloc+0x20>
 8015d4a:	4b18      	ldr	r3, [pc, #96]	; (8015dac <_Balloc+0x78>)
 8015d4c:	4818      	ldr	r0, [pc, #96]	; (8015db0 <_Balloc+0x7c>)
 8015d4e:	216b      	movs	r1, #107	; 0x6b
 8015d50:	f7fd fd4c 	bl	80137ec <__assert_func>
 8015d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d58:	6006      	str	r6, [r0, #0]
 8015d5a:	60c6      	str	r6, [r0, #12]
 8015d5c:	69e6      	ldr	r6, [r4, #28]
 8015d5e:	68f3      	ldr	r3, [r6, #12]
 8015d60:	b183      	cbz	r3, 8015d84 <_Balloc+0x50>
 8015d62:	69e3      	ldr	r3, [r4, #28]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015d6a:	b9b8      	cbnz	r0, 8015d9c <_Balloc+0x68>
 8015d6c:	2101      	movs	r1, #1
 8015d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8015d72:	1d72      	adds	r2, r6, #5
 8015d74:	0092      	lsls	r2, r2, #2
 8015d76:	4620      	mov	r0, r4
 8015d78:	f001 fec6 	bl	8017b08 <_calloc_r>
 8015d7c:	b160      	cbz	r0, 8015d98 <_Balloc+0x64>
 8015d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015d82:	e00e      	b.n	8015da2 <_Balloc+0x6e>
 8015d84:	2221      	movs	r2, #33	; 0x21
 8015d86:	2104      	movs	r1, #4
 8015d88:	4620      	mov	r0, r4
 8015d8a:	f001 febd 	bl	8017b08 <_calloc_r>
 8015d8e:	69e3      	ldr	r3, [r4, #28]
 8015d90:	60f0      	str	r0, [r6, #12]
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d1e4      	bne.n	8015d62 <_Balloc+0x2e>
 8015d98:	2000      	movs	r0, #0
 8015d9a:	bd70      	pop	{r4, r5, r6, pc}
 8015d9c:	6802      	ldr	r2, [r0, #0]
 8015d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015da2:	2300      	movs	r3, #0
 8015da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015da8:	e7f7      	b.n	8015d9a <_Balloc+0x66>
 8015daa:	bf00      	nop
 8015dac:	0801a0b5 	.word	0x0801a0b5
 8015db0:	0801a19c 	.word	0x0801a19c

08015db4 <_Bfree>:
 8015db4:	b570      	push	{r4, r5, r6, lr}
 8015db6:	69c6      	ldr	r6, [r0, #28]
 8015db8:	4605      	mov	r5, r0
 8015dba:	460c      	mov	r4, r1
 8015dbc:	b976      	cbnz	r6, 8015ddc <_Bfree+0x28>
 8015dbe:	2010      	movs	r0, #16
 8015dc0:	f7ff ff04 	bl	8015bcc <malloc>
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	61e8      	str	r0, [r5, #28]
 8015dc8:	b920      	cbnz	r0, 8015dd4 <_Bfree+0x20>
 8015dca:	4b09      	ldr	r3, [pc, #36]	; (8015df0 <_Bfree+0x3c>)
 8015dcc:	4809      	ldr	r0, [pc, #36]	; (8015df4 <_Bfree+0x40>)
 8015dce:	218f      	movs	r1, #143	; 0x8f
 8015dd0:	f7fd fd0c 	bl	80137ec <__assert_func>
 8015dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015dd8:	6006      	str	r6, [r0, #0]
 8015dda:	60c6      	str	r6, [r0, #12]
 8015ddc:	b13c      	cbz	r4, 8015dee <_Bfree+0x3a>
 8015dde:	69eb      	ldr	r3, [r5, #28]
 8015de0:	6862      	ldr	r2, [r4, #4]
 8015de2:	68db      	ldr	r3, [r3, #12]
 8015de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015de8:	6021      	str	r1, [r4, #0]
 8015dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015dee:	bd70      	pop	{r4, r5, r6, pc}
 8015df0:	0801a0b5 	.word	0x0801a0b5
 8015df4:	0801a19c 	.word	0x0801a19c

08015df8 <__multadd>:
 8015df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfc:	690d      	ldr	r5, [r1, #16]
 8015dfe:	4607      	mov	r7, r0
 8015e00:	460c      	mov	r4, r1
 8015e02:	461e      	mov	r6, r3
 8015e04:	f101 0c14 	add.w	ip, r1, #20
 8015e08:	2000      	movs	r0, #0
 8015e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8015e0e:	b299      	uxth	r1, r3
 8015e10:	fb02 6101 	mla	r1, r2, r1, r6
 8015e14:	0c1e      	lsrs	r6, r3, #16
 8015e16:	0c0b      	lsrs	r3, r1, #16
 8015e18:	fb02 3306 	mla	r3, r2, r6, r3
 8015e1c:	b289      	uxth	r1, r1
 8015e1e:	3001      	adds	r0, #1
 8015e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015e24:	4285      	cmp	r5, r0
 8015e26:	f84c 1b04 	str.w	r1, [ip], #4
 8015e2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015e2e:	dcec      	bgt.n	8015e0a <__multadd+0x12>
 8015e30:	b30e      	cbz	r6, 8015e76 <__multadd+0x7e>
 8015e32:	68a3      	ldr	r3, [r4, #8]
 8015e34:	42ab      	cmp	r3, r5
 8015e36:	dc19      	bgt.n	8015e6c <__multadd+0x74>
 8015e38:	6861      	ldr	r1, [r4, #4]
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	3101      	adds	r1, #1
 8015e3e:	f7ff ff79 	bl	8015d34 <_Balloc>
 8015e42:	4680      	mov	r8, r0
 8015e44:	b928      	cbnz	r0, 8015e52 <__multadd+0x5a>
 8015e46:	4602      	mov	r2, r0
 8015e48:	4b0c      	ldr	r3, [pc, #48]	; (8015e7c <__multadd+0x84>)
 8015e4a:	480d      	ldr	r0, [pc, #52]	; (8015e80 <__multadd+0x88>)
 8015e4c:	21ba      	movs	r1, #186	; 0xba
 8015e4e:	f7fd fccd 	bl	80137ec <__assert_func>
 8015e52:	6922      	ldr	r2, [r4, #16]
 8015e54:	3202      	adds	r2, #2
 8015e56:	f104 010c 	add.w	r1, r4, #12
 8015e5a:	0092      	lsls	r2, r2, #2
 8015e5c:	300c      	adds	r0, #12
 8015e5e:	f7fe ffd2 	bl	8014e06 <memcpy>
 8015e62:	4621      	mov	r1, r4
 8015e64:	4638      	mov	r0, r7
 8015e66:	f7ff ffa5 	bl	8015db4 <_Bfree>
 8015e6a:	4644      	mov	r4, r8
 8015e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015e70:	3501      	adds	r5, #1
 8015e72:	615e      	str	r6, [r3, #20]
 8015e74:	6125      	str	r5, [r4, #16]
 8015e76:	4620      	mov	r0, r4
 8015e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e7c:	0801a18b 	.word	0x0801a18b
 8015e80:	0801a19c 	.word	0x0801a19c

08015e84 <__s2b>:
 8015e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e88:	460c      	mov	r4, r1
 8015e8a:	4615      	mov	r5, r2
 8015e8c:	461f      	mov	r7, r3
 8015e8e:	2209      	movs	r2, #9
 8015e90:	3308      	adds	r3, #8
 8015e92:	4606      	mov	r6, r0
 8015e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e98:	2100      	movs	r1, #0
 8015e9a:	2201      	movs	r2, #1
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	db09      	blt.n	8015eb4 <__s2b+0x30>
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f7ff ff47 	bl	8015d34 <_Balloc>
 8015ea6:	b940      	cbnz	r0, 8015eba <__s2b+0x36>
 8015ea8:	4602      	mov	r2, r0
 8015eaa:	4b19      	ldr	r3, [pc, #100]	; (8015f10 <__s2b+0x8c>)
 8015eac:	4819      	ldr	r0, [pc, #100]	; (8015f14 <__s2b+0x90>)
 8015eae:	21d3      	movs	r1, #211	; 0xd3
 8015eb0:	f7fd fc9c 	bl	80137ec <__assert_func>
 8015eb4:	0052      	lsls	r2, r2, #1
 8015eb6:	3101      	adds	r1, #1
 8015eb8:	e7f0      	b.n	8015e9c <__s2b+0x18>
 8015eba:	9b08      	ldr	r3, [sp, #32]
 8015ebc:	6143      	str	r3, [r0, #20]
 8015ebe:	2d09      	cmp	r5, #9
 8015ec0:	f04f 0301 	mov.w	r3, #1
 8015ec4:	6103      	str	r3, [r0, #16]
 8015ec6:	dd16      	ble.n	8015ef6 <__s2b+0x72>
 8015ec8:	f104 0909 	add.w	r9, r4, #9
 8015ecc:	46c8      	mov	r8, r9
 8015ece:	442c      	add	r4, r5
 8015ed0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015ed4:	4601      	mov	r1, r0
 8015ed6:	3b30      	subs	r3, #48	; 0x30
 8015ed8:	220a      	movs	r2, #10
 8015eda:	4630      	mov	r0, r6
 8015edc:	f7ff ff8c 	bl	8015df8 <__multadd>
 8015ee0:	45a0      	cmp	r8, r4
 8015ee2:	d1f5      	bne.n	8015ed0 <__s2b+0x4c>
 8015ee4:	f1a5 0408 	sub.w	r4, r5, #8
 8015ee8:	444c      	add	r4, r9
 8015eea:	1b2d      	subs	r5, r5, r4
 8015eec:	1963      	adds	r3, r4, r5
 8015eee:	42bb      	cmp	r3, r7
 8015ef0:	db04      	blt.n	8015efc <__s2b+0x78>
 8015ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ef6:	340a      	adds	r4, #10
 8015ef8:	2509      	movs	r5, #9
 8015efa:	e7f6      	b.n	8015eea <__s2b+0x66>
 8015efc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015f00:	4601      	mov	r1, r0
 8015f02:	3b30      	subs	r3, #48	; 0x30
 8015f04:	220a      	movs	r2, #10
 8015f06:	4630      	mov	r0, r6
 8015f08:	f7ff ff76 	bl	8015df8 <__multadd>
 8015f0c:	e7ee      	b.n	8015eec <__s2b+0x68>
 8015f0e:	bf00      	nop
 8015f10:	0801a18b 	.word	0x0801a18b
 8015f14:	0801a19c 	.word	0x0801a19c

08015f18 <__hi0bits>:
 8015f18:	0c03      	lsrs	r3, r0, #16
 8015f1a:	041b      	lsls	r3, r3, #16
 8015f1c:	b9d3      	cbnz	r3, 8015f54 <__hi0bits+0x3c>
 8015f1e:	0400      	lsls	r0, r0, #16
 8015f20:	2310      	movs	r3, #16
 8015f22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015f26:	bf04      	itt	eq
 8015f28:	0200      	lsleq	r0, r0, #8
 8015f2a:	3308      	addeq	r3, #8
 8015f2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015f30:	bf04      	itt	eq
 8015f32:	0100      	lsleq	r0, r0, #4
 8015f34:	3304      	addeq	r3, #4
 8015f36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015f3a:	bf04      	itt	eq
 8015f3c:	0080      	lsleq	r0, r0, #2
 8015f3e:	3302      	addeq	r3, #2
 8015f40:	2800      	cmp	r0, #0
 8015f42:	db05      	blt.n	8015f50 <__hi0bits+0x38>
 8015f44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015f48:	f103 0301 	add.w	r3, r3, #1
 8015f4c:	bf08      	it	eq
 8015f4e:	2320      	moveq	r3, #32
 8015f50:	4618      	mov	r0, r3
 8015f52:	4770      	bx	lr
 8015f54:	2300      	movs	r3, #0
 8015f56:	e7e4      	b.n	8015f22 <__hi0bits+0xa>

08015f58 <__lo0bits>:
 8015f58:	6803      	ldr	r3, [r0, #0]
 8015f5a:	f013 0207 	ands.w	r2, r3, #7
 8015f5e:	d00c      	beq.n	8015f7a <__lo0bits+0x22>
 8015f60:	07d9      	lsls	r1, r3, #31
 8015f62:	d422      	bmi.n	8015faa <__lo0bits+0x52>
 8015f64:	079a      	lsls	r2, r3, #30
 8015f66:	bf49      	itett	mi
 8015f68:	085b      	lsrmi	r3, r3, #1
 8015f6a:	089b      	lsrpl	r3, r3, #2
 8015f6c:	6003      	strmi	r3, [r0, #0]
 8015f6e:	2201      	movmi	r2, #1
 8015f70:	bf5c      	itt	pl
 8015f72:	6003      	strpl	r3, [r0, #0]
 8015f74:	2202      	movpl	r2, #2
 8015f76:	4610      	mov	r0, r2
 8015f78:	4770      	bx	lr
 8015f7a:	b299      	uxth	r1, r3
 8015f7c:	b909      	cbnz	r1, 8015f82 <__lo0bits+0x2a>
 8015f7e:	0c1b      	lsrs	r3, r3, #16
 8015f80:	2210      	movs	r2, #16
 8015f82:	b2d9      	uxtb	r1, r3
 8015f84:	b909      	cbnz	r1, 8015f8a <__lo0bits+0x32>
 8015f86:	3208      	adds	r2, #8
 8015f88:	0a1b      	lsrs	r3, r3, #8
 8015f8a:	0719      	lsls	r1, r3, #28
 8015f8c:	bf04      	itt	eq
 8015f8e:	091b      	lsreq	r3, r3, #4
 8015f90:	3204      	addeq	r2, #4
 8015f92:	0799      	lsls	r1, r3, #30
 8015f94:	bf04      	itt	eq
 8015f96:	089b      	lsreq	r3, r3, #2
 8015f98:	3202      	addeq	r2, #2
 8015f9a:	07d9      	lsls	r1, r3, #31
 8015f9c:	d403      	bmi.n	8015fa6 <__lo0bits+0x4e>
 8015f9e:	085b      	lsrs	r3, r3, #1
 8015fa0:	f102 0201 	add.w	r2, r2, #1
 8015fa4:	d003      	beq.n	8015fae <__lo0bits+0x56>
 8015fa6:	6003      	str	r3, [r0, #0]
 8015fa8:	e7e5      	b.n	8015f76 <__lo0bits+0x1e>
 8015faa:	2200      	movs	r2, #0
 8015fac:	e7e3      	b.n	8015f76 <__lo0bits+0x1e>
 8015fae:	2220      	movs	r2, #32
 8015fb0:	e7e1      	b.n	8015f76 <__lo0bits+0x1e>
	...

08015fb4 <__i2b>:
 8015fb4:	b510      	push	{r4, lr}
 8015fb6:	460c      	mov	r4, r1
 8015fb8:	2101      	movs	r1, #1
 8015fba:	f7ff febb 	bl	8015d34 <_Balloc>
 8015fbe:	4602      	mov	r2, r0
 8015fc0:	b928      	cbnz	r0, 8015fce <__i2b+0x1a>
 8015fc2:	4b05      	ldr	r3, [pc, #20]	; (8015fd8 <__i2b+0x24>)
 8015fc4:	4805      	ldr	r0, [pc, #20]	; (8015fdc <__i2b+0x28>)
 8015fc6:	f240 1145 	movw	r1, #325	; 0x145
 8015fca:	f7fd fc0f 	bl	80137ec <__assert_func>
 8015fce:	2301      	movs	r3, #1
 8015fd0:	6144      	str	r4, [r0, #20]
 8015fd2:	6103      	str	r3, [r0, #16]
 8015fd4:	bd10      	pop	{r4, pc}
 8015fd6:	bf00      	nop
 8015fd8:	0801a18b 	.word	0x0801a18b
 8015fdc:	0801a19c 	.word	0x0801a19c

08015fe0 <__multiply>:
 8015fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe4:	4691      	mov	r9, r2
 8015fe6:	690a      	ldr	r2, [r1, #16]
 8015fe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	bfb8      	it	lt
 8015ff0:	460b      	movlt	r3, r1
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	bfbc      	itt	lt
 8015ff6:	464c      	movlt	r4, r9
 8015ff8:	4699      	movlt	r9, r3
 8015ffa:	6927      	ldr	r7, [r4, #16]
 8015ffc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016000:	68a3      	ldr	r3, [r4, #8]
 8016002:	6861      	ldr	r1, [r4, #4]
 8016004:	eb07 060a 	add.w	r6, r7, sl
 8016008:	42b3      	cmp	r3, r6
 801600a:	b085      	sub	sp, #20
 801600c:	bfb8      	it	lt
 801600e:	3101      	addlt	r1, #1
 8016010:	f7ff fe90 	bl	8015d34 <_Balloc>
 8016014:	b930      	cbnz	r0, 8016024 <__multiply+0x44>
 8016016:	4602      	mov	r2, r0
 8016018:	4b44      	ldr	r3, [pc, #272]	; (801612c <__multiply+0x14c>)
 801601a:	4845      	ldr	r0, [pc, #276]	; (8016130 <__multiply+0x150>)
 801601c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016020:	f7fd fbe4 	bl	80137ec <__assert_func>
 8016024:	f100 0514 	add.w	r5, r0, #20
 8016028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801602c:	462b      	mov	r3, r5
 801602e:	2200      	movs	r2, #0
 8016030:	4543      	cmp	r3, r8
 8016032:	d321      	bcc.n	8016078 <__multiply+0x98>
 8016034:	f104 0314 	add.w	r3, r4, #20
 8016038:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801603c:	f109 0314 	add.w	r3, r9, #20
 8016040:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016044:	9202      	str	r2, [sp, #8]
 8016046:	1b3a      	subs	r2, r7, r4
 8016048:	3a15      	subs	r2, #21
 801604a:	f022 0203 	bic.w	r2, r2, #3
 801604e:	3204      	adds	r2, #4
 8016050:	f104 0115 	add.w	r1, r4, #21
 8016054:	428f      	cmp	r7, r1
 8016056:	bf38      	it	cc
 8016058:	2204      	movcc	r2, #4
 801605a:	9201      	str	r2, [sp, #4]
 801605c:	9a02      	ldr	r2, [sp, #8]
 801605e:	9303      	str	r3, [sp, #12]
 8016060:	429a      	cmp	r2, r3
 8016062:	d80c      	bhi.n	801607e <__multiply+0x9e>
 8016064:	2e00      	cmp	r6, #0
 8016066:	dd03      	ble.n	8016070 <__multiply+0x90>
 8016068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801606c:	2b00      	cmp	r3, #0
 801606e:	d05b      	beq.n	8016128 <__multiply+0x148>
 8016070:	6106      	str	r6, [r0, #16]
 8016072:	b005      	add	sp, #20
 8016074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016078:	f843 2b04 	str.w	r2, [r3], #4
 801607c:	e7d8      	b.n	8016030 <__multiply+0x50>
 801607e:	f8b3 a000 	ldrh.w	sl, [r3]
 8016082:	f1ba 0f00 	cmp.w	sl, #0
 8016086:	d024      	beq.n	80160d2 <__multiply+0xf2>
 8016088:	f104 0e14 	add.w	lr, r4, #20
 801608c:	46a9      	mov	r9, r5
 801608e:	f04f 0c00 	mov.w	ip, #0
 8016092:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016096:	f8d9 1000 	ldr.w	r1, [r9]
 801609a:	fa1f fb82 	uxth.w	fp, r2
 801609e:	b289      	uxth	r1, r1
 80160a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80160a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80160a8:	f8d9 2000 	ldr.w	r2, [r9]
 80160ac:	4461      	add	r1, ip
 80160ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80160b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80160b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80160ba:	b289      	uxth	r1, r1
 80160bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80160c0:	4577      	cmp	r7, lr
 80160c2:	f849 1b04 	str.w	r1, [r9], #4
 80160c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80160ca:	d8e2      	bhi.n	8016092 <__multiply+0xb2>
 80160cc:	9a01      	ldr	r2, [sp, #4]
 80160ce:	f845 c002 	str.w	ip, [r5, r2]
 80160d2:	9a03      	ldr	r2, [sp, #12]
 80160d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80160d8:	3304      	adds	r3, #4
 80160da:	f1b9 0f00 	cmp.w	r9, #0
 80160de:	d021      	beq.n	8016124 <__multiply+0x144>
 80160e0:	6829      	ldr	r1, [r5, #0]
 80160e2:	f104 0c14 	add.w	ip, r4, #20
 80160e6:	46ae      	mov	lr, r5
 80160e8:	f04f 0a00 	mov.w	sl, #0
 80160ec:	f8bc b000 	ldrh.w	fp, [ip]
 80160f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80160f4:	fb09 220b 	mla	r2, r9, fp, r2
 80160f8:	4452      	add	r2, sl
 80160fa:	b289      	uxth	r1, r1
 80160fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016100:	f84e 1b04 	str.w	r1, [lr], #4
 8016104:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016108:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801610c:	f8be 1000 	ldrh.w	r1, [lr]
 8016110:	fb09 110a 	mla	r1, r9, sl, r1
 8016114:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016118:	4567      	cmp	r7, ip
 801611a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801611e:	d8e5      	bhi.n	80160ec <__multiply+0x10c>
 8016120:	9a01      	ldr	r2, [sp, #4]
 8016122:	50a9      	str	r1, [r5, r2]
 8016124:	3504      	adds	r5, #4
 8016126:	e799      	b.n	801605c <__multiply+0x7c>
 8016128:	3e01      	subs	r6, #1
 801612a:	e79b      	b.n	8016064 <__multiply+0x84>
 801612c:	0801a18b 	.word	0x0801a18b
 8016130:	0801a19c 	.word	0x0801a19c

08016134 <__pow5mult>:
 8016134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016138:	4615      	mov	r5, r2
 801613a:	f012 0203 	ands.w	r2, r2, #3
 801613e:	4606      	mov	r6, r0
 8016140:	460f      	mov	r7, r1
 8016142:	d007      	beq.n	8016154 <__pow5mult+0x20>
 8016144:	4c25      	ldr	r4, [pc, #148]	; (80161dc <__pow5mult+0xa8>)
 8016146:	3a01      	subs	r2, #1
 8016148:	2300      	movs	r3, #0
 801614a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801614e:	f7ff fe53 	bl	8015df8 <__multadd>
 8016152:	4607      	mov	r7, r0
 8016154:	10ad      	asrs	r5, r5, #2
 8016156:	d03d      	beq.n	80161d4 <__pow5mult+0xa0>
 8016158:	69f4      	ldr	r4, [r6, #28]
 801615a:	b97c      	cbnz	r4, 801617c <__pow5mult+0x48>
 801615c:	2010      	movs	r0, #16
 801615e:	f7ff fd35 	bl	8015bcc <malloc>
 8016162:	4602      	mov	r2, r0
 8016164:	61f0      	str	r0, [r6, #28]
 8016166:	b928      	cbnz	r0, 8016174 <__pow5mult+0x40>
 8016168:	4b1d      	ldr	r3, [pc, #116]	; (80161e0 <__pow5mult+0xac>)
 801616a:	481e      	ldr	r0, [pc, #120]	; (80161e4 <__pow5mult+0xb0>)
 801616c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016170:	f7fd fb3c 	bl	80137ec <__assert_func>
 8016174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016178:	6004      	str	r4, [r0, #0]
 801617a:	60c4      	str	r4, [r0, #12]
 801617c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016184:	b94c      	cbnz	r4, 801619a <__pow5mult+0x66>
 8016186:	f240 2171 	movw	r1, #625	; 0x271
 801618a:	4630      	mov	r0, r6
 801618c:	f7ff ff12 	bl	8015fb4 <__i2b>
 8016190:	2300      	movs	r3, #0
 8016192:	f8c8 0008 	str.w	r0, [r8, #8]
 8016196:	4604      	mov	r4, r0
 8016198:	6003      	str	r3, [r0, #0]
 801619a:	f04f 0900 	mov.w	r9, #0
 801619e:	07eb      	lsls	r3, r5, #31
 80161a0:	d50a      	bpl.n	80161b8 <__pow5mult+0x84>
 80161a2:	4639      	mov	r1, r7
 80161a4:	4622      	mov	r2, r4
 80161a6:	4630      	mov	r0, r6
 80161a8:	f7ff ff1a 	bl	8015fe0 <__multiply>
 80161ac:	4639      	mov	r1, r7
 80161ae:	4680      	mov	r8, r0
 80161b0:	4630      	mov	r0, r6
 80161b2:	f7ff fdff 	bl	8015db4 <_Bfree>
 80161b6:	4647      	mov	r7, r8
 80161b8:	106d      	asrs	r5, r5, #1
 80161ba:	d00b      	beq.n	80161d4 <__pow5mult+0xa0>
 80161bc:	6820      	ldr	r0, [r4, #0]
 80161be:	b938      	cbnz	r0, 80161d0 <__pow5mult+0x9c>
 80161c0:	4622      	mov	r2, r4
 80161c2:	4621      	mov	r1, r4
 80161c4:	4630      	mov	r0, r6
 80161c6:	f7ff ff0b 	bl	8015fe0 <__multiply>
 80161ca:	6020      	str	r0, [r4, #0]
 80161cc:	f8c0 9000 	str.w	r9, [r0]
 80161d0:	4604      	mov	r4, r0
 80161d2:	e7e4      	b.n	801619e <__pow5mult+0x6a>
 80161d4:	4638      	mov	r0, r7
 80161d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161da:	bf00      	nop
 80161dc:	0801a2e8 	.word	0x0801a2e8
 80161e0:	0801a0b5 	.word	0x0801a0b5
 80161e4:	0801a19c 	.word	0x0801a19c

080161e8 <__lshift>:
 80161e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161ec:	460c      	mov	r4, r1
 80161ee:	6849      	ldr	r1, [r1, #4]
 80161f0:	6923      	ldr	r3, [r4, #16]
 80161f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80161f6:	68a3      	ldr	r3, [r4, #8]
 80161f8:	4607      	mov	r7, r0
 80161fa:	4691      	mov	r9, r2
 80161fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016200:	f108 0601 	add.w	r6, r8, #1
 8016204:	42b3      	cmp	r3, r6
 8016206:	db0b      	blt.n	8016220 <__lshift+0x38>
 8016208:	4638      	mov	r0, r7
 801620a:	f7ff fd93 	bl	8015d34 <_Balloc>
 801620e:	4605      	mov	r5, r0
 8016210:	b948      	cbnz	r0, 8016226 <__lshift+0x3e>
 8016212:	4602      	mov	r2, r0
 8016214:	4b28      	ldr	r3, [pc, #160]	; (80162b8 <__lshift+0xd0>)
 8016216:	4829      	ldr	r0, [pc, #164]	; (80162bc <__lshift+0xd4>)
 8016218:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801621c:	f7fd fae6 	bl	80137ec <__assert_func>
 8016220:	3101      	adds	r1, #1
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	e7ee      	b.n	8016204 <__lshift+0x1c>
 8016226:	2300      	movs	r3, #0
 8016228:	f100 0114 	add.w	r1, r0, #20
 801622c:	f100 0210 	add.w	r2, r0, #16
 8016230:	4618      	mov	r0, r3
 8016232:	4553      	cmp	r3, sl
 8016234:	db33      	blt.n	801629e <__lshift+0xb6>
 8016236:	6920      	ldr	r0, [r4, #16]
 8016238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801623c:	f104 0314 	add.w	r3, r4, #20
 8016240:	f019 091f 	ands.w	r9, r9, #31
 8016244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801624c:	d02b      	beq.n	80162a6 <__lshift+0xbe>
 801624e:	f1c9 0e20 	rsb	lr, r9, #32
 8016252:	468a      	mov	sl, r1
 8016254:	2200      	movs	r2, #0
 8016256:	6818      	ldr	r0, [r3, #0]
 8016258:	fa00 f009 	lsl.w	r0, r0, r9
 801625c:	4310      	orrs	r0, r2
 801625e:	f84a 0b04 	str.w	r0, [sl], #4
 8016262:	f853 2b04 	ldr.w	r2, [r3], #4
 8016266:	459c      	cmp	ip, r3
 8016268:	fa22 f20e 	lsr.w	r2, r2, lr
 801626c:	d8f3      	bhi.n	8016256 <__lshift+0x6e>
 801626e:	ebac 0304 	sub.w	r3, ip, r4
 8016272:	3b15      	subs	r3, #21
 8016274:	f023 0303 	bic.w	r3, r3, #3
 8016278:	3304      	adds	r3, #4
 801627a:	f104 0015 	add.w	r0, r4, #21
 801627e:	4584      	cmp	ip, r0
 8016280:	bf38      	it	cc
 8016282:	2304      	movcc	r3, #4
 8016284:	50ca      	str	r2, [r1, r3]
 8016286:	b10a      	cbz	r2, 801628c <__lshift+0xa4>
 8016288:	f108 0602 	add.w	r6, r8, #2
 801628c:	3e01      	subs	r6, #1
 801628e:	4638      	mov	r0, r7
 8016290:	612e      	str	r6, [r5, #16]
 8016292:	4621      	mov	r1, r4
 8016294:	f7ff fd8e 	bl	8015db4 <_Bfree>
 8016298:	4628      	mov	r0, r5
 801629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801629e:	f842 0f04 	str.w	r0, [r2, #4]!
 80162a2:	3301      	adds	r3, #1
 80162a4:	e7c5      	b.n	8016232 <__lshift+0x4a>
 80162a6:	3904      	subs	r1, #4
 80162a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80162ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80162b0:	459c      	cmp	ip, r3
 80162b2:	d8f9      	bhi.n	80162a8 <__lshift+0xc0>
 80162b4:	e7ea      	b.n	801628c <__lshift+0xa4>
 80162b6:	bf00      	nop
 80162b8:	0801a18b 	.word	0x0801a18b
 80162bc:	0801a19c 	.word	0x0801a19c

080162c0 <__mcmp>:
 80162c0:	b530      	push	{r4, r5, lr}
 80162c2:	6902      	ldr	r2, [r0, #16]
 80162c4:	690c      	ldr	r4, [r1, #16]
 80162c6:	1b12      	subs	r2, r2, r4
 80162c8:	d10e      	bne.n	80162e8 <__mcmp+0x28>
 80162ca:	f100 0314 	add.w	r3, r0, #20
 80162ce:	3114      	adds	r1, #20
 80162d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80162d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80162d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80162dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80162e0:	42a5      	cmp	r5, r4
 80162e2:	d003      	beq.n	80162ec <__mcmp+0x2c>
 80162e4:	d305      	bcc.n	80162f2 <__mcmp+0x32>
 80162e6:	2201      	movs	r2, #1
 80162e8:	4610      	mov	r0, r2
 80162ea:	bd30      	pop	{r4, r5, pc}
 80162ec:	4283      	cmp	r3, r0
 80162ee:	d3f3      	bcc.n	80162d8 <__mcmp+0x18>
 80162f0:	e7fa      	b.n	80162e8 <__mcmp+0x28>
 80162f2:	f04f 32ff 	mov.w	r2, #4294967295
 80162f6:	e7f7      	b.n	80162e8 <__mcmp+0x28>

080162f8 <__mdiff>:
 80162f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fc:	460c      	mov	r4, r1
 80162fe:	4606      	mov	r6, r0
 8016300:	4611      	mov	r1, r2
 8016302:	4620      	mov	r0, r4
 8016304:	4690      	mov	r8, r2
 8016306:	f7ff ffdb 	bl	80162c0 <__mcmp>
 801630a:	1e05      	subs	r5, r0, #0
 801630c:	d110      	bne.n	8016330 <__mdiff+0x38>
 801630e:	4629      	mov	r1, r5
 8016310:	4630      	mov	r0, r6
 8016312:	f7ff fd0f 	bl	8015d34 <_Balloc>
 8016316:	b930      	cbnz	r0, 8016326 <__mdiff+0x2e>
 8016318:	4b3a      	ldr	r3, [pc, #232]	; (8016404 <__mdiff+0x10c>)
 801631a:	4602      	mov	r2, r0
 801631c:	f240 2137 	movw	r1, #567	; 0x237
 8016320:	4839      	ldr	r0, [pc, #228]	; (8016408 <__mdiff+0x110>)
 8016322:	f7fd fa63 	bl	80137ec <__assert_func>
 8016326:	2301      	movs	r3, #1
 8016328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801632c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016330:	bfa4      	itt	ge
 8016332:	4643      	movge	r3, r8
 8016334:	46a0      	movge	r8, r4
 8016336:	4630      	mov	r0, r6
 8016338:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801633c:	bfa6      	itte	ge
 801633e:	461c      	movge	r4, r3
 8016340:	2500      	movge	r5, #0
 8016342:	2501      	movlt	r5, #1
 8016344:	f7ff fcf6 	bl	8015d34 <_Balloc>
 8016348:	b920      	cbnz	r0, 8016354 <__mdiff+0x5c>
 801634a:	4b2e      	ldr	r3, [pc, #184]	; (8016404 <__mdiff+0x10c>)
 801634c:	4602      	mov	r2, r0
 801634e:	f240 2145 	movw	r1, #581	; 0x245
 8016352:	e7e5      	b.n	8016320 <__mdiff+0x28>
 8016354:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016358:	6926      	ldr	r6, [r4, #16]
 801635a:	60c5      	str	r5, [r0, #12]
 801635c:	f104 0914 	add.w	r9, r4, #20
 8016360:	f108 0514 	add.w	r5, r8, #20
 8016364:	f100 0e14 	add.w	lr, r0, #20
 8016368:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801636c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016370:	f108 0210 	add.w	r2, r8, #16
 8016374:	46f2      	mov	sl, lr
 8016376:	2100      	movs	r1, #0
 8016378:	f859 3b04 	ldr.w	r3, [r9], #4
 801637c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016380:	fa11 f88b 	uxtah	r8, r1, fp
 8016384:	b299      	uxth	r1, r3
 8016386:	0c1b      	lsrs	r3, r3, #16
 8016388:	eba8 0801 	sub.w	r8, r8, r1
 801638c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016390:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016394:	fa1f f888 	uxth.w	r8, r8
 8016398:	1419      	asrs	r1, r3, #16
 801639a:	454e      	cmp	r6, r9
 801639c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80163a0:	f84a 3b04 	str.w	r3, [sl], #4
 80163a4:	d8e8      	bhi.n	8016378 <__mdiff+0x80>
 80163a6:	1b33      	subs	r3, r6, r4
 80163a8:	3b15      	subs	r3, #21
 80163aa:	f023 0303 	bic.w	r3, r3, #3
 80163ae:	3304      	adds	r3, #4
 80163b0:	3415      	adds	r4, #21
 80163b2:	42a6      	cmp	r6, r4
 80163b4:	bf38      	it	cc
 80163b6:	2304      	movcc	r3, #4
 80163b8:	441d      	add	r5, r3
 80163ba:	4473      	add	r3, lr
 80163bc:	469e      	mov	lr, r3
 80163be:	462e      	mov	r6, r5
 80163c0:	4566      	cmp	r6, ip
 80163c2:	d30e      	bcc.n	80163e2 <__mdiff+0xea>
 80163c4:	f10c 0203 	add.w	r2, ip, #3
 80163c8:	1b52      	subs	r2, r2, r5
 80163ca:	f022 0203 	bic.w	r2, r2, #3
 80163ce:	3d03      	subs	r5, #3
 80163d0:	45ac      	cmp	ip, r5
 80163d2:	bf38      	it	cc
 80163d4:	2200      	movcc	r2, #0
 80163d6:	4413      	add	r3, r2
 80163d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80163dc:	b17a      	cbz	r2, 80163fe <__mdiff+0x106>
 80163de:	6107      	str	r7, [r0, #16]
 80163e0:	e7a4      	b.n	801632c <__mdiff+0x34>
 80163e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80163e6:	fa11 f288 	uxtah	r2, r1, r8
 80163ea:	1414      	asrs	r4, r2, #16
 80163ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80163f0:	b292      	uxth	r2, r2
 80163f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80163f6:	f84e 2b04 	str.w	r2, [lr], #4
 80163fa:	1421      	asrs	r1, r4, #16
 80163fc:	e7e0      	b.n	80163c0 <__mdiff+0xc8>
 80163fe:	3f01      	subs	r7, #1
 8016400:	e7ea      	b.n	80163d8 <__mdiff+0xe0>
 8016402:	bf00      	nop
 8016404:	0801a18b 	.word	0x0801a18b
 8016408:	0801a19c 	.word	0x0801a19c

0801640c <__ulp>:
 801640c:	b082      	sub	sp, #8
 801640e:	ed8d 0b00 	vstr	d0, [sp]
 8016412:	9a01      	ldr	r2, [sp, #4]
 8016414:	4b0f      	ldr	r3, [pc, #60]	; (8016454 <__ulp+0x48>)
 8016416:	4013      	ands	r3, r2
 8016418:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801641c:	2b00      	cmp	r3, #0
 801641e:	dc08      	bgt.n	8016432 <__ulp+0x26>
 8016420:	425b      	negs	r3, r3
 8016422:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8016426:	ea4f 5223 	mov.w	r2, r3, asr #20
 801642a:	da04      	bge.n	8016436 <__ulp+0x2a>
 801642c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016430:	4113      	asrs	r3, r2
 8016432:	2200      	movs	r2, #0
 8016434:	e008      	b.n	8016448 <__ulp+0x3c>
 8016436:	f1a2 0314 	sub.w	r3, r2, #20
 801643a:	2b1e      	cmp	r3, #30
 801643c:	bfda      	itte	le
 801643e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016442:	40da      	lsrle	r2, r3
 8016444:	2201      	movgt	r2, #1
 8016446:	2300      	movs	r3, #0
 8016448:	4619      	mov	r1, r3
 801644a:	4610      	mov	r0, r2
 801644c:	ec41 0b10 	vmov	d0, r0, r1
 8016450:	b002      	add	sp, #8
 8016452:	4770      	bx	lr
 8016454:	7ff00000 	.word	0x7ff00000

08016458 <__b2d>:
 8016458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801645c:	6906      	ldr	r6, [r0, #16]
 801645e:	f100 0814 	add.w	r8, r0, #20
 8016462:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016466:	1f37      	subs	r7, r6, #4
 8016468:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801646c:	4610      	mov	r0, r2
 801646e:	f7ff fd53 	bl	8015f18 <__hi0bits>
 8016472:	f1c0 0320 	rsb	r3, r0, #32
 8016476:	280a      	cmp	r0, #10
 8016478:	600b      	str	r3, [r1, #0]
 801647a:	491b      	ldr	r1, [pc, #108]	; (80164e8 <__b2d+0x90>)
 801647c:	dc15      	bgt.n	80164aa <__b2d+0x52>
 801647e:	f1c0 0c0b 	rsb	ip, r0, #11
 8016482:	fa22 f30c 	lsr.w	r3, r2, ip
 8016486:	45b8      	cmp	r8, r7
 8016488:	ea43 0501 	orr.w	r5, r3, r1
 801648c:	bf34      	ite	cc
 801648e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016492:	2300      	movcs	r3, #0
 8016494:	3015      	adds	r0, #21
 8016496:	fa02 f000 	lsl.w	r0, r2, r0
 801649a:	fa23 f30c 	lsr.w	r3, r3, ip
 801649e:	4303      	orrs	r3, r0
 80164a0:	461c      	mov	r4, r3
 80164a2:	ec45 4b10 	vmov	d0, r4, r5
 80164a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164aa:	45b8      	cmp	r8, r7
 80164ac:	bf3a      	itte	cc
 80164ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80164b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80164b6:	2300      	movcs	r3, #0
 80164b8:	380b      	subs	r0, #11
 80164ba:	d012      	beq.n	80164e2 <__b2d+0x8a>
 80164bc:	f1c0 0120 	rsb	r1, r0, #32
 80164c0:	fa23 f401 	lsr.w	r4, r3, r1
 80164c4:	4082      	lsls	r2, r0
 80164c6:	4322      	orrs	r2, r4
 80164c8:	4547      	cmp	r7, r8
 80164ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80164ce:	bf8c      	ite	hi
 80164d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80164d4:	2200      	movls	r2, #0
 80164d6:	4083      	lsls	r3, r0
 80164d8:	40ca      	lsrs	r2, r1
 80164da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80164de:	4313      	orrs	r3, r2
 80164e0:	e7de      	b.n	80164a0 <__b2d+0x48>
 80164e2:	ea42 0501 	orr.w	r5, r2, r1
 80164e6:	e7db      	b.n	80164a0 <__b2d+0x48>
 80164e8:	3ff00000 	.word	0x3ff00000

080164ec <__d2b>:
 80164ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80164f0:	460f      	mov	r7, r1
 80164f2:	2101      	movs	r1, #1
 80164f4:	ec59 8b10 	vmov	r8, r9, d0
 80164f8:	4616      	mov	r6, r2
 80164fa:	f7ff fc1b 	bl	8015d34 <_Balloc>
 80164fe:	4604      	mov	r4, r0
 8016500:	b930      	cbnz	r0, 8016510 <__d2b+0x24>
 8016502:	4602      	mov	r2, r0
 8016504:	4b24      	ldr	r3, [pc, #144]	; (8016598 <__d2b+0xac>)
 8016506:	4825      	ldr	r0, [pc, #148]	; (801659c <__d2b+0xb0>)
 8016508:	f240 310f 	movw	r1, #783	; 0x30f
 801650c:	f7fd f96e 	bl	80137ec <__assert_func>
 8016510:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016514:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016518:	bb2d      	cbnz	r5, 8016566 <__d2b+0x7a>
 801651a:	9301      	str	r3, [sp, #4]
 801651c:	f1b8 0300 	subs.w	r3, r8, #0
 8016520:	d026      	beq.n	8016570 <__d2b+0x84>
 8016522:	4668      	mov	r0, sp
 8016524:	9300      	str	r3, [sp, #0]
 8016526:	f7ff fd17 	bl	8015f58 <__lo0bits>
 801652a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801652e:	b1e8      	cbz	r0, 801656c <__d2b+0x80>
 8016530:	f1c0 0320 	rsb	r3, r0, #32
 8016534:	fa02 f303 	lsl.w	r3, r2, r3
 8016538:	430b      	orrs	r3, r1
 801653a:	40c2      	lsrs	r2, r0
 801653c:	6163      	str	r3, [r4, #20]
 801653e:	9201      	str	r2, [sp, #4]
 8016540:	9b01      	ldr	r3, [sp, #4]
 8016542:	61a3      	str	r3, [r4, #24]
 8016544:	2b00      	cmp	r3, #0
 8016546:	bf14      	ite	ne
 8016548:	2202      	movne	r2, #2
 801654a:	2201      	moveq	r2, #1
 801654c:	6122      	str	r2, [r4, #16]
 801654e:	b1bd      	cbz	r5, 8016580 <__d2b+0x94>
 8016550:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016554:	4405      	add	r5, r0
 8016556:	603d      	str	r5, [r7, #0]
 8016558:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801655c:	6030      	str	r0, [r6, #0]
 801655e:	4620      	mov	r0, r4
 8016560:	b003      	add	sp, #12
 8016562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801656a:	e7d6      	b.n	801651a <__d2b+0x2e>
 801656c:	6161      	str	r1, [r4, #20]
 801656e:	e7e7      	b.n	8016540 <__d2b+0x54>
 8016570:	a801      	add	r0, sp, #4
 8016572:	f7ff fcf1 	bl	8015f58 <__lo0bits>
 8016576:	9b01      	ldr	r3, [sp, #4]
 8016578:	6163      	str	r3, [r4, #20]
 801657a:	3020      	adds	r0, #32
 801657c:	2201      	movs	r2, #1
 801657e:	e7e5      	b.n	801654c <__d2b+0x60>
 8016580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016588:	6038      	str	r0, [r7, #0]
 801658a:	6918      	ldr	r0, [r3, #16]
 801658c:	f7ff fcc4 	bl	8015f18 <__hi0bits>
 8016590:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016594:	e7e2      	b.n	801655c <__d2b+0x70>
 8016596:	bf00      	nop
 8016598:	0801a18b 	.word	0x0801a18b
 801659c:	0801a19c 	.word	0x0801a19c

080165a0 <__ratio>:
 80165a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a4:	4688      	mov	r8, r1
 80165a6:	4669      	mov	r1, sp
 80165a8:	4681      	mov	r9, r0
 80165aa:	f7ff ff55 	bl	8016458 <__b2d>
 80165ae:	a901      	add	r1, sp, #4
 80165b0:	4640      	mov	r0, r8
 80165b2:	ec55 4b10 	vmov	r4, r5, d0
 80165b6:	f7ff ff4f 	bl	8016458 <__b2d>
 80165ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80165be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80165c2:	eba3 0c02 	sub.w	ip, r3, r2
 80165c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80165ca:	1a9b      	subs	r3, r3, r2
 80165cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80165d0:	ec51 0b10 	vmov	r0, r1, d0
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	bfd6      	itet	le
 80165d8:	460a      	movle	r2, r1
 80165da:	462a      	movgt	r2, r5
 80165dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80165e0:	468b      	mov	fp, r1
 80165e2:	462f      	mov	r7, r5
 80165e4:	bfd4      	ite	le
 80165e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80165ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80165ee:	4620      	mov	r0, r4
 80165f0:	ee10 2a10 	vmov	r2, s0
 80165f4:	465b      	mov	r3, fp
 80165f6:	4639      	mov	r1, r7
 80165f8:	f7ea f928 	bl	800084c <__aeabi_ddiv>
 80165fc:	ec41 0b10 	vmov	d0, r0, r1
 8016600:	b003      	add	sp, #12
 8016602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016606 <__copybits>:
 8016606:	3901      	subs	r1, #1
 8016608:	b570      	push	{r4, r5, r6, lr}
 801660a:	1149      	asrs	r1, r1, #5
 801660c:	6914      	ldr	r4, [r2, #16]
 801660e:	3101      	adds	r1, #1
 8016610:	f102 0314 	add.w	r3, r2, #20
 8016614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801661c:	1f05      	subs	r5, r0, #4
 801661e:	42a3      	cmp	r3, r4
 8016620:	d30c      	bcc.n	801663c <__copybits+0x36>
 8016622:	1aa3      	subs	r3, r4, r2
 8016624:	3b11      	subs	r3, #17
 8016626:	f023 0303 	bic.w	r3, r3, #3
 801662a:	3211      	adds	r2, #17
 801662c:	42a2      	cmp	r2, r4
 801662e:	bf88      	it	hi
 8016630:	2300      	movhi	r3, #0
 8016632:	4418      	add	r0, r3
 8016634:	2300      	movs	r3, #0
 8016636:	4288      	cmp	r0, r1
 8016638:	d305      	bcc.n	8016646 <__copybits+0x40>
 801663a:	bd70      	pop	{r4, r5, r6, pc}
 801663c:	f853 6b04 	ldr.w	r6, [r3], #4
 8016640:	f845 6f04 	str.w	r6, [r5, #4]!
 8016644:	e7eb      	b.n	801661e <__copybits+0x18>
 8016646:	f840 3b04 	str.w	r3, [r0], #4
 801664a:	e7f4      	b.n	8016636 <__copybits+0x30>

0801664c <__any_on>:
 801664c:	f100 0214 	add.w	r2, r0, #20
 8016650:	6900      	ldr	r0, [r0, #16]
 8016652:	114b      	asrs	r3, r1, #5
 8016654:	4298      	cmp	r0, r3
 8016656:	b510      	push	{r4, lr}
 8016658:	db11      	blt.n	801667e <__any_on+0x32>
 801665a:	dd0a      	ble.n	8016672 <__any_on+0x26>
 801665c:	f011 011f 	ands.w	r1, r1, #31
 8016660:	d007      	beq.n	8016672 <__any_on+0x26>
 8016662:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016666:	fa24 f001 	lsr.w	r0, r4, r1
 801666a:	fa00 f101 	lsl.w	r1, r0, r1
 801666e:	428c      	cmp	r4, r1
 8016670:	d10b      	bne.n	801668a <__any_on+0x3e>
 8016672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016676:	4293      	cmp	r3, r2
 8016678:	d803      	bhi.n	8016682 <__any_on+0x36>
 801667a:	2000      	movs	r0, #0
 801667c:	bd10      	pop	{r4, pc}
 801667e:	4603      	mov	r3, r0
 8016680:	e7f7      	b.n	8016672 <__any_on+0x26>
 8016682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016686:	2900      	cmp	r1, #0
 8016688:	d0f5      	beq.n	8016676 <__any_on+0x2a>
 801668a:	2001      	movs	r0, #1
 801668c:	e7f6      	b.n	801667c <__any_on+0x30>

0801668e <sulp>:
 801668e:	b570      	push	{r4, r5, r6, lr}
 8016690:	4604      	mov	r4, r0
 8016692:	460d      	mov	r5, r1
 8016694:	ec45 4b10 	vmov	d0, r4, r5
 8016698:	4616      	mov	r6, r2
 801669a:	f7ff feb7 	bl	801640c <__ulp>
 801669e:	ec51 0b10 	vmov	r0, r1, d0
 80166a2:	b17e      	cbz	r6, 80166c4 <sulp+0x36>
 80166a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	dd09      	ble.n	80166c4 <sulp+0x36>
 80166b0:	051b      	lsls	r3, r3, #20
 80166b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80166b6:	2400      	movs	r4, #0
 80166b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80166bc:	4622      	mov	r2, r4
 80166be:	462b      	mov	r3, r5
 80166c0:	f7e9 ff9a 	bl	80005f8 <__aeabi_dmul>
 80166c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080166c8 <_strtod_l>:
 80166c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166cc:	ed2d 8b02 	vpush	{d8}
 80166d0:	b09b      	sub	sp, #108	; 0x6c
 80166d2:	4604      	mov	r4, r0
 80166d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80166d6:	2200      	movs	r2, #0
 80166d8:	9216      	str	r2, [sp, #88]	; 0x58
 80166da:	460d      	mov	r5, r1
 80166dc:	f04f 0800 	mov.w	r8, #0
 80166e0:	f04f 0900 	mov.w	r9, #0
 80166e4:	460a      	mov	r2, r1
 80166e6:	9215      	str	r2, [sp, #84]	; 0x54
 80166e8:	7811      	ldrb	r1, [r2, #0]
 80166ea:	292b      	cmp	r1, #43	; 0x2b
 80166ec:	d04c      	beq.n	8016788 <_strtod_l+0xc0>
 80166ee:	d83a      	bhi.n	8016766 <_strtod_l+0x9e>
 80166f0:	290d      	cmp	r1, #13
 80166f2:	d834      	bhi.n	801675e <_strtod_l+0x96>
 80166f4:	2908      	cmp	r1, #8
 80166f6:	d834      	bhi.n	8016762 <_strtod_l+0x9a>
 80166f8:	2900      	cmp	r1, #0
 80166fa:	d03d      	beq.n	8016778 <_strtod_l+0xb0>
 80166fc:	2200      	movs	r2, #0
 80166fe:	920a      	str	r2, [sp, #40]	; 0x28
 8016700:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8016702:	7832      	ldrb	r2, [r6, #0]
 8016704:	2a30      	cmp	r2, #48	; 0x30
 8016706:	f040 80b4 	bne.w	8016872 <_strtod_l+0x1aa>
 801670a:	7872      	ldrb	r2, [r6, #1]
 801670c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016710:	2a58      	cmp	r2, #88	; 0x58
 8016712:	d170      	bne.n	80167f6 <_strtod_l+0x12e>
 8016714:	9302      	str	r3, [sp, #8]
 8016716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016718:	9301      	str	r3, [sp, #4]
 801671a:	ab16      	add	r3, sp, #88	; 0x58
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	4a8e      	ldr	r2, [pc, #568]	; (8016958 <_strtod_l+0x290>)
 8016720:	ab17      	add	r3, sp, #92	; 0x5c
 8016722:	a915      	add	r1, sp, #84	; 0x54
 8016724:	4620      	mov	r0, r4
 8016726:	f001 fa6d 	bl	8017c04 <__gethex>
 801672a:	f010 070f 	ands.w	r7, r0, #15
 801672e:	4605      	mov	r5, r0
 8016730:	d005      	beq.n	801673e <_strtod_l+0x76>
 8016732:	2f06      	cmp	r7, #6
 8016734:	d12a      	bne.n	801678c <_strtod_l+0xc4>
 8016736:	3601      	adds	r6, #1
 8016738:	2300      	movs	r3, #0
 801673a:	9615      	str	r6, [sp, #84]	; 0x54
 801673c:	930a      	str	r3, [sp, #40]	; 0x28
 801673e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016740:	2b00      	cmp	r3, #0
 8016742:	f040 857f 	bne.w	8017244 <_strtod_l+0xb7c>
 8016746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016748:	b1db      	cbz	r3, 8016782 <_strtod_l+0xba>
 801674a:	4642      	mov	r2, r8
 801674c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016750:	ec43 2b10 	vmov	d0, r2, r3
 8016754:	b01b      	add	sp, #108	; 0x6c
 8016756:	ecbd 8b02 	vpop	{d8}
 801675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801675e:	2920      	cmp	r1, #32
 8016760:	d1cc      	bne.n	80166fc <_strtod_l+0x34>
 8016762:	3201      	adds	r2, #1
 8016764:	e7bf      	b.n	80166e6 <_strtod_l+0x1e>
 8016766:	292d      	cmp	r1, #45	; 0x2d
 8016768:	d1c8      	bne.n	80166fc <_strtod_l+0x34>
 801676a:	2101      	movs	r1, #1
 801676c:	910a      	str	r1, [sp, #40]	; 0x28
 801676e:	1c51      	adds	r1, r2, #1
 8016770:	9115      	str	r1, [sp, #84]	; 0x54
 8016772:	7852      	ldrb	r2, [r2, #1]
 8016774:	2a00      	cmp	r2, #0
 8016776:	d1c3      	bne.n	8016700 <_strtod_l+0x38>
 8016778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801677a:	9515      	str	r5, [sp, #84]	; 0x54
 801677c:	2b00      	cmp	r3, #0
 801677e:	f040 855f 	bne.w	8017240 <_strtod_l+0xb78>
 8016782:	4642      	mov	r2, r8
 8016784:	464b      	mov	r3, r9
 8016786:	e7e3      	b.n	8016750 <_strtod_l+0x88>
 8016788:	2100      	movs	r1, #0
 801678a:	e7ef      	b.n	801676c <_strtod_l+0xa4>
 801678c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801678e:	b13a      	cbz	r2, 80167a0 <_strtod_l+0xd8>
 8016790:	2135      	movs	r1, #53	; 0x35
 8016792:	a818      	add	r0, sp, #96	; 0x60
 8016794:	f7ff ff37 	bl	8016606 <__copybits>
 8016798:	9916      	ldr	r1, [sp, #88]	; 0x58
 801679a:	4620      	mov	r0, r4
 801679c:	f7ff fb0a 	bl	8015db4 <_Bfree>
 80167a0:	3f01      	subs	r7, #1
 80167a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80167a4:	2f04      	cmp	r7, #4
 80167a6:	d806      	bhi.n	80167b6 <_strtod_l+0xee>
 80167a8:	e8df f007 	tbb	[pc, r7]
 80167ac:	201d0314 	.word	0x201d0314
 80167b0:	14          	.byte	0x14
 80167b1:	00          	.byte	0x00
 80167b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80167b6:	05e9      	lsls	r1, r5, #23
 80167b8:	bf48      	it	mi
 80167ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80167be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80167c2:	0d1b      	lsrs	r3, r3, #20
 80167c4:	051b      	lsls	r3, r3, #20
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d1b9      	bne.n	801673e <_strtod_l+0x76>
 80167ca:	f7fe fae7 	bl	8014d9c <__errno>
 80167ce:	2322      	movs	r3, #34	; 0x22
 80167d0:	6003      	str	r3, [r0, #0]
 80167d2:	e7b4      	b.n	801673e <_strtod_l+0x76>
 80167d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80167d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80167dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80167e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80167e4:	e7e7      	b.n	80167b6 <_strtod_l+0xee>
 80167e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016960 <_strtod_l+0x298>
 80167ea:	e7e4      	b.n	80167b6 <_strtod_l+0xee>
 80167ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80167f0:	f04f 38ff 	mov.w	r8, #4294967295
 80167f4:	e7df      	b.n	80167b6 <_strtod_l+0xee>
 80167f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80167f8:	1c5a      	adds	r2, r3, #1
 80167fa:	9215      	str	r2, [sp, #84]	; 0x54
 80167fc:	785b      	ldrb	r3, [r3, #1]
 80167fe:	2b30      	cmp	r3, #48	; 0x30
 8016800:	d0f9      	beq.n	80167f6 <_strtod_l+0x12e>
 8016802:	2b00      	cmp	r3, #0
 8016804:	d09b      	beq.n	801673e <_strtod_l+0x76>
 8016806:	2301      	movs	r3, #1
 8016808:	f04f 0a00 	mov.w	sl, #0
 801680c:	9304      	str	r3, [sp, #16]
 801680e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016810:	930b      	str	r3, [sp, #44]	; 0x2c
 8016812:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016816:	46d3      	mov	fp, sl
 8016818:	220a      	movs	r2, #10
 801681a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801681c:	7806      	ldrb	r6, [r0, #0]
 801681e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016822:	b2d9      	uxtb	r1, r3
 8016824:	2909      	cmp	r1, #9
 8016826:	d926      	bls.n	8016876 <_strtod_l+0x1ae>
 8016828:	494c      	ldr	r1, [pc, #304]	; (801695c <_strtod_l+0x294>)
 801682a:	2201      	movs	r2, #1
 801682c:	f7fe f9b1 	bl	8014b92 <strncmp>
 8016830:	2800      	cmp	r0, #0
 8016832:	d030      	beq.n	8016896 <_strtod_l+0x1ce>
 8016834:	2000      	movs	r0, #0
 8016836:	4632      	mov	r2, r6
 8016838:	9005      	str	r0, [sp, #20]
 801683a:	465e      	mov	r6, fp
 801683c:	4603      	mov	r3, r0
 801683e:	2a65      	cmp	r2, #101	; 0x65
 8016840:	d001      	beq.n	8016846 <_strtod_l+0x17e>
 8016842:	2a45      	cmp	r2, #69	; 0x45
 8016844:	d113      	bne.n	801686e <_strtod_l+0x1a6>
 8016846:	b91e      	cbnz	r6, 8016850 <_strtod_l+0x188>
 8016848:	9a04      	ldr	r2, [sp, #16]
 801684a:	4302      	orrs	r2, r0
 801684c:	d094      	beq.n	8016778 <_strtod_l+0xb0>
 801684e:	2600      	movs	r6, #0
 8016850:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8016852:	1c6a      	adds	r2, r5, #1
 8016854:	9215      	str	r2, [sp, #84]	; 0x54
 8016856:	786a      	ldrb	r2, [r5, #1]
 8016858:	2a2b      	cmp	r2, #43	; 0x2b
 801685a:	d074      	beq.n	8016946 <_strtod_l+0x27e>
 801685c:	2a2d      	cmp	r2, #45	; 0x2d
 801685e:	d078      	beq.n	8016952 <_strtod_l+0x28a>
 8016860:	f04f 0c00 	mov.w	ip, #0
 8016864:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016868:	2909      	cmp	r1, #9
 801686a:	d97f      	bls.n	801696c <_strtod_l+0x2a4>
 801686c:	9515      	str	r5, [sp, #84]	; 0x54
 801686e:	2700      	movs	r7, #0
 8016870:	e09e      	b.n	80169b0 <_strtod_l+0x2e8>
 8016872:	2300      	movs	r3, #0
 8016874:	e7c8      	b.n	8016808 <_strtod_l+0x140>
 8016876:	f1bb 0f08 	cmp.w	fp, #8
 801687a:	bfd8      	it	le
 801687c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801687e:	f100 0001 	add.w	r0, r0, #1
 8016882:	bfda      	itte	le
 8016884:	fb02 3301 	mlale	r3, r2, r1, r3
 8016888:	9309      	strle	r3, [sp, #36]	; 0x24
 801688a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801688e:	f10b 0b01 	add.w	fp, fp, #1
 8016892:	9015      	str	r0, [sp, #84]	; 0x54
 8016894:	e7c1      	b.n	801681a <_strtod_l+0x152>
 8016896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	9215      	str	r2, [sp, #84]	; 0x54
 801689c:	785a      	ldrb	r2, [r3, #1]
 801689e:	f1bb 0f00 	cmp.w	fp, #0
 80168a2:	d037      	beq.n	8016914 <_strtod_l+0x24c>
 80168a4:	9005      	str	r0, [sp, #20]
 80168a6:	465e      	mov	r6, fp
 80168a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80168ac:	2b09      	cmp	r3, #9
 80168ae:	d912      	bls.n	80168d6 <_strtod_l+0x20e>
 80168b0:	2301      	movs	r3, #1
 80168b2:	e7c4      	b.n	801683e <_strtod_l+0x176>
 80168b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168b6:	1c5a      	adds	r2, r3, #1
 80168b8:	9215      	str	r2, [sp, #84]	; 0x54
 80168ba:	785a      	ldrb	r2, [r3, #1]
 80168bc:	3001      	adds	r0, #1
 80168be:	2a30      	cmp	r2, #48	; 0x30
 80168c0:	d0f8      	beq.n	80168b4 <_strtod_l+0x1ec>
 80168c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80168c6:	2b08      	cmp	r3, #8
 80168c8:	f200 84c1 	bhi.w	801724e <_strtod_l+0xb86>
 80168cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168ce:	9005      	str	r0, [sp, #20]
 80168d0:	2000      	movs	r0, #0
 80168d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80168d4:	4606      	mov	r6, r0
 80168d6:	3a30      	subs	r2, #48	; 0x30
 80168d8:	f100 0301 	add.w	r3, r0, #1
 80168dc:	d014      	beq.n	8016908 <_strtod_l+0x240>
 80168de:	9905      	ldr	r1, [sp, #20]
 80168e0:	4419      	add	r1, r3
 80168e2:	9105      	str	r1, [sp, #20]
 80168e4:	4633      	mov	r3, r6
 80168e6:	eb00 0c06 	add.w	ip, r0, r6
 80168ea:	210a      	movs	r1, #10
 80168ec:	4563      	cmp	r3, ip
 80168ee:	d113      	bne.n	8016918 <_strtod_l+0x250>
 80168f0:	1833      	adds	r3, r6, r0
 80168f2:	2b08      	cmp	r3, #8
 80168f4:	f106 0601 	add.w	r6, r6, #1
 80168f8:	4406      	add	r6, r0
 80168fa:	dc1a      	bgt.n	8016932 <_strtod_l+0x26a>
 80168fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168fe:	230a      	movs	r3, #10
 8016900:	fb03 2301 	mla	r3, r3, r1, r2
 8016904:	9309      	str	r3, [sp, #36]	; 0x24
 8016906:	2300      	movs	r3, #0
 8016908:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801690a:	1c51      	adds	r1, r2, #1
 801690c:	9115      	str	r1, [sp, #84]	; 0x54
 801690e:	7852      	ldrb	r2, [r2, #1]
 8016910:	4618      	mov	r0, r3
 8016912:	e7c9      	b.n	80168a8 <_strtod_l+0x1e0>
 8016914:	4658      	mov	r0, fp
 8016916:	e7d2      	b.n	80168be <_strtod_l+0x1f6>
 8016918:	2b08      	cmp	r3, #8
 801691a:	f103 0301 	add.w	r3, r3, #1
 801691e:	dc03      	bgt.n	8016928 <_strtod_l+0x260>
 8016920:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016922:	434f      	muls	r7, r1
 8016924:	9709      	str	r7, [sp, #36]	; 0x24
 8016926:	e7e1      	b.n	80168ec <_strtod_l+0x224>
 8016928:	2b10      	cmp	r3, #16
 801692a:	bfd8      	it	le
 801692c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8016930:	e7dc      	b.n	80168ec <_strtod_l+0x224>
 8016932:	2e10      	cmp	r6, #16
 8016934:	bfdc      	itt	le
 8016936:	230a      	movle	r3, #10
 8016938:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801693c:	e7e3      	b.n	8016906 <_strtod_l+0x23e>
 801693e:	2300      	movs	r3, #0
 8016940:	9305      	str	r3, [sp, #20]
 8016942:	2301      	movs	r3, #1
 8016944:	e780      	b.n	8016848 <_strtod_l+0x180>
 8016946:	f04f 0c00 	mov.w	ip, #0
 801694a:	1caa      	adds	r2, r5, #2
 801694c:	9215      	str	r2, [sp, #84]	; 0x54
 801694e:	78aa      	ldrb	r2, [r5, #2]
 8016950:	e788      	b.n	8016864 <_strtod_l+0x19c>
 8016952:	f04f 0c01 	mov.w	ip, #1
 8016956:	e7f8      	b.n	801694a <_strtod_l+0x282>
 8016958:	0801a2f8 	.word	0x0801a2f8
 801695c:	0801a2f4 	.word	0x0801a2f4
 8016960:	7ff00000 	.word	0x7ff00000
 8016964:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016966:	1c51      	adds	r1, r2, #1
 8016968:	9115      	str	r1, [sp, #84]	; 0x54
 801696a:	7852      	ldrb	r2, [r2, #1]
 801696c:	2a30      	cmp	r2, #48	; 0x30
 801696e:	d0f9      	beq.n	8016964 <_strtod_l+0x29c>
 8016970:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016974:	2908      	cmp	r1, #8
 8016976:	f63f af7a 	bhi.w	801686e <_strtod_l+0x1a6>
 801697a:	3a30      	subs	r2, #48	; 0x30
 801697c:	9208      	str	r2, [sp, #32]
 801697e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016980:	920c      	str	r2, [sp, #48]	; 0x30
 8016982:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016984:	1c57      	adds	r7, r2, #1
 8016986:	9715      	str	r7, [sp, #84]	; 0x54
 8016988:	7852      	ldrb	r2, [r2, #1]
 801698a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801698e:	f1be 0f09 	cmp.w	lr, #9
 8016992:	d938      	bls.n	8016a06 <_strtod_l+0x33e>
 8016994:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016996:	1a7f      	subs	r7, r7, r1
 8016998:	2f08      	cmp	r7, #8
 801699a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801699e:	dc03      	bgt.n	80169a8 <_strtod_l+0x2e0>
 80169a0:	9908      	ldr	r1, [sp, #32]
 80169a2:	428f      	cmp	r7, r1
 80169a4:	bfa8      	it	ge
 80169a6:	460f      	movge	r7, r1
 80169a8:	f1bc 0f00 	cmp.w	ip, #0
 80169ac:	d000      	beq.n	80169b0 <_strtod_l+0x2e8>
 80169ae:	427f      	negs	r7, r7
 80169b0:	2e00      	cmp	r6, #0
 80169b2:	d14f      	bne.n	8016a54 <_strtod_l+0x38c>
 80169b4:	9904      	ldr	r1, [sp, #16]
 80169b6:	4301      	orrs	r1, r0
 80169b8:	f47f aec1 	bne.w	801673e <_strtod_l+0x76>
 80169bc:	2b00      	cmp	r3, #0
 80169be:	f47f aedb 	bne.w	8016778 <_strtod_l+0xb0>
 80169c2:	2a69      	cmp	r2, #105	; 0x69
 80169c4:	d029      	beq.n	8016a1a <_strtod_l+0x352>
 80169c6:	dc26      	bgt.n	8016a16 <_strtod_l+0x34e>
 80169c8:	2a49      	cmp	r2, #73	; 0x49
 80169ca:	d026      	beq.n	8016a1a <_strtod_l+0x352>
 80169cc:	2a4e      	cmp	r2, #78	; 0x4e
 80169ce:	f47f aed3 	bne.w	8016778 <_strtod_l+0xb0>
 80169d2:	499b      	ldr	r1, [pc, #620]	; (8016c40 <_strtod_l+0x578>)
 80169d4:	a815      	add	r0, sp, #84	; 0x54
 80169d6:	f001 fb55 	bl	8018084 <__match>
 80169da:	2800      	cmp	r0, #0
 80169dc:	f43f aecc 	beq.w	8016778 <_strtod_l+0xb0>
 80169e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	2b28      	cmp	r3, #40	; 0x28
 80169e6:	d12f      	bne.n	8016a48 <_strtod_l+0x380>
 80169e8:	4996      	ldr	r1, [pc, #600]	; (8016c44 <_strtod_l+0x57c>)
 80169ea:	aa18      	add	r2, sp, #96	; 0x60
 80169ec:	a815      	add	r0, sp, #84	; 0x54
 80169ee:	f001 fb5d 	bl	80180ac <__hexnan>
 80169f2:	2805      	cmp	r0, #5
 80169f4:	d128      	bne.n	8016a48 <_strtod_l+0x380>
 80169f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80169f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80169fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016a00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016a04:	e69b      	b.n	801673e <_strtod_l+0x76>
 8016a06:	9f08      	ldr	r7, [sp, #32]
 8016a08:	210a      	movs	r1, #10
 8016a0a:	fb01 2107 	mla	r1, r1, r7, r2
 8016a0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016a12:	9208      	str	r2, [sp, #32]
 8016a14:	e7b5      	b.n	8016982 <_strtod_l+0x2ba>
 8016a16:	2a6e      	cmp	r2, #110	; 0x6e
 8016a18:	e7d9      	b.n	80169ce <_strtod_l+0x306>
 8016a1a:	498b      	ldr	r1, [pc, #556]	; (8016c48 <_strtod_l+0x580>)
 8016a1c:	a815      	add	r0, sp, #84	; 0x54
 8016a1e:	f001 fb31 	bl	8018084 <__match>
 8016a22:	2800      	cmp	r0, #0
 8016a24:	f43f aea8 	beq.w	8016778 <_strtod_l+0xb0>
 8016a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a2a:	4988      	ldr	r1, [pc, #544]	; (8016c4c <_strtod_l+0x584>)
 8016a2c:	3b01      	subs	r3, #1
 8016a2e:	a815      	add	r0, sp, #84	; 0x54
 8016a30:	9315      	str	r3, [sp, #84]	; 0x54
 8016a32:	f001 fb27 	bl	8018084 <__match>
 8016a36:	b910      	cbnz	r0, 8016a3e <_strtod_l+0x376>
 8016a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a3a:	3301      	adds	r3, #1
 8016a3c:	9315      	str	r3, [sp, #84]	; 0x54
 8016a3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8016c5c <_strtod_l+0x594>
 8016a42:	f04f 0800 	mov.w	r8, #0
 8016a46:	e67a      	b.n	801673e <_strtod_l+0x76>
 8016a48:	4881      	ldr	r0, [pc, #516]	; (8016c50 <_strtod_l+0x588>)
 8016a4a:	f001 f855 	bl	8017af8 <nan>
 8016a4e:	ec59 8b10 	vmov	r8, r9, d0
 8016a52:	e674      	b.n	801673e <_strtod_l+0x76>
 8016a54:	9b05      	ldr	r3, [sp, #20]
 8016a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a58:	1afb      	subs	r3, r7, r3
 8016a5a:	f1bb 0f00 	cmp.w	fp, #0
 8016a5e:	bf08      	it	eq
 8016a60:	46b3      	moveq	fp, r6
 8016a62:	2e10      	cmp	r6, #16
 8016a64:	9308      	str	r3, [sp, #32]
 8016a66:	4635      	mov	r5, r6
 8016a68:	bfa8      	it	ge
 8016a6a:	2510      	movge	r5, #16
 8016a6c:	f7e9 fd4a 	bl	8000504 <__aeabi_ui2d>
 8016a70:	2e09      	cmp	r6, #9
 8016a72:	4680      	mov	r8, r0
 8016a74:	4689      	mov	r9, r1
 8016a76:	dd13      	ble.n	8016aa0 <_strtod_l+0x3d8>
 8016a78:	4b76      	ldr	r3, [pc, #472]	; (8016c54 <_strtod_l+0x58c>)
 8016a7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016a7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016a82:	f7e9 fdb9 	bl	80005f8 <__aeabi_dmul>
 8016a86:	4680      	mov	r8, r0
 8016a88:	4650      	mov	r0, sl
 8016a8a:	4689      	mov	r9, r1
 8016a8c:	f7e9 fd3a 	bl	8000504 <__aeabi_ui2d>
 8016a90:	4602      	mov	r2, r0
 8016a92:	460b      	mov	r3, r1
 8016a94:	4640      	mov	r0, r8
 8016a96:	4649      	mov	r1, r9
 8016a98:	f7e9 fbf8 	bl	800028c <__adddf3>
 8016a9c:	4680      	mov	r8, r0
 8016a9e:	4689      	mov	r9, r1
 8016aa0:	2e0f      	cmp	r6, #15
 8016aa2:	dc38      	bgt.n	8016b16 <_strtod_l+0x44e>
 8016aa4:	9b08      	ldr	r3, [sp, #32]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	f43f ae49 	beq.w	801673e <_strtod_l+0x76>
 8016aac:	dd24      	ble.n	8016af8 <_strtod_l+0x430>
 8016aae:	2b16      	cmp	r3, #22
 8016ab0:	dc0b      	bgt.n	8016aca <_strtod_l+0x402>
 8016ab2:	4968      	ldr	r1, [pc, #416]	; (8016c54 <_strtod_l+0x58c>)
 8016ab4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016abc:	4642      	mov	r2, r8
 8016abe:	464b      	mov	r3, r9
 8016ac0:	f7e9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8016ac4:	4680      	mov	r8, r0
 8016ac6:	4689      	mov	r9, r1
 8016ac8:	e639      	b.n	801673e <_strtod_l+0x76>
 8016aca:	9a08      	ldr	r2, [sp, #32]
 8016acc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	db20      	blt.n	8016b16 <_strtod_l+0x44e>
 8016ad4:	4c5f      	ldr	r4, [pc, #380]	; (8016c54 <_strtod_l+0x58c>)
 8016ad6:	f1c6 060f 	rsb	r6, r6, #15
 8016ada:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8016ade:	4642      	mov	r2, r8
 8016ae0:	464b      	mov	r3, r9
 8016ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ae6:	f7e9 fd87 	bl	80005f8 <__aeabi_dmul>
 8016aea:	9b08      	ldr	r3, [sp, #32]
 8016aec:	1b9e      	subs	r6, r3, r6
 8016aee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8016af2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016af6:	e7e3      	b.n	8016ac0 <_strtod_l+0x3f8>
 8016af8:	9b08      	ldr	r3, [sp, #32]
 8016afa:	3316      	adds	r3, #22
 8016afc:	db0b      	blt.n	8016b16 <_strtod_l+0x44e>
 8016afe:	9b05      	ldr	r3, [sp, #20]
 8016b00:	1bdf      	subs	r7, r3, r7
 8016b02:	4b54      	ldr	r3, [pc, #336]	; (8016c54 <_strtod_l+0x58c>)
 8016b04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8016b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b0c:	4640      	mov	r0, r8
 8016b0e:	4649      	mov	r1, r9
 8016b10:	f7e9 fe9c 	bl	800084c <__aeabi_ddiv>
 8016b14:	e7d6      	b.n	8016ac4 <_strtod_l+0x3fc>
 8016b16:	9b08      	ldr	r3, [sp, #32]
 8016b18:	1b75      	subs	r5, r6, r5
 8016b1a:	441d      	add	r5, r3
 8016b1c:	2d00      	cmp	r5, #0
 8016b1e:	dd70      	ble.n	8016c02 <_strtod_l+0x53a>
 8016b20:	f015 030f 	ands.w	r3, r5, #15
 8016b24:	d00a      	beq.n	8016b3c <_strtod_l+0x474>
 8016b26:	494b      	ldr	r1, [pc, #300]	; (8016c54 <_strtod_l+0x58c>)
 8016b28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016b2c:	4642      	mov	r2, r8
 8016b2e:	464b      	mov	r3, r9
 8016b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b34:	f7e9 fd60 	bl	80005f8 <__aeabi_dmul>
 8016b38:	4680      	mov	r8, r0
 8016b3a:	4689      	mov	r9, r1
 8016b3c:	f035 050f 	bics.w	r5, r5, #15
 8016b40:	d04d      	beq.n	8016bde <_strtod_l+0x516>
 8016b42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8016b46:	dd22      	ble.n	8016b8e <_strtod_l+0x4c6>
 8016b48:	2500      	movs	r5, #0
 8016b4a:	46ab      	mov	fp, r5
 8016b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8016b4e:	9505      	str	r5, [sp, #20]
 8016b50:	2322      	movs	r3, #34	; 0x22
 8016b52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016c5c <_strtod_l+0x594>
 8016b56:	6023      	str	r3, [r4, #0]
 8016b58:	f04f 0800 	mov.w	r8, #0
 8016b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	f43f aded 	beq.w	801673e <_strtod_l+0x76>
 8016b64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016b66:	4620      	mov	r0, r4
 8016b68:	f7ff f924 	bl	8015db4 <_Bfree>
 8016b6c:	9905      	ldr	r1, [sp, #20]
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f7ff f920 	bl	8015db4 <_Bfree>
 8016b74:	4659      	mov	r1, fp
 8016b76:	4620      	mov	r0, r4
 8016b78:	f7ff f91c 	bl	8015db4 <_Bfree>
 8016b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f7ff f918 	bl	8015db4 <_Bfree>
 8016b84:	4629      	mov	r1, r5
 8016b86:	4620      	mov	r0, r4
 8016b88:	f7ff f914 	bl	8015db4 <_Bfree>
 8016b8c:	e5d7      	b.n	801673e <_strtod_l+0x76>
 8016b8e:	4b32      	ldr	r3, [pc, #200]	; (8016c58 <_strtod_l+0x590>)
 8016b90:	9304      	str	r3, [sp, #16]
 8016b92:	2300      	movs	r3, #0
 8016b94:	112d      	asrs	r5, r5, #4
 8016b96:	4640      	mov	r0, r8
 8016b98:	4649      	mov	r1, r9
 8016b9a:	469a      	mov	sl, r3
 8016b9c:	2d01      	cmp	r5, #1
 8016b9e:	dc21      	bgt.n	8016be4 <_strtod_l+0x51c>
 8016ba0:	b10b      	cbz	r3, 8016ba6 <_strtod_l+0x4de>
 8016ba2:	4680      	mov	r8, r0
 8016ba4:	4689      	mov	r9, r1
 8016ba6:	492c      	ldr	r1, [pc, #176]	; (8016c58 <_strtod_l+0x590>)
 8016ba8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016bac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016bb0:	4642      	mov	r2, r8
 8016bb2:	464b      	mov	r3, r9
 8016bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016bb8:	f7e9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8016bbc:	4b27      	ldr	r3, [pc, #156]	; (8016c5c <_strtod_l+0x594>)
 8016bbe:	460a      	mov	r2, r1
 8016bc0:	400b      	ands	r3, r1
 8016bc2:	4927      	ldr	r1, [pc, #156]	; (8016c60 <_strtod_l+0x598>)
 8016bc4:	428b      	cmp	r3, r1
 8016bc6:	4680      	mov	r8, r0
 8016bc8:	d8be      	bhi.n	8016b48 <_strtod_l+0x480>
 8016bca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016bce:	428b      	cmp	r3, r1
 8016bd0:	bf86      	itte	hi
 8016bd2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8016c64 <_strtod_l+0x59c>
 8016bd6:	f04f 38ff 	movhi.w	r8, #4294967295
 8016bda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8016bde:	2300      	movs	r3, #0
 8016be0:	9304      	str	r3, [sp, #16]
 8016be2:	e07b      	b.n	8016cdc <_strtod_l+0x614>
 8016be4:	07ea      	lsls	r2, r5, #31
 8016be6:	d505      	bpl.n	8016bf4 <_strtod_l+0x52c>
 8016be8:	9b04      	ldr	r3, [sp, #16]
 8016bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bee:	f7e9 fd03 	bl	80005f8 <__aeabi_dmul>
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	9a04      	ldr	r2, [sp, #16]
 8016bf6:	3208      	adds	r2, #8
 8016bf8:	f10a 0a01 	add.w	sl, sl, #1
 8016bfc:	106d      	asrs	r5, r5, #1
 8016bfe:	9204      	str	r2, [sp, #16]
 8016c00:	e7cc      	b.n	8016b9c <_strtod_l+0x4d4>
 8016c02:	d0ec      	beq.n	8016bde <_strtod_l+0x516>
 8016c04:	426d      	negs	r5, r5
 8016c06:	f015 020f 	ands.w	r2, r5, #15
 8016c0a:	d00a      	beq.n	8016c22 <_strtod_l+0x55a>
 8016c0c:	4b11      	ldr	r3, [pc, #68]	; (8016c54 <_strtod_l+0x58c>)
 8016c0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c12:	4640      	mov	r0, r8
 8016c14:	4649      	mov	r1, r9
 8016c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c1a:	f7e9 fe17 	bl	800084c <__aeabi_ddiv>
 8016c1e:	4680      	mov	r8, r0
 8016c20:	4689      	mov	r9, r1
 8016c22:	112d      	asrs	r5, r5, #4
 8016c24:	d0db      	beq.n	8016bde <_strtod_l+0x516>
 8016c26:	2d1f      	cmp	r5, #31
 8016c28:	dd1e      	ble.n	8016c68 <_strtod_l+0x5a0>
 8016c2a:	2500      	movs	r5, #0
 8016c2c:	46ab      	mov	fp, r5
 8016c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8016c30:	9505      	str	r5, [sp, #20]
 8016c32:	2322      	movs	r3, #34	; 0x22
 8016c34:	f04f 0800 	mov.w	r8, #0
 8016c38:	f04f 0900 	mov.w	r9, #0
 8016c3c:	6023      	str	r3, [r4, #0]
 8016c3e:	e78d      	b.n	8016b5c <_strtod_l+0x494>
 8016c40:	0801a089 	.word	0x0801a089
 8016c44:	0801a30c 	.word	0x0801a30c
 8016c48:	0801a081 	.word	0x0801a081
 8016c4c:	0801a129 	.word	0x0801a129
 8016c50:	08019f7a 	.word	0x08019f7a
 8016c54:	0801a220 	.word	0x0801a220
 8016c58:	0801a1f8 	.word	0x0801a1f8
 8016c5c:	7ff00000 	.word	0x7ff00000
 8016c60:	7ca00000 	.word	0x7ca00000
 8016c64:	7fefffff 	.word	0x7fefffff
 8016c68:	f015 0310 	ands.w	r3, r5, #16
 8016c6c:	bf18      	it	ne
 8016c6e:	236a      	movne	r3, #106	; 0x6a
 8016c70:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8017014 <_strtod_l+0x94c>
 8016c74:	9304      	str	r3, [sp, #16]
 8016c76:	4640      	mov	r0, r8
 8016c78:	4649      	mov	r1, r9
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	07ea      	lsls	r2, r5, #31
 8016c7e:	d504      	bpl.n	8016c8a <_strtod_l+0x5c2>
 8016c80:	e9da 2300 	ldrd	r2, r3, [sl]
 8016c84:	f7e9 fcb8 	bl	80005f8 <__aeabi_dmul>
 8016c88:	2301      	movs	r3, #1
 8016c8a:	106d      	asrs	r5, r5, #1
 8016c8c:	f10a 0a08 	add.w	sl, sl, #8
 8016c90:	d1f4      	bne.n	8016c7c <_strtod_l+0x5b4>
 8016c92:	b10b      	cbz	r3, 8016c98 <_strtod_l+0x5d0>
 8016c94:	4680      	mov	r8, r0
 8016c96:	4689      	mov	r9, r1
 8016c98:	9b04      	ldr	r3, [sp, #16]
 8016c9a:	b1bb      	cbz	r3, 8016ccc <_strtod_l+0x604>
 8016c9c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016ca0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	4649      	mov	r1, r9
 8016ca8:	dd10      	ble.n	8016ccc <_strtod_l+0x604>
 8016caa:	2b1f      	cmp	r3, #31
 8016cac:	f340 811e 	ble.w	8016eec <_strtod_l+0x824>
 8016cb0:	2b34      	cmp	r3, #52	; 0x34
 8016cb2:	bfde      	ittt	le
 8016cb4:	f04f 33ff 	movle.w	r3, #4294967295
 8016cb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8016cbc:	4093      	lslle	r3, r2
 8016cbe:	f04f 0800 	mov.w	r8, #0
 8016cc2:	bfcc      	ite	gt
 8016cc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016cc8:	ea03 0901 	andle.w	r9, r3, r1
 8016ccc:	2200      	movs	r2, #0
 8016cce:	2300      	movs	r3, #0
 8016cd0:	4640      	mov	r0, r8
 8016cd2:	4649      	mov	r1, r9
 8016cd4:	f7e9 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	d1a6      	bne.n	8016c2a <_strtod_l+0x562>
 8016cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cde:	9300      	str	r3, [sp, #0]
 8016ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ce2:	4633      	mov	r3, r6
 8016ce4:	465a      	mov	r2, fp
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	f7ff f8cc 	bl	8015e84 <__s2b>
 8016cec:	9009      	str	r0, [sp, #36]	; 0x24
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	f43f af2a 	beq.w	8016b48 <_strtod_l+0x480>
 8016cf4:	9a08      	ldr	r2, [sp, #32]
 8016cf6:	9b05      	ldr	r3, [sp, #20]
 8016cf8:	2a00      	cmp	r2, #0
 8016cfa:	eba3 0307 	sub.w	r3, r3, r7
 8016cfe:	bfa8      	it	ge
 8016d00:	2300      	movge	r3, #0
 8016d02:	930c      	str	r3, [sp, #48]	; 0x30
 8016d04:	2500      	movs	r5, #0
 8016d06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8016d0c:	46ab      	mov	fp, r5
 8016d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d10:	4620      	mov	r0, r4
 8016d12:	6859      	ldr	r1, [r3, #4]
 8016d14:	f7ff f80e 	bl	8015d34 <_Balloc>
 8016d18:	9005      	str	r0, [sp, #20]
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	f43f af18 	beq.w	8016b50 <_strtod_l+0x488>
 8016d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d22:	691a      	ldr	r2, [r3, #16]
 8016d24:	3202      	adds	r2, #2
 8016d26:	f103 010c 	add.w	r1, r3, #12
 8016d2a:	0092      	lsls	r2, r2, #2
 8016d2c:	300c      	adds	r0, #12
 8016d2e:	f7fe f86a 	bl	8014e06 <memcpy>
 8016d32:	ec49 8b10 	vmov	d0, r8, r9
 8016d36:	aa18      	add	r2, sp, #96	; 0x60
 8016d38:	a917      	add	r1, sp, #92	; 0x5c
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	f7ff fbd6 	bl	80164ec <__d2b>
 8016d40:	ec49 8b18 	vmov	d8, r8, r9
 8016d44:	9016      	str	r0, [sp, #88]	; 0x58
 8016d46:	2800      	cmp	r0, #0
 8016d48:	f43f af02 	beq.w	8016b50 <_strtod_l+0x488>
 8016d4c:	2101      	movs	r1, #1
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f7ff f930 	bl	8015fb4 <__i2b>
 8016d54:	4683      	mov	fp, r0
 8016d56:	2800      	cmp	r0, #0
 8016d58:	f43f aefa 	beq.w	8016b50 <_strtod_l+0x488>
 8016d5c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016d5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016d60:	2e00      	cmp	r6, #0
 8016d62:	bfab      	itete	ge
 8016d64:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8016d66:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016d68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016d6a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016d6e:	bfac      	ite	ge
 8016d70:	eb06 0a03 	addge.w	sl, r6, r3
 8016d74:	1b9f      	sublt	r7, r3, r6
 8016d76:	9b04      	ldr	r3, [sp, #16]
 8016d78:	1af6      	subs	r6, r6, r3
 8016d7a:	4416      	add	r6, r2
 8016d7c:	4ba0      	ldr	r3, [pc, #640]	; (8017000 <_strtod_l+0x938>)
 8016d7e:	3e01      	subs	r6, #1
 8016d80:	429e      	cmp	r6, r3
 8016d82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016d86:	f280 80c4 	bge.w	8016f12 <_strtod_l+0x84a>
 8016d8a:	1b9b      	subs	r3, r3, r6
 8016d8c:	2b1f      	cmp	r3, #31
 8016d8e:	eba2 0203 	sub.w	r2, r2, r3
 8016d92:	f04f 0101 	mov.w	r1, #1
 8016d96:	f300 80b0 	bgt.w	8016efa <_strtod_l+0x832>
 8016d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8016d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8016da0:	2300      	movs	r3, #0
 8016da2:	930d      	str	r3, [sp, #52]	; 0x34
 8016da4:	eb0a 0602 	add.w	r6, sl, r2
 8016da8:	9b04      	ldr	r3, [sp, #16]
 8016daa:	45b2      	cmp	sl, r6
 8016dac:	4417      	add	r7, r2
 8016dae:	441f      	add	r7, r3
 8016db0:	4653      	mov	r3, sl
 8016db2:	bfa8      	it	ge
 8016db4:	4633      	movge	r3, r6
 8016db6:	42bb      	cmp	r3, r7
 8016db8:	bfa8      	it	ge
 8016dba:	463b      	movge	r3, r7
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	bfc2      	ittt	gt
 8016dc0:	1af6      	subgt	r6, r6, r3
 8016dc2:	1aff      	subgt	r7, r7, r3
 8016dc4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	dd17      	ble.n	8016dfe <_strtod_l+0x736>
 8016dce:	4659      	mov	r1, fp
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	f7ff f9ae 	bl	8016134 <__pow5mult>
 8016dd8:	4683      	mov	fp, r0
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	f43f aeb8 	beq.w	8016b50 <_strtod_l+0x488>
 8016de0:	4601      	mov	r1, r0
 8016de2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016de4:	4620      	mov	r0, r4
 8016de6:	f7ff f8fb 	bl	8015fe0 <__multiply>
 8016dea:	900b      	str	r0, [sp, #44]	; 0x2c
 8016dec:	2800      	cmp	r0, #0
 8016dee:	f43f aeaf 	beq.w	8016b50 <_strtod_l+0x488>
 8016df2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016df4:	4620      	mov	r0, r4
 8016df6:	f7fe ffdd 	bl	8015db4 <_Bfree>
 8016dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dfc:	9316      	str	r3, [sp, #88]	; 0x58
 8016dfe:	2e00      	cmp	r6, #0
 8016e00:	f300 808c 	bgt.w	8016f1c <_strtod_l+0x854>
 8016e04:	9b08      	ldr	r3, [sp, #32]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	dd08      	ble.n	8016e1c <_strtod_l+0x754>
 8016e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e0c:	9905      	ldr	r1, [sp, #20]
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7ff f990 	bl	8016134 <__pow5mult>
 8016e14:	9005      	str	r0, [sp, #20]
 8016e16:	2800      	cmp	r0, #0
 8016e18:	f43f ae9a 	beq.w	8016b50 <_strtod_l+0x488>
 8016e1c:	2f00      	cmp	r7, #0
 8016e1e:	dd08      	ble.n	8016e32 <_strtod_l+0x76a>
 8016e20:	9905      	ldr	r1, [sp, #20]
 8016e22:	463a      	mov	r2, r7
 8016e24:	4620      	mov	r0, r4
 8016e26:	f7ff f9df 	bl	80161e8 <__lshift>
 8016e2a:	9005      	str	r0, [sp, #20]
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	f43f ae8f 	beq.w	8016b50 <_strtod_l+0x488>
 8016e32:	f1ba 0f00 	cmp.w	sl, #0
 8016e36:	dd08      	ble.n	8016e4a <_strtod_l+0x782>
 8016e38:	4659      	mov	r1, fp
 8016e3a:	4652      	mov	r2, sl
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	f7ff f9d3 	bl	80161e8 <__lshift>
 8016e42:	4683      	mov	fp, r0
 8016e44:	2800      	cmp	r0, #0
 8016e46:	f43f ae83 	beq.w	8016b50 <_strtod_l+0x488>
 8016e4a:	9a05      	ldr	r2, [sp, #20]
 8016e4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f7ff fa52 	bl	80162f8 <__mdiff>
 8016e54:	4605      	mov	r5, r0
 8016e56:	2800      	cmp	r0, #0
 8016e58:	f43f ae7a 	beq.w	8016b50 <_strtod_l+0x488>
 8016e5c:	68c3      	ldr	r3, [r0, #12]
 8016e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e60:	2300      	movs	r3, #0
 8016e62:	60c3      	str	r3, [r0, #12]
 8016e64:	4659      	mov	r1, fp
 8016e66:	f7ff fa2b 	bl	80162c0 <__mcmp>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	da60      	bge.n	8016f30 <_strtod_l+0x868>
 8016e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e70:	ea53 0308 	orrs.w	r3, r3, r8
 8016e74:	f040 8084 	bne.w	8016f80 <_strtod_l+0x8b8>
 8016e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d17f      	bne.n	8016f80 <_strtod_l+0x8b8>
 8016e80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016e84:	0d1b      	lsrs	r3, r3, #20
 8016e86:	051b      	lsls	r3, r3, #20
 8016e88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016e8c:	d978      	bls.n	8016f80 <_strtod_l+0x8b8>
 8016e8e:	696b      	ldr	r3, [r5, #20]
 8016e90:	b913      	cbnz	r3, 8016e98 <_strtod_l+0x7d0>
 8016e92:	692b      	ldr	r3, [r5, #16]
 8016e94:	2b01      	cmp	r3, #1
 8016e96:	dd73      	ble.n	8016f80 <_strtod_l+0x8b8>
 8016e98:	4629      	mov	r1, r5
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f7ff f9a3 	bl	80161e8 <__lshift>
 8016ea2:	4659      	mov	r1, fp
 8016ea4:	4605      	mov	r5, r0
 8016ea6:	f7ff fa0b 	bl	80162c0 <__mcmp>
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	dd68      	ble.n	8016f80 <_strtod_l+0x8b8>
 8016eae:	9904      	ldr	r1, [sp, #16]
 8016eb0:	4a54      	ldr	r2, [pc, #336]	; (8017004 <_strtod_l+0x93c>)
 8016eb2:	464b      	mov	r3, r9
 8016eb4:	2900      	cmp	r1, #0
 8016eb6:	f000 8084 	beq.w	8016fc2 <_strtod_l+0x8fa>
 8016eba:	ea02 0109 	and.w	r1, r2, r9
 8016ebe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016ec2:	dc7e      	bgt.n	8016fc2 <_strtod_l+0x8fa>
 8016ec4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016ec8:	f77f aeb3 	ble.w	8016c32 <_strtod_l+0x56a>
 8016ecc:	4b4e      	ldr	r3, [pc, #312]	; (8017008 <_strtod_l+0x940>)
 8016ece:	4640      	mov	r0, r8
 8016ed0:	4649      	mov	r1, r9
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	f7e9 fb90 	bl	80005f8 <__aeabi_dmul>
 8016ed8:	4b4a      	ldr	r3, [pc, #296]	; (8017004 <_strtod_l+0x93c>)
 8016eda:	400b      	ands	r3, r1
 8016edc:	4680      	mov	r8, r0
 8016ede:	4689      	mov	r9, r1
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	f47f ae3f 	bne.w	8016b64 <_strtod_l+0x49c>
 8016ee6:	2322      	movs	r3, #34	; 0x22
 8016ee8:	6023      	str	r3, [r4, #0]
 8016eea:	e63b      	b.n	8016b64 <_strtod_l+0x49c>
 8016eec:	f04f 32ff 	mov.w	r2, #4294967295
 8016ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ef4:	ea03 0808 	and.w	r8, r3, r8
 8016ef8:	e6e8      	b.n	8016ccc <_strtod_l+0x604>
 8016efa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016efe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016f02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016f06:	36e2      	adds	r6, #226	; 0xe2
 8016f08:	fa01 f306 	lsl.w	r3, r1, r6
 8016f0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016f10:	e748      	b.n	8016da4 <_strtod_l+0x6dc>
 8016f12:	2100      	movs	r1, #0
 8016f14:	2301      	movs	r3, #1
 8016f16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016f1a:	e743      	b.n	8016da4 <_strtod_l+0x6dc>
 8016f1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016f1e:	4632      	mov	r2, r6
 8016f20:	4620      	mov	r0, r4
 8016f22:	f7ff f961 	bl	80161e8 <__lshift>
 8016f26:	9016      	str	r0, [sp, #88]	; 0x58
 8016f28:	2800      	cmp	r0, #0
 8016f2a:	f47f af6b 	bne.w	8016e04 <_strtod_l+0x73c>
 8016f2e:	e60f      	b.n	8016b50 <_strtod_l+0x488>
 8016f30:	46ca      	mov	sl, r9
 8016f32:	d171      	bne.n	8017018 <_strtod_l+0x950>
 8016f34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016f36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f3a:	b352      	cbz	r2, 8016f92 <_strtod_l+0x8ca>
 8016f3c:	4a33      	ldr	r2, [pc, #204]	; (801700c <_strtod_l+0x944>)
 8016f3e:	4293      	cmp	r3, r2
 8016f40:	d12a      	bne.n	8016f98 <_strtod_l+0x8d0>
 8016f42:	9b04      	ldr	r3, [sp, #16]
 8016f44:	4641      	mov	r1, r8
 8016f46:	b1fb      	cbz	r3, 8016f88 <_strtod_l+0x8c0>
 8016f48:	4b2e      	ldr	r3, [pc, #184]	; (8017004 <_strtod_l+0x93c>)
 8016f4a:	ea09 0303 	and.w	r3, r9, r3
 8016f4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f52:	f04f 32ff 	mov.w	r2, #4294967295
 8016f56:	d81a      	bhi.n	8016f8e <_strtod_l+0x8c6>
 8016f58:	0d1b      	lsrs	r3, r3, #20
 8016f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8016f62:	4299      	cmp	r1, r3
 8016f64:	d118      	bne.n	8016f98 <_strtod_l+0x8d0>
 8016f66:	4b2a      	ldr	r3, [pc, #168]	; (8017010 <_strtod_l+0x948>)
 8016f68:	459a      	cmp	sl, r3
 8016f6a:	d102      	bne.n	8016f72 <_strtod_l+0x8aa>
 8016f6c:	3101      	adds	r1, #1
 8016f6e:	f43f adef 	beq.w	8016b50 <_strtod_l+0x488>
 8016f72:	4b24      	ldr	r3, [pc, #144]	; (8017004 <_strtod_l+0x93c>)
 8016f74:	ea0a 0303 	and.w	r3, sl, r3
 8016f78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016f7c:	f04f 0800 	mov.w	r8, #0
 8016f80:	9b04      	ldr	r3, [sp, #16]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d1a2      	bne.n	8016ecc <_strtod_l+0x804>
 8016f86:	e5ed      	b.n	8016b64 <_strtod_l+0x49c>
 8016f88:	f04f 33ff 	mov.w	r3, #4294967295
 8016f8c:	e7e9      	b.n	8016f62 <_strtod_l+0x89a>
 8016f8e:	4613      	mov	r3, r2
 8016f90:	e7e7      	b.n	8016f62 <_strtod_l+0x89a>
 8016f92:	ea53 0308 	orrs.w	r3, r3, r8
 8016f96:	d08a      	beq.n	8016eae <_strtod_l+0x7e6>
 8016f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f9a:	b1e3      	cbz	r3, 8016fd6 <_strtod_l+0x90e>
 8016f9c:	ea13 0f0a 	tst.w	r3, sl
 8016fa0:	d0ee      	beq.n	8016f80 <_strtod_l+0x8b8>
 8016fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fa4:	9a04      	ldr	r2, [sp, #16]
 8016fa6:	4640      	mov	r0, r8
 8016fa8:	4649      	mov	r1, r9
 8016faa:	b1c3      	cbz	r3, 8016fde <_strtod_l+0x916>
 8016fac:	f7ff fb6f 	bl	801668e <sulp>
 8016fb0:	4602      	mov	r2, r0
 8016fb2:	460b      	mov	r3, r1
 8016fb4:	ec51 0b18 	vmov	r0, r1, d8
 8016fb8:	f7e9 f968 	bl	800028c <__adddf3>
 8016fbc:	4680      	mov	r8, r0
 8016fbe:	4689      	mov	r9, r1
 8016fc0:	e7de      	b.n	8016f80 <_strtod_l+0x8b8>
 8016fc2:	4013      	ands	r3, r2
 8016fc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016fc8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016fcc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016fd0:	f04f 38ff 	mov.w	r8, #4294967295
 8016fd4:	e7d4      	b.n	8016f80 <_strtod_l+0x8b8>
 8016fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fd8:	ea13 0f08 	tst.w	r3, r8
 8016fdc:	e7e0      	b.n	8016fa0 <_strtod_l+0x8d8>
 8016fde:	f7ff fb56 	bl	801668e <sulp>
 8016fe2:	4602      	mov	r2, r0
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	ec51 0b18 	vmov	r0, r1, d8
 8016fea:	f7e9 f94d 	bl	8000288 <__aeabi_dsub>
 8016fee:	2200      	movs	r2, #0
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	4680      	mov	r8, r0
 8016ff4:	4689      	mov	r9, r1
 8016ff6:	f7e9 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d0c0      	beq.n	8016f80 <_strtod_l+0x8b8>
 8016ffe:	e618      	b.n	8016c32 <_strtod_l+0x56a>
 8017000:	fffffc02 	.word	0xfffffc02
 8017004:	7ff00000 	.word	0x7ff00000
 8017008:	39500000 	.word	0x39500000
 801700c:	000fffff 	.word	0x000fffff
 8017010:	7fefffff 	.word	0x7fefffff
 8017014:	0801a320 	.word	0x0801a320
 8017018:	4659      	mov	r1, fp
 801701a:	4628      	mov	r0, r5
 801701c:	f7ff fac0 	bl	80165a0 <__ratio>
 8017020:	ec57 6b10 	vmov	r6, r7, d0
 8017024:	ee10 0a10 	vmov	r0, s0
 8017028:	2200      	movs	r2, #0
 801702a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801702e:	4639      	mov	r1, r7
 8017030:	f7e9 fd5e 	bl	8000af0 <__aeabi_dcmple>
 8017034:	2800      	cmp	r0, #0
 8017036:	d071      	beq.n	801711c <_strtod_l+0xa54>
 8017038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801703a:	2b00      	cmp	r3, #0
 801703c:	d17c      	bne.n	8017138 <_strtod_l+0xa70>
 801703e:	f1b8 0f00 	cmp.w	r8, #0
 8017042:	d15a      	bne.n	80170fa <_strtod_l+0xa32>
 8017044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017048:	2b00      	cmp	r3, #0
 801704a:	d15d      	bne.n	8017108 <_strtod_l+0xa40>
 801704c:	4b90      	ldr	r3, [pc, #576]	; (8017290 <_strtod_l+0xbc8>)
 801704e:	2200      	movs	r2, #0
 8017050:	4630      	mov	r0, r6
 8017052:	4639      	mov	r1, r7
 8017054:	f7e9 fd42 	bl	8000adc <__aeabi_dcmplt>
 8017058:	2800      	cmp	r0, #0
 801705a:	d15c      	bne.n	8017116 <_strtod_l+0xa4e>
 801705c:	4630      	mov	r0, r6
 801705e:	4639      	mov	r1, r7
 8017060:	4b8c      	ldr	r3, [pc, #560]	; (8017294 <_strtod_l+0xbcc>)
 8017062:	2200      	movs	r2, #0
 8017064:	f7e9 fac8 	bl	80005f8 <__aeabi_dmul>
 8017068:	4606      	mov	r6, r0
 801706a:	460f      	mov	r7, r1
 801706c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017070:	9606      	str	r6, [sp, #24]
 8017072:	9307      	str	r3, [sp, #28]
 8017074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017078:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801707c:	4b86      	ldr	r3, [pc, #536]	; (8017298 <_strtod_l+0xbd0>)
 801707e:	ea0a 0303 	and.w	r3, sl, r3
 8017082:	930d      	str	r3, [sp, #52]	; 0x34
 8017084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017086:	4b85      	ldr	r3, [pc, #532]	; (801729c <_strtod_l+0xbd4>)
 8017088:	429a      	cmp	r2, r3
 801708a:	f040 8090 	bne.w	80171ae <_strtod_l+0xae6>
 801708e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8017092:	ec49 8b10 	vmov	d0, r8, r9
 8017096:	f7ff f9b9 	bl	801640c <__ulp>
 801709a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801709e:	ec51 0b10 	vmov	r0, r1, d0
 80170a2:	f7e9 faa9 	bl	80005f8 <__aeabi_dmul>
 80170a6:	4642      	mov	r2, r8
 80170a8:	464b      	mov	r3, r9
 80170aa:	f7e9 f8ef 	bl	800028c <__adddf3>
 80170ae:	460b      	mov	r3, r1
 80170b0:	4979      	ldr	r1, [pc, #484]	; (8017298 <_strtod_l+0xbd0>)
 80170b2:	4a7b      	ldr	r2, [pc, #492]	; (80172a0 <_strtod_l+0xbd8>)
 80170b4:	4019      	ands	r1, r3
 80170b6:	4291      	cmp	r1, r2
 80170b8:	4680      	mov	r8, r0
 80170ba:	d944      	bls.n	8017146 <_strtod_l+0xa7e>
 80170bc:	ee18 2a90 	vmov	r2, s17
 80170c0:	4b78      	ldr	r3, [pc, #480]	; (80172a4 <_strtod_l+0xbdc>)
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d104      	bne.n	80170d0 <_strtod_l+0xa08>
 80170c6:	ee18 3a10 	vmov	r3, s16
 80170ca:	3301      	adds	r3, #1
 80170cc:	f43f ad40 	beq.w	8016b50 <_strtod_l+0x488>
 80170d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80172a4 <_strtod_l+0xbdc>
 80170d4:	f04f 38ff 	mov.w	r8, #4294967295
 80170d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80170da:	4620      	mov	r0, r4
 80170dc:	f7fe fe6a 	bl	8015db4 <_Bfree>
 80170e0:	9905      	ldr	r1, [sp, #20]
 80170e2:	4620      	mov	r0, r4
 80170e4:	f7fe fe66 	bl	8015db4 <_Bfree>
 80170e8:	4659      	mov	r1, fp
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7fe fe62 	bl	8015db4 <_Bfree>
 80170f0:	4629      	mov	r1, r5
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7fe fe5e 	bl	8015db4 <_Bfree>
 80170f8:	e609      	b.n	8016d0e <_strtod_l+0x646>
 80170fa:	f1b8 0f01 	cmp.w	r8, #1
 80170fe:	d103      	bne.n	8017108 <_strtod_l+0xa40>
 8017100:	f1b9 0f00 	cmp.w	r9, #0
 8017104:	f43f ad95 	beq.w	8016c32 <_strtod_l+0x56a>
 8017108:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8017260 <_strtod_l+0xb98>
 801710c:	4f60      	ldr	r7, [pc, #384]	; (8017290 <_strtod_l+0xbc8>)
 801710e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017112:	2600      	movs	r6, #0
 8017114:	e7ae      	b.n	8017074 <_strtod_l+0x9ac>
 8017116:	4f5f      	ldr	r7, [pc, #380]	; (8017294 <_strtod_l+0xbcc>)
 8017118:	2600      	movs	r6, #0
 801711a:	e7a7      	b.n	801706c <_strtod_l+0x9a4>
 801711c:	4b5d      	ldr	r3, [pc, #372]	; (8017294 <_strtod_l+0xbcc>)
 801711e:	4630      	mov	r0, r6
 8017120:	4639      	mov	r1, r7
 8017122:	2200      	movs	r2, #0
 8017124:	f7e9 fa68 	bl	80005f8 <__aeabi_dmul>
 8017128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801712a:	4606      	mov	r6, r0
 801712c:	460f      	mov	r7, r1
 801712e:	2b00      	cmp	r3, #0
 8017130:	d09c      	beq.n	801706c <_strtod_l+0x9a4>
 8017132:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8017136:	e79d      	b.n	8017074 <_strtod_l+0x9ac>
 8017138:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8017268 <_strtod_l+0xba0>
 801713c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017140:	ec57 6b17 	vmov	r6, r7, d7
 8017144:	e796      	b.n	8017074 <_strtod_l+0x9ac>
 8017146:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801714a:	9b04      	ldr	r3, [sp, #16]
 801714c:	46ca      	mov	sl, r9
 801714e:	2b00      	cmp	r3, #0
 8017150:	d1c2      	bne.n	80170d8 <_strtod_l+0xa10>
 8017152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017158:	0d1b      	lsrs	r3, r3, #20
 801715a:	051b      	lsls	r3, r3, #20
 801715c:	429a      	cmp	r2, r3
 801715e:	d1bb      	bne.n	80170d8 <_strtod_l+0xa10>
 8017160:	4630      	mov	r0, r6
 8017162:	4639      	mov	r1, r7
 8017164:	f7e9 fda8 	bl	8000cb8 <__aeabi_d2lz>
 8017168:	f7e9 fa18 	bl	800059c <__aeabi_l2d>
 801716c:	4602      	mov	r2, r0
 801716e:	460b      	mov	r3, r1
 8017170:	4630      	mov	r0, r6
 8017172:	4639      	mov	r1, r7
 8017174:	f7e9 f888 	bl	8000288 <__aeabi_dsub>
 8017178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801717a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801717e:	ea43 0308 	orr.w	r3, r3, r8
 8017182:	4313      	orrs	r3, r2
 8017184:	4606      	mov	r6, r0
 8017186:	460f      	mov	r7, r1
 8017188:	d054      	beq.n	8017234 <_strtod_l+0xb6c>
 801718a:	a339      	add	r3, pc, #228	; (adr r3, 8017270 <_strtod_l+0xba8>)
 801718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017190:	f7e9 fca4 	bl	8000adc <__aeabi_dcmplt>
 8017194:	2800      	cmp	r0, #0
 8017196:	f47f ace5 	bne.w	8016b64 <_strtod_l+0x49c>
 801719a:	a337      	add	r3, pc, #220	; (adr r3, 8017278 <_strtod_l+0xbb0>)
 801719c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a0:	4630      	mov	r0, r6
 80171a2:	4639      	mov	r1, r7
 80171a4:	f7e9 fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 80171a8:	2800      	cmp	r0, #0
 80171aa:	d095      	beq.n	80170d8 <_strtod_l+0xa10>
 80171ac:	e4da      	b.n	8016b64 <_strtod_l+0x49c>
 80171ae:	9b04      	ldr	r3, [sp, #16]
 80171b0:	b333      	cbz	r3, 8017200 <_strtod_l+0xb38>
 80171b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80171b8:	d822      	bhi.n	8017200 <_strtod_l+0xb38>
 80171ba:	a331      	add	r3, pc, #196	; (adr r3, 8017280 <_strtod_l+0xbb8>)
 80171bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c0:	4630      	mov	r0, r6
 80171c2:	4639      	mov	r1, r7
 80171c4:	f7e9 fc94 	bl	8000af0 <__aeabi_dcmple>
 80171c8:	b1a0      	cbz	r0, 80171f4 <_strtod_l+0xb2c>
 80171ca:	4639      	mov	r1, r7
 80171cc:	4630      	mov	r0, r6
 80171ce:	f7e9 fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80171d2:	2801      	cmp	r0, #1
 80171d4:	bf38      	it	cc
 80171d6:	2001      	movcc	r0, #1
 80171d8:	f7e9 f994 	bl	8000504 <__aeabi_ui2d>
 80171dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171de:	4606      	mov	r6, r0
 80171e0:	460f      	mov	r7, r1
 80171e2:	bb23      	cbnz	r3, 801722e <_strtod_l+0xb66>
 80171e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171e8:	9010      	str	r0, [sp, #64]	; 0x40
 80171ea:	9311      	str	r3, [sp, #68]	; 0x44
 80171ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80171f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80171f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80171f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80171fc:	1a9b      	subs	r3, r3, r2
 80171fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8017200:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8017204:	eeb0 0a48 	vmov.f32	s0, s16
 8017208:	eef0 0a68 	vmov.f32	s1, s17
 801720c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017210:	f7ff f8fc 	bl	801640c <__ulp>
 8017214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8017218:	ec53 2b10 	vmov	r2, r3, d0
 801721c:	f7e9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8017220:	ec53 2b18 	vmov	r2, r3, d8
 8017224:	f7e9 f832 	bl	800028c <__adddf3>
 8017228:	4680      	mov	r8, r0
 801722a:	4689      	mov	r9, r1
 801722c:	e78d      	b.n	801714a <_strtod_l+0xa82>
 801722e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017232:	e7db      	b.n	80171ec <_strtod_l+0xb24>
 8017234:	a314      	add	r3, pc, #80	; (adr r3, 8017288 <_strtod_l+0xbc0>)
 8017236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723a:	f7e9 fc4f 	bl	8000adc <__aeabi_dcmplt>
 801723e:	e7b3      	b.n	80171a8 <_strtod_l+0xae0>
 8017240:	2300      	movs	r3, #0
 8017242:	930a      	str	r3, [sp, #40]	; 0x28
 8017244:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017248:	6013      	str	r3, [r2, #0]
 801724a:	f7ff ba7c 	b.w	8016746 <_strtod_l+0x7e>
 801724e:	2a65      	cmp	r2, #101	; 0x65
 8017250:	f43f ab75 	beq.w	801693e <_strtod_l+0x276>
 8017254:	2a45      	cmp	r2, #69	; 0x45
 8017256:	f43f ab72 	beq.w	801693e <_strtod_l+0x276>
 801725a:	2301      	movs	r3, #1
 801725c:	f7ff bbaa 	b.w	80169b4 <_strtod_l+0x2ec>
 8017260:	00000000 	.word	0x00000000
 8017264:	bff00000 	.word	0xbff00000
 8017268:	00000000 	.word	0x00000000
 801726c:	3ff00000 	.word	0x3ff00000
 8017270:	94a03595 	.word	0x94a03595
 8017274:	3fdfffff 	.word	0x3fdfffff
 8017278:	35afe535 	.word	0x35afe535
 801727c:	3fe00000 	.word	0x3fe00000
 8017280:	ffc00000 	.word	0xffc00000
 8017284:	41dfffff 	.word	0x41dfffff
 8017288:	94a03595 	.word	0x94a03595
 801728c:	3fcfffff 	.word	0x3fcfffff
 8017290:	3ff00000 	.word	0x3ff00000
 8017294:	3fe00000 	.word	0x3fe00000
 8017298:	7ff00000 	.word	0x7ff00000
 801729c:	7fe00000 	.word	0x7fe00000
 80172a0:	7c9fffff 	.word	0x7c9fffff
 80172a4:	7fefffff 	.word	0x7fefffff

080172a8 <_strtod_r>:
 80172a8:	4b01      	ldr	r3, [pc, #4]	; (80172b0 <_strtod_r+0x8>)
 80172aa:	f7ff ba0d 	b.w	80166c8 <_strtod_l>
 80172ae:	bf00      	nop
 80172b0:	20000174 	.word	0x20000174

080172b4 <__ssputs_r>:
 80172b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b8:	688e      	ldr	r6, [r1, #8]
 80172ba:	461f      	mov	r7, r3
 80172bc:	42be      	cmp	r6, r7
 80172be:	680b      	ldr	r3, [r1, #0]
 80172c0:	4682      	mov	sl, r0
 80172c2:	460c      	mov	r4, r1
 80172c4:	4690      	mov	r8, r2
 80172c6:	d82c      	bhi.n	8017322 <__ssputs_r+0x6e>
 80172c8:	898a      	ldrh	r2, [r1, #12]
 80172ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172ce:	d026      	beq.n	801731e <__ssputs_r+0x6a>
 80172d0:	6965      	ldr	r5, [r4, #20]
 80172d2:	6909      	ldr	r1, [r1, #16]
 80172d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172d8:	eba3 0901 	sub.w	r9, r3, r1
 80172dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172e0:	1c7b      	adds	r3, r7, #1
 80172e2:	444b      	add	r3, r9
 80172e4:	106d      	asrs	r5, r5, #1
 80172e6:	429d      	cmp	r5, r3
 80172e8:	bf38      	it	cc
 80172ea:	461d      	movcc	r5, r3
 80172ec:	0553      	lsls	r3, r2, #21
 80172ee:	d527      	bpl.n	8017340 <__ssputs_r+0x8c>
 80172f0:	4629      	mov	r1, r5
 80172f2:	f7fe fc93 	bl	8015c1c <_malloc_r>
 80172f6:	4606      	mov	r6, r0
 80172f8:	b360      	cbz	r0, 8017354 <__ssputs_r+0xa0>
 80172fa:	6921      	ldr	r1, [r4, #16]
 80172fc:	464a      	mov	r2, r9
 80172fe:	f7fd fd82 	bl	8014e06 <memcpy>
 8017302:	89a3      	ldrh	r3, [r4, #12]
 8017304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801730c:	81a3      	strh	r3, [r4, #12]
 801730e:	6126      	str	r6, [r4, #16]
 8017310:	6165      	str	r5, [r4, #20]
 8017312:	444e      	add	r6, r9
 8017314:	eba5 0509 	sub.w	r5, r5, r9
 8017318:	6026      	str	r6, [r4, #0]
 801731a:	60a5      	str	r5, [r4, #8]
 801731c:	463e      	mov	r6, r7
 801731e:	42be      	cmp	r6, r7
 8017320:	d900      	bls.n	8017324 <__ssputs_r+0x70>
 8017322:	463e      	mov	r6, r7
 8017324:	6820      	ldr	r0, [r4, #0]
 8017326:	4632      	mov	r2, r6
 8017328:	4641      	mov	r1, r8
 801732a:	f7fd fc03 	bl	8014b34 <memmove>
 801732e:	68a3      	ldr	r3, [r4, #8]
 8017330:	1b9b      	subs	r3, r3, r6
 8017332:	60a3      	str	r3, [r4, #8]
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	4433      	add	r3, r6
 8017338:	6023      	str	r3, [r4, #0]
 801733a:	2000      	movs	r0, #0
 801733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017340:	462a      	mov	r2, r5
 8017342:	f000 ff60 	bl	8018206 <_realloc_r>
 8017346:	4606      	mov	r6, r0
 8017348:	2800      	cmp	r0, #0
 801734a:	d1e0      	bne.n	801730e <__ssputs_r+0x5a>
 801734c:	6921      	ldr	r1, [r4, #16]
 801734e:	4650      	mov	r0, sl
 8017350:	f7fe fbf0 	bl	8015b34 <_free_r>
 8017354:	230c      	movs	r3, #12
 8017356:	f8ca 3000 	str.w	r3, [sl]
 801735a:	89a3      	ldrh	r3, [r4, #12]
 801735c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017360:	81a3      	strh	r3, [r4, #12]
 8017362:	f04f 30ff 	mov.w	r0, #4294967295
 8017366:	e7e9      	b.n	801733c <__ssputs_r+0x88>

08017368 <_svfiprintf_r>:
 8017368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801736c:	4698      	mov	r8, r3
 801736e:	898b      	ldrh	r3, [r1, #12]
 8017370:	061b      	lsls	r3, r3, #24
 8017372:	b09d      	sub	sp, #116	; 0x74
 8017374:	4607      	mov	r7, r0
 8017376:	460d      	mov	r5, r1
 8017378:	4614      	mov	r4, r2
 801737a:	d50e      	bpl.n	801739a <_svfiprintf_r+0x32>
 801737c:	690b      	ldr	r3, [r1, #16]
 801737e:	b963      	cbnz	r3, 801739a <_svfiprintf_r+0x32>
 8017380:	2140      	movs	r1, #64	; 0x40
 8017382:	f7fe fc4b 	bl	8015c1c <_malloc_r>
 8017386:	6028      	str	r0, [r5, #0]
 8017388:	6128      	str	r0, [r5, #16]
 801738a:	b920      	cbnz	r0, 8017396 <_svfiprintf_r+0x2e>
 801738c:	230c      	movs	r3, #12
 801738e:	603b      	str	r3, [r7, #0]
 8017390:	f04f 30ff 	mov.w	r0, #4294967295
 8017394:	e0d0      	b.n	8017538 <_svfiprintf_r+0x1d0>
 8017396:	2340      	movs	r3, #64	; 0x40
 8017398:	616b      	str	r3, [r5, #20]
 801739a:	2300      	movs	r3, #0
 801739c:	9309      	str	r3, [sp, #36]	; 0x24
 801739e:	2320      	movs	r3, #32
 80173a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80173a8:	2330      	movs	r3, #48	; 0x30
 80173aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017550 <_svfiprintf_r+0x1e8>
 80173ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173b2:	f04f 0901 	mov.w	r9, #1
 80173b6:	4623      	mov	r3, r4
 80173b8:	469a      	mov	sl, r3
 80173ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173be:	b10a      	cbz	r2, 80173c4 <_svfiprintf_r+0x5c>
 80173c0:	2a25      	cmp	r2, #37	; 0x25
 80173c2:	d1f9      	bne.n	80173b8 <_svfiprintf_r+0x50>
 80173c4:	ebba 0b04 	subs.w	fp, sl, r4
 80173c8:	d00b      	beq.n	80173e2 <_svfiprintf_r+0x7a>
 80173ca:	465b      	mov	r3, fp
 80173cc:	4622      	mov	r2, r4
 80173ce:	4629      	mov	r1, r5
 80173d0:	4638      	mov	r0, r7
 80173d2:	f7ff ff6f 	bl	80172b4 <__ssputs_r>
 80173d6:	3001      	adds	r0, #1
 80173d8:	f000 80a9 	beq.w	801752e <_svfiprintf_r+0x1c6>
 80173dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173de:	445a      	add	r2, fp
 80173e0:	9209      	str	r2, [sp, #36]	; 0x24
 80173e2:	f89a 3000 	ldrb.w	r3, [sl]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f000 80a1 	beq.w	801752e <_svfiprintf_r+0x1c6>
 80173ec:	2300      	movs	r3, #0
 80173ee:	f04f 32ff 	mov.w	r2, #4294967295
 80173f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173f6:	f10a 0a01 	add.w	sl, sl, #1
 80173fa:	9304      	str	r3, [sp, #16]
 80173fc:	9307      	str	r3, [sp, #28]
 80173fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017402:	931a      	str	r3, [sp, #104]	; 0x68
 8017404:	4654      	mov	r4, sl
 8017406:	2205      	movs	r2, #5
 8017408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801740c:	4850      	ldr	r0, [pc, #320]	; (8017550 <_svfiprintf_r+0x1e8>)
 801740e:	f7e8 fedf 	bl	80001d0 <memchr>
 8017412:	9a04      	ldr	r2, [sp, #16]
 8017414:	b9d8      	cbnz	r0, 801744e <_svfiprintf_r+0xe6>
 8017416:	06d0      	lsls	r0, r2, #27
 8017418:	bf44      	itt	mi
 801741a:	2320      	movmi	r3, #32
 801741c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017420:	0711      	lsls	r1, r2, #28
 8017422:	bf44      	itt	mi
 8017424:	232b      	movmi	r3, #43	; 0x2b
 8017426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801742a:	f89a 3000 	ldrb.w	r3, [sl]
 801742e:	2b2a      	cmp	r3, #42	; 0x2a
 8017430:	d015      	beq.n	801745e <_svfiprintf_r+0xf6>
 8017432:	9a07      	ldr	r2, [sp, #28]
 8017434:	4654      	mov	r4, sl
 8017436:	2000      	movs	r0, #0
 8017438:	f04f 0c0a 	mov.w	ip, #10
 801743c:	4621      	mov	r1, r4
 801743e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017442:	3b30      	subs	r3, #48	; 0x30
 8017444:	2b09      	cmp	r3, #9
 8017446:	d94d      	bls.n	80174e4 <_svfiprintf_r+0x17c>
 8017448:	b1b0      	cbz	r0, 8017478 <_svfiprintf_r+0x110>
 801744a:	9207      	str	r2, [sp, #28]
 801744c:	e014      	b.n	8017478 <_svfiprintf_r+0x110>
 801744e:	eba0 0308 	sub.w	r3, r0, r8
 8017452:	fa09 f303 	lsl.w	r3, r9, r3
 8017456:	4313      	orrs	r3, r2
 8017458:	9304      	str	r3, [sp, #16]
 801745a:	46a2      	mov	sl, r4
 801745c:	e7d2      	b.n	8017404 <_svfiprintf_r+0x9c>
 801745e:	9b03      	ldr	r3, [sp, #12]
 8017460:	1d19      	adds	r1, r3, #4
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	9103      	str	r1, [sp, #12]
 8017466:	2b00      	cmp	r3, #0
 8017468:	bfbb      	ittet	lt
 801746a:	425b      	neglt	r3, r3
 801746c:	f042 0202 	orrlt.w	r2, r2, #2
 8017470:	9307      	strge	r3, [sp, #28]
 8017472:	9307      	strlt	r3, [sp, #28]
 8017474:	bfb8      	it	lt
 8017476:	9204      	strlt	r2, [sp, #16]
 8017478:	7823      	ldrb	r3, [r4, #0]
 801747a:	2b2e      	cmp	r3, #46	; 0x2e
 801747c:	d10c      	bne.n	8017498 <_svfiprintf_r+0x130>
 801747e:	7863      	ldrb	r3, [r4, #1]
 8017480:	2b2a      	cmp	r3, #42	; 0x2a
 8017482:	d134      	bne.n	80174ee <_svfiprintf_r+0x186>
 8017484:	9b03      	ldr	r3, [sp, #12]
 8017486:	1d1a      	adds	r2, r3, #4
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	9203      	str	r2, [sp, #12]
 801748c:	2b00      	cmp	r3, #0
 801748e:	bfb8      	it	lt
 8017490:	f04f 33ff 	movlt.w	r3, #4294967295
 8017494:	3402      	adds	r4, #2
 8017496:	9305      	str	r3, [sp, #20]
 8017498:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017560 <_svfiprintf_r+0x1f8>
 801749c:	7821      	ldrb	r1, [r4, #0]
 801749e:	2203      	movs	r2, #3
 80174a0:	4650      	mov	r0, sl
 80174a2:	f7e8 fe95 	bl	80001d0 <memchr>
 80174a6:	b138      	cbz	r0, 80174b8 <_svfiprintf_r+0x150>
 80174a8:	9b04      	ldr	r3, [sp, #16]
 80174aa:	eba0 000a 	sub.w	r0, r0, sl
 80174ae:	2240      	movs	r2, #64	; 0x40
 80174b0:	4082      	lsls	r2, r0
 80174b2:	4313      	orrs	r3, r2
 80174b4:	3401      	adds	r4, #1
 80174b6:	9304      	str	r3, [sp, #16]
 80174b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174bc:	4825      	ldr	r0, [pc, #148]	; (8017554 <_svfiprintf_r+0x1ec>)
 80174be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174c2:	2206      	movs	r2, #6
 80174c4:	f7e8 fe84 	bl	80001d0 <memchr>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d038      	beq.n	801753e <_svfiprintf_r+0x1d6>
 80174cc:	4b22      	ldr	r3, [pc, #136]	; (8017558 <_svfiprintf_r+0x1f0>)
 80174ce:	bb1b      	cbnz	r3, 8017518 <_svfiprintf_r+0x1b0>
 80174d0:	9b03      	ldr	r3, [sp, #12]
 80174d2:	3307      	adds	r3, #7
 80174d4:	f023 0307 	bic.w	r3, r3, #7
 80174d8:	3308      	adds	r3, #8
 80174da:	9303      	str	r3, [sp, #12]
 80174dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174de:	4433      	add	r3, r6
 80174e0:	9309      	str	r3, [sp, #36]	; 0x24
 80174e2:	e768      	b.n	80173b6 <_svfiprintf_r+0x4e>
 80174e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80174e8:	460c      	mov	r4, r1
 80174ea:	2001      	movs	r0, #1
 80174ec:	e7a6      	b.n	801743c <_svfiprintf_r+0xd4>
 80174ee:	2300      	movs	r3, #0
 80174f0:	3401      	adds	r4, #1
 80174f2:	9305      	str	r3, [sp, #20]
 80174f4:	4619      	mov	r1, r3
 80174f6:	f04f 0c0a 	mov.w	ip, #10
 80174fa:	4620      	mov	r0, r4
 80174fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017500:	3a30      	subs	r2, #48	; 0x30
 8017502:	2a09      	cmp	r2, #9
 8017504:	d903      	bls.n	801750e <_svfiprintf_r+0x1a6>
 8017506:	2b00      	cmp	r3, #0
 8017508:	d0c6      	beq.n	8017498 <_svfiprintf_r+0x130>
 801750a:	9105      	str	r1, [sp, #20]
 801750c:	e7c4      	b.n	8017498 <_svfiprintf_r+0x130>
 801750e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017512:	4604      	mov	r4, r0
 8017514:	2301      	movs	r3, #1
 8017516:	e7f0      	b.n	80174fa <_svfiprintf_r+0x192>
 8017518:	ab03      	add	r3, sp, #12
 801751a:	9300      	str	r3, [sp, #0]
 801751c:	462a      	mov	r2, r5
 801751e:	4b0f      	ldr	r3, [pc, #60]	; (801755c <_svfiprintf_r+0x1f4>)
 8017520:	a904      	add	r1, sp, #16
 8017522:	4638      	mov	r0, r7
 8017524:	f7fc fab2 	bl	8013a8c <_printf_float>
 8017528:	1c42      	adds	r2, r0, #1
 801752a:	4606      	mov	r6, r0
 801752c:	d1d6      	bne.n	80174dc <_svfiprintf_r+0x174>
 801752e:	89ab      	ldrh	r3, [r5, #12]
 8017530:	065b      	lsls	r3, r3, #25
 8017532:	f53f af2d 	bmi.w	8017390 <_svfiprintf_r+0x28>
 8017536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017538:	b01d      	add	sp, #116	; 0x74
 801753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753e:	ab03      	add	r3, sp, #12
 8017540:	9300      	str	r3, [sp, #0]
 8017542:	462a      	mov	r2, r5
 8017544:	4b05      	ldr	r3, [pc, #20]	; (801755c <_svfiprintf_r+0x1f4>)
 8017546:	a904      	add	r1, sp, #16
 8017548:	4638      	mov	r0, r7
 801754a:	f7fc fd43 	bl	8013fd4 <_printf_i>
 801754e:	e7eb      	b.n	8017528 <_svfiprintf_r+0x1c0>
 8017550:	0801a348 	.word	0x0801a348
 8017554:	0801a352 	.word	0x0801a352
 8017558:	08013a8d 	.word	0x08013a8d
 801755c:	080172b5 	.word	0x080172b5
 8017560:	0801a34e 	.word	0x0801a34e

08017564 <__sfputc_r>:
 8017564:	6893      	ldr	r3, [r2, #8]
 8017566:	3b01      	subs	r3, #1
 8017568:	2b00      	cmp	r3, #0
 801756a:	b410      	push	{r4}
 801756c:	6093      	str	r3, [r2, #8]
 801756e:	da08      	bge.n	8017582 <__sfputc_r+0x1e>
 8017570:	6994      	ldr	r4, [r2, #24]
 8017572:	42a3      	cmp	r3, r4
 8017574:	db01      	blt.n	801757a <__sfputc_r+0x16>
 8017576:	290a      	cmp	r1, #10
 8017578:	d103      	bne.n	8017582 <__sfputc_r+0x1e>
 801757a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801757e:	f7fd ba34 	b.w	80149ea <__swbuf_r>
 8017582:	6813      	ldr	r3, [r2, #0]
 8017584:	1c58      	adds	r0, r3, #1
 8017586:	6010      	str	r0, [r2, #0]
 8017588:	7019      	strb	r1, [r3, #0]
 801758a:	4608      	mov	r0, r1
 801758c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017590:	4770      	bx	lr

08017592 <__sfputs_r>:
 8017592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017594:	4606      	mov	r6, r0
 8017596:	460f      	mov	r7, r1
 8017598:	4614      	mov	r4, r2
 801759a:	18d5      	adds	r5, r2, r3
 801759c:	42ac      	cmp	r4, r5
 801759e:	d101      	bne.n	80175a4 <__sfputs_r+0x12>
 80175a0:	2000      	movs	r0, #0
 80175a2:	e007      	b.n	80175b4 <__sfputs_r+0x22>
 80175a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a8:	463a      	mov	r2, r7
 80175aa:	4630      	mov	r0, r6
 80175ac:	f7ff ffda 	bl	8017564 <__sfputc_r>
 80175b0:	1c43      	adds	r3, r0, #1
 80175b2:	d1f3      	bne.n	801759c <__sfputs_r+0xa>
 80175b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175b8 <_vfiprintf_r>:
 80175b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175bc:	460d      	mov	r5, r1
 80175be:	b09d      	sub	sp, #116	; 0x74
 80175c0:	4614      	mov	r4, r2
 80175c2:	4698      	mov	r8, r3
 80175c4:	4606      	mov	r6, r0
 80175c6:	b118      	cbz	r0, 80175d0 <_vfiprintf_r+0x18>
 80175c8:	6a03      	ldr	r3, [r0, #32]
 80175ca:	b90b      	cbnz	r3, 80175d0 <_vfiprintf_r+0x18>
 80175cc:	f7fd f8c0 	bl	8014750 <__sinit>
 80175d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175d2:	07d9      	lsls	r1, r3, #31
 80175d4:	d405      	bmi.n	80175e2 <_vfiprintf_r+0x2a>
 80175d6:	89ab      	ldrh	r3, [r5, #12]
 80175d8:	059a      	lsls	r2, r3, #22
 80175da:	d402      	bmi.n	80175e2 <_vfiprintf_r+0x2a>
 80175dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175de:	f7fd fc08 	bl	8014df2 <__retarget_lock_acquire_recursive>
 80175e2:	89ab      	ldrh	r3, [r5, #12]
 80175e4:	071b      	lsls	r3, r3, #28
 80175e6:	d501      	bpl.n	80175ec <_vfiprintf_r+0x34>
 80175e8:	692b      	ldr	r3, [r5, #16]
 80175ea:	b99b      	cbnz	r3, 8017614 <_vfiprintf_r+0x5c>
 80175ec:	4629      	mov	r1, r5
 80175ee:	4630      	mov	r0, r6
 80175f0:	f7fd fa38 	bl	8014a64 <__swsetup_r>
 80175f4:	b170      	cbz	r0, 8017614 <_vfiprintf_r+0x5c>
 80175f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175f8:	07dc      	lsls	r4, r3, #31
 80175fa:	d504      	bpl.n	8017606 <_vfiprintf_r+0x4e>
 80175fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017600:	b01d      	add	sp, #116	; 0x74
 8017602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017606:	89ab      	ldrh	r3, [r5, #12]
 8017608:	0598      	lsls	r0, r3, #22
 801760a:	d4f7      	bmi.n	80175fc <_vfiprintf_r+0x44>
 801760c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801760e:	f7fd fbf1 	bl	8014df4 <__retarget_lock_release_recursive>
 8017612:	e7f3      	b.n	80175fc <_vfiprintf_r+0x44>
 8017614:	2300      	movs	r3, #0
 8017616:	9309      	str	r3, [sp, #36]	; 0x24
 8017618:	2320      	movs	r3, #32
 801761a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801761e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017622:	2330      	movs	r3, #48	; 0x30
 8017624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80177d8 <_vfiprintf_r+0x220>
 8017628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801762c:	f04f 0901 	mov.w	r9, #1
 8017630:	4623      	mov	r3, r4
 8017632:	469a      	mov	sl, r3
 8017634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017638:	b10a      	cbz	r2, 801763e <_vfiprintf_r+0x86>
 801763a:	2a25      	cmp	r2, #37	; 0x25
 801763c:	d1f9      	bne.n	8017632 <_vfiprintf_r+0x7a>
 801763e:	ebba 0b04 	subs.w	fp, sl, r4
 8017642:	d00b      	beq.n	801765c <_vfiprintf_r+0xa4>
 8017644:	465b      	mov	r3, fp
 8017646:	4622      	mov	r2, r4
 8017648:	4629      	mov	r1, r5
 801764a:	4630      	mov	r0, r6
 801764c:	f7ff ffa1 	bl	8017592 <__sfputs_r>
 8017650:	3001      	adds	r0, #1
 8017652:	f000 80a9 	beq.w	80177a8 <_vfiprintf_r+0x1f0>
 8017656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017658:	445a      	add	r2, fp
 801765a:	9209      	str	r2, [sp, #36]	; 0x24
 801765c:	f89a 3000 	ldrb.w	r3, [sl]
 8017660:	2b00      	cmp	r3, #0
 8017662:	f000 80a1 	beq.w	80177a8 <_vfiprintf_r+0x1f0>
 8017666:	2300      	movs	r3, #0
 8017668:	f04f 32ff 	mov.w	r2, #4294967295
 801766c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017670:	f10a 0a01 	add.w	sl, sl, #1
 8017674:	9304      	str	r3, [sp, #16]
 8017676:	9307      	str	r3, [sp, #28]
 8017678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801767c:	931a      	str	r3, [sp, #104]	; 0x68
 801767e:	4654      	mov	r4, sl
 8017680:	2205      	movs	r2, #5
 8017682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017686:	4854      	ldr	r0, [pc, #336]	; (80177d8 <_vfiprintf_r+0x220>)
 8017688:	f7e8 fda2 	bl	80001d0 <memchr>
 801768c:	9a04      	ldr	r2, [sp, #16]
 801768e:	b9d8      	cbnz	r0, 80176c8 <_vfiprintf_r+0x110>
 8017690:	06d1      	lsls	r1, r2, #27
 8017692:	bf44      	itt	mi
 8017694:	2320      	movmi	r3, #32
 8017696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801769a:	0713      	lsls	r3, r2, #28
 801769c:	bf44      	itt	mi
 801769e:	232b      	movmi	r3, #43	; 0x2b
 80176a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176a4:	f89a 3000 	ldrb.w	r3, [sl]
 80176a8:	2b2a      	cmp	r3, #42	; 0x2a
 80176aa:	d015      	beq.n	80176d8 <_vfiprintf_r+0x120>
 80176ac:	9a07      	ldr	r2, [sp, #28]
 80176ae:	4654      	mov	r4, sl
 80176b0:	2000      	movs	r0, #0
 80176b2:	f04f 0c0a 	mov.w	ip, #10
 80176b6:	4621      	mov	r1, r4
 80176b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176bc:	3b30      	subs	r3, #48	; 0x30
 80176be:	2b09      	cmp	r3, #9
 80176c0:	d94d      	bls.n	801775e <_vfiprintf_r+0x1a6>
 80176c2:	b1b0      	cbz	r0, 80176f2 <_vfiprintf_r+0x13a>
 80176c4:	9207      	str	r2, [sp, #28]
 80176c6:	e014      	b.n	80176f2 <_vfiprintf_r+0x13a>
 80176c8:	eba0 0308 	sub.w	r3, r0, r8
 80176cc:	fa09 f303 	lsl.w	r3, r9, r3
 80176d0:	4313      	orrs	r3, r2
 80176d2:	9304      	str	r3, [sp, #16]
 80176d4:	46a2      	mov	sl, r4
 80176d6:	e7d2      	b.n	801767e <_vfiprintf_r+0xc6>
 80176d8:	9b03      	ldr	r3, [sp, #12]
 80176da:	1d19      	adds	r1, r3, #4
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	9103      	str	r1, [sp, #12]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	bfbb      	ittet	lt
 80176e4:	425b      	neglt	r3, r3
 80176e6:	f042 0202 	orrlt.w	r2, r2, #2
 80176ea:	9307      	strge	r3, [sp, #28]
 80176ec:	9307      	strlt	r3, [sp, #28]
 80176ee:	bfb8      	it	lt
 80176f0:	9204      	strlt	r2, [sp, #16]
 80176f2:	7823      	ldrb	r3, [r4, #0]
 80176f4:	2b2e      	cmp	r3, #46	; 0x2e
 80176f6:	d10c      	bne.n	8017712 <_vfiprintf_r+0x15a>
 80176f8:	7863      	ldrb	r3, [r4, #1]
 80176fa:	2b2a      	cmp	r3, #42	; 0x2a
 80176fc:	d134      	bne.n	8017768 <_vfiprintf_r+0x1b0>
 80176fe:	9b03      	ldr	r3, [sp, #12]
 8017700:	1d1a      	adds	r2, r3, #4
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	9203      	str	r2, [sp, #12]
 8017706:	2b00      	cmp	r3, #0
 8017708:	bfb8      	it	lt
 801770a:	f04f 33ff 	movlt.w	r3, #4294967295
 801770e:	3402      	adds	r4, #2
 8017710:	9305      	str	r3, [sp, #20]
 8017712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80177e8 <_vfiprintf_r+0x230>
 8017716:	7821      	ldrb	r1, [r4, #0]
 8017718:	2203      	movs	r2, #3
 801771a:	4650      	mov	r0, sl
 801771c:	f7e8 fd58 	bl	80001d0 <memchr>
 8017720:	b138      	cbz	r0, 8017732 <_vfiprintf_r+0x17a>
 8017722:	9b04      	ldr	r3, [sp, #16]
 8017724:	eba0 000a 	sub.w	r0, r0, sl
 8017728:	2240      	movs	r2, #64	; 0x40
 801772a:	4082      	lsls	r2, r0
 801772c:	4313      	orrs	r3, r2
 801772e:	3401      	adds	r4, #1
 8017730:	9304      	str	r3, [sp, #16]
 8017732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017736:	4829      	ldr	r0, [pc, #164]	; (80177dc <_vfiprintf_r+0x224>)
 8017738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801773c:	2206      	movs	r2, #6
 801773e:	f7e8 fd47 	bl	80001d0 <memchr>
 8017742:	2800      	cmp	r0, #0
 8017744:	d03f      	beq.n	80177c6 <_vfiprintf_r+0x20e>
 8017746:	4b26      	ldr	r3, [pc, #152]	; (80177e0 <_vfiprintf_r+0x228>)
 8017748:	bb1b      	cbnz	r3, 8017792 <_vfiprintf_r+0x1da>
 801774a:	9b03      	ldr	r3, [sp, #12]
 801774c:	3307      	adds	r3, #7
 801774e:	f023 0307 	bic.w	r3, r3, #7
 8017752:	3308      	adds	r3, #8
 8017754:	9303      	str	r3, [sp, #12]
 8017756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017758:	443b      	add	r3, r7
 801775a:	9309      	str	r3, [sp, #36]	; 0x24
 801775c:	e768      	b.n	8017630 <_vfiprintf_r+0x78>
 801775e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017762:	460c      	mov	r4, r1
 8017764:	2001      	movs	r0, #1
 8017766:	e7a6      	b.n	80176b6 <_vfiprintf_r+0xfe>
 8017768:	2300      	movs	r3, #0
 801776a:	3401      	adds	r4, #1
 801776c:	9305      	str	r3, [sp, #20]
 801776e:	4619      	mov	r1, r3
 8017770:	f04f 0c0a 	mov.w	ip, #10
 8017774:	4620      	mov	r0, r4
 8017776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801777a:	3a30      	subs	r2, #48	; 0x30
 801777c:	2a09      	cmp	r2, #9
 801777e:	d903      	bls.n	8017788 <_vfiprintf_r+0x1d0>
 8017780:	2b00      	cmp	r3, #0
 8017782:	d0c6      	beq.n	8017712 <_vfiprintf_r+0x15a>
 8017784:	9105      	str	r1, [sp, #20]
 8017786:	e7c4      	b.n	8017712 <_vfiprintf_r+0x15a>
 8017788:	fb0c 2101 	mla	r1, ip, r1, r2
 801778c:	4604      	mov	r4, r0
 801778e:	2301      	movs	r3, #1
 8017790:	e7f0      	b.n	8017774 <_vfiprintf_r+0x1bc>
 8017792:	ab03      	add	r3, sp, #12
 8017794:	9300      	str	r3, [sp, #0]
 8017796:	462a      	mov	r2, r5
 8017798:	4b12      	ldr	r3, [pc, #72]	; (80177e4 <_vfiprintf_r+0x22c>)
 801779a:	a904      	add	r1, sp, #16
 801779c:	4630      	mov	r0, r6
 801779e:	f7fc f975 	bl	8013a8c <_printf_float>
 80177a2:	4607      	mov	r7, r0
 80177a4:	1c78      	adds	r0, r7, #1
 80177a6:	d1d6      	bne.n	8017756 <_vfiprintf_r+0x19e>
 80177a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80177aa:	07d9      	lsls	r1, r3, #31
 80177ac:	d405      	bmi.n	80177ba <_vfiprintf_r+0x202>
 80177ae:	89ab      	ldrh	r3, [r5, #12]
 80177b0:	059a      	lsls	r2, r3, #22
 80177b2:	d402      	bmi.n	80177ba <_vfiprintf_r+0x202>
 80177b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80177b6:	f7fd fb1d 	bl	8014df4 <__retarget_lock_release_recursive>
 80177ba:	89ab      	ldrh	r3, [r5, #12]
 80177bc:	065b      	lsls	r3, r3, #25
 80177be:	f53f af1d 	bmi.w	80175fc <_vfiprintf_r+0x44>
 80177c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177c4:	e71c      	b.n	8017600 <_vfiprintf_r+0x48>
 80177c6:	ab03      	add	r3, sp, #12
 80177c8:	9300      	str	r3, [sp, #0]
 80177ca:	462a      	mov	r2, r5
 80177cc:	4b05      	ldr	r3, [pc, #20]	; (80177e4 <_vfiprintf_r+0x22c>)
 80177ce:	a904      	add	r1, sp, #16
 80177d0:	4630      	mov	r0, r6
 80177d2:	f7fc fbff 	bl	8013fd4 <_printf_i>
 80177d6:	e7e4      	b.n	80177a2 <_vfiprintf_r+0x1ea>
 80177d8:	0801a348 	.word	0x0801a348
 80177dc:	0801a352 	.word	0x0801a352
 80177e0:	08013a8d 	.word	0x08013a8d
 80177e4:	08017593 	.word	0x08017593
 80177e8:	0801a34e 	.word	0x0801a34e

080177ec <__sflush_r>:
 80177ec:	898a      	ldrh	r2, [r1, #12]
 80177ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f2:	4605      	mov	r5, r0
 80177f4:	0710      	lsls	r0, r2, #28
 80177f6:	460c      	mov	r4, r1
 80177f8:	d458      	bmi.n	80178ac <__sflush_r+0xc0>
 80177fa:	684b      	ldr	r3, [r1, #4]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	dc05      	bgt.n	801780c <__sflush_r+0x20>
 8017800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017802:	2b00      	cmp	r3, #0
 8017804:	dc02      	bgt.n	801780c <__sflush_r+0x20>
 8017806:	2000      	movs	r0, #0
 8017808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801780c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801780e:	2e00      	cmp	r6, #0
 8017810:	d0f9      	beq.n	8017806 <__sflush_r+0x1a>
 8017812:	2300      	movs	r3, #0
 8017814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017818:	682f      	ldr	r7, [r5, #0]
 801781a:	6a21      	ldr	r1, [r4, #32]
 801781c:	602b      	str	r3, [r5, #0]
 801781e:	d032      	beq.n	8017886 <__sflush_r+0x9a>
 8017820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017822:	89a3      	ldrh	r3, [r4, #12]
 8017824:	075a      	lsls	r2, r3, #29
 8017826:	d505      	bpl.n	8017834 <__sflush_r+0x48>
 8017828:	6863      	ldr	r3, [r4, #4]
 801782a:	1ac0      	subs	r0, r0, r3
 801782c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801782e:	b10b      	cbz	r3, 8017834 <__sflush_r+0x48>
 8017830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017832:	1ac0      	subs	r0, r0, r3
 8017834:	2300      	movs	r3, #0
 8017836:	4602      	mov	r2, r0
 8017838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801783a:	6a21      	ldr	r1, [r4, #32]
 801783c:	4628      	mov	r0, r5
 801783e:	47b0      	blx	r6
 8017840:	1c43      	adds	r3, r0, #1
 8017842:	89a3      	ldrh	r3, [r4, #12]
 8017844:	d106      	bne.n	8017854 <__sflush_r+0x68>
 8017846:	6829      	ldr	r1, [r5, #0]
 8017848:	291d      	cmp	r1, #29
 801784a:	d82b      	bhi.n	80178a4 <__sflush_r+0xb8>
 801784c:	4a29      	ldr	r2, [pc, #164]	; (80178f4 <__sflush_r+0x108>)
 801784e:	410a      	asrs	r2, r1
 8017850:	07d6      	lsls	r6, r2, #31
 8017852:	d427      	bmi.n	80178a4 <__sflush_r+0xb8>
 8017854:	2200      	movs	r2, #0
 8017856:	6062      	str	r2, [r4, #4]
 8017858:	04d9      	lsls	r1, r3, #19
 801785a:	6922      	ldr	r2, [r4, #16]
 801785c:	6022      	str	r2, [r4, #0]
 801785e:	d504      	bpl.n	801786a <__sflush_r+0x7e>
 8017860:	1c42      	adds	r2, r0, #1
 8017862:	d101      	bne.n	8017868 <__sflush_r+0x7c>
 8017864:	682b      	ldr	r3, [r5, #0]
 8017866:	b903      	cbnz	r3, 801786a <__sflush_r+0x7e>
 8017868:	6560      	str	r0, [r4, #84]	; 0x54
 801786a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801786c:	602f      	str	r7, [r5, #0]
 801786e:	2900      	cmp	r1, #0
 8017870:	d0c9      	beq.n	8017806 <__sflush_r+0x1a>
 8017872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017876:	4299      	cmp	r1, r3
 8017878:	d002      	beq.n	8017880 <__sflush_r+0x94>
 801787a:	4628      	mov	r0, r5
 801787c:	f7fe f95a 	bl	8015b34 <_free_r>
 8017880:	2000      	movs	r0, #0
 8017882:	6360      	str	r0, [r4, #52]	; 0x34
 8017884:	e7c0      	b.n	8017808 <__sflush_r+0x1c>
 8017886:	2301      	movs	r3, #1
 8017888:	4628      	mov	r0, r5
 801788a:	47b0      	blx	r6
 801788c:	1c41      	adds	r1, r0, #1
 801788e:	d1c8      	bne.n	8017822 <__sflush_r+0x36>
 8017890:	682b      	ldr	r3, [r5, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d0c5      	beq.n	8017822 <__sflush_r+0x36>
 8017896:	2b1d      	cmp	r3, #29
 8017898:	d001      	beq.n	801789e <__sflush_r+0xb2>
 801789a:	2b16      	cmp	r3, #22
 801789c:	d101      	bne.n	80178a2 <__sflush_r+0xb6>
 801789e:	602f      	str	r7, [r5, #0]
 80178a0:	e7b1      	b.n	8017806 <__sflush_r+0x1a>
 80178a2:	89a3      	ldrh	r3, [r4, #12]
 80178a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178a8:	81a3      	strh	r3, [r4, #12]
 80178aa:	e7ad      	b.n	8017808 <__sflush_r+0x1c>
 80178ac:	690f      	ldr	r7, [r1, #16]
 80178ae:	2f00      	cmp	r7, #0
 80178b0:	d0a9      	beq.n	8017806 <__sflush_r+0x1a>
 80178b2:	0793      	lsls	r3, r2, #30
 80178b4:	680e      	ldr	r6, [r1, #0]
 80178b6:	bf08      	it	eq
 80178b8:	694b      	ldreq	r3, [r1, #20]
 80178ba:	600f      	str	r7, [r1, #0]
 80178bc:	bf18      	it	ne
 80178be:	2300      	movne	r3, #0
 80178c0:	eba6 0807 	sub.w	r8, r6, r7
 80178c4:	608b      	str	r3, [r1, #8]
 80178c6:	f1b8 0f00 	cmp.w	r8, #0
 80178ca:	dd9c      	ble.n	8017806 <__sflush_r+0x1a>
 80178cc:	6a21      	ldr	r1, [r4, #32]
 80178ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80178d0:	4643      	mov	r3, r8
 80178d2:	463a      	mov	r2, r7
 80178d4:	4628      	mov	r0, r5
 80178d6:	47b0      	blx	r6
 80178d8:	2800      	cmp	r0, #0
 80178da:	dc06      	bgt.n	80178ea <__sflush_r+0xfe>
 80178dc:	89a3      	ldrh	r3, [r4, #12]
 80178de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178e2:	81a3      	strh	r3, [r4, #12]
 80178e4:	f04f 30ff 	mov.w	r0, #4294967295
 80178e8:	e78e      	b.n	8017808 <__sflush_r+0x1c>
 80178ea:	4407      	add	r7, r0
 80178ec:	eba8 0800 	sub.w	r8, r8, r0
 80178f0:	e7e9      	b.n	80178c6 <__sflush_r+0xda>
 80178f2:	bf00      	nop
 80178f4:	dfbffffe 	.word	0xdfbffffe

080178f8 <_fflush_r>:
 80178f8:	b538      	push	{r3, r4, r5, lr}
 80178fa:	690b      	ldr	r3, [r1, #16]
 80178fc:	4605      	mov	r5, r0
 80178fe:	460c      	mov	r4, r1
 8017900:	b913      	cbnz	r3, 8017908 <_fflush_r+0x10>
 8017902:	2500      	movs	r5, #0
 8017904:	4628      	mov	r0, r5
 8017906:	bd38      	pop	{r3, r4, r5, pc}
 8017908:	b118      	cbz	r0, 8017912 <_fflush_r+0x1a>
 801790a:	6a03      	ldr	r3, [r0, #32]
 801790c:	b90b      	cbnz	r3, 8017912 <_fflush_r+0x1a>
 801790e:	f7fc ff1f 	bl	8014750 <__sinit>
 8017912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d0f3      	beq.n	8017902 <_fflush_r+0xa>
 801791a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801791c:	07d0      	lsls	r0, r2, #31
 801791e:	d404      	bmi.n	801792a <_fflush_r+0x32>
 8017920:	0599      	lsls	r1, r3, #22
 8017922:	d402      	bmi.n	801792a <_fflush_r+0x32>
 8017924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017926:	f7fd fa64 	bl	8014df2 <__retarget_lock_acquire_recursive>
 801792a:	4628      	mov	r0, r5
 801792c:	4621      	mov	r1, r4
 801792e:	f7ff ff5d 	bl	80177ec <__sflush_r>
 8017932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017934:	07da      	lsls	r2, r3, #31
 8017936:	4605      	mov	r5, r0
 8017938:	d4e4      	bmi.n	8017904 <_fflush_r+0xc>
 801793a:	89a3      	ldrh	r3, [r4, #12]
 801793c:	059b      	lsls	r3, r3, #22
 801793e:	d4e1      	bmi.n	8017904 <_fflush_r+0xc>
 8017940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017942:	f7fd fa57 	bl	8014df4 <__retarget_lock_release_recursive>
 8017946:	e7dd      	b.n	8017904 <_fflush_r+0xc>

08017948 <__swhatbuf_r>:
 8017948:	b570      	push	{r4, r5, r6, lr}
 801794a:	460c      	mov	r4, r1
 801794c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017950:	2900      	cmp	r1, #0
 8017952:	b096      	sub	sp, #88	; 0x58
 8017954:	4615      	mov	r5, r2
 8017956:	461e      	mov	r6, r3
 8017958:	da0d      	bge.n	8017976 <__swhatbuf_r+0x2e>
 801795a:	89a3      	ldrh	r3, [r4, #12]
 801795c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017960:	f04f 0100 	mov.w	r1, #0
 8017964:	bf0c      	ite	eq
 8017966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801796a:	2340      	movne	r3, #64	; 0x40
 801796c:	2000      	movs	r0, #0
 801796e:	6031      	str	r1, [r6, #0]
 8017970:	602b      	str	r3, [r5, #0]
 8017972:	b016      	add	sp, #88	; 0x58
 8017974:	bd70      	pop	{r4, r5, r6, pc}
 8017976:	466a      	mov	r2, sp
 8017978:	f000 f878 	bl	8017a6c <_fstat_r>
 801797c:	2800      	cmp	r0, #0
 801797e:	dbec      	blt.n	801795a <__swhatbuf_r+0x12>
 8017980:	9901      	ldr	r1, [sp, #4]
 8017982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801798a:	4259      	negs	r1, r3
 801798c:	4159      	adcs	r1, r3
 801798e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017992:	e7eb      	b.n	801796c <__swhatbuf_r+0x24>

08017994 <__smakebuf_r>:
 8017994:	898b      	ldrh	r3, [r1, #12]
 8017996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017998:	079d      	lsls	r5, r3, #30
 801799a:	4606      	mov	r6, r0
 801799c:	460c      	mov	r4, r1
 801799e:	d507      	bpl.n	80179b0 <__smakebuf_r+0x1c>
 80179a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80179a4:	6023      	str	r3, [r4, #0]
 80179a6:	6123      	str	r3, [r4, #16]
 80179a8:	2301      	movs	r3, #1
 80179aa:	6163      	str	r3, [r4, #20]
 80179ac:	b002      	add	sp, #8
 80179ae:	bd70      	pop	{r4, r5, r6, pc}
 80179b0:	ab01      	add	r3, sp, #4
 80179b2:	466a      	mov	r2, sp
 80179b4:	f7ff ffc8 	bl	8017948 <__swhatbuf_r>
 80179b8:	9900      	ldr	r1, [sp, #0]
 80179ba:	4605      	mov	r5, r0
 80179bc:	4630      	mov	r0, r6
 80179be:	f7fe f92d 	bl	8015c1c <_malloc_r>
 80179c2:	b948      	cbnz	r0, 80179d8 <__smakebuf_r+0x44>
 80179c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179c8:	059a      	lsls	r2, r3, #22
 80179ca:	d4ef      	bmi.n	80179ac <__smakebuf_r+0x18>
 80179cc:	f023 0303 	bic.w	r3, r3, #3
 80179d0:	f043 0302 	orr.w	r3, r3, #2
 80179d4:	81a3      	strh	r3, [r4, #12]
 80179d6:	e7e3      	b.n	80179a0 <__smakebuf_r+0xc>
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	6020      	str	r0, [r4, #0]
 80179dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179e0:	81a3      	strh	r3, [r4, #12]
 80179e2:	9b00      	ldr	r3, [sp, #0]
 80179e4:	6163      	str	r3, [r4, #20]
 80179e6:	9b01      	ldr	r3, [sp, #4]
 80179e8:	6120      	str	r0, [r4, #16]
 80179ea:	b15b      	cbz	r3, 8017a04 <__smakebuf_r+0x70>
 80179ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179f0:	4630      	mov	r0, r6
 80179f2:	f000 f84d 	bl	8017a90 <_isatty_r>
 80179f6:	b128      	cbz	r0, 8017a04 <__smakebuf_r+0x70>
 80179f8:	89a3      	ldrh	r3, [r4, #12]
 80179fa:	f023 0303 	bic.w	r3, r3, #3
 80179fe:	f043 0301 	orr.w	r3, r3, #1
 8017a02:	81a3      	strh	r3, [r4, #12]
 8017a04:	89a3      	ldrh	r3, [r4, #12]
 8017a06:	431d      	orrs	r5, r3
 8017a08:	81a5      	strh	r5, [r4, #12]
 8017a0a:	e7cf      	b.n	80179ac <__smakebuf_r+0x18>

08017a0c <_raise_r>:
 8017a0c:	291f      	cmp	r1, #31
 8017a0e:	b538      	push	{r3, r4, r5, lr}
 8017a10:	4604      	mov	r4, r0
 8017a12:	460d      	mov	r5, r1
 8017a14:	d904      	bls.n	8017a20 <_raise_r+0x14>
 8017a16:	2316      	movs	r3, #22
 8017a18:	6003      	str	r3, [r0, #0]
 8017a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a1e:	bd38      	pop	{r3, r4, r5, pc}
 8017a20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017a22:	b112      	cbz	r2, 8017a2a <_raise_r+0x1e>
 8017a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a28:	b94b      	cbnz	r3, 8017a3e <_raise_r+0x32>
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	f000 f852 	bl	8017ad4 <_getpid_r>
 8017a30:	462a      	mov	r2, r5
 8017a32:	4601      	mov	r1, r0
 8017a34:	4620      	mov	r0, r4
 8017a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a3a:	f000 b839 	b.w	8017ab0 <_kill_r>
 8017a3e:	2b01      	cmp	r3, #1
 8017a40:	d00a      	beq.n	8017a58 <_raise_r+0x4c>
 8017a42:	1c59      	adds	r1, r3, #1
 8017a44:	d103      	bne.n	8017a4e <_raise_r+0x42>
 8017a46:	2316      	movs	r3, #22
 8017a48:	6003      	str	r3, [r0, #0]
 8017a4a:	2001      	movs	r0, #1
 8017a4c:	e7e7      	b.n	8017a1e <_raise_r+0x12>
 8017a4e:	2400      	movs	r4, #0
 8017a50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017a54:	4628      	mov	r0, r5
 8017a56:	4798      	blx	r3
 8017a58:	2000      	movs	r0, #0
 8017a5a:	e7e0      	b.n	8017a1e <_raise_r+0x12>

08017a5c <raise>:
 8017a5c:	4b02      	ldr	r3, [pc, #8]	; (8017a68 <raise+0xc>)
 8017a5e:	4601      	mov	r1, r0
 8017a60:	6818      	ldr	r0, [r3, #0]
 8017a62:	f7ff bfd3 	b.w	8017a0c <_raise_r>
 8017a66:	bf00      	nop
 8017a68:	20000170 	.word	0x20000170

08017a6c <_fstat_r>:
 8017a6c:	b538      	push	{r3, r4, r5, lr}
 8017a6e:	4d07      	ldr	r5, [pc, #28]	; (8017a8c <_fstat_r+0x20>)
 8017a70:	2300      	movs	r3, #0
 8017a72:	4604      	mov	r4, r0
 8017a74:	4608      	mov	r0, r1
 8017a76:	4611      	mov	r1, r2
 8017a78:	602b      	str	r3, [r5, #0]
 8017a7a:	f7eb fdbc 	bl	80035f6 <_fstat>
 8017a7e:	1c43      	adds	r3, r0, #1
 8017a80:	d102      	bne.n	8017a88 <_fstat_r+0x1c>
 8017a82:	682b      	ldr	r3, [r5, #0]
 8017a84:	b103      	cbz	r3, 8017a88 <_fstat_r+0x1c>
 8017a86:	6023      	str	r3, [r4, #0]
 8017a88:	bd38      	pop	{r3, r4, r5, pc}
 8017a8a:	bf00      	nop
 8017a8c:	20004fdc 	.word	0x20004fdc

08017a90 <_isatty_r>:
 8017a90:	b538      	push	{r3, r4, r5, lr}
 8017a92:	4d06      	ldr	r5, [pc, #24]	; (8017aac <_isatty_r+0x1c>)
 8017a94:	2300      	movs	r3, #0
 8017a96:	4604      	mov	r4, r0
 8017a98:	4608      	mov	r0, r1
 8017a9a:	602b      	str	r3, [r5, #0]
 8017a9c:	f7eb fdbb 	bl	8003616 <_isatty>
 8017aa0:	1c43      	adds	r3, r0, #1
 8017aa2:	d102      	bne.n	8017aaa <_isatty_r+0x1a>
 8017aa4:	682b      	ldr	r3, [r5, #0]
 8017aa6:	b103      	cbz	r3, 8017aaa <_isatty_r+0x1a>
 8017aa8:	6023      	str	r3, [r4, #0]
 8017aaa:	bd38      	pop	{r3, r4, r5, pc}
 8017aac:	20004fdc 	.word	0x20004fdc

08017ab0 <_kill_r>:
 8017ab0:	b538      	push	{r3, r4, r5, lr}
 8017ab2:	4d07      	ldr	r5, [pc, #28]	; (8017ad0 <_kill_r+0x20>)
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	4608      	mov	r0, r1
 8017aba:	4611      	mov	r1, r2
 8017abc:	602b      	str	r3, [r5, #0]
 8017abe:	f7eb fd57 	bl	8003570 <_kill>
 8017ac2:	1c43      	adds	r3, r0, #1
 8017ac4:	d102      	bne.n	8017acc <_kill_r+0x1c>
 8017ac6:	682b      	ldr	r3, [r5, #0]
 8017ac8:	b103      	cbz	r3, 8017acc <_kill_r+0x1c>
 8017aca:	6023      	str	r3, [r4, #0]
 8017acc:	bd38      	pop	{r3, r4, r5, pc}
 8017ace:	bf00      	nop
 8017ad0:	20004fdc 	.word	0x20004fdc

08017ad4 <_getpid_r>:
 8017ad4:	f7eb bd44 	b.w	8003560 <_getpid>

08017ad8 <_sbrk_r>:
 8017ad8:	b538      	push	{r3, r4, r5, lr}
 8017ada:	4d06      	ldr	r5, [pc, #24]	; (8017af4 <_sbrk_r+0x1c>)
 8017adc:	2300      	movs	r3, #0
 8017ade:	4604      	mov	r4, r0
 8017ae0:	4608      	mov	r0, r1
 8017ae2:	602b      	str	r3, [r5, #0]
 8017ae4:	f7eb fdb0 	bl	8003648 <_sbrk>
 8017ae8:	1c43      	adds	r3, r0, #1
 8017aea:	d102      	bne.n	8017af2 <_sbrk_r+0x1a>
 8017aec:	682b      	ldr	r3, [r5, #0]
 8017aee:	b103      	cbz	r3, 8017af2 <_sbrk_r+0x1a>
 8017af0:	6023      	str	r3, [r4, #0]
 8017af2:	bd38      	pop	{r3, r4, r5, pc}
 8017af4:	20004fdc 	.word	0x20004fdc

08017af8 <nan>:
 8017af8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017b00 <nan+0x8>
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	00000000 	.word	0x00000000
 8017b04:	7ff80000 	.word	0x7ff80000

08017b08 <_calloc_r>:
 8017b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b0a:	fba1 2402 	umull	r2, r4, r1, r2
 8017b0e:	b94c      	cbnz	r4, 8017b24 <_calloc_r+0x1c>
 8017b10:	4611      	mov	r1, r2
 8017b12:	9201      	str	r2, [sp, #4]
 8017b14:	f7fe f882 	bl	8015c1c <_malloc_r>
 8017b18:	9a01      	ldr	r2, [sp, #4]
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	b930      	cbnz	r0, 8017b2c <_calloc_r+0x24>
 8017b1e:	4628      	mov	r0, r5
 8017b20:	b003      	add	sp, #12
 8017b22:	bd30      	pop	{r4, r5, pc}
 8017b24:	220c      	movs	r2, #12
 8017b26:	6002      	str	r2, [r0, #0]
 8017b28:	2500      	movs	r5, #0
 8017b2a:	e7f8      	b.n	8017b1e <_calloc_r+0x16>
 8017b2c:	4621      	mov	r1, r4
 8017b2e:	f7fd f81b 	bl	8014b68 <memset>
 8017b32:	e7f4      	b.n	8017b1e <_calloc_r+0x16>

08017b34 <rshift>:
 8017b34:	6903      	ldr	r3, [r0, #16]
 8017b36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017b3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017b42:	f100 0414 	add.w	r4, r0, #20
 8017b46:	dd45      	ble.n	8017bd4 <rshift+0xa0>
 8017b48:	f011 011f 	ands.w	r1, r1, #31
 8017b4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017b50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017b54:	d10c      	bne.n	8017b70 <rshift+0x3c>
 8017b56:	f100 0710 	add.w	r7, r0, #16
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	42b1      	cmp	r1, r6
 8017b5e:	d334      	bcc.n	8017bca <rshift+0x96>
 8017b60:	1a9b      	subs	r3, r3, r2
 8017b62:	009b      	lsls	r3, r3, #2
 8017b64:	1eea      	subs	r2, r5, #3
 8017b66:	4296      	cmp	r6, r2
 8017b68:	bf38      	it	cc
 8017b6a:	2300      	movcc	r3, #0
 8017b6c:	4423      	add	r3, r4
 8017b6e:	e015      	b.n	8017b9c <rshift+0x68>
 8017b70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017b74:	f1c1 0820 	rsb	r8, r1, #32
 8017b78:	40cf      	lsrs	r7, r1
 8017b7a:	f105 0e04 	add.w	lr, r5, #4
 8017b7e:	46a1      	mov	r9, r4
 8017b80:	4576      	cmp	r6, lr
 8017b82:	46f4      	mov	ip, lr
 8017b84:	d815      	bhi.n	8017bb2 <rshift+0x7e>
 8017b86:	1a9a      	subs	r2, r3, r2
 8017b88:	0092      	lsls	r2, r2, #2
 8017b8a:	3a04      	subs	r2, #4
 8017b8c:	3501      	adds	r5, #1
 8017b8e:	42ae      	cmp	r6, r5
 8017b90:	bf38      	it	cc
 8017b92:	2200      	movcc	r2, #0
 8017b94:	18a3      	adds	r3, r4, r2
 8017b96:	50a7      	str	r7, [r4, r2]
 8017b98:	b107      	cbz	r7, 8017b9c <rshift+0x68>
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	1b1a      	subs	r2, r3, r4
 8017b9e:	42a3      	cmp	r3, r4
 8017ba0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ba4:	bf08      	it	eq
 8017ba6:	2300      	moveq	r3, #0
 8017ba8:	6102      	str	r2, [r0, #16]
 8017baa:	bf08      	it	eq
 8017bac:	6143      	streq	r3, [r0, #20]
 8017bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bb2:	f8dc c000 	ldr.w	ip, [ip]
 8017bb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8017bba:	ea4c 0707 	orr.w	r7, ip, r7
 8017bbe:	f849 7b04 	str.w	r7, [r9], #4
 8017bc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017bc6:	40cf      	lsrs	r7, r1
 8017bc8:	e7da      	b.n	8017b80 <rshift+0x4c>
 8017bca:	f851 cb04 	ldr.w	ip, [r1], #4
 8017bce:	f847 cf04 	str.w	ip, [r7, #4]!
 8017bd2:	e7c3      	b.n	8017b5c <rshift+0x28>
 8017bd4:	4623      	mov	r3, r4
 8017bd6:	e7e1      	b.n	8017b9c <rshift+0x68>

08017bd8 <__hexdig_fun>:
 8017bd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017bdc:	2b09      	cmp	r3, #9
 8017bde:	d802      	bhi.n	8017be6 <__hexdig_fun+0xe>
 8017be0:	3820      	subs	r0, #32
 8017be2:	b2c0      	uxtb	r0, r0
 8017be4:	4770      	bx	lr
 8017be6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017bea:	2b05      	cmp	r3, #5
 8017bec:	d801      	bhi.n	8017bf2 <__hexdig_fun+0x1a>
 8017bee:	3847      	subs	r0, #71	; 0x47
 8017bf0:	e7f7      	b.n	8017be2 <__hexdig_fun+0xa>
 8017bf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017bf6:	2b05      	cmp	r3, #5
 8017bf8:	d801      	bhi.n	8017bfe <__hexdig_fun+0x26>
 8017bfa:	3827      	subs	r0, #39	; 0x27
 8017bfc:	e7f1      	b.n	8017be2 <__hexdig_fun+0xa>
 8017bfe:	2000      	movs	r0, #0
 8017c00:	4770      	bx	lr
	...

08017c04 <__gethex>:
 8017c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c08:	4617      	mov	r7, r2
 8017c0a:	680a      	ldr	r2, [r1, #0]
 8017c0c:	b085      	sub	sp, #20
 8017c0e:	f102 0b02 	add.w	fp, r2, #2
 8017c12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017c16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017c1a:	4681      	mov	r9, r0
 8017c1c:	468a      	mov	sl, r1
 8017c1e:	9302      	str	r3, [sp, #8]
 8017c20:	32fe      	adds	r2, #254	; 0xfe
 8017c22:	eb02 030b 	add.w	r3, r2, fp
 8017c26:	46d8      	mov	r8, fp
 8017c28:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8017c2c:	9301      	str	r3, [sp, #4]
 8017c2e:	2830      	cmp	r0, #48	; 0x30
 8017c30:	d0f7      	beq.n	8017c22 <__gethex+0x1e>
 8017c32:	f7ff ffd1 	bl	8017bd8 <__hexdig_fun>
 8017c36:	4604      	mov	r4, r0
 8017c38:	2800      	cmp	r0, #0
 8017c3a:	d138      	bne.n	8017cae <__gethex+0xaa>
 8017c3c:	49a7      	ldr	r1, [pc, #668]	; (8017edc <__gethex+0x2d8>)
 8017c3e:	2201      	movs	r2, #1
 8017c40:	4640      	mov	r0, r8
 8017c42:	f7fc ffa6 	bl	8014b92 <strncmp>
 8017c46:	4606      	mov	r6, r0
 8017c48:	2800      	cmp	r0, #0
 8017c4a:	d169      	bne.n	8017d20 <__gethex+0x11c>
 8017c4c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017c50:	465d      	mov	r5, fp
 8017c52:	f7ff ffc1 	bl	8017bd8 <__hexdig_fun>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	d064      	beq.n	8017d24 <__gethex+0x120>
 8017c5a:	465a      	mov	r2, fp
 8017c5c:	7810      	ldrb	r0, [r2, #0]
 8017c5e:	2830      	cmp	r0, #48	; 0x30
 8017c60:	4690      	mov	r8, r2
 8017c62:	f102 0201 	add.w	r2, r2, #1
 8017c66:	d0f9      	beq.n	8017c5c <__gethex+0x58>
 8017c68:	f7ff ffb6 	bl	8017bd8 <__hexdig_fun>
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	fab0 f480 	clz	r4, r0
 8017c72:	0964      	lsrs	r4, r4, #5
 8017c74:	465e      	mov	r6, fp
 8017c76:	9301      	str	r3, [sp, #4]
 8017c78:	4642      	mov	r2, r8
 8017c7a:	4615      	mov	r5, r2
 8017c7c:	3201      	adds	r2, #1
 8017c7e:	7828      	ldrb	r0, [r5, #0]
 8017c80:	f7ff ffaa 	bl	8017bd8 <__hexdig_fun>
 8017c84:	2800      	cmp	r0, #0
 8017c86:	d1f8      	bne.n	8017c7a <__gethex+0x76>
 8017c88:	4994      	ldr	r1, [pc, #592]	; (8017edc <__gethex+0x2d8>)
 8017c8a:	2201      	movs	r2, #1
 8017c8c:	4628      	mov	r0, r5
 8017c8e:	f7fc ff80 	bl	8014b92 <strncmp>
 8017c92:	b978      	cbnz	r0, 8017cb4 <__gethex+0xb0>
 8017c94:	b946      	cbnz	r6, 8017ca8 <__gethex+0xa4>
 8017c96:	1c6e      	adds	r6, r5, #1
 8017c98:	4632      	mov	r2, r6
 8017c9a:	4615      	mov	r5, r2
 8017c9c:	3201      	adds	r2, #1
 8017c9e:	7828      	ldrb	r0, [r5, #0]
 8017ca0:	f7ff ff9a 	bl	8017bd8 <__hexdig_fun>
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	d1f8      	bne.n	8017c9a <__gethex+0x96>
 8017ca8:	1b73      	subs	r3, r6, r5
 8017caa:	009e      	lsls	r6, r3, #2
 8017cac:	e004      	b.n	8017cb8 <__gethex+0xb4>
 8017cae:	2400      	movs	r4, #0
 8017cb0:	4626      	mov	r6, r4
 8017cb2:	e7e1      	b.n	8017c78 <__gethex+0x74>
 8017cb4:	2e00      	cmp	r6, #0
 8017cb6:	d1f7      	bne.n	8017ca8 <__gethex+0xa4>
 8017cb8:	782b      	ldrb	r3, [r5, #0]
 8017cba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017cbe:	2b50      	cmp	r3, #80	; 0x50
 8017cc0:	d13d      	bne.n	8017d3e <__gethex+0x13a>
 8017cc2:	786b      	ldrb	r3, [r5, #1]
 8017cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8017cc6:	d02f      	beq.n	8017d28 <__gethex+0x124>
 8017cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8017cca:	d031      	beq.n	8017d30 <__gethex+0x12c>
 8017ccc:	1c69      	adds	r1, r5, #1
 8017cce:	f04f 0b00 	mov.w	fp, #0
 8017cd2:	7808      	ldrb	r0, [r1, #0]
 8017cd4:	f7ff ff80 	bl	8017bd8 <__hexdig_fun>
 8017cd8:	1e42      	subs	r2, r0, #1
 8017cda:	b2d2      	uxtb	r2, r2
 8017cdc:	2a18      	cmp	r2, #24
 8017cde:	d82e      	bhi.n	8017d3e <__gethex+0x13a>
 8017ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8017ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017ce8:	f7ff ff76 	bl	8017bd8 <__hexdig_fun>
 8017cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8017cf0:	fa5f fc8c 	uxtb.w	ip, ip
 8017cf4:	f1bc 0f18 	cmp.w	ip, #24
 8017cf8:	d91d      	bls.n	8017d36 <__gethex+0x132>
 8017cfa:	f1bb 0f00 	cmp.w	fp, #0
 8017cfe:	d000      	beq.n	8017d02 <__gethex+0xfe>
 8017d00:	4252      	negs	r2, r2
 8017d02:	4416      	add	r6, r2
 8017d04:	f8ca 1000 	str.w	r1, [sl]
 8017d08:	b1dc      	cbz	r4, 8017d42 <__gethex+0x13e>
 8017d0a:	9b01      	ldr	r3, [sp, #4]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	bf14      	ite	ne
 8017d10:	f04f 0800 	movne.w	r8, #0
 8017d14:	f04f 0806 	moveq.w	r8, #6
 8017d18:	4640      	mov	r0, r8
 8017d1a:	b005      	add	sp, #20
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d20:	4645      	mov	r5, r8
 8017d22:	4626      	mov	r6, r4
 8017d24:	2401      	movs	r4, #1
 8017d26:	e7c7      	b.n	8017cb8 <__gethex+0xb4>
 8017d28:	f04f 0b00 	mov.w	fp, #0
 8017d2c:	1ca9      	adds	r1, r5, #2
 8017d2e:	e7d0      	b.n	8017cd2 <__gethex+0xce>
 8017d30:	f04f 0b01 	mov.w	fp, #1
 8017d34:	e7fa      	b.n	8017d2c <__gethex+0x128>
 8017d36:	230a      	movs	r3, #10
 8017d38:	fb03 0002 	mla	r0, r3, r2, r0
 8017d3c:	e7d0      	b.n	8017ce0 <__gethex+0xdc>
 8017d3e:	4629      	mov	r1, r5
 8017d40:	e7e0      	b.n	8017d04 <__gethex+0x100>
 8017d42:	eba5 0308 	sub.w	r3, r5, r8
 8017d46:	3b01      	subs	r3, #1
 8017d48:	4621      	mov	r1, r4
 8017d4a:	2b07      	cmp	r3, #7
 8017d4c:	dc0a      	bgt.n	8017d64 <__gethex+0x160>
 8017d4e:	4648      	mov	r0, r9
 8017d50:	f7fd fff0 	bl	8015d34 <_Balloc>
 8017d54:	4604      	mov	r4, r0
 8017d56:	b940      	cbnz	r0, 8017d6a <__gethex+0x166>
 8017d58:	4b61      	ldr	r3, [pc, #388]	; (8017ee0 <__gethex+0x2dc>)
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	21e4      	movs	r1, #228	; 0xe4
 8017d5e:	4861      	ldr	r0, [pc, #388]	; (8017ee4 <__gethex+0x2e0>)
 8017d60:	f7fb fd44 	bl	80137ec <__assert_func>
 8017d64:	3101      	adds	r1, #1
 8017d66:	105b      	asrs	r3, r3, #1
 8017d68:	e7ef      	b.n	8017d4a <__gethex+0x146>
 8017d6a:	f100 0a14 	add.w	sl, r0, #20
 8017d6e:	2300      	movs	r3, #0
 8017d70:	495a      	ldr	r1, [pc, #360]	; (8017edc <__gethex+0x2d8>)
 8017d72:	f8cd a004 	str.w	sl, [sp, #4]
 8017d76:	469b      	mov	fp, r3
 8017d78:	45a8      	cmp	r8, r5
 8017d7a:	d342      	bcc.n	8017e02 <__gethex+0x1fe>
 8017d7c:	9801      	ldr	r0, [sp, #4]
 8017d7e:	f840 bb04 	str.w	fp, [r0], #4
 8017d82:	eba0 000a 	sub.w	r0, r0, sl
 8017d86:	1080      	asrs	r0, r0, #2
 8017d88:	6120      	str	r0, [r4, #16]
 8017d8a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017d8e:	4658      	mov	r0, fp
 8017d90:	f7fe f8c2 	bl	8015f18 <__hi0bits>
 8017d94:	683d      	ldr	r5, [r7, #0]
 8017d96:	eba8 0000 	sub.w	r0, r8, r0
 8017d9a:	42a8      	cmp	r0, r5
 8017d9c:	dd59      	ble.n	8017e52 <__gethex+0x24e>
 8017d9e:	eba0 0805 	sub.w	r8, r0, r5
 8017da2:	4641      	mov	r1, r8
 8017da4:	4620      	mov	r0, r4
 8017da6:	f7fe fc51 	bl	801664c <__any_on>
 8017daa:	4683      	mov	fp, r0
 8017dac:	b1b8      	cbz	r0, 8017dde <__gethex+0x1da>
 8017dae:	f108 33ff 	add.w	r3, r8, #4294967295
 8017db2:	1159      	asrs	r1, r3, #5
 8017db4:	f003 021f 	and.w	r2, r3, #31
 8017db8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017dbc:	f04f 0b01 	mov.w	fp, #1
 8017dc0:	fa0b f202 	lsl.w	r2, fp, r2
 8017dc4:	420a      	tst	r2, r1
 8017dc6:	d00a      	beq.n	8017dde <__gethex+0x1da>
 8017dc8:	455b      	cmp	r3, fp
 8017dca:	dd06      	ble.n	8017dda <__gethex+0x1d6>
 8017dcc:	f1a8 0102 	sub.w	r1, r8, #2
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f7fe fc3b 	bl	801664c <__any_on>
 8017dd6:	2800      	cmp	r0, #0
 8017dd8:	d138      	bne.n	8017e4c <__gethex+0x248>
 8017dda:	f04f 0b02 	mov.w	fp, #2
 8017dde:	4641      	mov	r1, r8
 8017de0:	4620      	mov	r0, r4
 8017de2:	f7ff fea7 	bl	8017b34 <rshift>
 8017de6:	4446      	add	r6, r8
 8017de8:	68bb      	ldr	r3, [r7, #8]
 8017dea:	42b3      	cmp	r3, r6
 8017dec:	da41      	bge.n	8017e72 <__gethex+0x26e>
 8017dee:	4621      	mov	r1, r4
 8017df0:	4648      	mov	r0, r9
 8017df2:	f7fd ffdf 	bl	8015db4 <_Bfree>
 8017df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017df8:	2300      	movs	r3, #0
 8017dfa:	6013      	str	r3, [r2, #0]
 8017dfc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017e00:	e78a      	b.n	8017d18 <__gethex+0x114>
 8017e02:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017e06:	2a2e      	cmp	r2, #46	; 0x2e
 8017e08:	d014      	beq.n	8017e34 <__gethex+0x230>
 8017e0a:	2b20      	cmp	r3, #32
 8017e0c:	d106      	bne.n	8017e1c <__gethex+0x218>
 8017e0e:	9b01      	ldr	r3, [sp, #4]
 8017e10:	f843 bb04 	str.w	fp, [r3], #4
 8017e14:	f04f 0b00 	mov.w	fp, #0
 8017e18:	9301      	str	r3, [sp, #4]
 8017e1a:	465b      	mov	r3, fp
 8017e1c:	7828      	ldrb	r0, [r5, #0]
 8017e1e:	9303      	str	r3, [sp, #12]
 8017e20:	f7ff feda 	bl	8017bd8 <__hexdig_fun>
 8017e24:	9b03      	ldr	r3, [sp, #12]
 8017e26:	f000 000f 	and.w	r0, r0, #15
 8017e2a:	4098      	lsls	r0, r3
 8017e2c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017e30:	3304      	adds	r3, #4
 8017e32:	e7a1      	b.n	8017d78 <__gethex+0x174>
 8017e34:	45a8      	cmp	r8, r5
 8017e36:	d8e8      	bhi.n	8017e0a <__gethex+0x206>
 8017e38:	2201      	movs	r2, #1
 8017e3a:	4628      	mov	r0, r5
 8017e3c:	9303      	str	r3, [sp, #12]
 8017e3e:	f7fc fea8 	bl	8014b92 <strncmp>
 8017e42:	4926      	ldr	r1, [pc, #152]	; (8017edc <__gethex+0x2d8>)
 8017e44:	9b03      	ldr	r3, [sp, #12]
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d1df      	bne.n	8017e0a <__gethex+0x206>
 8017e4a:	e795      	b.n	8017d78 <__gethex+0x174>
 8017e4c:	f04f 0b03 	mov.w	fp, #3
 8017e50:	e7c5      	b.n	8017dde <__gethex+0x1da>
 8017e52:	da0b      	bge.n	8017e6c <__gethex+0x268>
 8017e54:	eba5 0800 	sub.w	r8, r5, r0
 8017e58:	4621      	mov	r1, r4
 8017e5a:	4642      	mov	r2, r8
 8017e5c:	4648      	mov	r0, r9
 8017e5e:	f7fe f9c3 	bl	80161e8 <__lshift>
 8017e62:	eba6 0608 	sub.w	r6, r6, r8
 8017e66:	4604      	mov	r4, r0
 8017e68:	f100 0a14 	add.w	sl, r0, #20
 8017e6c:	f04f 0b00 	mov.w	fp, #0
 8017e70:	e7ba      	b.n	8017de8 <__gethex+0x1e4>
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	42b3      	cmp	r3, r6
 8017e76:	dd73      	ble.n	8017f60 <__gethex+0x35c>
 8017e78:	1b9e      	subs	r6, r3, r6
 8017e7a:	42b5      	cmp	r5, r6
 8017e7c:	dc34      	bgt.n	8017ee8 <__gethex+0x2e4>
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	2b02      	cmp	r3, #2
 8017e82:	d023      	beq.n	8017ecc <__gethex+0x2c8>
 8017e84:	2b03      	cmp	r3, #3
 8017e86:	d025      	beq.n	8017ed4 <__gethex+0x2d0>
 8017e88:	2b01      	cmp	r3, #1
 8017e8a:	d115      	bne.n	8017eb8 <__gethex+0x2b4>
 8017e8c:	42b5      	cmp	r5, r6
 8017e8e:	d113      	bne.n	8017eb8 <__gethex+0x2b4>
 8017e90:	2d01      	cmp	r5, #1
 8017e92:	d10b      	bne.n	8017eac <__gethex+0x2a8>
 8017e94:	9a02      	ldr	r2, [sp, #8]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6013      	str	r3, [r2, #0]
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	6123      	str	r3, [r4, #16]
 8017e9e:	f8ca 3000 	str.w	r3, [sl]
 8017ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ea4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017ea8:	601c      	str	r4, [r3, #0]
 8017eaa:	e735      	b.n	8017d18 <__gethex+0x114>
 8017eac:	1e69      	subs	r1, r5, #1
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f7fe fbcc 	bl	801664c <__any_on>
 8017eb4:	2800      	cmp	r0, #0
 8017eb6:	d1ed      	bne.n	8017e94 <__gethex+0x290>
 8017eb8:	4621      	mov	r1, r4
 8017eba:	4648      	mov	r0, r9
 8017ebc:	f7fd ff7a 	bl	8015db4 <_Bfree>
 8017ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	6013      	str	r3, [r2, #0]
 8017ec6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017eca:	e725      	b.n	8017d18 <__gethex+0x114>
 8017ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d1f2      	bne.n	8017eb8 <__gethex+0x2b4>
 8017ed2:	e7df      	b.n	8017e94 <__gethex+0x290>
 8017ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d1dc      	bne.n	8017e94 <__gethex+0x290>
 8017eda:	e7ed      	b.n	8017eb8 <__gethex+0x2b4>
 8017edc:	0801a2f4 	.word	0x0801a2f4
 8017ee0:	0801a18b 	.word	0x0801a18b
 8017ee4:	0801a361 	.word	0x0801a361
 8017ee8:	f106 38ff 	add.w	r8, r6, #4294967295
 8017eec:	f1bb 0f00 	cmp.w	fp, #0
 8017ef0:	d133      	bne.n	8017f5a <__gethex+0x356>
 8017ef2:	f1b8 0f00 	cmp.w	r8, #0
 8017ef6:	d004      	beq.n	8017f02 <__gethex+0x2fe>
 8017ef8:	4641      	mov	r1, r8
 8017efa:	4620      	mov	r0, r4
 8017efc:	f7fe fba6 	bl	801664c <__any_on>
 8017f00:	4683      	mov	fp, r0
 8017f02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017f06:	2301      	movs	r3, #1
 8017f08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017f0c:	f008 081f 	and.w	r8, r8, #31
 8017f10:	fa03 f308 	lsl.w	r3, r3, r8
 8017f14:	4213      	tst	r3, r2
 8017f16:	4631      	mov	r1, r6
 8017f18:	4620      	mov	r0, r4
 8017f1a:	bf18      	it	ne
 8017f1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017f20:	1bad      	subs	r5, r5, r6
 8017f22:	f7ff fe07 	bl	8017b34 <rshift>
 8017f26:	687e      	ldr	r6, [r7, #4]
 8017f28:	f04f 0802 	mov.w	r8, #2
 8017f2c:	f1bb 0f00 	cmp.w	fp, #0
 8017f30:	d04a      	beq.n	8017fc8 <__gethex+0x3c4>
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	2b02      	cmp	r3, #2
 8017f36:	d016      	beq.n	8017f66 <__gethex+0x362>
 8017f38:	2b03      	cmp	r3, #3
 8017f3a:	d018      	beq.n	8017f6e <__gethex+0x36a>
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d109      	bne.n	8017f54 <__gethex+0x350>
 8017f40:	f01b 0f02 	tst.w	fp, #2
 8017f44:	d006      	beq.n	8017f54 <__gethex+0x350>
 8017f46:	f8da 3000 	ldr.w	r3, [sl]
 8017f4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8017f4e:	f01b 0f01 	tst.w	fp, #1
 8017f52:	d10f      	bne.n	8017f74 <__gethex+0x370>
 8017f54:	f048 0810 	orr.w	r8, r8, #16
 8017f58:	e036      	b.n	8017fc8 <__gethex+0x3c4>
 8017f5a:	f04f 0b01 	mov.w	fp, #1
 8017f5e:	e7d0      	b.n	8017f02 <__gethex+0x2fe>
 8017f60:	f04f 0801 	mov.w	r8, #1
 8017f64:	e7e2      	b.n	8017f2c <__gethex+0x328>
 8017f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f68:	f1c3 0301 	rsb	r3, r3, #1
 8017f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d0ef      	beq.n	8017f54 <__gethex+0x350>
 8017f74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017f78:	f104 0214 	add.w	r2, r4, #20
 8017f7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017f80:	9301      	str	r3, [sp, #4]
 8017f82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017f86:	2300      	movs	r3, #0
 8017f88:	4694      	mov	ip, r2
 8017f8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8017f8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017f92:	d01e      	beq.n	8017fd2 <__gethex+0x3ce>
 8017f94:	3101      	adds	r1, #1
 8017f96:	f8cc 1000 	str.w	r1, [ip]
 8017f9a:	f1b8 0f02 	cmp.w	r8, #2
 8017f9e:	f104 0214 	add.w	r2, r4, #20
 8017fa2:	d13d      	bne.n	8018020 <__gethex+0x41c>
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	3b01      	subs	r3, #1
 8017fa8:	42ab      	cmp	r3, r5
 8017faa:	d10b      	bne.n	8017fc4 <__gethex+0x3c0>
 8017fac:	1169      	asrs	r1, r5, #5
 8017fae:	2301      	movs	r3, #1
 8017fb0:	f005 051f 	and.w	r5, r5, #31
 8017fb4:	fa03 f505 	lsl.w	r5, r3, r5
 8017fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017fbc:	421d      	tst	r5, r3
 8017fbe:	bf18      	it	ne
 8017fc0:	f04f 0801 	movne.w	r8, #1
 8017fc4:	f048 0820 	orr.w	r8, r8, #32
 8017fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fca:	601c      	str	r4, [r3, #0]
 8017fcc:	9b02      	ldr	r3, [sp, #8]
 8017fce:	601e      	str	r6, [r3, #0]
 8017fd0:	e6a2      	b.n	8017d18 <__gethex+0x114>
 8017fd2:	4290      	cmp	r0, r2
 8017fd4:	f842 3c04 	str.w	r3, [r2, #-4]
 8017fd8:	d8d6      	bhi.n	8017f88 <__gethex+0x384>
 8017fda:	68a2      	ldr	r2, [r4, #8]
 8017fdc:	4593      	cmp	fp, r2
 8017fde:	db17      	blt.n	8018010 <__gethex+0x40c>
 8017fe0:	6861      	ldr	r1, [r4, #4]
 8017fe2:	4648      	mov	r0, r9
 8017fe4:	3101      	adds	r1, #1
 8017fe6:	f7fd fea5 	bl	8015d34 <_Balloc>
 8017fea:	4682      	mov	sl, r0
 8017fec:	b918      	cbnz	r0, 8017ff6 <__gethex+0x3f2>
 8017fee:	4b1b      	ldr	r3, [pc, #108]	; (801805c <__gethex+0x458>)
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	2184      	movs	r1, #132	; 0x84
 8017ff4:	e6b3      	b.n	8017d5e <__gethex+0x15a>
 8017ff6:	6922      	ldr	r2, [r4, #16]
 8017ff8:	3202      	adds	r2, #2
 8017ffa:	f104 010c 	add.w	r1, r4, #12
 8017ffe:	0092      	lsls	r2, r2, #2
 8018000:	300c      	adds	r0, #12
 8018002:	f7fc ff00 	bl	8014e06 <memcpy>
 8018006:	4621      	mov	r1, r4
 8018008:	4648      	mov	r0, r9
 801800a:	f7fd fed3 	bl	8015db4 <_Bfree>
 801800e:	4654      	mov	r4, sl
 8018010:	6922      	ldr	r2, [r4, #16]
 8018012:	1c51      	adds	r1, r2, #1
 8018014:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018018:	6121      	str	r1, [r4, #16]
 801801a:	2101      	movs	r1, #1
 801801c:	6151      	str	r1, [r2, #20]
 801801e:	e7bc      	b.n	8017f9a <__gethex+0x396>
 8018020:	6921      	ldr	r1, [r4, #16]
 8018022:	4559      	cmp	r1, fp
 8018024:	dd0b      	ble.n	801803e <__gethex+0x43a>
 8018026:	2101      	movs	r1, #1
 8018028:	4620      	mov	r0, r4
 801802a:	f7ff fd83 	bl	8017b34 <rshift>
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	3601      	adds	r6, #1
 8018032:	42b3      	cmp	r3, r6
 8018034:	f6ff aedb 	blt.w	8017dee <__gethex+0x1ea>
 8018038:	f04f 0801 	mov.w	r8, #1
 801803c:	e7c2      	b.n	8017fc4 <__gethex+0x3c0>
 801803e:	f015 051f 	ands.w	r5, r5, #31
 8018042:	d0f9      	beq.n	8018038 <__gethex+0x434>
 8018044:	9b01      	ldr	r3, [sp, #4]
 8018046:	441a      	add	r2, r3
 8018048:	f1c5 0520 	rsb	r5, r5, #32
 801804c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018050:	f7fd ff62 	bl	8015f18 <__hi0bits>
 8018054:	42a8      	cmp	r0, r5
 8018056:	dbe6      	blt.n	8018026 <__gethex+0x422>
 8018058:	e7ee      	b.n	8018038 <__gethex+0x434>
 801805a:	bf00      	nop
 801805c:	0801a18b 	.word	0x0801a18b

08018060 <L_shift>:
 8018060:	f1c2 0208 	rsb	r2, r2, #8
 8018064:	0092      	lsls	r2, r2, #2
 8018066:	b570      	push	{r4, r5, r6, lr}
 8018068:	f1c2 0620 	rsb	r6, r2, #32
 801806c:	6843      	ldr	r3, [r0, #4]
 801806e:	6804      	ldr	r4, [r0, #0]
 8018070:	fa03 f506 	lsl.w	r5, r3, r6
 8018074:	432c      	orrs	r4, r5
 8018076:	40d3      	lsrs	r3, r2
 8018078:	6004      	str	r4, [r0, #0]
 801807a:	f840 3f04 	str.w	r3, [r0, #4]!
 801807e:	4288      	cmp	r0, r1
 8018080:	d3f4      	bcc.n	801806c <L_shift+0xc>
 8018082:	bd70      	pop	{r4, r5, r6, pc}

08018084 <__match>:
 8018084:	b530      	push	{r4, r5, lr}
 8018086:	6803      	ldr	r3, [r0, #0]
 8018088:	3301      	adds	r3, #1
 801808a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801808e:	b914      	cbnz	r4, 8018096 <__match+0x12>
 8018090:	6003      	str	r3, [r0, #0]
 8018092:	2001      	movs	r0, #1
 8018094:	bd30      	pop	{r4, r5, pc}
 8018096:	f813 2b01 	ldrb.w	r2, [r3], #1
 801809a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801809e:	2d19      	cmp	r5, #25
 80180a0:	bf98      	it	ls
 80180a2:	3220      	addls	r2, #32
 80180a4:	42a2      	cmp	r2, r4
 80180a6:	d0f0      	beq.n	801808a <__match+0x6>
 80180a8:	2000      	movs	r0, #0
 80180aa:	e7f3      	b.n	8018094 <__match+0x10>

080180ac <__hexnan>:
 80180ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b0:	680b      	ldr	r3, [r1, #0]
 80180b2:	6801      	ldr	r1, [r0, #0]
 80180b4:	115e      	asrs	r6, r3, #5
 80180b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80180ba:	f013 031f 	ands.w	r3, r3, #31
 80180be:	b087      	sub	sp, #28
 80180c0:	bf18      	it	ne
 80180c2:	3604      	addne	r6, #4
 80180c4:	2500      	movs	r5, #0
 80180c6:	1f37      	subs	r7, r6, #4
 80180c8:	4682      	mov	sl, r0
 80180ca:	4690      	mov	r8, r2
 80180cc:	9301      	str	r3, [sp, #4]
 80180ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80180d2:	46b9      	mov	r9, r7
 80180d4:	463c      	mov	r4, r7
 80180d6:	9502      	str	r5, [sp, #8]
 80180d8:	46ab      	mov	fp, r5
 80180da:	784a      	ldrb	r2, [r1, #1]
 80180dc:	1c4b      	adds	r3, r1, #1
 80180de:	9303      	str	r3, [sp, #12]
 80180e0:	b342      	cbz	r2, 8018134 <__hexnan+0x88>
 80180e2:	4610      	mov	r0, r2
 80180e4:	9105      	str	r1, [sp, #20]
 80180e6:	9204      	str	r2, [sp, #16]
 80180e8:	f7ff fd76 	bl	8017bd8 <__hexdig_fun>
 80180ec:	2800      	cmp	r0, #0
 80180ee:	d14f      	bne.n	8018190 <__hexnan+0xe4>
 80180f0:	9a04      	ldr	r2, [sp, #16]
 80180f2:	9905      	ldr	r1, [sp, #20]
 80180f4:	2a20      	cmp	r2, #32
 80180f6:	d818      	bhi.n	801812a <__hexnan+0x7e>
 80180f8:	9b02      	ldr	r3, [sp, #8]
 80180fa:	459b      	cmp	fp, r3
 80180fc:	dd13      	ble.n	8018126 <__hexnan+0x7a>
 80180fe:	454c      	cmp	r4, r9
 8018100:	d206      	bcs.n	8018110 <__hexnan+0x64>
 8018102:	2d07      	cmp	r5, #7
 8018104:	dc04      	bgt.n	8018110 <__hexnan+0x64>
 8018106:	462a      	mov	r2, r5
 8018108:	4649      	mov	r1, r9
 801810a:	4620      	mov	r0, r4
 801810c:	f7ff ffa8 	bl	8018060 <L_shift>
 8018110:	4544      	cmp	r4, r8
 8018112:	d950      	bls.n	80181b6 <__hexnan+0x10a>
 8018114:	2300      	movs	r3, #0
 8018116:	f1a4 0904 	sub.w	r9, r4, #4
 801811a:	f844 3c04 	str.w	r3, [r4, #-4]
 801811e:	f8cd b008 	str.w	fp, [sp, #8]
 8018122:	464c      	mov	r4, r9
 8018124:	461d      	mov	r5, r3
 8018126:	9903      	ldr	r1, [sp, #12]
 8018128:	e7d7      	b.n	80180da <__hexnan+0x2e>
 801812a:	2a29      	cmp	r2, #41	; 0x29
 801812c:	d155      	bne.n	80181da <__hexnan+0x12e>
 801812e:	3102      	adds	r1, #2
 8018130:	f8ca 1000 	str.w	r1, [sl]
 8018134:	f1bb 0f00 	cmp.w	fp, #0
 8018138:	d04f      	beq.n	80181da <__hexnan+0x12e>
 801813a:	454c      	cmp	r4, r9
 801813c:	d206      	bcs.n	801814c <__hexnan+0xa0>
 801813e:	2d07      	cmp	r5, #7
 8018140:	dc04      	bgt.n	801814c <__hexnan+0xa0>
 8018142:	462a      	mov	r2, r5
 8018144:	4649      	mov	r1, r9
 8018146:	4620      	mov	r0, r4
 8018148:	f7ff ff8a 	bl	8018060 <L_shift>
 801814c:	4544      	cmp	r4, r8
 801814e:	d934      	bls.n	80181ba <__hexnan+0x10e>
 8018150:	f1a8 0204 	sub.w	r2, r8, #4
 8018154:	4623      	mov	r3, r4
 8018156:	f853 1b04 	ldr.w	r1, [r3], #4
 801815a:	f842 1f04 	str.w	r1, [r2, #4]!
 801815e:	429f      	cmp	r7, r3
 8018160:	d2f9      	bcs.n	8018156 <__hexnan+0xaa>
 8018162:	1b3b      	subs	r3, r7, r4
 8018164:	f023 0303 	bic.w	r3, r3, #3
 8018168:	3304      	adds	r3, #4
 801816a:	3e03      	subs	r6, #3
 801816c:	3401      	adds	r4, #1
 801816e:	42a6      	cmp	r6, r4
 8018170:	bf38      	it	cc
 8018172:	2304      	movcc	r3, #4
 8018174:	4443      	add	r3, r8
 8018176:	2200      	movs	r2, #0
 8018178:	f843 2b04 	str.w	r2, [r3], #4
 801817c:	429f      	cmp	r7, r3
 801817e:	d2fb      	bcs.n	8018178 <__hexnan+0xcc>
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	b91b      	cbnz	r3, 801818c <__hexnan+0xe0>
 8018184:	4547      	cmp	r7, r8
 8018186:	d126      	bne.n	80181d6 <__hexnan+0x12a>
 8018188:	2301      	movs	r3, #1
 801818a:	603b      	str	r3, [r7, #0]
 801818c:	2005      	movs	r0, #5
 801818e:	e025      	b.n	80181dc <__hexnan+0x130>
 8018190:	3501      	adds	r5, #1
 8018192:	2d08      	cmp	r5, #8
 8018194:	f10b 0b01 	add.w	fp, fp, #1
 8018198:	dd06      	ble.n	80181a8 <__hexnan+0xfc>
 801819a:	4544      	cmp	r4, r8
 801819c:	d9c3      	bls.n	8018126 <__hexnan+0x7a>
 801819e:	2300      	movs	r3, #0
 80181a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80181a4:	2501      	movs	r5, #1
 80181a6:	3c04      	subs	r4, #4
 80181a8:	6822      	ldr	r2, [r4, #0]
 80181aa:	f000 000f 	and.w	r0, r0, #15
 80181ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80181b2:	6020      	str	r0, [r4, #0]
 80181b4:	e7b7      	b.n	8018126 <__hexnan+0x7a>
 80181b6:	2508      	movs	r5, #8
 80181b8:	e7b5      	b.n	8018126 <__hexnan+0x7a>
 80181ba:	9b01      	ldr	r3, [sp, #4]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d0df      	beq.n	8018180 <__hexnan+0xd4>
 80181c0:	f1c3 0320 	rsb	r3, r3, #32
 80181c4:	f04f 32ff 	mov.w	r2, #4294967295
 80181c8:	40da      	lsrs	r2, r3
 80181ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80181ce:	4013      	ands	r3, r2
 80181d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80181d4:	e7d4      	b.n	8018180 <__hexnan+0xd4>
 80181d6:	3f04      	subs	r7, #4
 80181d8:	e7d2      	b.n	8018180 <__hexnan+0xd4>
 80181da:	2004      	movs	r0, #4
 80181dc:	b007      	add	sp, #28
 80181de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080181e2 <__ascii_mbtowc>:
 80181e2:	b082      	sub	sp, #8
 80181e4:	b901      	cbnz	r1, 80181e8 <__ascii_mbtowc+0x6>
 80181e6:	a901      	add	r1, sp, #4
 80181e8:	b142      	cbz	r2, 80181fc <__ascii_mbtowc+0x1a>
 80181ea:	b14b      	cbz	r3, 8018200 <__ascii_mbtowc+0x1e>
 80181ec:	7813      	ldrb	r3, [r2, #0]
 80181ee:	600b      	str	r3, [r1, #0]
 80181f0:	7812      	ldrb	r2, [r2, #0]
 80181f2:	1e10      	subs	r0, r2, #0
 80181f4:	bf18      	it	ne
 80181f6:	2001      	movne	r0, #1
 80181f8:	b002      	add	sp, #8
 80181fa:	4770      	bx	lr
 80181fc:	4610      	mov	r0, r2
 80181fe:	e7fb      	b.n	80181f8 <__ascii_mbtowc+0x16>
 8018200:	f06f 0001 	mvn.w	r0, #1
 8018204:	e7f8      	b.n	80181f8 <__ascii_mbtowc+0x16>

08018206 <_realloc_r>:
 8018206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820a:	4680      	mov	r8, r0
 801820c:	4614      	mov	r4, r2
 801820e:	460e      	mov	r6, r1
 8018210:	b921      	cbnz	r1, 801821c <_realloc_r+0x16>
 8018212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018216:	4611      	mov	r1, r2
 8018218:	f7fd bd00 	b.w	8015c1c <_malloc_r>
 801821c:	b92a      	cbnz	r2, 801822a <_realloc_r+0x24>
 801821e:	f7fd fc89 	bl	8015b34 <_free_r>
 8018222:	4625      	mov	r5, r4
 8018224:	4628      	mov	r0, r5
 8018226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801822a:	f000 f828 	bl	801827e <_malloc_usable_size_r>
 801822e:	4284      	cmp	r4, r0
 8018230:	4607      	mov	r7, r0
 8018232:	d802      	bhi.n	801823a <_realloc_r+0x34>
 8018234:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018238:	d812      	bhi.n	8018260 <_realloc_r+0x5a>
 801823a:	4621      	mov	r1, r4
 801823c:	4640      	mov	r0, r8
 801823e:	f7fd fced 	bl	8015c1c <_malloc_r>
 8018242:	4605      	mov	r5, r0
 8018244:	2800      	cmp	r0, #0
 8018246:	d0ed      	beq.n	8018224 <_realloc_r+0x1e>
 8018248:	42bc      	cmp	r4, r7
 801824a:	4622      	mov	r2, r4
 801824c:	4631      	mov	r1, r6
 801824e:	bf28      	it	cs
 8018250:	463a      	movcs	r2, r7
 8018252:	f7fc fdd8 	bl	8014e06 <memcpy>
 8018256:	4631      	mov	r1, r6
 8018258:	4640      	mov	r0, r8
 801825a:	f7fd fc6b 	bl	8015b34 <_free_r>
 801825e:	e7e1      	b.n	8018224 <_realloc_r+0x1e>
 8018260:	4635      	mov	r5, r6
 8018262:	e7df      	b.n	8018224 <_realloc_r+0x1e>

08018264 <__ascii_wctomb>:
 8018264:	b149      	cbz	r1, 801827a <__ascii_wctomb+0x16>
 8018266:	2aff      	cmp	r2, #255	; 0xff
 8018268:	bf85      	ittet	hi
 801826a:	238a      	movhi	r3, #138	; 0x8a
 801826c:	6003      	strhi	r3, [r0, #0]
 801826e:	700a      	strbls	r2, [r1, #0]
 8018270:	f04f 30ff 	movhi.w	r0, #4294967295
 8018274:	bf98      	it	ls
 8018276:	2001      	movls	r0, #1
 8018278:	4770      	bx	lr
 801827a:	4608      	mov	r0, r1
 801827c:	4770      	bx	lr

0801827e <_malloc_usable_size_r>:
 801827e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018282:	1f18      	subs	r0, r3, #4
 8018284:	2b00      	cmp	r3, #0
 8018286:	bfbc      	itt	lt
 8018288:	580b      	ldrlt	r3, [r1, r0]
 801828a:	18c0      	addlt	r0, r0, r3
 801828c:	4770      	bx	lr
	...

08018290 <_init>:
 8018290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018292:	bf00      	nop
 8018294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018296:	bc08      	pop	{r3}
 8018298:	469e      	mov	lr, r3
 801829a:	4770      	bx	lr

0801829c <_fini>:
 801829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829e:	bf00      	nop
 80182a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182a2:	bc08      	pop	{r3}
 80182a4:	469e      	mov	lr, r3
 80182a6:	4770      	bx	lr
