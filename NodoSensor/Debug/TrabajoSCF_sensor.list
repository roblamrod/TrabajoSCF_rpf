
TrabajoSCF_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800f688  0800f688  0001f688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe04  0800fe04  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe04  0800fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe0c  0800fe0c  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe0c  0800fe0c  0001fe0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe10  0800fe10  0001fe10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800fe14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  200002c4  080100d8  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e80  080100d8  00022e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002813f  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005727  00000000  00000000  00048476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022c8  00000000  00000000  0004dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ac9  00000000  00000000  0004fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007d40  00000000  00000000  00051931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028cd6  00000000  00000000  00059671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b286  00000000  00000000  00082347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a8f4  00000000  00000000  0018d5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00197ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f670 	.word	0x0800f670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800f670 	.word	0x0800f670

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
extern UART_HandleTypeDef hDiscoUart;
#endif /* TERMINAL_USE */

static  uint8_t  IP_Addr[4];

int _write(int file, char *ptr, int len){
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffc9 	bl	8000ff0 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
	}
	return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f001 fbeb 	bl	8002856 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f89a 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fac0 	bl	8001608 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001088:	f000 f8fa 	bl	8001280 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108c:	f000 f930 	bl	80012f0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001090:	f000 f96c 	bl	800136c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001094:	f000 f9ec 	bl	8001470 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001098:	f000 fa28 	bl	80014ec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109c:	f000 fa56 	bl	800154c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a0:	f000 fa84 	bl	80015ac <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80010a4:	f000 f988 	bl	80013b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <main+0xfc>)
 80010aa:	4a33      	ldr	r2, [pc, #204]	; (8001178 <main+0x100>)
 80010ac:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <main+0xfc>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <main+0xfc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <main+0xfc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <main+0xfc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <main+0xfc>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <main+0xfc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <main+0xfc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <main+0xfc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <main+0xfc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 80010e6:	4923      	ldr	r1, [pc, #140]	; (8001174 <main+0xfc>)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f006 fa45 	bl	8007578 <BSP_COM_Init>

  #endif /* TERMINAL_USE */
  BSP_TSENSOR_Init();
 80010ee:	f006 fc6f 	bl	80079d0 <BSP_TSENSOR_Init>
  printf("****** Sistemas Ciberfisicos ****** \n\r");
 80010f2:	4822      	ldr	r0, [pc, #136]	; (800117c <main+0x104>)
 80010f4:	f00a fe0a 	bl	800bd0c <iprintf>

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000); 			/* TransmisiÃ³n de mensajes por UART */
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	2231      	movs	r2, #49	; 0x31
 80010fe:	4920      	ldr	r1, [pc, #128]	; (8001180 <main+0x108>)
 8001100:	4820      	ldr	r0, [pc, #128]	; (8001184 <main+0x10c>)
 8001102:	f005 fa36 	bl	8006572 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	2231      	movs	r2, #49	; 0x31
 800110c:	491e      	ldr	r1, [pc, #120]	; (8001188 <main+0x110>)
 800110e:	481d      	ldr	r0, [pc, #116]	; (8001184 <main+0x10c>)
 8001110:	f005 fa2f 	bl	8006572 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	2233      	movs	r2, #51	; 0x33
 800111a:	491c      	ldr	r1, [pc, #112]	; (800118c <main+0x114>)
 800111c:	4819      	ldr	r0, [pc, #100]	; (8001184 <main+0x10c>)
 800111e:	f005 fa28 	bl	8006572 <HAL_UART_Transmit>


iniAcc = BSP_ACCELERO_Init();									/* InicializaciÃ³n del acelerÃ³metro */
 8001122:	f006 fbe5 	bl	80078f0 <BSP_ACCELERO_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <main+0x118>)
 800112c:	701a      	strb	r2, [r3, #0]
LSM6DSL_AccInt_Drdy();											/* ConfiguraciÃ³n del acelerÃ³metro*/
 800112e:	f000 fc25 	bl	800197c <LSM6DSL_AccInt_Drdy>
BSP_ACCELERO_LowPower(0);										/* Deshabilitado del modo de bajo consumo*/
 8001132:	2000      	movs	r0, #0
 8001134:	f006 fc1a 	bl	800796c <BSP_ACCELERO_LowPower>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001138:	f006 fe76 	bl	8007e28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800113c:	4a15      	ldr	r2, [pc, #84]	; (8001194 <main+0x11c>)
 800113e:	2100      	movs	r1, #0
 8001140:	4815      	ldr	r0, [pc, #84]	; (8001198 <main+0x120>)
 8001142:	f006 febb 	bl	8007ebc <osThreadNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <main+0x124>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <main+0x128>)
 800114e:	2100      	movs	r1, #0
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x12c>)
 8001152:	f006 feb3 	bl	8007ebc <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <main+0x130>)
 800115a:	6013      	str	r3, [r2, #0]

  /* creation of acel_task */
  acel_taskHandle = osThreadNew(acel_task_function, NULL, &acel_task_attributes);
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <main+0x134>)
 800115e:	2100      	movs	r1, #0
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <main+0x138>)
 8001162:	f006 feab 	bl	8007ebc <osThreadNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <main+0x13c>)
 800116a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800116c:	f006 fe80 	bl	8007e70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001170:	e7fe      	b.n	8001170 <main+0xf8>
 8001172:	bf00      	nop
 8001174:	20000b64 	.word	0x20000b64
 8001178:	40013800 	.word	0x40013800
 800117c:	0800f6ac 	.word	0x0800f6ac
 8001180:	20000000 	.word	0x20000000
 8001184:	20000438 	.word	0x20000438
 8001188:	20000034 	.word	0x20000034
 800118c:	20000068 	.word	0x20000068
 8001190:	20000a66 	.word	0x20000a66
 8001194:	0800f924 	.word	0x0800f924
 8001198:	08001a21 	.word	0x08001a21
 800119c:	20000a54 	.word	0x20000a54
 80011a0:	0800f948 	.word	0x0800f948
 80011a4:	08001a7d 	.word	0x08001a7d
 80011a8:	20000a58 	.word	0x20000a58
 80011ac:	0800f96c 	.word	0x0800f96c
 80011b0:	08001a8d 	.word	0x08001a8d
 80011b4:	20000a5c 	.word	0x20000a5c

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2244      	movs	r2, #68	; 0x44
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a fef8 	bl	800bfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011de:	f003 f8af 	bl	8004340 <HAL_PWREx_ControlVoltageScaling>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e8:	f000 fee8 	bl	8001fbc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ec:	f003 f88a 	bl	8004304 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <SystemClock_Config+0xc4>)
 80011f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <SystemClock_Config+0xc4>)
 80011f8:	f023 0318 	bic.w	r3, r3, #24
 80011fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001200:	231c      	movs	r3, #28
 8001202:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001214:	2360      	movs	r3, #96	; 0x60
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800121c:	2301      	movs	r3, #1
 800121e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001224:	2328      	movs	r3, #40	; 0x28
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001228:	2307      	movs	r3, #7
 800122a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f9a3 	bl	8004584 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001244:	f000 feba 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2303      	movs	r3, #3
 800124e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2104      	movs	r1, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fd6b 	bl	8004d3c <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800126c:	f000 fea6 	bl	8001fbc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001270:	f004 fa72 	bl	8005758 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001274:	bf00      	nop
 8001276:	3758      	adds	r7, #88	; 0x58
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000

08001280 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <MX_DFSDM1_Init+0x6c>)
 8001288:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 800128c:	2201      	movs	r2, #1
 800128e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 8001298:	2202      	movs	r2, #2
 800129a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012d6:	f001 fc69 	bl	8002bac <HAL_DFSDM_ChannelInit>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80012e0:	f000 fe6c 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200002e0 	.word	0x200002e0
 80012ec:	40016020 	.word	0x40016020

080012f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_I2C2_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_I2C2_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_I2C2_Init+0x74>)
 80012fc:	f640 6214 	movw	r2, #3604	; 0xe14
 8001300:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_I2C2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_I2C2_Init+0x74>)
 800130a:	2201      	movs	r2, #1
 800130c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_I2C2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_I2C2_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_I2C2_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_I2C2_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_I2C2_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_I2C2_Init+0x74>)
 800132e:	f002 f859 	bl	80033e4 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fe40 	bl	8001fbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <MX_I2C2_Init+0x74>)
 8001340:	f002 fe00 	bl	8003f44 <HAL_I2CEx_ConfigAnalogFilter>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800134a:	f000 fe37 	bl	8001fbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_I2C2_Init+0x74>)
 8001352:	f002 fe42 	bl	8003fda <HAL_I2CEx_ConfigDigitalFilter>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 fe2e 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000318 	.word	0x20000318
 8001368:	40005800 	.word	0x40005800

0800136c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <MX_QUADSPI_Init+0x48>)
 8001374:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 8001378:	2202      	movs	r2, #2
 800137a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 800137e:	2204      	movs	r2, #4
 8001380:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 8001384:	2210      	movs	r2, #16
 8001386:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 800138a:	2217      	movs	r2, #23
 800138c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_QUADSPI_Init+0x44>)
 800139c:	f003 f836 	bl	800440c <HAL_QSPI_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80013a6:	f000 fe09 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000036c 	.word	0x2000036c
 80013b4:	a0001000 	.word	0xa0001000

080013b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013cc:	2300      	movs	r3, #0
 80013ce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_RTC_Init+0xb0>)
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <MX_RTC_Init+0xb4>)
 80013d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <MX_RTC_Init+0xb0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_RTC_Init+0xb0>)
 80013de:	227f      	movs	r2, #127	; 0x7f
 80013e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_RTC_Init+0xb0>)
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_RTC_Init+0xb0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_RTC_Init+0xb0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_RTC_Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_RTC_Init+0xb0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <MX_RTC_Init+0xb0>)
 8001402:	f004 fb8b 	bl	8005b1c <HAL_RTC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800140c:	f000 fdd6 	bl	8001fbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001410:	2312      	movs	r3, #18
 8001412:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x49;
 8001414:	2349      	movs	r3, #73	; 0x49
 8001416:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 8001418:	2350      	movs	r3, #80	; 0x50
 800141a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2201      	movs	r2, #1
 8001428:	4619      	mov	r1, r3
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <MX_RTC_Init+0xb0>)
 800142c:	f004 fbfe 	bl	8005c2c <HAL_RTC_SetTime>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001436:	f000 fdc1 	bl	8001fbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800143a:	2303      	movs	r3, #3
 800143c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800143e:	2301      	movs	r3, #1
 8001440:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 8001442:	2303      	movs	r3, #3
 8001444:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001446:	2324      	movs	r3, #36	; 0x24
 8001448:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_RTC_Init+0xb0>)
 8001452:	f004 fce4 	bl	8005e1e <HAL_RTC_SetDate>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800145c:	f000 fdae 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200003b0 	.word	0x200003b0
 800146c:	40002800 	.word	0x40002800

08001470 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_SPI3_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <MX_SPI3_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_SPI3_Init+0x74>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_SPI3_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_SPI3_Init+0x74>)
 800148a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800148e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_SPI3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_SPI3_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_SPI3_Init+0x74>)
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014be:	2207      	movs	r2, #7
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014ca:	2208      	movs	r2, #8
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_SPI3_Init+0x74>)
 80014d0:	f004 fe4a 	bl	8006168 <HAL_SPI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014da:	f000 fd6f 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200003d4 	.word	0x200003d4
 80014e8:	40003c00 	.word	0x40003c00

080014ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_USART1_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001530:	f004 ffd1 	bl	80064d6 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 fd3f 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000438 	.word	0x20000438
 8001548:	40013800 	.word	0x40013800

0800154c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <MX_USART3_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART3_UART_Init+0x58>)
 8001590:	f004 ffa1 	bl	80064d6 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fd0f 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200004c0 	.word	0x200004c0
 80015a8:	40004800 	.word	0x40004800

080015ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ba:	2206      	movs	r2, #6
 80015bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f0:	f002 fd3f 	bl	8004072 <HAL_PCD_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 fcdf 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000548 	.word	0x20000548

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	4bbd      	ldr	r3, [pc, #756]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4abc      	ldr	r2, [pc, #752]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4bba      	ldr	r3, [pc, #744]	; (8001914 <MX_GPIO_Init+0x30c>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	4bb7      	ldr	r3, [pc, #732]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4ab6      	ldr	r2, [pc, #728]	; (8001914 <MX_GPIO_Init+0x30c>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4bb4      	ldr	r3, [pc, #720]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4bb1      	ldr	r3, [pc, #708]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4ab0      	ldr	r2, [pc, #704]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4bae      	ldr	r3, [pc, #696]	; (8001914 <MX_GPIO_Init+0x30c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4bab      	ldr	r3, [pc, #684]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4aaa      	ldr	r2, [pc, #680]	; (8001914 <MX_GPIO_Init+0x30c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4ba8      	ldr	r3, [pc, #672]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167e:	4ba5      	ldr	r3, [pc, #660]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4aa4      	ldr	r2, [pc, #656]	; (8001914 <MX_GPIO_Init+0x30c>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4ba2      	ldr	r3, [pc, #648]	; (8001914 <MX_GPIO_Init+0x30c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 718a 	mov.w	r1, #276	; 0x114
 800169c:	489e      	ldr	r0, [pc, #632]	; (8001918 <MX_GPIO_Init+0x310>)
 800169e:	f001 fe71 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f248 1104 	movw	r1, #33028	; 0x8104
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f001 fe6a 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016b0:	2200      	movs	r2, #0
 80016b2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80016b6:	4899      	ldr	r0, [pc, #612]	; (800191c <MX_GPIO_Init+0x314>)
 80016b8:	f001 fe64 	bl	8003384 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f241 0181 	movw	r1, #4225	; 0x1081
 80016c2:	4897      	ldr	r0, [pc, #604]	; (8001920 <MX_GPIO_Init+0x318>)
 80016c4:	f001 fe5e 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ce:	4894      	ldr	r0, [pc, #592]	; (8001920 <MX_GPIO_Init+0x318>)
 80016d0:	f001 fe58 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80016da:	4892      	ldr	r0, [pc, #584]	; (8001924 <MX_GPIO_Init+0x31c>)
 80016dc:	f001 fe52 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2120      	movs	r1, #32
 80016e4:	488d      	ldr	r0, [pc, #564]	; (800191c <MX_GPIO_Init+0x314>)
 80016e6:	f001 fe4d 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2101      	movs	r1, #1
 80016ee:	488a      	ldr	r0, [pc, #552]	; (8001918 <MX_GPIO_Init+0x310>)
 80016f0:	f001 fe48 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016f4:	f240 1315 	movw	r3, #277	; 0x115
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4882      	ldr	r0, [pc, #520]	; (8001918 <MX_GPIO_Init+0x310>)
 800170e:	f001 fb9b 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001712:	236a      	movs	r3, #106	; 0x6a
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001716:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	487c      	ldr	r0, [pc, #496]	; (8001918 <MX_GPIO_Init+0x310>)
 8001728:	f001 fb8e 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001732:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4878      	ldr	r0, [pc, #480]	; (8001924 <MX_GPIO_Init+0x31c>)
 8001744:	f001 fb80 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001748:	233f      	movs	r3, #63	; 0x3f
 800174a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800174c:	230b      	movs	r3, #11
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4872      	ldr	r0, [pc, #456]	; (8001924 <MX_GPIO_Init+0x31c>)
 800175c:	f001 fb74 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001760:	2303      	movs	r3, #3
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001770:	2308      	movs	r3, #8
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f001 fb63 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001782:	f248 1304 	movw	r3, #33028	; 0x8104
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f001 fb53 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80017a2:	2308      	movs	r3, #8
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b2:	2301      	movs	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f001 fb42 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80017c4:	2310      	movs	r3, #16
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017c8:	230b      	movs	r3, #11
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017da:	f001 fb35 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80017de:	23e0      	movs	r3, #224	; 0xe0
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ee:	2305      	movs	r3, #5
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f001 fb24 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001800:	2301      	movs	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001804:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4841      	ldr	r0, [pc, #260]	; (800191c <MX_GPIO_Init+0x314>)
 8001816:	f001 fb17 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800181a:	2302      	movs	r3, #2
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800181e:	230b      	movs	r3, #11
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	483b      	ldr	r0, [pc, #236]	; (800191c <MX_GPIO_Init+0x314>)
 800182e:	f001 fb0b 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001832:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001836:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4834      	ldr	r0, [pc, #208]	; (800191c <MX_GPIO_Init+0x314>)
 800184c:	f001 fafc 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001850:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001854:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	482e      	ldr	r0, [pc, #184]	; (8001920 <MX_GPIO_Init+0x318>)
 8001868:	f001 faee 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800186c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4826      	ldr	r0, [pc, #152]	; (8001920 <MX_GPIO_Init+0x318>)
 8001886:	f001 fadf 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800188a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4820      	ldr	r0, [pc, #128]	; (8001924 <MX_GPIO_Init+0x31c>)
 80018a4:	f001 fad0 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4819      	ldr	r0, [pc, #100]	; (8001924 <MX_GPIO_Init+0x31c>)
 80018c0:	f001 fac2 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80018c4:	2302      	movs	r3, #2
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d4:	2305      	movs	r3, #5
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <MX_GPIO_Init+0x318>)
 80018e0:	f001 fab2 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018e4:	2378      	movs	r3, #120	; 0x78
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f4:	2307      	movs	r3, #7
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4808      	ldr	r0, [pc, #32]	; (8001920 <MX_GPIO_Init+0x318>)
 8001900:	f001 faa2 	bl	8002e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001904:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190a:	2312      	movs	r3, #18
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	e00a      	b.n	8001928 <MX_GPIO_Init+0x320>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	48001000 	.word	0x48001000
 800191c:	48000400 	.word	0x48000400
 8001920:	48000c00 	.word	0x48000c00
 8001924:	48000800 	.word	0x48000800
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192e:	2304      	movs	r3, #4
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <MX_GPIO_Init+0x370>)
 800193a:	f001 fa85 	bl	8002e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2105      	movs	r1, #5
 8001942:	2007      	movs	r0, #7
 8001944:	f001 f8fb 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001948:	2007      	movs	r0, #7
 800194a:	f001 f914 	bl	8002b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2105      	movs	r1, #5
 8001952:	2017      	movs	r0, #23
 8001954:	f001 f8f3 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001958:	2017      	movs	r0, #23
 800195a:	f001 f90c 	bl	8002b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	2028      	movs	r0, #40	; 0x28
 8001964:	f001 f8eb 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001968:	2028      	movs	r0, #40	; 0x28
 800196a:	f001 f904 	bl	8002b76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	48000400 	.word	0x48000400

0800197c <LSM6DSL_AccInt_Drdy>:

/* USER CODE BEGIN 4 */
void LSM6DSL_AccInt_Drdy()						/* InicializaciÃ³n del acelerÃ³metro */
	{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

		uint8_t ctrl = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]
		uint8_t tmp;
		/* Read DRDY_PULSE_CFG_G value  (LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);*/
		drdyPulsedCfg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);     /*Buscar en archivo lsm6dsl.h*/
 8001986:	210b      	movs	r1, #11
 8001988:	20d4      	movs	r0, #212	; 0xd4
 800198a:	f005 ff75 	bl	8007878 <SENSOR_IO_Read>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <LSM6DSL_AccInt_Drdy+0x98>)
 8001994:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
		drdyPulsedCfg |= 0b10000000;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <LSM6DSL_AccInt_Drdy+0x98>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <LSM6DSL_AccInt_Drdy+0x98>)
 80019a2:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, drdyPulsedCfg);
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <LSM6DSL_AccInt_Drdy+0x98>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	210b      	movs	r1, #11
 80019ac:	20d4      	movs	r0, #212	; 0xd4
 80019ae:	f005 ff49 	bl	8007844 <SENSOR_IO_Write>

		/* Read INT1_CTRL value */
		ctrlDrdy = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 80019b2:	210d      	movs	r1, #13
 80019b4:	20d4      	movs	r0, #212	; 0xd4
 80019b6:	f005 ff5f 	bl	8007878 <SENSOR_IO_Read>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x9c>)
 80019c0:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
	    ctrlDrdy |= 0b00000011;
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x9c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f043 0303 	orr.w	r3, r3, #3
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x9c>)
 80019ce:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, ctrlDrdy);
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x9c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	210d      	movs	r1, #13
 80019d8:	20d4      	movs	r0, #212	; 0xd4
 80019da:	f005 ff33 	bl	8007844 <SENSOR_IO_Write>

		/* Read MASTER_CONFIG value */
		ctrlMaster = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 80019de:	211a      	movs	r1, #26
 80019e0:	20d4      	movs	r0, #212	; 0xd4
 80019e2:	f005 ff49 	bl	8007878 <SENSOR_IO_Read>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LSM6DSL_AccInt_Drdy+0xa0>)
 80019ec:	701a      	strb	r2, [r3, #0]

		ctrlMaster |= 0b00000011;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <LSM6DSL_AccInt_Drdy+0xa0>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	f043 0303 	orr.w	r3, r3, #3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <LSM6DSL_AccInt_Drdy+0xa0>)
 80019fa:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, ctrlMaster);
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <LSM6DSL_AccInt_Drdy+0xa0>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	211a      	movs	r1, #26
 8001a04:	20d4      	movs	r0, #212	; 0xd4
 8001a06:	f005 ff1d 	bl	8007844 <SENSOR_IO_Write>
	}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000adc 	.word	0x20000adc
 8001a18:	20000add 	.word	0x20000add
 8001a1c:	20000ade 	.word	0x20000ade

08001a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f006 fba8 	bl	800817e <osDelay>
 8001a2e:	e7fb      	b.n	8001a28 <StartDefaultTask+0x8>

08001a30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_EXTI_Callback+0x18>
 8001a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_EXTI_Callback+0x1e>
    case (GPIO_PIN_11):
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
      break;
    default:
    {
      break;
 8001a46:	e009      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x2c>
      SPI_WIFI_ISR();
 8001a48:	f006 f9aa 	bl	8007da0 <SPI_WIFI_ISR>
      break;
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_EXTI_Callback+0x2c>
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 fac3 	bl	8007fe0 <osThreadFlagsSet>
      break;
 8001a5a:	bf00      	nop
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000a5c 	.word	0x20000a5c

08001a68 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <SPI3_IRQHandler+0x10>)
 8001a6e:	f004 fc1f 	bl	80062b0 <HAL_SPI_IRQHandler>
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000bf4 	.word	0x20000bf4

08001a7c <wifiStartTask>:

/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f006 fb7a 	bl	800817e <osDelay>
 8001a8a:	e7fb      	b.n	8001a84 <wifiStartTask+0x8>

08001a8c <acel_task_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_acel_task_function */
void acel_task_function(void *argument)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN acel_task_function */
    uint32_t ret_flag = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  // Infinite loop //
  for(;;)
  {
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f006 faec 	bl	800807c <osThreadFlagsWait>
 8001aa4:	60f8      	str	r0, [r7, #12]
      if (ret_flag == 1U){
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 8279 	bne.w	8001fa0 <acel_task_function+0x514>
        BSP_ACCELERO_AccGetXYZ(pDataAcc);                            // Toma de Aceleración /
 8001aae:	48a2      	ldr	r0, [pc, #648]	; (8001d38 <acel_task_function+0x2ac>)
 8001ab0:	f005 ff76 	bl	80079a0 <BSP_ACCELERO_AccGetXYZ>
        HAL_RTC_GetTime(&hrtc, &varTime, RTC_FORMAT_BIN);            // Toma de timestamp /
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	49a1      	ldr	r1, [pc, #644]	; (8001d3c <acel_task_function+0x2b0>)
 8001ab8:	48a1      	ldr	r0, [pc, #644]	; (8001d40 <acel_task_function+0x2b4>)
 8001aba:	f004 f954 	bl	8005d66 <HAL_RTC_GetTime>
        subsec = (varTime.SecondFraction-varTime.SubSeconds)*1000/varTime.SecondFraction;      /* ms del timestamp */
 8001abe:	4b9f      	ldr	r3, [pc, #636]	; (8001d3c <acel_task_function+0x2b0>)
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <acel_task_function+0x2b0>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001acc:	fb03 f202 	mul.w	r2, r3, r2
 8001ad0:	4b9a      	ldr	r3, [pc, #616]	; (8001d3c <acel_task_function+0x2b0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b9a      	ldr	r3, [pc, #616]	; (8001d44 <acel_task_function+0x2b8>)
 8001adc:	801a      	strh	r2, [r3, #0]
        HAL_RTC_GetDate(&hrtc, &varDate, RTC_FORMAT_BCD);            // Toma de fecha /
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4999      	ldr	r1, [pc, #612]	; (8001d48 <acel_task_function+0x2bc>)
 8001ae2:	4897      	ldr	r0, [pc, #604]	; (8001d40 <acel_task_function+0x2b4>)
 8001ae4:	f004 fa22 	bl	8005f2c <HAL_RTC_GetDate>

        snprintf(str_x,14,"Eje_X = %d, ",pDataAcc[0]);                /* Formateo del mensaje de aceleración del eje X */
 8001ae8:	4b93      	ldr	r3, [pc, #588]	; (8001d38 <acel_task_function+0x2ac>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4a97      	ldr	r2, [pc, #604]	; (8001d4c <acel_task_function+0x2c0>)
 8001af0:	210e      	movs	r1, #14
 8001af2:	4897      	ldr	r0, [pc, #604]	; (8001d50 <acel_task_function+0x2c4>)
 8001af4:	f00a f91c 	bl	800bd30 <sniprintf>
        snprintf(str_y,14,"Eje_Y = %d, ",pDataAcc[1]);
 8001af8:	4b8f      	ldr	r3, [pc, #572]	; (8001d38 <acel_task_function+0x2ac>)
 8001afa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001afe:	4a95      	ldr	r2, [pc, #596]	; (8001d54 <acel_task_function+0x2c8>)
 8001b00:	210e      	movs	r1, #14
 8001b02:	4895      	ldr	r0, [pc, #596]	; (8001d58 <acel_task_function+0x2cc>)
 8001b04:	f00a f914 	bl	800bd30 <sniprintf>
        snprintf(str_z,18,"Eje_Z = %d, \r\n",pDataAcc[2]);
 8001b08:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <acel_task_function+0x2ac>)
 8001b0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b0e:	4a93      	ldr	r2, [pc, #588]	; (8001d5c <acel_task_function+0x2d0>)
 8001b10:	2112      	movs	r1, #18
 8001b12:	4893      	ldr	r0, [pc, #588]	; (8001d60 <acel_task_function+0x2d4>)
 8001b14:	f00a f90c 	bl	800bd30 <sniprintf>


        if (subsec <10){
 8001b18:	4b8a      	ldr	r3, [pc, #552]	; (8001d44 <acel_task_function+0x2b8>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d814      	bhi.n	8001b4a <acel_task_function+0xbe>
            snprintf(timestamp,27,"\r\nTimestamp = %d:%d:%d.00%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001b20:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <acel_task_function+0x2b0>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <acel_task_function+0x2b0>)
 8001b28:	785b      	ldrb	r3, [r3, #1]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <acel_task_function+0x2b0>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4b84      	ldr	r3, [pc, #528]	; (8001d44 <acel_task_function+0x2b8>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	9101      	str	r1, [sp, #4]
 8001b3a:	9200      	str	r2, [sp, #0]
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a89      	ldr	r2, [pc, #548]	; (8001d64 <acel_task_function+0x2d8>)
 8001b40:	211b      	movs	r1, #27
 8001b42:	4889      	ldr	r0, [pc, #548]	; (8001d68 <acel_task_function+0x2dc>)
 8001b44:	f00a f8f4 	bl	800bd30 <sniprintf>
 8001b48:	e030      	b.n	8001bac <acel_task_function+0x120>

        }
        else if (10<=subsec && subsec <100) {
 8001b4a:	4b7e      	ldr	r3, [pc, #504]	; (8001d44 <acel_task_function+0x2b8>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d918      	bls.n	8001b84 <acel_task_function+0xf8>
 8001b52:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <acel_task_function+0x2b8>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2b63      	cmp	r3, #99	; 0x63
 8001b58:	d814      	bhi.n	8001b84 <acel_task_function+0xf8>
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.0%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001b5a:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <acel_task_function+0x2b0>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <acel_task_function+0x2b0>)
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <acel_task_function+0x2b0>)
 8001b68:	789b      	ldrb	r3, [r3, #2]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4b75      	ldr	r3, [pc, #468]	; (8001d44 <acel_task_function+0x2b8>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	9101      	str	r1, [sp, #4]
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a7c      	ldr	r2, [pc, #496]	; (8001d6c <acel_task_function+0x2e0>)
 8001b7a:	211c      	movs	r1, #28
 8001b7c:	487a      	ldr	r0, [pc, #488]	; (8001d68 <acel_task_function+0x2dc>)
 8001b7e:	f00a f8d7 	bl	800bd30 <sniprintf>
 8001b82:	e013      	b.n	8001bac <acel_task_function+0x120>

        }
        else{
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <acel_task_function+0x2b0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <acel_task_function+0x2b0>)
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <acel_task_function+0x2b0>)
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <acel_task_function+0x2b8>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	9101      	str	r1, [sp, #4]
 8001b9e:	9200      	str	r2, [sp, #0]
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a73      	ldr	r2, [pc, #460]	; (8001d70 <acel_task_function+0x2e4>)
 8001ba4:	211c      	movs	r1, #28
 8001ba6:	4870      	ldr	r0, [pc, #448]	; (8001d68 <acel_task_function+0x2dc>)
 8001ba8:	f00a f8c2 	bl	800bd30 <sniprintf>
        }


    	HAL_UART_Transmit(&huart1,(uint8_t *)timestamp,26,1000);		/* TransmisiÃ³n de la informaciÃ³n por UART */
 8001bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb0:	221a      	movs	r2, #26
 8001bb2:	496d      	ldr	r1, [pc, #436]	; (8001d68 <acel_task_function+0x2dc>)
 8001bb4:	486f      	ldr	r0, [pc, #444]	; (8001d74 <acel_task_function+0x2e8>)
 8001bb6:	f004 fcdc 	bl	8006572 <HAL_UART_Transmit>



    	if (pDataAcc[0]>=0 && pDataAcc[0]<10){							/* Eje X */
 8001bba:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <acel_task_function+0x2ac>)
 8001bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0c      	blt.n	8001bde <acel_task_function+0x152>
 8001bc4:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <acel_task_function+0x2ac>)
 8001bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bca:	2b09      	cmp	r3, #9
 8001bcc:	dc07      	bgt.n	8001bde <acel_task_function+0x152>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,10,1000);
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	220a      	movs	r2, #10
 8001bd4:	495e      	ldr	r1, [pc, #376]	; (8001d50 <acel_task_function+0x2c4>)
 8001bd6:	4867      	ldr	r0, [pc, #412]	; (8001d74 <acel_task_function+0x2e8>)
 8001bd8:	f004 fccb 	bl	8006572 <HAL_UART_Transmit>
 8001bdc:	e087      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]>=10 && pDataAcc[0]<100){
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <acel_task_function+0x2ac>)
 8001be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	dd0c      	ble.n	8001c02 <acel_task_function+0x176>
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <acel_task_function+0x2ac>)
 8001bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bee:	2b63      	cmp	r3, #99	; 0x63
 8001bf0:	dc07      	bgt.n	8001c02 <acel_task_function+0x176>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,11,1000);
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	220b      	movs	r2, #11
 8001bf8:	4955      	ldr	r1, [pc, #340]	; (8001d50 <acel_task_function+0x2c4>)
 8001bfa:	485e      	ldr	r0, [pc, #376]	; (8001d74 <acel_task_function+0x2e8>)
 8001bfc:	f004 fcb9 	bl	8006572 <HAL_UART_Transmit>
 8001c00:	e075      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]>=100 && pDataAcc[0]<1000){
 8001c02:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <acel_task_function+0x2ac>)
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	2b63      	cmp	r3, #99	; 0x63
 8001c0a:	dd0d      	ble.n	8001c28 <acel_task_function+0x19c>
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <acel_task_function+0x2ac>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c16:	da07      	bge.n	8001c28 <acel_task_function+0x19c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,12,1000);
 8001c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	494c      	ldr	r1, [pc, #304]	; (8001d50 <acel_task_function+0x2c4>)
 8001c20:	4854      	ldr	r0, [pc, #336]	; (8001d74 <acel_task_function+0x2e8>)
 8001c22:	f004 fca6 	bl	8006572 <HAL_UART_Transmit>
 8001c26:	e062      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]>=1000 && pDataAcc[0]<10000){
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <acel_task_function+0x2ac>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c32:	db0e      	blt.n	8001c52 <acel_task_function+0x1c6>
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <acel_task_function+0x2ac>)
 8001c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	dc07      	bgt.n	8001c52 <acel_task_function+0x1c6>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,13,1000);
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	220d      	movs	r2, #13
 8001c48:	4941      	ldr	r1, [pc, #260]	; (8001d50 <acel_task_function+0x2c4>)
 8001c4a:	484a      	ldr	r0, [pc, #296]	; (8001d74 <acel_task_function+0x2e8>)
 8001c4c:	f004 fc91 	bl	8006572 <HAL_UART_Transmit>
 8001c50:	e04d      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]<0 && pDataAcc[0]>-10){
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <acel_task_function+0x2ac>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da0d      	bge.n	8001c78 <acel_task_function+0x1ec>
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <acel_task_function+0x2ac>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	f113 0f09 	cmn.w	r3, #9
 8001c66:	db07      	blt.n	8001c78 <acel_task_function+0x1ec>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,11,1000);
 8001c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6c:	220b      	movs	r2, #11
 8001c6e:	4938      	ldr	r1, [pc, #224]	; (8001d50 <acel_task_function+0x2c4>)
 8001c70:	4840      	ldr	r0, [pc, #256]	; (8001d74 <acel_task_function+0x2e8>)
 8001c72:	f004 fc7e 	bl	8006572 <HAL_UART_Transmit>
 8001c76:	e03a      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]<=-10 && pDataAcc[0]>-100){
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <acel_task_function+0x2ac>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	f113 0f09 	cmn.w	r3, #9
 8001c82:	da0d      	bge.n	8001ca0 <acel_task_function+0x214>
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <acel_task_function+0x2ac>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001c8e:	db07      	blt.n	8001ca0 <acel_task_function+0x214>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,12,1000);
 8001c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c94:	220c      	movs	r2, #12
 8001c96:	492e      	ldr	r1, [pc, #184]	; (8001d50 <acel_task_function+0x2c4>)
 8001c98:	4836      	ldr	r0, [pc, #216]	; (8001d74 <acel_task_function+0x2e8>)
 8001c9a:	f004 fc6a 	bl	8006572 <HAL_UART_Transmit>
 8001c9e:	e026      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]<=-100 && pDataAcc[0]>-1000){
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <acel_task_function+0x2ac>)
 8001ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001caa:	da0d      	bge.n	8001cc8 <acel_task_function+0x23c>
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <acel_task_function+0x2ac>)
 8001cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001cb6:	dd07      	ble.n	8001cc8 <acel_task_function+0x23c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,13,1000);
 8001cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbc:	220d      	movs	r2, #13
 8001cbe:	4924      	ldr	r1, [pc, #144]	; (8001d50 <acel_task_function+0x2c4>)
 8001cc0:	482c      	ldr	r0, [pc, #176]	; (8001d74 <acel_task_function+0x2e8>)
 8001cc2:	f004 fc56 	bl	8006572 <HAL_UART_Transmit>
 8001cc6:	e012      	b.n	8001cee <acel_task_function+0x262>
    	}
    	else if (pDataAcc[0]<=-1000 && pDataAcc[0]>-10000){
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <acel_task_function+0x2ac>)
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001cd2:	dc0c      	bgt.n	8001cee <acel_task_function+0x262>
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <acel_task_function+0x2ac>)
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <acel_task_function+0x2ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	db06      	blt.n	8001cee <acel_task_function+0x262>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,14,1000);
 8001ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce4:	220e      	movs	r2, #14
 8001ce6:	491a      	ldr	r1, [pc, #104]	; (8001d50 <acel_task_function+0x2c4>)
 8001ce8:	4822      	ldr	r0, [pc, #136]	; (8001d74 <acel_task_function+0x2e8>)
 8001cea:	f004 fc42 	bl	8006572 <HAL_UART_Transmit>
    	}


    	if (pDataAcc[1]>=0 && pDataAcc[1]<10){						/* Eje Y */
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <acel_task_function+0x2ac>)
 8001cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0c      	blt.n	8001d12 <acel_task_function+0x286>
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <acel_task_function+0x2ac>)
 8001cfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfe:	2b09      	cmp	r3, #9
 8001d00:	dc07      	bgt.n	8001d12 <acel_task_function+0x286>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,10,1000);
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	220a      	movs	r2, #10
 8001d08:	4913      	ldr	r1, [pc, #76]	; (8001d58 <acel_task_function+0x2cc>)
 8001d0a:	481a      	ldr	r0, [pc, #104]	; (8001d74 <acel_task_function+0x2e8>)
 8001d0c:	f004 fc31 	bl	8006572 <HAL_UART_Transmit>
 8001d10:	e0aa      	b.n	8001e68 <acel_task_function+0x3dc>
    	}
    	else if (pDataAcc[1]>=10 && pDataAcc[1]<100){
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <acel_task_function+0x2ac>)
 8001d14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	dd2f      	ble.n	8001d7c <acel_task_function+0x2f0>
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <acel_task_function+0x2ac>)
 8001d1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d22:	2b63      	cmp	r3, #99	; 0x63
 8001d24:	dc2a      	bgt.n	8001d7c <acel_task_function+0x2f0>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,11,1000);
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	220b      	movs	r2, #11
 8001d2c:	490a      	ldr	r1, [pc, #40]	; (8001d58 <acel_task_function+0x2cc>)
 8001d2e:	4811      	ldr	r0, [pc, #68]	; (8001d74 <acel_task_function+0x2e8>)
 8001d30:	f004 fc1f 	bl	8006572 <HAL_UART_Transmit>
 8001d34:	e098      	b.n	8001e68 <acel_task_function+0x3dc>
 8001d36:	bf00      	nop
 8001d38:	20000a60 	.word	0x20000a60
 8001d3c:	20000ac4 	.word	0x20000ac4
 8001d40:	200003b0 	.word	0x200003b0
 8001d44:	20000ac0 	.word	0x20000ac0
 8001d48:	20000ad8 	.word	0x20000ad8
 8001d4c:	0800f87c 	.word	0x0800f87c
 8001d50:	20000a68 	.word	0x20000a68
 8001d54:	0800f88c 	.word	0x0800f88c
 8001d58:	20000a78 	.word	0x20000a78
 8001d5c:	0800f89c 	.word	0x0800f89c
 8001d60:	20000a88 	.word	0x20000a88
 8001d64:	0800f8ac 	.word	0x0800f8ac
 8001d68:	20000a9c 	.word	0x20000a9c
 8001d6c:	0800f8cc 	.word	0x0800f8cc
 8001d70:	0800f8ec 	.word	0x0800f8ec
 8001d74:	20000438 	.word	0x20000438
 8001d78:	ffffd8f1 	.word	0xffffd8f1
    	}
    	else if (pDataAcc[1]>=100 && pDataAcc[1]<1000){
 8001d7c:	4b8a      	ldr	r3, [pc, #552]	; (8001fa8 <acel_task_function+0x51c>)
 8001d7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d82:	2b63      	cmp	r3, #99	; 0x63
 8001d84:	dd0d      	ble.n	8001da2 <acel_task_function+0x316>
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <acel_task_function+0x51c>)
 8001d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d90:	da07      	bge.n	8001da2 <acel_task_function+0x316>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,12,1000);
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	220c      	movs	r2, #12
 8001d98:	4984      	ldr	r1, [pc, #528]	; (8001fac <acel_task_function+0x520>)
 8001d9a:	4885      	ldr	r0, [pc, #532]	; (8001fb0 <acel_task_function+0x524>)
 8001d9c:	f004 fbe9 	bl	8006572 <HAL_UART_Transmit>
 8001da0:	e062      	b.n	8001e68 <acel_task_function+0x3dc>
    	}
    	else if (pDataAcc[1]>=1000 && pDataAcc[1]<10000){
 8001da2:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <acel_task_function+0x51c>)
 8001da4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dac:	db0e      	blt.n	8001dcc <acel_task_function+0x340>
 8001dae:	4b7e      	ldr	r3, [pc, #504]	; (8001fa8 <acel_task_function+0x51c>)
 8001db0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001db8:	4293      	cmp	r3, r2
 8001dba:	dc07      	bgt.n	8001dcc <acel_task_function+0x340>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,13,1000);
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	220d      	movs	r2, #13
 8001dc2:	497a      	ldr	r1, [pc, #488]	; (8001fac <acel_task_function+0x520>)
 8001dc4:	487a      	ldr	r0, [pc, #488]	; (8001fb0 <acel_task_function+0x524>)
 8001dc6:	f004 fbd4 	bl	8006572 <HAL_UART_Transmit>
 8001dca:	e04d      	b.n	8001e68 <acel_task_function+0x3dc>
    	}
    	else if (pDataAcc[1]<0 && pDataAcc[1]>-10){
 8001dcc:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <acel_task_function+0x51c>)
 8001dce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da0d      	bge.n	8001df2 <acel_task_function+0x366>
 8001dd6:	4b74      	ldr	r3, [pc, #464]	; (8001fa8 <acel_task_function+0x51c>)
 8001dd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ddc:	f113 0f09 	cmn.w	r3, #9
 8001de0:	db07      	blt.n	8001df2 <acel_task_function+0x366>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,11,1000);
 8001de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de6:	220b      	movs	r2, #11
 8001de8:	4970      	ldr	r1, [pc, #448]	; (8001fac <acel_task_function+0x520>)
 8001dea:	4871      	ldr	r0, [pc, #452]	; (8001fb0 <acel_task_function+0x524>)
 8001dec:	f004 fbc1 	bl	8006572 <HAL_UART_Transmit>
 8001df0:	e03a      	b.n	8001e68 <acel_task_function+0x3dc>
    	}
    	else if (pDataAcc[1]<=-10 && pDataAcc[1]>-100){
 8001df2:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <acel_task_function+0x51c>)
 8001df4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df8:	f113 0f09 	cmn.w	r3, #9
 8001dfc:	da0d      	bge.n	8001e1a <acel_task_function+0x38e>
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <acel_task_function+0x51c>)
 8001e00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e04:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001e08:	db07      	blt.n	8001e1a <acel_task_function+0x38e>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,12,1000);
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	220c      	movs	r2, #12
 8001e10:	4966      	ldr	r1, [pc, #408]	; (8001fac <acel_task_function+0x520>)
 8001e12:	4867      	ldr	r0, [pc, #412]	; (8001fb0 <acel_task_function+0x524>)
 8001e14:	f004 fbad 	bl	8006572 <HAL_UART_Transmit>
 8001e18:	e026      	b.n	8001e68 <acel_task_function+0x3dc>
    	}
    	else if (pDataAcc[1]<=-100 && pDataAcc[1]>-1000){
 8001e1a:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <acel_task_function+0x51c>)
 8001e1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e20:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001e24:	da0d      	bge.n	8001e42 <acel_task_function+0x3b6>
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <acel_task_function+0x51c>)
 8001e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e2c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001e30:	dd07      	ble.n	8001e42 <acel_task_function+0x3b6>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,13,1000);
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	220d      	movs	r2, #13
 8001e38:	495c      	ldr	r1, [pc, #368]	; (8001fac <acel_task_function+0x520>)
 8001e3a:	485d      	ldr	r0, [pc, #372]	; (8001fb0 <acel_task_function+0x524>)
 8001e3c:	f004 fb99 	bl	8006572 <HAL_UART_Transmit>
 8001e40:	e012      	b.n	8001e68 <acel_task_function+0x3dc>
    	}
    	else if (pDataAcc[1]<=-1000 && pDataAcc[1]>-10000){
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <acel_task_function+0x51c>)
 8001e44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e48:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001e4c:	dc0c      	bgt.n	8001e68 <acel_task_function+0x3dc>
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <acel_task_function+0x51c>)
 8001e50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <acel_task_function+0x528>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	db06      	blt.n	8001e68 <acel_task_function+0x3dc>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,14,1000);
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	220e      	movs	r2, #14
 8001e60:	4952      	ldr	r1, [pc, #328]	; (8001fac <acel_task_function+0x520>)
 8001e62:	4853      	ldr	r0, [pc, #332]	; (8001fb0 <acel_task_function+0x524>)
 8001e64:	f004 fb85 	bl	8006572 <HAL_UART_Transmit>
    	}

    	if (pDataAcc[2]>=0 && pDataAcc[2]<10){						/* Eje Z */
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <acel_task_function+0x51c>)
 8001e6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0c      	blt.n	8001e8c <acel_task_function+0x400>
 8001e72:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <acel_task_function+0x51c>)
 8001e74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	dc07      	bgt.n	8001e8c <acel_task_function+0x400>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,10,1000);
 8001e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e80:	220a      	movs	r2, #10
 8001e82:	494d      	ldr	r1, [pc, #308]	; (8001fb8 <acel_task_function+0x52c>)
 8001e84:	484a      	ldr	r0, [pc, #296]	; (8001fb0 <acel_task_function+0x524>)
 8001e86:	f004 fb74 	bl	8006572 <HAL_UART_Transmit>
 8001e8a:	e089      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]>=10 && pDataAcc[2]<100){
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <acel_task_function+0x51c>)
 8001e8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e92:	2b09      	cmp	r3, #9
 8001e94:	dd0c      	ble.n	8001eb0 <acel_task_function+0x424>
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <acel_task_function+0x51c>)
 8001e98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e9c:	2b63      	cmp	r3, #99	; 0x63
 8001e9e:	dc07      	bgt.n	8001eb0 <acel_task_function+0x424>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,11,1000);
 8001ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea4:	220b      	movs	r2, #11
 8001ea6:	4944      	ldr	r1, [pc, #272]	; (8001fb8 <acel_task_function+0x52c>)
 8001ea8:	4841      	ldr	r0, [pc, #260]	; (8001fb0 <acel_task_function+0x524>)
 8001eaa:	f004 fb62 	bl	8006572 <HAL_UART_Transmit>
 8001eae:	e077      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]>=100 && pDataAcc[2]<1000){
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <acel_task_function+0x51c>)
 8001eb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb6:	2b63      	cmp	r3, #99	; 0x63
 8001eb8:	dd0d      	ble.n	8001ed6 <acel_task_function+0x44a>
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <acel_task_function+0x51c>)
 8001ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec4:	da07      	bge.n	8001ed6 <acel_task_function+0x44a>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,12,1000);
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	220c      	movs	r2, #12
 8001ecc:	493a      	ldr	r1, [pc, #232]	; (8001fb8 <acel_task_function+0x52c>)
 8001ece:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <acel_task_function+0x524>)
 8001ed0:	f004 fb4f 	bl	8006572 <HAL_UART_Transmit>
 8001ed4:	e064      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]>=1000 && pDataAcc[2]<10000){
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <acel_task_function+0x51c>)
 8001ed8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee0:	db0e      	blt.n	8001f00 <acel_task_function+0x474>
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <acel_task_function+0x51c>)
 8001ee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ee8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001eec:	4293      	cmp	r3, r2
 8001eee:	dc07      	bgt.n	8001f00 <acel_task_function+0x474>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,13,1000);
 8001ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef4:	220d      	movs	r2, #13
 8001ef6:	4930      	ldr	r1, [pc, #192]	; (8001fb8 <acel_task_function+0x52c>)
 8001ef8:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <acel_task_function+0x524>)
 8001efa:	f004 fb3a 	bl	8006572 <HAL_UART_Transmit>
 8001efe:	e04f      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]<0 && pDataAcc[2]>-10){
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <acel_task_function+0x51c>)
 8001f02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da0d      	bge.n	8001f26 <acel_task_function+0x49a>
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <acel_task_function+0x51c>)
 8001f0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f10:	f113 0f09 	cmn.w	r3, #9
 8001f14:	db07      	blt.n	8001f26 <acel_task_function+0x49a>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,11,1000);
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	220b      	movs	r2, #11
 8001f1c:	4926      	ldr	r1, [pc, #152]	; (8001fb8 <acel_task_function+0x52c>)
 8001f1e:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <acel_task_function+0x524>)
 8001f20:	f004 fb27 	bl	8006572 <HAL_UART_Transmit>
 8001f24:	e03c      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]<=-10 && pDataAcc[2]>-100){
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <acel_task_function+0x51c>)
 8001f28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f2c:	f113 0f09 	cmn.w	r3, #9
 8001f30:	da0d      	bge.n	8001f4e <acel_task_function+0x4c2>
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <acel_task_function+0x51c>)
 8001f34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f38:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001f3c:	db07      	blt.n	8001f4e <acel_task_function+0x4c2>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,12,1000);
 8001f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f42:	220c      	movs	r2, #12
 8001f44:	491c      	ldr	r1, [pc, #112]	; (8001fb8 <acel_task_function+0x52c>)
 8001f46:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <acel_task_function+0x524>)
 8001f48:	f004 fb13 	bl	8006572 <HAL_UART_Transmit>
 8001f4c:	e028      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]<=-100 && pDataAcc[2]>-1000){
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <acel_task_function+0x51c>)
 8001f50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f54:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001f58:	da0d      	bge.n	8001f76 <acel_task_function+0x4ea>
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <acel_task_function+0x51c>)
 8001f5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f60:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001f64:	dd07      	ble.n	8001f76 <acel_task_function+0x4ea>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,13,1000);
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	220d      	movs	r2, #13
 8001f6c:	4912      	ldr	r1, [pc, #72]	; (8001fb8 <acel_task_function+0x52c>)
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <acel_task_function+0x524>)
 8001f70:	f004 faff 	bl	8006572 <HAL_UART_Transmit>
 8001f74:	e014      	b.n	8001fa0 <acel_task_function+0x514>
    	}
    	else if (pDataAcc[2]<=-1000 && pDataAcc[2]>-10000){
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <acel_task_function+0x51c>)
 8001f78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f7c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001f80:	dc0d      	bgt.n	8001f9e <acel_task_function+0x512>
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <acel_task_function+0x51c>)
 8001f84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <acel_task_function+0x528>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	db07      	blt.n	8001f9e <acel_task_function+0x512>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,14,1000);
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	220e      	movs	r2, #14
 8001f94:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <acel_task_function+0x52c>)
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <acel_task_function+0x524>)
 8001f98:	f004 faeb 	bl	8006572 <HAL_UART_Transmit>
 8001f9c:	e000      	b.n	8001fa0 <acel_task_function+0x514>
    	}

    	else
    		__NOP();
 8001f9e:	bf00      	nop
    	}

    osDelay(1);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f006 f8ec 	bl	800817e <osDelay>
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 8001fa6:	e577      	b.n	8001a98 <acel_task_function+0xc>
 8001fa8:	20000a60 	.word	0x20000a60
 8001fac:	20000a78 	.word	0x20000a78
 8001fb0:	20000438 	.word	0x20000438
 8001fb4:	ffffd8f1 	.word	0xffffd8f1
 8001fb8:	20000a88 	.word	0x20000a88

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_MspInit+0x4c>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_MspInit+0x4c>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_MspInit+0x4c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_MspInit+0x4c>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	210f      	movs	r1, #15
 8002002:	f06f 0001 	mvn.w	r0, #1
 8002006:	f000 fd9a 	bl	8002b3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0ac      	sub	sp, #176	; 0xb0
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2288      	movs	r2, #136	; 0x88
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f009 ffbf 	bl	800bfbc <memset>
  if(DFSDM1_Init == 0)
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d142      	bne.n	80020cc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800204a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4618      	mov	r0, r3
 8002058:	f003 f894 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002062:	f7ff ffab 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800206c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002070:	6613      	str	r3, [r2, #96]	; 0x60
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002096:	f44f 7320 	mov.w	r3, #640	; 0x280
 800209a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80020b0:	2306      	movs	r3, #6
 80020b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020ba:	4619      	mov	r1, r3
 80020bc:	4807      	ldr	r0, [pc, #28]	; (80020dc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80020be:	f000 fec3 	bl	8002e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4a02      	ldr	r2, [pc, #8]	; (80020d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80020ca:	6013      	str	r3, [r2, #0]
  }

}
 80020cc:	bf00      	nop
 80020ce:	37b0      	adds	r7, #176	; 0xb0
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000ae0 	.word	0x20000ae0
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48001000 	.word	0x48001000

080020e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0ac      	sub	sp, #176	; 0xb0
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2288      	movs	r2, #136	; 0x88
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f009 ff5b 	bl	800bfbc <memset>
  if(hi2c->Instance==I2C2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a21      	ldr	r2, [pc, #132]	; (8002190 <HAL_I2C_MspInit+0xb0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d13b      	bne.n	8002188 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4618      	mov	r0, r3
 800211e:	f003 f831 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002128:	f7ff ff48 	bl	8001fbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_I2C_MspInit+0xb4>)
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <HAL_I2C_MspInit+0xb4>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_I2C_MspInit+0xb4>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002144:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214c:	2312      	movs	r3, #18
 800214e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002152:	2301      	movs	r3, #1
 8002154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800215e:	2304      	movs	r3, #4
 8002160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002168:	4619      	mov	r1, r3
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <HAL_I2C_MspInit+0xb8>)
 800216c:	f000 fe6c 	bl	8002e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_I2C_MspInit+0xb4>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_I2C_MspInit+0xb4>)
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_I2C_MspInit+0xb4>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	37b0      	adds	r7, #176	; 0xb0
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40005800 	.word	0x40005800
 8002194:	40021000 	.word	0x40021000
 8002198:	48000400 	.word	0x48000400

0800219c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_I2C_MspDeInit+0x3c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10f      	bne.n	80021ce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_I2C_MspDeInit+0x40>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_I2C_MspDeInit+0x40>)
 80021b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80021ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021be:	4808      	ldr	r0, [pc, #32]	; (80021e0 <HAL_I2C_MspDeInit+0x44>)
 80021c0:	f000 ffec 	bl	800319c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_I2C_MspDeInit+0x44>)
 80021ca:	f000 ffe7 	bl	800319c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40005800 	.word	0x40005800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	48000400 	.word	0x48000400

080021e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_QSPI_MspInit+0x7c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d128      	bne.n	8002258 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_QSPI_MspInit+0x80>)
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_QSPI_MspInit+0x80>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6513      	str	r3, [r2, #80]	; 0x50
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_QSPI_MspInit+0x80>)
 8002214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_QSPI_MspInit+0x80>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_QSPI_MspInit+0x80>)
 8002224:	f043 0310 	orr.w	r3, r3, #16
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_QSPI_MspInit+0x80>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002236:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800223a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002248:	230a      	movs	r3, #10
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_QSPI_MspInit+0x84>)
 8002254:	f000 fdf8 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	a0001000 	.word	0xa0001000
 8002264:	40021000 	.word	0x40021000
 8002268:	48001000 	.word	0x48001000

0800226c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a4      	sub	sp, #144	; 0x90
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	2288      	movs	r2, #136	; 0x88
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f009 fe9d 	bl	800bfbc <memset>
  if(hrtc->Instance==RTC)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_RTC_MspInit+0x5c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d118      	bne.n	80022be <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 ff70 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80022aa:	f7ff fe87 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_RTC_MspInit+0x60>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_RTC_MspInit+0x60>)
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3790      	adds	r7, #144	; 0x90
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40002800 	.word	0x40002800
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_SPI_MspInit+0x8c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d130      	bne.n	8002354 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_SPI_MspInit+0x90>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_SPI_MspInit+0x90>)
 80022f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_SPI_MspInit+0x90>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_SPI_MspInit+0x90>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_SPI_MspInit+0x90>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_SPI_MspInit+0x90>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002322:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002334:	2306      	movs	r3, #6
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4809      	ldr	r0, [pc, #36]	; (8002364 <HAL_SPI_MspInit+0x94>)
 8002340:	f000 fd82 	bl	8002e48 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2105      	movs	r1, #5
 8002348:	2033      	movs	r0, #51	; 0x33
 800234a:	f000 fbf8 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800234e:	2033      	movs	r0, #51	; 0x33
 8002350:	f000 fc11 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40003c00 	.word	0x40003c00
 8002360:	40021000 	.word	0x40021000
 8002364:	48000800 	.word	0x48000800

08002368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0ae      	sub	sp, #184	; 0xb8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	2288      	movs	r2, #136	; 0x88
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f009 fe17 	bl	800bfbc <memset>
  if(huart->Instance==USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a42      	ldr	r2, [pc, #264]	; (800249c <HAL_UART_MspInit+0x134>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d13b      	bne.n	8002410 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002398:	2301      	movs	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800239c:	2300      	movs	r3, #0
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 feed 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023b0:	f7ff fe04 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_UART_MspInit+0x138>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	4a39      	ldr	r2, [pc, #228]	; (80024a0 <HAL_UART_MspInit+0x138>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023be:	6613      	str	r3, [r2, #96]	; 0x60
 80023c0:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <HAL_UART_MspInit+0x138>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_UART_MspInit+0x138>)
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	4a33      	ldr	r2, [pc, #204]	; (80024a0 <HAL_UART_MspInit+0x138>)
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_UART_MspInit+0x138>)
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80023e4:	23c0      	movs	r3, #192	; 0xc0
 80023e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fc:	2307      	movs	r3, #7
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002406:	4619      	mov	r1, r3
 8002408:	4826      	ldr	r0, [pc, #152]	; (80024a4 <HAL_UART_MspInit+0x13c>)
 800240a:	f000 fd1d 	bl	8002e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800240e:	e040      	b.n	8002492 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_UART_MspInit+0x140>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d13b      	bne.n	8002492 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800241a:	2304      	movs	r3, #4
 800241c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800241e:	2300      	movs	r3, #0
 8002420:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4618      	mov	r0, r3
 8002428:	f002 feac 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002432:	f7ff fdc3 	bl	8001fbc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_UART_MspInit+0x138>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_UART_MspInit+0x138>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <HAL_UART_MspInit+0x138>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_UART_MspInit+0x138>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_UART_MspInit+0x138>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_UART_MspInit+0x138>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002480:	2307      	movs	r3, #7
 8002482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002486:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800248a:	4619      	mov	r1, r3
 800248c:	4807      	ldr	r0, [pc, #28]	; (80024ac <HAL_UART_MspInit+0x144>)
 800248e:	f000 fcdb 	bl	8002e48 <HAL_GPIO_Init>
}
 8002492:	bf00      	nop
 8002494:	37b8      	adds	r7, #184	; 0xb8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40013800 	.word	0x40013800
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000400 	.word	0x48000400
 80024a8:	40004800 	.word	0x40004800
 80024ac:	48000c00 	.word	0x48000c00

080024b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0ac      	sub	sp, #176	; 0xb0
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2288      	movs	r2, #136	; 0x88
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f009 fd73 	bl	800bfbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024de:	d17c      	bne.n	80025da <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80024e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80024f6:	2318      	movs	r3, #24
 80024f8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80024fe:	2302      	movs	r3, #2
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002502:	2302      	movs	r3, #2
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002506:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4618      	mov	r0, r3
 8002512:	f002 fe37 	bl	8005184 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800251c:	f7ff fd4e 	bl	8001fbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002556:	f000 fc77 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800255a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800255e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256e:	2303      	movs	r3, #3
 8002570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002574:	230a      	movs	r3, #10
 8002576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f000 fc60 	bl	8002e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 800258e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d114      	bne.n	80025d6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 80025b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6593      	str	r3, [r2, #88]	; 0x58
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80025c4:	f001 ff12 	bl	80043ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_PCD_MspInit+0x134>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025d4:	e001      	b.n	80025da <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80025d6:	f001 ff09 	bl	80043ec <HAL_PWREx_EnableVddUSB>
}
 80025da:	bf00      	nop
 80025dc:	37b0      	adds	r7, #176	; 0xb0
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 f972 	bl	8002900 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800261c:	f007 f9bc 	bl	8009998 <xTaskGetSchedulerState>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002626:	f008 f98f 	bl	800a948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}

0800262e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002632:	2002      	movs	r0, #2
 8002634:	f000 febe 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002640:	2020      	movs	r0, #32
 8002642:	f000 feb7 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002646:	2040      	movs	r0, #64	; 0x40
 8002648:	f000 feb4 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800264c:	2080      	movs	r0, #128	; 0x80
 800264e:	f000 feb1 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002652:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002656:	f000 fead 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}

0800265e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002662:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002666:	f000 fea5 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800266a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800266e:	f000 fea1 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002672:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002676:	f000 fe9d 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800267a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800267e:	f000 fe99 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002682:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002686:	f000 fe95 	bl	80033b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}

0800268e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  return 1;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_kill>:

int _kill(int pid, int sig)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026a8:	f009 fcec 	bl	800c084 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2216      	movs	r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_exit>:

void _exit (int status)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffe7 	bl	800269e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d0:	e7fe      	b.n	80026d0 <_exit+0x12>

080026d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e00a      	b.n	80026fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e4:	f3af 8000 	nop.w
 80026e8:	4601      	mov	r1, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	60ba      	str	r2, [r7, #8]
 80026f0:	b2ca      	uxtb	r2, r1
 80026f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3301      	adds	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	429a      	cmp	r2, r3
 8002700:	dbf0      	blt.n	80026e4 <_read+0x12>
  }

  return len;
 8002702:	687b      	ldr	r3, [r7, #4]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <_close>:
  }
  return len;
}

int _close(int file)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002734:	605a      	str	r2, [r3, #4]
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_isatty>:

int _isatty(int file)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800274c:	2301      	movs	r3, #1
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f009 fc6e 	bl	800c084 <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20018000 	.word	0x20018000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	20000ae4 	.word	0x20000ae4
 80027dc:	20002e80 	.word	0x20002e80

080027e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SystemInit+0x20>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <SystemInit+0x20>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002808:	f7ff ffea 	bl	80027e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <LoopForever+0x6>)
  ldr r1, =_edata
 800280e:	490d      	ldr	r1, [pc, #52]	; (8002844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <LoopForever+0xe>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002814:	e002      	b.n	800281c <LoopCopyDataInit>

08002816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281a:	3304      	adds	r3, #4

0800281c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800281c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002820:	d3f9      	bcc.n	8002816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002824:	4c0a      	ldr	r4, [pc, #40]	; (8002850 <LoopForever+0x16>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002828:	e001      	b.n	800282e <LoopFillZerobss>

0800282a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800282c:	3204      	adds	r2, #4

0800282e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002830:	d3fb      	bcc.n	800282a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002832:	f009 fc2d 	bl	800c090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002836:	f7fe fc1f 	bl	8001078 <main>

0800283a <LoopForever>:

LoopForever:
    b LoopForever
 800283a:	e7fe      	b.n	800283a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800283c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002848:	0800fe14 	.word	0x0800fe14
  ldr r2, =_sbss
 800284c:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002850:	20002e80 	.word	0x20002e80

08002854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC1_2_IRQHandler>

08002856 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002860:	2003      	movs	r0, #3
 8002862:	f000 f961 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002866:	200f      	movs	r0, #15
 8002868:	f000 f80e 	bl	8002888 <HAL_InitTick>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	71fb      	strb	r3, [r7, #7]
 8002876:	e001      	b.n	800287c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002878:	f7ff fba6 	bl	8001fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800287c:	79fb      	ldrb	r3, [r7, #7]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_InitTick+0x6c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d023      	beq.n	80028e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_InitTick+0x70>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_InitTick+0x6c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f96d 	bl	8002b92 <HAL_SYSTICK_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d809      	bhi.n	80028d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f000 f937 	bl	8002b3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <HAL_InitTick+0x74>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e007      	b.n	80028e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e004      	b.n	80028e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	e001      	b.n	80028e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200000a4 	.word	0x200000a4
 80028f8:	2000009c 	.word	0x2000009c
 80028fc:	200000a0 	.word	0x200000a0

08002900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x20>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_IncTick+0x24>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	200000a4 	.word	0x200000a4
 8002924:	20000ae8 	.word	0x20000ae8

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000ae8 	.word	0x20000ae8

08002940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff ffee 	bl	8002928 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d005      	beq.n	8002966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_Delay+0x44>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002966:	bf00      	nop
 8002968:	f7ff ffde 	bl	8002928 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f7      	bhi.n	8002968 <HAL_Delay+0x28>
  {
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200000a4 	.word	0x200000a4

08002988 <__NVIC_SetPriorityGrouping>:
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	; (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <SysTick_Config>:
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff8e 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff29 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff3e 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff8e 	bl	8002a7c <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5d 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff31 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0ac      	b.n	8002d18 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f8b2 	bl	8002d2c <DFSDM_GetChannelFromInstance>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <HAL_DFSDM_ChannelInit+0x174>)
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e09f      	b.n	8002d18 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fa1d 	bl	8002018 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_DFSDM_ChannelInit+0x178>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a4f      	ldr	r2, [pc, #316]	; (8002d24 <HAL_DFSDM_ChannelInit+0x178>)
 8002be6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002be8:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_DFSDM_ChannelInit+0x178>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d125      	bne.n	8002c3c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4948      	ldr	r1, [pc, #288]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c10:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c14:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	791b      	ldrb	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d108      	bne.n	8002c30 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c1e:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	493f      	ldr	r1, [pc, #252]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a3c      	ldr	r2, [pc, #240]	; (8002d28 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c3a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c4a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c5a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c60:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 020f 	bic.w	r2, r2, #15
 8002c78:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ca0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 0207 	and.w	r2, r2, #7
 8002ccc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f810 	bl	8002d2c <DFSDM_GetChannelFromInstance>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_DFSDM_ChannelInit+0x174>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000af0 	.word	0x20000af0
 8002d24:	20000aec 	.word	0x20000aec
 8002d28:	40016000 	.word	0x40016000

08002d2c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d102      	bne.n	8002d42 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e02b      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <DFSDM_GetChannelFromInstance+0x80>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d102      	bne.n	8002d50 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e024      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <DFSDM_GetChannelFromInstance+0x84>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e01d      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <DFSDM_GetChannelFromInstance+0x88>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d102      	bne.n	8002d6c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002d66:	2304      	movs	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e016      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d102      	bne.n	8002d7a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002d74:	2305      	movs	r3, #5
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e00f      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <DFSDM_GetChannelFromInstance+0x90>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d102      	bne.n	8002d88 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002d82:	2306      	movs	r3, #6
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e008      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <DFSDM_GetChannelFromInstance+0x94>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d102      	bne.n	8002d96 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002d90:	2307      	movs	r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e001      	b.n	8002d9a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002d96:	2303      	movs	r3, #3
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40016000 	.word	0x40016000
 8002dac:	40016020 	.word	0x40016020
 8002db0:	40016040 	.word	0x40016040
 8002db4:	40016080 	.word	0x40016080
 8002db8:	400160a0 	.word	0x400160a0
 8002dbc:	400160c0 	.word	0x400160c0
 8002dc0:	400160e0 	.word	0x400160e0

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d005      	beq.n	8002de8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e029      	b.n	8002e3c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 020e 	bic.w	r2, r2, #14
 8002df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f003 021c 	and.w	r2, r3, #28
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
    }
  }
  return status;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e56:	e17f      	b.n	8003158 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8171 	beq.w	8003152 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d005      	beq.n	8002e88 <HAL_GPIO_Init+0x40>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d130      	bne.n	8002eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 0201 	and.w	r2, r3, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d118      	bne.n	8002f28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80ac 	beq.w	8003152 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_GPIO_Init+0x330>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_GPIO_Init+0x330>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6613      	str	r3, [r2, #96]	; 0x60
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_GPIO_Init+0x330>)
 8003008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003012:	4a5a      	ldr	r2, [pc, #360]	; (800317c <HAL_GPIO_Init+0x334>)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800303c:	d025      	beq.n	800308a <HAL_GPIO_Init+0x242>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4f      	ldr	r2, [pc, #316]	; (8003180 <HAL_GPIO_Init+0x338>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01f      	beq.n	8003086 <HAL_GPIO_Init+0x23e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4e      	ldr	r2, [pc, #312]	; (8003184 <HAL_GPIO_Init+0x33c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_Init+0x23a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4d      	ldr	r2, [pc, #308]	; (8003188 <HAL_GPIO_Init+0x340>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0x236>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x344>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_Init+0x232>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <HAL_GPIO_Init+0x348>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_Init+0x22e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4a      	ldr	r2, [pc, #296]	; (8003194 <HAL_GPIO_Init+0x34c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x22a>
 800306e:	2306      	movs	r3, #6
 8003070:	e00c      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003072:	2307      	movs	r3, #7
 8003074:	e00a      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003076:	2305      	movs	r3, #5
 8003078:	e008      	b.n	800308c <HAL_GPIO_Init+0x244>
 800307a:	2304      	movs	r3, #4
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x244>
 800307e:	2303      	movs	r3, #3
 8003080:	e004      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003082:	2302      	movs	r3, #2
 8003084:	e002      	b.n	800308c <HAL_GPIO_Init+0x244>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x244>
 800308a:	2300      	movs	r3, #0
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	f002 0203 	and.w	r2, r2, #3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4093      	lsls	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800309c:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_GPIO_Init+0x334>)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030aa:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030ce:	4a32      	ldr	r2, [pc, #200]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <HAL_GPIO_Init+0x350>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_GPIO_Init+0x350>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_GPIO_Init+0x350>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_GPIO_Init+0x350>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <HAL_GPIO_Init+0x350>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3301      	adds	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	f47f ae78 	bne.w	8002e58 <HAL_GPIO_Init+0x10>
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	48001400 	.word	0x48001400
 8003194:	48001800 	.word	0x48001800
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80031aa:	e0cd      	b.n	8003348 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80031ac:	2201      	movs	r2, #1
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80c0 	beq.w	8003342 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80031c2:	4a68      	ldr	r2, [pc, #416]	; (8003364 <HAL_GPIO_DeInit+0x1c8>)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4013      	ands	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031ea:	d025      	beq.n	8003238 <HAL_GPIO_DeInit+0x9c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_GPIO_DeInit+0x1cc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d01f      	beq.n	8003234 <HAL_GPIO_DeInit+0x98>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_GPIO_DeInit+0x1d0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d019      	beq.n	8003230 <HAL_GPIO_DeInit+0x94>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_GPIO_DeInit+0x1d4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_GPIO_DeInit+0x90>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a5b      	ldr	r2, [pc, #364]	; (8003374 <HAL_GPIO_DeInit+0x1d8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00d      	beq.n	8003228 <HAL_GPIO_DeInit+0x8c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a5a      	ldr	r2, [pc, #360]	; (8003378 <HAL_GPIO_DeInit+0x1dc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <HAL_GPIO_DeInit+0x88>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a59      	ldr	r2, [pc, #356]	; (800337c <HAL_GPIO_DeInit+0x1e0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_GPIO_DeInit+0x84>
 800321c:	2306      	movs	r3, #6
 800321e:	e00c      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 8003220:	2307      	movs	r3, #7
 8003222:	e00a      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 8003224:	2305      	movs	r3, #5
 8003226:	e008      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 8003228:	2304      	movs	r3, #4
 800322a:	e006      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 800322c:	2303      	movs	r3, #3
 800322e:	e004      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 8003230:	2302      	movs	r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_GPIO_DeInit+0x9e>
 8003238:	2300      	movs	r3, #0
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	429a      	cmp	r2, r3
 8003248:	d132      	bne.n	80032b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800324a:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	494b      	ldr	r1, [pc, #300]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 8003254:	4013      	ands	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003258:	4b49      	ldr	r3, [pc, #292]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	4947      	ldr	r1, [pc, #284]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 8003262:	4013      	ands	r3, r2
 8003264:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003266:	4b46      	ldr	r3, [pc, #280]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	4944      	ldr	r1, [pc, #272]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 8003270:	4013      	ands	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003274:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	4940      	ldr	r1, [pc, #256]	; (8003380 <HAL_GPIO_DeInit+0x1e4>)
 800327e:	4013      	ands	r3, r2
 8003280:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003292:	4a34      	ldr	r2, [pc, #208]	; (8003364 <HAL_GPIO_DeInit+0x1c8>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	4830      	ldr	r0, [pc, #192]	; (8003364 <HAL_GPIO_DeInit+0x1c8>)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	400a      	ands	r2, r1
 80032aa:	3302      	adds	r3, #2
 80032ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2103      	movs	r1, #3
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	220f      	movs	r2, #15
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	08d2      	lsrs	r2, r2, #3
 80032e4:	4019      	ands	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2103      	movs	r1, #3
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2101      	movs	r1, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2103      	movs	r1, #3
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003332:	2101      	movs	r1, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af2b 	bne.w	80031ac <HAL_GPIO_DeInit+0x10>
  }
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40010000 	.word	0x40010000
 8003368:	48000400 	.word	0x48000400
 800336c:	48000800 	.word	0x48000800
 8003370:	48000c00 	.word	0x48000c00
 8003374:	48001000 	.word	0x48001000
 8003378:	48001400 	.word	0x48001400
 800337c:	48001800 	.word	0x48001800
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ca:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fb2c 	bl	8001a30 <HAL_GPIO_EXTI_Callback>
  }
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40010400 	.word	0x40010400

080033e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e08d      	b.n	8003512 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fe68 	bl	80020e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003434:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003444:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	e006      	b.n	800346c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800346a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d108      	bne.n	8003486 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	e007      	b.n	8003496 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003494:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69d9      	ldr	r1, [r3, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e021      	b.n	8003570 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fe fe29 	bl	800219c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	f040 80f9 	bne.w	8003792 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_I2C_Mem_Write+0x34>
 80035a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0ed      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Mem_Write+0x4e>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e0e6      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ce:	f7ff f9ab 	bl	8002928 <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2319      	movs	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fac3 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d1      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2240      	movs	r2, #64	; 0x40
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a3a      	ldr	r2, [r7, #32]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003618:	88f8      	ldrh	r0, [r7, #6]
 800361a:	893a      	ldrh	r2, [r7, #8]
 800361c:	8979      	ldrh	r1, [r7, #10]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4603      	mov	r3, r0
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f9d3 	bl	80039d4 <I2C_RequestMemoryWrite>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0a9      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2bff      	cmp	r3, #255	; 0xff
 8003648:	d90e      	bls.n	8003668 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	b2da      	uxtb	r2, r3
 8003656:	8979      	ldrh	r1, [r7, #10]
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fc3d 	bl	8003ee0 <I2C_TransferConfig>
 8003666:	e00f      	b.n	8003688 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	b2da      	uxtb	r2, r3
 8003678:	8979      	ldrh	r1, [r7, #10]
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fc2c 	bl	8003ee0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fabc 	bl	8003c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e07b      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d034      	beq.n	8003740 <HAL_I2C_Mem_Write+0x1c8>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d130      	bne.n	8003740 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2200      	movs	r2, #0
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fa3f 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04d      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2bff      	cmp	r3, #255	; 0xff
 8003700:	d90e      	bls.n	8003720 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	b2da      	uxtb	r2, r3
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	2300      	movs	r3, #0
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fbe1 	bl	8003ee0 <I2C_TransferConfig>
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	b2da      	uxtb	r2, r3
 8003730:	8979      	ldrh	r1, [r7, #10]
 8003732:	2300      	movs	r3, #0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fbd0 	bl	8003ee0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d19e      	bne.n	8003688 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 faa2 	bl	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e01a      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2220      	movs	r2, #32
 8003764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_I2C_Mem_Write+0x224>)
 8003772:	400b      	ands	r3, r1
 8003774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fe00e800 	.word	0xfe00e800

080037a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	f040 80fd 	bne.w	80039c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x34>
 80037ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0f1      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_I2C_Mem_Read+0x4e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0ea      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037f6:	f7ff f897 	bl	8002928 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2319      	movs	r3, #25
 8003802:	2201      	movs	r2, #1
 8003804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f9af 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0d5      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2222      	movs	r2, #34	; 0x22
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003840:	88f8      	ldrh	r0, [r7, #6]
 8003842:	893a      	ldrh	r2, [r7, #8]
 8003844:	8979      	ldrh	r1, [r7, #10]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	4603      	mov	r3, r0
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f913 	bl	8003a7c <I2C_RequestMemoryRead>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0ad      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2bff      	cmp	r3, #255	; 0xff
 8003870:	d90e      	bls.n	8003890 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	b2da      	uxtb	r2, r3
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	4b52      	ldr	r3, [pc, #328]	; (80039cc <HAL_I2C_Mem_Read+0x22c>)
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fb29 	bl	8003ee0 <I2C_TransferConfig>
 800388e:	e00f      	b.n	80038b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_I2C_Mem_Read+0x22c>)
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fb18 	bl	8003ee0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	2200      	movs	r2, #0
 80038b8:	2104      	movs	r1, #4
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f956 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07c      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d034      	beq.n	8003970 <HAL_I2C_Mem_Read+0x1d0>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d130      	bne.n	8003970 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f927 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e04d      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2bff      	cmp	r3, #255	; 0xff
 8003930:	d90e      	bls.n	8003950 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	b2da      	uxtb	r2, r3
 800393e:	8979      	ldrh	r1, [r7, #10]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fac9 	bl	8003ee0 <I2C_TransferConfig>
 800394e:	e00f      	b.n	8003970 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	b2da      	uxtb	r2, r3
 8003960:	8979      	ldrh	r1, [r7, #10]
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fab8 	bl	8003ee0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d19a      	bne.n	80038b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f98a 	bl	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e01a      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2220      	movs	r2, #32
 8003994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_I2C_Mem_Read+0x230>)
 80039a2:	400b      	ands	r3, r1
 80039a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	80002400 	.word	0x80002400
 80039d0:	fe00e800 	.word	0xfe00e800

080039d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <I2C_RequestMemoryWrite+0xa4>)
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fa6f 	bl	8003ee0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f8ff 	bl	8003c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e02c      	b.n	8003a70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
 8003a26:	e015      	b.n	8003a54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f8e5 	bl	8003c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e012      	b.n	8003a70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4a:	893b      	ldrh	r3, [r7, #8]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f884 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	80002000 	.word	0x80002000

08003a7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <I2C_RequestMemoryRead+0xa4>)
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fa1c 	bl	8003ee0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f8ac 	bl	8003c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e02c      	b.n	8003b16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
 8003acc:	e015      	b.n	8003afa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ace:	893b      	ldrh	r3, [r7, #8]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	69b9      	ldr	r1, [r7, #24]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f892 	bl	8003c0a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e012      	b.n	8003b16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f831 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	80002000 	.word	0x80002000

08003b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d103      	bne.n	8003b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d007      	beq.n	8003b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	619a      	str	r2, [r3, #24]
  }
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	e031      	b.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d02d      	beq.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fe fecf 	bl	8002928 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d122      	bne.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d113      	bne.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00f      	b.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d0be      	beq.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c16:	e033      	b.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f87f 	bl	8003d20 <I2C_IsErrorOccurred>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e031      	b.n	8003c90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d025      	beq.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c34:	f7fe fe78 	bl	8002928 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d302      	bcc.n	8003c4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11a      	bne.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d013      	beq.n	8003c80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d1c4      	bne.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca4:	e02f      	b.n	8003d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f838 	bl	8003d20 <I2C_IsErrorOccurred>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02d      	b.n	8003d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fe fe35 	bl	8002928 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11a      	bne.n	8003d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d013      	beq.n	8003d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e007      	b.n	8003d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d1c8      	bne.n	8003ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d068      	beq.n	8003e1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d54:	e049      	b.n	8003dea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d045      	beq.n	8003dea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fe fde3 	bl	8002928 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <I2C_IsErrorOccurred+0x54>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13a      	bne.n	8003dea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d96:	d121      	bne.n	8003ddc <I2C_IsErrorOccurred+0xbc>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9e:	d01d      	beq.n	8003ddc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d01a      	beq.n	8003ddc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003db6:	f7fe fdb7 	bl	8002928 <HAL_GetTick>
 8003dba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dbc:	e00e      	b.n	8003ddc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dbe:	f7fe fdb3 	bl	8002928 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b19      	cmp	r3, #25
 8003dca:	d907      	bls.n	8003ddc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f043 0320 	orr.w	r3, r3, #32
 8003dd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003dda:	e006      	b.n	8003dea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d1e9      	bne.n	8003dbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d003      	beq.n	8003e00 <I2C_IsErrorOccurred+0xe0>
 8003df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0aa      	beq.n	8003d56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00b      	beq.n	8003e48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	f043 0308 	orr.w	r3, r3, #8
 8003e58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f043 0302 	orr.w	r3, r3, #2
 8003e7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01c      	beq.n	8003ece <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fe45 	bl	8003b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <I2C_IsErrorOccurred+0x1bc>)
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3728      	adds	r7, #40	; 0x28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	fe00e800 	.word	0xfe00e800

08003ee0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	817b      	strh	r3, [r7, #10]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ef2:	897b      	ldrh	r3, [r7, #10]
 8003ef4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ef8:	7a7b      	ldrb	r3, [r7, #9]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	0d5b      	lsrs	r3, r3, #21
 8003f1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <I2C_TransferConfig+0x60>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	43db      	mvns	r3, r3
 8003f24:	ea02 0103 	and.w	r1, r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	03ff63ff 	.word	0x03ff63ff

08003f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d138      	bne.n	8003fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e032      	b.n	8003fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6819      	ldr	r1, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d139      	bne.n	8004064 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e033      	b.n	8004066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800402c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004074:	b08f      	sub	sp, #60	; 0x3c
 8004076:	af0a      	add	r7, sp, #40	; 0x28
 8004078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e116      	b.n	80042b2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe fa06 	bl	80024b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 ffd9 	bl	800707a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	687e      	ldr	r6, [r7, #4]
 80040d0:	466d      	mov	r5, sp
 80040d2:	f106 0410 	add.w	r4, r6, #16
 80040d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040e6:	1d33      	adds	r3, r6, #4
 80040e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ea:	6838      	ldr	r0, [r7, #0]
 80040ec:	f002 ff99 	bl	8007022 <USB_CoreInit>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0d7      	b.n	80042b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f002 ffc7 	bl	800709c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
 8004112:	e04a      	b.n	80041aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	333d      	adds	r3, #61	; 0x3d
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	333c      	adds	r3, #60	; 0x3c
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	b298      	uxth	r0, r3
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3356      	adds	r3, #86	; 0x56
 8004150:	4602      	mov	r2, r0
 8004152:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3340      	adds	r3, #64	; 0x40
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3344      	adds	r3, #68	; 0x44
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3348      	adds	r3, #72	; 0x48
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	334c      	adds	r3, #76	; 0x4c
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	3301      	adds	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3af      	bcc.n	8004114 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e044      	b.n	8004244 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041e6:	7bfa      	ldrb	r2, [r7, #15]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	3301      	adds	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d3b5      	bcc.n	80041ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	687e      	ldr	r6, [r7, #4]
 8004256:	466d      	mov	r5, sp
 8004258:	f106 0410 	add.w	r4, r6, #16
 800425c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800425e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004264:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004268:	e885 0003 	stmia.w	r5, {r0, r1}
 800426c:	1d33      	adds	r3, r6, #4
 800426e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004270:	6838      	ldr	r0, [r7, #0]
 8004272:	f002 ff5f 	bl	8007134 <USB_DevInit>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e014      	b.n	80042b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f80a 	bl	80042ba <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 f901 	bl	80074b2 <USB_DevDisconnect>

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	f043 0303 	orr.w	r3, r3, #3
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40007000 	.word	0x40007000

08004324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <HAL_PWREx_GetVoltageRange+0x18>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40007000 	.word	0x40007000

08004340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434e:	d130      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004350:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435c:	d038      	beq.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2232      	movs	r2, #50	; 0x32
 8004374:	fb02 f303 	mul.w	r3, r2, r3
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0c9b      	lsrs	r3, r3, #18
 8004380:	3301      	adds	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004384:	e002      	b.n	800438c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b01      	subs	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004398:	d102      	bne.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f2      	bne.n	8004386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d110      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e00f      	b.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043be:	d007      	beq.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c8:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40007000 	.word	0x40007000
 80043e4:	2000009c 	.word	0x2000009c
 80043e8:	431bde83 	.word	0x431bde83

080043ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043fa:	6053      	str	r3, [r2, #4]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40007000 	.word	0x40007000

0800440c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004414:	f7fe fa88 	bl	8002928 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e063      	b.n	80044ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fd fed3 	bl	80021e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800443e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f858 	bl	80044f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	3b01      	subs	r3, #1
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	2120      	movs	r1, #32
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f850 	bl	8004514 <QSPI_WaitFlagStateUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d131      	bne.n	80044e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6852      	ldr	r2, [r2, #4]
 8004490:	0611      	lsls	r1, r2, #24
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	4311      	orrs	r1, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	430b      	orrs	r3, r1
 800449e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <HAL_QSPI_Init+0xe8>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	0411      	lsls	r1, r2, #16
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6952      	ldr	r2, [r2, #20]
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6992      	ldr	r2, [r2, #24]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80044ea:	7afb      	ldrb	r3, [r7, #11]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	ffe0f8fe 	.word	0xffe0f8fe

080044f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004524:	e01a      	b.n	800455c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d016      	beq.n	800455c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452e:	f7fe f9fb 	bl	8002928 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	429a      	cmp	r2, r3
 800453c:	d302      	bcc.n	8004544 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2204      	movs	r2, #4
 8004548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e00e      	b.n	800457a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	429a      	cmp	r2, r3
 8004576:	d1d6      	bne.n	8004526 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e3ca      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004596:	4b97      	ldr	r3, [pc, #604]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a0:	4b94      	ldr	r3, [pc, #592]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80e4 	beq.w	8004780 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_RCC_OscConfig+0x4a>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0c      	cmp	r3, #12
 80045c2:	f040 808b 	bne.w	80046dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f040 8087 	bne.w	80046dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ce:	4b89      	ldr	r3, [pc, #548]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_RCC_OscConfig+0x62>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e3a2      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1a      	ldr	r2, [r3, #32]
 80045ea:	4b82      	ldr	r3, [pc, #520]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <HAL_RCC_OscConfig+0x7c>
 80045f6:	4b7f      	ldr	r3, [pc, #508]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fe:	e005      	b.n	800460c <HAL_RCC_OscConfig+0x88>
 8004600:	4b7c      	ldr	r3, [pc, #496]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460c:	4293      	cmp	r3, r2
 800460e:	d223      	bcs.n	8004658 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fd55 	bl	80050c4 <RCC_SetFlashLatencyFromMSIRange>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e383      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004624:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a72      	ldr	r2, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800462a:	f043 0308 	orr.w	r3, r3, #8
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b70      	ldr	r3, [pc, #448]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	496d      	ldr	r1, [pc, #436]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	4b6c      	ldr	r3, [pc, #432]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	4968      	ldr	r1, [pc, #416]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
 8004656:	e025      	b.n	80046a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004658:	4b66      	ldr	r3, [pc, #408]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a65      	ldr	r2, [pc, #404]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	4960      	ldr	r1, [pc, #384]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004676:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	495b      	ldr	r1, [pc, #364]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fd15 	bl	80050c4 <RCC_SetFlashLatencyFromMSIRange>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e343      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046a4:	f000 fc4a 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	4950      	ldr	r1, [pc, #320]	; (80047f8 <HAL_RCC_OscConfig+0x274>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	4a4e      	ldr	r2, [pc, #312]	; (80047fc <HAL_RCC_OscConfig+0x278>)
 80046c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046c4:	4b4e      	ldr	r3, [pc, #312]	; (8004800 <HAL_RCC_OscConfig+0x27c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe f8dd 	bl	8002888 <HAL_InitTick>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d052      	beq.n	800477e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	e327      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d032      	beq.n	800474a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a42      	ldr	r2, [pc, #264]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f0:	f7fe f91a 	bl	8002928 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046f8:	f7fe f916 	bl	8002928 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e310      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800470a:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a36      	ldr	r2, [pc, #216]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4931      	ldr	r1, [pc, #196]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004734:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	492c      	ldr	r1, [pc, #176]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	e01a      	b.n	8004780 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800474a:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004756:	f7fe f8e7 	bl	8002928 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800475e:	f7fe f8e3 	bl	8002928 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e2dd      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004770:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x1da>
 800477c:	e000      	b.n	8004780 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800477e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d074      	beq.n	8004876 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x21a>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d10e      	bne.n	80047b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d10b      	bne.n	80047b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479e:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d064      	beq.n	8004874 <HAL_RCC_OscConfig+0x2f0>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d160      	bne.n	8004874 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e2ba      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x24a>
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e026      	b.n	800481c <HAL_RCC_OscConfig+0x298>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d6:	d115      	bne.n	8004804 <HAL_RCC_OscConfig+0x280>
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a02      	ldr	r2, [pc, #8]	; (80047f4 <HAL_RCC_OscConfig+0x270>)
 80047ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e014      	b.n	800481c <HAL_RCC_OscConfig+0x298>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	0800f990 	.word	0x0800f990
 80047fc:	2000009c 	.word	0x2000009c
 8004800:	200000a0 	.word	0x200000a0
 8004804:	4ba0      	ldr	r3, [pc, #640]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a9f      	ldr	r2, [pc, #636]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 800480a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b9d      	ldr	r3, [pc, #628]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a9c      	ldr	r2, [pc, #624]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d013      	beq.n	800484c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe f880 	bl	8002928 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800482c:	f7fe f87c 	bl	8002928 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e276      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800483e:	4b92      	ldr	r3, [pc, #584]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x2a8>
 800484a:	e014      	b.n	8004876 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fe f86c 	bl	8002928 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe f868 	bl	8002928 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e262      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004866:	4b88      	ldr	r3, [pc, #544]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x2d0>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d060      	beq.n	8004944 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d005      	beq.n	8004894 <HAL_RCC_OscConfig+0x310>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d119      	bne.n	80048c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d116      	bne.n	80048c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004894:	4b7c      	ldr	r3, [pc, #496]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_OscConfig+0x328>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e23f      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ac:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	4973      	ldr	r1, [pc, #460]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c0:	e040      	b.n	8004944 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d023      	beq.n	8004912 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ca:	4b6f      	ldr	r3, [pc, #444]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6e      	ldr	r2, [pc, #440]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80048d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fe f827 	bl	8002928 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7fe f823 	bl	8002928 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e21d      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f0:	4b65      	ldr	r3, [pc, #404]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b62      	ldr	r3, [pc, #392]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	495f      	ldr	r1, [pc, #380]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
 8004910:	e018      	b.n	8004944 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	4b5d      	ldr	r3, [pc, #372]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a5c      	ldr	r2, [pc, #368]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fe f803 	bl	8002928 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004926:	f7fd ffff 	bl	8002928 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1f9      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004938:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f0      	bne.n	8004926 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d03c      	beq.n	80049ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01c      	beq.n	8004992 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004958:	4b4b      	ldr	r3, [pc, #300]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	4a4a      	ldr	r2, [pc, #296]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fd ffde 	bl	8002928 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004970:	f7fd ffda 	bl	8002928 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e1d4      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004982:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ef      	beq.n	8004970 <HAL_RCC_OscConfig+0x3ec>
 8004990:	e01b      	b.n	80049ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004992:	4b3d      	ldr	r3, [pc, #244]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004998:	4a3b      	ldr	r2, [pc, #236]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 800499a:	f023 0301 	bic.w	r3, r3, #1
 800499e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a2:	f7fd ffc1 	bl	8002928 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049aa:	f7fd ffbd 	bl	8002928 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1b7      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049bc:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80049be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ef      	bne.n	80049aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80a6 	beq.w	8004b24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049dc:	4b2a      	ldr	r3, [pc, #168]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e8:	4b27      	ldr	r3, [pc, #156]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f2:	6593      	str	r3, [r2, #88]	; 0x58
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a00:	2301      	movs	r3, #1
 8004a02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RCC_OscConfig+0x508>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d118      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a10:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <HAL_RCC_OscConfig+0x508>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_RCC_OscConfig+0x508>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1c:	f7fd ff84 	bl	8002928 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fd ff80 	bl	8002928 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e17a      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <HAL_RCC_OscConfig+0x508>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d108      	bne.n	8004a5c <HAL_RCC_OscConfig+0x4d8>
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	4a0d      	ldr	r2, [pc, #52]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a5a:	e029      	b.n	8004ab0 <HAL_RCC_OscConfig+0x52c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d115      	bne.n	8004a90 <HAL_RCC_OscConfig+0x50c>
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	4a03      	ldr	r2, [pc, #12]	; (8004a88 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a84:	e014      	b.n	8004ab0 <HAL_RCC_OscConfig+0x52c>
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	4b9c      	ldr	r3, [pc, #624]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	4a9b      	ldr	r2, [pc, #620]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa0:	4b98      	ldr	r3, [pc, #608]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	4a97      	ldr	r2, [pc, #604]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d016      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd ff36 	bl	8002928 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fd ff32 	bl	8002928 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e12a      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad6:	4b8b      	ldr	r3, [pc, #556]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ed      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x53c>
 8004ae4:	e015      	b.n	8004b12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae6:	f7fd ff1f 	bl	8002928 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7fd ff1b 	bl	8002928 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e113      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b04:	4b7f      	ldr	r3, [pc, #508]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ed      	bne.n	8004aee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b12:	7ffb      	ldrb	r3, [r7, #31]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b18:	4b7a      	ldr	r3, [pc, #488]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	4a79      	ldr	r2, [pc, #484]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80fe 	beq.w	8004d2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	f040 80d0 	bne.w	8004cd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b38:	4b72      	ldr	r3, [pc, #456]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f003 0203 	and.w	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d130      	bne.n	8004bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	3b01      	subs	r3, #1
 8004b58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d127      	bne.n	8004bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d11f      	bne.n	8004bae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b78:	2a07      	cmp	r2, #7
 8004b7a:	bf14      	ite	ne
 8004b7c:	2201      	movne	r2, #1
 8004b7e:	2200      	moveq	r2, #0
 8004b80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d113      	bne.n	8004bae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d06e      	beq.n	8004c8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d069      	beq.n	8004c88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bb4:	4b53      	ldr	r3, [pc, #332]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d105      	bne.n	8004bcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bc0:	4b50      	ldr	r3, [pc, #320]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0ad      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b4c      	ldr	r3, [pc, #304]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a4b      	ldr	r2, [pc, #300]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bdc:	f7fd fea4 	bl	8002928 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fd fea0 	bl	8002928 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e09a      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <HAL_RCC_OscConfig+0x784>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c12:	3a01      	subs	r2, #1
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	4311      	orrs	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c1c:	0212      	lsls	r2, r2, #8
 8004c1e:	4311      	orrs	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	3a01      	subs	r2, #1
 8004c28:	0552      	lsls	r2, r2, #21
 8004c2a:	4311      	orrs	r1, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c30:	0852      	lsrs	r2, r2, #1
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0652      	lsls	r2, r2, #25
 8004c36:	4311      	orrs	r1, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3c:	0912      	lsrs	r2, r2, #4
 8004c3e:	0452      	lsls	r2, r2, #17
 8004c40:	430a      	orrs	r2, r1
 8004c42:	4930      	ldr	r1, [pc, #192]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c48:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c54:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4a2a      	ldr	r2, [pc, #168]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c60:	f7fd fe62 	bl	8002928 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fd fe5e 	bl	8002928 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e058      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c86:	e050      	b.n	8004d2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e04f      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d148      	bne.n	8004d2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cb0:	f7fd fe3a 	bl	8002928 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fd fe36 	bl	8002928 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e030      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x734>
 8004cd6:	e028      	b.n	8004d2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d023      	beq.n	8004d26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <HAL_RCC_OscConfig+0x780>)
 8004ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fd fe1d 	bl	8002928 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf0:	e00c      	b.n	8004d0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fd fe19 	bl	8002928 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d905      	bls.n	8004d0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e013      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x7b0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ec      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_RCC_OscConfig+0x7b0>)
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4905      	ldr	r1, [pc, #20]	; (8004d34 <HAL_RCC_OscConfig+0x7b0>)
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_OscConfig+0x7b4>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
 8004d24:	e001      	b.n	8004d2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	feeefffc 	.word	0xfeeefffc

08004d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0e7      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d50:	4b75      	ldr	r3, [pc, #468]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d910      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b72      	ldr	r3, [pc, #456]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 0207 	bic.w	r2, r3, #7
 8004d66:	4970      	ldr	r1, [pc, #448]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0cf      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	4b66      	ldr	r3, [pc, #408]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d908      	bls.n	8004dae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d9c:	4b63      	ldr	r3, [pc, #396]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4960      	ldr	r1, [pc, #384]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d04c      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc2:	4b5a      	ldr	r3, [pc, #360]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d121      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0a6      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dda:	4b54      	ldr	r3, [pc, #336]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d115      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e09a      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df2:	4b4e      	ldr	r3, [pc, #312]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e08e      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e02:	4b4a      	ldr	r3, [pc, #296]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e086      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4943      	ldr	r1, [pc, #268]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e24:	f7fd fd80 	bl	8002928 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fd fd7c 	bl	8002928 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e06e      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d208      	bcs.n	8004e82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e70:	4b2e      	ldr	r3, [pc, #184]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	492b      	ldr	r1, [pc, #172]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d210      	bcs.n	8004eb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f023 0207 	bic.w	r2, r3, #7
 8004e98:	4923      	ldr	r1, [pc, #140]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea0:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e036      	b.n	8004f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	4918      	ldr	r1, [pc, #96]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4910      	ldr	r1, [pc, #64]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ef0:	f000 f824 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	490b      	ldr	r1, [pc, #44]	; (8004f30 <HAL_RCC_ClockConfig+0x1f4>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1f8>)
 8004f0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1fc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fd fcb7 	bl	8002888 <HAL_InitTick>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40022000 	.word	0x40022000
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	0800f990 	.word	0x0800f990
 8004f34:	2000009c 	.word	0x2000009c
 8004f38:	200000a0 	.word	0x200000a0

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f54:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x34>
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d121      	bne.n	8004fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d11e      	bne.n	8004fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f70:	4b34      	ldr	r3, [pc, #208]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f7c:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e005      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f8c:	4b2d      	ldr	r3, [pc, #180]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f98:	4a2b      	ldr	r2, [pc, #172]	; (8005048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fc0:	4b23      	ldr	r3, [pc, #140]	; (8005050 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	d134      	bne.n	8005034 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fca:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0xac>
 8004fe0:	e005      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	; (800504c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fe4:	617b      	str	r3, [r7, #20]
      break;
 8004fe6:	e005      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fe8:	4b19      	ldr	r3, [pc, #100]	; (8005050 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fea:	617b      	str	r3, [r7, #20]
      break;
 8004fec:	e002      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	617b      	str	r3, [r7, #20]
      break;
 8004ff2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	3301      	adds	r3, #1
 8005000:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	fb03 f202 	mul.w	r2, r3, r2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_RCC_GetSysClockFreq+0x108>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	0e5b      	lsrs	r3, r3, #25
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	3301      	adds	r3, #1
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005034:	69bb      	ldr	r3, [r7, #24]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	0800f9a8 	.word	0x0800f9a8
 800504c:	00f42400 	.word	0x00f42400
 8005050:	007a1200 	.word	0x007a1200

08005054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_RCC_GetHCLKFreq+0x14>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	2000009c 	.word	0x2000009c

0800506c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005070:	f7ff fff0 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4904      	ldr	r1, [pc, #16]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	0800f9a0 	.word	0x0800f9a0

08005098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800509c:	f7ff ffda 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0adb      	lsrs	r3, r3, #11
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4904      	ldr	r1, [pc, #16]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40021000 	.word	0x40021000
 80050c0:	0800f9a0 	.word	0x0800f9a0

080050c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050d0:	4b2a      	ldr	r3, [pc, #168]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050dc:	f7ff f922 	bl	8004324 <HAL_PWREx_GetVoltageRange>
 80050e0:	6178      	str	r0, [r7, #20]
 80050e2:	e014      	b.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	4a24      	ldr	r2, [pc, #144]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6593      	str	r3, [r2, #88]	; 0x58
 80050f0:	4b22      	ldr	r3, [pc, #136]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050fc:	f7ff f912 	bl	8004324 <HAL_PWREx_GetVoltageRange>
 8005100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d10b      	bne.n	800512e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d919      	bls.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2ba0      	cmp	r3, #160	; 0xa0
 8005120:	d902      	bls.n	8005128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005122:	2302      	movs	r3, #2
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e013      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005128:	2301      	movs	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e010      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d902      	bls.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005134:	2303      	movs	r3, #3
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e00a      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d102      	bne.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005140:	2302      	movs	r3, #2
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	e004      	b.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d101      	bne.n	8005150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800514c:	2301      	movs	r3, #1
 800514e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 0207 	bic.w	r2, r3, #7
 8005158:	4909      	ldr	r1, [pc, #36]	; (8005180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	429a      	cmp	r2, r3
 800516c:	d001      	beq.n	8005172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40021000 	.word	0x40021000
 8005180:	40022000 	.word	0x40022000

08005184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800518c:	2300      	movs	r3, #0
 800518e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005190:	2300      	movs	r3, #0
 8005192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800519c:	2b00      	cmp	r3, #0
 800519e:	d041      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051a8:	d02a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051ae:	d824      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051b4:	d008      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ba:	d81e      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c4:	d010      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051c6:	e018      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c8:	4b86      	ldr	r3, [pc, #536]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a85      	ldr	r2, [pc, #532]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051d4:	e015      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 facb 	bl	8005778 <RCCEx_PLLSAI1_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e6:	e00c      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3320      	adds	r3, #32
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fbb6 	bl	8005960 <RCCEx_PLLSAI2_Config>
 80051f4:	4603      	mov	r3, r0
 80051f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f8:	e003      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	74fb      	strb	r3, [r7, #19]
      break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005208:	4b76      	ldr	r3, [pc, #472]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005216:	4973      	ldr	r1, [pc, #460]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800521e:	e001      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	7cfb      	ldrb	r3, [r7, #19]
 8005222:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d041      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005234:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005238:	d02a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800523a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800523e:	d824      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005244:	d008      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800524a:	d81e      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005254:	d010      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005256:	e018      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005258:	4b62      	ldr	r3, [pc, #392]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a61      	ldr	r2, [pc, #388]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005262:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005264:	e015      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fa83 	bl	8005778 <RCCEx_PLLSAI1_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005276:	e00c      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3320      	adds	r3, #32
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb6e 	bl	8005960 <RCCEx_PLLSAI2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005288:	e003      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	74fb      	strb	r3, [r7, #19]
      break;
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005298:	4b52      	ldr	r3, [pc, #328]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a6:	494f      	ldr	r1, [pc, #316]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80a0 	beq.w	8005402 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052c6:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052dc:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e0:	4a40      	ldr	r2, [pc, #256]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6593      	str	r3, [r2, #88]	; 0x58
 80052e8:	4b3e      	ldr	r3, [pc, #248]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f4:	2301      	movs	r3, #1
 80052f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f8:	4b3b      	ldr	r3, [pc, #236]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3a      	ldr	r2, [pc, #232]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005304:	f7fd fb10 	bl	8002928 <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800530a:	e009      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530c:	f7fd fb0c 	bl	8002928 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d902      	bls.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	74fb      	strb	r3, [r7, #19]
        break;
 800531e:	e005      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005320:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ef      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d15c      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005332:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01f      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	429a      	cmp	r2, r3
 800534e:	d019      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800535c:	4b21      	ldr	r3, [pc, #132]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800537c:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fd facb 	bl	8002928 <HAL_GetTick>
 8005392:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005394:	e00b      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fd fac7 	bl	8002928 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d902      	bls.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	74fb      	strb	r3, [r7, #19]
            break;
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0ec      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d2:	4904      	ldr	r1, [pc, #16]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053da:	e009      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
 80053e0:	e006      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f0:	7c7b      	ldrb	r3, [r7, #17]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f6:	4b9e      	ldr	r3, [pc, #632]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	4a9d      	ldr	r2, [pc, #628]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800540e:	4b98      	ldr	r3, [pc, #608]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f023 0203 	bic.w	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	4994      	ldr	r1, [pc, #592]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005430:	4b8f      	ldr	r3, [pc, #572]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f023 020c 	bic.w	r2, r3, #12
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	498c      	ldr	r1, [pc, #560]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005452:	4b87      	ldr	r3, [pc, #540]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	4983      	ldr	r1, [pc, #524]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005474:	4b7e      	ldr	r3, [pc, #504]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	497b      	ldr	r1, [pc, #492]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005496:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a4:	4972      	ldr	r1, [pc, #456]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b8:	4b6d      	ldr	r3, [pc, #436]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	496a      	ldr	r1, [pc, #424]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054da:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	4961      	ldr	r1, [pc, #388]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054fc:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550a:	4959      	ldr	r1, [pc, #356]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800551e:	4b54      	ldr	r3, [pc, #336]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	4950      	ldr	r1, [pc, #320]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005540:	4b4b      	ldr	r3, [pc, #300]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	4948      	ldr	r1, [pc, #288]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005562:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	493f      	ldr	r1, [pc, #252]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d028      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005584:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005592:	4937      	ldr	r1, [pc, #220]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800559e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a2:	d106      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a31      	ldr	r2, [pc, #196]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ae:	60d3      	str	r3, [r2, #12]
 80055b0:	e011      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ba:	d10c      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f8d8 	bl	8005778 <RCCEx_PLLSAI1_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d028      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055e2:	4b23      	ldr	r3, [pc, #140]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	491f      	ldr	r1, [pc, #124]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005600:	d106      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005602:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560c:	60d3      	str	r3, [r2, #12]
 800560e:	e011      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005618:	d10c      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2101      	movs	r1, #1
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f8a9 	bl	8005778 <RCCEx_PLLSAI1_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005630:	7cfb      	ldrb	r3, [r7, #19]
 8005632:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d109      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a02      	ldr	r2, [pc, #8]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566a:	60d3      	str	r3, [r2, #12]
 800566c:	e014      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567c:	d10c      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3304      	adds	r3, #4
 8005682:	2101      	movs	r1, #1
 8005684:	4618      	mov	r0, r3
 8005686:	f000 f877 	bl	8005778 <RCCEx_PLLSAI1_Config>
 800568a:	4603      	mov	r3, r0
 800568c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02f      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b2:	4928      	ldr	r1, [pc, #160]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c2:	d10d      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f854 	bl	8005778 <RCCEx_PLLSAI1_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d014      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	74bb      	strb	r3, [r7, #18]
 80056de:	e011      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3320      	adds	r3, #32
 80056ee:	2102      	movs	r1, #2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f935 	bl	8005960 <RCCEx_PLLSAI2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056fa:	7cfb      	ldrb	r3, [r7, #19]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005716:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800571e:	490d      	ldr	r1, [pc, #52]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005742:	4904      	ldr	r1, [pc, #16]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800574a:	7cbb      	ldrb	r3, [r7, #18]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000

08005758 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a04      	ldr	r2, [pc, #16]	; (8005774 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005762:	f043 0304 	orr.w	r3, r3, #4
 8005766:	6013      	str	r3, [r2, #0]
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000

08005778 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005786:	4b75      	ldr	r3, [pc, #468]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005792:	4b72      	ldr	r3, [pc, #456]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d10d      	bne.n	80057be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
       ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057aa:	4b6c      	ldr	r3, [pc, #432]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	091b      	lsrs	r3, r3, #4
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
       ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d047      	beq.n	800584e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
 80057c2:	e044      	b.n	800584e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d018      	beq.n	80057fe <RCCEx_PLLSAI1_Config+0x86>
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d825      	bhi.n	800581c <RCCEx_PLLSAI1_Config+0xa4>
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d002      	beq.n	80057da <RCCEx_PLLSAI1_Config+0x62>
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d009      	beq.n	80057ec <RCCEx_PLLSAI1_Config+0x74>
 80057d8:	e020      	b.n	800581c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057da:	4b60      	ldr	r3, [pc, #384]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11d      	bne.n	8005822 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ea:	e01a      	b.n	8005822 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057ec:	4b5b      	ldr	r3, [pc, #364]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d116      	bne.n	8005826 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057fc:	e013      	b.n	8005826 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057fe:	4b57      	ldr	r3, [pc, #348]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800580a:	4b54      	ldr	r3, [pc, #336]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800581a:	e006      	b.n	800582a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e004      	b.n	800582c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005822:	bf00      	nop
 8005824:	e002      	b.n	800582c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800582a:	bf00      	nop
    }

    if(status == HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005832:	4b4a      	ldr	r3, [pc, #296]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	3b01      	subs	r3, #1
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	430b      	orrs	r3, r1
 8005848:	4944      	ldr	r1, [pc, #272]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d17d      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005854:	4b41      	ldr	r3, [pc, #260]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a40      	ldr	r2, [pc, #256]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800585a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800585e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005860:	f7fd f862 	bl	8002928 <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005866:	e009      	b.n	800587c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005868:	f7fd f85e 	bl	8002928 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	73fb      	strb	r3, [r7, #15]
        break;
 800587a:	e005      	b.n	8005888 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800587c:	4b37      	ldr	r3, [pc, #220]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ef      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d160      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d111      	bne.n	80058b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005894:	4b31      	ldr	r3, [pc, #196]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800589c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	0211      	lsls	r1, r2, #8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68d2      	ldr	r2, [r2, #12]
 80058aa:	0912      	lsrs	r2, r2, #4
 80058ac:	0452      	lsls	r2, r2, #17
 80058ae:	430a      	orrs	r2, r1
 80058b0:	492a      	ldr	r1, [pc, #168]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	610b      	str	r3, [r1, #16]
 80058b6:	e027      	b.n	8005908 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d112      	bne.n	80058e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058be:	4b27      	ldr	r3, [pc, #156]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6892      	ldr	r2, [r2, #8]
 80058ce:	0211      	lsls	r1, r2, #8
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6912      	ldr	r2, [r2, #16]
 80058d4:	0852      	lsrs	r2, r2, #1
 80058d6:	3a01      	subs	r2, #1
 80058d8:	0552      	lsls	r2, r2, #21
 80058da:	430a      	orrs	r2, r1
 80058dc:	491f      	ldr	r1, [pc, #124]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	610b      	str	r3, [r1, #16]
 80058e2:	e011      	b.n	8005908 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6892      	ldr	r2, [r2, #8]
 80058f4:	0211      	lsls	r1, r2, #8
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6952      	ldr	r2, [r2, #20]
 80058fa:	0852      	lsrs	r2, r2, #1
 80058fc:	3a01      	subs	r2, #1
 80058fe:	0652      	lsls	r2, r2, #25
 8005900:	430a      	orrs	r2, r1
 8005902:	4916      	ldr	r1, [pc, #88]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005904:	4313      	orrs	r3, r2
 8005906:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005908:	4b14      	ldr	r3, [pc, #80]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a13      	ldr	r2, [pc, #76]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800590e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005912:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7fd f808 	bl	8002928 <HAL_GetTick>
 8005918:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800591a:	e009      	b.n	8005930 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800591c:	f7fd f804 	bl	8002928 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d902      	bls.n	8005930 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	73fb      	strb	r3, [r7, #15]
          break;
 800592e:	e005      	b.n	800593c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0ef      	beq.n	800591c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	4904      	ldr	r1, [pc, #16]	; (800595c <RCCEx_PLLSAI1_Config+0x1e4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000

08005960 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800596e:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800597a:	4b67      	ldr	r3, [pc, #412]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0203 	and.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d10d      	bne.n	80059a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
       ||
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005992:	4b61      	ldr	r3, [pc, #388]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
       ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d047      	beq.n	8005a36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
 80059aa:	e044      	b.n	8005a36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d018      	beq.n	80059e6 <RCCEx_PLLSAI2_Config+0x86>
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d825      	bhi.n	8005a04 <RCCEx_PLLSAI2_Config+0xa4>
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d002      	beq.n	80059c2 <RCCEx_PLLSAI2_Config+0x62>
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d009      	beq.n	80059d4 <RCCEx_PLLSAI2_Config+0x74>
 80059c0:	e020      	b.n	8005a04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059c2:	4b55      	ldr	r3, [pc, #340]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11d      	bne.n	8005a0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d2:	e01a      	b.n	8005a0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d116      	bne.n	8005a0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e4:	e013      	b.n	8005a0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059e6:	4b4c      	ldr	r3, [pc, #304]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059f2:	4b49      	ldr	r3, [pc, #292]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a02:	e006      	b.n	8005a12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
      break;
 8005a08:	e004      	b.n	8005a14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10d      	bne.n	8005a36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a1a:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	4939      	ldr	r1, [pc, #228]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d167      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a3c:	4b36      	ldr	r3, [pc, #216]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a35      	ldr	r2, [pc, #212]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a48:	f7fc ff6e 	bl	8002928 <HAL_GetTick>
 8005a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a4e:	e009      	b.n	8005a64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a50:	f7fc ff6a 	bl	8002928 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d902      	bls.n	8005a64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	73fb      	strb	r3, [r7, #15]
        break;
 8005a62:	e005      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a64:	4b2c      	ldr	r3, [pc, #176]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1ef      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d14a      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d111      	bne.n	8005aa0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a7c:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	0211      	lsls	r1, r2, #8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68d2      	ldr	r2, [r2, #12]
 8005a92:	0912      	lsrs	r2, r2, #4
 8005a94:	0452      	lsls	r2, r2, #17
 8005a96:	430a      	orrs	r2, r1
 8005a98:	491f      	ldr	r1, [pc, #124]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	614b      	str	r3, [r1, #20]
 8005a9e:	e011      	b.n	8005ac4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aa0:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005aa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6892      	ldr	r2, [r2, #8]
 8005ab0:	0211      	lsls	r1, r2, #8
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6912      	ldr	r2, [r2, #16]
 8005ab6:	0852      	lsrs	r2, r2, #1
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0652      	lsls	r2, r2, #25
 8005abc:	430a      	orrs	r2, r1
 8005abe:	4916      	ldr	r1, [pc, #88]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad0:	f7fc ff2a 	bl	8002928 <HAL_GetTick>
 8005ad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ad6:	e009      	b.n	8005aec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ad8:	f7fc ff26 	bl	8002928 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d902      	bls.n	8005aec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	73fb      	strb	r3, [r7, #15]
          break;
 8005aea:	e005      	b.n	8005af8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0ef      	beq.n	8005ad8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	4904      	ldr	r1, [pc, #16]	; (8005b18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000

08005b1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d079      	beq.n	8005c22 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc fb92 	bl	800226c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d058      	beq.n	8005c10 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	22ca      	movs	r2, #202	; 0xca
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2253      	movs	r2, #83	; 0x53
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa4e 	bl	8006010 <RTC_EnterInitMode>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d127      	bne.n	8005bce <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68d2      	ldr	r2, [r2, #12]
 8005bb8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6919      	ldr	r1, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	041a      	lsls	r2, r3, #16
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa52 	bl	8006078 <RTC_ExitInitMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d113      	bne.n	8005c06 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0203 	bic.w	r2, r2, #3
 8005bec:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	22ff      	movs	r2, #255	; 0xff
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c0e:	e001      	b.n	8005c14 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_RTC_SetTime+0x1a>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e08b      	b.n	8005d5e <HAL_RTC_SetTime+0x132>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	22ca      	movs	r2, #202	; 0xca
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2253      	movs	r2, #83	; 0x53
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f9d2 	bl	8006010 <RTC_EnterInitMode>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d163      	bne.n	8005d3e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d126      	bne.n	8005cca <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fa2d 	bl	80060f4 <RTC_ByteToBcd2>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa26 	bl	80060f4 <RTC_ByteToBcd2>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	789b      	ldrb	r3, [r3, #2]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fa1e 	bl	80060f4 <RTC_ByteToBcd2>
 8005cb8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	78db      	ldrb	r3, [r3, #3]
 8005cc2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e018      	b.n	8005cfc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cf0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6899      	ldr	r1, [r3, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f99f 	bl	8006078 <RTC_ExitInitMode>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	22ff      	movs	r2, #255	; 0xff
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005d5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}

08005d66 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	0d9b      	lsrs	r3, r3, #22
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11a      	bne.n	8005e14 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f9a6 	bl	8006134 <RTC_Bcd2ToByte>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f99d 	bl	8006134 <RTC_Bcd2ToByte>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	789b      	ldrb	r3, [r3, #2]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f994 	bl	8006134 <RTC_Bcd2ToByte>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e1e:	b590      	push	{r4, r7, lr}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_RTC_SetDate+0x1a>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e075      	b.n	8005f24 <HAL_RTC_SetDate+0x106>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10e      	bne.n	8005e6c <HAL_RTC_SetDate+0x4e>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	330a      	adds	r3, #10
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d11c      	bne.n	8005eac <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f93c 	bl	80060f4 <RTC_ByteToBcd2>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f935 	bl	80060f4 <RTC_ByteToBcd2>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005e8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f92d 	bl	80060f4 <RTC_ByteToBcd2>
 8005e9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	e00e      	b.n	8005eca <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005eb8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ebe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	22ca      	movs	r2, #202	; 0xca
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2253      	movs	r2, #83	; 0x53
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f898 	bl	8006010 <RTC_EnterInitMode>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10c      	bne.n	8005f04 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ef4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ef8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f8bc 	bl	8006078 <RTC_ExitInitMode>
 8005f00:	4603      	mov	r3, r0
 8005f02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	22ff      	movs	r2, #255	; 0xff
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005f0c:	7cfb      	ldrb	r3, [r7, #19]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005f22:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd90      	pop	{r4, r7, pc}

08005f2c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	0b5b      	lsrs	r3, r3, #13
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11a      	bne.n	8005fbc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	78db      	ldrb	r3, [r3, #3]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 f8d2 	bl	8006134 <RTC_Bcd2ToByte>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 f8c9 	bl	8006134 <RTC_Bcd2ToByte>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	789b      	ldrb	r3, [r3, #2]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 f8c0 	bl	8006134 <RTC_Bcd2ToByte>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <HAL_RTC_WaitForSynchro+0x44>)
 8005fd6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005fd8:	f7fc fca6 	bl	8002928 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fde:	e009      	b.n	8005ff4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fe0:	f7fc fca2 	bl	8002928 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fee:	d901      	bls.n	8005ff4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e007      	b.n	8006004 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0ee      	beq.n	8005fe0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	0003ff5f 	.word	0x0003ff5f

08006010 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d120      	bne.n	800606c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f04f 32ff 	mov.w	r2, #4294967295
 8006032:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006034:	f7fc fc78 	bl	8002928 <HAL_GetTick>
 8006038:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800603a:	e00d      	b.n	8006058 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800603c:	f7fc fc74 	bl	8002928 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604a:	d905      	bls.n	8006058 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2203      	movs	r2, #3
 8006054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <RTC_EnterInitMode+0x5c>
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d1e7      	bne.n	800603c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <RTC_ExitInitMode+0x78>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <RTC_ExitInitMode+0x78>)
 800608a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <RTC_ExitInitMode+0x78>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10c      	bne.n	80060b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ff93 	bl	8005fc8 <HAL_RTC_WaitForSynchro>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01e      	beq.n	80060e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2203      	movs	r2, #3
 80060ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e017      	b.n	80060e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <RTC_ExitInitMode+0x78>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <RTC_ExitInitMode+0x78>)
 80060bc:	f023 0320 	bic.w	r3, r3, #32
 80060c0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff80 	bl	8005fc8 <HAL_RTC_WaitForSynchro>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2203      	movs	r2, #3
 80060d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <RTC_ExitInitMode+0x78>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4a04      	ldr	r2, [pc, #16]	; (80060f0 <RTC_ExitInitMode+0x78>)
 80060e0:	f043 0320 	orr.w	r3, r3, #32
 80060e4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40002800 	.word	0x40002800

080060f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006106:	e005      	b.n	8006114 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	3b0a      	subs	r3, #10
 8006112:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006114:	7afb      	ldrb	r3, [r7, #11]
 8006116:	2b09      	cmp	r3, #9
 8006118:	d8f6      	bhi.n	8006108 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	b2da      	uxtb	r2, r3
 8006122:	7afb      	ldrb	r3, [r7, #11]
 8006124:	4313      	orrs	r3, r2
 8006126:	b2db      	uxtb	r3, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	4413      	add	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	b2da      	uxtb	r2, r3
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	4413      	add	r3, r2
 800615a:	b2db      	uxtb	r3, r3
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e095      	b.n	80062a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800618a:	d009      	beq.n	80061a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	61da      	str	r2, [r3, #28]
 8006192:	e005      	b.n	80061a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fc f888 	bl	80022d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e0:	d902      	bls.n	80061e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e002      	b.n	80061ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061f6:	d007      	beq.n	8006208 <HAL_SPI_Init+0xa0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006200:	d002      	beq.n	8006208 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	ea42 0103 	orr.w	r1, r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	f003 0204 	and.w	r2, r3, #4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006284:	ea42 0103 	orr.w	r1, r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10e      	bne.n	80062f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
    return;
 80062ee:	e0ce      	b.n	800648e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_SPI_IRQHandler+0x5e>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
    return;
 800630c:	e0bf      	b.n	800648e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <HAL_SPI_IRQHandler+0x7e>
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80b0 	beq.w	800648e <HAL_SPI_IRQHandler+0x1de>
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80aa 	beq.w	800648e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d023      	beq.n	800638c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d011      	beq.n	8006374 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006354:	f043 0204 	orr.w	r2, r3, #4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	e00b      	b.n	800638c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	693b      	ldr	r3, [r7, #16]
        return;
 800638a:	e080      	b.n	800648e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d014      	beq.n	80063c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639a:	f043 0201 	orr.w	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ce:	f043 0208 	orr.w	r2, r3, #8
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063d6:	2300      	movs	r3, #0
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d04f      	beq.n	800648c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <HAL_SPI_IRQHandler+0x168>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d034      	beq.n	8006482 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0203 	bic.w	r2, r2, #3
 8006426:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642c:	2b00      	cmp	r3, #0
 800642e:	d011      	beq.n	8006454 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	4a17      	ldr	r2, [pc, #92]	; (8006494 <HAL_SPI_IRQHandler+0x1e4>)
 8006436:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	4618      	mov	r0, r3
 800643e:	f7fc fcc1 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006458:	2b00      	cmp	r3, #0
 800645a:	d016      	beq.n	800648a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <HAL_SPI_IRQHandler+0x1e4>)
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	4618      	mov	r0, r3
 800646a:	f7fc fcab 	bl	8002dc4 <HAL_DMA_Abort_IT>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006480:	e003      	b.n	800648a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f808 	bl	8006498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006488:	e000      	b.n	800648c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800648a:	bf00      	nop
    return;
 800648c:	bf00      	nop
  }
}
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	080064ad 	.word	0x080064ad

08006498 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff ffe5 	bl	8006498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e040      	b.n	800656a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fb ff35 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2224      	movs	r2, #36	; 0x24
 8006502:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fb6b 	bl	8006bf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8b0 	bl	8006688 <UART_SetConfig>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e01b      	b.n	800656a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006540:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006550:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fbea 	bl	8006d3c <UART_CheckIdleState>
 8006568:	4603      	mov	r3, r0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b08a      	sub	sp, #40	; 0x28
 8006576:	af02      	add	r7, sp, #8
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006586:	2b20      	cmp	r3, #32
 8006588:	d178      	bne.n	800667c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_UART_Transmit+0x24>
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e071      	b.n	800667e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2221      	movs	r2, #33	; 0x21
 80065a6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065a8:	f7fc f9be 	bl	8002928 <HAL_GetTick>
 80065ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	d108      	bne.n	80065da <HAL_UART_Transmit+0x68>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e003      	b.n	80065e2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065e2:	e030      	b.n	8006646 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	2180      	movs	r1, #128	; 0x80
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fc4c 	bl	8006e8c <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e03c      	b.n	800667e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006616:	b292      	uxth	r2, r2
 8006618:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	3302      	adds	r3, #2
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	e008      	b.n	8006634 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	b292      	uxth	r2, r2
 800662c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	3301      	adds	r3, #1
 8006632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1c8      	bne.n	80065e4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fc15 	bl	8006e8c <UART_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e005      	b.n	800667e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	e000      	b.n	800667e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800668c:	b08a      	sub	sp, #40	; 0x28
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4ba4      	ldr	r3, [pc, #656]	; (8006948 <UART_SetConfig+0x2c0>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a99      	ldr	r2, [pc, #612]	; (800694c <UART_SetConfig+0x2c4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d004      	beq.n	80066f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f0:	4313      	orrs	r3, r2
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006704:	430a      	orrs	r2, r1
 8006706:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a90      	ldr	r2, [pc, #576]	; (8006950 <UART_SetConfig+0x2c8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d126      	bne.n	8006760 <UART_SetConfig+0xd8>
 8006712:	4b90      	ldr	r3, [pc, #576]	; (8006954 <UART_SetConfig+0x2cc>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	2b03      	cmp	r3, #3
 800671e:	d81b      	bhi.n	8006758 <UART_SetConfig+0xd0>
 8006720:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0xa0>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	08006739 	.word	0x08006739
 800672c:	08006749 	.word	0x08006749
 8006730:	08006741 	.word	0x08006741
 8006734:	08006751 	.word	0x08006751
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e116      	b.n	800696e <UART_SetConfig+0x2e6>
 8006740:	2302      	movs	r3, #2
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e112      	b.n	800696e <UART_SetConfig+0x2e6>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e10e      	b.n	800696e <UART_SetConfig+0x2e6>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006756:	e10a      	b.n	800696e <UART_SetConfig+0x2e6>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675e:	e106      	b.n	800696e <UART_SetConfig+0x2e6>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a7c      	ldr	r2, [pc, #496]	; (8006958 <UART_SetConfig+0x2d0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d138      	bne.n	80067dc <UART_SetConfig+0x154>
 800676a:	4b7a      	ldr	r3, [pc, #488]	; (8006954 <UART_SetConfig+0x2cc>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f003 030c 	and.w	r3, r3, #12
 8006774:	2b0c      	cmp	r3, #12
 8006776:	d82d      	bhi.n	80067d4 <UART_SetConfig+0x14c>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0xf8>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067b5 	.word	0x080067b5
 8006784:	080067d5 	.word	0x080067d5
 8006788:	080067d5 	.word	0x080067d5
 800678c:	080067d5 	.word	0x080067d5
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067d5 	.word	0x080067d5
 800679c:	080067d5 	.word	0x080067d5
 80067a0:	080067bd 	.word	0x080067bd
 80067a4:	080067d5 	.word	0x080067d5
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ba:	e0d8      	b.n	800696e <UART_SetConfig+0x2e6>
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c2:	e0d4      	b.n	800696e <UART_SetConfig+0x2e6>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ca:	e0d0      	b.n	800696e <UART_SetConfig+0x2e6>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d2:	e0cc      	b.n	800696e <UART_SetConfig+0x2e6>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e0c8      	b.n	800696e <UART_SetConfig+0x2e6>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5e      	ldr	r2, [pc, #376]	; (800695c <UART_SetConfig+0x2d4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d125      	bne.n	8006832 <UART_SetConfig+0x1aa>
 80067e6:	4b5b      	ldr	r3, [pc, #364]	; (8006954 <UART_SetConfig+0x2cc>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067f0:	2b30      	cmp	r3, #48	; 0x30
 80067f2:	d016      	beq.n	8006822 <UART_SetConfig+0x19a>
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d818      	bhi.n	800682a <UART_SetConfig+0x1a2>
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	d00a      	beq.n	8006812 <UART_SetConfig+0x18a>
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d814      	bhi.n	800682a <UART_SetConfig+0x1a2>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <UART_SetConfig+0x182>
 8006804:	2b10      	cmp	r3, #16
 8006806:	d008      	beq.n	800681a <UART_SetConfig+0x192>
 8006808:	e00f      	b.n	800682a <UART_SetConfig+0x1a2>
 800680a:	2300      	movs	r3, #0
 800680c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006810:	e0ad      	b.n	800696e <UART_SetConfig+0x2e6>
 8006812:	2302      	movs	r3, #2
 8006814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006818:	e0a9      	b.n	800696e <UART_SetConfig+0x2e6>
 800681a:	2304      	movs	r3, #4
 800681c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006820:	e0a5      	b.n	800696e <UART_SetConfig+0x2e6>
 8006822:	2308      	movs	r3, #8
 8006824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006828:	e0a1      	b.n	800696e <UART_SetConfig+0x2e6>
 800682a:	2310      	movs	r3, #16
 800682c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006830:	e09d      	b.n	800696e <UART_SetConfig+0x2e6>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a4a      	ldr	r2, [pc, #296]	; (8006960 <UART_SetConfig+0x2d8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d125      	bne.n	8006888 <UART_SetConfig+0x200>
 800683c:	4b45      	ldr	r3, [pc, #276]	; (8006954 <UART_SetConfig+0x2cc>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006846:	2bc0      	cmp	r3, #192	; 0xc0
 8006848:	d016      	beq.n	8006878 <UART_SetConfig+0x1f0>
 800684a:	2bc0      	cmp	r3, #192	; 0xc0
 800684c:	d818      	bhi.n	8006880 <UART_SetConfig+0x1f8>
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d00a      	beq.n	8006868 <UART_SetConfig+0x1e0>
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d814      	bhi.n	8006880 <UART_SetConfig+0x1f8>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <UART_SetConfig+0x1d8>
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d008      	beq.n	8006870 <UART_SetConfig+0x1e8>
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x1f8>
 8006860:	2300      	movs	r3, #0
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006866:	e082      	b.n	800696e <UART_SetConfig+0x2e6>
 8006868:	2302      	movs	r3, #2
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686e:	e07e      	b.n	800696e <UART_SetConfig+0x2e6>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e07a      	b.n	800696e <UART_SetConfig+0x2e6>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e076      	b.n	800696e <UART_SetConfig+0x2e6>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006886:	e072      	b.n	800696e <UART_SetConfig+0x2e6>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a35      	ldr	r2, [pc, #212]	; (8006964 <UART_SetConfig+0x2dc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d12a      	bne.n	80068e8 <UART_SetConfig+0x260>
 8006892:	4b30      	ldr	r3, [pc, #192]	; (8006954 <UART_SetConfig+0x2cc>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a0:	d01a      	beq.n	80068d8 <UART_SetConfig+0x250>
 80068a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a6:	d81b      	bhi.n	80068e0 <UART_SetConfig+0x258>
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ac:	d00c      	beq.n	80068c8 <UART_SetConfig+0x240>
 80068ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b2:	d815      	bhi.n	80068e0 <UART_SetConfig+0x258>
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <UART_SetConfig+0x238>
 80068b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068bc:	d008      	beq.n	80068d0 <UART_SetConfig+0x248>
 80068be:	e00f      	b.n	80068e0 <UART_SetConfig+0x258>
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c6:	e052      	b.n	800696e <UART_SetConfig+0x2e6>
 80068c8:	2302      	movs	r3, #2
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ce:	e04e      	b.n	800696e <UART_SetConfig+0x2e6>
 80068d0:	2304      	movs	r3, #4
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d6:	e04a      	b.n	800696e <UART_SetConfig+0x2e6>
 80068d8:	2308      	movs	r3, #8
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e046      	b.n	800696e <UART_SetConfig+0x2e6>
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e042      	b.n	800696e <UART_SetConfig+0x2e6>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a17      	ldr	r2, [pc, #92]	; (800694c <UART_SetConfig+0x2c4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d13a      	bne.n	8006968 <UART_SetConfig+0x2e0>
 80068f2:	4b18      	ldr	r3, [pc, #96]	; (8006954 <UART_SetConfig+0x2cc>)
 80068f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006900:	d01a      	beq.n	8006938 <UART_SetConfig+0x2b0>
 8006902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006906:	d81b      	bhi.n	8006940 <UART_SetConfig+0x2b8>
 8006908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690c:	d00c      	beq.n	8006928 <UART_SetConfig+0x2a0>
 800690e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006912:	d815      	bhi.n	8006940 <UART_SetConfig+0x2b8>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <UART_SetConfig+0x298>
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691c:	d008      	beq.n	8006930 <UART_SetConfig+0x2a8>
 800691e:	e00f      	b.n	8006940 <UART_SetConfig+0x2b8>
 8006920:	2300      	movs	r3, #0
 8006922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006926:	e022      	b.n	800696e <UART_SetConfig+0x2e6>
 8006928:	2302      	movs	r3, #2
 800692a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692e:	e01e      	b.n	800696e <UART_SetConfig+0x2e6>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e01a      	b.n	800696e <UART_SetConfig+0x2e6>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e016      	b.n	800696e <UART_SetConfig+0x2e6>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e012      	b.n	800696e <UART_SetConfig+0x2e6>
 8006948:	efff69f3 	.word	0xefff69f3
 800694c:	40008000 	.word	0x40008000
 8006950:	40013800 	.word	0x40013800
 8006954:	40021000 	.word	0x40021000
 8006958:	40004400 	.word	0x40004400
 800695c:	40004800 	.word	0x40004800
 8006960:	40004c00 	.word	0x40004c00
 8006964:	40005000 	.word	0x40005000
 8006968:	2310      	movs	r3, #16
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a9f      	ldr	r2, [pc, #636]	; (8006bf0 <UART_SetConfig+0x568>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d17a      	bne.n	8006a6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800697c:	2b08      	cmp	r3, #8
 800697e:	d824      	bhi.n	80069ca <UART_SetConfig+0x342>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <UART_SetConfig+0x300>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069cb 	.word	0x080069cb
 8006990:	080069b5 	.word	0x080069b5
 8006994:	080069cb 	.word	0x080069cb
 8006998:	080069bb 	.word	0x080069bb
 800699c:	080069cb 	.word	0x080069cb
 80069a0:	080069cb 	.word	0x080069cb
 80069a4:	080069cb 	.word	0x080069cb
 80069a8:	080069c3 	.word	0x080069c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069ac:	f7fe fb5e 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 80069b0:	61f8      	str	r0, [r7, #28]
        break;
 80069b2:	e010      	b.n	80069d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b4:	4b8f      	ldr	r3, [pc, #572]	; (8006bf4 <UART_SetConfig+0x56c>)
 80069b6:	61fb      	str	r3, [r7, #28]
        break;
 80069b8:	e00d      	b.n	80069d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fe fabf 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 80069be:	61f8      	str	r0, [r7, #28]
        break;
 80069c0:	e009      	b.n	80069d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c6:	61fb      	str	r3, [r7, #28]
        break;
 80069c8:	e005      	b.n	80069d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80fb 	beq.w	8006bd4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	4413      	add	r3, r2
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d305      	bcc.n	80069fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d903      	bls.n	8006a02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a00:	e0e8      	b.n	8006bd4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2200      	movs	r2, #0
 8006a06:	461c      	mov	r4, r3
 8006a08:	4615      	mov	r5, r2
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	022b      	lsls	r3, r5, #8
 8006a14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a18:	0222      	lsls	r2, r4, #8
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6849      	ldr	r1, [r1, #4]
 8006a1e:	0849      	lsrs	r1, r1, #1
 8006a20:	2000      	movs	r0, #0
 8006a22:	4688      	mov	r8, r1
 8006a24:	4681      	mov	r9, r0
 8006a26:	eb12 0a08 	adds.w	sl, r2, r8
 8006a2a:	eb43 0b09 	adc.w	fp, r3, r9
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	4659      	mov	r1, fp
 8006a40:	f7fa f922 	bl	8000c88 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4613      	mov	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a52:	d308      	bcc.n	8006a66 <UART_SetConfig+0x3de>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a5a:	d204      	bcs.n	8006a66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	60da      	str	r2, [r3, #12]
 8006a64:	e0b6      	b.n	8006bd4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a6c:	e0b2      	b.n	8006bd4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d15e      	bne.n	8006b36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d828      	bhi.n	8006ad2 <UART_SetConfig+0x44a>
 8006a80:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x400>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	08006abd 	.word	0x08006abd
 8006a94:	08006ad3 	.word	0x08006ad3
 8006a98:	08006ac3 	.word	0x08006ac3
 8006a9c:	08006ad3 	.word	0x08006ad3
 8006aa0:	08006ad3 	.word	0x08006ad3
 8006aa4:	08006ad3 	.word	0x08006ad3
 8006aa8:	08006acb 	.word	0x08006acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fe fade 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 8006ab0:	61f8      	str	r0, [r7, #28]
        break;
 8006ab2:	e014      	b.n	8006ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab4:	f7fe faf0 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8006ab8:	61f8      	str	r0, [r7, #28]
        break;
 8006aba:	e010      	b.n	8006ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006abc:	4b4d      	ldr	r3, [pc, #308]	; (8006bf4 <UART_SetConfig+0x56c>)
 8006abe:	61fb      	str	r3, [r7, #28]
        break;
 8006ac0:	e00d      	b.n	8006ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac2:	f7fe fa3b 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8006ac6:	61f8      	str	r0, [r7, #28]
        break;
 8006ac8:	e009      	b.n	8006ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	61fb      	str	r3, [r7, #28]
        break;
 8006ad0:	e005      	b.n	8006ade <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d077      	beq.n	8006bd4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	005a      	lsls	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	441a      	add	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d916      	bls.n	8006b2e <UART_SetConfig+0x4a6>
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b06:	d212      	bcs.n	8006b2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f023 030f 	bic.w	r3, r3, #15
 8006b10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	8afb      	ldrh	r3, [r7, #22]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	8afa      	ldrh	r2, [r7, #22]
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	e052      	b.n	8006bd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b34:	e04e      	b.n	8006bd4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d827      	bhi.n	8006b8e <UART_SetConfig+0x506>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <UART_SetConfig+0x4bc>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	08006b8f 	.word	0x08006b8f
 8006b54:	08006b7f 	.word	0x08006b7f
 8006b58:	08006b8f 	.word	0x08006b8f
 8006b5c:	08006b8f 	.word	0x08006b8f
 8006b60:	08006b8f 	.word	0x08006b8f
 8006b64:	08006b87 	.word	0x08006b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b68:	f7fe fa80 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 8006b6c:	61f8      	str	r0, [r7, #28]
        break;
 8006b6e:	e014      	b.n	8006b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b70:	f7fe fa92 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8006b74:	61f8      	str	r0, [r7, #28]
        break;
 8006b76:	e010      	b.n	8006b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b78:	4b1e      	ldr	r3, [pc, #120]	; (8006bf4 <UART_SetConfig+0x56c>)
 8006b7a:	61fb      	str	r3, [r7, #28]
        break;
 8006b7c:	e00d      	b.n	8006b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b7e:	f7fe f9dd 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8006b82:	61f8      	str	r0, [r7, #28]
        break;
 8006b84:	e009      	b.n	8006b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8a:	61fb      	str	r3, [r7, #28]
        break;
 8006b8c:	e005      	b.n	8006b9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b98:	bf00      	nop
    }

    if (pclk != 0U)
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d019      	beq.n	8006bd4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	085a      	lsrs	r2, r3, #1
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	441a      	add	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d909      	bls.n	8006bce <UART_SetConfig+0x546>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc0:	d205      	bcs.n	8006bce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60da      	str	r2, [r3, #12]
 8006bcc:	e002      	b.n	8006bd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006be0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3728      	adds	r7, #40	; 0x28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bee:	bf00      	nop
 8006bf0:	40008000 	.word	0x40008000
 8006bf4:	00f42400 	.word	0x00f42400

08006bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf6:	d10a      	bne.n	8006d0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b098      	sub	sp, #96	; 0x60
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d4c:	f7fb fdec 	bl	8002928 <HAL_GetTick>
 8006d50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d12e      	bne.n	8006dbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f88c 	bl	8006e8c <UART_WaitOnFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d021      	beq.n	8006dbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d98:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e6      	bne.n	8006d7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e062      	b.n	8006e84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d149      	bne.n	8006e60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f856 	bl	8006e8c <UART_WaitOnFlagUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d03c      	beq.n	8006e60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	623b      	str	r3, [r7, #32]
   return(result);
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
 8006e06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e38:	61fa      	str	r2, [r7, #28]
 8006e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	617b      	str	r3, [r7, #20]
   return(result);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e011      	b.n	8006e84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3758      	adds	r7, #88	; 0x58
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9c:	e049      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d045      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fb fd3f 	bl	8002928 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e048      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d031      	beq.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d110      	bne.n	8006efe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f838 	bl	8006f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2208      	movs	r2, #8
 8006eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e029      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0c:	d111      	bne.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f81e 	bl	8006f5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e00f      	b.n	8006f52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d0a6      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b095      	sub	sp, #84	; 0x54
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f80:	643b      	str	r3, [r7, #64]	; 0x40
 8006f82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e6      	bne.n	8006f62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f023 0301 	bic.w	r3, r3, #1
 8006faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d118      	bne.n	8007002 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 0310 	bic.w	r3, r3, #16
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e6      	bne.n	8006fd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007016:	bf00      	nop
 8007018:	3754      	adds	r7, #84	; 0x54
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007022:	b084      	sub	sp, #16
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	f107 001c 	add.w	r0, r7, #28
 8007030:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa65 	bl	8007510 <USB_CoreReset>
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800704a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38
 800705c:	e005      	b.n	800706a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007076:	b004      	add	sp, #16
 8007078:	4770      	bx	lr

0800707a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f023 0201 	bic.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d115      	bne.n	80070ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ca:	2001      	movs	r0, #1
 80070cc:	f7fb fc38 	bl	8002940 <HAL_Delay>
      ms++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa0c 	bl	80074f4 <USB_GetMode>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d01e      	beq.n	8007120 <USB_SetCurrentMode+0x84>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b31      	cmp	r3, #49	; 0x31
 80070e6:	d9f0      	bls.n	80070ca <USB_SetCurrentMode+0x2e>
 80070e8:	e01a      	b.n	8007120 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d115      	bne.n	800711c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070fc:	2001      	movs	r0, #1
 80070fe:	f7fb fc1f 	bl	8002940 <HAL_Delay>
      ms++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9f3 	bl	80074f4 <USB_GetMode>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <USB_SetCurrentMode+0x84>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b31      	cmp	r3, #49	; 0x31
 8007118:	d9f0      	bls.n	80070fc <USB_SetCurrentMode+0x60>
 800711a:	e001      	b.n	8007120 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e005      	b.n	800712c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b32      	cmp	r3, #50	; 0x32
 8007124:	d101      	bne.n	800712a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007134:	b084      	sub	sp, #16
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	e009      	b.n	8007168 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	3340      	adds	r3, #64	; 0x40
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	2200      	movs	r2, #0
 8007160:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3301      	adds	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2b0e      	cmp	r3, #14
 800716c:	d9f2      	bls.n	8007154 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800716e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11c      	bne.n	80071ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007182:	f043 0302 	orr.w	r3, r3, #2
 8007186:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e005      	b.n	80071ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071c0:	461a      	mov	r2, r3
 80071c2:	2300      	movs	r3, #0
 80071c4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071c6:	2103      	movs	r1, #3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f959 	bl	8007480 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ce:	2110      	movs	r1, #16
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f8f1 	bl	80073b8 <USB_FlushTxFifo>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f91d 	bl	8007420 <USB_FlushRxFifo>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	461a      	mov	r2, r3
 80071f8:	2300      	movs	r3, #0
 80071fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007202:	461a      	mov	r2, r3
 8007204:	2300      	movs	r3, #0
 8007206:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	461a      	mov	r2, r3
 8007210:	2300      	movs	r3, #0
 8007212:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	e043      	b.n	80072a2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800722c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007230:	d118      	bne.n	8007264 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	461a      	mov	r2, r3
 8007246:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e013      	b.n	8007276 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725a:	461a      	mov	r2, r3
 800725c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e008      	b.n	8007276 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	461a      	mov	r2, r3
 8007272:	2300      	movs	r3, #0
 8007274:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007282:	461a      	mov	r2, r3
 8007284:	2300      	movs	r3, #0
 8007286:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	461a      	mov	r2, r3
 8007296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800729a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	3301      	adds	r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d3b7      	bcc.n	800721a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	e043      	b.n	8007338 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c6:	d118      	bne.n	80072fa <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	461a      	mov	r2, r3
 80072dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	e013      	b.n	800730c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f0:	461a      	mov	r2, r3
 80072f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	e008      	b.n	800730c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	461a      	mov	r2, r3
 8007308:	2300      	movs	r3, #0
 800730a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	461a      	mov	r2, r3
 800731a:	2300      	movs	r3, #0
 800731c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	461a      	mov	r2, r3
 800732c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007330:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	3301      	adds	r3, #1
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d3b7      	bcc.n	80072b0 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800734e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007352:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007360:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f043 0210 	orr.w	r2, r3, #16
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <USB_DevInit+0x280>)
 8007374:	4313      	orrs	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f043 0208 	orr.w	r2, r3, #8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738e:	2b01      	cmp	r3, #1
 8007390:	d107      	bne.n	80073a2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800739a:	f043 0304 	orr.w	r3, r3, #4
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073ae:	b004      	add	sp, #16
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	803c3800 	.word	0x803c3800

080073b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <USB_FlushTxFifo+0x64>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e01b      	b.n	8007410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	daf2      	bge.n	80073c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	019b      	lsls	r3, r3, #6
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a08      	ldr	r2, [pc, #32]	; (800741c <USB_FlushTxFifo+0x64>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e006      	b.n	8007410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b20      	cmp	r3, #32
 800740c:	d0f0      	beq.n	80073f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	00030d40 	.word	0x00030d40

08007420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a11      	ldr	r2, [pc, #68]	; (800747c <USB_FlushRxFifo+0x5c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e018      	b.n	8007470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	daf2      	bge.n	800742c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2210      	movs	r2, #16
 800744e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a08      	ldr	r2, [pc, #32]	; (800747c <USB_FlushRxFifo+0x5c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e006      	b.n	8007470 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b10      	cmp	r3, #16
 800746c:	d0f0      	beq.n	8007450 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	00030d40 	.word	0x00030d40

08007480 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074a0:	4313      	orrs	r3, r2
 80074a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f003 0301 	and.w	r3, r3, #1
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <USB_CoreReset+0x64>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e01b      	b.n	8007566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	daf2      	bge.n	800751c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f043 0201 	orr.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4a09      	ldr	r2, [pc, #36]	; (8007574 <USB_CoreReset+0x64>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e006      	b.n	8007566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	d0f0      	beq.n	8007546 <USB_CoreReset+0x36>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	00030d40 	.word	0x00030d40

08007578 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	; 0x28
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <BSP_COM_Init+0x2a>
 800758a:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <BSP_COM_Init+0xc8>)
 800758c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758e:	4a2c      	ldr	r2, [pc, #176]	; (8007640 <BSP_COM_Init+0xc8>)
 8007590:	f043 0302 	orr.w	r3, r3, #2
 8007594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007596:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <BSP_COM_Init+0xc8>)
 8007598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	613b      	str	r3, [r7, #16]
 80075a0:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <BSP_COM_Init+0x48>
 80075a8:	4b25      	ldr	r3, [pc, #148]	; (8007640 <BSP_COM_Init+0xc8>)
 80075aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ac:	4a24      	ldr	r2, [pc, #144]	; (8007640 <BSP_COM_Init+0xc8>)
 80075ae:	f043 0302 	orr.w	r3, r3, #2
 80075b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075b4:	4b22      	ldr	r3, [pc, #136]	; (8007640 <BSP_COM_Init+0xc8>)
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <BSP_COM_Init+0x66>
 80075c6:	4b1e      	ldr	r3, [pc, #120]	; (8007640 <BSP_COM_Init+0xc8>)
 80075c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <BSP_COM_Init+0xc8>)
 80075cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075d0:	6613      	str	r3, [r2, #96]	; 0x60
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <BSP_COM_Init+0xc8>)
 80075d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075da:	60bb      	str	r3, [r7, #8]
 80075dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80075de:	2340      	movs	r3, #64	; 0x40
 80075e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80075e2:	2302      	movs	r3, #2
 80075e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80075e6:	2302      	movs	r3, #2
 80075e8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80075ee:	2307      	movs	r3, #7
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	4a13      	ldr	r2, [pc, #76]	; (8007644 <BSP_COM_Init+0xcc>)
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	f107 0214 	add.w	r2, r7, #20
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f7fb fc21 	bl	8002e48 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800760a:	2302      	movs	r3, #2
 800760c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800760e:	2307      	movs	r3, #7
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	4a0c      	ldr	r2, [pc, #48]	; (8007648 <BSP_COM_Init+0xd0>)
 8007616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800761a:	f107 0214 	add.w	r2, r7, #20
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f7fb fc11 	bl	8002e48 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	4a08      	ldr	r2, [pc, #32]	; (800764c <BSP_COM_Init+0xd4>)
 800762a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f7fe ff4f 	bl	80064d6 <HAL_UART_Init>
}
 8007638:	bf00      	nop
 800763a:	3728      	adds	r7, #40	; 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40021000 	.word	0x40021000
 8007644:	200000ac 	.word	0x200000ac
 8007648:	200000b0 	.word	0x200000b0
 800764c:	200000a8 	.word	0x200000a8

08007650 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007658:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <I2Cx_MspInit+0xa8>)
 800765a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765c:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <I2Cx_MspInit+0xa8>)
 800765e:	f043 0302 	orr.w	r3, r3, #2
 8007662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007664:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <I2Cx_MspInit+0xa8>)
 8007666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	613b      	str	r3, [r7, #16]
 800766e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8007670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007674:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007676:	2312      	movs	r3, #18
 8007678:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800767a:	2301      	movs	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800767e:	2303      	movs	r3, #3
 8007680:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8007682:	2304      	movs	r3, #4
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007686:	f107 0314 	add.w	r3, r7, #20
 800768a:	4619      	mov	r1, r3
 800768c:	481b      	ldr	r0, [pc, #108]	; (80076fc <I2Cx_MspInit+0xac>)
 800768e:	f7fb fbdb 	bl	8002e48 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007692:	f107 0314 	add.w	r3, r7, #20
 8007696:	4619      	mov	r1, r3
 8007698:	4818      	ldr	r0, [pc, #96]	; (80076fc <I2Cx_MspInit+0xac>)
 800769a:	f7fb fbd5 	bl	8002e48 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076a8:	6593      	str	r3, [r2, #88]	; 0x58
 80076aa:	4b13      	ldr	r3, [pc, #76]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	4a0c      	ldr	r2, [pc, #48]	; (80076f8 <I2Cx_MspInit+0xa8>)
 80076c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80076cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80076ce:	2200      	movs	r2, #0
 80076d0:	210f      	movs	r1, #15
 80076d2:	2021      	movs	r0, #33	; 0x21
 80076d4:	f7fb fa33 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80076d8:	2021      	movs	r0, #33	; 0x21
 80076da:	f7fb fa4c 	bl	8002b76 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	210f      	movs	r1, #15
 80076e2:	2022      	movs	r0, #34	; 0x22
 80076e4:	f7fb fa2b 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80076e8:	2022      	movs	r0, #34	; 0x22
 80076ea:	f7fb fa44 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 80076ee:	bf00      	nop
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000
 80076fc:	48000400 	.word	0x48000400

08007700 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a12      	ldr	r2, [pc, #72]	; (8007754 <I2Cx_Init+0x54>)
 800770c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a11      	ldr	r2, [pc, #68]	; (8007758 <I2Cx_Init+0x58>)
 8007712:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ff89 	bl	8007650 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fb fe50 	bl	80033e4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fc fbfc 	bl	8003f44 <HAL_I2CEx_ConfigAnalogFilter>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40005800 	.word	0x40005800
 8007758:	00702681 	.word	0x00702681

0800775c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	; 0x28
 8007760:	af04      	add	r7, sp, #16
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	461a      	mov	r2, r3
 800776a:	4603      	mov	r3, r0
 800776c:	72fb      	strb	r3, [r7, #11]
 800776e:	460b      	mov	r3, r1
 8007770:	813b      	strh	r3, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	b299      	uxth	r1, r3
 800777e:	88f8      	ldrh	r0, [r7, #6]
 8007780:	893a      	ldrh	r2, [r7, #8]
 8007782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007786:	9302      	str	r3, [sp, #8]
 8007788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7fc f804 	bl	80037a0 <HAL_I2C_Mem_Read>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	4619      	mov	r1, r3
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f832 	bl	8007810 <I2Cx_Error>
  }
  return status;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b08a      	sub	sp, #40	; 0x28
 80077ba:	af04      	add	r7, sp, #16
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	4608      	mov	r0, r1
 80077c0:	4611      	mov	r1, r2
 80077c2:	461a      	mov	r2, r3
 80077c4:	4603      	mov	r3, r0
 80077c6:	72fb      	strb	r3, [r7, #11]
 80077c8:	460b      	mov	r3, r1
 80077ca:	813b      	strh	r3, [r7, #8]
 80077cc:	4613      	mov	r3, r2
 80077ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	b299      	uxth	r1, r3
 80077d8:	88f8      	ldrh	r0, [r7, #6]
 80077da:	893a      	ldrh	r2, [r7, #8]
 80077dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077e0:	9302      	str	r3, [sp, #8]
 80077e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	4603      	mov	r3, r0
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7fb fec3 	bl	8003578 <HAL_I2C_Mem_Write>
 80077f2:	4603      	mov	r3, r0
 80077f4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	4619      	mov	r1, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f805 	bl	8007810 <I2Cx_Error>
  }
  return status;
 8007806:	7dfb      	ldrb	r3, [r7, #23]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7fb fe7c 	bl	800351a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff ff6c 	bl	8007700 <I2Cx_Init>
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <SENSOR_IO_Init+0x10>)
 8007836:	f7ff ff63 	bl	8007700 <I2Cx_Init>
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000b10 	.word	0x20000b10

08007844 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af02      	add	r7, sp, #8
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
 800784e:	460b      	mov	r3, r1
 8007850:	71bb      	strb	r3, [r7, #6]
 8007852:	4613      	mov	r3, r2
 8007854:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8007856:	79bb      	ldrb	r3, [r7, #6]
 8007858:	b29a      	uxth	r2, r3
 800785a:	79f9      	ldrb	r1, [r7, #7]
 800785c:	2301      	movs	r3, #1
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	1d7b      	adds	r3, r7, #5
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	2301      	movs	r3, #1
 8007866:	4803      	ldr	r0, [pc, #12]	; (8007874 <SENSOR_IO_Write+0x30>)
 8007868:	f7ff ffa5 	bl	80077b6 <I2Cx_WriteMultiple>
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000b10 	.word	0x20000b10

08007878 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af02      	add	r7, sp, #8
 800787e:	4603      	mov	r3, r0
 8007880:	460a      	mov	r2, r1
 8007882:	71fb      	strb	r3, [r7, #7]
 8007884:	4613      	mov	r3, r2
 8007886:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800788c:	79bb      	ldrb	r3, [r7, #6]
 800788e:	b29a      	uxth	r2, r3
 8007890:	79f9      	ldrb	r1, [r7, #7]
 8007892:	2301      	movs	r3, #1
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f107 030f 	add.w	r3, r7, #15
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	2301      	movs	r3, #1
 800789e:	4804      	ldr	r0, [pc, #16]	; (80078b0 <SENSOR_IO_Read+0x38>)
 80078a0:	f7ff ff5c 	bl	800775c <I2Cx_ReadMultiple>

  return read_value;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000b10 	.word	0x20000b10

080078b4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	603a      	str	r2, [r7, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
 80078c2:	460b      	mov	r3, r1
 80078c4:	71bb      	strb	r3, [r7, #6]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80078ca:	79bb      	ldrb	r3, [r7, #6]
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	79f9      	ldrb	r1, [r7, #7]
 80078d0:	88bb      	ldrh	r3, [r7, #4]
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	2301      	movs	r3, #1
 80078da:	4804      	ldr	r0, [pc, #16]	; (80078ec <SENSOR_IO_ReadMultiple+0x38>)
 80078dc:	f7ff ff3e 	bl	800775c <I2Cx_ReadMultiple>
 80078e0:	4603      	mov	r3, r0
 80078e2:	b29b      	uxth	r3, r3
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000b10 	.word	0x20000b10

080078f0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80078fa:	2300      	movs	r3, #0
 80078fc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80078fe:	4b19      	ldr	r3, [pc, #100]	; (8007964 <BSP_ACCELERO_Init+0x74>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	4798      	blx	r3
 8007904:	4603      	mov	r3, r0
 8007906:	2b6a      	cmp	r3, #106	; 0x6a
 8007908:	d002      	beq.n	8007910 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
 800790e:	e024      	b.n	800795a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007910:	4b15      	ldr	r3, [pc, #84]	; (8007968 <BSP_ACCELERO_Init+0x78>)
 8007912:	4a14      	ldr	r2, [pc, #80]	; (8007964 <BSP_ACCELERO_Init+0x74>)
 8007914:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8007916:	2330      	movs	r3, #48	; 0x30
 8007918:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800791e:	2300      	movs	r3, #0
 8007920:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007922:	2340      	movs	r3, #64	; 0x40
 8007924:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800792e:	797a      	ldrb	r2, [r7, #5]
 8007930:	7abb      	ldrb	r3, [r7, #10]
 8007932:	4313      	orrs	r3, r2
 8007934:	b2db      	uxtb	r3, r3
 8007936:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007938:	7a3b      	ldrb	r3, [r7, #8]
 800793a:	f043 0304 	orr.w	r3, r3, #4
 800793e:	b2db      	uxtb	r3, r3
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	b21a      	sxth	r2, r3
 8007944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	b21b      	sxth	r3, r3
 800794c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <BSP_ACCELERO_Init+0x78>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	89ba      	ldrh	r2, [r7, #12]
 8007956:	4610      	mov	r0, r2
 8007958:	4798      	blx	r3
  }  

  return ret;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	200000c4 	.word	0x200000c4
 8007968:	20000bec 	.word	0x20000bec

0800796c <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <BSP_ACCELERO_LowPower+0x30>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 800797e:	4b07      	ldr	r3, [pc, #28]	; (800799c <BSP_ACCELERO_LowPower+0x30>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <BSP_ACCELERO_LowPower+0x30>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
    }
  }
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000bec 	.word	0x20000bec

080079a0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 80079a8:	4b08      	ldr	r3, [pc, #32]	; (80079cc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3


    }
  }
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000bec 	.word	0x20000bec

080079d0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <BSP_TSENSOR_Init+0x30>)
 80079dc:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <BSP_TSENSOR_Init+0x34>)
 80079de:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80079e0:	f7ff ff26 	bl	8007830 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <BSP_TSENSOR_Init+0x30>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2100      	movs	r1, #0
 80079ec:	20be      	movs	r0, #190	; 0xbe
 80079ee:	4798      	blx	r3

  ret = TSENSOR_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80079f4:	79fb      	ldrb	r3, [r7, #7]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000bf0 	.word	0x20000bf0
 8007a04:	200000b4 	.word	0x200000b4

08007a08 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8007a14:	88fb      	ldrh	r3, [r7, #6]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2120      	movs	r1, #32
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff ff2c 	bl	8007878 <SENSOR_IO_Read>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	f023 0304 	bic.w	r3, r3, #4
 8007a2a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	f043 0304 	orr.w	r3, r3, #4
 8007a32:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	f043 0301 	orr.w	r3, r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	7bfa      	ldrb	r2, [r7, #15]
 8007a52:	2120      	movs	r1, #32
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fef5 	bl	8007844 <SENSOR_IO_Write>
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b088      	sub	sp, #32
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	4603      	mov	r3, r0
 8007a6a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	b2d8      	uxtb	r0, r3
 8007a70:	f107 0208 	add.w	r2, r7, #8
 8007a74:	2302      	movs	r3, #2
 8007a76:	21b2      	movs	r1, #178	; 0xb2
 8007a78:	f7ff ff1c 	bl	80078b4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2135      	movs	r1, #53	; 0x35
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fef8 	bl	8007878 <SENSOR_IO_Read>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	b21b      	sxth	r3, r3
 8007a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a96:	b21a      	sxth	r2, r3
 8007a98:	7a3b      	ldrb	r3, [r7, #8]
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8007aa0:	7ffb      	ldrb	r3, [r7, #31]
 8007aa2:	019b      	lsls	r3, r3, #6
 8007aa4:	b21b      	sxth	r3, r3
 8007aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aaa:	b21a      	sxth	r2, r3
 8007aac:	7a7b      	ldrb	r3, [r7, #9]
 8007aae:	b21b      	sxth	r3, r3
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8007ab4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007ab8:	10db      	asrs	r3, r3, #3
 8007aba:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8007abc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007ac0:	10db      	asrs	r3, r3, #3
 8007ac2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8007ac4:	88fb      	ldrh	r3, [r7, #6]
 8007ac6:	b2d8      	uxtb	r0, r3
 8007ac8:	f107 0208 	add.w	r2, r7, #8
 8007acc:	2304      	movs	r3, #4
 8007ace:	21bc      	movs	r1, #188	; 0xbc
 8007ad0:	f7ff fef0 	bl	80078b4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007ad4:	7a7b      	ldrb	r3, [r7, #9]
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	b21a      	sxth	r2, r3
 8007ada:	7a3b      	ldrb	r3, [r7, #8]
 8007adc:	b21b      	sxth	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	7abb      	ldrb	r3, [r7, #10]
 8007aea:	b21b      	sxth	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	b2d8      	uxtb	r0, r3
 8007af4:	f107 0208 	add.w	r2, r7, #8
 8007af8:	2302      	movs	r3, #2
 8007afa:	21aa      	movs	r1, #170	; 0xaa
 8007afc:	f7ff feda 	bl	80078b4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007b00:	7a7b      	ldrb	r3, [r7, #9]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	b21a      	sxth	r2, r3
 8007b06:	7a3b      	ldrb	r3, [r7, #8]
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8007b0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007b12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	ee07 3a90 	vmov	s15, r3
 8007b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007b24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007b36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007b3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b5c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	ee07 3a90 	vmov	s15, r3
}
 8007b66:	eeb0 0a67 	vmov.f32	s0, s15
 8007b6a:	3720      	adds	r7, #32
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007b7e:	2110      	movs	r1, #16
 8007b80:	20d4      	movs	r0, #212	; 0xd4
 8007b82:	f7ff fe79 	bl	8007878 <SENSOR_IO_Read>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8007b8a:	88fb      	ldrh	r3, [r7, #6]
 8007b8c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8007b96:	7bba      	ldrb	r2, [r7, #14]
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2110      	movs	r1, #16
 8007ba4:	20d4      	movs	r0, #212	; 0xd4
 8007ba6:	f7ff fe4d 	bl	8007844 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8007baa:	2112      	movs	r1, #18
 8007bac:	20d4      	movs	r0, #212	; 0xd4
 8007bae:	f7ff fe63 	bl	8007878 <SENSOR_IO_Read>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	0a1b      	lsrs	r3, r3, #8
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8007bc4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8007bc6:	7bba      	ldrb	r2, [r7, #14]
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2112      	movs	r1, #18
 8007bd4:	20d4      	movs	r0, #212	; 0xd4
 8007bd6:	f7ff fe35 	bl	8007844 <SENSOR_IO_Write>
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8007be8:	2300      	movs	r3, #0
 8007bea:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007bec:	2110      	movs	r1, #16
 8007bee:	20d4      	movs	r0, #212	; 0xd4
 8007bf0:	f7ff fe42 	bl	8007878 <SENSOR_IO_Read>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	461a      	mov	r2, r3
 8007c04:	2110      	movs	r1, #16
 8007c06:	20d4      	movs	r0, #212	; 0xd4
 8007c08:	f7ff fe1c 	bl	8007844 <SENSOR_IO_Write>
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8007c18:	f7ff fe0a 	bl	8007830 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8007c1c:	210f      	movs	r1, #15
 8007c1e:	20d4      	movs	r0, #212	; 0xd4
 8007c20:	f7ff fe2a 	bl	8007878 <SENSOR_IO_Read>
 8007c24:	4603      	mov	r3, r0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	4603      	mov	r3, r0
 8007c32:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8007c38:	2115      	movs	r1, #21
 8007c3a:	20d4      	movs	r0, #212	; 0xd4
 8007c3c:	f7ff fe1c 	bl	8007878 <SENSOR_IO_Read>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	f023 0310 	bic.w	r3, r3, #16
 8007c4a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8007c4c:	88fb      	ldrh	r3, [r7, #6]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	f043 0310 	orr.w	r3, r3, #16
 8007c58:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2115      	movs	r1, #21
 8007c60:	20d4      	movs	r0, #212	; 0xd4
 8007c62:	f7ff fdef 	bl	8007844 <SENSOR_IO_Write>
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007c86:	2110      	movs	r1, #16
 8007c88:	20d4      	movs	r0, #212	; 0xd4
 8007c8a:	f7ff fdf5 	bl	8007878 <SENSOR_IO_Read>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8007c92:	f107 0208 	add.w	r2, r7, #8
 8007c96:	2306      	movs	r3, #6
 8007c98:	2128      	movs	r1, #40	; 0x28
 8007c9a:	20d4      	movs	r0, #212	; 0xd4
 8007c9c:	f7ff fe0a 	bl	80078b4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e01c      	b.n	8007ce0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8007ca6:	7ffb      	ldrb	r3, [r7, #31]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	3301      	adds	r3, #1
 8007cac:	3320      	adds	r3, #32
 8007cae:	443b      	add	r3, r7
 8007cb0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	7ffb      	ldrb	r3, [r7, #31]
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	3320      	adds	r3, #32
 8007cc0:	443b      	add	r3, r7
 8007cc2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4413      	add	r3, r2
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
 8007cce:	b212      	sxth	r2, r2
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	3320      	adds	r3, #32
 8007cd4:	443b      	add	r3, r7
 8007cd6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8007cda:	7ffb      	ldrb	r3, [r7, #31]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	7ffb      	ldrb	r3, [r7, #31]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d9df      	bls.n	8007ca6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	f003 030c 	and.w	r3, r3, #12
 8007cec:	2b0c      	cmp	r3, #12
 8007cee:	d829      	bhi.n	8007d44 <LSM6DSL_AccReadXYZ+0xd4>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <LSM6DSL_AccReadXYZ+0x88>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d2d 	.word	0x08007d2d
 8007cfc:	08007d45 	.word	0x08007d45
 8007d00:	08007d45 	.word	0x08007d45
 8007d04:	08007d45 	.word	0x08007d45
 8007d08:	08007d3f 	.word	0x08007d3f
 8007d0c:	08007d45 	.word	0x08007d45
 8007d10:	08007d45 	.word	0x08007d45
 8007d14:	08007d45 	.word	0x08007d45
 8007d18:	08007d33 	.word	0x08007d33
 8007d1c:	08007d45 	.word	0x08007d45
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d45 	.word	0x08007d45
 8007d28:	08007d39 	.word	0x08007d39
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8007d2c:	4b18      	ldr	r3, [pc, #96]	; (8007d90 <LSM6DSL_AccReadXYZ+0x120>)
 8007d2e:	61bb      	str	r3, [r7, #24]
    break;
 8007d30:	e008      	b.n	8007d44 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8007d32:	4b18      	ldr	r3, [pc, #96]	; (8007d94 <LSM6DSL_AccReadXYZ+0x124>)
 8007d34:	61bb      	str	r3, [r7, #24]
    break;
 8007d36:	e005      	b.n	8007d44 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8007d38:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <LSM6DSL_AccReadXYZ+0x128>)
 8007d3a:	61bb      	str	r3, [r7, #24]
    break;
 8007d3c:	e002      	b.n	8007d44 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8007d3e:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <LSM6DSL_AccReadXYZ+0x12c>)
 8007d40:	61bb      	str	r3, [r7, #24]
    break;    
 8007d42:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e01a      	b.n	8007d80 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8007d4a:	7ffb      	ldrb	r3, [r7, #31]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	3320      	adds	r3, #32
 8007d50:	443b      	add	r3, r7
 8007d52:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	7ffb      	ldrb	r3, [r7, #31]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d72:	ee17 2a90 	vmov	r2, s15
 8007d76:	b212      	sxth	r2, r2
 8007d78:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8007d7a:	7ffb      	ldrb	r3, [r7, #31]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	77fb      	strb	r3, [r7, #31]
 8007d80:	7ffb      	ldrb	r3, [r7, #31]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d9e1      	bls.n	8007d4a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	3d79db23 	.word	0x3d79db23
 8007d94:	3df9db23 	.word	0x3df9db23
 8007d98:	3e79db23 	.word	0x3e79db23
 8007d9c:	3ef9db23 	.word	0x3ef9db23

08007da0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <SPI_WIFI_ISR+0x1c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d102      	bne.n	8007db2 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8007dac:	4b03      	ldr	r3, [pc, #12]	; (8007dbc <SPI_WIFI_ISR+0x1c>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
   }
}
 8007db2:	bf00      	nop
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000c58 	.word	0x20000c58

08007dc0 <__NVIC_SetPriority>:
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	db0a      	blt.n	8007dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	490c      	ldr	r1, [pc, #48]	; (8007e0c <__NVIC_SetPriority+0x4c>)
 8007dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dde:	0112      	lsls	r2, r2, #4
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	440b      	add	r3, r1
 8007de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007de8:	e00a      	b.n	8007e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4908      	ldr	r1, [pc, #32]	; (8007e10 <__NVIC_SetPriority+0x50>)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	3b04      	subs	r3, #4
 8007df8:	0112      	lsls	r2, r2, #4
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	761a      	strb	r2, [r3, #24]
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	e000e100 	.word	0xe000e100
 8007e10:	e000ed00 	.word	0xe000ed00

08007e14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f06f 0004 	mvn.w	r0, #4
 8007e1e:	f7ff ffcf 	bl	8007dc0 <__NVIC_SetPriority>
#endif
}
 8007e22:	bf00      	nop
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e2e:	f3ef 8305 	mrs	r3, IPSR
 8007e32:	603b      	str	r3, [r7, #0]
  return(result);
 8007e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007e3a:	f06f 0305 	mvn.w	r3, #5
 8007e3e:	607b      	str	r3, [r7, #4]
 8007e40:	e00c      	b.n	8007e5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007e42:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <osKernelInitialize+0x44>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e4a:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <osKernelInitialize+0x44>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	e002      	b.n	8007e5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e5c:	687b      	ldr	r3, [r7, #4]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	20000c5c 	.word	0x20000c5c

08007e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e76:	f3ef 8305 	mrs	r3, IPSR
 8007e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e82:	f06f 0305 	mvn.w	r3, #5
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	e010      	b.n	8007eac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <osKernelStart+0x48>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d109      	bne.n	8007ea6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e92:	f7ff ffbf 	bl	8007e14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <osKernelStart+0x48>)
 8007e98:	2202      	movs	r2, #2
 8007e9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e9c:	f001 f934 	bl	8009108 <vTaskStartScheduler>
      stat = osOK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	607b      	str	r3, [r7, #4]
 8007ea4:	e002      	b.n	8007eac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007eac:	687b      	ldr	r3, [r7, #4]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000c5c 	.word	0x20000c5c

08007ebc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08e      	sub	sp, #56	; 0x38
 8007ec0:	af04      	add	r7, sp, #16
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ecc:	f3ef 8305 	mrs	r3, IPSR
 8007ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ed2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d17e      	bne.n	8007fd6 <osThreadNew+0x11a>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d07b      	beq.n	8007fd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ede:	2380      	movs	r3, #128	; 0x80
 8007ee0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ee2:	2318      	movs	r3, #24
 8007ee4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007eea:	f04f 33ff 	mov.w	r3, #4294967295
 8007eee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d045      	beq.n	8007f82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <osThreadNew+0x48>
        name = attr->name;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d008      	beq.n	8007f2a <osThreadNew+0x6e>
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b38      	cmp	r3, #56	; 0x38
 8007f1c:	d805      	bhi.n	8007f2a <osThreadNew+0x6e>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <osThreadNew+0x72>
        return (NULL);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e054      	b.n	8007fd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	089b      	lsrs	r3, r3, #2
 8007f3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00e      	beq.n	8007f64 <osThreadNew+0xa8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	2b5b      	cmp	r3, #91	; 0x5b
 8007f4c:	d90a      	bls.n	8007f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d006      	beq.n	8007f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <osThreadNew+0xa8>
        mem = 1;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	e010      	b.n	8007f86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10c      	bne.n	8007f86 <osThreadNew+0xca>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d108      	bne.n	8007f86 <osThreadNew+0xca>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d104      	bne.n	8007f86 <osThreadNew+0xca>
          mem = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	e001      	b.n	8007f86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d110      	bne.n	8007fae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f94:	9202      	str	r2, [sp, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6a3a      	ldr	r2, [r7, #32]
 8007fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 feda 	bl	8008d5c <xTaskCreateStatic>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	e013      	b.n	8007fd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d110      	bne.n	8007fd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	f107 0310 	add.w	r3, r7, #16
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 ff25 	bl	8008e16 <xTaskCreate>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d001      	beq.n	8007fd6 <osThreadNew+0x11a>
            hTask = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007fd6:	693b      	ldr	r3, [r7, #16]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3728      	adds	r7, #40	; 0x28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <osThreadFlagsSet+0x1a>
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da03      	bge.n	8008002 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8007ffa:	f06f 0303 	mvn.w	r3, #3
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e035      	b.n	800806e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008008:	f3ef 8305 	mrs	r3, IPSR
 800800c:	613b      	str	r3, [r7, #16]
  return(result);
 800800e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01f      	beq.n	8008054 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008014:	2300      	movs	r3, #0
 8008016:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	2201      	movs	r2, #1
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6978      	ldr	r0, [r7, #20]
 8008026:	f001 fe55 	bl	8009cd4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	2200      	movs	r2, #0
 8008030:	9200      	str	r2, [sp, #0]
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f001 fe4c 	bl	8009cd4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d015      	beq.n	800806e <osThreadFlagsSet+0x8e>
 8008042:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <osThreadFlagsSet+0x98>)
 8008044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	e00c      	b.n	800806e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008054:	2300      	movs	r3, #0
 8008056:	2201      	movs	r2, #1
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6978      	ldr	r0, [r7, #20]
 800805c:	f001 fd82 	bl	8009b64 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008060:	f107 030c 	add.w	r3, r7, #12
 8008064:	2200      	movs	r2, #0
 8008066:	2100      	movs	r1, #0
 8008068:	6978      	ldr	r0, [r7, #20]
 800806a:	f001 fd7b 	bl	8009b64 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800806e:	68fb      	ldr	r3, [r7, #12]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b08c      	sub	sp, #48	; 0x30
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008088:	f3ef 8305 	mrs	r3, IPSR
 800808c:	617b      	str	r3, [r7, #20]
  return(result);
 800808e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008094:	f06f 0305 	mvn.w	r3, #5
 8008098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800809a:	e06b      	b.n	8008174 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da03      	bge.n	80080aa <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80080a2:	f06f 0303 	mvn.w	r3, #3
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a8:	e064      	b.n	8008174 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <osThreadFlagsWait+0x3e>
      clear = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080b8:	e001      	b.n	80080be <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80080c6:	f001 f931 	bl	800932c <xTaskGetTickCount>
 80080ca:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80080cc:	f107 0210 	add.w	r2, r7, #16
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d4:	2000      	movs	r0, #0
 80080d6:	f001 fceb 	bl	8009ab0 <xTaskNotifyWait>
 80080da:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d137      	bne.n	8008152 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80080e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4013      	ands	r3, r2
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ee:	4313      	orrs	r3, r2
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00c      	beq.n	8008116 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	4013      	ands	r3, r2
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	429a      	cmp	r2, r3
 8008106:	d032      	beq.n	800816e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10f      	bne.n	800812e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800810e:	f06f 0302 	mvn.w	r3, #2
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008114:	e02e      	b.n	8008174 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d128      	bne.n	8008172 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008126:	f06f 0302 	mvn.w	r3, #2
 800812a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800812c:	e022      	b.n	8008174 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800812e:	f001 f8fd 	bl	800932c <xTaskGetTickCount>
 8008132:	4602      	mov	r2, r0
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	429a      	cmp	r2, r3
 8008140:	d902      	bls.n	8008148 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
 8008146:	e00e      	b.n	8008166 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8008148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
 8008150:	e009      	b.n	8008166 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8008158:	f06f 0302 	mvn.w	r3, #2
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800815e:	e002      	b.n	8008166 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008160:	f06f 0301 	mvn.w	r3, #1
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1af      	bne.n	80080cc <osThreadFlagsWait+0x50>
 800816c:	e002      	b.n	8008174 <osThreadFlagsWait+0xf8>
            break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <osThreadFlagsWait+0xf8>
            break;
 8008172:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008176:	4618      	mov	r0, r3
 8008178:	3730      	adds	r7, #48	; 0x30
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008186:	f3ef 8305 	mrs	r3, IPSR
 800818a:	60bb      	str	r3, [r7, #8]
  return(result);
 800818c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <osDelay+0x1c>
    stat = osErrorISR;
 8008192:	f06f 0305 	mvn.w	r3, #5
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	e007      	b.n	80081aa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <osDelay+0x2c>
      vTaskDelay(ticks);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 ff7b 	bl	80090a0 <vTaskDelay>
    }
  }

  return (stat);
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a07      	ldr	r2, [pc, #28]	; (80081e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80081c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4a06      	ldr	r2, [pc, #24]	; (80081e4 <vApplicationGetIdleTaskMemory+0x30>)
 80081ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2280      	movs	r2, #128	; 0x80
 80081d0:	601a      	str	r2, [r3, #0]
}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000c60 	.word	0x20000c60
 80081e4:	20000cbc 	.word	0x20000cbc

080081e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4a07      	ldr	r2, [pc, #28]	; (8008214 <vApplicationGetTimerTaskMemory+0x2c>)
 80081f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4a06      	ldr	r2, [pc, #24]	; (8008218 <vApplicationGetTimerTaskMemory+0x30>)
 80081fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008206:	601a      	str	r2, [r3, #0]
}
 8008208:	bf00      	nop
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	20000ebc 	.word	0x20000ebc
 8008218:	20000f18 	.word	0x20000f18

0800821c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f103 0208 	add.w	r2, r3, #8
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f04f 32ff 	mov.w	r2, #4294967295
 8008234:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f103 0208 	add.w	r2, r3, #8
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f103 0208 	add.w	r2, r3, #8
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	601a      	str	r2, [r3, #0]
}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d103      	bne.n	80082de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e00c      	b.n	80082f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3308      	adds	r3, #8
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e002      	b.n	80082ec <vListInsert+0x2e>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d2f6      	bcs.n	80082e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6892      	ldr	r2, [r2, #8]
 8008346:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6852      	ldr	r2, [r2, #4]
 8008350:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d103      	bne.n	8008364 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	1e5a      	subs	r2, r3, #1
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083ae:	f002 fa39 	bl	800a824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083be:	fb01 f303 	mul.w	r3, r1, r3
 80083c2:	441a      	add	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083de:	3b01      	subs	r3, #1
 80083e0:	68f9      	ldr	r1, [r7, #12]
 80083e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	22ff      	movs	r2, #255	; 0xff
 80083f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	22ff      	movs	r2, #255	; 0xff
 80083fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d114      	bne.n	800842e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01a      	beq.n	8008442 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3310      	adds	r3, #16
 8008410:	4618      	mov	r0, r3
 8008412:	f001 f903 	bl	800961c <xTaskRemoveFromEventList>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d012      	beq.n	8008442 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <xQueueGenericReset+0xcc>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	e009      	b.n	8008442 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3310      	adds	r3, #16
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff fef2 	bl	800821c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3324      	adds	r3, #36	; 0x24
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff feed 	bl	800821c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008442:	f002 fa1f 	bl	800a884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008446:	2301      	movs	r3, #1
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08e      	sub	sp, #56	; 0x38
 8008458:	af02      	add	r7, sp, #8
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <xQueueGenericCreateStatic+0x52>
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <xQueueGenericCreateStatic+0x56>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <xQueueGenericCreateStatic+0x58>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	623b      	str	r3, [r7, #32]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <xQueueGenericCreateStatic+0x7e>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <xQueueGenericCreateStatic+0x82>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueGenericCreateStatic+0x84>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61fb      	str	r3, [r7, #28]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084f2:	2350      	movs	r3, #80	; 0x50
 80084f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b50      	cmp	r3, #80	; 0x50
 80084fa:	d00a      	beq.n	8008512 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	61bb      	str	r3, [r7, #24]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008512:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00d      	beq.n	800853a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008526:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4613      	mov	r3, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f805 	bl	8008544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800853c:	4618      	mov	r0, r3
 800853e:	3730      	adds	r7, #48	; 0x30
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	e002      	b.n	8008566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008572:	2101      	movs	r1, #1
 8008574:	69b8      	ldr	r0, [r7, #24]
 8008576:	f7ff ff05 	bl	8008384 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <xQueueGenericSend+0x32>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <xQueueGenericSend+0x40>
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <xQueueGenericSend+0x44>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <xQueueGenericSend+0x46>
 80085d0:	2300      	movs	r3, #0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <xQueueGenericSend+0x60>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d103      	bne.n	80085fa <xQueueGenericSend+0x6e>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <xQueueGenericSend+0x72>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueGenericSend+0x74>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <xQueueGenericSend+0x8e>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	623b      	str	r3, [r7, #32]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800861a:	f001 f9bd 	bl	8009998 <xTaskGetSchedulerState>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <xQueueGenericSend+0x9e>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <xQueueGenericSend+0xa2>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <xQueueGenericSend+0xa4>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10a      	bne.n	800864a <xQueueGenericSend+0xbe>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	61fb      	str	r3, [r7, #28]
}
 8008646:	bf00      	nop
 8008648:	e7fe      	b.n	8008648 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800864a:	f002 f8eb 	bl	800a824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	429a      	cmp	r2, r3
 8008658:	d302      	bcc.n	8008660 <xQueueGenericSend+0xd4>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d129      	bne.n	80086b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008666:	f000 fa0b 	bl	8008a80 <prvCopyDataToQueue>
 800866a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d010      	beq.n	8008696 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	4618      	mov	r0, r3
 800867a:	f000 ffcf 	bl	800961c <xTaskRemoveFromEventList>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d013      	beq.n	80086ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008684:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <xQueueGenericSend+0x1f8>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	e00a      	b.n	80086ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800869c:	4b39      	ldr	r3, [pc, #228]	; (8008784 <xQueueGenericSend+0x1f8>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086ac:	f002 f8ea 	bl	800a884 <vPortExitCritical>
				return pdPASS;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e063      	b.n	800877c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086ba:	f002 f8e3 	bl	800a884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	e05c      	b.n	800877c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d106      	bne.n	80086d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086c8:	f107 0314 	add.w	r3, r7, #20
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f809 	bl	80096e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086d6:	f002 f8d5 	bl	800a884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086da:	f000 fd7b 	bl	80091d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086de:	f002 f8a1 	bl	800a824 <vPortEnterCritical>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086e8:	b25b      	sxtb	r3, r3
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d103      	bne.n	80086f8 <xQueueGenericSend+0x16c>
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086fe:	b25b      	sxtb	r3, r3
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008704:	d103      	bne.n	800870e <xQueueGenericSend+0x182>
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800870e:	f002 f8b9 	bl	800a884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008712:	1d3a      	adds	r2, r7, #4
 8008714:	f107 0314 	add.w	r3, r7, #20
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fff8 	bl	8009710 <xTaskCheckForTimeOut>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d124      	bne.n	8008770 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008728:	f000 faa2 	bl	8008c70 <prvIsQueueFull>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d018      	beq.n	8008764 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	3310      	adds	r3, #16
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4611      	mov	r1, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f000 ff1e 	bl	800957c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008742:	f000 fa2d 	bl	8008ba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008746:	f000 fd53 	bl	80091f0 <xTaskResumeAll>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f af7c 	bne.w	800864a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <xQueueGenericSend+0x1f8>)
 8008754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	e772      	b.n	800864a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008766:	f000 fa1b 	bl	8008ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800876a:	f000 fd41 	bl	80091f0 <xTaskResumeAll>
 800876e:	e76c      	b.n	800864a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008772:	f000 fa15 	bl	8008ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008776:	f000 fd3b 	bl	80091f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800877a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800877c:	4618      	mov	r0, r3
 800877e:	3738      	adds	r7, #56	; 0x38
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b090      	sub	sp, #64	; 0x40
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <xQueueGenericSendFromISR+0x3c>
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <xQueueGenericSendFromISR+0x40>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <xQueueGenericSendFromISR+0x42>
 80087c8:	2300      	movs	r3, #0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d103      	bne.n	80087f2 <xQueueGenericSendFromISR+0x6a>
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <xQueueGenericSendFromISR+0x6e>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <xQueueGenericSendFromISR+0x70>
 80087f6:	2300      	movs	r3, #0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	623b      	str	r3, [r7, #32]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008812:	f002 f8e9 	bl	800a9e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008816:	f3ef 8211 	mrs	r2, BASEPRI
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	61fa      	str	r2, [r7, #28]
 800882c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800882e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008830:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883a:	429a      	cmp	r2, r3
 800883c:	d302      	bcc.n	8008844 <xQueueGenericSendFromISR+0xbc>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d12f      	bne.n	80088a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800884a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	68b9      	ldr	r1, [r7, #8]
 8008858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800885a:	f000 f911 	bl	8008a80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800885e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d112      	bne.n	800888e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	d016      	beq.n	800889e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fed1 	bl	800961c <xTaskRemoveFromEventList>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e007      	b.n	800889e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800888e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008892:	3301      	adds	r3, #1
 8008894:	b2db      	uxtb	r3, r3
 8008896:	b25a      	sxtb	r2, r3
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800889e:	2301      	movs	r3, #1
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80088a2:	e001      	b.n	80088a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3740      	adds	r7, #64	; 0x40
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08c      	sub	sp, #48	; 0x30
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <xQueueReceive+0x30>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	623b      	str	r3, [r7, #32]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d103      	bne.n	80088fe <xQueueReceive+0x3e>
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <xQueueReceive+0x42>
 80088fe:	2301      	movs	r3, #1
 8008900:	e000      	b.n	8008904 <xQueueReceive+0x44>
 8008902:	2300      	movs	r3, #0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10a      	bne.n	800891e <xQueueReceive+0x5e>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	61fb      	str	r3, [r7, #28]
}
 800891a:	bf00      	nop
 800891c:	e7fe      	b.n	800891c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800891e:	f001 f83b 	bl	8009998 <xTaskGetSchedulerState>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d102      	bne.n	800892e <xQueueReceive+0x6e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <xQueueReceive+0x72>
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <xQueueReceive+0x74>
 8008932:	2300      	movs	r3, #0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10a      	bne.n	800894e <xQueueReceive+0x8e>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	61bb      	str	r3, [r7, #24]
}
 800894a:	bf00      	nop
 800894c:	e7fe      	b.n	800894c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800894e:	f001 ff69 	bl	800a824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01f      	beq.n	800899e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008962:	f000 f8f7 	bl	8008b54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	1e5a      	subs	r2, r3, #1
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00f      	beq.n	8008996 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	3310      	adds	r3, #16
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fe4e 	bl	800961c <xTaskRemoveFromEventList>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008986:	4b3d      	ldr	r3, [pc, #244]	; (8008a7c <xQueueReceive+0x1bc>)
 8008988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008996:	f001 ff75 	bl	800a884 <vPortExitCritical>
				return pdPASS;
 800899a:	2301      	movs	r3, #1
 800899c:	e069      	b.n	8008a72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089a4:	f001 ff6e 	bl	800a884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e062      	b.n	8008a72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b2:	f107 0310 	add.w	r3, r7, #16
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fe94 	bl	80096e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089c0:	f001 ff60 	bl	800a884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c4:	f000 fc06 	bl	80091d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089c8:	f001 ff2c 	bl	800a824 <vPortEnterCritical>
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089d2:	b25b      	sxtb	r3, r3
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d103      	bne.n	80089e2 <xQueueReceive+0x122>
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e8:	b25b      	sxtb	r3, r3
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d103      	bne.n	80089f8 <xQueueReceive+0x138>
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089f8:	f001 ff44 	bl	800a884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089fc:	1d3a      	adds	r2, r7, #4
 80089fe:	f107 0310 	add.w	r3, r7, #16
 8008a02:	4611      	mov	r1, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fe83 	bl	8009710 <xTaskCheckForTimeOut>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d123      	bne.n	8008a58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a12:	f000 f917 	bl	8008c44 <prvIsQueueEmpty>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d017      	beq.n	8008a4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	3324      	adds	r3, #36	; 0x24
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4611      	mov	r1, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fda9 	bl	800957c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a2c:	f000 f8b8 	bl	8008ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a30:	f000 fbde 	bl	80091f0 <xTaskResumeAll>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d189      	bne.n	800894e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <xQueueReceive+0x1bc>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	e780      	b.n	800894e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4e:	f000 f8a7 	bl	8008ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a52:	f000 fbcd 	bl	80091f0 <xTaskResumeAll>
 8008a56:	e77a      	b.n	800894e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5a:	f000 f8a1 	bl	8008ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a5e:	f000 fbc7 	bl	80091f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a64:	f000 f8ee 	bl	8008c44 <prvIsQueueEmpty>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f43f af6f 	beq.w	800894e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3730      	adds	r7, #48	; 0x30
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d14d      	bne.n	8008b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 ff92 	bl	80099d4 <xTaskPriorityDisinherit>
 8008ab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	609a      	str	r2, [r3, #8]
 8008ab8:	e043      	b.n	8008b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d119      	bne.n	8008af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6858      	ldr	r0, [r3, #4]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	461a      	mov	r2, r3
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	f003 fb07 	bl	800c0de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d32b      	bcc.n	8008b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	605a      	str	r2, [r3, #4]
 8008af2:	e026      	b.n	8008b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68d8      	ldr	r0, [r3, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	461a      	mov	r2, r3
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	f003 faed 	bl	800c0de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	425b      	negs	r3, r3
 8008b0e:	441a      	add	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d207      	bcs.n	8008b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	425b      	negs	r3, r3
 8008b2a:	441a      	add	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d105      	bne.n	8008b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b4a:	697b      	ldr	r3, [r7, #20]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d018      	beq.n	8008b98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	441a      	add	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d303      	bcc.n	8008b88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68d9      	ldr	r1, [r3, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	461a      	mov	r2, r3
 8008b92:	6838      	ldr	r0, [r7, #0]
 8008b94:	f003 faa3 	bl	800c0de <memcpy>
	}
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ba8:	f001 fe3c 	bl	800a824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bb4:	e011      	b.n	8008bda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d012      	beq.n	8008be4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3324      	adds	r3, #36	; 0x24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fd2a 	bl	800961c <xTaskRemoveFromEventList>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bce:	f000 fe01 	bl	80097d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dce9      	bgt.n	8008bb6 <prvUnlockQueue+0x16>
 8008be2:	e000      	b.n	8008be6 <prvUnlockQueue+0x46>
					break;
 8008be4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	22ff      	movs	r2, #255	; 0xff
 8008bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bee:	f001 fe49 	bl	800a884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bf2:	f001 fe17 	bl	800a824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bfe:	e011      	b.n	8008c24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d012      	beq.n	8008c2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3310      	adds	r3, #16
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fd05 	bl	800961c <xTaskRemoveFromEventList>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c18:	f000 fddc 	bl	80097d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dce9      	bgt.n	8008c00 <prvUnlockQueue+0x60>
 8008c2c:	e000      	b.n	8008c30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	22ff      	movs	r2, #255	; 0xff
 8008c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c38:	f001 fe24 	bl	800a884 <vPortExitCritical>
}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c4c:	f001 fdea 	bl	800a824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d102      	bne.n	8008c5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e001      	b.n	8008c62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c62:	f001 fe0f 	bl	800a884 <vPortExitCritical>

	return xReturn;
 8008c66:	68fb      	ldr	r3, [r7, #12]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c78:	f001 fdd4 	bl	800a824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d102      	bne.n	8008c8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e001      	b.n	8008c92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c92:	f001 fdf7 	bl	800a884 <vPortExitCritical>

	return xReturn;
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	e014      	b.n	8008cda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008cb0:	4a0f      	ldr	r2, [pc, #60]	; (8008cf0 <vQueueAddToRegistry+0x50>)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008cbc:	490c      	ldr	r1, [pc, #48]	; (8008cf0 <vQueueAddToRegistry+0x50>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cc6:	4a0a      	ldr	r2, [pc, #40]	; (8008cf0 <vQueueAddToRegistry+0x50>)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cd2:	e006      	b.n	8008ce2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b07      	cmp	r3, #7
 8008cde:	d9e7      	bls.n	8008cb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20001318 	.word	0x20001318

08008cf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d04:	f001 fd8e 	bl	800a824 <vPortEnterCritical>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d0e:	b25b      	sxtb	r3, r3
 8008d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d14:	d103      	bne.n	8008d1e <vQueueWaitForMessageRestricted+0x2a>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d103      	bne.n	8008d34 <vQueueWaitForMessageRestricted+0x40>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d34:	f001 fda6 	bl	800a884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d106      	bne.n	8008d4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	3324      	adds	r3, #36	; 0x24
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	68b9      	ldr	r1, [r7, #8]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 fc3b 	bl	80095c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d4e:	6978      	ldr	r0, [r7, #20]
 8008d50:	f7ff ff26 	bl	8008ba0 <prvUnlockQueue>
	}
 8008d54:	bf00      	nop
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08e      	sub	sp, #56	; 0x38
 8008d60:	af04      	add	r7, sp, #16
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	623b      	str	r3, [r7, #32]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	61fb      	str	r3, [r7, #28]
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008da2:	235c      	movs	r3, #92	; 0x5c
 8008da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b5c      	cmp	r3, #92	; 0x5c
 8008daa:	d00a      	beq.n	8008dc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	61bb      	str	r3, [r7, #24]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008dc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01e      	beq.n	8008e08 <xTaskCreateStatic+0xac>
 8008dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01b      	beq.n	8008e08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008de2:	2300      	movs	r3, #0
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	9302      	str	r3, [sp, #8]
 8008dea:	f107 0314 	add.w	r3, r7, #20
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f850 	bl	8008ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e02:	f000 f8dd 	bl	8008fc0 <prvAddNewTaskToReadyList>
 8008e06:	e001      	b.n	8008e0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e0c:	697b      	ldr	r3, [r7, #20]
	}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3728      	adds	r7, #40	; 0x28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b08c      	sub	sp, #48	; 0x30
 8008e1a:	af04      	add	r7, sp, #16
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 fe1c 	bl	800aa68 <pvPortMalloc>
 8008e30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00e      	beq.n	8008e56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e38:	205c      	movs	r0, #92	; 0x5c
 8008e3a:	f001 fe15 	bl	800aa68 <pvPortMalloc>
 8008e3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8008e4c:	e005      	b.n	8008e5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e4e:	6978      	ldr	r0, [r7, #20]
 8008e50:	f001 fed6 	bl	800ac00 <vPortFree>
 8008e54:	e001      	b.n	8008e5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d017      	beq.n	8008e90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e68:	88fa      	ldrh	r2, [r7, #6]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	9303      	str	r3, [sp, #12]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	9302      	str	r3, [sp, #8]
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 f80e 	bl	8008ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e84:	69f8      	ldr	r0, [r7, #28]
 8008e86:	f000 f89b 	bl	8008fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	e002      	b.n	8008e96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295
 8008e94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e96:	69bb      	ldr	r3, [r7, #24]
	}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	21a5      	movs	r1, #165	; 0xa5
 8008eba:	f003 f87f 	bl	800bfbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	617b      	str	r3, [r7, #20]
}
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d01f      	beq.n	8008f3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008efe:	2300      	movs	r3, #0
 8008f00:	61fb      	str	r3, [r7, #28]
 8008f02:	e012      	b.n	8008f2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	4413      	add	r3, r2
 8008f0a:	7819      	ldrb	r1, [r3, #0]
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	3334      	adds	r3, #52	; 0x34
 8008f14:	460a      	mov	r2, r1
 8008f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d006      	beq.n	8008f32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	3301      	adds	r3, #1
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b0f      	cmp	r3, #15
 8008f2e:	d9e9      	bls.n	8008f04 <prvInitialiseNewTask+0x64>
 8008f30:	e000      	b.n	8008f34 <prvInitialiseNewTask+0x94>
			{
				break;
 8008f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f3c:	e003      	b.n	8008f46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	2b37      	cmp	r3, #55	; 0x37
 8008f4a:	d901      	bls.n	8008f50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f4c:	2337      	movs	r3, #55	; 0x37
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	2200      	movs	r2, #0
 8008f60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	3304      	adds	r3, #4
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff f978 	bl	800825c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	3318      	adds	r3, #24
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff f973 	bl	800825c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	2200      	movs	r2, #0
 8008f90:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	69b8      	ldr	r0, [r7, #24]
 8008fa0:	f001 fb16 	bl	800a5d0 <pxPortInitialiseStack>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fb6:	bf00      	nop
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fc8:	f001 fc2c 	bl	800a824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	; (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	4a2c      	ldr	r2, [pc, #176]	; (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fd6:	4b2c      	ldr	r3, [pc, #176]	; (8009088 <prvAddNewTaskToReadyList+0xc8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fde:	4a2a      	ldr	r2, [pc, #168]	; (8009088 <prvAddNewTaskToReadyList+0xc8>)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fe4:	4b27      	ldr	r3, [pc, #156]	; (8009084 <prvAddNewTaskToReadyList+0xc4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d110      	bne.n	800900e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fec:	f000 fc16 	bl	800981c <prvInitialiseTaskLists>
 8008ff0:	e00d      	b.n	800900e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ff2:	4b26      	ldr	r3, [pc, #152]	; (800908c <prvAddNewTaskToReadyList+0xcc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d109      	bne.n	800900e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ffa:	4b23      	ldr	r3, [pc, #140]	; (8009088 <prvAddNewTaskToReadyList+0xc8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	429a      	cmp	r2, r3
 8009006:	d802      	bhi.n	800900e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009008:	4a1f      	ldr	r2, [pc, #124]	; (8009088 <prvAddNewTaskToReadyList+0xc8>)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800900e:	4b20      	ldr	r3, [pc, #128]	; (8009090 <prvAddNewTaskToReadyList+0xd0>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a1e      	ldr	r2, [pc, #120]	; (8009090 <prvAddNewTaskToReadyList+0xd0>)
 8009016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009018:	4b1d      	ldr	r3, [pc, #116]	; (8009090 <prvAddNewTaskToReadyList+0xd0>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009024:	4b1b      	ldr	r3, [pc, #108]	; (8009094 <prvAddNewTaskToReadyList+0xd4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d903      	bls.n	8009034 <prvAddNewTaskToReadyList+0x74>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	4a18      	ldr	r2, [pc, #96]	; (8009094 <prvAddNewTaskToReadyList+0xd4>)
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4a15      	ldr	r2, [pc, #84]	; (8009098 <prvAddNewTaskToReadyList+0xd8>)
 8009042:	441a      	add	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f7ff f913 	bl	8008276 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009050:	f001 fc18 	bl	800a884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009054:	4b0d      	ldr	r3, [pc, #52]	; (800908c <prvAddNewTaskToReadyList+0xcc>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00e      	beq.n	800907a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800905c:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <prvAddNewTaskToReadyList+0xc8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	429a      	cmp	r2, r3
 8009068:	d207      	bcs.n	800907a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800906a:	4b0c      	ldr	r3, [pc, #48]	; (800909c <prvAddNewTaskToReadyList+0xdc>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	2000182c 	.word	0x2000182c
 8009088:	20001358 	.word	0x20001358
 800908c:	20001838 	.word	0x20001838
 8009090:	20001848 	.word	0x20001848
 8009094:	20001834 	.word	0x20001834
 8009098:	2000135c 	.word	0x2000135c
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d017      	beq.n	80090e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <vTaskDelay+0x60>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <vTaskDelay+0x30>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	60bb      	str	r3, [r7, #8]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80090d0:	f000 f880 	bl	80091d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80090d4:	2100      	movs	r1, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fed8 	bl	8009e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80090dc:	f000 f888 	bl	80091f0 <xTaskResumeAll>
 80090e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d107      	bne.n	80090f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80090e8:	4b06      	ldr	r3, [pc, #24]	; (8009104 <vTaskDelay+0x64>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20001854 	.word	0x20001854
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009116:	463a      	mov	r2, r7
 8009118:	1d39      	adds	r1, r7, #4
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff f848 	bl	80081b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	9202      	str	r2, [sp, #8]
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	2300      	movs	r3, #0
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	2300      	movs	r3, #0
 8009134:	460a      	mov	r2, r1
 8009136:	4921      	ldr	r1, [pc, #132]	; (80091bc <vTaskStartScheduler+0xb4>)
 8009138:	4821      	ldr	r0, [pc, #132]	; (80091c0 <vTaskStartScheduler+0xb8>)
 800913a:	f7ff fe0f 	bl	8008d5c <xTaskCreateStatic>
 800913e:	4603      	mov	r3, r0
 8009140:	4a20      	ldr	r2, [pc, #128]	; (80091c4 <vTaskStartScheduler+0xbc>)
 8009142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009144:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <vTaskStartScheduler+0xbc>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800914c:	2301      	movs	r3, #1
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e001      	b.n	8009156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d102      	bne.n	8009162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800915c:	f000 feea 	bl	8009f34 <xTimerCreateTimerTask>
 8009160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d116      	bne.n	8009196 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	613b      	str	r3, [r7, #16]
}
 800917a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800917c:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <vTaskStartScheduler+0xc0>)
 800917e:	f04f 32ff 	mov.w	r2, #4294967295
 8009182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009184:	4b11      	ldr	r3, [pc, #68]	; (80091cc <vTaskStartScheduler+0xc4>)
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800918a:	4b11      	ldr	r3, [pc, #68]	; (80091d0 <vTaskStartScheduler+0xc8>)
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009190:	f001 faa6 	bl	800a6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009194:	e00e      	b.n	80091b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d10a      	bne.n	80091b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vTaskStartScheduler+0xaa>
}
 80091b4:	bf00      	nop
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	0800f90c 	.word	0x0800f90c
 80091c0:	080097ed 	.word	0x080097ed
 80091c4:	20001850 	.word	0x20001850
 80091c8:	2000184c 	.word	0x2000184c
 80091cc:	20001838 	.word	0x20001838
 80091d0:	20001830 	.word	0x20001830

080091d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <vTaskSuspendAll+0x18>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3301      	adds	r3, #1
 80091de:	4a03      	ldr	r2, [pc, #12]	; (80091ec <vTaskSuspendAll+0x18>)
 80091e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091e2:	bf00      	nop
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	20001854 	.word	0x20001854

080091f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091fe:	4b42      	ldr	r3, [pc, #264]	; (8009308 <xTaskResumeAll+0x118>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <xTaskResumeAll+0x2c>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	603b      	str	r3, [r7, #0]
}
 8009218:	bf00      	nop
 800921a:	e7fe      	b.n	800921a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800921c:	f001 fb02 	bl	800a824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009220:	4b39      	ldr	r3, [pc, #228]	; (8009308 <xTaskResumeAll+0x118>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3b01      	subs	r3, #1
 8009226:	4a38      	ldr	r2, [pc, #224]	; (8009308 <xTaskResumeAll+0x118>)
 8009228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800922a:	4b37      	ldr	r3, [pc, #220]	; (8009308 <xTaskResumeAll+0x118>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d162      	bne.n	80092f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009232:	4b36      	ldr	r3, [pc, #216]	; (800930c <xTaskResumeAll+0x11c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d05e      	beq.n	80092f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800923a:	e02f      	b.n	800929c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800923c:	4b34      	ldr	r3, [pc, #208]	; (8009310 <xTaskResumeAll+0x120>)
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3318      	adds	r3, #24
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff f871 	bl	8008330 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3304      	adds	r3, #4
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff f86c 	bl	8008330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800925c:	4b2d      	ldr	r3, [pc, #180]	; (8009314 <xTaskResumeAll+0x124>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d903      	bls.n	800926c <xTaskResumeAll+0x7c>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	4a2a      	ldr	r2, [pc, #168]	; (8009314 <xTaskResumeAll+0x124>)
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4a27      	ldr	r2, [pc, #156]	; (8009318 <xTaskResumeAll+0x128>)
 800927a:	441a      	add	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f7fe fff7 	bl	8008276 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928c:	4b23      	ldr	r3, [pc, #140]	; (800931c <xTaskResumeAll+0x12c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	429a      	cmp	r2, r3
 8009294:	d302      	bcc.n	800929c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009296:	4b22      	ldr	r3, [pc, #136]	; (8009320 <xTaskResumeAll+0x130>)
 8009298:	2201      	movs	r2, #1
 800929a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800929c:	4b1c      	ldr	r3, [pc, #112]	; (8009310 <xTaskResumeAll+0x120>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1cb      	bne.n	800923c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80092aa:	f000 fb55 	bl	8009958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092ae:	4b1d      	ldr	r3, [pc, #116]	; (8009324 <xTaskResumeAll+0x134>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d010      	beq.n	80092dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092ba:	f000 f847 	bl	800934c <xTaskIncrementTick>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092c4:	4b16      	ldr	r3, [pc, #88]	; (8009320 <xTaskResumeAll+0x130>)
 80092c6:	2201      	movs	r2, #1
 80092c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f1      	bne.n	80092ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <xTaskResumeAll+0x134>)
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092dc:	4b10      	ldr	r3, [pc, #64]	; (8009320 <xTaskResumeAll+0x130>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d009      	beq.n	80092f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092e4:	2301      	movs	r3, #1
 80092e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092e8:	4b0f      	ldr	r3, [pc, #60]	; (8009328 <xTaskResumeAll+0x138>)
 80092ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092f8:	f001 fac4 	bl	800a884 <vPortExitCritical>

	return xAlreadyYielded;
 80092fc:	68bb      	ldr	r3, [r7, #8]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20001854 	.word	0x20001854
 800930c:	2000182c 	.word	0x2000182c
 8009310:	200017ec 	.word	0x200017ec
 8009314:	20001834 	.word	0x20001834
 8009318:	2000135c 	.word	0x2000135c
 800931c:	20001358 	.word	0x20001358
 8009320:	20001840 	.word	0x20001840
 8009324:	2000183c 	.word	0x2000183c
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <xTaskGetTickCount+0x1c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009338:	687b      	ldr	r3, [r7, #4]
}
 800933a:	4618      	mov	r0, r3
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20001830 	.word	0x20001830

0800934c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009356:	4b4f      	ldr	r3, [pc, #316]	; (8009494 <xTaskIncrementTick+0x148>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f040 808f 	bne.w	800947e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009360:	4b4d      	ldr	r3, [pc, #308]	; (8009498 <xTaskIncrementTick+0x14c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009368:	4a4b      	ldr	r2, [pc, #300]	; (8009498 <xTaskIncrementTick+0x14c>)
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d120      	bne.n	80093b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009374:	4b49      	ldr	r3, [pc, #292]	; (800949c <xTaskIncrementTick+0x150>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <xTaskIncrementTick+0x48>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	603b      	str	r3, [r7, #0]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <xTaskIncrementTick+0x46>
 8009394:	4b41      	ldr	r3, [pc, #260]	; (800949c <xTaskIncrementTick+0x150>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	4b41      	ldr	r3, [pc, #260]	; (80094a0 <xTaskIncrementTick+0x154>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a3f      	ldr	r2, [pc, #252]	; (800949c <xTaskIncrementTick+0x150>)
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	4a3f      	ldr	r2, [pc, #252]	; (80094a0 <xTaskIncrementTick+0x154>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	4b3e      	ldr	r3, [pc, #248]	; (80094a4 <xTaskIncrementTick+0x158>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3301      	adds	r3, #1
 80093ae:	4a3d      	ldr	r2, [pc, #244]	; (80094a4 <xTaskIncrementTick+0x158>)
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	f000 fad1 	bl	8009958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093b6:	4b3c      	ldr	r3, [pc, #240]	; (80094a8 <xTaskIncrementTick+0x15c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d349      	bcc.n	8009454 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093c0:	4b36      	ldr	r3, [pc, #216]	; (800949c <xTaskIncrementTick+0x150>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d104      	bne.n	80093d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ca:	4b37      	ldr	r3, [pc, #220]	; (80094a8 <xTaskIncrementTick+0x15c>)
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	601a      	str	r2, [r3, #0]
					break;
 80093d2:	e03f      	b.n	8009454 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d4:	4b31      	ldr	r3, [pc, #196]	; (800949c <xTaskIncrementTick+0x150>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d203      	bcs.n	80093f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093ec:	4a2e      	ldr	r2, [pc, #184]	; (80094a8 <xTaskIncrementTick+0x15c>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093f2:	e02f      	b.n	8009454 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe ff99 	bl	8008330 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d004      	beq.n	8009410 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3318      	adds	r3, #24
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe ff90 	bl	8008330 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009414:	4b25      	ldr	r3, [pc, #148]	; (80094ac <xTaskIncrementTick+0x160>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d903      	bls.n	8009424 <xTaskIncrementTick+0xd8>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	4a22      	ldr	r2, [pc, #136]	; (80094ac <xTaskIncrementTick+0x160>)
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4a1f      	ldr	r2, [pc, #124]	; (80094b0 <xTaskIncrementTick+0x164>)
 8009432:	441a      	add	r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	3304      	adds	r3, #4
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f7fe ff1b 	bl	8008276 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <xTaskIncrementTick+0x168>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944a:	429a      	cmp	r2, r3
 800944c:	d3b8      	bcc.n	80093c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800944e:	2301      	movs	r3, #1
 8009450:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009452:	e7b5      	b.n	80093c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009454:	4b17      	ldr	r3, [pc, #92]	; (80094b4 <xTaskIncrementTick+0x168>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	4915      	ldr	r1, [pc, #84]	; (80094b0 <xTaskIncrementTick+0x164>)
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d901      	bls.n	8009470 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800946c:	2301      	movs	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009470:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <xTaskIncrementTick+0x16c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d007      	beq.n	8009488 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e004      	b.n	8009488 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <xTaskIncrementTick+0x170>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <xTaskIncrementTick+0x170>)
 8009486:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009488:	697b      	ldr	r3, [r7, #20]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20001854 	.word	0x20001854
 8009498:	20001830 	.word	0x20001830
 800949c:	200017e4 	.word	0x200017e4
 80094a0:	200017e8 	.word	0x200017e8
 80094a4:	20001844 	.word	0x20001844
 80094a8:	2000184c 	.word	0x2000184c
 80094ac:	20001834 	.word	0x20001834
 80094b0:	2000135c 	.word	0x2000135c
 80094b4:	20001358 	.word	0x20001358
 80094b8:	20001840 	.word	0x20001840
 80094bc:	2000183c 	.word	0x2000183c

080094c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094c6:	4b28      	ldr	r3, [pc, #160]	; (8009568 <vTaskSwitchContext+0xa8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094ce:	4b27      	ldr	r3, [pc, #156]	; (800956c <vTaskSwitchContext+0xac>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094d4:	e041      	b.n	800955a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80094d6:	4b25      	ldr	r3, [pc, #148]	; (800956c <vTaskSwitchContext+0xac>)
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094dc:	4b24      	ldr	r3, [pc, #144]	; (8009570 <vTaskSwitchContext+0xb0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	e010      	b.n	8009506 <vTaskSwitchContext+0x46>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <vTaskSwitchContext+0x40>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	607b      	str	r3, [r7, #4]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vTaskSwitchContext+0x3e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3b01      	subs	r3, #1
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	491b      	ldr	r1, [pc, #108]	; (8009574 <vTaskSwitchContext+0xb4>)
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0e4      	beq.n	80094e4 <vTaskSwitchContext+0x24>
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4a13      	ldr	r2, [pc, #76]	; (8009574 <vTaskSwitchContext+0xb4>)
 8009526:	4413      	add	r3, r2
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	605a      	str	r2, [r3, #4]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	3308      	adds	r3, #8
 800953c:	429a      	cmp	r2, r3
 800953e:	d104      	bne.n	800954a <vTaskSwitchContext+0x8a>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	605a      	str	r2, [r3, #4]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4a09      	ldr	r2, [pc, #36]	; (8009578 <vTaskSwitchContext+0xb8>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	4a06      	ldr	r2, [pc, #24]	; (8009570 <vTaskSwitchContext+0xb0>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6013      	str	r3, [r2, #0]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20001854 	.word	0x20001854
 800956c:	20001840 	.word	0x20001840
 8009570:	20001834 	.word	0x20001834
 8009574:	2000135c 	.word	0x2000135c
 8009578:	20001358 	.word	0x20001358

0800957c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095a2:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <vTaskPlaceOnEventList+0x44>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3318      	adds	r3, #24
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7fe fe87 	bl	80082be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095b0:	2101      	movs	r1, #1
 80095b2:	6838      	ldr	r0, [r7, #0]
 80095b4:	f000 fc6a 	bl	8009e8c <prvAddCurrentTaskToDelayedList>
}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20001358 	.word	0x20001358

080095c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10a      	bne.n	80095ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	617b      	str	r3, [r7, #20]
}
 80095e8:	bf00      	nop
 80095ea:	e7fe      	b.n	80095ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <vTaskPlaceOnEventListRestricted+0x54>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3318      	adds	r3, #24
 80095f2:	4619      	mov	r1, r3
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f7fe fe3e 	bl	8008276 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009600:	f04f 33ff 	mov.w	r3, #4294967295
 8009604:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f000 fc3f 	bl	8009e8c <prvAddCurrentTaskToDelayedList>
	}
 800960e:	bf00      	nop
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20001358 	.word	0x20001358

0800961c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10a      	bne.n	8009648 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	60fb      	str	r3, [r7, #12]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	3318      	adds	r3, #24
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe fe6f 	bl	8008330 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009652:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <xTaskRemoveFromEventList+0xb0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d11d      	bne.n	8009696 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	3304      	adds	r3, #4
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe fe66 	bl	8008330 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009668:	4b19      	ldr	r3, [pc, #100]	; (80096d0 <xTaskRemoveFromEventList+0xb4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d903      	bls.n	8009678 <xTaskRemoveFromEventList+0x5c>
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	4a16      	ldr	r2, [pc, #88]	; (80096d0 <xTaskRemoveFromEventList+0xb4>)
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4a13      	ldr	r2, [pc, #76]	; (80096d4 <xTaskRemoveFromEventList+0xb8>)
 8009686:	441a      	add	r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	3304      	adds	r3, #4
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f7fe fdf1 	bl	8008276 <vListInsertEnd>
 8009694:	e005      	b.n	80096a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	3318      	adds	r3, #24
 800969a:	4619      	mov	r1, r3
 800969c:	480e      	ldr	r0, [pc, #56]	; (80096d8 <xTaskRemoveFromEventList+0xbc>)
 800969e:	f7fe fdea 	bl	8008276 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a6:	4b0d      	ldr	r3, [pc, #52]	; (80096dc <xTaskRemoveFromEventList+0xc0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d905      	bls.n	80096bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80096b0:	2301      	movs	r3, #1
 80096b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <xTaskRemoveFromEventList+0xc4>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e001      	b.n	80096c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80096c0:	697b      	ldr	r3, [r7, #20]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20001854 	.word	0x20001854
 80096d0:	20001834 	.word	0x20001834
 80096d4:	2000135c 	.word	0x2000135c
 80096d8:	200017ec 	.word	0x200017ec
 80096dc:	20001358 	.word	0x20001358
 80096e0:	20001840 	.word	0x20001840

080096e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <vTaskInternalSetTimeOutState+0x24>)
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <vTaskInternalSetTimeOutState+0x28>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	605a      	str	r2, [r3, #4]
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	20001844 	.word	0x20001844
 800970c:	20001830 	.word	0x20001830

08009710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	60fb      	str	r3, [r7, #12]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009752:	f001 f867 	bl	800a824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009756:	4b1d      	ldr	r3, [pc, #116]	; (80097cc <xTaskCheckForTimeOut+0xbc>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d102      	bne.n	8009776 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	e023      	b.n	80097be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	4b15      	ldr	r3, [pc, #84]	; (80097d0 <xTaskCheckForTimeOut+0xc0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d007      	beq.n	8009792 <xTaskCheckForTimeOut+0x82>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	429a      	cmp	r2, r3
 800978a:	d302      	bcc.n	8009792 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800978c:	2301      	movs	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	e015      	b.n	80097be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	429a      	cmp	r2, r3
 800979a:	d20b      	bcs.n	80097b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	1ad2      	subs	r2, r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff ff9b 	bl	80096e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	61fb      	str	r3, [r7, #28]
 80097b2:	e004      	b.n	80097be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80097ba:	2301      	movs	r3, #1
 80097bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80097be:	f001 f861 	bl	800a884 <vPortExitCritical>

	return xReturn;
 80097c2:	69fb      	ldr	r3, [r7, #28]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20001830 	.word	0x20001830
 80097d0:	20001844 	.word	0x20001844

080097d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097d8:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <vTaskMissedYield+0x14>)
 80097da:	2201      	movs	r2, #1
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20001840 	.word	0x20001840

080097ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097f4:	f000 f852 	bl	800989c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097f8:	4b06      	ldr	r3, [pc, #24]	; (8009814 <prvIdleTask+0x28>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d9f9      	bls.n	80097f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <prvIdleTask+0x2c>)
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009810:	e7f0      	b.n	80097f4 <prvIdleTask+0x8>
 8009812:	bf00      	nop
 8009814:	2000135c 	.word	0x2000135c
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009822:	2300      	movs	r3, #0
 8009824:	607b      	str	r3, [r7, #4]
 8009826:	e00c      	b.n	8009842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4a12      	ldr	r2, [pc, #72]	; (800987c <prvInitialiseTaskLists+0x60>)
 8009834:	4413      	add	r3, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fcf0 	bl	800821c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3301      	adds	r3, #1
 8009840:	607b      	str	r3, [r7, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b37      	cmp	r3, #55	; 0x37
 8009846:	d9ef      	bls.n	8009828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009848:	480d      	ldr	r0, [pc, #52]	; (8009880 <prvInitialiseTaskLists+0x64>)
 800984a:	f7fe fce7 	bl	800821c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800984e:	480d      	ldr	r0, [pc, #52]	; (8009884 <prvInitialiseTaskLists+0x68>)
 8009850:	f7fe fce4 	bl	800821c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009854:	480c      	ldr	r0, [pc, #48]	; (8009888 <prvInitialiseTaskLists+0x6c>)
 8009856:	f7fe fce1 	bl	800821c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800985a:	480c      	ldr	r0, [pc, #48]	; (800988c <prvInitialiseTaskLists+0x70>)
 800985c:	f7fe fcde 	bl	800821c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009860:	480b      	ldr	r0, [pc, #44]	; (8009890 <prvInitialiseTaskLists+0x74>)
 8009862:	f7fe fcdb 	bl	800821c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009866:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <prvInitialiseTaskLists+0x78>)
 8009868:	4a05      	ldr	r2, [pc, #20]	; (8009880 <prvInitialiseTaskLists+0x64>)
 800986a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <prvInitialiseTaskLists+0x7c>)
 800986e:	4a05      	ldr	r2, [pc, #20]	; (8009884 <prvInitialiseTaskLists+0x68>)
 8009870:	601a      	str	r2, [r3, #0]
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	2000135c 	.word	0x2000135c
 8009880:	200017bc 	.word	0x200017bc
 8009884:	200017d0 	.word	0x200017d0
 8009888:	200017ec 	.word	0x200017ec
 800988c:	20001800 	.word	0x20001800
 8009890:	20001818 	.word	0x20001818
 8009894:	200017e4 	.word	0x200017e4
 8009898:	200017e8 	.word	0x200017e8

0800989c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098a2:	e019      	b.n	80098d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80098a4:	f000 ffbe 	bl	800a824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a8:	4b10      	ldr	r3, [pc, #64]	; (80098ec <prvCheckTasksWaitingTermination+0x50>)
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fd3b 	bl	8008330 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <prvCheckTasksWaitingTermination+0x54>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3b01      	subs	r3, #1
 80098c0:	4a0b      	ldr	r2, [pc, #44]	; (80098f0 <prvCheckTasksWaitingTermination+0x54>)
 80098c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098c4:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <prvCheckTasksWaitingTermination+0x58>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	4a0a      	ldr	r2, [pc, #40]	; (80098f4 <prvCheckTasksWaitingTermination+0x58>)
 80098cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80098ce:	f000 ffd9 	bl	800a884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f810 	bl	80098f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098d8:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <prvCheckTasksWaitingTermination+0x58>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e1      	bne.n	80098a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20001800 	.word	0x20001800
 80098f0:	2000182c 	.word	0x2000182c
 80098f4:	20001814 	.word	0x20001814

080098f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009906:	2b00      	cmp	r3, #0
 8009908:	d108      	bne.n	800991c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990e:	4618      	mov	r0, r3
 8009910:	f001 f976 	bl	800ac00 <vPortFree>
				vPortFree( pxTCB );
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f973 	bl	800ac00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800991a:	e018      	b.n	800994e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009922:	2b01      	cmp	r3, #1
 8009924:	d103      	bne.n	800992e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 f96a 	bl	800ac00 <vPortFree>
	}
 800992c:	e00f      	b.n	800994e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009934:	2b02      	cmp	r3, #2
 8009936:	d00a      	beq.n	800994e <prvDeleteTCB+0x56>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	60fb      	str	r3, [r7, #12]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <prvDeleteTCB+0x54>
	}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800995e:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <prvResetNextTaskUnblockTime+0x38>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <prvResetNextTaskUnblockTime+0x3c>)
 800996a:	f04f 32ff 	mov.w	r2, #4294967295
 800996e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009970:	e008      	b.n	8009984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <prvResetNextTaskUnblockTime+0x38>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	4a04      	ldr	r2, [pc, #16]	; (8009994 <prvResetNextTaskUnblockTime+0x3c>)
 8009982:	6013      	str	r3, [r2, #0]
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	200017e4 	.word	0x200017e4
 8009994:	2000184c 	.word	0x2000184c

08009998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800999e:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <xTaskGetSchedulerState+0x34>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d102      	bne.n	80099ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099a6:	2301      	movs	r3, #1
 80099a8:	607b      	str	r3, [r7, #4]
 80099aa:	e008      	b.n	80099be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ac:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <xTaskGetSchedulerState+0x38>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099b4:	2302      	movs	r3, #2
 80099b6:	607b      	str	r3, [r7, #4]
 80099b8:	e001      	b.n	80099be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099ba:	2300      	movs	r3, #0
 80099bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099be:	687b      	ldr	r3, [r7, #4]
	}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	20001838 	.word	0x20001838
 80099d0:	20001854 	.word	0x20001854

080099d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d056      	beq.n	8009a98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099ea:	4b2e      	ldr	r3, [pc, #184]	; (8009aa4 <xTaskPriorityDisinherit+0xd0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d00a      	beq.n	8009a0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	60fb      	str	r3, [r7, #12]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	60bb      	str	r3, [r7, #8]
}
 8009a24:	bf00      	nop
 8009a26:	e7fe      	b.n	8009a26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2c:	1e5a      	subs	r2, r3, #1
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d02c      	beq.n	8009a98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d128      	bne.n	8009a98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fc70 	bl	8008330 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <xTaskPriorityDisinherit+0xd4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d903      	bls.n	8009a78 <xTaskPriorityDisinherit+0xa4>
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	4a0c      	ldr	r2, [pc, #48]	; (8009aa8 <xTaskPriorityDisinherit+0xd4>)
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a09      	ldr	r2, [pc, #36]	; (8009aac <xTaskPriorityDisinherit+0xd8>)
 8009a86:	441a      	add	r2, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe fbf1 	bl	8008276 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a98:	697b      	ldr	r3, [r7, #20]
	}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20001358 	.word	0x20001358
 8009aa8:	20001834 	.word	0x20001834
 8009aac:	2000135c 	.word	0x2000135c

08009ab0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009abe:	f000 feb1 	bl	800a824 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ac2:	4b26      	ldr	r3, [pc, #152]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d01a      	beq.n	8009b06 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009ad0:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	43d2      	mvns	r2, r2
 8009ada:	400a      	ands	r2, r1
 8009adc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009ade:	4b1f      	ldr	r3, [pc, #124]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aee:	2101      	movs	r1, #1
 8009af0:	6838      	ldr	r0, [r7, #0]
 8009af2:	f000 f9cb 	bl	8009e8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009af6:	4b1a      	ldr	r3, [pc, #104]	; (8009b60 <xTaskNotifyWait+0xb0>)
 8009af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b06:	f000 febd 	bl	800a884 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009b0a:	f000 fe8b 	bl	800a824 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d004      	beq.n	8009b1e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009b14:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d002      	beq.n	8009b32 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e008      	b.n	8009b44 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009b32:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	43d2      	mvns	r2, r2
 8009b3c:	400a      	ands	r2, r1
 8009b3e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <xTaskNotifyWait+0xac>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8009b4e:	f000 fe99 	bl	800a884 <vPortExitCritical>

		return xReturn;
 8009b52:	697b      	ldr	r3, [r7, #20]
	}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20001358 	.word	0x20001358
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	603b      	str	r3, [r7, #0]
 8009b70:	4613      	mov	r3, r2
 8009b72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009b74:	2301      	movs	r3, #1
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <xTaskGenericNotify+0x30>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	61bb      	str	r3, [r7, #24]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009b98:	f000 fe44 	bl	800a824 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009bb0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d828      	bhi.n	8009c12 <xTaskGenericNotify+0xae>
 8009bc0:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <xTaskGenericNotify+0x64>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009c33 	.word	0x08009c33
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009beb 	.word	0x08009beb
 8009bd4:	08009bf7 	.word	0x08009bf7
 8009bd8:	08009bff 	.word	0x08009bff
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009be8:	e026      	b.n	8009c38 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009bf4:	e020      	b.n	8009c38 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009bfc:	e01c      	b.n	8009c38 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009bfe:	7ffb      	ldrb	r3, [r7, #31]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d003      	beq.n	8009c0c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009c0a:	e015      	b.n	8009c38 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009c10:	e012      	b.n	8009c38 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d00c      	beq.n	8009c36 <xTaskGenericNotify+0xd2>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	617b      	str	r3, [r7, #20]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xTaskGenericNotify+0xcc>
					break;
 8009c32:	bf00      	nop
 8009c34:	e000      	b.n	8009c38 <xTaskGenericNotify+0xd4>

					break;
 8009c36:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009c38:	7ffb      	ldrb	r3, [r7, #31]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d13a      	bne.n	8009cb4 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fb74 	bl	8008330 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4c:	4b1d      	ldr	r3, [pc, #116]	; (8009cc4 <xTaskGenericNotify+0x160>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <xTaskGenericNotify+0xf8>
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <xTaskGenericNotify+0x160>)
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <xTaskGenericNotify+0x164>)
 8009c6a:	441a      	add	r2, r3
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7fe faff 	bl	8008276 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <xTaskGenericNotify+0x132>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <xTaskGenericNotify+0x168>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d907      	bls.n	8009cb4 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <xTaskGenericNotify+0x16c>)
 8009ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009cb4:	f000 fde6 	bl	800a884 <vPortExitCritical>

		return xReturn;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	; 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20001834 	.word	0x20001834
 8009cc8:	2000135c 	.word	0x2000135c
 8009ccc:	20001358 	.word	0x20001358
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08e      	sub	sp, #56	; 0x38
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	603b      	str	r3, [r7, #0]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d04:	f000 fe70 	bl	800a9e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	623a      	str	r2, [r7, #32]
 8009d22:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009d24:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d26:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d828      	bhi.n	8009da0 <xTaskGenericNotifyFromISR+0xcc>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <xTaskGenericNotifyFromISR+0x80>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009dc1 	.word	0x08009dc1
 8009d58:	08009d69 	.word	0x08009d69
 8009d5c:	08009d77 	.word	0x08009d77
 8009d60:	08009d83 	.word	0x08009d83
 8009d64:	08009d8b 	.word	0x08009d8b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009d74:	e027      	b.n	8009dc6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7a:	1c5a      	adds	r2, r3, #1
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009d80:	e021      	b.n	8009dc6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8009d88:	e01d      	b.n	8009dc6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d003      	beq.n	8009d9a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d98:	e015      	b.n	8009dc6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009d9e:	e012      	b.n	8009dc6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da8:	d00c      	beq.n	8009dc4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	61bb      	str	r3, [r7, #24]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <xTaskGenericNotifyFromISR+0xea>
					break;
 8009dc0:	bf00      	nop
 8009dc2:	e000      	b.n	8009dc6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8009dc4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d146      	bne.n	8009e5c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	617b      	str	r3, [r7, #20]
}
 8009de8:	bf00      	nop
 8009dea:	e7fe      	b.n	8009dea <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dec:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <xTaskGenericNotifyFromISR+0x1a0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11d      	bne.n	8009e30 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	3304      	adds	r3, #4
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fe fa99 	bl	8008330 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e02:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <xTaskGenericNotifyFromISR+0x1a4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d903      	bls.n	8009e12 <xTaskGenericNotifyFromISR+0x13e>
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <xTaskGenericNotifyFromISR+0x1a4>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a17      	ldr	r2, [pc, #92]	; (8009e7c <xTaskGenericNotifyFromISR+0x1a8>)
 8009e20:	441a      	add	r2, r3
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fe fa24 	bl	8008276 <vListInsertEnd>
 8009e2e:	e005      	b.n	8009e3c <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	3318      	adds	r3, #24
 8009e34:	4619      	mov	r1, r3
 8009e36:	4812      	ldr	r0, [pc, #72]	; (8009e80 <xTaskGenericNotifyFromISR+0x1ac>)
 8009e38:	f7fe fa1d 	bl	8008276 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <xTaskGenericNotifyFromISR+0x1b0>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d908      	bls.n	8009e5c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e52:	2201      	movs	r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009e56:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <xTaskGenericNotifyFromISR+0x1b4>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f383 8811 	msr	BASEPRI, r3
}
 8009e66:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3738      	adds	r7, #56	; 0x38
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001854 	.word	0x20001854
 8009e78:	20001834 	.word	0x20001834
 8009e7c:	2000135c 	.word	0x2000135c
 8009e80:	200017ec 	.word	0x200017ec
 8009e84:	20001358 	.word	0x20001358
 8009e88:	20001840 	.word	0x20001840

08009e8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e96:	4b21      	ldr	r3, [pc, #132]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x90>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e9c:	4b20      	ldr	r3, [pc, #128]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fa44 	bl	8008330 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eae:	d10a      	bne.n	8009ec6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d007      	beq.n	8009ec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4819      	ldr	r0, [pc, #100]	; (8009f24 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ec0:	f7fe f9d9 	bl	8008276 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ec4:	e026      	b.n	8009f14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4413      	add	r3, r2
 8009ecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d209      	bcs.n	8009ef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ede:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4610      	mov	r0, r2
 8009eec:	f7fe f9e7 	bl	80082be <vListInsert>
}
 8009ef0:	e010      	b.n	8009f14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ef2:	4b0e      	ldr	r3, [pc, #56]	; (8009f2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7fe f9dd 	bl	80082be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d202      	bcs.n	8009f14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f0e:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	6013      	str	r3, [r2, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20001830 	.word	0x20001830
 8009f20:	20001358 	.word	0x20001358
 8009f24:	20001818 	.word	0x20001818
 8009f28:	200017e8 	.word	0x200017e8
 8009f2c:	200017e4 	.word	0x200017e4
 8009f30:	2000184c 	.word	0x2000184c

08009f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08a      	sub	sp, #40	; 0x28
 8009f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f3e:	f000 fb07 	bl	800a550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <xTimerCreateTimerTask+0x80>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d021      	beq.n	8009f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f52:	1d3a      	adds	r2, r7, #4
 8009f54:	f107 0108 	add.w	r1, r7, #8
 8009f58:	f107 030c 	add.w	r3, r7, #12
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe f943 	bl	80081e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	9202      	str	r2, [sp, #8]
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2300      	movs	r3, #0
 8009f72:	460a      	mov	r2, r1
 8009f74:	4910      	ldr	r1, [pc, #64]	; (8009fb8 <xTimerCreateTimerTask+0x84>)
 8009f76:	4811      	ldr	r0, [pc, #68]	; (8009fbc <xTimerCreateTimerTask+0x88>)
 8009f78:	f7fe fef0 	bl	8008d5c <xTaskCreateStatic>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	4a10      	ldr	r2, [pc, #64]	; (8009fc0 <xTimerCreateTimerTask+0x8c>)
 8009f80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f82:	4b0f      	ldr	r3, [pc, #60]	; (8009fc0 <xTimerCreateTimerTask+0x8c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	613b      	str	r3, [r7, #16]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009faa:	697b      	ldr	r3, [r7, #20]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20001888 	.word	0x20001888
 8009fb8:	0800f914 	.word	0x0800f914
 8009fbc:	0800a0f9 	.word	0x0800a0f9
 8009fc0:	2000188c 	.word	0x2000188c

08009fc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	; 0x28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	623b      	str	r3, [r7, #32]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ff2:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <xTimerGenericCommand+0x98>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d02a      	beq.n	800a050 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b05      	cmp	r3, #5
 800a00a:	dc18      	bgt.n	800a03e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a00c:	f7ff fcc4 	bl	8009998 <xTaskGetSchedulerState>
 800a010:	4603      	mov	r3, r0
 800a012:	2b02      	cmp	r3, #2
 800a014:	d109      	bne.n	800a02a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a016:	4b11      	ldr	r3, [pc, #68]	; (800a05c <xTimerGenericCommand+0x98>)
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f107 0110 	add.w	r1, r7, #16
 800a01e:	2300      	movs	r3, #0
 800a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a022:	f7fe fab3 	bl	800858c <xQueueGenericSend>
 800a026:	6278      	str	r0, [r7, #36]	; 0x24
 800a028:	e012      	b.n	800a050 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a02a:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <xTimerGenericCommand+0x98>)
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	f107 0110 	add.w	r1, r7, #16
 800a032:	2300      	movs	r3, #0
 800a034:	2200      	movs	r2, #0
 800a036:	f7fe faa9 	bl	800858c <xQueueGenericSend>
 800a03a:	6278      	str	r0, [r7, #36]	; 0x24
 800a03c:	e008      	b.n	800a050 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a03e:	4b07      	ldr	r3, [pc, #28]	; (800a05c <xTimerGenericCommand+0x98>)
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	f107 0110 	add.w	r1, r7, #16
 800a046:	2300      	movs	r3, #0
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	f7fe fb9d 	bl	8008788 <xQueueGenericSendFromISR>
 800a04e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a052:	4618      	mov	r0, r3
 800a054:	3728      	adds	r7, #40	; 0x28
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20001888 	.word	0x20001888

0800a060 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af02      	add	r7, sp, #8
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06a:	4b22      	ldr	r3, [pc, #136]	; (800a0f4 <prvProcessExpiredTimer+0x94>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	3304      	adds	r3, #4
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe f959 	bl	8008330 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d022      	beq.n	800a0d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	699a      	ldr	r2, [r3, #24]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	18d1      	adds	r1, r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	6978      	ldr	r0, [r7, #20]
 800a09a:	f000 f8d1 	bl	800a240 <prvInsertTimerInActiveList>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01f      	beq.n	800a0e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f7ff ff88 	bl	8009fc4 <xTimerGenericCommand>
 800a0b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d113      	bne.n	800a0e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60fb      	str	r3, [r7, #12]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d8:	f023 0301 	bic.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	6978      	ldr	r0, [r7, #20]
 800a0ea:	4798      	blx	r3
}
 800a0ec:	bf00      	nop
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20001880 	.word	0x20001880

0800a0f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a100:	f107 0308 	add.w	r3, r7, #8
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f857 	bl	800a1b8 <prvGetNextExpireTime>
 800a10a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f803 	bl	800a11c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a116:	f000 f8d5 	bl	800a2c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a11a:	e7f1      	b.n	800a100 <prvTimerTask+0x8>

0800a11c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a126:	f7ff f855 	bl	80091d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f866 	bl	800a200 <prvSampleTimeNow>
 800a134:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d130      	bne.n	800a19e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10a      	bne.n	800a158 <prvProcessTimerOrBlockTask+0x3c>
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	429a      	cmp	r2, r3
 800a148:	d806      	bhi.n	800a158 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a14a:	f7ff f851 	bl	80091f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff ff85 	bl	800a060 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a156:	e024      	b.n	800a1a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d008      	beq.n	800a170 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <prvProcessTimerOrBlockTask+0x90>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <prvProcessTimerOrBlockTask+0x50>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <prvProcessTimerOrBlockTask+0x52>
 800a16c:	2300      	movs	r3, #0
 800a16e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a170:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <prvProcessTimerOrBlockTask+0x94>)
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4619      	mov	r1, r3
 800a17e:	f7fe fdb9 	bl	8008cf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a182:	f7ff f835 	bl	80091f0 <xTaskResumeAll>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <prvProcessTimerOrBlockTask+0x98>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	f3bf 8f6f 	isb	sy
}
 800a19c:	e001      	b.n	800a1a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a19e:	f7ff f827 	bl	80091f0 <xTaskResumeAll>
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20001884 	.word	0x20001884
 800a1b0:	20001888 	.word	0x20001888
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <prvGetNextExpireTime+0x44>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <prvGetNextExpireTime+0x16>
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	e000      	b.n	800a1d0 <prvGetNextExpireTime+0x18>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1dc:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <prvGetNextExpireTime+0x44>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	e001      	b.n	800a1ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	20001880 	.word	0x20001880

0800a200 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a208:	f7ff f890 	bl	800932c <xTaskGetTickCount>
 800a20c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a20e:	4b0b      	ldr	r3, [pc, #44]	; (800a23c <prvSampleTimeNow+0x3c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	429a      	cmp	r2, r3
 800a216:	d205      	bcs.n	800a224 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a218:	f000 f936 	bl	800a488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e002      	b.n	800a22a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a22a:	4a04      	ldr	r2, [pc, #16]	; (800a23c <prvSampleTimeNow+0x3c>)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a230:	68fb      	ldr	r3, [r7, #12]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20001890 	.word	0x20001890

0800a240 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a24e:	2300      	movs	r3, #0
 800a250:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d812      	bhi.n	800a28c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	1ad2      	subs	r2, r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	429a      	cmp	r2, r3
 800a272:	d302      	bcc.n	800a27a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	e01b      	b.n	800a2b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a27a:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <prvInsertTimerInActiveList+0x7c>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3304      	adds	r3, #4
 800a282:	4619      	mov	r1, r3
 800a284:	4610      	mov	r0, r2
 800a286:	f7fe f81a 	bl	80082be <vListInsert>
 800a28a:	e012      	b.n	800a2b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	d206      	bcs.n	800a2a2 <prvInsertTimerInActiveList+0x62>
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d302      	bcc.n	800a2a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a29c:	2301      	movs	r3, #1
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	e007      	b.n	800a2b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2a2:	4b07      	ldr	r3, [pc, #28]	; (800a2c0 <prvInsertTimerInActiveList+0x80>)
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f7fe f806 	bl	80082be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2b2:	697b      	ldr	r3, [r7, #20]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20001884 	.word	0x20001884
 800a2c0:	20001880 	.word	0x20001880

0800a2c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08e      	sub	sp, #56	; 0x38
 800a2c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2ca:	e0ca      	b.n	800a462 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da18      	bge.n	800a304 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2d2:	1d3b      	adds	r3, r7, #4
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	61fb      	str	r3, [r7, #28]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fa:	6850      	ldr	r0, [r2, #4]
 800a2fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fe:	6892      	ldr	r2, [r2, #8]
 800a300:	4611      	mov	r1, r2
 800a302:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	f2c0 80ab 	blt.w	800a462 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d004      	beq.n	800a322 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	3304      	adds	r3, #4
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe f807 	bl	8008330 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a322:	463b      	mov	r3, r7
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff ff6b 	bl	800a200 <prvSampleTimeNow>
 800a32a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b09      	cmp	r3, #9
 800a330:	f200 8096 	bhi.w	800a460 <prvProcessReceivedCommands+0x19c>
 800a334:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <prvProcessReceivedCommands+0x78>)
 800a336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33a:	bf00      	nop
 800a33c:	0800a365 	.word	0x0800a365
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a365 	.word	0x0800a365
 800a348:	0800a3d9 	.word	0x0800a3d9
 800a34c:	0800a3ed 	.word	0x0800a3ed
 800a350:	0800a437 	.word	0x0800a437
 800a354:	0800a365 	.word	0x0800a365
 800a358:	0800a365 	.word	0x0800a365
 800a35c:	0800a3d9 	.word	0x0800a3d9
 800a360:	0800a3ed 	.word	0x0800a3ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	18d1      	adds	r1, r2, r3
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a384:	f7ff ff5c 	bl	800a240 <prvInsertTimerInActiveList>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d069      	beq.n	800a462 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d05e      	beq.n	800a462 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	441a      	add	r2, r3
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b6:	f7ff fe05 	bl	8009fc4 <xTimerGenericCommand>
 800a3ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d14f      	bne.n	800a462 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	61bb      	str	r3, [r7, #24]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3de:	f023 0301 	bic.w	r3, r3, #1
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a3ea:	e03a      	b.n	800a462 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	617b      	str	r3, [r7, #20]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	699a      	ldr	r2, [r3, #24]
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	18d1      	adds	r1, r2, r3
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a430:	f7ff ff06 	bl	800a240 <prvInsertTimerInActiveList>
					break;
 800a434:	e015      	b.n	800a462 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a446:	f000 fbdb 	bl	800ac00 <vPortFree>
 800a44a:	e00a      	b.n	800a462 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a452:	f023 0301 	bic.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a45e:	e000      	b.n	800a462 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a460:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a462:	4b08      	ldr	r3, [pc, #32]	; (800a484 <prvProcessReceivedCommands+0x1c0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	1d39      	adds	r1, r7, #4
 800a468:	2200      	movs	r2, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fa28 	bl	80088c0 <xQueueReceive>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	f47f af2a 	bne.w	800a2cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	3730      	adds	r7, #48	; 0x30
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20001888 	.word	0x20001888

0800a488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a48e:	e048      	b.n	800a522 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a490:	4b2d      	ldr	r3, [pc, #180]	; (800a548 <prvSwitchTimerLists+0xc0>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a49a:	4b2b      	ldr	r3, [pc, #172]	; (800a548 <prvSwitchTimerLists+0xc0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fd ff41 	bl	8008330 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d02e      	beq.n	800a522 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d90e      	bls.n	800a4f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4e2:	4b19      	ldr	r3, [pc, #100]	; (800a548 <prvSwitchTimerLists+0xc0>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fd fee6 	bl	80082be <vListInsert>
 800a4f2:	e016      	b.n	800a522 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fd60 	bl	8009fc4 <xTimerGenericCommand>
 800a504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	603b      	str	r3, [r7, #0]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a522:	4b09      	ldr	r3, [pc, #36]	; (800a548 <prvSwitchTimerLists+0xc0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1b1      	bne.n	800a490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <prvSwitchTimerLists+0xc0>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a532:	4b06      	ldr	r3, [pc, #24]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a04      	ldr	r2, [pc, #16]	; (800a548 <prvSwitchTimerLists+0xc0>)
 800a538:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a53a:	4a04      	ldr	r2, [pc, #16]	; (800a54c <prvSwitchTimerLists+0xc4>)
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	6013      	str	r3, [r2, #0]
}
 800a540:	bf00      	nop
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20001880 	.word	0x20001880
 800a54c:	20001884 	.word	0x20001884

0800a550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a556:	f000 f965 	bl	800a824 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a55a:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <prvCheckForValidListAndQueue+0x60>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d120      	bne.n	800a5a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a562:	4814      	ldr	r0, [pc, #80]	; (800a5b4 <prvCheckForValidListAndQueue+0x64>)
 800a564:	f7fd fe5a 	bl	800821c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a568:	4813      	ldr	r0, [pc, #76]	; (800a5b8 <prvCheckForValidListAndQueue+0x68>)
 800a56a:	f7fd fe57 	bl	800821c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a56e:	4b13      	ldr	r3, [pc, #76]	; (800a5bc <prvCheckForValidListAndQueue+0x6c>)
 800a570:	4a10      	ldr	r2, [pc, #64]	; (800a5b4 <prvCheckForValidListAndQueue+0x64>)
 800a572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a574:	4b12      	ldr	r3, [pc, #72]	; (800a5c0 <prvCheckForValidListAndQueue+0x70>)
 800a576:	4a10      	ldr	r2, [pc, #64]	; (800a5b8 <prvCheckForValidListAndQueue+0x68>)
 800a578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a57a:	2300      	movs	r3, #0
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	4b11      	ldr	r3, [pc, #68]	; (800a5c4 <prvCheckForValidListAndQueue+0x74>)
 800a580:	4a11      	ldr	r2, [pc, #68]	; (800a5c8 <prvCheckForValidListAndQueue+0x78>)
 800a582:	2110      	movs	r1, #16
 800a584:	200a      	movs	r0, #10
 800a586:	f7fd ff65 	bl	8008454 <xQueueGenericCreateStatic>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4a08      	ldr	r2, [pc, #32]	; (800a5b0 <prvCheckForValidListAndQueue+0x60>)
 800a58e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <prvCheckForValidListAndQueue+0x60>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a598:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <prvCheckForValidListAndQueue+0x60>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	490b      	ldr	r1, [pc, #44]	; (800a5cc <prvCheckForValidListAndQueue+0x7c>)
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe fb7e 	bl	8008ca0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5a4:	f000 f96e 	bl	800a884 <vPortExitCritical>
}
 800a5a8:	bf00      	nop
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20001888 	.word	0x20001888
 800a5b4:	20001858 	.word	0x20001858
 800a5b8:	2000186c 	.word	0x2000186c
 800a5bc:	20001880 	.word	0x20001880
 800a5c0:	20001884 	.word	0x20001884
 800a5c4:	20001934 	.word	0x20001934
 800a5c8:	20001894 	.word	0x20001894
 800a5cc:	0800f91c 	.word	0x0800f91c

0800a5d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3b04      	subs	r3, #4
 800a5e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3b04      	subs	r3, #4
 800a5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f023 0201 	bic.w	r2, r3, #1
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3b04      	subs	r3, #4
 800a5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a600:	4a0c      	ldr	r2, [pc, #48]	; (800a634 <pxPortInitialiseStack+0x64>)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3b14      	subs	r3, #20
 800a60a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3b04      	subs	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f06f 0202 	mvn.w	r2, #2
 800a61e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3b20      	subs	r3, #32
 800a624:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a626:	68fb      	ldr	r3, [r7, #12]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	0800a639 	.word	0x0800a639

0800a638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a642:	4b12      	ldr	r3, [pc, #72]	; (800a68c <prvTaskExitError+0x54>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d00a      	beq.n	800a662 <prvTaskExitError+0x2a>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60fb      	str	r3, [r7, #12]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <prvTaskExitError+0x28>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	60bb      	str	r3, [r7, #8]
}
 800a674:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a676:	bf00      	nop
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0fc      	beq.n	800a678 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a67e:	bf00      	nop
 800a680:	bf00      	nop
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	200000f8 	.word	0x200000f8

0800a690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <pxCurrentTCBConst2>)
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	f380 8809 	msr	PSP, r0
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8811 	msr	BASEPRI, r0
 800a6aa:	4770      	bx	lr
 800a6ac:	f3af 8000 	nop.w

0800a6b0 <pxCurrentTCBConst2>:
 800a6b0:	20001358 	.word	0x20001358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6b8:	4808      	ldr	r0, [pc, #32]	; (800a6dc <prvPortStartFirstTask+0x24>)
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f380 8808 	msr	MSP, r0
 800a6c2:	f04f 0000 	mov.w	r0, #0
 800a6c6:	f380 8814 	msr	CONTROL, r0
 800a6ca:	b662      	cpsie	i
 800a6cc:	b661      	cpsie	f
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	df00      	svc	0
 800a6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6da:	bf00      	nop
 800a6dc:	e000ed08 	.word	0xe000ed08

0800a6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6e6:	4b46      	ldr	r3, [pc, #280]	; (800a800 <xPortStartScheduler+0x120>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a46      	ldr	r2, [pc, #280]	; (800a804 <xPortStartScheduler+0x124>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d10a      	bne.n	800a706 <xPortStartScheduler+0x26>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	613b      	str	r3, [r7, #16]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a706:	4b3e      	ldr	r3, [pc, #248]	; (800a800 <xPortStartScheduler+0x120>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <xPortStartScheduler+0x128>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d10a      	bne.n	800a726 <xPortStartScheduler+0x46>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60fb      	str	r3, [r7, #12]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a726:	4b39      	ldr	r3, [pc, #228]	; (800a80c <xPortStartScheduler+0x12c>)
 800a728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	22ff      	movs	r2, #255	; 0xff
 800a736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	4b31      	ldr	r3, [pc, #196]	; (800a810 <xPortStartScheduler+0x130>)
 800a74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a74e:	4b31      	ldr	r3, [pc, #196]	; (800a814 <xPortStartScheduler+0x134>)
 800a750:	2207      	movs	r2, #7
 800a752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a754:	e009      	b.n	800a76a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a756:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <xPortStartScheduler+0x134>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	4a2d      	ldr	r2, [pc, #180]	; (800a814 <xPortStartScheduler+0x134>)
 800a75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a760:	78fb      	ldrb	r3, [r7, #3]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b80      	cmp	r3, #128	; 0x80
 800a774:	d0ef      	beq.n	800a756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a776:	4b27      	ldr	r3, [pc, #156]	; (800a814 <xPortStartScheduler+0x134>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f1c3 0307 	rsb	r3, r3, #7
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d00a      	beq.n	800a798 <xPortStartScheduler+0xb8>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60bb      	str	r3, [r7, #8]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a798:	4b1e      	ldr	r3, [pc, #120]	; (800a814 <xPortStartScheduler+0x134>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	021b      	lsls	r3, r3, #8
 800a79e:	4a1d      	ldr	r2, [pc, #116]	; (800a814 <xPortStartScheduler+0x134>)
 800a7a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7a2:	4b1c      	ldr	r3, [pc, #112]	; (800a814 <xPortStartScheduler+0x134>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7aa:	4a1a      	ldr	r2, [pc, #104]	; (800a814 <xPortStartScheduler+0x134>)
 800a7ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7b6:	4b18      	ldr	r3, [pc, #96]	; (800a818 <xPortStartScheduler+0x138>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a17      	ldr	r2, [pc, #92]	; (800a818 <xPortStartScheduler+0x138>)
 800a7bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7c2:	4b15      	ldr	r3, [pc, #84]	; (800a818 <xPortStartScheduler+0x138>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a14      	ldr	r2, [pc, #80]	; (800a818 <xPortStartScheduler+0x138>)
 800a7c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7ce:	f000 f8dd 	bl	800a98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <xPortStartScheduler+0x13c>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7d8:	f000 f8fc 	bl	800a9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7dc:	4b10      	ldr	r3, [pc, #64]	; (800a820 <xPortStartScheduler+0x140>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0f      	ldr	r2, [pc, #60]	; (800a820 <xPortStartScheduler+0x140>)
 800a7e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7e8:	f7ff ff66 	bl	800a6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7ec:	f7fe fe68 	bl	80094c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a7f0:	f7ff ff22 	bl	800a638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	e000ed00 	.word	0xe000ed00
 800a804:	410fc271 	.word	0x410fc271
 800a808:	410fc270 	.word	0x410fc270
 800a80c:	e000e400 	.word	0xe000e400
 800a810:	20001984 	.word	0x20001984
 800a814:	20001988 	.word	0x20001988
 800a818:	e000ed20 	.word	0xe000ed20
 800a81c:	200000f8 	.word	0x200000f8
 800a820:	e000ef34 	.word	0xe000ef34

0800a824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	607b      	str	r3, [r7, #4]
}
 800a83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a83e:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <vPortEnterCritical+0x58>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3301      	adds	r3, #1
 800a844:	4a0d      	ldr	r2, [pc, #52]	; (800a87c <vPortEnterCritical+0x58>)
 800a846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a848:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <vPortEnterCritical+0x58>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10f      	bne.n	800a870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <vPortEnterCritical+0x5c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <vPortEnterCritical+0x4c>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	603b      	str	r3, [r7, #0]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <vPortEnterCritical+0x4a>
	}
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	200000f8 	.word	0x200000f8
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a88a:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <vPortExitCritical+0x50>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <vPortExitCritical+0x24>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	607b      	str	r3, [r7, #4]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <vPortExitCritical+0x50>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	4a09      	ldr	r2, [pc, #36]	; (800a8d4 <vPortExitCritical+0x50>)
 800a8b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <vPortExitCritical+0x50>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <vPortExitCritical+0x42>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f383 8811 	msr	BASEPRI, r3
}
 800a8c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	200000f8 	.word	0x200000f8
	...

0800a8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8e0:	f3ef 8009 	mrs	r0, PSP
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	4b15      	ldr	r3, [pc, #84]	; (800a940 <pxCurrentTCBConst>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	f01e 0f10 	tst.w	lr, #16
 800a8f0:	bf08      	it	eq
 800a8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fa:	6010      	str	r0, [r2, #0]
 800a8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a904:	f380 8811 	msr	BASEPRI, r0
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f7fe fdd6 	bl	80094c0 <vTaskSwitchContext>
 800a914:	f04f 0000 	mov.w	r0, #0
 800a918:	f380 8811 	msr	BASEPRI, r0
 800a91c:	bc09      	pop	{r0, r3}
 800a91e:	6819      	ldr	r1, [r3, #0]
 800a920:	6808      	ldr	r0, [r1, #0]
 800a922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a926:	f01e 0f10 	tst.w	lr, #16
 800a92a:	bf08      	it	eq
 800a92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a930:	f380 8809 	msr	PSP, r0
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	f3af 8000 	nop.w

0800a940 <pxCurrentTCBConst>:
 800a940:	20001358 	.word	0x20001358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop

0800a948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	607b      	str	r3, [r7, #4]
}
 800a960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a962:	f7fe fcf3 	bl	800934c <xTaskIncrementTick>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a96c:	4b06      	ldr	r3, [pc, #24]	; (800a988 <xPortSysTickHandler+0x40>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	2300      	movs	r3, #0
 800a976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f383 8811 	msr	BASEPRI, r3
}
 800a97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a990:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <vPortSetupTimerInterrupt+0x34>)
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a996:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <vPortSetupTimerInterrupt+0x38>)
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <vPortSetupTimerInterrupt+0x3c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <vPortSetupTimerInterrupt+0x40>)
 800a9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a6:	099b      	lsrs	r3, r3, #6
 800a9a8:	4a09      	ldr	r2, [pc, #36]	; (800a9d0 <vPortSetupTimerInterrupt+0x44>)
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9ae:	4b04      	ldr	r3, [pc, #16]	; (800a9c0 <vPortSetupTimerInterrupt+0x34>)
 800a9b0:	2207      	movs	r2, #7
 800a9b2:	601a      	str	r2, [r3, #0]
}
 800a9b4:	bf00      	nop
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	e000e010 	.word	0xe000e010
 800a9c4:	e000e018 	.word	0xe000e018
 800a9c8:	2000009c 	.word	0x2000009c
 800a9cc:	10624dd3 	.word	0x10624dd3
 800a9d0:	e000e014 	.word	0xe000e014

0800a9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9e4 <vPortEnableVFP+0x10>
 800a9d8:	6801      	ldr	r1, [r0, #0]
 800a9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9de:	6001      	str	r1, [r0, #0]
 800a9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9e2:	bf00      	nop
 800a9e4:	e000ed88 	.word	0xe000ed88

0800a9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ee:	f3ef 8305 	mrs	r3, IPSR
 800a9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b0f      	cmp	r3, #15
 800a9f8:	d914      	bls.n	800aa24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9fa:	4a17      	ldr	r2, [pc, #92]	; (800aa58 <vPortValidateInterruptPriority+0x70>)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa04:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <vPortValidateInterruptPriority+0x74>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	7afa      	ldrb	r2, [r7, #11]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d20a      	bcs.n	800aa24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	607b      	str	r3, [r7, #4]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa24:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <vPortValidateInterruptPriority+0x78>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <vPortValidateInterruptPriority+0x7c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d90a      	bls.n	800aa4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	603b      	str	r3, [r7, #0]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <vPortValidateInterruptPriority+0x60>
	}
 800aa4a:	bf00      	nop
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	e000e3f0 	.word	0xe000e3f0
 800aa5c:	20001984 	.word	0x20001984
 800aa60:	e000ed0c 	.word	0xe000ed0c
 800aa64:	20001988 	.word	0x20001988

0800aa68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	; 0x28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa74:	f7fe fbae 	bl	80091d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa78:	4b5b      	ldr	r3, [pc, #364]	; (800abe8 <pvPortMalloc+0x180>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa80:	f000 f920 	bl	800acc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa84:	4b59      	ldr	r3, [pc, #356]	; (800abec <pvPortMalloc+0x184>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f040 8093 	bne.w	800abb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01d      	beq.n	800aad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa98:	2208      	movs	r2, #8
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d014      	beq.n	800aad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f023 0307 	bic.w	r3, r3, #7
 800aab0:	3308      	adds	r3, #8
 800aab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <pvPortMalloc+0x6c>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	617b      	str	r3, [r7, #20]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d06e      	beq.n	800abb8 <pvPortMalloc+0x150>
 800aada:	4b45      	ldr	r3, [pc, #276]	; (800abf0 <pvPortMalloc+0x188>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d869      	bhi.n	800abb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aae4:	4b43      	ldr	r3, [pc, #268]	; (800abf4 <pvPortMalloc+0x18c>)
 800aae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aae8:	4b42      	ldr	r3, [pc, #264]	; (800abf4 <pvPortMalloc+0x18c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaee:	e004      	b.n	800aafa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d903      	bls.n	800ab0c <pvPortMalloc+0xa4>
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1f1      	bne.n	800aaf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab0c:	4b36      	ldr	r3, [pc, #216]	; (800abe8 <pvPortMalloc+0x180>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d050      	beq.n	800abb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2208      	movs	r2, #8
 800ab1c:	4413      	add	r3, r2
 800ab1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	1ad2      	subs	r2, r2, r3
 800ab30:	2308      	movs	r3, #8
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d91f      	bls.n	800ab78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <pvPortMalloc+0xf8>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	613b      	str	r3, [r7, #16]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	1ad2      	subs	r2, r2, r3
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab72:	69b8      	ldr	r0, [r7, #24]
 800ab74:	f000 f908 	bl	800ad88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab78:	4b1d      	ldr	r3, [pc, #116]	; (800abf0 <pvPortMalloc+0x188>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	4a1b      	ldr	r2, [pc, #108]	; (800abf0 <pvPortMalloc+0x188>)
 800ab84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab86:	4b1a      	ldr	r3, [pc, #104]	; (800abf0 <pvPortMalloc+0x188>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <pvPortMalloc+0x190>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d203      	bcs.n	800ab9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab92:	4b17      	ldr	r3, [pc, #92]	; (800abf0 <pvPortMalloc+0x188>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a18      	ldr	r2, [pc, #96]	; (800abf8 <pvPortMalloc+0x190>)
 800ab98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	4b13      	ldr	r3, [pc, #76]	; (800abec <pvPortMalloc+0x184>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	431a      	orrs	r2, r3
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800abae:	4b13      	ldr	r3, [pc, #76]	; (800abfc <pvPortMalloc+0x194>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3301      	adds	r3, #1
 800abb4:	4a11      	ldr	r2, [pc, #68]	; (800abfc <pvPortMalloc+0x194>)
 800abb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abb8:	f7fe fb1a 	bl	80091f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	f003 0307 	and.w	r3, r3, #7
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <pvPortMalloc+0x174>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60fb      	str	r3, [r7, #12]
}
 800abd8:	bf00      	nop
 800abda:	e7fe      	b.n	800abda <pvPortMalloc+0x172>
	return pvReturn;
 800abdc:	69fb      	ldr	r3, [r7, #28]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3728      	adds	r7, #40	; 0x28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20002d1c 	.word	0x20002d1c
 800abec:	20002d30 	.word	0x20002d30
 800abf0:	20002d20 	.word	0x20002d20
 800abf4:	20002d14 	.word	0x20002d14
 800abf8:	20002d24 	.word	0x20002d24
 800abfc:	20002d28 	.word	0x20002d28

0800ac00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d04d      	beq.n	800acae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac12:	2308      	movs	r3, #8
 800ac14:	425b      	negs	r3, r3
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4413      	add	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	4b24      	ldr	r3, [pc, #144]	; (800acb8 <vPortFree+0xb8>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <vPortFree+0x44>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60fb      	str	r3, [r7, #12]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00a      	beq.n	800ac62 <vPortFree+0x62>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	60bb      	str	r3, [r7, #8]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	4b14      	ldr	r3, [pc, #80]	; (800acb8 <vPortFree+0xb8>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01e      	beq.n	800acae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d11a      	bne.n	800acae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	4b0e      	ldr	r3, [pc, #56]	; (800acb8 <vPortFree+0xb8>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	43db      	mvns	r3, r3
 800ac82:	401a      	ands	r2, r3
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac88:	f7fe faa4 	bl	80091d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	4b0a      	ldr	r3, [pc, #40]	; (800acbc <vPortFree+0xbc>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	4a09      	ldr	r2, [pc, #36]	; (800acbc <vPortFree+0xbc>)
 800ac98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac9a:	6938      	ldr	r0, [r7, #16]
 800ac9c:	f000 f874 	bl	800ad88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <vPortFree+0xc0>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	4a06      	ldr	r2, [pc, #24]	; (800acc0 <vPortFree+0xc0>)
 800aca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800acaa:	f7fe faa1 	bl	80091f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acae:	bf00      	nop
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20002d30 	.word	0x20002d30
 800acbc:	20002d20 	.word	0x20002d20
 800acc0:	20002d2c 	.word	0x20002d2c

0800acc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acca:	f241 3388 	movw	r3, #5000	; 0x1388
 800acce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acd0:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <prvHeapInit+0xac>)
 800acd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3307      	adds	r3, #7
 800ace2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	4a1f      	ldr	r2, [pc, #124]	; (800ad70 <prvHeapInit+0xac>)
 800acf4:	4413      	add	r3, r2
 800acf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acfc:	4a1d      	ldr	r2, [pc, #116]	; (800ad74 <prvHeapInit+0xb0>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad02:	4b1c      	ldr	r3, [pc, #112]	; (800ad74 <prvHeapInit+0xb0>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad10:	2208      	movs	r2, #8
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0307 	bic.w	r3, r3, #7
 800ad1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4a15      	ldr	r2, [pc, #84]	; (800ad78 <prvHeapInit+0xb4>)
 800ad24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <prvHeapInit+0xb4>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad2e:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <prvHeapInit+0xb4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	1ad2      	subs	r2, r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad44:	4b0c      	ldr	r3, [pc, #48]	; (800ad78 <prvHeapInit+0xb4>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4a0a      	ldr	r2, [pc, #40]	; (800ad7c <prvHeapInit+0xb8>)
 800ad52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4a09      	ldr	r2, [pc, #36]	; (800ad80 <prvHeapInit+0xbc>)
 800ad5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad5c:	4b09      	ldr	r3, [pc, #36]	; (800ad84 <prvHeapInit+0xc0>)
 800ad5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad62:	601a      	str	r2, [r3, #0]
}
 800ad64:	bf00      	nop
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	2000198c 	.word	0x2000198c
 800ad74:	20002d14 	.word	0x20002d14
 800ad78:	20002d1c 	.word	0x20002d1c
 800ad7c:	20002d24 	.word	0x20002d24
 800ad80:	20002d20 	.word	0x20002d20
 800ad84:	20002d30 	.word	0x20002d30

0800ad88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad90:	4b28      	ldr	r3, [pc, #160]	; (800ae34 <prvInsertBlockIntoFreeList+0xac>)
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	e002      	b.n	800ad9c <prvInsertBlockIntoFreeList+0x14>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d8f7      	bhi.n	800ad96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	4413      	add	r3, r2
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d108      	bne.n	800adca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	441a      	add	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	441a      	add	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d118      	bne.n	800ae10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <prvInsertBlockIntoFreeList+0xb0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d00d      	beq.n	800ae06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	441a      	add	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	e008      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae06:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <prvInsertBlockIntoFreeList+0xb0>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	e003      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d002      	beq.n	800ae26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20002d14 	.word	0x20002d14
 800ae38:	20002d1c 	.word	0x20002d1c

0800ae3c <__assert_func>:
 800ae3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae3e:	4614      	mov	r4, r2
 800ae40:	461a      	mov	r2, r3
 800ae42:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <__assert_func+0x2c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4605      	mov	r5, r0
 800ae48:	68d8      	ldr	r0, [r3, #12]
 800ae4a:	b14c      	cbz	r4, 800ae60 <__assert_func+0x24>
 800ae4c:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <__assert_func+0x30>)
 800ae4e:	9100      	str	r1, [sp, #0]
 800ae50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae54:	4906      	ldr	r1, [pc, #24]	; (800ae70 <__assert_func+0x34>)
 800ae56:	462b      	mov	r3, r5
 800ae58:	f000 ff28 	bl	800bcac <fiprintf>
 800ae5c:	f001 f954 	bl	800c108 <abort>
 800ae60:	4b04      	ldr	r3, [pc, #16]	; (800ae74 <__assert_func+0x38>)
 800ae62:	461c      	mov	r4, r3
 800ae64:	e7f3      	b.n	800ae4e <__assert_func+0x12>
 800ae66:	bf00      	nop
 800ae68:	20000154 	.word	0x20000154
 800ae6c:	0800f9d8 	.word	0x0800f9d8
 800ae70:	0800f9e5 	.word	0x0800f9e5
 800ae74:	0800fa13 	.word	0x0800fa13

0800ae78 <__cvt>:
 800ae78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	ec55 4b10 	vmov	r4, r5, d0
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	460e      	mov	r6, r1
 800ae84:	4619      	mov	r1, r3
 800ae86:	462b      	mov	r3, r5
 800ae88:	bfbb      	ittet	lt
 800ae8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae8e:	461d      	movlt	r5, r3
 800ae90:	2300      	movge	r3, #0
 800ae92:	232d      	movlt	r3, #45	; 0x2d
 800ae94:	700b      	strb	r3, [r1, #0]
 800ae96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae9c:	4691      	mov	r9, r2
 800ae9e:	f023 0820 	bic.w	r8, r3, #32
 800aea2:	bfbc      	itt	lt
 800aea4:	4622      	movlt	r2, r4
 800aea6:	4614      	movlt	r4, r2
 800aea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aeac:	d005      	beq.n	800aeba <__cvt+0x42>
 800aeae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aeb2:	d100      	bne.n	800aeb6 <__cvt+0x3e>
 800aeb4:	3601      	adds	r6, #1
 800aeb6:	2102      	movs	r1, #2
 800aeb8:	e000      	b.n	800aebc <__cvt+0x44>
 800aeba:	2103      	movs	r1, #3
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	ab02      	add	r3, sp, #8
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	ec45 4b10 	vmov	d0, r4, r5
 800aec8:	4653      	mov	r3, sl
 800aeca:	4632      	mov	r2, r6
 800aecc:	f001 f9ac 	bl	800c228 <_dtoa_r>
 800aed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aed4:	4607      	mov	r7, r0
 800aed6:	d102      	bne.n	800aede <__cvt+0x66>
 800aed8:	f019 0f01 	tst.w	r9, #1
 800aedc:	d022      	beq.n	800af24 <__cvt+0xac>
 800aede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aee2:	eb07 0906 	add.w	r9, r7, r6
 800aee6:	d110      	bne.n	800af0a <__cvt+0x92>
 800aee8:	783b      	ldrb	r3, [r7, #0]
 800aeea:	2b30      	cmp	r3, #48	; 0x30
 800aeec:	d10a      	bne.n	800af04 <__cvt+0x8c>
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	4620      	mov	r0, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	f7f5 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 800aefa:	b918      	cbnz	r0, 800af04 <__cvt+0x8c>
 800aefc:	f1c6 0601 	rsb	r6, r6, #1
 800af00:	f8ca 6000 	str.w	r6, [sl]
 800af04:	f8da 3000 	ldr.w	r3, [sl]
 800af08:	4499      	add	r9, r3
 800af0a:	2200      	movs	r2, #0
 800af0c:	2300      	movs	r3, #0
 800af0e:	4620      	mov	r0, r4
 800af10:	4629      	mov	r1, r5
 800af12:	f7f5 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800af16:	b108      	cbz	r0, 800af1c <__cvt+0xa4>
 800af18:	f8cd 900c 	str.w	r9, [sp, #12]
 800af1c:	2230      	movs	r2, #48	; 0x30
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	454b      	cmp	r3, r9
 800af22:	d307      	bcc.n	800af34 <__cvt+0xbc>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af28:	1bdb      	subs	r3, r3, r7
 800af2a:	4638      	mov	r0, r7
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	b004      	add	sp, #16
 800af30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af34:	1c59      	adds	r1, r3, #1
 800af36:	9103      	str	r1, [sp, #12]
 800af38:	701a      	strb	r2, [r3, #0]
 800af3a:	e7f0      	b.n	800af1e <__cvt+0xa6>

0800af3c <__exponent>:
 800af3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af3e:	4603      	mov	r3, r0
 800af40:	2900      	cmp	r1, #0
 800af42:	bfb8      	it	lt
 800af44:	4249      	neglt	r1, r1
 800af46:	f803 2b02 	strb.w	r2, [r3], #2
 800af4a:	bfb4      	ite	lt
 800af4c:	222d      	movlt	r2, #45	; 0x2d
 800af4e:	222b      	movge	r2, #43	; 0x2b
 800af50:	2909      	cmp	r1, #9
 800af52:	7042      	strb	r2, [r0, #1]
 800af54:	dd2a      	ble.n	800afac <__exponent+0x70>
 800af56:	f10d 0207 	add.w	r2, sp, #7
 800af5a:	4617      	mov	r7, r2
 800af5c:	260a      	movs	r6, #10
 800af5e:	4694      	mov	ip, r2
 800af60:	fb91 f5f6 	sdiv	r5, r1, r6
 800af64:	fb06 1415 	mls	r4, r6, r5, r1
 800af68:	3430      	adds	r4, #48	; 0x30
 800af6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800af6e:	460c      	mov	r4, r1
 800af70:	2c63      	cmp	r4, #99	; 0x63
 800af72:	f102 32ff 	add.w	r2, r2, #4294967295
 800af76:	4629      	mov	r1, r5
 800af78:	dcf1      	bgt.n	800af5e <__exponent+0x22>
 800af7a:	3130      	adds	r1, #48	; 0x30
 800af7c:	f1ac 0402 	sub.w	r4, ip, #2
 800af80:	f802 1c01 	strb.w	r1, [r2, #-1]
 800af84:	1c41      	adds	r1, r0, #1
 800af86:	4622      	mov	r2, r4
 800af88:	42ba      	cmp	r2, r7
 800af8a:	d30a      	bcc.n	800afa2 <__exponent+0x66>
 800af8c:	f10d 0209 	add.w	r2, sp, #9
 800af90:	eba2 020c 	sub.w	r2, r2, ip
 800af94:	42bc      	cmp	r4, r7
 800af96:	bf88      	it	hi
 800af98:	2200      	movhi	r2, #0
 800af9a:	4413      	add	r3, r2
 800af9c:	1a18      	subs	r0, r3, r0
 800af9e:	b003      	add	sp, #12
 800afa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afa6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800afaa:	e7ed      	b.n	800af88 <__exponent+0x4c>
 800afac:	2330      	movs	r3, #48	; 0x30
 800afae:	3130      	adds	r1, #48	; 0x30
 800afb0:	7083      	strb	r3, [r0, #2]
 800afb2:	70c1      	strb	r1, [r0, #3]
 800afb4:	1d03      	adds	r3, r0, #4
 800afb6:	e7f1      	b.n	800af9c <__exponent+0x60>

0800afb8 <_printf_float>:
 800afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	ed2d 8b02 	vpush	{d8}
 800afc0:	b08d      	sub	sp, #52	; 0x34
 800afc2:	460c      	mov	r4, r1
 800afc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afc8:	4616      	mov	r6, r2
 800afca:	461f      	mov	r7, r3
 800afcc:	4605      	mov	r5, r0
 800afce:	f001 f80f 	bl	800bff0 <_localeconv_r>
 800afd2:	f8d0 a000 	ldr.w	sl, [r0]
 800afd6:	4650      	mov	r0, sl
 800afd8:	f7f5 f94a 	bl	8000270 <strlen>
 800afdc:	2300      	movs	r3, #0
 800afde:	930a      	str	r3, [sp, #40]	; 0x28
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	9305      	str	r3, [sp, #20]
 800afe4:	f8d8 3000 	ldr.w	r3, [r8]
 800afe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afec:	3307      	adds	r3, #7
 800afee:	f023 0307 	bic.w	r3, r3, #7
 800aff2:	f103 0208 	add.w	r2, r3, #8
 800aff6:	f8c8 2000 	str.w	r2, [r8]
 800affa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800affe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b002:	9307      	str	r3, [sp, #28]
 800b004:	f8cd 8018 	str.w	r8, [sp, #24]
 800b008:	ee08 0a10 	vmov	s16, r0
 800b00c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b014:	4b9e      	ldr	r3, [pc, #632]	; (800b290 <_printf_float+0x2d8>)
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	f7f5 fd87 	bl	8000b2c <__aeabi_dcmpun>
 800b01e:	bb88      	cbnz	r0, 800b084 <_printf_float+0xcc>
 800b020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b024:	4b9a      	ldr	r3, [pc, #616]	; (800b290 <_printf_float+0x2d8>)
 800b026:	f04f 32ff 	mov.w	r2, #4294967295
 800b02a:	f7f5 fd61 	bl	8000af0 <__aeabi_dcmple>
 800b02e:	bb48      	cbnz	r0, 800b084 <_printf_float+0xcc>
 800b030:	2200      	movs	r2, #0
 800b032:	2300      	movs	r3, #0
 800b034:	4640      	mov	r0, r8
 800b036:	4649      	mov	r1, r9
 800b038:	f7f5 fd50 	bl	8000adc <__aeabi_dcmplt>
 800b03c:	b110      	cbz	r0, 800b044 <_printf_float+0x8c>
 800b03e:	232d      	movs	r3, #45	; 0x2d
 800b040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b044:	4a93      	ldr	r2, [pc, #588]	; (800b294 <_printf_float+0x2dc>)
 800b046:	4b94      	ldr	r3, [pc, #592]	; (800b298 <_printf_float+0x2e0>)
 800b048:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b04c:	bf94      	ite	ls
 800b04e:	4690      	movls	r8, r2
 800b050:	4698      	movhi	r8, r3
 800b052:	2303      	movs	r3, #3
 800b054:	6123      	str	r3, [r4, #16]
 800b056:	9b05      	ldr	r3, [sp, #20]
 800b058:	f023 0304 	bic.w	r3, r3, #4
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	9700      	str	r7, [sp, #0]
 800b064:	4633      	mov	r3, r6
 800b066:	aa0b      	add	r2, sp, #44	; 0x2c
 800b068:	4621      	mov	r1, r4
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 f9da 	bl	800b424 <_printf_common>
 800b070:	3001      	adds	r0, #1
 800b072:	f040 8090 	bne.w	800b196 <_printf_float+0x1de>
 800b076:	f04f 30ff 	mov.w	r0, #4294967295
 800b07a:	b00d      	add	sp, #52	; 0x34
 800b07c:	ecbd 8b02 	vpop	{d8}
 800b080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b084:	4642      	mov	r2, r8
 800b086:	464b      	mov	r3, r9
 800b088:	4640      	mov	r0, r8
 800b08a:	4649      	mov	r1, r9
 800b08c:	f7f5 fd4e 	bl	8000b2c <__aeabi_dcmpun>
 800b090:	b140      	cbz	r0, 800b0a4 <_printf_float+0xec>
 800b092:	464b      	mov	r3, r9
 800b094:	2b00      	cmp	r3, #0
 800b096:	bfbc      	itt	lt
 800b098:	232d      	movlt	r3, #45	; 0x2d
 800b09a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b09e:	4a7f      	ldr	r2, [pc, #508]	; (800b29c <_printf_float+0x2e4>)
 800b0a0:	4b7f      	ldr	r3, [pc, #508]	; (800b2a0 <_printf_float+0x2e8>)
 800b0a2:	e7d1      	b.n	800b048 <_printf_float+0x90>
 800b0a4:	6863      	ldr	r3, [r4, #4]
 800b0a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b0aa:	9206      	str	r2, [sp, #24]
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	d13f      	bne.n	800b130 <_printf_float+0x178>
 800b0b0:	2306      	movs	r3, #6
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	6861      	ldr	r1, [r4, #4]
 800b0b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9303      	str	r3, [sp, #12]
 800b0c0:	ab0a      	add	r3, sp, #40	; 0x28
 800b0c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b0c6:	ab09      	add	r3, sp, #36	; 0x24
 800b0c8:	ec49 8b10 	vmov	d0, r8, r9
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	6022      	str	r2, [r4, #0]
 800b0d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f7ff fecf 	bl	800ae78 <__cvt>
 800b0da:	9b06      	ldr	r3, [sp, #24]
 800b0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0de:	2b47      	cmp	r3, #71	; 0x47
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	d108      	bne.n	800b0f6 <_printf_float+0x13e>
 800b0e4:	1cc8      	adds	r0, r1, #3
 800b0e6:	db02      	blt.n	800b0ee <_printf_float+0x136>
 800b0e8:	6863      	ldr	r3, [r4, #4]
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	dd41      	ble.n	800b172 <_printf_float+0x1ba>
 800b0ee:	f1ab 0302 	sub.w	r3, fp, #2
 800b0f2:	fa5f fb83 	uxtb.w	fp, r3
 800b0f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0fa:	d820      	bhi.n	800b13e <_printf_float+0x186>
 800b0fc:	3901      	subs	r1, #1
 800b0fe:	465a      	mov	r2, fp
 800b100:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b104:	9109      	str	r1, [sp, #36]	; 0x24
 800b106:	f7ff ff19 	bl	800af3c <__exponent>
 800b10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b10c:	1813      	adds	r3, r2, r0
 800b10e:	2a01      	cmp	r2, #1
 800b110:	4681      	mov	r9, r0
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	dc02      	bgt.n	800b11c <_printf_float+0x164>
 800b116:	6822      	ldr	r2, [r4, #0]
 800b118:	07d2      	lsls	r2, r2, #31
 800b11a:	d501      	bpl.n	800b120 <_printf_float+0x168>
 800b11c:	3301      	adds	r3, #1
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b124:	2b00      	cmp	r3, #0
 800b126:	d09c      	beq.n	800b062 <_printf_float+0xaa>
 800b128:	232d      	movs	r3, #45	; 0x2d
 800b12a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b12e:	e798      	b.n	800b062 <_printf_float+0xaa>
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	2a47      	cmp	r2, #71	; 0x47
 800b134:	d1be      	bne.n	800b0b4 <_printf_float+0xfc>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1bc      	bne.n	800b0b4 <_printf_float+0xfc>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e7b9      	b.n	800b0b2 <_printf_float+0xfa>
 800b13e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b142:	d118      	bne.n	800b176 <_printf_float+0x1be>
 800b144:	2900      	cmp	r1, #0
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	dd0b      	ble.n	800b162 <_printf_float+0x1aa>
 800b14a:	6121      	str	r1, [r4, #16]
 800b14c:	b913      	cbnz	r3, 800b154 <_printf_float+0x19c>
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	07d0      	lsls	r0, r2, #31
 800b152:	d502      	bpl.n	800b15a <_printf_float+0x1a2>
 800b154:	3301      	adds	r3, #1
 800b156:	440b      	add	r3, r1
 800b158:	6123      	str	r3, [r4, #16]
 800b15a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b15c:	f04f 0900 	mov.w	r9, #0
 800b160:	e7de      	b.n	800b120 <_printf_float+0x168>
 800b162:	b913      	cbnz	r3, 800b16a <_printf_float+0x1b2>
 800b164:	6822      	ldr	r2, [r4, #0]
 800b166:	07d2      	lsls	r2, r2, #31
 800b168:	d501      	bpl.n	800b16e <_printf_float+0x1b6>
 800b16a:	3302      	adds	r3, #2
 800b16c:	e7f4      	b.n	800b158 <_printf_float+0x1a0>
 800b16e:	2301      	movs	r3, #1
 800b170:	e7f2      	b.n	800b158 <_printf_float+0x1a0>
 800b172:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b178:	4299      	cmp	r1, r3
 800b17a:	db05      	blt.n	800b188 <_printf_float+0x1d0>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	6121      	str	r1, [r4, #16]
 800b180:	07d8      	lsls	r0, r3, #31
 800b182:	d5ea      	bpl.n	800b15a <_printf_float+0x1a2>
 800b184:	1c4b      	adds	r3, r1, #1
 800b186:	e7e7      	b.n	800b158 <_printf_float+0x1a0>
 800b188:	2900      	cmp	r1, #0
 800b18a:	bfd4      	ite	le
 800b18c:	f1c1 0202 	rsble	r2, r1, #2
 800b190:	2201      	movgt	r2, #1
 800b192:	4413      	add	r3, r2
 800b194:	e7e0      	b.n	800b158 <_printf_float+0x1a0>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	055a      	lsls	r2, r3, #21
 800b19a:	d407      	bmi.n	800b1ac <_printf_float+0x1f4>
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	4642      	mov	r2, r8
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	d12c      	bne.n	800b204 <_printf_float+0x24c>
 800b1aa:	e764      	b.n	800b076 <_printf_float+0xbe>
 800b1ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1b0:	f240 80e0 	bls.w	800b374 <_printf_float+0x3bc>
 800b1b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f7f5 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d034      	beq.n	800b22e <_printf_float+0x276>
 800b1c4:	4a37      	ldr	r2, [pc, #220]	; (800b2a4 <_printf_float+0x2ec>)
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	f43f af51 	beq.w	800b076 <_printf_float+0xbe>
 800b1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	db02      	blt.n	800b1e2 <_printf_float+0x22a>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	07d8      	lsls	r0, r3, #31
 800b1e0:	d510      	bpl.n	800b204 <_printf_float+0x24c>
 800b1e2:	ee18 3a10 	vmov	r3, s16
 800b1e6:	4652      	mov	r2, sl
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b8      	blx	r7
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	f43f af41 	beq.w	800b076 <_printf_float+0xbe>
 800b1f4:	f04f 0800 	mov.w	r8, #0
 800b1f8:	f104 091a 	add.w	r9, r4, #26
 800b1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fe:	3b01      	subs	r3, #1
 800b200:	4543      	cmp	r3, r8
 800b202:	dc09      	bgt.n	800b218 <_printf_float+0x260>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	079b      	lsls	r3, r3, #30
 800b208:	f100 8107 	bmi.w	800b41a <_printf_float+0x462>
 800b20c:	68e0      	ldr	r0, [r4, #12]
 800b20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b210:	4298      	cmp	r0, r3
 800b212:	bfb8      	it	lt
 800b214:	4618      	movlt	r0, r3
 800b216:	e730      	b.n	800b07a <_printf_float+0xc2>
 800b218:	2301      	movs	r3, #1
 800b21a:	464a      	mov	r2, r9
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	f43f af27 	beq.w	800b076 <_printf_float+0xbe>
 800b228:	f108 0801 	add.w	r8, r8, #1
 800b22c:	e7e6      	b.n	800b1fc <_printf_float+0x244>
 800b22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc39      	bgt.n	800b2a8 <_printf_float+0x2f0>
 800b234:	4a1b      	ldr	r2, [pc, #108]	; (800b2a4 <_printf_float+0x2ec>)
 800b236:	2301      	movs	r3, #1
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	f43f af19 	beq.w	800b076 <_printf_float+0xbe>
 800b244:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b248:	4313      	orrs	r3, r2
 800b24a:	d102      	bne.n	800b252 <_printf_float+0x29a>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	07d9      	lsls	r1, r3, #31
 800b250:	d5d8      	bpl.n	800b204 <_printf_float+0x24c>
 800b252:	ee18 3a10 	vmov	r3, s16
 800b256:	4652      	mov	r2, sl
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	f43f af09 	beq.w	800b076 <_printf_float+0xbe>
 800b264:	f04f 0900 	mov.w	r9, #0
 800b268:	f104 0a1a 	add.w	sl, r4, #26
 800b26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26e:	425b      	negs	r3, r3
 800b270:	454b      	cmp	r3, r9
 800b272:	dc01      	bgt.n	800b278 <_printf_float+0x2c0>
 800b274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b276:	e792      	b.n	800b19e <_printf_float+0x1e6>
 800b278:	2301      	movs	r3, #1
 800b27a:	4652      	mov	r2, sl
 800b27c:	4631      	mov	r1, r6
 800b27e:	4628      	mov	r0, r5
 800b280:	47b8      	blx	r7
 800b282:	3001      	adds	r0, #1
 800b284:	f43f aef7 	beq.w	800b076 <_printf_float+0xbe>
 800b288:	f109 0901 	add.w	r9, r9, #1
 800b28c:	e7ee      	b.n	800b26c <_printf_float+0x2b4>
 800b28e:	bf00      	nop
 800b290:	7fefffff 	.word	0x7fefffff
 800b294:	0800fa14 	.word	0x0800fa14
 800b298:	0800fa18 	.word	0x0800fa18
 800b29c:	0800fa1c 	.word	0x0800fa1c
 800b2a0:	0800fa20 	.word	0x0800fa20
 800b2a4:	0800fa24 	.word	0x0800fa24
 800b2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	bfa8      	it	ge
 800b2b0:	461a      	movge	r2, r3
 800b2b2:	2a00      	cmp	r2, #0
 800b2b4:	4691      	mov	r9, r2
 800b2b6:	dc37      	bgt.n	800b328 <_printf_float+0x370>
 800b2b8:	f04f 0b00 	mov.w	fp, #0
 800b2bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2c0:	f104 021a 	add.w	r2, r4, #26
 800b2c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2c6:	9305      	str	r3, [sp, #20]
 800b2c8:	eba3 0309 	sub.w	r3, r3, r9
 800b2cc:	455b      	cmp	r3, fp
 800b2ce:	dc33      	bgt.n	800b338 <_printf_float+0x380>
 800b2d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	db3b      	blt.n	800b350 <_printf_float+0x398>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	07da      	lsls	r2, r3, #31
 800b2dc:	d438      	bmi.n	800b350 <_printf_float+0x398>
 800b2de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b2e2:	eba2 0903 	sub.w	r9, r2, r3
 800b2e6:	9b05      	ldr	r3, [sp, #20]
 800b2e8:	1ad2      	subs	r2, r2, r3
 800b2ea:	4591      	cmp	r9, r2
 800b2ec:	bfa8      	it	ge
 800b2ee:	4691      	movge	r9, r2
 800b2f0:	f1b9 0f00 	cmp.w	r9, #0
 800b2f4:	dc35      	bgt.n	800b362 <_printf_float+0x3aa>
 800b2f6:	f04f 0800 	mov.w	r8, #0
 800b2fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2fe:	f104 0a1a 	add.w	sl, r4, #26
 800b302:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b306:	1a9b      	subs	r3, r3, r2
 800b308:	eba3 0309 	sub.w	r3, r3, r9
 800b30c:	4543      	cmp	r3, r8
 800b30e:	f77f af79 	ble.w	800b204 <_printf_float+0x24c>
 800b312:	2301      	movs	r3, #1
 800b314:	4652      	mov	r2, sl
 800b316:	4631      	mov	r1, r6
 800b318:	4628      	mov	r0, r5
 800b31a:	47b8      	blx	r7
 800b31c:	3001      	adds	r0, #1
 800b31e:	f43f aeaa 	beq.w	800b076 <_printf_float+0xbe>
 800b322:	f108 0801 	add.w	r8, r8, #1
 800b326:	e7ec      	b.n	800b302 <_printf_float+0x34a>
 800b328:	4613      	mov	r3, r2
 800b32a:	4631      	mov	r1, r6
 800b32c:	4642      	mov	r2, r8
 800b32e:	4628      	mov	r0, r5
 800b330:	47b8      	blx	r7
 800b332:	3001      	adds	r0, #1
 800b334:	d1c0      	bne.n	800b2b8 <_printf_float+0x300>
 800b336:	e69e      	b.n	800b076 <_printf_float+0xbe>
 800b338:	2301      	movs	r3, #1
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	9205      	str	r2, [sp, #20]
 800b340:	47b8      	blx	r7
 800b342:	3001      	adds	r0, #1
 800b344:	f43f ae97 	beq.w	800b076 <_printf_float+0xbe>
 800b348:	9a05      	ldr	r2, [sp, #20]
 800b34a:	f10b 0b01 	add.w	fp, fp, #1
 800b34e:	e7b9      	b.n	800b2c4 <_printf_float+0x30c>
 800b350:	ee18 3a10 	vmov	r3, s16
 800b354:	4652      	mov	r2, sl
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	d1be      	bne.n	800b2de <_printf_float+0x326>
 800b360:	e689      	b.n	800b076 <_printf_float+0xbe>
 800b362:	9a05      	ldr	r2, [sp, #20]
 800b364:	464b      	mov	r3, r9
 800b366:	4442      	add	r2, r8
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	d1c1      	bne.n	800b2f6 <_printf_float+0x33e>
 800b372:	e680      	b.n	800b076 <_printf_float+0xbe>
 800b374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b376:	2a01      	cmp	r2, #1
 800b378:	dc01      	bgt.n	800b37e <_printf_float+0x3c6>
 800b37a:	07db      	lsls	r3, r3, #31
 800b37c:	d53a      	bpl.n	800b3f4 <_printf_float+0x43c>
 800b37e:	2301      	movs	r3, #1
 800b380:	4642      	mov	r2, r8
 800b382:	4631      	mov	r1, r6
 800b384:	4628      	mov	r0, r5
 800b386:	47b8      	blx	r7
 800b388:	3001      	adds	r0, #1
 800b38a:	f43f ae74 	beq.w	800b076 <_printf_float+0xbe>
 800b38e:	ee18 3a10 	vmov	r3, s16
 800b392:	4652      	mov	r2, sl
 800b394:	4631      	mov	r1, r6
 800b396:	4628      	mov	r0, r5
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	f43f ae6b 	beq.w	800b076 <_printf_float+0xbe>
 800b3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b3ac:	f7f5 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b0:	b9d8      	cbnz	r0, 800b3ea <_printf_float+0x432>
 800b3b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b3b6:	f108 0201 	add.w	r2, r8, #1
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d10e      	bne.n	800b3e2 <_printf_float+0x42a>
 800b3c4:	e657      	b.n	800b076 <_printf_float+0xbe>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	4652      	mov	r2, sl
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	47b8      	blx	r7
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f43f ae50 	beq.w	800b076 <_printf_float+0xbe>
 800b3d6:	f108 0801 	add.w	r8, r8, #1
 800b3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	4543      	cmp	r3, r8
 800b3e0:	dcf1      	bgt.n	800b3c6 <_printf_float+0x40e>
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3e8:	e6da      	b.n	800b1a0 <_printf_float+0x1e8>
 800b3ea:	f04f 0800 	mov.w	r8, #0
 800b3ee:	f104 0a1a 	add.w	sl, r4, #26
 800b3f2:	e7f2      	b.n	800b3da <_printf_float+0x422>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4642      	mov	r2, r8
 800b3f8:	e7df      	b.n	800b3ba <_printf_float+0x402>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	464a      	mov	r2, r9
 800b3fe:	4631      	mov	r1, r6
 800b400:	4628      	mov	r0, r5
 800b402:	47b8      	blx	r7
 800b404:	3001      	adds	r0, #1
 800b406:	f43f ae36 	beq.w	800b076 <_printf_float+0xbe>
 800b40a:	f108 0801 	add.w	r8, r8, #1
 800b40e:	68e3      	ldr	r3, [r4, #12]
 800b410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b412:	1a5b      	subs	r3, r3, r1
 800b414:	4543      	cmp	r3, r8
 800b416:	dcf0      	bgt.n	800b3fa <_printf_float+0x442>
 800b418:	e6f8      	b.n	800b20c <_printf_float+0x254>
 800b41a:	f04f 0800 	mov.w	r8, #0
 800b41e:	f104 0919 	add.w	r9, r4, #25
 800b422:	e7f4      	b.n	800b40e <_printf_float+0x456>

0800b424 <_printf_common>:
 800b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b428:	4616      	mov	r6, r2
 800b42a:	4699      	mov	r9, r3
 800b42c:	688a      	ldr	r2, [r1, #8]
 800b42e:	690b      	ldr	r3, [r1, #16]
 800b430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b434:	4293      	cmp	r3, r2
 800b436:	bfb8      	it	lt
 800b438:	4613      	movlt	r3, r2
 800b43a:	6033      	str	r3, [r6, #0]
 800b43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b440:	4607      	mov	r7, r0
 800b442:	460c      	mov	r4, r1
 800b444:	b10a      	cbz	r2, 800b44a <_printf_common+0x26>
 800b446:	3301      	adds	r3, #1
 800b448:	6033      	str	r3, [r6, #0]
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	0699      	lsls	r1, r3, #26
 800b44e:	bf42      	ittt	mi
 800b450:	6833      	ldrmi	r3, [r6, #0]
 800b452:	3302      	addmi	r3, #2
 800b454:	6033      	strmi	r3, [r6, #0]
 800b456:	6825      	ldr	r5, [r4, #0]
 800b458:	f015 0506 	ands.w	r5, r5, #6
 800b45c:	d106      	bne.n	800b46c <_printf_common+0x48>
 800b45e:	f104 0a19 	add.w	sl, r4, #25
 800b462:	68e3      	ldr	r3, [r4, #12]
 800b464:	6832      	ldr	r2, [r6, #0]
 800b466:	1a9b      	subs	r3, r3, r2
 800b468:	42ab      	cmp	r3, r5
 800b46a:	dc26      	bgt.n	800b4ba <_printf_common+0x96>
 800b46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b470:	1e13      	subs	r3, r2, #0
 800b472:	6822      	ldr	r2, [r4, #0]
 800b474:	bf18      	it	ne
 800b476:	2301      	movne	r3, #1
 800b478:	0692      	lsls	r2, r2, #26
 800b47a:	d42b      	bmi.n	800b4d4 <_printf_common+0xb0>
 800b47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b480:	4649      	mov	r1, r9
 800b482:	4638      	mov	r0, r7
 800b484:	47c0      	blx	r8
 800b486:	3001      	adds	r0, #1
 800b488:	d01e      	beq.n	800b4c8 <_printf_common+0xa4>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	6922      	ldr	r2, [r4, #16]
 800b48e:	f003 0306 	and.w	r3, r3, #6
 800b492:	2b04      	cmp	r3, #4
 800b494:	bf02      	ittt	eq
 800b496:	68e5      	ldreq	r5, [r4, #12]
 800b498:	6833      	ldreq	r3, [r6, #0]
 800b49a:	1aed      	subeq	r5, r5, r3
 800b49c:	68a3      	ldr	r3, [r4, #8]
 800b49e:	bf0c      	ite	eq
 800b4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4a4:	2500      	movne	r5, #0
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	bfc4      	itt	gt
 800b4aa:	1a9b      	subgt	r3, r3, r2
 800b4ac:	18ed      	addgt	r5, r5, r3
 800b4ae:	2600      	movs	r6, #0
 800b4b0:	341a      	adds	r4, #26
 800b4b2:	42b5      	cmp	r5, r6
 800b4b4:	d11a      	bne.n	800b4ec <_printf_common+0xc8>
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	e008      	b.n	800b4cc <_printf_common+0xa8>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4652      	mov	r2, sl
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	47c0      	blx	r8
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d103      	bne.n	800b4d0 <_printf_common+0xac>
 800b4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	e7c6      	b.n	800b462 <_printf_common+0x3e>
 800b4d4:	18e1      	adds	r1, r4, r3
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	2030      	movs	r0, #48	; 0x30
 800b4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4de:	4422      	add	r2, r4
 800b4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4e8:	3302      	adds	r3, #2
 800b4ea:	e7c7      	b.n	800b47c <_printf_common+0x58>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4638      	mov	r0, r7
 800b4f4:	47c0      	blx	r8
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	d0e6      	beq.n	800b4c8 <_printf_common+0xa4>
 800b4fa:	3601      	adds	r6, #1
 800b4fc:	e7d9      	b.n	800b4b2 <_printf_common+0x8e>
	...

0800b500 <_printf_i>:
 800b500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b504:	7e0f      	ldrb	r7, [r1, #24]
 800b506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b508:	2f78      	cmp	r7, #120	; 0x78
 800b50a:	4691      	mov	r9, r2
 800b50c:	4680      	mov	r8, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	469a      	mov	sl, r3
 800b512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b516:	d807      	bhi.n	800b528 <_printf_i+0x28>
 800b518:	2f62      	cmp	r7, #98	; 0x62
 800b51a:	d80a      	bhi.n	800b532 <_printf_i+0x32>
 800b51c:	2f00      	cmp	r7, #0
 800b51e:	f000 80d4 	beq.w	800b6ca <_printf_i+0x1ca>
 800b522:	2f58      	cmp	r7, #88	; 0x58
 800b524:	f000 80c0 	beq.w	800b6a8 <_printf_i+0x1a8>
 800b528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b530:	e03a      	b.n	800b5a8 <_printf_i+0xa8>
 800b532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b536:	2b15      	cmp	r3, #21
 800b538:	d8f6      	bhi.n	800b528 <_printf_i+0x28>
 800b53a:	a101      	add	r1, pc, #4	; (adr r1, 800b540 <_printf_i+0x40>)
 800b53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b540:	0800b599 	.word	0x0800b599
 800b544:	0800b5ad 	.word	0x0800b5ad
 800b548:	0800b529 	.word	0x0800b529
 800b54c:	0800b529 	.word	0x0800b529
 800b550:	0800b529 	.word	0x0800b529
 800b554:	0800b529 	.word	0x0800b529
 800b558:	0800b5ad 	.word	0x0800b5ad
 800b55c:	0800b529 	.word	0x0800b529
 800b560:	0800b529 	.word	0x0800b529
 800b564:	0800b529 	.word	0x0800b529
 800b568:	0800b529 	.word	0x0800b529
 800b56c:	0800b6b1 	.word	0x0800b6b1
 800b570:	0800b5d9 	.word	0x0800b5d9
 800b574:	0800b66b 	.word	0x0800b66b
 800b578:	0800b529 	.word	0x0800b529
 800b57c:	0800b529 	.word	0x0800b529
 800b580:	0800b6d3 	.word	0x0800b6d3
 800b584:	0800b529 	.word	0x0800b529
 800b588:	0800b5d9 	.word	0x0800b5d9
 800b58c:	0800b529 	.word	0x0800b529
 800b590:	0800b529 	.word	0x0800b529
 800b594:	0800b673 	.word	0x0800b673
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	1d1a      	adds	r2, r3, #4
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	602a      	str	r2, [r5, #0]
 800b5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e09f      	b.n	800b6ec <_printf_i+0x1ec>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	682b      	ldr	r3, [r5, #0]
 800b5b0:	0607      	lsls	r7, r0, #24
 800b5b2:	f103 0104 	add.w	r1, r3, #4
 800b5b6:	6029      	str	r1, [r5, #0]
 800b5b8:	d501      	bpl.n	800b5be <_printf_i+0xbe>
 800b5ba:	681e      	ldr	r6, [r3, #0]
 800b5bc:	e003      	b.n	800b5c6 <_printf_i+0xc6>
 800b5be:	0646      	lsls	r6, r0, #25
 800b5c0:	d5fb      	bpl.n	800b5ba <_printf_i+0xba>
 800b5c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b5c6:	2e00      	cmp	r6, #0
 800b5c8:	da03      	bge.n	800b5d2 <_printf_i+0xd2>
 800b5ca:	232d      	movs	r3, #45	; 0x2d
 800b5cc:	4276      	negs	r6, r6
 800b5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d2:	485a      	ldr	r0, [pc, #360]	; (800b73c <_printf_i+0x23c>)
 800b5d4:	230a      	movs	r3, #10
 800b5d6:	e012      	b.n	800b5fe <_printf_i+0xfe>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	6820      	ldr	r0, [r4, #0]
 800b5dc:	1d19      	adds	r1, r3, #4
 800b5de:	6029      	str	r1, [r5, #0]
 800b5e0:	0605      	lsls	r5, r0, #24
 800b5e2:	d501      	bpl.n	800b5e8 <_printf_i+0xe8>
 800b5e4:	681e      	ldr	r6, [r3, #0]
 800b5e6:	e002      	b.n	800b5ee <_printf_i+0xee>
 800b5e8:	0641      	lsls	r1, r0, #25
 800b5ea:	d5fb      	bpl.n	800b5e4 <_printf_i+0xe4>
 800b5ec:	881e      	ldrh	r6, [r3, #0]
 800b5ee:	4853      	ldr	r0, [pc, #332]	; (800b73c <_printf_i+0x23c>)
 800b5f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b5f2:	bf0c      	ite	eq
 800b5f4:	2308      	moveq	r3, #8
 800b5f6:	230a      	movne	r3, #10
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5fe:	6865      	ldr	r5, [r4, #4]
 800b600:	60a5      	str	r5, [r4, #8]
 800b602:	2d00      	cmp	r5, #0
 800b604:	bfa2      	ittt	ge
 800b606:	6821      	ldrge	r1, [r4, #0]
 800b608:	f021 0104 	bicge.w	r1, r1, #4
 800b60c:	6021      	strge	r1, [r4, #0]
 800b60e:	b90e      	cbnz	r6, 800b614 <_printf_i+0x114>
 800b610:	2d00      	cmp	r5, #0
 800b612:	d04b      	beq.n	800b6ac <_printf_i+0x1ac>
 800b614:	4615      	mov	r5, r2
 800b616:	fbb6 f1f3 	udiv	r1, r6, r3
 800b61a:	fb03 6711 	mls	r7, r3, r1, r6
 800b61e:	5dc7      	ldrb	r7, [r0, r7]
 800b620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b624:	4637      	mov	r7, r6
 800b626:	42bb      	cmp	r3, r7
 800b628:	460e      	mov	r6, r1
 800b62a:	d9f4      	bls.n	800b616 <_printf_i+0x116>
 800b62c:	2b08      	cmp	r3, #8
 800b62e:	d10b      	bne.n	800b648 <_printf_i+0x148>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	07de      	lsls	r6, r3, #31
 800b634:	d508      	bpl.n	800b648 <_printf_i+0x148>
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	6861      	ldr	r1, [r4, #4]
 800b63a:	4299      	cmp	r1, r3
 800b63c:	bfde      	ittt	le
 800b63e:	2330      	movle	r3, #48	; 0x30
 800b640:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b644:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b648:	1b52      	subs	r2, r2, r5
 800b64a:	6122      	str	r2, [r4, #16]
 800b64c:	f8cd a000 	str.w	sl, [sp]
 800b650:	464b      	mov	r3, r9
 800b652:	aa03      	add	r2, sp, #12
 800b654:	4621      	mov	r1, r4
 800b656:	4640      	mov	r0, r8
 800b658:	f7ff fee4 	bl	800b424 <_printf_common>
 800b65c:	3001      	adds	r0, #1
 800b65e:	d14a      	bne.n	800b6f6 <_printf_i+0x1f6>
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	b004      	add	sp, #16
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	f043 0320 	orr.w	r3, r3, #32
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	4833      	ldr	r0, [pc, #204]	; (800b740 <_printf_i+0x240>)
 800b674:	2778      	movs	r7, #120	; 0x78
 800b676:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	6829      	ldr	r1, [r5, #0]
 800b67e:	061f      	lsls	r7, r3, #24
 800b680:	f851 6b04 	ldr.w	r6, [r1], #4
 800b684:	d402      	bmi.n	800b68c <_printf_i+0x18c>
 800b686:	065f      	lsls	r7, r3, #25
 800b688:	bf48      	it	mi
 800b68a:	b2b6      	uxthmi	r6, r6
 800b68c:	07df      	lsls	r7, r3, #31
 800b68e:	bf48      	it	mi
 800b690:	f043 0320 	orrmi.w	r3, r3, #32
 800b694:	6029      	str	r1, [r5, #0]
 800b696:	bf48      	it	mi
 800b698:	6023      	strmi	r3, [r4, #0]
 800b69a:	b91e      	cbnz	r6, 800b6a4 <_printf_i+0x1a4>
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	f023 0320 	bic.w	r3, r3, #32
 800b6a2:	6023      	str	r3, [r4, #0]
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	e7a7      	b.n	800b5f8 <_printf_i+0xf8>
 800b6a8:	4824      	ldr	r0, [pc, #144]	; (800b73c <_printf_i+0x23c>)
 800b6aa:	e7e4      	b.n	800b676 <_printf_i+0x176>
 800b6ac:	4615      	mov	r5, r2
 800b6ae:	e7bd      	b.n	800b62c <_printf_i+0x12c>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	6826      	ldr	r6, [r4, #0]
 800b6b4:	6961      	ldr	r1, [r4, #20]
 800b6b6:	1d18      	adds	r0, r3, #4
 800b6b8:	6028      	str	r0, [r5, #0]
 800b6ba:	0635      	lsls	r5, r6, #24
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	d501      	bpl.n	800b6c4 <_printf_i+0x1c4>
 800b6c0:	6019      	str	r1, [r3, #0]
 800b6c2:	e002      	b.n	800b6ca <_printf_i+0x1ca>
 800b6c4:	0670      	lsls	r0, r6, #25
 800b6c6:	d5fb      	bpl.n	800b6c0 <_printf_i+0x1c0>
 800b6c8:	8019      	strh	r1, [r3, #0]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	6123      	str	r3, [r4, #16]
 800b6ce:	4615      	mov	r5, r2
 800b6d0:	e7bc      	b.n	800b64c <_printf_i+0x14c>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	1d1a      	adds	r2, r3, #4
 800b6d6:	602a      	str	r2, [r5, #0]
 800b6d8:	681d      	ldr	r5, [r3, #0]
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f7f4 fd76 	bl	80001d0 <memchr>
 800b6e4:	b108      	cbz	r0, 800b6ea <_printf_i+0x1ea>
 800b6e6:	1b40      	subs	r0, r0, r5
 800b6e8:	6060      	str	r0, [r4, #4]
 800b6ea:	6863      	ldr	r3, [r4, #4]
 800b6ec:	6123      	str	r3, [r4, #16]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f4:	e7aa      	b.n	800b64c <_printf_i+0x14c>
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	47d0      	blx	sl
 800b700:	3001      	adds	r0, #1
 800b702:	d0ad      	beq.n	800b660 <_printf_i+0x160>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	079b      	lsls	r3, r3, #30
 800b708:	d413      	bmi.n	800b732 <_printf_i+0x232>
 800b70a:	68e0      	ldr	r0, [r4, #12]
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	4298      	cmp	r0, r3
 800b710:	bfb8      	it	lt
 800b712:	4618      	movlt	r0, r3
 800b714:	e7a6      	b.n	800b664 <_printf_i+0x164>
 800b716:	2301      	movs	r3, #1
 800b718:	4632      	mov	r2, r6
 800b71a:	4649      	mov	r1, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	47d0      	blx	sl
 800b720:	3001      	adds	r0, #1
 800b722:	d09d      	beq.n	800b660 <_printf_i+0x160>
 800b724:	3501      	adds	r5, #1
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	9903      	ldr	r1, [sp, #12]
 800b72a:	1a5b      	subs	r3, r3, r1
 800b72c:	42ab      	cmp	r3, r5
 800b72e:	dcf2      	bgt.n	800b716 <_printf_i+0x216>
 800b730:	e7eb      	b.n	800b70a <_printf_i+0x20a>
 800b732:	2500      	movs	r5, #0
 800b734:	f104 0619 	add.w	r6, r4, #25
 800b738:	e7f5      	b.n	800b726 <_printf_i+0x226>
 800b73a:	bf00      	nop
 800b73c:	0800fa26 	.word	0x0800fa26
 800b740:	0800fa37 	.word	0x0800fa37

0800b744 <_scanf_float>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	b087      	sub	sp, #28
 800b74a:	4617      	mov	r7, r2
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	688b      	ldr	r3, [r1, #8]
 800b750:	1e5a      	subs	r2, r3, #1
 800b752:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b756:	bf83      	ittte	hi
 800b758:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b75c:	195b      	addhi	r3, r3, r5
 800b75e:	9302      	strhi	r3, [sp, #8]
 800b760:	2300      	movls	r3, #0
 800b762:	bf86      	itte	hi
 800b764:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b768:	608b      	strhi	r3, [r1, #8]
 800b76a:	9302      	strls	r3, [sp, #8]
 800b76c:	680b      	ldr	r3, [r1, #0]
 800b76e:	468b      	mov	fp, r1
 800b770:	2500      	movs	r5, #0
 800b772:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b776:	f84b 3b1c 	str.w	r3, [fp], #28
 800b77a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b77e:	4680      	mov	r8, r0
 800b780:	460c      	mov	r4, r1
 800b782:	465e      	mov	r6, fp
 800b784:	46aa      	mov	sl, r5
 800b786:	46a9      	mov	r9, r5
 800b788:	9501      	str	r5, [sp, #4]
 800b78a:	68a2      	ldr	r2, [r4, #8]
 800b78c:	b152      	cbz	r2, 800b7a4 <_scanf_float+0x60>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b4e      	cmp	r3, #78	; 0x4e
 800b794:	d864      	bhi.n	800b860 <_scanf_float+0x11c>
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	d83c      	bhi.n	800b814 <_scanf_float+0xd0>
 800b79a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b79e:	b2c8      	uxtb	r0, r1
 800b7a0:	280e      	cmp	r0, #14
 800b7a2:	d93a      	bls.n	800b81a <_scanf_float+0xd6>
 800b7a4:	f1b9 0f00 	cmp.w	r9, #0
 800b7a8:	d003      	beq.n	800b7b2 <_scanf_float+0x6e>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7b6:	f1ba 0f01 	cmp.w	sl, #1
 800b7ba:	f200 8113 	bhi.w	800b9e4 <_scanf_float+0x2a0>
 800b7be:	455e      	cmp	r6, fp
 800b7c0:	f200 8105 	bhi.w	800b9ce <_scanf_float+0x28a>
 800b7c4:	2501      	movs	r5, #1
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	b007      	add	sp, #28
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b7d2:	2a0d      	cmp	r2, #13
 800b7d4:	d8e6      	bhi.n	800b7a4 <_scanf_float+0x60>
 800b7d6:	a101      	add	r1, pc, #4	; (adr r1, 800b7dc <_scanf_float+0x98>)
 800b7d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7dc:	0800b91b 	.word	0x0800b91b
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b7a5 	.word	0x0800b7a5
 800b7ec:	0800b97b 	.word	0x0800b97b
 800b7f0:	0800b953 	.word	0x0800b953
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b929 	.word	0x0800b929
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b7a5 	.word	0x0800b7a5
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8e1 	.word	0x0800b8e1
 800b814:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b818:	e7db      	b.n	800b7d2 <_scanf_float+0x8e>
 800b81a:	290e      	cmp	r1, #14
 800b81c:	d8c2      	bhi.n	800b7a4 <_scanf_float+0x60>
 800b81e:	a001      	add	r0, pc, #4	; (adr r0, 800b824 <_scanf_float+0xe0>)
 800b820:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b824:	0800b8d3 	.word	0x0800b8d3
 800b828:	0800b7a5 	.word	0x0800b7a5
 800b82c:	0800b8d3 	.word	0x0800b8d3
 800b830:	0800b967 	.word	0x0800b967
 800b834:	0800b7a5 	.word	0x0800b7a5
 800b838:	0800b881 	.word	0x0800b881
 800b83c:	0800b8bd 	.word	0x0800b8bd
 800b840:	0800b8bd 	.word	0x0800b8bd
 800b844:	0800b8bd 	.word	0x0800b8bd
 800b848:	0800b8bd 	.word	0x0800b8bd
 800b84c:	0800b8bd 	.word	0x0800b8bd
 800b850:	0800b8bd 	.word	0x0800b8bd
 800b854:	0800b8bd 	.word	0x0800b8bd
 800b858:	0800b8bd 	.word	0x0800b8bd
 800b85c:	0800b8bd 	.word	0x0800b8bd
 800b860:	2b6e      	cmp	r3, #110	; 0x6e
 800b862:	d809      	bhi.n	800b878 <_scanf_float+0x134>
 800b864:	2b60      	cmp	r3, #96	; 0x60
 800b866:	d8b2      	bhi.n	800b7ce <_scanf_float+0x8a>
 800b868:	2b54      	cmp	r3, #84	; 0x54
 800b86a:	d077      	beq.n	800b95c <_scanf_float+0x218>
 800b86c:	2b59      	cmp	r3, #89	; 0x59
 800b86e:	d199      	bne.n	800b7a4 <_scanf_float+0x60>
 800b870:	2d07      	cmp	r5, #7
 800b872:	d197      	bne.n	800b7a4 <_scanf_float+0x60>
 800b874:	2508      	movs	r5, #8
 800b876:	e029      	b.n	800b8cc <_scanf_float+0x188>
 800b878:	2b74      	cmp	r3, #116	; 0x74
 800b87a:	d06f      	beq.n	800b95c <_scanf_float+0x218>
 800b87c:	2b79      	cmp	r3, #121	; 0x79
 800b87e:	e7f6      	b.n	800b86e <_scanf_float+0x12a>
 800b880:	6821      	ldr	r1, [r4, #0]
 800b882:	05c8      	lsls	r0, r1, #23
 800b884:	d51a      	bpl.n	800b8bc <_scanf_float+0x178>
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b88c:	6021      	str	r1, [r4, #0]
 800b88e:	f109 0901 	add.w	r9, r9, #1
 800b892:	b11b      	cbz	r3, 800b89c <_scanf_float+0x158>
 800b894:	3b01      	subs	r3, #1
 800b896:	3201      	adds	r2, #1
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	60a2      	str	r2, [r4, #8]
 800b89c:	68a3      	ldr	r3, [r4, #8]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	60a3      	str	r3, [r4, #8]
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	6123      	str	r3, [r4, #16]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	607b      	str	r3, [r7, #4]
 800b8b0:	f340 8084 	ble.w	800b9bc <_scanf_float+0x278>
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	603b      	str	r3, [r7, #0]
 800b8ba:	e766      	b.n	800b78a <_scanf_float+0x46>
 800b8bc:	eb1a 0f05 	cmn.w	sl, r5
 800b8c0:	f47f af70 	bne.w	800b7a4 <_scanf_float+0x60>
 800b8c4:	6822      	ldr	r2, [r4, #0]
 800b8c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b8ca:	6022      	str	r2, [r4, #0]
 800b8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b8d0:	e7e4      	b.n	800b89c <_scanf_float+0x158>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	0610      	lsls	r0, r2, #24
 800b8d6:	f57f af65 	bpl.w	800b7a4 <_scanf_float+0x60>
 800b8da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8de:	e7f4      	b.n	800b8ca <_scanf_float+0x186>
 800b8e0:	f1ba 0f00 	cmp.w	sl, #0
 800b8e4:	d10e      	bne.n	800b904 <_scanf_float+0x1c0>
 800b8e6:	f1b9 0f00 	cmp.w	r9, #0
 800b8ea:	d10e      	bne.n	800b90a <_scanf_float+0x1c6>
 800b8ec:	6822      	ldr	r2, [r4, #0]
 800b8ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8f6:	d108      	bne.n	800b90a <_scanf_float+0x1c6>
 800b8f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8fc:	6022      	str	r2, [r4, #0]
 800b8fe:	f04f 0a01 	mov.w	sl, #1
 800b902:	e7e3      	b.n	800b8cc <_scanf_float+0x188>
 800b904:	f1ba 0f02 	cmp.w	sl, #2
 800b908:	d055      	beq.n	800b9b6 <_scanf_float+0x272>
 800b90a:	2d01      	cmp	r5, #1
 800b90c:	d002      	beq.n	800b914 <_scanf_float+0x1d0>
 800b90e:	2d04      	cmp	r5, #4
 800b910:	f47f af48 	bne.w	800b7a4 <_scanf_float+0x60>
 800b914:	3501      	adds	r5, #1
 800b916:	b2ed      	uxtb	r5, r5
 800b918:	e7d8      	b.n	800b8cc <_scanf_float+0x188>
 800b91a:	f1ba 0f01 	cmp.w	sl, #1
 800b91e:	f47f af41 	bne.w	800b7a4 <_scanf_float+0x60>
 800b922:	f04f 0a02 	mov.w	sl, #2
 800b926:	e7d1      	b.n	800b8cc <_scanf_float+0x188>
 800b928:	b97d      	cbnz	r5, 800b94a <_scanf_float+0x206>
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	f47f af3c 	bne.w	800b7aa <_scanf_float+0x66>
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b938:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b93c:	f47f af39 	bne.w	800b7b2 <_scanf_float+0x6e>
 800b940:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b944:	6022      	str	r2, [r4, #0]
 800b946:	2501      	movs	r5, #1
 800b948:	e7c0      	b.n	800b8cc <_scanf_float+0x188>
 800b94a:	2d03      	cmp	r5, #3
 800b94c:	d0e2      	beq.n	800b914 <_scanf_float+0x1d0>
 800b94e:	2d05      	cmp	r5, #5
 800b950:	e7de      	b.n	800b910 <_scanf_float+0x1cc>
 800b952:	2d02      	cmp	r5, #2
 800b954:	f47f af26 	bne.w	800b7a4 <_scanf_float+0x60>
 800b958:	2503      	movs	r5, #3
 800b95a:	e7b7      	b.n	800b8cc <_scanf_float+0x188>
 800b95c:	2d06      	cmp	r5, #6
 800b95e:	f47f af21 	bne.w	800b7a4 <_scanf_float+0x60>
 800b962:	2507      	movs	r5, #7
 800b964:	e7b2      	b.n	800b8cc <_scanf_float+0x188>
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	0591      	lsls	r1, r2, #22
 800b96a:	f57f af1b 	bpl.w	800b7a4 <_scanf_float+0x60>
 800b96e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b972:	6022      	str	r2, [r4, #0]
 800b974:	f8cd 9004 	str.w	r9, [sp, #4]
 800b978:	e7a8      	b.n	800b8cc <_scanf_float+0x188>
 800b97a:	6822      	ldr	r2, [r4, #0]
 800b97c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b980:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b984:	d006      	beq.n	800b994 <_scanf_float+0x250>
 800b986:	0550      	lsls	r0, r2, #21
 800b988:	f57f af0c 	bpl.w	800b7a4 <_scanf_float+0x60>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	f43f af0f 	beq.w	800b7b2 <_scanf_float+0x6e>
 800b994:	0591      	lsls	r1, r2, #22
 800b996:	bf58      	it	pl
 800b998:	9901      	ldrpl	r1, [sp, #4]
 800b99a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b99e:	bf58      	it	pl
 800b9a0:	eba9 0101 	subpl.w	r1, r9, r1
 800b9a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b9a8:	bf58      	it	pl
 800b9aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b9ae:	6022      	str	r2, [r4, #0]
 800b9b0:	f04f 0900 	mov.w	r9, #0
 800b9b4:	e78a      	b.n	800b8cc <_scanf_float+0x188>
 800b9b6:	f04f 0a03 	mov.w	sl, #3
 800b9ba:	e787      	b.n	800b8cc <_scanf_float+0x188>
 800b9bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4798      	blx	r3
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f43f aedf 	beq.w	800b78a <_scanf_float+0x46>
 800b9cc:	e6ea      	b.n	800b7a4 <_scanf_float+0x60>
 800b9ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4798      	blx	r3
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	e6ec      	b.n	800b7be <_scanf_float+0x7a>
 800b9e4:	1e6b      	subs	r3, r5, #1
 800b9e6:	2b06      	cmp	r3, #6
 800b9e8:	d825      	bhi.n	800ba36 <_scanf_float+0x2f2>
 800b9ea:	2d02      	cmp	r5, #2
 800b9ec:	d836      	bhi.n	800ba5c <_scanf_float+0x318>
 800b9ee:	455e      	cmp	r6, fp
 800b9f0:	f67f aee8 	bls.w	800b7c4 <_scanf_float+0x80>
 800b9f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9fc:	463a      	mov	r2, r7
 800b9fe:	4640      	mov	r0, r8
 800ba00:	4798      	blx	r3
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	e7f1      	b.n	800b9ee <_scanf_float+0x2aa>
 800ba0a:	9802      	ldr	r0, [sp, #8]
 800ba0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ba14:	9002      	str	r0, [sp, #8]
 800ba16:	463a      	mov	r2, r7
 800ba18:	4640      	mov	r0, r8
 800ba1a:	4798      	blx	r3
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba26:	fa5f fa8a 	uxtb.w	sl, sl
 800ba2a:	f1ba 0f02 	cmp.w	sl, #2
 800ba2e:	d1ec      	bne.n	800ba0a <_scanf_float+0x2c6>
 800ba30:	3d03      	subs	r5, #3
 800ba32:	b2ed      	uxtb	r5, r5
 800ba34:	1b76      	subs	r6, r6, r5
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	05da      	lsls	r2, r3, #23
 800ba3a:	d52f      	bpl.n	800ba9c <_scanf_float+0x358>
 800ba3c:	055b      	lsls	r3, r3, #21
 800ba3e:	d510      	bpl.n	800ba62 <_scanf_float+0x31e>
 800ba40:	455e      	cmp	r6, fp
 800ba42:	f67f aebf 	bls.w	800b7c4 <_scanf_float+0x80>
 800ba46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba4e:	463a      	mov	r2, r7
 800ba50:	4640      	mov	r0, r8
 800ba52:	4798      	blx	r3
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	e7f1      	b.n	800ba40 <_scanf_float+0x2fc>
 800ba5c:	46aa      	mov	sl, r5
 800ba5e:	9602      	str	r6, [sp, #8]
 800ba60:	e7df      	b.n	800ba22 <_scanf_float+0x2de>
 800ba62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba66:	6923      	ldr	r3, [r4, #16]
 800ba68:	2965      	cmp	r1, #101	; 0x65
 800ba6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba72:	6123      	str	r3, [r4, #16]
 800ba74:	d00c      	beq.n	800ba90 <_scanf_float+0x34c>
 800ba76:	2945      	cmp	r1, #69	; 0x45
 800ba78:	d00a      	beq.n	800ba90 <_scanf_float+0x34c>
 800ba7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba7e:	463a      	mov	r2, r7
 800ba80:	4640      	mov	r0, r8
 800ba82:	4798      	blx	r3
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	1eb5      	subs	r5, r6, #2
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba94:	463a      	mov	r2, r7
 800ba96:	4640      	mov	r0, r8
 800ba98:	4798      	blx	r3
 800ba9a:	462e      	mov	r6, r5
 800ba9c:	6825      	ldr	r5, [r4, #0]
 800ba9e:	f015 0510 	ands.w	r5, r5, #16
 800baa2:	d158      	bne.n	800bb56 <_scanf_float+0x412>
 800baa4:	7035      	strb	r5, [r6, #0]
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800baac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bab0:	d11c      	bne.n	800baec <_scanf_float+0x3a8>
 800bab2:	9b01      	ldr	r3, [sp, #4]
 800bab4:	454b      	cmp	r3, r9
 800bab6:	eba3 0209 	sub.w	r2, r3, r9
 800baba:	d124      	bne.n	800bb06 <_scanf_float+0x3c2>
 800babc:	2200      	movs	r2, #0
 800babe:	4659      	mov	r1, fp
 800bac0:	4640      	mov	r0, r8
 800bac2:	f002 fd5d 	bl	800e580 <_strtod_r>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	6821      	ldr	r1, [r4, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f011 0f02 	tst.w	r1, #2
 800bad0:	ec57 6b10 	vmov	r6, r7, d0
 800bad4:	f103 0204 	add.w	r2, r3, #4
 800bad8:	d020      	beq.n	800bb1c <_scanf_float+0x3d8>
 800bada:	9903      	ldr	r1, [sp, #12]
 800badc:	600a      	str	r2, [r1, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	e9c3 6700 	strd	r6, r7, [r3]
 800bae4:	68e3      	ldr	r3, [r4, #12]
 800bae6:	3301      	adds	r3, #1
 800bae8:	60e3      	str	r3, [r4, #12]
 800baea:	e66c      	b.n	800b7c6 <_scanf_float+0x82>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0e4      	beq.n	800babc <_scanf_float+0x378>
 800baf2:	9905      	ldr	r1, [sp, #20]
 800baf4:	230a      	movs	r3, #10
 800baf6:	462a      	mov	r2, r5
 800baf8:	3101      	adds	r1, #1
 800bafa:	4640      	mov	r0, r8
 800bafc:	f002 fdc8 	bl	800e690 <_strtol_r>
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	9e05      	ldr	r6, [sp, #20]
 800bb04:	1ac2      	subs	r2, r0, r3
 800bb06:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bb0a:	429e      	cmp	r6, r3
 800bb0c:	bf28      	it	cs
 800bb0e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bb12:	4912      	ldr	r1, [pc, #72]	; (800bb5c <_scanf_float+0x418>)
 800bb14:	4630      	mov	r0, r6
 800bb16:	f000 f93f 	bl	800bd98 <siprintf>
 800bb1a:	e7cf      	b.n	800babc <_scanf_float+0x378>
 800bb1c:	f011 0f04 	tst.w	r1, #4
 800bb20:	9903      	ldr	r1, [sp, #12]
 800bb22:	600a      	str	r2, [r1, #0]
 800bb24:	d1db      	bne.n	800bade <_scanf_float+0x39a>
 800bb26:	f8d3 8000 	ldr.w	r8, [r3]
 800bb2a:	ee10 2a10 	vmov	r2, s0
 800bb2e:	ee10 0a10 	vmov	r0, s0
 800bb32:	463b      	mov	r3, r7
 800bb34:	4639      	mov	r1, r7
 800bb36:	f7f4 fff9 	bl	8000b2c <__aeabi_dcmpun>
 800bb3a:	b128      	cbz	r0, 800bb48 <_scanf_float+0x404>
 800bb3c:	4808      	ldr	r0, [pc, #32]	; (800bb60 <_scanf_float+0x41c>)
 800bb3e:	f000 fadd 	bl	800c0fc <nanf>
 800bb42:	ed88 0a00 	vstr	s0, [r8]
 800bb46:	e7cd      	b.n	800bae4 <_scanf_float+0x3a0>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f5 f84c 	bl	8000be8 <__aeabi_d2f>
 800bb50:	f8c8 0000 	str.w	r0, [r8]
 800bb54:	e7c6      	b.n	800bae4 <_scanf_float+0x3a0>
 800bb56:	2500      	movs	r5, #0
 800bb58:	e635      	b.n	800b7c6 <_scanf_float+0x82>
 800bb5a:	bf00      	nop
 800bb5c:	0800fa48 	.word	0x0800fa48
 800bb60:	0800fa13 	.word	0x0800fa13

0800bb64 <std>:
 800bb64:	2300      	movs	r3, #0
 800bb66:	b510      	push	{r4, lr}
 800bb68:	4604      	mov	r4, r0
 800bb6a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb72:	6083      	str	r3, [r0, #8]
 800bb74:	8181      	strh	r1, [r0, #12]
 800bb76:	6643      	str	r3, [r0, #100]	; 0x64
 800bb78:	81c2      	strh	r2, [r0, #14]
 800bb7a:	6183      	str	r3, [r0, #24]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	2208      	movs	r2, #8
 800bb80:	305c      	adds	r0, #92	; 0x5c
 800bb82:	f000 fa1b 	bl	800bfbc <memset>
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <std+0x58>)
 800bb88:	6263      	str	r3, [r4, #36]	; 0x24
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <std+0x5c>)
 800bb8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb8e:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <std+0x60>)
 800bb90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb92:	4b0d      	ldr	r3, [pc, #52]	; (800bbc8 <std+0x64>)
 800bb94:	6323      	str	r3, [r4, #48]	; 0x30
 800bb96:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <std+0x68>)
 800bb98:	6224      	str	r4, [r4, #32]
 800bb9a:	429c      	cmp	r4, r3
 800bb9c:	d006      	beq.n	800bbac <std+0x48>
 800bb9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bba2:	4294      	cmp	r4, r2
 800bba4:	d002      	beq.n	800bbac <std+0x48>
 800bba6:	33d0      	adds	r3, #208	; 0xd0
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	d105      	bne.n	800bbb8 <std+0x54>
 800bbac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb4:	f000 ba90 	b.w	800c0d8 <__retarget_lock_init_recursive>
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop
 800bbbc:	0800bdd9 	.word	0x0800bdd9
 800bbc0:	0800bdfb 	.word	0x0800bdfb
 800bbc4:	0800be33 	.word	0x0800be33
 800bbc8:	0800be57 	.word	0x0800be57
 800bbcc:	20002d34 	.word	0x20002d34

0800bbd0 <stdio_exit_handler>:
 800bbd0:	4a02      	ldr	r2, [pc, #8]	; (800bbdc <stdio_exit_handler+0xc>)
 800bbd2:	4903      	ldr	r1, [pc, #12]	; (800bbe0 <stdio_exit_handler+0x10>)
 800bbd4:	4803      	ldr	r0, [pc, #12]	; (800bbe4 <stdio_exit_handler+0x14>)
 800bbd6:	f000 b87b 	b.w	800bcd0 <_fwalk_sglue>
 800bbda:	bf00      	nop
 800bbdc:	200000fc 	.word	0x200000fc
 800bbe0:	0800ecd9 	.word	0x0800ecd9
 800bbe4:	20000108 	.word	0x20000108

0800bbe8 <cleanup_stdio>:
 800bbe8:	6841      	ldr	r1, [r0, #4]
 800bbea:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <cleanup_stdio+0x34>)
 800bbec:	4299      	cmp	r1, r3
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	d001      	beq.n	800bbf8 <cleanup_stdio+0x10>
 800bbf4:	f003 f870 	bl	800ecd8 <_fflush_r>
 800bbf8:	68a1      	ldr	r1, [r4, #8]
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <cleanup_stdio+0x38>)
 800bbfc:	4299      	cmp	r1, r3
 800bbfe:	d002      	beq.n	800bc06 <cleanup_stdio+0x1e>
 800bc00:	4620      	mov	r0, r4
 800bc02:	f003 f869 	bl	800ecd8 <_fflush_r>
 800bc06:	68e1      	ldr	r1, [r4, #12]
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <cleanup_stdio+0x3c>)
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	d004      	beq.n	800bc18 <cleanup_stdio+0x30>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc14:	f003 b860 	b.w	800ecd8 <_fflush_r>
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20002d34 	.word	0x20002d34
 800bc20:	20002d9c 	.word	0x20002d9c
 800bc24:	20002e04 	.word	0x20002e04

0800bc28 <global_stdio_init.part.0>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	4b0b      	ldr	r3, [pc, #44]	; (800bc58 <global_stdio_init.part.0+0x30>)
 800bc2c:	4c0b      	ldr	r4, [pc, #44]	; (800bc5c <global_stdio_init.part.0+0x34>)
 800bc2e:	4a0c      	ldr	r2, [pc, #48]	; (800bc60 <global_stdio_init.part.0+0x38>)
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	4620      	mov	r0, r4
 800bc34:	2200      	movs	r2, #0
 800bc36:	2104      	movs	r1, #4
 800bc38:	f7ff ff94 	bl	800bb64 <std>
 800bc3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc40:	2201      	movs	r2, #1
 800bc42:	2109      	movs	r1, #9
 800bc44:	f7ff ff8e 	bl	800bb64 <std>
 800bc48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc52:	2112      	movs	r1, #18
 800bc54:	f7ff bf86 	b.w	800bb64 <std>
 800bc58:	20002e6c 	.word	0x20002e6c
 800bc5c:	20002d34 	.word	0x20002d34
 800bc60:	0800bbd1 	.word	0x0800bbd1

0800bc64 <__sfp_lock_acquire>:
 800bc64:	4801      	ldr	r0, [pc, #4]	; (800bc6c <__sfp_lock_acquire+0x8>)
 800bc66:	f000 ba38 	b.w	800c0da <__retarget_lock_acquire_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20002e75 	.word	0x20002e75

0800bc70 <__sfp_lock_release>:
 800bc70:	4801      	ldr	r0, [pc, #4]	; (800bc78 <__sfp_lock_release+0x8>)
 800bc72:	f000 ba33 	b.w	800c0dc <__retarget_lock_release_recursive>
 800bc76:	bf00      	nop
 800bc78:	20002e75 	.word	0x20002e75

0800bc7c <__sinit>:
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	4604      	mov	r4, r0
 800bc80:	f7ff fff0 	bl	800bc64 <__sfp_lock_acquire>
 800bc84:	6a23      	ldr	r3, [r4, #32]
 800bc86:	b11b      	cbz	r3, 800bc90 <__sinit+0x14>
 800bc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc8c:	f7ff bff0 	b.w	800bc70 <__sfp_lock_release>
 800bc90:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <__sinit+0x28>)
 800bc92:	6223      	str	r3, [r4, #32]
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <__sinit+0x2c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f5      	bne.n	800bc88 <__sinit+0xc>
 800bc9c:	f7ff ffc4 	bl	800bc28 <global_stdio_init.part.0>
 800bca0:	e7f2      	b.n	800bc88 <__sinit+0xc>
 800bca2:	bf00      	nop
 800bca4:	0800bbe9 	.word	0x0800bbe9
 800bca8:	20002e6c 	.word	0x20002e6c

0800bcac <fiprintf>:
 800bcac:	b40e      	push	{r1, r2, r3}
 800bcae:	b503      	push	{r0, r1, lr}
 800bcb0:	4601      	mov	r1, r0
 800bcb2:	ab03      	add	r3, sp, #12
 800bcb4:	4805      	ldr	r0, [pc, #20]	; (800bccc <fiprintf+0x20>)
 800bcb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	f002 fe6b 	bl	800e998 <_vfiprintf_r>
 800bcc2:	b002      	add	sp, #8
 800bcc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcc8:	b003      	add	sp, #12
 800bcca:	4770      	bx	lr
 800bccc:	20000154 	.word	0x20000154

0800bcd0 <_fwalk_sglue>:
 800bcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	4688      	mov	r8, r1
 800bcd8:	4614      	mov	r4, r2
 800bcda:	2600      	movs	r6, #0
 800bcdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bce0:	f1b9 0901 	subs.w	r9, r9, #1
 800bce4:	d505      	bpl.n	800bcf2 <_fwalk_sglue+0x22>
 800bce6:	6824      	ldr	r4, [r4, #0]
 800bce8:	2c00      	cmp	r4, #0
 800bcea:	d1f7      	bne.n	800bcdc <_fwalk_sglue+0xc>
 800bcec:	4630      	mov	r0, r6
 800bcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf2:	89ab      	ldrh	r3, [r5, #12]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d907      	bls.n	800bd08 <_fwalk_sglue+0x38>
 800bcf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	d003      	beq.n	800bd08 <_fwalk_sglue+0x38>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4638      	mov	r0, r7
 800bd04:	47c0      	blx	r8
 800bd06:	4306      	orrs	r6, r0
 800bd08:	3568      	adds	r5, #104	; 0x68
 800bd0a:	e7e9      	b.n	800bce0 <_fwalk_sglue+0x10>

0800bd0c <iprintf>:
 800bd0c:	b40f      	push	{r0, r1, r2, r3}
 800bd0e:	b507      	push	{r0, r1, r2, lr}
 800bd10:	4906      	ldr	r1, [pc, #24]	; (800bd2c <iprintf+0x20>)
 800bd12:	ab04      	add	r3, sp, #16
 800bd14:	6808      	ldr	r0, [r1, #0]
 800bd16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd1a:	6881      	ldr	r1, [r0, #8]
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	f002 fe3b 	bl	800e998 <_vfiprintf_r>
 800bd22:	b003      	add	sp, #12
 800bd24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd28:	b004      	add	sp, #16
 800bd2a:	4770      	bx	lr
 800bd2c:	20000154 	.word	0x20000154

0800bd30 <sniprintf>:
 800bd30:	b40c      	push	{r2, r3}
 800bd32:	b530      	push	{r4, r5, lr}
 800bd34:	4b17      	ldr	r3, [pc, #92]	; (800bd94 <sniprintf+0x64>)
 800bd36:	1e0c      	subs	r4, r1, #0
 800bd38:	681d      	ldr	r5, [r3, #0]
 800bd3a:	b09d      	sub	sp, #116	; 0x74
 800bd3c:	da08      	bge.n	800bd50 <sniprintf+0x20>
 800bd3e:	238b      	movs	r3, #139	; 0x8b
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	f04f 30ff 	mov.w	r0, #4294967295
 800bd46:	b01d      	add	sp, #116	; 0x74
 800bd48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd4c:	b002      	add	sp, #8
 800bd4e:	4770      	bx	lr
 800bd50:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd54:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd58:	bf14      	ite	ne
 800bd5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd5e:	4623      	moveq	r3, r4
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	9307      	str	r3, [sp, #28]
 800bd64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd68:	9002      	str	r0, [sp, #8]
 800bd6a:	9006      	str	r0, [sp, #24]
 800bd6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd72:	ab21      	add	r3, sp, #132	; 0x84
 800bd74:	a902      	add	r1, sp, #8
 800bd76:	4628      	mov	r0, r5
 800bd78:	9301      	str	r3, [sp, #4]
 800bd7a:	f002 fce5 	bl	800e748 <_svfiprintf_r>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	bfbc      	itt	lt
 800bd82:	238b      	movlt	r3, #139	; 0x8b
 800bd84:	602b      	strlt	r3, [r5, #0]
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	d0dd      	beq.n	800bd46 <sniprintf+0x16>
 800bd8a:	9b02      	ldr	r3, [sp, #8]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	701a      	strb	r2, [r3, #0]
 800bd90:	e7d9      	b.n	800bd46 <sniprintf+0x16>
 800bd92:	bf00      	nop
 800bd94:	20000154 	.word	0x20000154

0800bd98 <siprintf>:
 800bd98:	b40e      	push	{r1, r2, r3}
 800bd9a:	b500      	push	{lr}
 800bd9c:	b09c      	sub	sp, #112	; 0x70
 800bd9e:	ab1d      	add	r3, sp, #116	; 0x74
 800bda0:	9002      	str	r0, [sp, #8]
 800bda2:	9006      	str	r0, [sp, #24]
 800bda4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bda8:	4809      	ldr	r0, [pc, #36]	; (800bdd0 <siprintf+0x38>)
 800bdaa:	9107      	str	r1, [sp, #28]
 800bdac:	9104      	str	r1, [sp, #16]
 800bdae:	4909      	ldr	r1, [pc, #36]	; (800bdd4 <siprintf+0x3c>)
 800bdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb4:	9105      	str	r1, [sp, #20]
 800bdb6:	6800      	ldr	r0, [r0, #0]
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	a902      	add	r1, sp, #8
 800bdbc:	f002 fcc4 	bl	800e748 <_svfiprintf_r>
 800bdc0:	9b02      	ldr	r3, [sp, #8]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	b01c      	add	sp, #112	; 0x70
 800bdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdcc:	b003      	add	sp, #12
 800bdce:	4770      	bx	lr
 800bdd0:	20000154 	.word	0x20000154
 800bdd4:	ffff0208 	.word	0xffff0208

0800bdd8 <__sread>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	f000 f92c 	bl	800c03c <_read_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	bfab      	itete	ge
 800bde8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdea:	89a3      	ldrhlt	r3, [r4, #12]
 800bdec:	181b      	addge	r3, r3, r0
 800bdee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdf2:	bfac      	ite	ge
 800bdf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdf6:	81a3      	strhlt	r3, [r4, #12]
 800bdf8:	bd10      	pop	{r4, pc}

0800bdfa <__swrite>:
 800bdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfe:	461f      	mov	r7, r3
 800be00:	898b      	ldrh	r3, [r1, #12]
 800be02:	05db      	lsls	r3, r3, #23
 800be04:	4605      	mov	r5, r0
 800be06:	460c      	mov	r4, r1
 800be08:	4616      	mov	r6, r2
 800be0a:	d505      	bpl.n	800be18 <__swrite+0x1e>
 800be0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be10:	2302      	movs	r3, #2
 800be12:	2200      	movs	r2, #0
 800be14:	f000 f900 	bl	800c018 <_lseek_r>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	4628      	mov	r0, r5
 800be2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	f000 b917 	b.w	800c060 <_write_r>

0800be32 <__sseek>:
 800be32:	b510      	push	{r4, lr}
 800be34:	460c      	mov	r4, r1
 800be36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3a:	f000 f8ed 	bl	800c018 <_lseek_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	bf15      	itete	ne
 800be44:	6560      	strne	r0, [r4, #84]	; 0x54
 800be46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be4e:	81a3      	strheq	r3, [r4, #12]
 800be50:	bf18      	it	ne
 800be52:	81a3      	strhne	r3, [r4, #12]
 800be54:	bd10      	pop	{r4, pc}

0800be56 <__sclose>:
 800be56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5a:	f000 b8cd 	b.w	800bff8 <_close_r>

0800be5e <__swbuf_r>:
 800be5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be60:	460e      	mov	r6, r1
 800be62:	4614      	mov	r4, r2
 800be64:	4605      	mov	r5, r0
 800be66:	b118      	cbz	r0, 800be70 <__swbuf_r+0x12>
 800be68:	6a03      	ldr	r3, [r0, #32]
 800be6a:	b90b      	cbnz	r3, 800be70 <__swbuf_r+0x12>
 800be6c:	f7ff ff06 	bl	800bc7c <__sinit>
 800be70:	69a3      	ldr	r3, [r4, #24]
 800be72:	60a3      	str	r3, [r4, #8]
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	071a      	lsls	r2, r3, #28
 800be78:	d525      	bpl.n	800bec6 <__swbuf_r+0x68>
 800be7a:	6923      	ldr	r3, [r4, #16]
 800be7c:	b31b      	cbz	r3, 800bec6 <__swbuf_r+0x68>
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	6922      	ldr	r2, [r4, #16]
 800be82:	1a98      	subs	r0, r3, r2
 800be84:	6963      	ldr	r3, [r4, #20]
 800be86:	b2f6      	uxtb	r6, r6
 800be88:	4283      	cmp	r3, r0
 800be8a:	4637      	mov	r7, r6
 800be8c:	dc04      	bgt.n	800be98 <__swbuf_r+0x3a>
 800be8e:	4621      	mov	r1, r4
 800be90:	4628      	mov	r0, r5
 800be92:	f002 ff21 	bl	800ecd8 <_fflush_r>
 800be96:	b9e0      	cbnz	r0, 800bed2 <__swbuf_r+0x74>
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	60a3      	str	r3, [r4, #8]
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	701e      	strb	r6, [r3, #0]
 800bea6:	6962      	ldr	r2, [r4, #20]
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	429a      	cmp	r2, r3
 800beac:	d004      	beq.n	800beb8 <__swbuf_r+0x5a>
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	07db      	lsls	r3, r3, #31
 800beb2:	d506      	bpl.n	800bec2 <__swbuf_r+0x64>
 800beb4:	2e0a      	cmp	r6, #10
 800beb6:	d104      	bne.n	800bec2 <__swbuf_r+0x64>
 800beb8:	4621      	mov	r1, r4
 800beba:	4628      	mov	r0, r5
 800bebc:	f002 ff0c 	bl	800ecd8 <_fflush_r>
 800bec0:	b938      	cbnz	r0, 800bed2 <__swbuf_r+0x74>
 800bec2:	4638      	mov	r0, r7
 800bec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 f805 	bl	800bed8 <__swsetup_r>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d0d5      	beq.n	800be7e <__swbuf_r+0x20>
 800bed2:	f04f 37ff 	mov.w	r7, #4294967295
 800bed6:	e7f4      	b.n	800bec2 <__swbuf_r+0x64>

0800bed8 <__swsetup_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4b2a      	ldr	r3, [pc, #168]	; (800bf84 <__swsetup_r+0xac>)
 800bedc:	4605      	mov	r5, r0
 800bede:	6818      	ldr	r0, [r3, #0]
 800bee0:	460c      	mov	r4, r1
 800bee2:	b118      	cbz	r0, 800beec <__swsetup_r+0x14>
 800bee4:	6a03      	ldr	r3, [r0, #32]
 800bee6:	b90b      	cbnz	r3, 800beec <__swsetup_r+0x14>
 800bee8:	f7ff fec8 	bl	800bc7c <__sinit>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bef2:	0718      	lsls	r0, r3, #28
 800bef4:	d422      	bmi.n	800bf3c <__swsetup_r+0x64>
 800bef6:	06d9      	lsls	r1, r3, #27
 800bef8:	d407      	bmi.n	800bf0a <__swsetup_r+0x32>
 800befa:	2309      	movs	r3, #9
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	e034      	b.n	800bf74 <__swsetup_r+0x9c>
 800bf0a:	0758      	lsls	r0, r3, #29
 800bf0c:	d512      	bpl.n	800bf34 <__swsetup_r+0x5c>
 800bf0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf10:	b141      	cbz	r1, 800bf24 <__swsetup_r+0x4c>
 800bf12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d002      	beq.n	800bf20 <__swsetup_r+0x48>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f000 ff76 	bl	800ce0c <_free_r>
 800bf20:	2300      	movs	r3, #0
 800bf22:	6363      	str	r3, [r4, #52]	; 0x34
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	6063      	str	r3, [r4, #4]
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	f043 0308 	orr.w	r3, r3, #8
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b94b      	cbnz	r3, 800bf54 <__swsetup_r+0x7c>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4a:	d003      	beq.n	800bf54 <__swsetup_r+0x7c>
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f002 ff10 	bl	800ed74 <__smakebuf_r>
 800bf54:	89a0      	ldrh	r0, [r4, #12]
 800bf56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf5a:	f010 0301 	ands.w	r3, r0, #1
 800bf5e:	d00a      	beq.n	800bf76 <__swsetup_r+0x9e>
 800bf60:	2300      	movs	r3, #0
 800bf62:	60a3      	str	r3, [r4, #8]
 800bf64:	6963      	ldr	r3, [r4, #20]
 800bf66:	425b      	negs	r3, r3
 800bf68:	61a3      	str	r3, [r4, #24]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	b943      	cbnz	r3, 800bf80 <__swsetup_r+0xa8>
 800bf6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf72:	d1c4      	bne.n	800befe <__swsetup_r+0x26>
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
 800bf76:	0781      	lsls	r1, r0, #30
 800bf78:	bf58      	it	pl
 800bf7a:	6963      	ldrpl	r3, [r4, #20]
 800bf7c:	60a3      	str	r3, [r4, #8]
 800bf7e:	e7f4      	b.n	800bf6a <__swsetup_r+0x92>
 800bf80:	2000      	movs	r0, #0
 800bf82:	e7f7      	b.n	800bf74 <__swsetup_r+0x9c>
 800bf84:	20000154 	.word	0x20000154

0800bf88 <memmove>:
 800bf88:	4288      	cmp	r0, r1
 800bf8a:	b510      	push	{r4, lr}
 800bf8c:	eb01 0402 	add.w	r4, r1, r2
 800bf90:	d902      	bls.n	800bf98 <memmove+0x10>
 800bf92:	4284      	cmp	r4, r0
 800bf94:	4623      	mov	r3, r4
 800bf96:	d807      	bhi.n	800bfa8 <memmove+0x20>
 800bf98:	1e43      	subs	r3, r0, #1
 800bf9a:	42a1      	cmp	r1, r4
 800bf9c:	d008      	beq.n	800bfb0 <memmove+0x28>
 800bf9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfa6:	e7f8      	b.n	800bf9a <memmove+0x12>
 800bfa8:	4402      	add	r2, r0
 800bfaa:	4601      	mov	r1, r0
 800bfac:	428a      	cmp	r2, r1
 800bfae:	d100      	bne.n	800bfb2 <memmove+0x2a>
 800bfb0:	bd10      	pop	{r4, pc}
 800bfb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfba:	e7f7      	b.n	800bfac <memmove+0x24>

0800bfbc <memset>:
 800bfbc:	4402      	add	r2, r0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d100      	bne.n	800bfc6 <memset+0xa>
 800bfc4:	4770      	bx	lr
 800bfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfca:	e7f9      	b.n	800bfc0 <memset+0x4>

0800bfcc <strncmp>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	b16a      	cbz	r2, 800bfec <strncmp+0x20>
 800bfd0:	3901      	subs	r1, #1
 800bfd2:	1884      	adds	r4, r0, r2
 800bfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d103      	bne.n	800bfe8 <strncmp+0x1c>
 800bfe0:	42a0      	cmp	r0, r4
 800bfe2:	d001      	beq.n	800bfe8 <strncmp+0x1c>
 800bfe4:	2a00      	cmp	r2, #0
 800bfe6:	d1f5      	bne.n	800bfd4 <strncmp+0x8>
 800bfe8:	1ad0      	subs	r0, r2, r3
 800bfea:	bd10      	pop	{r4, pc}
 800bfec:	4610      	mov	r0, r2
 800bfee:	e7fc      	b.n	800bfea <strncmp+0x1e>

0800bff0 <_localeconv_r>:
 800bff0:	4800      	ldr	r0, [pc, #0]	; (800bff4 <_localeconv_r+0x4>)
 800bff2:	4770      	bx	lr
 800bff4:	20000248 	.word	0x20000248

0800bff8 <_close_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d06      	ldr	r5, [pc, #24]	; (800c014 <_close_r+0x1c>)
 800bffc:	2300      	movs	r3, #0
 800bffe:	4604      	mov	r4, r0
 800c000:	4608      	mov	r0, r1
 800c002:	602b      	str	r3, [r5, #0]
 800c004:	f7f6 fb82 	bl	800270c <_close>
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	d102      	bne.n	800c012 <_close_r+0x1a>
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	b103      	cbz	r3, 800c012 <_close_r+0x1a>
 800c010:	6023      	str	r3, [r4, #0]
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	20002e70 	.word	0x20002e70

0800c018 <_lseek_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d07      	ldr	r5, [pc, #28]	; (800c038 <_lseek_r+0x20>)
 800c01c:	4604      	mov	r4, r0
 800c01e:	4608      	mov	r0, r1
 800c020:	4611      	mov	r1, r2
 800c022:	2200      	movs	r2, #0
 800c024:	602a      	str	r2, [r5, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	f7f6 fb97 	bl	800275a <_lseek>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_lseek_r+0x1e>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_lseek_r+0x1e>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20002e70 	.word	0x20002e70

0800c03c <_read_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4d07      	ldr	r5, [pc, #28]	; (800c05c <_read_r+0x20>)
 800c040:	4604      	mov	r4, r0
 800c042:	4608      	mov	r0, r1
 800c044:	4611      	mov	r1, r2
 800c046:	2200      	movs	r2, #0
 800c048:	602a      	str	r2, [r5, #0]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f7f6 fb41 	bl	80026d2 <_read>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_read_r+0x1e>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_read_r+0x1e>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20002e70 	.word	0x20002e70

0800c060 <_write_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_write_r+0x20>)
 800c064:	4604      	mov	r4, r0
 800c066:	4608      	mov	r0, r1
 800c068:	4611      	mov	r1, r2
 800c06a:	2200      	movs	r2, #0
 800c06c:	602a      	str	r2, [r5, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	f7f4 ffe5 	bl	800103e <_write>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_write_r+0x1e>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_write_r+0x1e>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	20002e70 	.word	0x20002e70

0800c084 <__errno>:
 800c084:	4b01      	ldr	r3, [pc, #4]	; (800c08c <__errno+0x8>)
 800c086:	6818      	ldr	r0, [r3, #0]
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	20000154 	.word	0x20000154

0800c090 <__libc_init_array>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	4d0d      	ldr	r5, [pc, #52]	; (800c0c8 <__libc_init_array+0x38>)
 800c094:	4c0d      	ldr	r4, [pc, #52]	; (800c0cc <__libc_init_array+0x3c>)
 800c096:	1b64      	subs	r4, r4, r5
 800c098:	10a4      	asrs	r4, r4, #2
 800c09a:	2600      	movs	r6, #0
 800c09c:	42a6      	cmp	r6, r4
 800c09e:	d109      	bne.n	800c0b4 <__libc_init_array+0x24>
 800c0a0:	4d0b      	ldr	r5, [pc, #44]	; (800c0d0 <__libc_init_array+0x40>)
 800c0a2:	4c0c      	ldr	r4, [pc, #48]	; (800c0d4 <__libc_init_array+0x44>)
 800c0a4:	f003 fae4 	bl	800f670 <_init>
 800c0a8:	1b64      	subs	r4, r4, r5
 800c0aa:	10a4      	asrs	r4, r4, #2
 800c0ac:	2600      	movs	r6, #0
 800c0ae:	42a6      	cmp	r6, r4
 800c0b0:	d105      	bne.n	800c0be <__libc_init_array+0x2e>
 800c0b2:	bd70      	pop	{r4, r5, r6, pc}
 800c0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0b8:	4798      	blx	r3
 800c0ba:	3601      	adds	r6, #1
 800c0bc:	e7ee      	b.n	800c09c <__libc_init_array+0xc>
 800c0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0c2:	4798      	blx	r3
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	e7f2      	b.n	800c0ae <__libc_init_array+0x1e>
 800c0c8:	0800fe0c 	.word	0x0800fe0c
 800c0cc:	0800fe0c 	.word	0x0800fe0c
 800c0d0:	0800fe0c 	.word	0x0800fe0c
 800c0d4:	0800fe10 	.word	0x0800fe10

0800c0d8 <__retarget_lock_init_recursive>:
 800c0d8:	4770      	bx	lr

0800c0da <__retarget_lock_acquire_recursive>:
 800c0da:	4770      	bx	lr

0800c0dc <__retarget_lock_release_recursive>:
 800c0dc:	4770      	bx	lr

0800c0de <memcpy>:
 800c0de:	440a      	add	r2, r1
 800c0e0:	4291      	cmp	r1, r2
 800c0e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e6:	d100      	bne.n	800c0ea <memcpy+0xc>
 800c0e8:	4770      	bx	lr
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f4:	4291      	cmp	r1, r2
 800c0f6:	d1f9      	bne.n	800c0ec <memcpy+0xe>
 800c0f8:	bd10      	pop	{r4, pc}
	...

0800c0fc <nanf>:
 800c0fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c104 <nanf+0x8>
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	7fc00000 	.word	0x7fc00000

0800c108 <abort>:
 800c108:	b508      	push	{r3, lr}
 800c10a:	2006      	movs	r0, #6
 800c10c:	f002 fe96 	bl	800ee3c <raise>
 800c110:	2001      	movs	r0, #1
 800c112:	f7f6 fad4 	bl	80026be <_exit>

0800c116 <quorem>:
 800c116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11a:	6903      	ldr	r3, [r0, #16]
 800c11c:	690c      	ldr	r4, [r1, #16]
 800c11e:	42a3      	cmp	r3, r4
 800c120:	4607      	mov	r7, r0
 800c122:	db7e      	blt.n	800c222 <quorem+0x10c>
 800c124:	3c01      	subs	r4, #1
 800c126:	f101 0814 	add.w	r8, r1, #20
 800c12a:	f100 0514 	add.w	r5, r0, #20
 800c12e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c13c:	3301      	adds	r3, #1
 800c13e:	429a      	cmp	r2, r3
 800c140:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c144:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c148:	fbb2 f6f3 	udiv	r6, r2, r3
 800c14c:	d331      	bcc.n	800c1b2 <quorem+0x9c>
 800c14e:	f04f 0e00 	mov.w	lr, #0
 800c152:	4640      	mov	r0, r8
 800c154:	46ac      	mov	ip, r5
 800c156:	46f2      	mov	sl, lr
 800c158:	f850 2b04 	ldr.w	r2, [r0], #4
 800c15c:	b293      	uxth	r3, r2
 800c15e:	fb06 e303 	mla	r3, r6, r3, lr
 800c162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c166:	0c1a      	lsrs	r2, r3, #16
 800c168:	b29b      	uxth	r3, r3
 800c16a:	ebaa 0303 	sub.w	r3, sl, r3
 800c16e:	f8dc a000 	ldr.w	sl, [ip]
 800c172:	fa13 f38a 	uxtah	r3, r3, sl
 800c176:	fb06 220e 	mla	r2, r6, lr, r2
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	9b00      	ldr	r3, [sp, #0]
 800c17e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c182:	b292      	uxth	r2, r2
 800c184:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c18c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c190:	4581      	cmp	r9, r0
 800c192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c196:	f84c 3b04 	str.w	r3, [ip], #4
 800c19a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c19e:	d2db      	bcs.n	800c158 <quorem+0x42>
 800c1a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c1a4:	b92b      	cbnz	r3, 800c1b2 <quorem+0x9c>
 800c1a6:	9b01      	ldr	r3, [sp, #4]
 800c1a8:	3b04      	subs	r3, #4
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	d32c      	bcc.n	800c20a <quorem+0xf4>
 800c1b0:	613c      	str	r4, [r7, #16]
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	f001 f9f0 	bl	800d598 <__mcmp>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	db22      	blt.n	800c202 <quorem+0xec>
 800c1bc:	3601      	adds	r6, #1
 800c1be:	4629      	mov	r1, r5
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800c1c6:	f8d1 c000 	ldr.w	ip, [r1]
 800c1ca:	b293      	uxth	r3, r2
 800c1cc:	1ac3      	subs	r3, r0, r3
 800c1ce:	0c12      	lsrs	r2, r2, #16
 800c1d0:	fa13 f38c 	uxtah	r3, r3, ip
 800c1d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c1d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1e2:	45c1      	cmp	r9, r8
 800c1e4:	f841 3b04 	str.w	r3, [r1], #4
 800c1e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c1ec:	d2e9      	bcs.n	800c1c2 <quorem+0xac>
 800c1ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1f6:	b922      	cbnz	r2, 800c202 <quorem+0xec>
 800c1f8:	3b04      	subs	r3, #4
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	d30a      	bcc.n	800c216 <quorem+0x100>
 800c200:	613c      	str	r4, [r7, #16]
 800c202:	4630      	mov	r0, r6
 800c204:	b003      	add	sp, #12
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20a:	6812      	ldr	r2, [r2, #0]
 800c20c:	3b04      	subs	r3, #4
 800c20e:	2a00      	cmp	r2, #0
 800c210:	d1ce      	bne.n	800c1b0 <quorem+0x9a>
 800c212:	3c01      	subs	r4, #1
 800c214:	e7c9      	b.n	800c1aa <quorem+0x94>
 800c216:	6812      	ldr	r2, [r2, #0]
 800c218:	3b04      	subs	r3, #4
 800c21a:	2a00      	cmp	r2, #0
 800c21c:	d1f0      	bne.n	800c200 <quorem+0xea>
 800c21e:	3c01      	subs	r4, #1
 800c220:	e7eb      	b.n	800c1fa <quorem+0xe4>
 800c222:	2000      	movs	r0, #0
 800c224:	e7ee      	b.n	800c204 <quorem+0xee>
	...

0800c228 <_dtoa_r>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	ed2d 8b04 	vpush	{d8-d9}
 800c230:	69c5      	ldr	r5, [r0, #28]
 800c232:	b093      	sub	sp, #76	; 0x4c
 800c234:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c238:	ec57 6b10 	vmov	r6, r7, d0
 800c23c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c240:	9107      	str	r1, [sp, #28]
 800c242:	4604      	mov	r4, r0
 800c244:	920a      	str	r2, [sp, #40]	; 0x28
 800c246:	930d      	str	r3, [sp, #52]	; 0x34
 800c248:	b975      	cbnz	r5, 800c268 <_dtoa_r+0x40>
 800c24a:	2010      	movs	r0, #16
 800c24c:	f000 fe2a 	bl	800cea4 <malloc>
 800c250:	4602      	mov	r2, r0
 800c252:	61e0      	str	r0, [r4, #28]
 800c254:	b920      	cbnz	r0, 800c260 <_dtoa_r+0x38>
 800c256:	4bae      	ldr	r3, [pc, #696]	; (800c510 <_dtoa_r+0x2e8>)
 800c258:	21ef      	movs	r1, #239	; 0xef
 800c25a:	48ae      	ldr	r0, [pc, #696]	; (800c514 <_dtoa_r+0x2ec>)
 800c25c:	f7fe fdee 	bl	800ae3c <__assert_func>
 800c260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c264:	6005      	str	r5, [r0, #0]
 800c266:	60c5      	str	r5, [r0, #12]
 800c268:	69e3      	ldr	r3, [r4, #28]
 800c26a:	6819      	ldr	r1, [r3, #0]
 800c26c:	b151      	cbz	r1, 800c284 <_dtoa_r+0x5c>
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	604a      	str	r2, [r1, #4]
 800c272:	2301      	movs	r3, #1
 800c274:	4093      	lsls	r3, r2
 800c276:	608b      	str	r3, [r1, #8]
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 ff07 	bl	800d08c <_Bfree>
 800c27e:	69e3      	ldr	r3, [r4, #28]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	1e3b      	subs	r3, r7, #0
 800c286:	bfbb      	ittet	lt
 800c288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c28c:	9303      	strlt	r3, [sp, #12]
 800c28e:	2300      	movge	r3, #0
 800c290:	2201      	movlt	r2, #1
 800c292:	bfac      	ite	ge
 800c294:	f8c8 3000 	strge.w	r3, [r8]
 800c298:	f8c8 2000 	strlt.w	r2, [r8]
 800c29c:	4b9e      	ldr	r3, [pc, #632]	; (800c518 <_dtoa_r+0x2f0>)
 800c29e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c2a2:	ea33 0308 	bics.w	r3, r3, r8
 800c2a6:	d11b      	bne.n	800c2e0 <_dtoa_r+0xb8>
 800c2a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c2b4:	4333      	orrs	r3, r6
 800c2b6:	f000 8593 	beq.w	800cde0 <_dtoa_r+0xbb8>
 800c2ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2bc:	b963      	cbnz	r3, 800c2d8 <_dtoa_r+0xb0>
 800c2be:	4b97      	ldr	r3, [pc, #604]	; (800c51c <_dtoa_r+0x2f4>)
 800c2c0:	e027      	b.n	800c312 <_dtoa_r+0xea>
 800c2c2:	4b97      	ldr	r3, [pc, #604]	; (800c520 <_dtoa_r+0x2f8>)
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	9800      	ldr	r0, [sp, #0]
 800c2ce:	b013      	add	sp, #76	; 0x4c
 800c2d0:	ecbd 8b04 	vpop	{d8-d9}
 800c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d8:	4b90      	ldr	r3, [pc, #576]	; (800c51c <_dtoa_r+0x2f4>)
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	3303      	adds	r3, #3
 800c2de:	e7f3      	b.n	800c2c8 <_dtoa_r+0xa0>
 800c2e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	ec51 0b17 	vmov	r0, r1, d7
 800c2ea:	eeb0 8a47 	vmov.f32	s16, s14
 800c2ee:	eef0 8a67 	vmov.f32	s17, s15
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f7f4 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2f8:	4681      	mov	r9, r0
 800c2fa:	b160      	cbz	r0, 800c316 <_dtoa_r+0xee>
 800c2fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2fe:	2301      	movs	r3, #1
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 8568 	beq.w	800cdda <_dtoa_r+0xbb2>
 800c30a:	4b86      	ldr	r3, [pc, #536]	; (800c524 <_dtoa_r+0x2fc>)
 800c30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	3b01      	subs	r3, #1
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	e7da      	b.n	800c2cc <_dtoa_r+0xa4>
 800c316:	aa10      	add	r2, sp, #64	; 0x40
 800c318:	a911      	add	r1, sp, #68	; 0x44
 800c31a:	4620      	mov	r0, r4
 800c31c:	eeb0 0a48 	vmov.f32	s0, s16
 800c320:	eef0 0a68 	vmov.f32	s1, s17
 800c324:	f001 fa4e 	bl	800d7c4 <__d2b>
 800c328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c32c:	4682      	mov	sl, r0
 800c32e:	2d00      	cmp	r5, #0
 800c330:	d07f      	beq.n	800c432 <_dtoa_r+0x20a>
 800c332:	ee18 3a90 	vmov	r3, s17
 800c336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c33a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c33e:	ec51 0b18 	vmov	r0, r1, d8
 800c342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c34a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c34e:	4619      	mov	r1, r3
 800c350:	2200      	movs	r2, #0
 800c352:	4b75      	ldr	r3, [pc, #468]	; (800c528 <_dtoa_r+0x300>)
 800c354:	f7f3 ff98 	bl	8000288 <__aeabi_dsub>
 800c358:	a367      	add	r3, pc, #412	; (adr r3, 800c4f8 <_dtoa_r+0x2d0>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	f7f4 f94b 	bl	80005f8 <__aeabi_dmul>
 800c362:	a367      	add	r3, pc, #412	; (adr r3, 800c500 <_dtoa_r+0x2d8>)
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f7f3 ff90 	bl	800028c <__adddf3>
 800c36c:	4606      	mov	r6, r0
 800c36e:	4628      	mov	r0, r5
 800c370:	460f      	mov	r7, r1
 800c372:	f7f4 f8d7 	bl	8000524 <__aeabi_i2d>
 800c376:	a364      	add	r3, pc, #400	; (adr r3, 800c508 <_dtoa_r+0x2e0>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	f7f4 f93c 	bl	80005f8 <__aeabi_dmul>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f7f3 ff80 	bl	800028c <__adddf3>
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	f7f4 fbe2 	bl	8000b58 <__aeabi_d2iz>
 800c394:	2200      	movs	r2, #0
 800c396:	4683      	mov	fp, r0
 800c398:	2300      	movs	r3, #0
 800c39a:	4630      	mov	r0, r6
 800c39c:	4639      	mov	r1, r7
 800c39e:	f7f4 fb9d 	bl	8000adc <__aeabi_dcmplt>
 800c3a2:	b148      	cbz	r0, 800c3b8 <_dtoa_r+0x190>
 800c3a4:	4658      	mov	r0, fp
 800c3a6:	f7f4 f8bd 	bl	8000524 <__aeabi_i2d>
 800c3aa:	4632      	mov	r2, r6
 800c3ac:	463b      	mov	r3, r7
 800c3ae:	f7f4 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3b2:	b908      	cbnz	r0, 800c3b8 <_dtoa_r+0x190>
 800c3b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3b8:	f1bb 0f16 	cmp.w	fp, #22
 800c3bc:	d857      	bhi.n	800c46e <_dtoa_r+0x246>
 800c3be:	4b5b      	ldr	r3, [pc, #364]	; (800c52c <_dtoa_r+0x304>)
 800c3c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	ec51 0b18 	vmov	r0, r1, d8
 800c3cc:	f7f4 fb86 	bl	8000adc <__aeabi_dcmplt>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d04e      	beq.n	800c472 <_dtoa_r+0x24a>
 800c3d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3d8:	2300      	movs	r3, #0
 800c3da:	930c      	str	r3, [sp, #48]	; 0x30
 800c3dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3de:	1b5b      	subs	r3, r3, r5
 800c3e0:	1e5a      	subs	r2, r3, #1
 800c3e2:	bf45      	ittet	mi
 800c3e4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c3e8:	9305      	strmi	r3, [sp, #20]
 800c3ea:	2300      	movpl	r3, #0
 800c3ec:	2300      	movmi	r3, #0
 800c3ee:	9206      	str	r2, [sp, #24]
 800c3f0:	bf54      	ite	pl
 800c3f2:	9305      	strpl	r3, [sp, #20]
 800c3f4:	9306      	strmi	r3, [sp, #24]
 800c3f6:	f1bb 0f00 	cmp.w	fp, #0
 800c3fa:	db3c      	blt.n	800c476 <_dtoa_r+0x24e>
 800c3fc:	9b06      	ldr	r3, [sp, #24]
 800c3fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c402:	445b      	add	r3, fp
 800c404:	9306      	str	r3, [sp, #24]
 800c406:	2300      	movs	r3, #0
 800c408:	9308      	str	r3, [sp, #32]
 800c40a:	9b07      	ldr	r3, [sp, #28]
 800c40c:	2b09      	cmp	r3, #9
 800c40e:	d868      	bhi.n	800c4e2 <_dtoa_r+0x2ba>
 800c410:	2b05      	cmp	r3, #5
 800c412:	bfc4      	itt	gt
 800c414:	3b04      	subgt	r3, #4
 800c416:	9307      	strgt	r3, [sp, #28]
 800c418:	9b07      	ldr	r3, [sp, #28]
 800c41a:	f1a3 0302 	sub.w	r3, r3, #2
 800c41e:	bfcc      	ite	gt
 800c420:	2500      	movgt	r5, #0
 800c422:	2501      	movle	r5, #1
 800c424:	2b03      	cmp	r3, #3
 800c426:	f200 8085 	bhi.w	800c534 <_dtoa_r+0x30c>
 800c42a:	e8df f003 	tbb	[pc, r3]
 800c42e:	3b2e      	.short	0x3b2e
 800c430:	5839      	.short	0x5839
 800c432:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c436:	441d      	add	r5, r3
 800c438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	bfc1      	itttt	gt
 800c440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c444:	fa08 f803 	lslgt.w	r8, r8, r3
 800c448:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c44c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c450:	bfd6      	itet	le
 800c452:	f1c3 0320 	rsble	r3, r3, #32
 800c456:	ea48 0003 	orrgt.w	r0, r8, r3
 800c45a:	fa06 f003 	lslle.w	r0, r6, r3
 800c45e:	f7f4 f851 	bl	8000504 <__aeabi_ui2d>
 800c462:	2201      	movs	r2, #1
 800c464:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c468:	3d01      	subs	r5, #1
 800c46a:	920e      	str	r2, [sp, #56]	; 0x38
 800c46c:	e76f      	b.n	800c34e <_dtoa_r+0x126>
 800c46e:	2301      	movs	r3, #1
 800c470:	e7b3      	b.n	800c3da <_dtoa_r+0x1b2>
 800c472:	900c      	str	r0, [sp, #48]	; 0x30
 800c474:	e7b2      	b.n	800c3dc <_dtoa_r+0x1b4>
 800c476:	9b05      	ldr	r3, [sp, #20]
 800c478:	eba3 030b 	sub.w	r3, r3, fp
 800c47c:	9305      	str	r3, [sp, #20]
 800c47e:	f1cb 0300 	rsb	r3, fp, #0
 800c482:	9308      	str	r3, [sp, #32]
 800c484:	2300      	movs	r3, #0
 800c486:	930b      	str	r3, [sp, #44]	; 0x2c
 800c488:	e7bf      	b.n	800c40a <_dtoa_r+0x1e2>
 800c48a:	2300      	movs	r3, #0
 800c48c:	9309      	str	r3, [sp, #36]	; 0x24
 800c48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c490:	2b00      	cmp	r3, #0
 800c492:	dc52      	bgt.n	800c53a <_dtoa_r+0x312>
 800c494:	2301      	movs	r3, #1
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	461a      	mov	r2, r3
 800c49c:	920a      	str	r2, [sp, #40]	; 0x28
 800c49e:	e00b      	b.n	800c4b8 <_dtoa_r+0x290>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e7f3      	b.n	800c48c <_dtoa_r+0x264>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4aa:	445b      	add	r3, fp
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	bfb8      	it	lt
 800c4b6:	2301      	movlt	r3, #1
 800c4b8:	69e0      	ldr	r0, [r4, #28]
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	2204      	movs	r2, #4
 800c4be:	f102 0614 	add.w	r6, r2, #20
 800c4c2:	429e      	cmp	r6, r3
 800c4c4:	d93d      	bls.n	800c542 <_dtoa_r+0x31a>
 800c4c6:	6041      	str	r1, [r0, #4]
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f000 fd9f 	bl	800d00c <_Balloc>
 800c4ce:	9000      	str	r0, [sp, #0]
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d139      	bne.n	800c548 <_dtoa_r+0x320>
 800c4d4:	4b16      	ldr	r3, [pc, #88]	; (800c530 <_dtoa_r+0x308>)
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	f240 11af 	movw	r1, #431	; 0x1af
 800c4dc:	e6bd      	b.n	800c25a <_dtoa_r+0x32>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e7e1      	b.n	800c4a6 <_dtoa_r+0x27e>
 800c4e2:	2501      	movs	r5, #1
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9307      	str	r3, [sp, #28]
 800c4e8:	9509      	str	r5, [sp, #36]	; 0x24
 800c4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2312      	movs	r3, #18
 800c4f6:	e7d1      	b.n	800c49c <_dtoa_r+0x274>
 800c4f8:	636f4361 	.word	0x636f4361
 800c4fc:	3fd287a7 	.word	0x3fd287a7
 800c500:	8b60c8b3 	.word	0x8b60c8b3
 800c504:	3fc68a28 	.word	0x3fc68a28
 800c508:	509f79fb 	.word	0x509f79fb
 800c50c:	3fd34413 	.word	0x3fd34413
 800c510:	0800fa5a 	.word	0x0800fa5a
 800c514:	0800fa71 	.word	0x0800fa71
 800c518:	7ff00000 	.word	0x7ff00000
 800c51c:	0800fa56 	.word	0x0800fa56
 800c520:	0800fa4d 	.word	0x0800fa4d
 800c524:	0800fa25 	.word	0x0800fa25
 800c528:	3ff80000 	.word	0x3ff80000
 800c52c:	0800fb60 	.word	0x0800fb60
 800c530:	0800fac9 	.word	0x0800fac9
 800c534:	2301      	movs	r3, #1
 800c536:	9309      	str	r3, [sp, #36]	; 0x24
 800c538:	e7d7      	b.n	800c4ea <_dtoa_r+0x2c2>
 800c53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	9304      	str	r3, [sp, #16]
 800c540:	e7ba      	b.n	800c4b8 <_dtoa_r+0x290>
 800c542:	3101      	adds	r1, #1
 800c544:	0052      	lsls	r2, r2, #1
 800c546:	e7ba      	b.n	800c4be <_dtoa_r+0x296>
 800c548:	69e3      	ldr	r3, [r4, #28]
 800c54a:	9a00      	ldr	r2, [sp, #0]
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	9b04      	ldr	r3, [sp, #16]
 800c550:	2b0e      	cmp	r3, #14
 800c552:	f200 80a8 	bhi.w	800c6a6 <_dtoa_r+0x47e>
 800c556:	2d00      	cmp	r5, #0
 800c558:	f000 80a5 	beq.w	800c6a6 <_dtoa_r+0x47e>
 800c55c:	f1bb 0f00 	cmp.w	fp, #0
 800c560:	dd38      	ble.n	800c5d4 <_dtoa_r+0x3ac>
 800c562:	4bc0      	ldr	r3, [pc, #768]	; (800c864 <_dtoa_r+0x63c>)
 800c564:	f00b 020f 	and.w	r2, fp, #15
 800c568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c56c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c570:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c574:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c578:	d019      	beq.n	800c5ae <_dtoa_r+0x386>
 800c57a:	4bbb      	ldr	r3, [pc, #748]	; (800c868 <_dtoa_r+0x640>)
 800c57c:	ec51 0b18 	vmov	r0, r1, d8
 800c580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c584:	f7f4 f962 	bl	800084c <__aeabi_ddiv>
 800c588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c58c:	f008 080f 	and.w	r8, r8, #15
 800c590:	2503      	movs	r5, #3
 800c592:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c868 <_dtoa_r+0x640>
 800c596:	f1b8 0f00 	cmp.w	r8, #0
 800c59a:	d10a      	bne.n	800c5b2 <_dtoa_r+0x38a>
 800c59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	f7f4 f952 	bl	800084c <__aeabi_ddiv>
 800c5a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ac:	e02b      	b.n	800c606 <_dtoa_r+0x3de>
 800c5ae:	2502      	movs	r5, #2
 800c5b0:	e7ef      	b.n	800c592 <_dtoa_r+0x36a>
 800c5b2:	f018 0f01 	tst.w	r8, #1
 800c5b6:	d008      	beq.n	800c5ca <_dtoa_r+0x3a2>
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c5c0:	f7f4 f81a 	bl	80005f8 <__aeabi_dmul>
 800c5c4:	3501      	adds	r5, #1
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c5ce:	f109 0908 	add.w	r9, r9, #8
 800c5d2:	e7e0      	b.n	800c596 <_dtoa_r+0x36e>
 800c5d4:	f000 809f 	beq.w	800c716 <_dtoa_r+0x4ee>
 800c5d8:	f1cb 0600 	rsb	r6, fp, #0
 800c5dc:	4ba1      	ldr	r3, [pc, #644]	; (800c864 <_dtoa_r+0x63c>)
 800c5de:	4fa2      	ldr	r7, [pc, #648]	; (800c868 <_dtoa_r+0x640>)
 800c5e0:	f006 020f 	and.w	r2, r6, #15
 800c5e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	ec51 0b18 	vmov	r0, r1, d8
 800c5f0:	f7f4 f802 	bl	80005f8 <__aeabi_dmul>
 800c5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5f8:	1136      	asrs	r6, r6, #4
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	2502      	movs	r5, #2
 800c5fe:	2e00      	cmp	r6, #0
 800c600:	d17e      	bne.n	800c700 <_dtoa_r+0x4d8>
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1d0      	bne.n	800c5a8 <_dtoa_r+0x380>
 800c606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c608:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f000 8084 	beq.w	800c71a <_dtoa_r+0x4f2>
 800c612:	4b96      	ldr	r3, [pc, #600]	; (800c86c <_dtoa_r+0x644>)
 800c614:	2200      	movs	r2, #0
 800c616:	4640      	mov	r0, r8
 800c618:	4649      	mov	r1, r9
 800c61a:	f7f4 fa5f 	bl	8000adc <__aeabi_dcmplt>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d07b      	beq.n	800c71a <_dtoa_r+0x4f2>
 800c622:	9b04      	ldr	r3, [sp, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d078      	beq.n	800c71a <_dtoa_r+0x4f2>
 800c628:	9b01      	ldr	r3, [sp, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	dd39      	ble.n	800c6a2 <_dtoa_r+0x47a>
 800c62e:	4b90      	ldr	r3, [pc, #576]	; (800c870 <_dtoa_r+0x648>)
 800c630:	2200      	movs	r2, #0
 800c632:	4640      	mov	r0, r8
 800c634:	4649      	mov	r1, r9
 800c636:	f7f3 ffdf 	bl	80005f8 <__aeabi_dmul>
 800c63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63e:	9e01      	ldr	r6, [sp, #4]
 800c640:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c644:	3501      	adds	r5, #1
 800c646:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7f3 ff6a 	bl	8000524 <__aeabi_i2d>
 800c650:	4642      	mov	r2, r8
 800c652:	464b      	mov	r3, r9
 800c654:	f7f3 ffd0 	bl	80005f8 <__aeabi_dmul>
 800c658:	4b86      	ldr	r3, [pc, #536]	; (800c874 <_dtoa_r+0x64c>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	f7f3 fe16 	bl	800028c <__adddf3>
 800c660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	d158      	bne.n	800c720 <_dtoa_r+0x4f8>
 800c66e:	4b82      	ldr	r3, [pc, #520]	; (800c878 <_dtoa_r+0x650>)
 800c670:	2200      	movs	r2, #0
 800c672:	4640      	mov	r0, r8
 800c674:	4649      	mov	r1, r9
 800c676:	f7f3 fe07 	bl	8000288 <__aeabi_dsub>
 800c67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c67e:	4680      	mov	r8, r0
 800c680:	4689      	mov	r9, r1
 800c682:	f7f4 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 800c686:	2800      	cmp	r0, #0
 800c688:	f040 8296 	bne.w	800cbb8 <_dtoa_r+0x990>
 800c68c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c690:	4640      	mov	r0, r8
 800c692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c696:	4649      	mov	r1, r9
 800c698:	f7f4 fa20 	bl	8000adc <__aeabi_dcmplt>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	f040 8289 	bne.w	800cbb4 <_dtoa_r+0x98c>
 800c6a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c6a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f2c0 814e 	blt.w	800c94a <_dtoa_r+0x722>
 800c6ae:	f1bb 0f0e 	cmp.w	fp, #14
 800c6b2:	f300 814a 	bgt.w	800c94a <_dtoa_r+0x722>
 800c6b6:	4b6b      	ldr	r3, [pc, #428]	; (800c864 <_dtoa_r+0x63c>)
 800c6b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c6bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f280 80dc 	bge.w	800c880 <_dtoa_r+0x658>
 800c6c8:	9b04      	ldr	r3, [sp, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f300 80d8 	bgt.w	800c880 <_dtoa_r+0x658>
 800c6d0:	f040 826f 	bne.w	800cbb2 <_dtoa_r+0x98a>
 800c6d4:	4b68      	ldr	r3, [pc, #416]	; (800c878 <_dtoa_r+0x650>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	f7f3 ff8c 	bl	80005f8 <__aeabi_dmul>
 800c6e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6e4:	f7f4 fa0e 	bl	8000b04 <__aeabi_dcmpge>
 800c6e8:	9e04      	ldr	r6, [sp, #16]
 800c6ea:	4637      	mov	r7, r6
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f040 8245 	bne.w	800cb7c <_dtoa_r+0x954>
 800c6f2:	9d00      	ldr	r5, [sp, #0]
 800c6f4:	2331      	movs	r3, #49	; 0x31
 800c6f6:	f805 3b01 	strb.w	r3, [r5], #1
 800c6fa:	f10b 0b01 	add.w	fp, fp, #1
 800c6fe:	e241      	b.n	800cb84 <_dtoa_r+0x95c>
 800c700:	07f2      	lsls	r2, r6, #31
 800c702:	d505      	bpl.n	800c710 <_dtoa_r+0x4e8>
 800c704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c708:	f7f3 ff76 	bl	80005f8 <__aeabi_dmul>
 800c70c:	3501      	adds	r5, #1
 800c70e:	2301      	movs	r3, #1
 800c710:	1076      	asrs	r6, r6, #1
 800c712:	3708      	adds	r7, #8
 800c714:	e773      	b.n	800c5fe <_dtoa_r+0x3d6>
 800c716:	2502      	movs	r5, #2
 800c718:	e775      	b.n	800c606 <_dtoa_r+0x3de>
 800c71a:	9e04      	ldr	r6, [sp, #16]
 800c71c:	465f      	mov	r7, fp
 800c71e:	e792      	b.n	800c646 <_dtoa_r+0x41e>
 800c720:	9900      	ldr	r1, [sp, #0]
 800c722:	4b50      	ldr	r3, [pc, #320]	; (800c864 <_dtoa_r+0x63c>)
 800c724:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c728:	4431      	add	r1, r6
 800c72a:	9102      	str	r1, [sp, #8]
 800c72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c72e:	eeb0 9a47 	vmov.f32	s18, s14
 800c732:	eef0 9a67 	vmov.f32	s19, s15
 800c736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c73a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c73e:	2900      	cmp	r1, #0
 800c740:	d044      	beq.n	800c7cc <_dtoa_r+0x5a4>
 800c742:	494e      	ldr	r1, [pc, #312]	; (800c87c <_dtoa_r+0x654>)
 800c744:	2000      	movs	r0, #0
 800c746:	f7f4 f881 	bl	800084c <__aeabi_ddiv>
 800c74a:	ec53 2b19 	vmov	r2, r3, d9
 800c74e:	f7f3 fd9b 	bl	8000288 <__aeabi_dsub>
 800c752:	9d00      	ldr	r5, [sp, #0]
 800c754:	ec41 0b19 	vmov	d9, r0, r1
 800c758:	4649      	mov	r1, r9
 800c75a:	4640      	mov	r0, r8
 800c75c:	f7f4 f9fc 	bl	8000b58 <__aeabi_d2iz>
 800c760:	4606      	mov	r6, r0
 800c762:	f7f3 fedf 	bl	8000524 <__aeabi_i2d>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4640      	mov	r0, r8
 800c76c:	4649      	mov	r1, r9
 800c76e:	f7f3 fd8b 	bl	8000288 <__aeabi_dsub>
 800c772:	3630      	adds	r6, #48	; 0x30
 800c774:	f805 6b01 	strb.w	r6, [r5], #1
 800c778:	ec53 2b19 	vmov	r2, r3, d9
 800c77c:	4680      	mov	r8, r0
 800c77e:	4689      	mov	r9, r1
 800c780:	f7f4 f9ac 	bl	8000adc <__aeabi_dcmplt>
 800c784:	2800      	cmp	r0, #0
 800c786:	d164      	bne.n	800c852 <_dtoa_r+0x62a>
 800c788:	4642      	mov	r2, r8
 800c78a:	464b      	mov	r3, r9
 800c78c:	4937      	ldr	r1, [pc, #220]	; (800c86c <_dtoa_r+0x644>)
 800c78e:	2000      	movs	r0, #0
 800c790:	f7f3 fd7a 	bl	8000288 <__aeabi_dsub>
 800c794:	ec53 2b19 	vmov	r2, r3, d9
 800c798:	f7f4 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f040 80b6 	bne.w	800c90e <_dtoa_r+0x6e6>
 800c7a2:	9b02      	ldr	r3, [sp, #8]
 800c7a4:	429d      	cmp	r5, r3
 800c7a6:	f43f af7c 	beq.w	800c6a2 <_dtoa_r+0x47a>
 800c7aa:	4b31      	ldr	r3, [pc, #196]	; (800c870 <_dtoa_r+0x648>)
 800c7ac:	ec51 0b19 	vmov	r0, r1, d9
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f7f3 ff21 	bl	80005f8 <__aeabi_dmul>
 800c7b6:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <_dtoa_r+0x648>)
 800c7b8:	ec41 0b19 	vmov	d9, r0, r1
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4640      	mov	r0, r8
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	f7f3 ff19 	bl	80005f8 <__aeabi_dmul>
 800c7c6:	4680      	mov	r8, r0
 800c7c8:	4689      	mov	r9, r1
 800c7ca:	e7c5      	b.n	800c758 <_dtoa_r+0x530>
 800c7cc:	ec51 0b17 	vmov	r0, r1, d7
 800c7d0:	f7f3 ff12 	bl	80005f8 <__aeabi_dmul>
 800c7d4:	9b02      	ldr	r3, [sp, #8]
 800c7d6:	9d00      	ldr	r5, [sp, #0]
 800c7d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7da:	ec41 0b19 	vmov	d9, r0, r1
 800c7de:	4649      	mov	r1, r9
 800c7e0:	4640      	mov	r0, r8
 800c7e2:	f7f4 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	f7f3 fe9c 	bl	8000524 <__aeabi_i2d>
 800c7ec:	3630      	adds	r6, #48	; 0x30
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	f7f3 fd47 	bl	8000288 <__aeabi_dsub>
 800c7fa:	f805 6b01 	strb.w	r6, [r5], #1
 800c7fe:	9b02      	ldr	r3, [sp, #8]
 800c800:	429d      	cmp	r5, r3
 800c802:	4680      	mov	r8, r0
 800c804:	4689      	mov	r9, r1
 800c806:	f04f 0200 	mov.w	r2, #0
 800c80a:	d124      	bne.n	800c856 <_dtoa_r+0x62e>
 800c80c:	4b1b      	ldr	r3, [pc, #108]	; (800c87c <_dtoa_r+0x654>)
 800c80e:	ec51 0b19 	vmov	r0, r1, d9
 800c812:	f7f3 fd3b 	bl	800028c <__adddf3>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	f7f4 f97b 	bl	8000b18 <__aeabi_dcmpgt>
 800c822:	2800      	cmp	r0, #0
 800c824:	d173      	bne.n	800c90e <_dtoa_r+0x6e6>
 800c826:	ec53 2b19 	vmov	r2, r3, d9
 800c82a:	4914      	ldr	r1, [pc, #80]	; (800c87c <_dtoa_r+0x654>)
 800c82c:	2000      	movs	r0, #0
 800c82e:	f7f3 fd2b 	bl	8000288 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4640      	mov	r0, r8
 800c838:	4649      	mov	r1, r9
 800c83a:	f7f4 f94f 	bl	8000adc <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f af2f 	beq.w	800c6a2 <_dtoa_r+0x47a>
 800c844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c846:	1e6b      	subs	r3, r5, #1
 800c848:	930f      	str	r3, [sp, #60]	; 0x3c
 800c84a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c84e:	2b30      	cmp	r3, #48	; 0x30
 800c850:	d0f8      	beq.n	800c844 <_dtoa_r+0x61c>
 800c852:	46bb      	mov	fp, r7
 800c854:	e04a      	b.n	800c8ec <_dtoa_r+0x6c4>
 800c856:	4b06      	ldr	r3, [pc, #24]	; (800c870 <_dtoa_r+0x648>)
 800c858:	f7f3 fece 	bl	80005f8 <__aeabi_dmul>
 800c85c:	4680      	mov	r8, r0
 800c85e:	4689      	mov	r9, r1
 800c860:	e7bd      	b.n	800c7de <_dtoa_r+0x5b6>
 800c862:	bf00      	nop
 800c864:	0800fb60 	.word	0x0800fb60
 800c868:	0800fb38 	.word	0x0800fb38
 800c86c:	3ff00000 	.word	0x3ff00000
 800c870:	40240000 	.word	0x40240000
 800c874:	401c0000 	.word	0x401c0000
 800c878:	40140000 	.word	0x40140000
 800c87c:	3fe00000 	.word	0x3fe00000
 800c880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c884:	9d00      	ldr	r5, [sp, #0]
 800c886:	4642      	mov	r2, r8
 800c888:	464b      	mov	r3, r9
 800c88a:	4630      	mov	r0, r6
 800c88c:	4639      	mov	r1, r7
 800c88e:	f7f3 ffdd 	bl	800084c <__aeabi_ddiv>
 800c892:	f7f4 f961 	bl	8000b58 <__aeabi_d2iz>
 800c896:	9001      	str	r0, [sp, #4]
 800c898:	f7f3 fe44 	bl	8000524 <__aeabi_i2d>
 800c89c:	4642      	mov	r2, r8
 800c89e:	464b      	mov	r3, r9
 800c8a0:	f7f3 feaa 	bl	80005f8 <__aeabi_dmul>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	f7f3 fcec 	bl	8000288 <__aeabi_dsub>
 800c8b0:	9e01      	ldr	r6, [sp, #4]
 800c8b2:	9f04      	ldr	r7, [sp, #16]
 800c8b4:	3630      	adds	r6, #48	; 0x30
 800c8b6:	f805 6b01 	strb.w	r6, [r5], #1
 800c8ba:	9e00      	ldr	r6, [sp, #0]
 800c8bc:	1bae      	subs	r6, r5, r6
 800c8be:	42b7      	cmp	r7, r6
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	d134      	bne.n	800c930 <_dtoa_r+0x708>
 800c8c6:	f7f3 fce1 	bl	800028c <__adddf3>
 800c8ca:	4642      	mov	r2, r8
 800c8cc:	464b      	mov	r3, r9
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	460f      	mov	r7, r1
 800c8d2:	f7f4 f921 	bl	8000b18 <__aeabi_dcmpgt>
 800c8d6:	b9c8      	cbnz	r0, 800c90c <_dtoa_r+0x6e4>
 800c8d8:	4642      	mov	r2, r8
 800c8da:	464b      	mov	r3, r9
 800c8dc:	4630      	mov	r0, r6
 800c8de:	4639      	mov	r1, r7
 800c8e0:	f7f4 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8e4:	b110      	cbz	r0, 800c8ec <_dtoa_r+0x6c4>
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	07db      	lsls	r3, r3, #31
 800c8ea:	d40f      	bmi.n	800c90c <_dtoa_r+0x6e4>
 800c8ec:	4651      	mov	r1, sl
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f000 fbcc 	bl	800d08c <_Bfree>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8f8:	702b      	strb	r3, [r5, #0]
 800c8fa:	f10b 0301 	add.w	r3, fp, #1
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c902:	2b00      	cmp	r3, #0
 800c904:	f43f ace2 	beq.w	800c2cc <_dtoa_r+0xa4>
 800c908:	601d      	str	r5, [r3, #0]
 800c90a:	e4df      	b.n	800c2cc <_dtoa_r+0xa4>
 800c90c:	465f      	mov	r7, fp
 800c90e:	462b      	mov	r3, r5
 800c910:	461d      	mov	r5, r3
 800c912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c916:	2a39      	cmp	r2, #57	; 0x39
 800c918:	d106      	bne.n	800c928 <_dtoa_r+0x700>
 800c91a:	9a00      	ldr	r2, [sp, #0]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d1f7      	bne.n	800c910 <_dtoa_r+0x6e8>
 800c920:	9900      	ldr	r1, [sp, #0]
 800c922:	2230      	movs	r2, #48	; 0x30
 800c924:	3701      	adds	r7, #1
 800c926:	700a      	strb	r2, [r1, #0]
 800c928:	781a      	ldrb	r2, [r3, #0]
 800c92a:	3201      	adds	r2, #1
 800c92c:	701a      	strb	r2, [r3, #0]
 800c92e:	e790      	b.n	800c852 <_dtoa_r+0x62a>
 800c930:	4ba3      	ldr	r3, [pc, #652]	; (800cbc0 <_dtoa_r+0x998>)
 800c932:	2200      	movs	r2, #0
 800c934:	f7f3 fe60 	bl	80005f8 <__aeabi_dmul>
 800c938:	2200      	movs	r2, #0
 800c93a:	2300      	movs	r3, #0
 800c93c:	4606      	mov	r6, r0
 800c93e:	460f      	mov	r7, r1
 800c940:	f7f4 f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c944:	2800      	cmp	r0, #0
 800c946:	d09e      	beq.n	800c886 <_dtoa_r+0x65e>
 800c948:	e7d0      	b.n	800c8ec <_dtoa_r+0x6c4>
 800c94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94c:	2a00      	cmp	r2, #0
 800c94e:	f000 80ca 	beq.w	800cae6 <_dtoa_r+0x8be>
 800c952:	9a07      	ldr	r2, [sp, #28]
 800c954:	2a01      	cmp	r2, #1
 800c956:	f300 80ad 	bgt.w	800cab4 <_dtoa_r+0x88c>
 800c95a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c95c:	2a00      	cmp	r2, #0
 800c95e:	f000 80a5 	beq.w	800caac <_dtoa_r+0x884>
 800c962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c966:	9e08      	ldr	r6, [sp, #32]
 800c968:	9d05      	ldr	r5, [sp, #20]
 800c96a:	9a05      	ldr	r2, [sp, #20]
 800c96c:	441a      	add	r2, r3
 800c96e:	9205      	str	r2, [sp, #20]
 800c970:	9a06      	ldr	r2, [sp, #24]
 800c972:	2101      	movs	r1, #1
 800c974:	441a      	add	r2, r3
 800c976:	4620      	mov	r0, r4
 800c978:	9206      	str	r2, [sp, #24]
 800c97a:	f000 fc87 	bl	800d28c <__i2b>
 800c97e:	4607      	mov	r7, r0
 800c980:	b165      	cbz	r5, 800c99c <_dtoa_r+0x774>
 800c982:	9b06      	ldr	r3, [sp, #24]
 800c984:	2b00      	cmp	r3, #0
 800c986:	dd09      	ble.n	800c99c <_dtoa_r+0x774>
 800c988:	42ab      	cmp	r3, r5
 800c98a:	9a05      	ldr	r2, [sp, #20]
 800c98c:	bfa8      	it	ge
 800c98e:	462b      	movge	r3, r5
 800c990:	1ad2      	subs	r2, r2, r3
 800c992:	9205      	str	r2, [sp, #20]
 800c994:	9a06      	ldr	r2, [sp, #24]
 800c996:	1aed      	subs	r5, r5, r3
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	9306      	str	r3, [sp, #24]
 800c99c:	9b08      	ldr	r3, [sp, #32]
 800c99e:	b1f3      	cbz	r3, 800c9de <_dtoa_r+0x7b6>
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 80a3 	beq.w	800caee <_dtoa_r+0x8c6>
 800c9a8:	2e00      	cmp	r6, #0
 800c9aa:	dd10      	ble.n	800c9ce <_dtoa_r+0x7a6>
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	4632      	mov	r2, r6
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fd2b 	bl	800d40c <__pow5mult>
 800c9b6:	4652      	mov	r2, sl
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	4607      	mov	r7, r0
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f000 fc7b 	bl	800d2b8 <__multiply>
 800c9c2:	4651      	mov	r1, sl
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 fb60 	bl	800d08c <_Bfree>
 800c9cc:	46c2      	mov	sl, r8
 800c9ce:	9b08      	ldr	r3, [sp, #32]
 800c9d0:	1b9a      	subs	r2, r3, r6
 800c9d2:	d004      	beq.n	800c9de <_dtoa_r+0x7b6>
 800c9d4:	4651      	mov	r1, sl
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 fd18 	bl	800d40c <__pow5mult>
 800c9dc:	4682      	mov	sl, r0
 800c9de:	2101      	movs	r1, #1
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fc53 	bl	800d28c <__i2b>
 800c9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	f340 8081 	ble.w	800caf2 <_dtoa_r+0x8ca>
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f000 fd09 	bl	800d40c <__pow5mult>
 800c9fa:	9b07      	ldr	r3, [sp, #28]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	4606      	mov	r6, r0
 800ca00:	dd7a      	ble.n	800caf8 <_dtoa_r+0x8d0>
 800ca02:	f04f 0800 	mov.w	r8, #0
 800ca06:	6933      	ldr	r3, [r6, #16]
 800ca08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca0c:	6918      	ldr	r0, [r3, #16]
 800ca0e:	f000 fbef 	bl	800d1f0 <__hi0bits>
 800ca12:	f1c0 0020 	rsb	r0, r0, #32
 800ca16:	9b06      	ldr	r3, [sp, #24]
 800ca18:	4418      	add	r0, r3
 800ca1a:	f010 001f 	ands.w	r0, r0, #31
 800ca1e:	f000 8094 	beq.w	800cb4a <_dtoa_r+0x922>
 800ca22:	f1c0 0320 	rsb	r3, r0, #32
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	f340 8085 	ble.w	800cb36 <_dtoa_r+0x90e>
 800ca2c:	9b05      	ldr	r3, [sp, #20]
 800ca2e:	f1c0 001c 	rsb	r0, r0, #28
 800ca32:	4403      	add	r3, r0
 800ca34:	9305      	str	r3, [sp, #20]
 800ca36:	9b06      	ldr	r3, [sp, #24]
 800ca38:	4403      	add	r3, r0
 800ca3a:	4405      	add	r5, r0
 800ca3c:	9306      	str	r3, [sp, #24]
 800ca3e:	9b05      	ldr	r3, [sp, #20]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dd05      	ble.n	800ca50 <_dtoa_r+0x828>
 800ca44:	4651      	mov	r1, sl
 800ca46:	461a      	mov	r2, r3
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f000 fd39 	bl	800d4c0 <__lshift>
 800ca4e:	4682      	mov	sl, r0
 800ca50:	9b06      	ldr	r3, [sp, #24]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	dd05      	ble.n	800ca62 <_dtoa_r+0x83a>
 800ca56:	4631      	mov	r1, r6
 800ca58:	461a      	mov	r2, r3
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 fd30 	bl	800d4c0 <__lshift>
 800ca60:	4606      	mov	r6, r0
 800ca62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d072      	beq.n	800cb4e <_dtoa_r+0x926>
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	f000 fd94 	bl	800d598 <__mcmp>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	da6c      	bge.n	800cb4e <_dtoa_r+0x926>
 800ca74:	2300      	movs	r3, #0
 800ca76:	4651      	mov	r1, sl
 800ca78:	220a      	movs	r2, #10
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f000 fb28 	bl	800d0d0 <__multadd>
 800ca80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca86:	4682      	mov	sl, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 81b0 	beq.w	800cdee <_dtoa_r+0xbc6>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	4639      	mov	r1, r7
 800ca92:	220a      	movs	r2, #10
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fb1b 	bl	800d0d0 <__multadd>
 800ca9a:	9b01      	ldr	r3, [sp, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	4607      	mov	r7, r0
 800caa0:	f300 8096 	bgt.w	800cbd0 <_dtoa_r+0x9a8>
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	dc59      	bgt.n	800cb5e <_dtoa_r+0x936>
 800caaa:	e091      	b.n	800cbd0 <_dtoa_r+0x9a8>
 800caac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800caae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cab2:	e758      	b.n	800c966 <_dtoa_r+0x73e>
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	1e5e      	subs	r6, r3, #1
 800cab8:	9b08      	ldr	r3, [sp, #32]
 800caba:	42b3      	cmp	r3, r6
 800cabc:	bfbf      	itttt	lt
 800cabe:	9b08      	ldrlt	r3, [sp, #32]
 800cac0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cac2:	9608      	strlt	r6, [sp, #32]
 800cac4:	1af3      	sublt	r3, r6, r3
 800cac6:	bfb4      	ite	lt
 800cac8:	18d2      	addlt	r2, r2, r3
 800caca:	1b9e      	subge	r6, r3, r6
 800cacc:	9b04      	ldr	r3, [sp, #16]
 800cace:	bfbc      	itt	lt
 800cad0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cad2:	2600      	movlt	r6, #0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	bfb7      	itett	lt
 800cad8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cadc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cae0:	1a9d      	sublt	r5, r3, r2
 800cae2:	2300      	movlt	r3, #0
 800cae4:	e741      	b.n	800c96a <_dtoa_r+0x742>
 800cae6:	9e08      	ldr	r6, [sp, #32]
 800cae8:	9d05      	ldr	r5, [sp, #20]
 800caea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800caec:	e748      	b.n	800c980 <_dtoa_r+0x758>
 800caee:	9a08      	ldr	r2, [sp, #32]
 800caf0:	e770      	b.n	800c9d4 <_dtoa_r+0x7ac>
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	dc19      	bgt.n	800cb2c <_dtoa_r+0x904>
 800caf8:	9b02      	ldr	r3, [sp, #8]
 800cafa:	b9bb      	cbnz	r3, 800cb2c <_dtoa_r+0x904>
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb02:	b99b      	cbnz	r3, 800cb2c <_dtoa_r+0x904>
 800cb04:	9b03      	ldr	r3, [sp, #12]
 800cb06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb0a:	0d1b      	lsrs	r3, r3, #20
 800cb0c:	051b      	lsls	r3, r3, #20
 800cb0e:	b183      	cbz	r3, 800cb32 <_dtoa_r+0x90a>
 800cb10:	9b05      	ldr	r3, [sp, #20]
 800cb12:	3301      	adds	r3, #1
 800cb14:	9305      	str	r3, [sp, #20]
 800cb16:	9b06      	ldr	r3, [sp, #24]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	9306      	str	r3, [sp, #24]
 800cb1c:	f04f 0801 	mov.w	r8, #1
 800cb20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f47f af6f 	bne.w	800ca06 <_dtoa_r+0x7de>
 800cb28:	2001      	movs	r0, #1
 800cb2a:	e774      	b.n	800ca16 <_dtoa_r+0x7ee>
 800cb2c:	f04f 0800 	mov.w	r8, #0
 800cb30:	e7f6      	b.n	800cb20 <_dtoa_r+0x8f8>
 800cb32:	4698      	mov	r8, r3
 800cb34:	e7f4      	b.n	800cb20 <_dtoa_r+0x8f8>
 800cb36:	d082      	beq.n	800ca3e <_dtoa_r+0x816>
 800cb38:	9a05      	ldr	r2, [sp, #20]
 800cb3a:	331c      	adds	r3, #28
 800cb3c:	441a      	add	r2, r3
 800cb3e:	9205      	str	r2, [sp, #20]
 800cb40:	9a06      	ldr	r2, [sp, #24]
 800cb42:	441a      	add	r2, r3
 800cb44:	441d      	add	r5, r3
 800cb46:	9206      	str	r2, [sp, #24]
 800cb48:	e779      	b.n	800ca3e <_dtoa_r+0x816>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	e7f4      	b.n	800cb38 <_dtoa_r+0x910>
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	dc37      	bgt.n	800cbc4 <_dtoa_r+0x99c>
 800cb54:	9b07      	ldr	r3, [sp, #28]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	dd34      	ble.n	800cbc4 <_dtoa_r+0x99c>
 800cb5a:	9b04      	ldr	r3, [sp, #16]
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	b963      	cbnz	r3, 800cb7c <_dtoa_r+0x954>
 800cb62:	4631      	mov	r1, r6
 800cb64:	2205      	movs	r2, #5
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 fab2 	bl	800d0d0 <__multadd>
 800cb6c:	4601      	mov	r1, r0
 800cb6e:	4606      	mov	r6, r0
 800cb70:	4650      	mov	r0, sl
 800cb72:	f000 fd11 	bl	800d598 <__mcmp>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	f73f adbb 	bgt.w	800c6f2 <_dtoa_r+0x4ca>
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7e:	9d00      	ldr	r5, [sp, #0]
 800cb80:	ea6f 0b03 	mvn.w	fp, r3
 800cb84:	f04f 0800 	mov.w	r8, #0
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 fa7e 	bl	800d08c <_Bfree>
 800cb90:	2f00      	cmp	r7, #0
 800cb92:	f43f aeab 	beq.w	800c8ec <_dtoa_r+0x6c4>
 800cb96:	f1b8 0f00 	cmp.w	r8, #0
 800cb9a:	d005      	beq.n	800cba8 <_dtoa_r+0x980>
 800cb9c:	45b8      	cmp	r8, r7
 800cb9e:	d003      	beq.n	800cba8 <_dtoa_r+0x980>
 800cba0:	4641      	mov	r1, r8
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 fa72 	bl	800d08c <_Bfree>
 800cba8:	4639      	mov	r1, r7
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 fa6e 	bl	800d08c <_Bfree>
 800cbb0:	e69c      	b.n	800c8ec <_dtoa_r+0x6c4>
 800cbb2:	2600      	movs	r6, #0
 800cbb4:	4637      	mov	r7, r6
 800cbb6:	e7e1      	b.n	800cb7c <_dtoa_r+0x954>
 800cbb8:	46bb      	mov	fp, r7
 800cbba:	4637      	mov	r7, r6
 800cbbc:	e599      	b.n	800c6f2 <_dtoa_r+0x4ca>
 800cbbe:	bf00      	nop
 800cbc0:	40240000 	.word	0x40240000
 800cbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f000 80c8 	beq.w	800cd5c <_dtoa_r+0xb34>
 800cbcc:	9b04      	ldr	r3, [sp, #16]
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	2d00      	cmp	r5, #0
 800cbd2:	dd05      	ble.n	800cbe0 <_dtoa_r+0x9b8>
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 fc71 	bl	800d4c0 <__lshift>
 800cbde:	4607      	mov	r7, r0
 800cbe0:	f1b8 0f00 	cmp.w	r8, #0
 800cbe4:	d05b      	beq.n	800cc9e <_dtoa_r+0xa76>
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fa0f 	bl	800d00c <_Balloc>
 800cbee:	4605      	mov	r5, r0
 800cbf0:	b928      	cbnz	r0, 800cbfe <_dtoa_r+0x9d6>
 800cbf2:	4b83      	ldr	r3, [pc, #524]	; (800ce00 <_dtoa_r+0xbd8>)
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cbfa:	f7ff bb2e 	b.w	800c25a <_dtoa_r+0x32>
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	3202      	adds	r2, #2
 800cc02:	0092      	lsls	r2, r2, #2
 800cc04:	f107 010c 	add.w	r1, r7, #12
 800cc08:	300c      	adds	r0, #12
 800cc0a:	f7ff fa68 	bl	800c0de <memcpy>
 800cc0e:	2201      	movs	r2, #1
 800cc10:	4629      	mov	r1, r5
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 fc54 	bl	800d4c0 <__lshift>
 800cc18:	9b00      	ldr	r3, [sp, #0]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	9304      	str	r3, [sp, #16]
 800cc1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc22:	4413      	add	r3, r2
 800cc24:	9308      	str	r3, [sp, #32]
 800cc26:	9b02      	ldr	r3, [sp, #8]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	46b8      	mov	r8, r7
 800cc2e:	9306      	str	r3, [sp, #24]
 800cc30:	4607      	mov	r7, r0
 800cc32:	9b04      	ldr	r3, [sp, #16]
 800cc34:	4631      	mov	r1, r6
 800cc36:	3b01      	subs	r3, #1
 800cc38:	4650      	mov	r0, sl
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	f7ff fa6b 	bl	800c116 <quorem>
 800cc40:	4641      	mov	r1, r8
 800cc42:	9002      	str	r0, [sp, #8]
 800cc44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc48:	4650      	mov	r0, sl
 800cc4a:	f000 fca5 	bl	800d598 <__mcmp>
 800cc4e:	463a      	mov	r2, r7
 800cc50:	9005      	str	r0, [sp, #20]
 800cc52:	4631      	mov	r1, r6
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 fcbb 	bl	800d5d0 <__mdiff>
 800cc5a:	68c2      	ldr	r2, [r0, #12]
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	bb02      	cbnz	r2, 800cca2 <_dtoa_r+0xa7a>
 800cc60:	4601      	mov	r1, r0
 800cc62:	4650      	mov	r0, sl
 800cc64:	f000 fc98 	bl	800d598 <__mcmp>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc70:	f000 fa0c 	bl	800d08c <_Bfree>
 800cc74:	9b07      	ldr	r3, [sp, #28]
 800cc76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc78:	9d04      	ldr	r5, [sp, #16]
 800cc7a:	ea43 0102 	orr.w	r1, r3, r2
 800cc7e:	9b06      	ldr	r3, [sp, #24]
 800cc80:	4319      	orrs	r1, r3
 800cc82:	d110      	bne.n	800cca6 <_dtoa_r+0xa7e>
 800cc84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc88:	d029      	beq.n	800ccde <_dtoa_r+0xab6>
 800cc8a:	9b05      	ldr	r3, [sp, #20]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dd02      	ble.n	800cc96 <_dtoa_r+0xa6e>
 800cc90:	9b02      	ldr	r3, [sp, #8]
 800cc92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	f883 9000 	strb.w	r9, [r3]
 800cc9c:	e774      	b.n	800cb88 <_dtoa_r+0x960>
 800cc9e:	4638      	mov	r0, r7
 800cca0:	e7ba      	b.n	800cc18 <_dtoa_r+0x9f0>
 800cca2:	2201      	movs	r2, #1
 800cca4:	e7e1      	b.n	800cc6a <_dtoa_r+0xa42>
 800cca6:	9b05      	ldr	r3, [sp, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	db04      	blt.n	800ccb6 <_dtoa_r+0xa8e>
 800ccac:	9907      	ldr	r1, [sp, #28]
 800ccae:	430b      	orrs	r3, r1
 800ccb0:	9906      	ldr	r1, [sp, #24]
 800ccb2:	430b      	orrs	r3, r1
 800ccb4:	d120      	bne.n	800ccf8 <_dtoa_r+0xad0>
 800ccb6:	2a00      	cmp	r2, #0
 800ccb8:	dded      	ble.n	800cc96 <_dtoa_r+0xa6e>
 800ccba:	4651      	mov	r1, sl
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f000 fbfe 	bl	800d4c0 <__lshift>
 800ccc4:	4631      	mov	r1, r6
 800ccc6:	4682      	mov	sl, r0
 800ccc8:	f000 fc66 	bl	800d598 <__mcmp>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	dc03      	bgt.n	800ccd8 <_dtoa_r+0xab0>
 800ccd0:	d1e1      	bne.n	800cc96 <_dtoa_r+0xa6e>
 800ccd2:	f019 0f01 	tst.w	r9, #1
 800ccd6:	d0de      	beq.n	800cc96 <_dtoa_r+0xa6e>
 800ccd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ccdc:	d1d8      	bne.n	800cc90 <_dtoa_r+0xa68>
 800ccde:	9a01      	ldr	r2, [sp, #4]
 800cce0:	2339      	movs	r3, #57	; 0x39
 800cce2:	7013      	strb	r3, [r2, #0]
 800cce4:	462b      	mov	r3, r5
 800cce6:	461d      	mov	r5, r3
 800cce8:	3b01      	subs	r3, #1
 800ccea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccee:	2a39      	cmp	r2, #57	; 0x39
 800ccf0:	d06c      	beq.n	800cdcc <_dtoa_r+0xba4>
 800ccf2:	3201      	adds	r2, #1
 800ccf4:	701a      	strb	r2, [r3, #0]
 800ccf6:	e747      	b.n	800cb88 <_dtoa_r+0x960>
 800ccf8:	2a00      	cmp	r2, #0
 800ccfa:	dd07      	ble.n	800cd0c <_dtoa_r+0xae4>
 800ccfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd00:	d0ed      	beq.n	800ccde <_dtoa_r+0xab6>
 800cd02:	9a01      	ldr	r2, [sp, #4]
 800cd04:	f109 0301 	add.w	r3, r9, #1
 800cd08:	7013      	strb	r3, [r2, #0]
 800cd0a:	e73d      	b.n	800cb88 <_dtoa_r+0x960>
 800cd0c:	9b04      	ldr	r3, [sp, #16]
 800cd0e:	9a08      	ldr	r2, [sp, #32]
 800cd10:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d043      	beq.n	800cda0 <_dtoa_r+0xb78>
 800cd18:	4651      	mov	r1, sl
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	220a      	movs	r2, #10
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 f9d6 	bl	800d0d0 <__multadd>
 800cd24:	45b8      	cmp	r8, r7
 800cd26:	4682      	mov	sl, r0
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	f04f 020a 	mov.w	r2, #10
 800cd30:	4641      	mov	r1, r8
 800cd32:	4620      	mov	r0, r4
 800cd34:	d107      	bne.n	800cd46 <_dtoa_r+0xb1e>
 800cd36:	f000 f9cb 	bl	800d0d0 <__multadd>
 800cd3a:	4680      	mov	r8, r0
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	9b04      	ldr	r3, [sp, #16]
 800cd40:	3301      	adds	r3, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	e775      	b.n	800cc32 <_dtoa_r+0xa0a>
 800cd46:	f000 f9c3 	bl	800d0d0 <__multadd>
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	4680      	mov	r8, r0
 800cd4e:	2300      	movs	r3, #0
 800cd50:	220a      	movs	r2, #10
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 f9bc 	bl	800d0d0 <__multadd>
 800cd58:	4607      	mov	r7, r0
 800cd5a:	e7f0      	b.n	800cd3e <_dtoa_r+0xb16>
 800cd5c:	9b04      	ldr	r3, [sp, #16]
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	9d00      	ldr	r5, [sp, #0]
 800cd62:	4631      	mov	r1, r6
 800cd64:	4650      	mov	r0, sl
 800cd66:	f7ff f9d6 	bl	800c116 <quorem>
 800cd6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cd6e:	9b00      	ldr	r3, [sp, #0]
 800cd70:	f805 9b01 	strb.w	r9, [r5], #1
 800cd74:	1aea      	subs	r2, r5, r3
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	dd07      	ble.n	800cd8c <_dtoa_r+0xb64>
 800cd7c:	4651      	mov	r1, sl
 800cd7e:	2300      	movs	r3, #0
 800cd80:	220a      	movs	r2, #10
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f9a4 	bl	800d0d0 <__multadd>
 800cd88:	4682      	mov	sl, r0
 800cd8a:	e7ea      	b.n	800cd62 <_dtoa_r+0xb3a>
 800cd8c:	9b01      	ldr	r3, [sp, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	bfc8      	it	gt
 800cd92:	461d      	movgt	r5, r3
 800cd94:	9b00      	ldr	r3, [sp, #0]
 800cd96:	bfd8      	it	le
 800cd98:	2501      	movle	r5, #1
 800cd9a:	441d      	add	r5, r3
 800cd9c:	f04f 0800 	mov.w	r8, #0
 800cda0:	4651      	mov	r1, sl
 800cda2:	2201      	movs	r2, #1
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 fb8b 	bl	800d4c0 <__lshift>
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4682      	mov	sl, r0
 800cdae:	f000 fbf3 	bl	800d598 <__mcmp>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	dc96      	bgt.n	800cce4 <_dtoa_r+0xabc>
 800cdb6:	d102      	bne.n	800cdbe <_dtoa_r+0xb96>
 800cdb8:	f019 0f01 	tst.w	r9, #1
 800cdbc:	d192      	bne.n	800cce4 <_dtoa_r+0xabc>
 800cdbe:	462b      	mov	r3, r5
 800cdc0:	461d      	mov	r5, r3
 800cdc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdc6:	2a30      	cmp	r2, #48	; 0x30
 800cdc8:	d0fa      	beq.n	800cdc0 <_dtoa_r+0xb98>
 800cdca:	e6dd      	b.n	800cb88 <_dtoa_r+0x960>
 800cdcc:	9a00      	ldr	r2, [sp, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d189      	bne.n	800cce6 <_dtoa_r+0xabe>
 800cdd2:	f10b 0b01 	add.w	fp, fp, #1
 800cdd6:	2331      	movs	r3, #49	; 0x31
 800cdd8:	e796      	b.n	800cd08 <_dtoa_r+0xae0>
 800cdda:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <_dtoa_r+0xbdc>)
 800cddc:	f7ff ba99 	b.w	800c312 <_dtoa_r+0xea>
 800cde0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f47f aa6d 	bne.w	800c2c2 <_dtoa_r+0x9a>
 800cde8:	4b07      	ldr	r3, [pc, #28]	; (800ce08 <_dtoa_r+0xbe0>)
 800cdea:	f7ff ba92 	b.w	800c312 <_dtoa_r+0xea>
 800cdee:	9b01      	ldr	r3, [sp, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dcb5      	bgt.n	800cd60 <_dtoa_r+0xb38>
 800cdf4:	9b07      	ldr	r3, [sp, #28]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	f73f aeb1 	bgt.w	800cb5e <_dtoa_r+0x936>
 800cdfc:	e7b0      	b.n	800cd60 <_dtoa_r+0xb38>
 800cdfe:	bf00      	nop
 800ce00:	0800fac9 	.word	0x0800fac9
 800ce04:	0800fa24 	.word	0x0800fa24
 800ce08:	0800fa4d 	.word	0x0800fa4d

0800ce0c <_free_r>:
 800ce0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce0e:	2900      	cmp	r1, #0
 800ce10:	d044      	beq.n	800ce9c <_free_r+0x90>
 800ce12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce16:	9001      	str	r0, [sp, #4]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce1e:	bfb8      	it	lt
 800ce20:	18e4      	addlt	r4, r4, r3
 800ce22:	f000 f8e7 	bl	800cff4 <__malloc_lock>
 800ce26:	4a1e      	ldr	r2, [pc, #120]	; (800cea0 <_free_r+0x94>)
 800ce28:	9801      	ldr	r0, [sp, #4]
 800ce2a:	6813      	ldr	r3, [r2, #0]
 800ce2c:	b933      	cbnz	r3, 800ce3c <_free_r+0x30>
 800ce2e:	6063      	str	r3, [r4, #4]
 800ce30:	6014      	str	r4, [r2, #0]
 800ce32:	b003      	add	sp, #12
 800ce34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce38:	f000 b8e2 	b.w	800d000 <__malloc_unlock>
 800ce3c:	42a3      	cmp	r3, r4
 800ce3e:	d908      	bls.n	800ce52 <_free_r+0x46>
 800ce40:	6825      	ldr	r5, [r4, #0]
 800ce42:	1961      	adds	r1, r4, r5
 800ce44:	428b      	cmp	r3, r1
 800ce46:	bf01      	itttt	eq
 800ce48:	6819      	ldreq	r1, [r3, #0]
 800ce4a:	685b      	ldreq	r3, [r3, #4]
 800ce4c:	1949      	addeq	r1, r1, r5
 800ce4e:	6021      	streq	r1, [r4, #0]
 800ce50:	e7ed      	b.n	800ce2e <_free_r+0x22>
 800ce52:	461a      	mov	r2, r3
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	b10b      	cbz	r3, 800ce5c <_free_r+0x50>
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	d9fa      	bls.n	800ce52 <_free_r+0x46>
 800ce5c:	6811      	ldr	r1, [r2, #0]
 800ce5e:	1855      	adds	r5, r2, r1
 800ce60:	42a5      	cmp	r5, r4
 800ce62:	d10b      	bne.n	800ce7c <_free_r+0x70>
 800ce64:	6824      	ldr	r4, [r4, #0]
 800ce66:	4421      	add	r1, r4
 800ce68:	1854      	adds	r4, r2, r1
 800ce6a:	42a3      	cmp	r3, r4
 800ce6c:	6011      	str	r1, [r2, #0]
 800ce6e:	d1e0      	bne.n	800ce32 <_free_r+0x26>
 800ce70:	681c      	ldr	r4, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	6053      	str	r3, [r2, #4]
 800ce76:	440c      	add	r4, r1
 800ce78:	6014      	str	r4, [r2, #0]
 800ce7a:	e7da      	b.n	800ce32 <_free_r+0x26>
 800ce7c:	d902      	bls.n	800ce84 <_free_r+0x78>
 800ce7e:	230c      	movs	r3, #12
 800ce80:	6003      	str	r3, [r0, #0]
 800ce82:	e7d6      	b.n	800ce32 <_free_r+0x26>
 800ce84:	6825      	ldr	r5, [r4, #0]
 800ce86:	1961      	adds	r1, r4, r5
 800ce88:	428b      	cmp	r3, r1
 800ce8a:	bf04      	itt	eq
 800ce8c:	6819      	ldreq	r1, [r3, #0]
 800ce8e:	685b      	ldreq	r3, [r3, #4]
 800ce90:	6063      	str	r3, [r4, #4]
 800ce92:	bf04      	itt	eq
 800ce94:	1949      	addeq	r1, r1, r5
 800ce96:	6021      	streq	r1, [r4, #0]
 800ce98:	6054      	str	r4, [r2, #4]
 800ce9a:	e7ca      	b.n	800ce32 <_free_r+0x26>
 800ce9c:	b003      	add	sp, #12
 800ce9e:	bd30      	pop	{r4, r5, pc}
 800cea0:	20002e78 	.word	0x20002e78

0800cea4 <malloc>:
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <malloc+0xc>)
 800cea6:	4601      	mov	r1, r0
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	f000 b823 	b.w	800cef4 <_malloc_r>
 800ceae:	bf00      	nop
 800ceb0:	20000154 	.word	0x20000154

0800ceb4 <sbrk_aligned>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4e0e      	ldr	r6, [pc, #56]	; (800cef0 <sbrk_aligned+0x3c>)
 800ceb8:	460c      	mov	r4, r1
 800ceba:	6831      	ldr	r1, [r6, #0]
 800cebc:	4605      	mov	r5, r0
 800cebe:	b911      	cbnz	r1, 800cec6 <sbrk_aligned+0x12>
 800cec0:	f001 fffa 	bl	800eeb8 <_sbrk_r>
 800cec4:	6030      	str	r0, [r6, #0]
 800cec6:	4621      	mov	r1, r4
 800cec8:	4628      	mov	r0, r5
 800ceca:	f001 fff5 	bl	800eeb8 <_sbrk_r>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d00a      	beq.n	800cee8 <sbrk_aligned+0x34>
 800ced2:	1cc4      	adds	r4, r0, #3
 800ced4:	f024 0403 	bic.w	r4, r4, #3
 800ced8:	42a0      	cmp	r0, r4
 800ceda:	d007      	beq.n	800ceec <sbrk_aligned+0x38>
 800cedc:	1a21      	subs	r1, r4, r0
 800cede:	4628      	mov	r0, r5
 800cee0:	f001 ffea 	bl	800eeb8 <_sbrk_r>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d101      	bne.n	800ceec <sbrk_aligned+0x38>
 800cee8:	f04f 34ff 	mov.w	r4, #4294967295
 800ceec:	4620      	mov	r0, r4
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	20002e7c 	.word	0x20002e7c

0800cef4 <_malloc_r>:
 800cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef8:	1ccd      	adds	r5, r1, #3
 800cefa:	f025 0503 	bic.w	r5, r5, #3
 800cefe:	3508      	adds	r5, #8
 800cf00:	2d0c      	cmp	r5, #12
 800cf02:	bf38      	it	cc
 800cf04:	250c      	movcc	r5, #12
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	4607      	mov	r7, r0
 800cf0a:	db01      	blt.n	800cf10 <_malloc_r+0x1c>
 800cf0c:	42a9      	cmp	r1, r5
 800cf0e:	d905      	bls.n	800cf1c <_malloc_r+0x28>
 800cf10:	230c      	movs	r3, #12
 800cf12:	603b      	str	r3, [r7, #0]
 800cf14:	2600      	movs	r6, #0
 800cf16:	4630      	mov	r0, r6
 800cf18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cff0 <_malloc_r+0xfc>
 800cf20:	f000 f868 	bl	800cff4 <__malloc_lock>
 800cf24:	f8d8 3000 	ldr.w	r3, [r8]
 800cf28:	461c      	mov	r4, r3
 800cf2a:	bb5c      	cbnz	r4, 800cf84 <_malloc_r+0x90>
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4638      	mov	r0, r7
 800cf30:	f7ff ffc0 	bl	800ceb4 <sbrk_aligned>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	4604      	mov	r4, r0
 800cf38:	d155      	bne.n	800cfe6 <_malloc_r+0xf2>
 800cf3a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf3e:	4626      	mov	r6, r4
 800cf40:	2e00      	cmp	r6, #0
 800cf42:	d145      	bne.n	800cfd0 <_malloc_r+0xdc>
 800cf44:	2c00      	cmp	r4, #0
 800cf46:	d048      	beq.n	800cfda <_malloc_r+0xe6>
 800cf48:	6823      	ldr	r3, [r4, #0]
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	eb04 0903 	add.w	r9, r4, r3
 800cf52:	f001 ffb1 	bl	800eeb8 <_sbrk_r>
 800cf56:	4581      	cmp	r9, r0
 800cf58:	d13f      	bne.n	800cfda <_malloc_r+0xe6>
 800cf5a:	6821      	ldr	r1, [r4, #0]
 800cf5c:	1a6d      	subs	r5, r5, r1
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7ff ffa7 	bl	800ceb4 <sbrk_aligned>
 800cf66:	3001      	adds	r0, #1
 800cf68:	d037      	beq.n	800cfda <_malloc_r+0xe6>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	442b      	add	r3, r5
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	f8d8 3000 	ldr.w	r3, [r8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d038      	beq.n	800cfea <_malloc_r+0xf6>
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	42a2      	cmp	r2, r4
 800cf7c:	d12b      	bne.n	800cfd6 <_malloc_r+0xe2>
 800cf7e:	2200      	movs	r2, #0
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	e00f      	b.n	800cfa4 <_malloc_r+0xb0>
 800cf84:	6822      	ldr	r2, [r4, #0]
 800cf86:	1b52      	subs	r2, r2, r5
 800cf88:	d41f      	bmi.n	800cfca <_malloc_r+0xd6>
 800cf8a:	2a0b      	cmp	r2, #11
 800cf8c:	d917      	bls.n	800cfbe <_malloc_r+0xca>
 800cf8e:	1961      	adds	r1, r4, r5
 800cf90:	42a3      	cmp	r3, r4
 800cf92:	6025      	str	r5, [r4, #0]
 800cf94:	bf18      	it	ne
 800cf96:	6059      	strne	r1, [r3, #4]
 800cf98:	6863      	ldr	r3, [r4, #4]
 800cf9a:	bf08      	it	eq
 800cf9c:	f8c8 1000 	streq.w	r1, [r8]
 800cfa0:	5162      	str	r2, [r4, r5]
 800cfa2:	604b      	str	r3, [r1, #4]
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f104 060b 	add.w	r6, r4, #11
 800cfaa:	f000 f829 	bl	800d000 <__malloc_unlock>
 800cfae:	f026 0607 	bic.w	r6, r6, #7
 800cfb2:	1d23      	adds	r3, r4, #4
 800cfb4:	1af2      	subs	r2, r6, r3
 800cfb6:	d0ae      	beq.n	800cf16 <_malloc_r+0x22>
 800cfb8:	1b9b      	subs	r3, r3, r6
 800cfba:	50a3      	str	r3, [r4, r2]
 800cfbc:	e7ab      	b.n	800cf16 <_malloc_r+0x22>
 800cfbe:	42a3      	cmp	r3, r4
 800cfc0:	6862      	ldr	r2, [r4, #4]
 800cfc2:	d1dd      	bne.n	800cf80 <_malloc_r+0x8c>
 800cfc4:	f8c8 2000 	str.w	r2, [r8]
 800cfc8:	e7ec      	b.n	800cfa4 <_malloc_r+0xb0>
 800cfca:	4623      	mov	r3, r4
 800cfcc:	6864      	ldr	r4, [r4, #4]
 800cfce:	e7ac      	b.n	800cf2a <_malloc_r+0x36>
 800cfd0:	4634      	mov	r4, r6
 800cfd2:	6876      	ldr	r6, [r6, #4]
 800cfd4:	e7b4      	b.n	800cf40 <_malloc_r+0x4c>
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	e7cc      	b.n	800cf74 <_malloc_r+0x80>
 800cfda:	230c      	movs	r3, #12
 800cfdc:	603b      	str	r3, [r7, #0]
 800cfde:	4638      	mov	r0, r7
 800cfe0:	f000 f80e 	bl	800d000 <__malloc_unlock>
 800cfe4:	e797      	b.n	800cf16 <_malloc_r+0x22>
 800cfe6:	6025      	str	r5, [r4, #0]
 800cfe8:	e7dc      	b.n	800cfa4 <_malloc_r+0xb0>
 800cfea:	605b      	str	r3, [r3, #4]
 800cfec:	deff      	udf	#255	; 0xff
 800cfee:	bf00      	nop
 800cff0:	20002e78 	.word	0x20002e78

0800cff4 <__malloc_lock>:
 800cff4:	4801      	ldr	r0, [pc, #4]	; (800cffc <__malloc_lock+0x8>)
 800cff6:	f7ff b870 	b.w	800c0da <__retarget_lock_acquire_recursive>
 800cffa:	bf00      	nop
 800cffc:	20002e74 	.word	0x20002e74

0800d000 <__malloc_unlock>:
 800d000:	4801      	ldr	r0, [pc, #4]	; (800d008 <__malloc_unlock+0x8>)
 800d002:	f7ff b86b 	b.w	800c0dc <__retarget_lock_release_recursive>
 800d006:	bf00      	nop
 800d008:	20002e74 	.word	0x20002e74

0800d00c <_Balloc>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	69c6      	ldr	r6, [r0, #28]
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	b976      	cbnz	r6, 800d034 <_Balloc+0x28>
 800d016:	2010      	movs	r0, #16
 800d018:	f7ff ff44 	bl	800cea4 <malloc>
 800d01c:	4602      	mov	r2, r0
 800d01e:	61e0      	str	r0, [r4, #28]
 800d020:	b920      	cbnz	r0, 800d02c <_Balloc+0x20>
 800d022:	4b18      	ldr	r3, [pc, #96]	; (800d084 <_Balloc+0x78>)
 800d024:	4818      	ldr	r0, [pc, #96]	; (800d088 <_Balloc+0x7c>)
 800d026:	216b      	movs	r1, #107	; 0x6b
 800d028:	f7fd ff08 	bl	800ae3c <__assert_func>
 800d02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d030:	6006      	str	r6, [r0, #0]
 800d032:	60c6      	str	r6, [r0, #12]
 800d034:	69e6      	ldr	r6, [r4, #28]
 800d036:	68f3      	ldr	r3, [r6, #12]
 800d038:	b183      	cbz	r3, 800d05c <_Balloc+0x50>
 800d03a:	69e3      	ldr	r3, [r4, #28]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d042:	b9b8      	cbnz	r0, 800d074 <_Balloc+0x68>
 800d044:	2101      	movs	r1, #1
 800d046:	fa01 f605 	lsl.w	r6, r1, r5
 800d04a:	1d72      	adds	r2, r6, #5
 800d04c:	0092      	lsls	r2, r2, #2
 800d04e:	4620      	mov	r0, r4
 800d050:	f001 ff4a 	bl	800eee8 <_calloc_r>
 800d054:	b160      	cbz	r0, 800d070 <_Balloc+0x64>
 800d056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d05a:	e00e      	b.n	800d07a <_Balloc+0x6e>
 800d05c:	2221      	movs	r2, #33	; 0x21
 800d05e:	2104      	movs	r1, #4
 800d060:	4620      	mov	r0, r4
 800d062:	f001 ff41 	bl	800eee8 <_calloc_r>
 800d066:	69e3      	ldr	r3, [r4, #28]
 800d068:	60f0      	str	r0, [r6, #12]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e4      	bne.n	800d03a <_Balloc+0x2e>
 800d070:	2000      	movs	r0, #0
 800d072:	bd70      	pop	{r4, r5, r6, pc}
 800d074:	6802      	ldr	r2, [r0, #0]
 800d076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d07a:	2300      	movs	r3, #0
 800d07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d080:	e7f7      	b.n	800d072 <_Balloc+0x66>
 800d082:	bf00      	nop
 800d084:	0800fa5a 	.word	0x0800fa5a
 800d088:	0800fada 	.word	0x0800fada

0800d08c <_Bfree>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	69c6      	ldr	r6, [r0, #28]
 800d090:	4605      	mov	r5, r0
 800d092:	460c      	mov	r4, r1
 800d094:	b976      	cbnz	r6, 800d0b4 <_Bfree+0x28>
 800d096:	2010      	movs	r0, #16
 800d098:	f7ff ff04 	bl	800cea4 <malloc>
 800d09c:	4602      	mov	r2, r0
 800d09e:	61e8      	str	r0, [r5, #28]
 800d0a0:	b920      	cbnz	r0, 800d0ac <_Bfree+0x20>
 800d0a2:	4b09      	ldr	r3, [pc, #36]	; (800d0c8 <_Bfree+0x3c>)
 800d0a4:	4809      	ldr	r0, [pc, #36]	; (800d0cc <_Bfree+0x40>)
 800d0a6:	218f      	movs	r1, #143	; 0x8f
 800d0a8:	f7fd fec8 	bl	800ae3c <__assert_func>
 800d0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0b0:	6006      	str	r6, [r0, #0]
 800d0b2:	60c6      	str	r6, [r0, #12]
 800d0b4:	b13c      	cbz	r4, 800d0c6 <_Bfree+0x3a>
 800d0b6:	69eb      	ldr	r3, [r5, #28]
 800d0b8:	6862      	ldr	r2, [r4, #4]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0c0:	6021      	str	r1, [r4, #0]
 800d0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0c6:	bd70      	pop	{r4, r5, r6, pc}
 800d0c8:	0800fa5a 	.word	0x0800fa5a
 800d0cc:	0800fada 	.word	0x0800fada

0800d0d0 <__multadd>:
 800d0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d4:	690d      	ldr	r5, [r1, #16]
 800d0d6:	4607      	mov	r7, r0
 800d0d8:	460c      	mov	r4, r1
 800d0da:	461e      	mov	r6, r3
 800d0dc:	f101 0c14 	add.w	ip, r1, #20
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	f8dc 3000 	ldr.w	r3, [ip]
 800d0e6:	b299      	uxth	r1, r3
 800d0e8:	fb02 6101 	mla	r1, r2, r1, r6
 800d0ec:	0c1e      	lsrs	r6, r3, #16
 800d0ee:	0c0b      	lsrs	r3, r1, #16
 800d0f0:	fb02 3306 	mla	r3, r2, r6, r3
 800d0f4:	b289      	uxth	r1, r1
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0fc:	4285      	cmp	r5, r0
 800d0fe:	f84c 1b04 	str.w	r1, [ip], #4
 800d102:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d106:	dcec      	bgt.n	800d0e2 <__multadd+0x12>
 800d108:	b30e      	cbz	r6, 800d14e <__multadd+0x7e>
 800d10a:	68a3      	ldr	r3, [r4, #8]
 800d10c:	42ab      	cmp	r3, r5
 800d10e:	dc19      	bgt.n	800d144 <__multadd+0x74>
 800d110:	6861      	ldr	r1, [r4, #4]
 800d112:	4638      	mov	r0, r7
 800d114:	3101      	adds	r1, #1
 800d116:	f7ff ff79 	bl	800d00c <_Balloc>
 800d11a:	4680      	mov	r8, r0
 800d11c:	b928      	cbnz	r0, 800d12a <__multadd+0x5a>
 800d11e:	4602      	mov	r2, r0
 800d120:	4b0c      	ldr	r3, [pc, #48]	; (800d154 <__multadd+0x84>)
 800d122:	480d      	ldr	r0, [pc, #52]	; (800d158 <__multadd+0x88>)
 800d124:	21ba      	movs	r1, #186	; 0xba
 800d126:	f7fd fe89 	bl	800ae3c <__assert_func>
 800d12a:	6922      	ldr	r2, [r4, #16]
 800d12c:	3202      	adds	r2, #2
 800d12e:	f104 010c 	add.w	r1, r4, #12
 800d132:	0092      	lsls	r2, r2, #2
 800d134:	300c      	adds	r0, #12
 800d136:	f7fe ffd2 	bl	800c0de <memcpy>
 800d13a:	4621      	mov	r1, r4
 800d13c:	4638      	mov	r0, r7
 800d13e:	f7ff ffa5 	bl	800d08c <_Bfree>
 800d142:	4644      	mov	r4, r8
 800d144:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d148:	3501      	adds	r5, #1
 800d14a:	615e      	str	r6, [r3, #20]
 800d14c:	6125      	str	r5, [r4, #16]
 800d14e:	4620      	mov	r0, r4
 800d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d154:	0800fac9 	.word	0x0800fac9
 800d158:	0800fada 	.word	0x0800fada

0800d15c <__s2b>:
 800d15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d160:	460c      	mov	r4, r1
 800d162:	4615      	mov	r5, r2
 800d164:	461f      	mov	r7, r3
 800d166:	2209      	movs	r2, #9
 800d168:	3308      	adds	r3, #8
 800d16a:	4606      	mov	r6, r0
 800d16c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d170:	2100      	movs	r1, #0
 800d172:	2201      	movs	r2, #1
 800d174:	429a      	cmp	r2, r3
 800d176:	db09      	blt.n	800d18c <__s2b+0x30>
 800d178:	4630      	mov	r0, r6
 800d17a:	f7ff ff47 	bl	800d00c <_Balloc>
 800d17e:	b940      	cbnz	r0, 800d192 <__s2b+0x36>
 800d180:	4602      	mov	r2, r0
 800d182:	4b19      	ldr	r3, [pc, #100]	; (800d1e8 <__s2b+0x8c>)
 800d184:	4819      	ldr	r0, [pc, #100]	; (800d1ec <__s2b+0x90>)
 800d186:	21d3      	movs	r1, #211	; 0xd3
 800d188:	f7fd fe58 	bl	800ae3c <__assert_func>
 800d18c:	0052      	lsls	r2, r2, #1
 800d18e:	3101      	adds	r1, #1
 800d190:	e7f0      	b.n	800d174 <__s2b+0x18>
 800d192:	9b08      	ldr	r3, [sp, #32]
 800d194:	6143      	str	r3, [r0, #20]
 800d196:	2d09      	cmp	r5, #9
 800d198:	f04f 0301 	mov.w	r3, #1
 800d19c:	6103      	str	r3, [r0, #16]
 800d19e:	dd16      	ble.n	800d1ce <__s2b+0x72>
 800d1a0:	f104 0909 	add.w	r9, r4, #9
 800d1a4:	46c8      	mov	r8, r9
 800d1a6:	442c      	add	r4, r5
 800d1a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1ac:	4601      	mov	r1, r0
 800d1ae:	3b30      	subs	r3, #48	; 0x30
 800d1b0:	220a      	movs	r2, #10
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ff8c 	bl	800d0d0 <__multadd>
 800d1b8:	45a0      	cmp	r8, r4
 800d1ba:	d1f5      	bne.n	800d1a8 <__s2b+0x4c>
 800d1bc:	f1a5 0408 	sub.w	r4, r5, #8
 800d1c0:	444c      	add	r4, r9
 800d1c2:	1b2d      	subs	r5, r5, r4
 800d1c4:	1963      	adds	r3, r4, r5
 800d1c6:	42bb      	cmp	r3, r7
 800d1c8:	db04      	blt.n	800d1d4 <__s2b+0x78>
 800d1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ce:	340a      	adds	r4, #10
 800d1d0:	2509      	movs	r5, #9
 800d1d2:	e7f6      	b.n	800d1c2 <__s2b+0x66>
 800d1d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1d8:	4601      	mov	r1, r0
 800d1da:	3b30      	subs	r3, #48	; 0x30
 800d1dc:	220a      	movs	r2, #10
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ff76 	bl	800d0d0 <__multadd>
 800d1e4:	e7ee      	b.n	800d1c4 <__s2b+0x68>
 800d1e6:	bf00      	nop
 800d1e8:	0800fac9 	.word	0x0800fac9
 800d1ec:	0800fada 	.word	0x0800fada

0800d1f0 <__hi0bits>:
 800d1f0:	0c03      	lsrs	r3, r0, #16
 800d1f2:	041b      	lsls	r3, r3, #16
 800d1f4:	b9d3      	cbnz	r3, 800d22c <__hi0bits+0x3c>
 800d1f6:	0400      	lsls	r0, r0, #16
 800d1f8:	2310      	movs	r3, #16
 800d1fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1fe:	bf04      	itt	eq
 800d200:	0200      	lsleq	r0, r0, #8
 800d202:	3308      	addeq	r3, #8
 800d204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d208:	bf04      	itt	eq
 800d20a:	0100      	lsleq	r0, r0, #4
 800d20c:	3304      	addeq	r3, #4
 800d20e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d212:	bf04      	itt	eq
 800d214:	0080      	lsleq	r0, r0, #2
 800d216:	3302      	addeq	r3, #2
 800d218:	2800      	cmp	r0, #0
 800d21a:	db05      	blt.n	800d228 <__hi0bits+0x38>
 800d21c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d220:	f103 0301 	add.w	r3, r3, #1
 800d224:	bf08      	it	eq
 800d226:	2320      	moveq	r3, #32
 800d228:	4618      	mov	r0, r3
 800d22a:	4770      	bx	lr
 800d22c:	2300      	movs	r3, #0
 800d22e:	e7e4      	b.n	800d1fa <__hi0bits+0xa>

0800d230 <__lo0bits>:
 800d230:	6803      	ldr	r3, [r0, #0]
 800d232:	f013 0207 	ands.w	r2, r3, #7
 800d236:	d00c      	beq.n	800d252 <__lo0bits+0x22>
 800d238:	07d9      	lsls	r1, r3, #31
 800d23a:	d422      	bmi.n	800d282 <__lo0bits+0x52>
 800d23c:	079a      	lsls	r2, r3, #30
 800d23e:	bf49      	itett	mi
 800d240:	085b      	lsrmi	r3, r3, #1
 800d242:	089b      	lsrpl	r3, r3, #2
 800d244:	6003      	strmi	r3, [r0, #0]
 800d246:	2201      	movmi	r2, #1
 800d248:	bf5c      	itt	pl
 800d24a:	6003      	strpl	r3, [r0, #0]
 800d24c:	2202      	movpl	r2, #2
 800d24e:	4610      	mov	r0, r2
 800d250:	4770      	bx	lr
 800d252:	b299      	uxth	r1, r3
 800d254:	b909      	cbnz	r1, 800d25a <__lo0bits+0x2a>
 800d256:	0c1b      	lsrs	r3, r3, #16
 800d258:	2210      	movs	r2, #16
 800d25a:	b2d9      	uxtb	r1, r3
 800d25c:	b909      	cbnz	r1, 800d262 <__lo0bits+0x32>
 800d25e:	3208      	adds	r2, #8
 800d260:	0a1b      	lsrs	r3, r3, #8
 800d262:	0719      	lsls	r1, r3, #28
 800d264:	bf04      	itt	eq
 800d266:	091b      	lsreq	r3, r3, #4
 800d268:	3204      	addeq	r2, #4
 800d26a:	0799      	lsls	r1, r3, #30
 800d26c:	bf04      	itt	eq
 800d26e:	089b      	lsreq	r3, r3, #2
 800d270:	3202      	addeq	r2, #2
 800d272:	07d9      	lsls	r1, r3, #31
 800d274:	d403      	bmi.n	800d27e <__lo0bits+0x4e>
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	f102 0201 	add.w	r2, r2, #1
 800d27c:	d003      	beq.n	800d286 <__lo0bits+0x56>
 800d27e:	6003      	str	r3, [r0, #0]
 800d280:	e7e5      	b.n	800d24e <__lo0bits+0x1e>
 800d282:	2200      	movs	r2, #0
 800d284:	e7e3      	b.n	800d24e <__lo0bits+0x1e>
 800d286:	2220      	movs	r2, #32
 800d288:	e7e1      	b.n	800d24e <__lo0bits+0x1e>
	...

0800d28c <__i2b>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	460c      	mov	r4, r1
 800d290:	2101      	movs	r1, #1
 800d292:	f7ff febb 	bl	800d00c <_Balloc>
 800d296:	4602      	mov	r2, r0
 800d298:	b928      	cbnz	r0, 800d2a6 <__i2b+0x1a>
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <__i2b+0x24>)
 800d29c:	4805      	ldr	r0, [pc, #20]	; (800d2b4 <__i2b+0x28>)
 800d29e:	f240 1145 	movw	r1, #325	; 0x145
 800d2a2:	f7fd fdcb 	bl	800ae3c <__assert_func>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	6144      	str	r4, [r0, #20]
 800d2aa:	6103      	str	r3, [r0, #16]
 800d2ac:	bd10      	pop	{r4, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0800fac9 	.word	0x0800fac9
 800d2b4:	0800fada 	.word	0x0800fada

0800d2b8 <__multiply>:
 800d2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2bc:	4691      	mov	r9, r2
 800d2be:	690a      	ldr	r2, [r1, #16]
 800d2c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	bfb8      	it	lt
 800d2c8:	460b      	movlt	r3, r1
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	bfbc      	itt	lt
 800d2ce:	464c      	movlt	r4, r9
 800d2d0:	4699      	movlt	r9, r3
 800d2d2:	6927      	ldr	r7, [r4, #16]
 800d2d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2d8:	68a3      	ldr	r3, [r4, #8]
 800d2da:	6861      	ldr	r1, [r4, #4]
 800d2dc:	eb07 060a 	add.w	r6, r7, sl
 800d2e0:	42b3      	cmp	r3, r6
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	bfb8      	it	lt
 800d2e6:	3101      	addlt	r1, #1
 800d2e8:	f7ff fe90 	bl	800d00c <_Balloc>
 800d2ec:	b930      	cbnz	r0, 800d2fc <__multiply+0x44>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	4b44      	ldr	r3, [pc, #272]	; (800d404 <__multiply+0x14c>)
 800d2f2:	4845      	ldr	r0, [pc, #276]	; (800d408 <__multiply+0x150>)
 800d2f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2f8:	f7fd fda0 	bl	800ae3c <__assert_func>
 800d2fc:	f100 0514 	add.w	r5, r0, #20
 800d300:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d304:	462b      	mov	r3, r5
 800d306:	2200      	movs	r2, #0
 800d308:	4543      	cmp	r3, r8
 800d30a:	d321      	bcc.n	800d350 <__multiply+0x98>
 800d30c:	f104 0314 	add.w	r3, r4, #20
 800d310:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d314:	f109 0314 	add.w	r3, r9, #20
 800d318:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d31c:	9202      	str	r2, [sp, #8]
 800d31e:	1b3a      	subs	r2, r7, r4
 800d320:	3a15      	subs	r2, #21
 800d322:	f022 0203 	bic.w	r2, r2, #3
 800d326:	3204      	adds	r2, #4
 800d328:	f104 0115 	add.w	r1, r4, #21
 800d32c:	428f      	cmp	r7, r1
 800d32e:	bf38      	it	cc
 800d330:	2204      	movcc	r2, #4
 800d332:	9201      	str	r2, [sp, #4]
 800d334:	9a02      	ldr	r2, [sp, #8]
 800d336:	9303      	str	r3, [sp, #12]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d80c      	bhi.n	800d356 <__multiply+0x9e>
 800d33c:	2e00      	cmp	r6, #0
 800d33e:	dd03      	ble.n	800d348 <__multiply+0x90>
 800d340:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d344:	2b00      	cmp	r3, #0
 800d346:	d05b      	beq.n	800d400 <__multiply+0x148>
 800d348:	6106      	str	r6, [r0, #16]
 800d34a:	b005      	add	sp, #20
 800d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d350:	f843 2b04 	str.w	r2, [r3], #4
 800d354:	e7d8      	b.n	800d308 <__multiply+0x50>
 800d356:	f8b3 a000 	ldrh.w	sl, [r3]
 800d35a:	f1ba 0f00 	cmp.w	sl, #0
 800d35e:	d024      	beq.n	800d3aa <__multiply+0xf2>
 800d360:	f104 0e14 	add.w	lr, r4, #20
 800d364:	46a9      	mov	r9, r5
 800d366:	f04f 0c00 	mov.w	ip, #0
 800d36a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d36e:	f8d9 1000 	ldr.w	r1, [r9]
 800d372:	fa1f fb82 	uxth.w	fp, r2
 800d376:	b289      	uxth	r1, r1
 800d378:	fb0a 110b 	mla	r1, sl, fp, r1
 800d37c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d380:	f8d9 2000 	ldr.w	r2, [r9]
 800d384:	4461      	add	r1, ip
 800d386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d38a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d38e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d392:	b289      	uxth	r1, r1
 800d394:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d398:	4577      	cmp	r7, lr
 800d39a:	f849 1b04 	str.w	r1, [r9], #4
 800d39e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3a2:	d8e2      	bhi.n	800d36a <__multiply+0xb2>
 800d3a4:	9a01      	ldr	r2, [sp, #4]
 800d3a6:	f845 c002 	str.w	ip, [r5, r2]
 800d3aa:	9a03      	ldr	r2, [sp, #12]
 800d3ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	f1b9 0f00 	cmp.w	r9, #0
 800d3b6:	d021      	beq.n	800d3fc <__multiply+0x144>
 800d3b8:	6829      	ldr	r1, [r5, #0]
 800d3ba:	f104 0c14 	add.w	ip, r4, #20
 800d3be:	46ae      	mov	lr, r5
 800d3c0:	f04f 0a00 	mov.w	sl, #0
 800d3c4:	f8bc b000 	ldrh.w	fp, [ip]
 800d3c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3cc:	fb09 220b 	mla	r2, r9, fp, r2
 800d3d0:	4452      	add	r2, sl
 800d3d2:	b289      	uxth	r1, r1
 800d3d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3d8:	f84e 1b04 	str.w	r1, [lr], #4
 800d3dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3e4:	f8be 1000 	ldrh.w	r1, [lr]
 800d3e8:	fb09 110a 	mla	r1, r9, sl, r1
 800d3ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3f0:	4567      	cmp	r7, ip
 800d3f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3f6:	d8e5      	bhi.n	800d3c4 <__multiply+0x10c>
 800d3f8:	9a01      	ldr	r2, [sp, #4]
 800d3fa:	50a9      	str	r1, [r5, r2]
 800d3fc:	3504      	adds	r5, #4
 800d3fe:	e799      	b.n	800d334 <__multiply+0x7c>
 800d400:	3e01      	subs	r6, #1
 800d402:	e79b      	b.n	800d33c <__multiply+0x84>
 800d404:	0800fac9 	.word	0x0800fac9
 800d408:	0800fada 	.word	0x0800fada

0800d40c <__pow5mult>:
 800d40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d410:	4615      	mov	r5, r2
 800d412:	f012 0203 	ands.w	r2, r2, #3
 800d416:	4606      	mov	r6, r0
 800d418:	460f      	mov	r7, r1
 800d41a:	d007      	beq.n	800d42c <__pow5mult+0x20>
 800d41c:	4c25      	ldr	r4, [pc, #148]	; (800d4b4 <__pow5mult+0xa8>)
 800d41e:	3a01      	subs	r2, #1
 800d420:	2300      	movs	r3, #0
 800d422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d426:	f7ff fe53 	bl	800d0d0 <__multadd>
 800d42a:	4607      	mov	r7, r0
 800d42c:	10ad      	asrs	r5, r5, #2
 800d42e:	d03d      	beq.n	800d4ac <__pow5mult+0xa0>
 800d430:	69f4      	ldr	r4, [r6, #28]
 800d432:	b97c      	cbnz	r4, 800d454 <__pow5mult+0x48>
 800d434:	2010      	movs	r0, #16
 800d436:	f7ff fd35 	bl	800cea4 <malloc>
 800d43a:	4602      	mov	r2, r0
 800d43c:	61f0      	str	r0, [r6, #28]
 800d43e:	b928      	cbnz	r0, 800d44c <__pow5mult+0x40>
 800d440:	4b1d      	ldr	r3, [pc, #116]	; (800d4b8 <__pow5mult+0xac>)
 800d442:	481e      	ldr	r0, [pc, #120]	; (800d4bc <__pow5mult+0xb0>)
 800d444:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d448:	f7fd fcf8 	bl	800ae3c <__assert_func>
 800d44c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d450:	6004      	str	r4, [r0, #0]
 800d452:	60c4      	str	r4, [r0, #12]
 800d454:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d45c:	b94c      	cbnz	r4, 800d472 <__pow5mult+0x66>
 800d45e:	f240 2171 	movw	r1, #625	; 0x271
 800d462:	4630      	mov	r0, r6
 800d464:	f7ff ff12 	bl	800d28c <__i2b>
 800d468:	2300      	movs	r3, #0
 800d46a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d46e:	4604      	mov	r4, r0
 800d470:	6003      	str	r3, [r0, #0]
 800d472:	f04f 0900 	mov.w	r9, #0
 800d476:	07eb      	lsls	r3, r5, #31
 800d478:	d50a      	bpl.n	800d490 <__pow5mult+0x84>
 800d47a:	4639      	mov	r1, r7
 800d47c:	4622      	mov	r2, r4
 800d47e:	4630      	mov	r0, r6
 800d480:	f7ff ff1a 	bl	800d2b8 <__multiply>
 800d484:	4639      	mov	r1, r7
 800d486:	4680      	mov	r8, r0
 800d488:	4630      	mov	r0, r6
 800d48a:	f7ff fdff 	bl	800d08c <_Bfree>
 800d48e:	4647      	mov	r7, r8
 800d490:	106d      	asrs	r5, r5, #1
 800d492:	d00b      	beq.n	800d4ac <__pow5mult+0xa0>
 800d494:	6820      	ldr	r0, [r4, #0]
 800d496:	b938      	cbnz	r0, 800d4a8 <__pow5mult+0x9c>
 800d498:	4622      	mov	r2, r4
 800d49a:	4621      	mov	r1, r4
 800d49c:	4630      	mov	r0, r6
 800d49e:	f7ff ff0b 	bl	800d2b8 <__multiply>
 800d4a2:	6020      	str	r0, [r4, #0]
 800d4a4:	f8c0 9000 	str.w	r9, [r0]
 800d4a8:	4604      	mov	r4, r0
 800d4aa:	e7e4      	b.n	800d476 <__pow5mult+0x6a>
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0800fc28 	.word	0x0800fc28
 800d4b8:	0800fa5a 	.word	0x0800fa5a
 800d4bc:	0800fada 	.word	0x0800fada

0800d4c0 <__lshift>:
 800d4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c4:	460c      	mov	r4, r1
 800d4c6:	6849      	ldr	r1, [r1, #4]
 800d4c8:	6923      	ldr	r3, [r4, #16]
 800d4ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4ce:	68a3      	ldr	r3, [r4, #8]
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	4691      	mov	r9, r2
 800d4d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4d8:	f108 0601 	add.w	r6, r8, #1
 800d4dc:	42b3      	cmp	r3, r6
 800d4de:	db0b      	blt.n	800d4f8 <__lshift+0x38>
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f7ff fd93 	bl	800d00c <_Balloc>
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	b948      	cbnz	r0, 800d4fe <__lshift+0x3e>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	4b28      	ldr	r3, [pc, #160]	; (800d590 <__lshift+0xd0>)
 800d4ee:	4829      	ldr	r0, [pc, #164]	; (800d594 <__lshift+0xd4>)
 800d4f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4f4:	f7fd fca2 	bl	800ae3c <__assert_func>
 800d4f8:	3101      	adds	r1, #1
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	e7ee      	b.n	800d4dc <__lshift+0x1c>
 800d4fe:	2300      	movs	r3, #0
 800d500:	f100 0114 	add.w	r1, r0, #20
 800d504:	f100 0210 	add.w	r2, r0, #16
 800d508:	4618      	mov	r0, r3
 800d50a:	4553      	cmp	r3, sl
 800d50c:	db33      	blt.n	800d576 <__lshift+0xb6>
 800d50e:	6920      	ldr	r0, [r4, #16]
 800d510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d514:	f104 0314 	add.w	r3, r4, #20
 800d518:	f019 091f 	ands.w	r9, r9, #31
 800d51c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d524:	d02b      	beq.n	800d57e <__lshift+0xbe>
 800d526:	f1c9 0e20 	rsb	lr, r9, #32
 800d52a:	468a      	mov	sl, r1
 800d52c:	2200      	movs	r2, #0
 800d52e:	6818      	ldr	r0, [r3, #0]
 800d530:	fa00 f009 	lsl.w	r0, r0, r9
 800d534:	4310      	orrs	r0, r2
 800d536:	f84a 0b04 	str.w	r0, [sl], #4
 800d53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d53e:	459c      	cmp	ip, r3
 800d540:	fa22 f20e 	lsr.w	r2, r2, lr
 800d544:	d8f3      	bhi.n	800d52e <__lshift+0x6e>
 800d546:	ebac 0304 	sub.w	r3, ip, r4
 800d54a:	3b15      	subs	r3, #21
 800d54c:	f023 0303 	bic.w	r3, r3, #3
 800d550:	3304      	adds	r3, #4
 800d552:	f104 0015 	add.w	r0, r4, #21
 800d556:	4584      	cmp	ip, r0
 800d558:	bf38      	it	cc
 800d55a:	2304      	movcc	r3, #4
 800d55c:	50ca      	str	r2, [r1, r3]
 800d55e:	b10a      	cbz	r2, 800d564 <__lshift+0xa4>
 800d560:	f108 0602 	add.w	r6, r8, #2
 800d564:	3e01      	subs	r6, #1
 800d566:	4638      	mov	r0, r7
 800d568:	612e      	str	r6, [r5, #16]
 800d56a:	4621      	mov	r1, r4
 800d56c:	f7ff fd8e 	bl	800d08c <_Bfree>
 800d570:	4628      	mov	r0, r5
 800d572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d576:	f842 0f04 	str.w	r0, [r2, #4]!
 800d57a:	3301      	adds	r3, #1
 800d57c:	e7c5      	b.n	800d50a <__lshift+0x4a>
 800d57e:	3904      	subs	r1, #4
 800d580:	f853 2b04 	ldr.w	r2, [r3], #4
 800d584:	f841 2f04 	str.w	r2, [r1, #4]!
 800d588:	459c      	cmp	ip, r3
 800d58a:	d8f9      	bhi.n	800d580 <__lshift+0xc0>
 800d58c:	e7ea      	b.n	800d564 <__lshift+0xa4>
 800d58e:	bf00      	nop
 800d590:	0800fac9 	.word	0x0800fac9
 800d594:	0800fada 	.word	0x0800fada

0800d598 <__mcmp>:
 800d598:	b530      	push	{r4, r5, lr}
 800d59a:	6902      	ldr	r2, [r0, #16]
 800d59c:	690c      	ldr	r4, [r1, #16]
 800d59e:	1b12      	subs	r2, r2, r4
 800d5a0:	d10e      	bne.n	800d5c0 <__mcmp+0x28>
 800d5a2:	f100 0314 	add.w	r3, r0, #20
 800d5a6:	3114      	adds	r1, #20
 800d5a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5b8:	42a5      	cmp	r5, r4
 800d5ba:	d003      	beq.n	800d5c4 <__mcmp+0x2c>
 800d5bc:	d305      	bcc.n	800d5ca <__mcmp+0x32>
 800d5be:	2201      	movs	r2, #1
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	bd30      	pop	{r4, r5, pc}
 800d5c4:	4283      	cmp	r3, r0
 800d5c6:	d3f3      	bcc.n	800d5b0 <__mcmp+0x18>
 800d5c8:	e7fa      	b.n	800d5c0 <__mcmp+0x28>
 800d5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ce:	e7f7      	b.n	800d5c0 <__mcmp+0x28>

0800d5d0 <__mdiff>:
 800d5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4620      	mov	r0, r4
 800d5dc:	4690      	mov	r8, r2
 800d5de:	f7ff ffdb 	bl	800d598 <__mcmp>
 800d5e2:	1e05      	subs	r5, r0, #0
 800d5e4:	d110      	bne.n	800d608 <__mdiff+0x38>
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff fd0f 	bl	800d00c <_Balloc>
 800d5ee:	b930      	cbnz	r0, 800d5fe <__mdiff+0x2e>
 800d5f0:	4b3a      	ldr	r3, [pc, #232]	; (800d6dc <__mdiff+0x10c>)
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	f240 2137 	movw	r1, #567	; 0x237
 800d5f8:	4839      	ldr	r0, [pc, #228]	; (800d6e0 <__mdiff+0x110>)
 800d5fa:	f7fd fc1f 	bl	800ae3c <__assert_func>
 800d5fe:	2301      	movs	r3, #1
 800d600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d608:	bfa4      	itt	ge
 800d60a:	4643      	movge	r3, r8
 800d60c:	46a0      	movge	r8, r4
 800d60e:	4630      	mov	r0, r6
 800d610:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d614:	bfa6      	itte	ge
 800d616:	461c      	movge	r4, r3
 800d618:	2500      	movge	r5, #0
 800d61a:	2501      	movlt	r5, #1
 800d61c:	f7ff fcf6 	bl	800d00c <_Balloc>
 800d620:	b920      	cbnz	r0, 800d62c <__mdiff+0x5c>
 800d622:	4b2e      	ldr	r3, [pc, #184]	; (800d6dc <__mdiff+0x10c>)
 800d624:	4602      	mov	r2, r0
 800d626:	f240 2145 	movw	r1, #581	; 0x245
 800d62a:	e7e5      	b.n	800d5f8 <__mdiff+0x28>
 800d62c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d630:	6926      	ldr	r6, [r4, #16]
 800d632:	60c5      	str	r5, [r0, #12]
 800d634:	f104 0914 	add.w	r9, r4, #20
 800d638:	f108 0514 	add.w	r5, r8, #20
 800d63c:	f100 0e14 	add.w	lr, r0, #20
 800d640:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d644:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d648:	f108 0210 	add.w	r2, r8, #16
 800d64c:	46f2      	mov	sl, lr
 800d64e:	2100      	movs	r1, #0
 800d650:	f859 3b04 	ldr.w	r3, [r9], #4
 800d654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d658:	fa11 f88b 	uxtah	r8, r1, fp
 800d65c:	b299      	uxth	r1, r3
 800d65e:	0c1b      	lsrs	r3, r3, #16
 800d660:	eba8 0801 	sub.w	r8, r8, r1
 800d664:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d668:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d66c:	fa1f f888 	uxth.w	r8, r8
 800d670:	1419      	asrs	r1, r3, #16
 800d672:	454e      	cmp	r6, r9
 800d674:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d678:	f84a 3b04 	str.w	r3, [sl], #4
 800d67c:	d8e8      	bhi.n	800d650 <__mdiff+0x80>
 800d67e:	1b33      	subs	r3, r6, r4
 800d680:	3b15      	subs	r3, #21
 800d682:	f023 0303 	bic.w	r3, r3, #3
 800d686:	3304      	adds	r3, #4
 800d688:	3415      	adds	r4, #21
 800d68a:	42a6      	cmp	r6, r4
 800d68c:	bf38      	it	cc
 800d68e:	2304      	movcc	r3, #4
 800d690:	441d      	add	r5, r3
 800d692:	4473      	add	r3, lr
 800d694:	469e      	mov	lr, r3
 800d696:	462e      	mov	r6, r5
 800d698:	4566      	cmp	r6, ip
 800d69a:	d30e      	bcc.n	800d6ba <__mdiff+0xea>
 800d69c:	f10c 0203 	add.w	r2, ip, #3
 800d6a0:	1b52      	subs	r2, r2, r5
 800d6a2:	f022 0203 	bic.w	r2, r2, #3
 800d6a6:	3d03      	subs	r5, #3
 800d6a8:	45ac      	cmp	ip, r5
 800d6aa:	bf38      	it	cc
 800d6ac:	2200      	movcc	r2, #0
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d6b4:	b17a      	cbz	r2, 800d6d6 <__mdiff+0x106>
 800d6b6:	6107      	str	r7, [r0, #16]
 800d6b8:	e7a4      	b.n	800d604 <__mdiff+0x34>
 800d6ba:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6be:	fa11 f288 	uxtah	r2, r1, r8
 800d6c2:	1414      	asrs	r4, r2, #16
 800d6c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6c8:	b292      	uxth	r2, r2
 800d6ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d6ce:	f84e 2b04 	str.w	r2, [lr], #4
 800d6d2:	1421      	asrs	r1, r4, #16
 800d6d4:	e7e0      	b.n	800d698 <__mdiff+0xc8>
 800d6d6:	3f01      	subs	r7, #1
 800d6d8:	e7ea      	b.n	800d6b0 <__mdiff+0xe0>
 800d6da:	bf00      	nop
 800d6dc:	0800fac9 	.word	0x0800fac9
 800d6e0:	0800fada 	.word	0x0800fada

0800d6e4 <__ulp>:
 800d6e4:	b082      	sub	sp, #8
 800d6e6:	ed8d 0b00 	vstr	d0, [sp]
 800d6ea:	9a01      	ldr	r2, [sp, #4]
 800d6ec:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <__ulp+0x48>)
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dc08      	bgt.n	800d70a <__ulp+0x26>
 800d6f8:	425b      	negs	r3, r3
 800d6fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d6fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d702:	da04      	bge.n	800d70e <__ulp+0x2a>
 800d704:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d708:	4113      	asrs	r3, r2
 800d70a:	2200      	movs	r2, #0
 800d70c:	e008      	b.n	800d720 <__ulp+0x3c>
 800d70e:	f1a2 0314 	sub.w	r3, r2, #20
 800d712:	2b1e      	cmp	r3, #30
 800d714:	bfda      	itte	le
 800d716:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d71a:	40da      	lsrle	r2, r3
 800d71c:	2201      	movgt	r2, #1
 800d71e:	2300      	movs	r3, #0
 800d720:	4619      	mov	r1, r3
 800d722:	4610      	mov	r0, r2
 800d724:	ec41 0b10 	vmov	d0, r0, r1
 800d728:	b002      	add	sp, #8
 800d72a:	4770      	bx	lr
 800d72c:	7ff00000 	.word	0x7ff00000

0800d730 <__b2d>:
 800d730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d734:	6906      	ldr	r6, [r0, #16]
 800d736:	f100 0814 	add.w	r8, r0, #20
 800d73a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d73e:	1f37      	subs	r7, r6, #4
 800d740:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d744:	4610      	mov	r0, r2
 800d746:	f7ff fd53 	bl	800d1f0 <__hi0bits>
 800d74a:	f1c0 0320 	rsb	r3, r0, #32
 800d74e:	280a      	cmp	r0, #10
 800d750:	600b      	str	r3, [r1, #0]
 800d752:	491b      	ldr	r1, [pc, #108]	; (800d7c0 <__b2d+0x90>)
 800d754:	dc15      	bgt.n	800d782 <__b2d+0x52>
 800d756:	f1c0 0c0b 	rsb	ip, r0, #11
 800d75a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d75e:	45b8      	cmp	r8, r7
 800d760:	ea43 0501 	orr.w	r5, r3, r1
 800d764:	bf34      	ite	cc
 800d766:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d76a:	2300      	movcs	r3, #0
 800d76c:	3015      	adds	r0, #21
 800d76e:	fa02 f000 	lsl.w	r0, r2, r0
 800d772:	fa23 f30c 	lsr.w	r3, r3, ip
 800d776:	4303      	orrs	r3, r0
 800d778:	461c      	mov	r4, r3
 800d77a:	ec45 4b10 	vmov	d0, r4, r5
 800d77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d782:	45b8      	cmp	r8, r7
 800d784:	bf3a      	itte	cc
 800d786:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d78a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d78e:	2300      	movcs	r3, #0
 800d790:	380b      	subs	r0, #11
 800d792:	d012      	beq.n	800d7ba <__b2d+0x8a>
 800d794:	f1c0 0120 	rsb	r1, r0, #32
 800d798:	fa23 f401 	lsr.w	r4, r3, r1
 800d79c:	4082      	lsls	r2, r0
 800d79e:	4322      	orrs	r2, r4
 800d7a0:	4547      	cmp	r7, r8
 800d7a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d7a6:	bf8c      	ite	hi
 800d7a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d7ac:	2200      	movls	r2, #0
 800d7ae:	4083      	lsls	r3, r0
 800d7b0:	40ca      	lsrs	r2, r1
 800d7b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	e7de      	b.n	800d778 <__b2d+0x48>
 800d7ba:	ea42 0501 	orr.w	r5, r2, r1
 800d7be:	e7db      	b.n	800d778 <__b2d+0x48>
 800d7c0:	3ff00000 	.word	0x3ff00000

0800d7c4 <__d2b>:
 800d7c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	460f      	mov	r7, r1
 800d7ca:	2101      	movs	r1, #1
 800d7cc:	ec59 8b10 	vmov	r8, r9, d0
 800d7d0:	4616      	mov	r6, r2
 800d7d2:	f7ff fc1b 	bl	800d00c <_Balloc>
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	b930      	cbnz	r0, 800d7e8 <__d2b+0x24>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4b24      	ldr	r3, [pc, #144]	; (800d870 <__d2b+0xac>)
 800d7de:	4825      	ldr	r0, [pc, #148]	; (800d874 <__d2b+0xb0>)
 800d7e0:	f240 310f 	movw	r1, #783	; 0x30f
 800d7e4:	f7fd fb2a 	bl	800ae3c <__assert_func>
 800d7e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7f0:	bb2d      	cbnz	r5, 800d83e <__d2b+0x7a>
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	f1b8 0300 	subs.w	r3, r8, #0
 800d7f8:	d026      	beq.n	800d848 <__d2b+0x84>
 800d7fa:	4668      	mov	r0, sp
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	f7ff fd17 	bl	800d230 <__lo0bits>
 800d802:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d806:	b1e8      	cbz	r0, 800d844 <__d2b+0x80>
 800d808:	f1c0 0320 	rsb	r3, r0, #32
 800d80c:	fa02 f303 	lsl.w	r3, r2, r3
 800d810:	430b      	orrs	r3, r1
 800d812:	40c2      	lsrs	r2, r0
 800d814:	6163      	str	r3, [r4, #20]
 800d816:	9201      	str	r2, [sp, #4]
 800d818:	9b01      	ldr	r3, [sp, #4]
 800d81a:	61a3      	str	r3, [r4, #24]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	bf14      	ite	ne
 800d820:	2202      	movne	r2, #2
 800d822:	2201      	moveq	r2, #1
 800d824:	6122      	str	r2, [r4, #16]
 800d826:	b1bd      	cbz	r5, 800d858 <__d2b+0x94>
 800d828:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d82c:	4405      	add	r5, r0
 800d82e:	603d      	str	r5, [r7, #0]
 800d830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d834:	6030      	str	r0, [r6, #0]
 800d836:	4620      	mov	r0, r4
 800d838:	b003      	add	sp, #12
 800d83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d83e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d842:	e7d6      	b.n	800d7f2 <__d2b+0x2e>
 800d844:	6161      	str	r1, [r4, #20]
 800d846:	e7e7      	b.n	800d818 <__d2b+0x54>
 800d848:	a801      	add	r0, sp, #4
 800d84a:	f7ff fcf1 	bl	800d230 <__lo0bits>
 800d84e:	9b01      	ldr	r3, [sp, #4]
 800d850:	6163      	str	r3, [r4, #20]
 800d852:	3020      	adds	r0, #32
 800d854:	2201      	movs	r2, #1
 800d856:	e7e5      	b.n	800d824 <__d2b+0x60>
 800d858:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d85c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d860:	6038      	str	r0, [r7, #0]
 800d862:	6918      	ldr	r0, [r3, #16]
 800d864:	f7ff fcc4 	bl	800d1f0 <__hi0bits>
 800d868:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d86c:	e7e2      	b.n	800d834 <__d2b+0x70>
 800d86e:	bf00      	nop
 800d870:	0800fac9 	.word	0x0800fac9
 800d874:	0800fada 	.word	0x0800fada

0800d878 <__ratio>:
 800d878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	4688      	mov	r8, r1
 800d87e:	4669      	mov	r1, sp
 800d880:	4681      	mov	r9, r0
 800d882:	f7ff ff55 	bl	800d730 <__b2d>
 800d886:	a901      	add	r1, sp, #4
 800d888:	4640      	mov	r0, r8
 800d88a:	ec55 4b10 	vmov	r4, r5, d0
 800d88e:	f7ff ff4f 	bl	800d730 <__b2d>
 800d892:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d896:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d89a:	eba3 0c02 	sub.w	ip, r3, r2
 800d89e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8a2:	1a9b      	subs	r3, r3, r2
 800d8a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8a8:	ec51 0b10 	vmov	r0, r1, d0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	bfd6      	itet	le
 800d8b0:	460a      	movle	r2, r1
 800d8b2:	462a      	movgt	r2, r5
 800d8b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8b8:	468b      	mov	fp, r1
 800d8ba:	462f      	mov	r7, r5
 800d8bc:	bfd4      	ite	le
 800d8be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	ee10 2a10 	vmov	r2, s0
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	4639      	mov	r1, r7
 800d8d0:	f7f2 ffbc 	bl	800084c <__aeabi_ddiv>
 800d8d4:	ec41 0b10 	vmov	d0, r0, r1
 800d8d8:	b003      	add	sp, #12
 800d8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8de <__copybits>:
 800d8de:	3901      	subs	r1, #1
 800d8e0:	b570      	push	{r4, r5, r6, lr}
 800d8e2:	1149      	asrs	r1, r1, #5
 800d8e4:	6914      	ldr	r4, [r2, #16]
 800d8e6:	3101      	adds	r1, #1
 800d8e8:	f102 0314 	add.w	r3, r2, #20
 800d8ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8f4:	1f05      	subs	r5, r0, #4
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	d30c      	bcc.n	800d914 <__copybits+0x36>
 800d8fa:	1aa3      	subs	r3, r4, r2
 800d8fc:	3b11      	subs	r3, #17
 800d8fe:	f023 0303 	bic.w	r3, r3, #3
 800d902:	3211      	adds	r2, #17
 800d904:	42a2      	cmp	r2, r4
 800d906:	bf88      	it	hi
 800d908:	2300      	movhi	r3, #0
 800d90a:	4418      	add	r0, r3
 800d90c:	2300      	movs	r3, #0
 800d90e:	4288      	cmp	r0, r1
 800d910:	d305      	bcc.n	800d91e <__copybits+0x40>
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	f853 6b04 	ldr.w	r6, [r3], #4
 800d918:	f845 6f04 	str.w	r6, [r5, #4]!
 800d91c:	e7eb      	b.n	800d8f6 <__copybits+0x18>
 800d91e:	f840 3b04 	str.w	r3, [r0], #4
 800d922:	e7f4      	b.n	800d90e <__copybits+0x30>

0800d924 <__any_on>:
 800d924:	f100 0214 	add.w	r2, r0, #20
 800d928:	6900      	ldr	r0, [r0, #16]
 800d92a:	114b      	asrs	r3, r1, #5
 800d92c:	4298      	cmp	r0, r3
 800d92e:	b510      	push	{r4, lr}
 800d930:	db11      	blt.n	800d956 <__any_on+0x32>
 800d932:	dd0a      	ble.n	800d94a <__any_on+0x26>
 800d934:	f011 011f 	ands.w	r1, r1, #31
 800d938:	d007      	beq.n	800d94a <__any_on+0x26>
 800d93a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d93e:	fa24 f001 	lsr.w	r0, r4, r1
 800d942:	fa00 f101 	lsl.w	r1, r0, r1
 800d946:	428c      	cmp	r4, r1
 800d948:	d10b      	bne.n	800d962 <__any_on+0x3e>
 800d94a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d94e:	4293      	cmp	r3, r2
 800d950:	d803      	bhi.n	800d95a <__any_on+0x36>
 800d952:	2000      	movs	r0, #0
 800d954:	bd10      	pop	{r4, pc}
 800d956:	4603      	mov	r3, r0
 800d958:	e7f7      	b.n	800d94a <__any_on+0x26>
 800d95a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d95e:	2900      	cmp	r1, #0
 800d960:	d0f5      	beq.n	800d94e <__any_on+0x2a>
 800d962:	2001      	movs	r0, #1
 800d964:	e7f6      	b.n	800d954 <__any_on+0x30>

0800d966 <sulp>:
 800d966:	b570      	push	{r4, r5, r6, lr}
 800d968:	4604      	mov	r4, r0
 800d96a:	460d      	mov	r5, r1
 800d96c:	ec45 4b10 	vmov	d0, r4, r5
 800d970:	4616      	mov	r6, r2
 800d972:	f7ff feb7 	bl	800d6e4 <__ulp>
 800d976:	ec51 0b10 	vmov	r0, r1, d0
 800d97a:	b17e      	cbz	r6, 800d99c <sulp+0x36>
 800d97c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d984:	2b00      	cmp	r3, #0
 800d986:	dd09      	ble.n	800d99c <sulp+0x36>
 800d988:	051b      	lsls	r3, r3, #20
 800d98a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d98e:	2400      	movs	r4, #0
 800d990:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d994:	4622      	mov	r2, r4
 800d996:	462b      	mov	r3, r5
 800d998:	f7f2 fe2e 	bl	80005f8 <__aeabi_dmul>
 800d99c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9a0 <_strtod_l>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	ed2d 8b02 	vpush	{d8}
 800d9a8:	b09b      	sub	sp, #108	; 0x6c
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	9213      	str	r2, [sp, #76]	; 0x4c
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	9216      	str	r2, [sp, #88]	; 0x58
 800d9b2:	460d      	mov	r5, r1
 800d9b4:	f04f 0800 	mov.w	r8, #0
 800d9b8:	f04f 0900 	mov.w	r9, #0
 800d9bc:	460a      	mov	r2, r1
 800d9be:	9215      	str	r2, [sp, #84]	; 0x54
 800d9c0:	7811      	ldrb	r1, [r2, #0]
 800d9c2:	292b      	cmp	r1, #43	; 0x2b
 800d9c4:	d04c      	beq.n	800da60 <_strtod_l+0xc0>
 800d9c6:	d83a      	bhi.n	800da3e <_strtod_l+0x9e>
 800d9c8:	290d      	cmp	r1, #13
 800d9ca:	d834      	bhi.n	800da36 <_strtod_l+0x96>
 800d9cc:	2908      	cmp	r1, #8
 800d9ce:	d834      	bhi.n	800da3a <_strtod_l+0x9a>
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	d03d      	beq.n	800da50 <_strtod_l+0xb0>
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	920a      	str	r2, [sp, #40]	; 0x28
 800d9d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d9da:	7832      	ldrb	r2, [r6, #0]
 800d9dc:	2a30      	cmp	r2, #48	; 0x30
 800d9de:	f040 80b4 	bne.w	800db4a <_strtod_l+0x1aa>
 800d9e2:	7872      	ldrb	r2, [r6, #1]
 800d9e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d9e8:	2a58      	cmp	r2, #88	; 0x58
 800d9ea:	d170      	bne.n	800dace <_strtod_l+0x12e>
 800d9ec:	9302      	str	r3, [sp, #8]
 800d9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	ab16      	add	r3, sp, #88	; 0x58
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	4a8e      	ldr	r2, [pc, #568]	; (800dc30 <_strtod_l+0x290>)
 800d9f8:	ab17      	add	r3, sp, #92	; 0x5c
 800d9fa:	a915      	add	r1, sp, #84	; 0x54
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f001 faf1 	bl	800efe4 <__gethex>
 800da02:	f010 070f 	ands.w	r7, r0, #15
 800da06:	4605      	mov	r5, r0
 800da08:	d005      	beq.n	800da16 <_strtod_l+0x76>
 800da0a:	2f06      	cmp	r7, #6
 800da0c:	d12a      	bne.n	800da64 <_strtod_l+0xc4>
 800da0e:	3601      	adds	r6, #1
 800da10:	2300      	movs	r3, #0
 800da12:	9615      	str	r6, [sp, #84]	; 0x54
 800da14:	930a      	str	r3, [sp, #40]	; 0x28
 800da16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f040 857f 	bne.w	800e51c <_strtod_l+0xb7c>
 800da1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da20:	b1db      	cbz	r3, 800da5a <_strtod_l+0xba>
 800da22:	4642      	mov	r2, r8
 800da24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800da28:	ec43 2b10 	vmov	d0, r2, r3
 800da2c:	b01b      	add	sp, #108	; 0x6c
 800da2e:	ecbd 8b02 	vpop	{d8}
 800da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da36:	2920      	cmp	r1, #32
 800da38:	d1cc      	bne.n	800d9d4 <_strtod_l+0x34>
 800da3a:	3201      	adds	r2, #1
 800da3c:	e7bf      	b.n	800d9be <_strtod_l+0x1e>
 800da3e:	292d      	cmp	r1, #45	; 0x2d
 800da40:	d1c8      	bne.n	800d9d4 <_strtod_l+0x34>
 800da42:	2101      	movs	r1, #1
 800da44:	910a      	str	r1, [sp, #40]	; 0x28
 800da46:	1c51      	adds	r1, r2, #1
 800da48:	9115      	str	r1, [sp, #84]	; 0x54
 800da4a:	7852      	ldrb	r2, [r2, #1]
 800da4c:	2a00      	cmp	r2, #0
 800da4e:	d1c3      	bne.n	800d9d8 <_strtod_l+0x38>
 800da50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da52:	9515      	str	r5, [sp, #84]	; 0x54
 800da54:	2b00      	cmp	r3, #0
 800da56:	f040 855f 	bne.w	800e518 <_strtod_l+0xb78>
 800da5a:	4642      	mov	r2, r8
 800da5c:	464b      	mov	r3, r9
 800da5e:	e7e3      	b.n	800da28 <_strtod_l+0x88>
 800da60:	2100      	movs	r1, #0
 800da62:	e7ef      	b.n	800da44 <_strtod_l+0xa4>
 800da64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800da66:	b13a      	cbz	r2, 800da78 <_strtod_l+0xd8>
 800da68:	2135      	movs	r1, #53	; 0x35
 800da6a:	a818      	add	r0, sp, #96	; 0x60
 800da6c:	f7ff ff37 	bl	800d8de <__copybits>
 800da70:	9916      	ldr	r1, [sp, #88]	; 0x58
 800da72:	4620      	mov	r0, r4
 800da74:	f7ff fb0a 	bl	800d08c <_Bfree>
 800da78:	3f01      	subs	r7, #1
 800da7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da7c:	2f04      	cmp	r7, #4
 800da7e:	d806      	bhi.n	800da8e <_strtod_l+0xee>
 800da80:	e8df f007 	tbb	[pc, r7]
 800da84:	201d0314 	.word	0x201d0314
 800da88:	14          	.byte	0x14
 800da89:	00          	.byte	0x00
 800da8a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800da8e:	05e9      	lsls	r1, r5, #23
 800da90:	bf48      	it	mi
 800da92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800da96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da9a:	0d1b      	lsrs	r3, r3, #20
 800da9c:	051b      	lsls	r3, r3, #20
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1b9      	bne.n	800da16 <_strtod_l+0x76>
 800daa2:	f7fe faef 	bl	800c084 <__errno>
 800daa6:	2322      	movs	r3, #34	; 0x22
 800daa8:	6003      	str	r3, [r0, #0]
 800daaa:	e7b4      	b.n	800da16 <_strtod_l+0x76>
 800daac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800dab0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dab4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dab8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dabc:	e7e7      	b.n	800da8e <_strtod_l+0xee>
 800dabe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dc38 <_strtod_l+0x298>
 800dac2:	e7e4      	b.n	800da8e <_strtod_l+0xee>
 800dac4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dac8:	f04f 38ff 	mov.w	r8, #4294967295
 800dacc:	e7df      	b.n	800da8e <_strtod_l+0xee>
 800dace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	9215      	str	r2, [sp, #84]	; 0x54
 800dad4:	785b      	ldrb	r3, [r3, #1]
 800dad6:	2b30      	cmp	r3, #48	; 0x30
 800dad8:	d0f9      	beq.n	800dace <_strtod_l+0x12e>
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d09b      	beq.n	800da16 <_strtod_l+0x76>
 800dade:	2301      	movs	r3, #1
 800dae0:	f04f 0a00 	mov.w	sl, #0
 800dae4:	9304      	str	r3, [sp, #16]
 800dae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dae8:	930b      	str	r3, [sp, #44]	; 0x2c
 800daea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800daee:	46d3      	mov	fp, sl
 800daf0:	220a      	movs	r2, #10
 800daf2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800daf4:	7806      	ldrb	r6, [r0, #0]
 800daf6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dafa:	b2d9      	uxtb	r1, r3
 800dafc:	2909      	cmp	r1, #9
 800dafe:	d926      	bls.n	800db4e <_strtod_l+0x1ae>
 800db00:	494c      	ldr	r1, [pc, #304]	; (800dc34 <_strtod_l+0x294>)
 800db02:	2201      	movs	r2, #1
 800db04:	f7fe fa62 	bl	800bfcc <strncmp>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d030      	beq.n	800db6e <_strtod_l+0x1ce>
 800db0c:	2000      	movs	r0, #0
 800db0e:	4632      	mov	r2, r6
 800db10:	9005      	str	r0, [sp, #20]
 800db12:	465e      	mov	r6, fp
 800db14:	4603      	mov	r3, r0
 800db16:	2a65      	cmp	r2, #101	; 0x65
 800db18:	d001      	beq.n	800db1e <_strtod_l+0x17e>
 800db1a:	2a45      	cmp	r2, #69	; 0x45
 800db1c:	d113      	bne.n	800db46 <_strtod_l+0x1a6>
 800db1e:	b91e      	cbnz	r6, 800db28 <_strtod_l+0x188>
 800db20:	9a04      	ldr	r2, [sp, #16]
 800db22:	4302      	orrs	r2, r0
 800db24:	d094      	beq.n	800da50 <_strtod_l+0xb0>
 800db26:	2600      	movs	r6, #0
 800db28:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800db2a:	1c6a      	adds	r2, r5, #1
 800db2c:	9215      	str	r2, [sp, #84]	; 0x54
 800db2e:	786a      	ldrb	r2, [r5, #1]
 800db30:	2a2b      	cmp	r2, #43	; 0x2b
 800db32:	d074      	beq.n	800dc1e <_strtod_l+0x27e>
 800db34:	2a2d      	cmp	r2, #45	; 0x2d
 800db36:	d078      	beq.n	800dc2a <_strtod_l+0x28a>
 800db38:	f04f 0c00 	mov.w	ip, #0
 800db3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800db40:	2909      	cmp	r1, #9
 800db42:	d97f      	bls.n	800dc44 <_strtod_l+0x2a4>
 800db44:	9515      	str	r5, [sp, #84]	; 0x54
 800db46:	2700      	movs	r7, #0
 800db48:	e09e      	b.n	800dc88 <_strtod_l+0x2e8>
 800db4a:	2300      	movs	r3, #0
 800db4c:	e7c8      	b.n	800dae0 <_strtod_l+0x140>
 800db4e:	f1bb 0f08 	cmp.w	fp, #8
 800db52:	bfd8      	it	le
 800db54:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800db56:	f100 0001 	add.w	r0, r0, #1
 800db5a:	bfda      	itte	le
 800db5c:	fb02 3301 	mlale	r3, r2, r1, r3
 800db60:	9309      	strle	r3, [sp, #36]	; 0x24
 800db62:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800db66:	f10b 0b01 	add.w	fp, fp, #1
 800db6a:	9015      	str	r0, [sp, #84]	; 0x54
 800db6c:	e7c1      	b.n	800daf2 <_strtod_l+0x152>
 800db6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	9215      	str	r2, [sp, #84]	; 0x54
 800db74:	785a      	ldrb	r2, [r3, #1]
 800db76:	f1bb 0f00 	cmp.w	fp, #0
 800db7a:	d037      	beq.n	800dbec <_strtod_l+0x24c>
 800db7c:	9005      	str	r0, [sp, #20]
 800db7e:	465e      	mov	r6, fp
 800db80:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800db84:	2b09      	cmp	r3, #9
 800db86:	d912      	bls.n	800dbae <_strtod_l+0x20e>
 800db88:	2301      	movs	r3, #1
 800db8a:	e7c4      	b.n	800db16 <_strtod_l+0x176>
 800db8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db8e:	1c5a      	adds	r2, r3, #1
 800db90:	9215      	str	r2, [sp, #84]	; 0x54
 800db92:	785a      	ldrb	r2, [r3, #1]
 800db94:	3001      	adds	r0, #1
 800db96:	2a30      	cmp	r2, #48	; 0x30
 800db98:	d0f8      	beq.n	800db8c <_strtod_l+0x1ec>
 800db9a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800db9e:	2b08      	cmp	r3, #8
 800dba0:	f200 84c1 	bhi.w	800e526 <_strtod_l+0xb86>
 800dba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dba6:	9005      	str	r0, [sp, #20]
 800dba8:	2000      	movs	r0, #0
 800dbaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbac:	4606      	mov	r6, r0
 800dbae:	3a30      	subs	r2, #48	; 0x30
 800dbb0:	f100 0301 	add.w	r3, r0, #1
 800dbb4:	d014      	beq.n	800dbe0 <_strtod_l+0x240>
 800dbb6:	9905      	ldr	r1, [sp, #20]
 800dbb8:	4419      	add	r1, r3
 800dbba:	9105      	str	r1, [sp, #20]
 800dbbc:	4633      	mov	r3, r6
 800dbbe:	eb00 0c06 	add.w	ip, r0, r6
 800dbc2:	210a      	movs	r1, #10
 800dbc4:	4563      	cmp	r3, ip
 800dbc6:	d113      	bne.n	800dbf0 <_strtod_l+0x250>
 800dbc8:	1833      	adds	r3, r6, r0
 800dbca:	2b08      	cmp	r3, #8
 800dbcc:	f106 0601 	add.w	r6, r6, #1
 800dbd0:	4406      	add	r6, r0
 800dbd2:	dc1a      	bgt.n	800dc0a <_strtod_l+0x26a>
 800dbd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbd6:	230a      	movs	r3, #10
 800dbd8:	fb03 2301 	mla	r3, r3, r1, r2
 800dbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbde:	2300      	movs	r3, #0
 800dbe0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dbe2:	1c51      	adds	r1, r2, #1
 800dbe4:	9115      	str	r1, [sp, #84]	; 0x54
 800dbe6:	7852      	ldrb	r2, [r2, #1]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	e7c9      	b.n	800db80 <_strtod_l+0x1e0>
 800dbec:	4658      	mov	r0, fp
 800dbee:	e7d2      	b.n	800db96 <_strtod_l+0x1f6>
 800dbf0:	2b08      	cmp	r3, #8
 800dbf2:	f103 0301 	add.w	r3, r3, #1
 800dbf6:	dc03      	bgt.n	800dc00 <_strtod_l+0x260>
 800dbf8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dbfa:	434f      	muls	r7, r1
 800dbfc:	9709      	str	r7, [sp, #36]	; 0x24
 800dbfe:	e7e1      	b.n	800dbc4 <_strtod_l+0x224>
 800dc00:	2b10      	cmp	r3, #16
 800dc02:	bfd8      	it	le
 800dc04:	fb01 fa0a 	mulle.w	sl, r1, sl
 800dc08:	e7dc      	b.n	800dbc4 <_strtod_l+0x224>
 800dc0a:	2e10      	cmp	r6, #16
 800dc0c:	bfdc      	itt	le
 800dc0e:	230a      	movle	r3, #10
 800dc10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800dc14:	e7e3      	b.n	800dbde <_strtod_l+0x23e>
 800dc16:	2300      	movs	r3, #0
 800dc18:	9305      	str	r3, [sp, #20]
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e780      	b.n	800db20 <_strtod_l+0x180>
 800dc1e:	f04f 0c00 	mov.w	ip, #0
 800dc22:	1caa      	adds	r2, r5, #2
 800dc24:	9215      	str	r2, [sp, #84]	; 0x54
 800dc26:	78aa      	ldrb	r2, [r5, #2]
 800dc28:	e788      	b.n	800db3c <_strtod_l+0x19c>
 800dc2a:	f04f 0c01 	mov.w	ip, #1
 800dc2e:	e7f8      	b.n	800dc22 <_strtod_l+0x282>
 800dc30:	0800fc38 	.word	0x0800fc38
 800dc34:	0800fc34 	.word	0x0800fc34
 800dc38:	7ff00000 	.word	0x7ff00000
 800dc3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dc3e:	1c51      	adds	r1, r2, #1
 800dc40:	9115      	str	r1, [sp, #84]	; 0x54
 800dc42:	7852      	ldrb	r2, [r2, #1]
 800dc44:	2a30      	cmp	r2, #48	; 0x30
 800dc46:	d0f9      	beq.n	800dc3c <_strtod_l+0x29c>
 800dc48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dc4c:	2908      	cmp	r1, #8
 800dc4e:	f63f af7a 	bhi.w	800db46 <_strtod_l+0x1a6>
 800dc52:	3a30      	subs	r2, #48	; 0x30
 800dc54:	9208      	str	r2, [sp, #32]
 800dc56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dc58:	920c      	str	r2, [sp, #48]	; 0x30
 800dc5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dc5c:	1c57      	adds	r7, r2, #1
 800dc5e:	9715      	str	r7, [sp, #84]	; 0x54
 800dc60:	7852      	ldrb	r2, [r2, #1]
 800dc62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dc66:	f1be 0f09 	cmp.w	lr, #9
 800dc6a:	d938      	bls.n	800dcde <_strtod_l+0x33e>
 800dc6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dc6e:	1a7f      	subs	r7, r7, r1
 800dc70:	2f08      	cmp	r7, #8
 800dc72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dc76:	dc03      	bgt.n	800dc80 <_strtod_l+0x2e0>
 800dc78:	9908      	ldr	r1, [sp, #32]
 800dc7a:	428f      	cmp	r7, r1
 800dc7c:	bfa8      	it	ge
 800dc7e:	460f      	movge	r7, r1
 800dc80:	f1bc 0f00 	cmp.w	ip, #0
 800dc84:	d000      	beq.n	800dc88 <_strtod_l+0x2e8>
 800dc86:	427f      	negs	r7, r7
 800dc88:	2e00      	cmp	r6, #0
 800dc8a:	d14f      	bne.n	800dd2c <_strtod_l+0x38c>
 800dc8c:	9904      	ldr	r1, [sp, #16]
 800dc8e:	4301      	orrs	r1, r0
 800dc90:	f47f aec1 	bne.w	800da16 <_strtod_l+0x76>
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f47f aedb 	bne.w	800da50 <_strtod_l+0xb0>
 800dc9a:	2a69      	cmp	r2, #105	; 0x69
 800dc9c:	d029      	beq.n	800dcf2 <_strtod_l+0x352>
 800dc9e:	dc26      	bgt.n	800dcee <_strtod_l+0x34e>
 800dca0:	2a49      	cmp	r2, #73	; 0x49
 800dca2:	d026      	beq.n	800dcf2 <_strtod_l+0x352>
 800dca4:	2a4e      	cmp	r2, #78	; 0x4e
 800dca6:	f47f aed3 	bne.w	800da50 <_strtod_l+0xb0>
 800dcaa:	499b      	ldr	r1, [pc, #620]	; (800df18 <_strtod_l+0x578>)
 800dcac:	a815      	add	r0, sp, #84	; 0x54
 800dcae:	f001 fbd9 	bl	800f464 <__match>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f43f aecc 	beq.w	800da50 <_strtod_l+0xb0>
 800dcb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b28      	cmp	r3, #40	; 0x28
 800dcbe:	d12f      	bne.n	800dd20 <_strtod_l+0x380>
 800dcc0:	4996      	ldr	r1, [pc, #600]	; (800df1c <_strtod_l+0x57c>)
 800dcc2:	aa18      	add	r2, sp, #96	; 0x60
 800dcc4:	a815      	add	r0, sp, #84	; 0x54
 800dcc6:	f001 fbe1 	bl	800f48c <__hexnan>
 800dcca:	2805      	cmp	r0, #5
 800dccc:	d128      	bne.n	800dd20 <_strtod_l+0x380>
 800dcce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dcd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dcd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dcdc:	e69b      	b.n	800da16 <_strtod_l+0x76>
 800dcde:	9f08      	ldr	r7, [sp, #32]
 800dce0:	210a      	movs	r1, #10
 800dce2:	fb01 2107 	mla	r1, r1, r7, r2
 800dce6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dcea:	9208      	str	r2, [sp, #32]
 800dcec:	e7b5      	b.n	800dc5a <_strtod_l+0x2ba>
 800dcee:	2a6e      	cmp	r2, #110	; 0x6e
 800dcf0:	e7d9      	b.n	800dca6 <_strtod_l+0x306>
 800dcf2:	498b      	ldr	r1, [pc, #556]	; (800df20 <_strtod_l+0x580>)
 800dcf4:	a815      	add	r0, sp, #84	; 0x54
 800dcf6:	f001 fbb5 	bl	800f464 <__match>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	f43f aea8 	beq.w	800da50 <_strtod_l+0xb0>
 800dd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd02:	4988      	ldr	r1, [pc, #544]	; (800df24 <_strtod_l+0x584>)
 800dd04:	3b01      	subs	r3, #1
 800dd06:	a815      	add	r0, sp, #84	; 0x54
 800dd08:	9315      	str	r3, [sp, #84]	; 0x54
 800dd0a:	f001 fbab 	bl	800f464 <__match>
 800dd0e:	b910      	cbnz	r0, 800dd16 <_strtod_l+0x376>
 800dd10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd12:	3301      	adds	r3, #1
 800dd14:	9315      	str	r3, [sp, #84]	; 0x54
 800dd16:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800df34 <_strtod_l+0x594>
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	e67a      	b.n	800da16 <_strtod_l+0x76>
 800dd20:	4881      	ldr	r0, [pc, #516]	; (800df28 <_strtod_l+0x588>)
 800dd22:	f001 f8d9 	bl	800eed8 <nan>
 800dd26:	ec59 8b10 	vmov	r8, r9, d0
 800dd2a:	e674      	b.n	800da16 <_strtod_l+0x76>
 800dd2c:	9b05      	ldr	r3, [sp, #20]
 800dd2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd30:	1afb      	subs	r3, r7, r3
 800dd32:	f1bb 0f00 	cmp.w	fp, #0
 800dd36:	bf08      	it	eq
 800dd38:	46b3      	moveq	fp, r6
 800dd3a:	2e10      	cmp	r6, #16
 800dd3c:	9308      	str	r3, [sp, #32]
 800dd3e:	4635      	mov	r5, r6
 800dd40:	bfa8      	it	ge
 800dd42:	2510      	movge	r5, #16
 800dd44:	f7f2 fbde 	bl	8000504 <__aeabi_ui2d>
 800dd48:	2e09      	cmp	r6, #9
 800dd4a:	4680      	mov	r8, r0
 800dd4c:	4689      	mov	r9, r1
 800dd4e:	dd13      	ble.n	800dd78 <_strtod_l+0x3d8>
 800dd50:	4b76      	ldr	r3, [pc, #472]	; (800df2c <_strtod_l+0x58c>)
 800dd52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dd56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dd5a:	f7f2 fc4d 	bl	80005f8 <__aeabi_dmul>
 800dd5e:	4680      	mov	r8, r0
 800dd60:	4650      	mov	r0, sl
 800dd62:	4689      	mov	r9, r1
 800dd64:	f7f2 fbce 	bl	8000504 <__aeabi_ui2d>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4640      	mov	r0, r8
 800dd6e:	4649      	mov	r1, r9
 800dd70:	f7f2 fa8c 	bl	800028c <__adddf3>
 800dd74:	4680      	mov	r8, r0
 800dd76:	4689      	mov	r9, r1
 800dd78:	2e0f      	cmp	r6, #15
 800dd7a:	dc38      	bgt.n	800ddee <_strtod_l+0x44e>
 800dd7c:	9b08      	ldr	r3, [sp, #32]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f43f ae49 	beq.w	800da16 <_strtod_l+0x76>
 800dd84:	dd24      	ble.n	800ddd0 <_strtod_l+0x430>
 800dd86:	2b16      	cmp	r3, #22
 800dd88:	dc0b      	bgt.n	800dda2 <_strtod_l+0x402>
 800dd8a:	4968      	ldr	r1, [pc, #416]	; (800df2c <_strtod_l+0x58c>)
 800dd8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd94:	4642      	mov	r2, r8
 800dd96:	464b      	mov	r3, r9
 800dd98:	f7f2 fc2e 	bl	80005f8 <__aeabi_dmul>
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	4689      	mov	r9, r1
 800dda0:	e639      	b.n	800da16 <_strtod_l+0x76>
 800dda2:	9a08      	ldr	r2, [sp, #32]
 800dda4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	db20      	blt.n	800ddee <_strtod_l+0x44e>
 800ddac:	4c5f      	ldr	r4, [pc, #380]	; (800df2c <_strtod_l+0x58c>)
 800ddae:	f1c6 060f 	rsb	r6, r6, #15
 800ddb2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ddb6:	4642      	mov	r2, r8
 800ddb8:	464b      	mov	r3, r9
 800ddba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddbe:	f7f2 fc1b 	bl	80005f8 <__aeabi_dmul>
 800ddc2:	9b08      	ldr	r3, [sp, #32]
 800ddc4:	1b9e      	subs	r6, r3, r6
 800ddc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ddca:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ddce:	e7e3      	b.n	800dd98 <_strtod_l+0x3f8>
 800ddd0:	9b08      	ldr	r3, [sp, #32]
 800ddd2:	3316      	adds	r3, #22
 800ddd4:	db0b      	blt.n	800ddee <_strtod_l+0x44e>
 800ddd6:	9b05      	ldr	r3, [sp, #20]
 800ddd8:	1bdf      	subs	r7, r3, r7
 800ddda:	4b54      	ldr	r3, [pc, #336]	; (800df2c <_strtod_l+0x58c>)
 800dddc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dde0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dde4:	4640      	mov	r0, r8
 800dde6:	4649      	mov	r1, r9
 800dde8:	f7f2 fd30 	bl	800084c <__aeabi_ddiv>
 800ddec:	e7d6      	b.n	800dd9c <_strtod_l+0x3fc>
 800ddee:	9b08      	ldr	r3, [sp, #32]
 800ddf0:	1b75      	subs	r5, r6, r5
 800ddf2:	441d      	add	r5, r3
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	dd70      	ble.n	800deda <_strtod_l+0x53a>
 800ddf8:	f015 030f 	ands.w	r3, r5, #15
 800ddfc:	d00a      	beq.n	800de14 <_strtod_l+0x474>
 800ddfe:	494b      	ldr	r1, [pc, #300]	; (800df2c <_strtod_l+0x58c>)
 800de00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de04:	4642      	mov	r2, r8
 800de06:	464b      	mov	r3, r9
 800de08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de0c:	f7f2 fbf4 	bl	80005f8 <__aeabi_dmul>
 800de10:	4680      	mov	r8, r0
 800de12:	4689      	mov	r9, r1
 800de14:	f035 050f 	bics.w	r5, r5, #15
 800de18:	d04d      	beq.n	800deb6 <_strtod_l+0x516>
 800de1a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800de1e:	dd22      	ble.n	800de66 <_strtod_l+0x4c6>
 800de20:	2500      	movs	r5, #0
 800de22:	46ab      	mov	fp, r5
 800de24:	9509      	str	r5, [sp, #36]	; 0x24
 800de26:	9505      	str	r5, [sp, #20]
 800de28:	2322      	movs	r3, #34	; 0x22
 800de2a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800df34 <_strtod_l+0x594>
 800de2e:	6023      	str	r3, [r4, #0]
 800de30:	f04f 0800 	mov.w	r8, #0
 800de34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de36:	2b00      	cmp	r3, #0
 800de38:	f43f aded 	beq.w	800da16 <_strtod_l+0x76>
 800de3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800de3e:	4620      	mov	r0, r4
 800de40:	f7ff f924 	bl	800d08c <_Bfree>
 800de44:	9905      	ldr	r1, [sp, #20]
 800de46:	4620      	mov	r0, r4
 800de48:	f7ff f920 	bl	800d08c <_Bfree>
 800de4c:	4659      	mov	r1, fp
 800de4e:	4620      	mov	r0, r4
 800de50:	f7ff f91c 	bl	800d08c <_Bfree>
 800de54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de56:	4620      	mov	r0, r4
 800de58:	f7ff f918 	bl	800d08c <_Bfree>
 800de5c:	4629      	mov	r1, r5
 800de5e:	4620      	mov	r0, r4
 800de60:	f7ff f914 	bl	800d08c <_Bfree>
 800de64:	e5d7      	b.n	800da16 <_strtod_l+0x76>
 800de66:	4b32      	ldr	r3, [pc, #200]	; (800df30 <_strtod_l+0x590>)
 800de68:	9304      	str	r3, [sp, #16]
 800de6a:	2300      	movs	r3, #0
 800de6c:	112d      	asrs	r5, r5, #4
 800de6e:	4640      	mov	r0, r8
 800de70:	4649      	mov	r1, r9
 800de72:	469a      	mov	sl, r3
 800de74:	2d01      	cmp	r5, #1
 800de76:	dc21      	bgt.n	800debc <_strtod_l+0x51c>
 800de78:	b10b      	cbz	r3, 800de7e <_strtod_l+0x4de>
 800de7a:	4680      	mov	r8, r0
 800de7c:	4689      	mov	r9, r1
 800de7e:	492c      	ldr	r1, [pc, #176]	; (800df30 <_strtod_l+0x590>)
 800de80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800de84:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800de88:	4642      	mov	r2, r8
 800de8a:	464b      	mov	r3, r9
 800de8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de90:	f7f2 fbb2 	bl	80005f8 <__aeabi_dmul>
 800de94:	4b27      	ldr	r3, [pc, #156]	; (800df34 <_strtod_l+0x594>)
 800de96:	460a      	mov	r2, r1
 800de98:	400b      	ands	r3, r1
 800de9a:	4927      	ldr	r1, [pc, #156]	; (800df38 <_strtod_l+0x598>)
 800de9c:	428b      	cmp	r3, r1
 800de9e:	4680      	mov	r8, r0
 800dea0:	d8be      	bhi.n	800de20 <_strtod_l+0x480>
 800dea2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dea6:	428b      	cmp	r3, r1
 800dea8:	bf86      	itte	hi
 800deaa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800df3c <_strtod_l+0x59c>
 800deae:	f04f 38ff 	movhi.w	r8, #4294967295
 800deb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800deb6:	2300      	movs	r3, #0
 800deb8:	9304      	str	r3, [sp, #16]
 800deba:	e07b      	b.n	800dfb4 <_strtod_l+0x614>
 800debc:	07ea      	lsls	r2, r5, #31
 800debe:	d505      	bpl.n	800decc <_strtod_l+0x52c>
 800dec0:	9b04      	ldr	r3, [sp, #16]
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	f7f2 fb97 	bl	80005f8 <__aeabi_dmul>
 800deca:	2301      	movs	r3, #1
 800decc:	9a04      	ldr	r2, [sp, #16]
 800dece:	3208      	adds	r2, #8
 800ded0:	f10a 0a01 	add.w	sl, sl, #1
 800ded4:	106d      	asrs	r5, r5, #1
 800ded6:	9204      	str	r2, [sp, #16]
 800ded8:	e7cc      	b.n	800de74 <_strtod_l+0x4d4>
 800deda:	d0ec      	beq.n	800deb6 <_strtod_l+0x516>
 800dedc:	426d      	negs	r5, r5
 800dede:	f015 020f 	ands.w	r2, r5, #15
 800dee2:	d00a      	beq.n	800defa <_strtod_l+0x55a>
 800dee4:	4b11      	ldr	r3, [pc, #68]	; (800df2c <_strtod_l+0x58c>)
 800dee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800deea:	4640      	mov	r0, r8
 800deec:	4649      	mov	r1, r9
 800deee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def2:	f7f2 fcab 	bl	800084c <__aeabi_ddiv>
 800def6:	4680      	mov	r8, r0
 800def8:	4689      	mov	r9, r1
 800defa:	112d      	asrs	r5, r5, #4
 800defc:	d0db      	beq.n	800deb6 <_strtod_l+0x516>
 800defe:	2d1f      	cmp	r5, #31
 800df00:	dd1e      	ble.n	800df40 <_strtod_l+0x5a0>
 800df02:	2500      	movs	r5, #0
 800df04:	46ab      	mov	fp, r5
 800df06:	9509      	str	r5, [sp, #36]	; 0x24
 800df08:	9505      	str	r5, [sp, #20]
 800df0a:	2322      	movs	r3, #34	; 0x22
 800df0c:	f04f 0800 	mov.w	r8, #0
 800df10:	f04f 0900 	mov.w	r9, #0
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	e78d      	b.n	800de34 <_strtod_l+0x494>
 800df18:	0800fa21 	.word	0x0800fa21
 800df1c:	0800fc4c 	.word	0x0800fc4c
 800df20:	0800fa19 	.word	0x0800fa19
 800df24:	0800fa50 	.word	0x0800fa50
 800df28:	0800fa13 	.word	0x0800fa13
 800df2c:	0800fb60 	.word	0x0800fb60
 800df30:	0800fb38 	.word	0x0800fb38
 800df34:	7ff00000 	.word	0x7ff00000
 800df38:	7ca00000 	.word	0x7ca00000
 800df3c:	7fefffff 	.word	0x7fefffff
 800df40:	f015 0310 	ands.w	r3, r5, #16
 800df44:	bf18      	it	ne
 800df46:	236a      	movne	r3, #106	; 0x6a
 800df48:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e2ec <_strtod_l+0x94c>
 800df4c:	9304      	str	r3, [sp, #16]
 800df4e:	4640      	mov	r0, r8
 800df50:	4649      	mov	r1, r9
 800df52:	2300      	movs	r3, #0
 800df54:	07ea      	lsls	r2, r5, #31
 800df56:	d504      	bpl.n	800df62 <_strtod_l+0x5c2>
 800df58:	e9da 2300 	ldrd	r2, r3, [sl]
 800df5c:	f7f2 fb4c 	bl	80005f8 <__aeabi_dmul>
 800df60:	2301      	movs	r3, #1
 800df62:	106d      	asrs	r5, r5, #1
 800df64:	f10a 0a08 	add.w	sl, sl, #8
 800df68:	d1f4      	bne.n	800df54 <_strtod_l+0x5b4>
 800df6a:	b10b      	cbz	r3, 800df70 <_strtod_l+0x5d0>
 800df6c:	4680      	mov	r8, r0
 800df6e:	4689      	mov	r9, r1
 800df70:	9b04      	ldr	r3, [sp, #16]
 800df72:	b1bb      	cbz	r3, 800dfa4 <_strtod_l+0x604>
 800df74:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800df78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	4649      	mov	r1, r9
 800df80:	dd10      	ble.n	800dfa4 <_strtod_l+0x604>
 800df82:	2b1f      	cmp	r3, #31
 800df84:	f340 811e 	ble.w	800e1c4 <_strtod_l+0x824>
 800df88:	2b34      	cmp	r3, #52	; 0x34
 800df8a:	bfde      	ittt	le
 800df8c:	f04f 33ff 	movle.w	r3, #4294967295
 800df90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800df94:	4093      	lslle	r3, r2
 800df96:	f04f 0800 	mov.w	r8, #0
 800df9a:	bfcc      	ite	gt
 800df9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dfa0:	ea03 0901 	andle.w	r9, r3, r1
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	4649      	mov	r1, r9
 800dfac:	f7f2 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d1a6      	bne.n	800df02 <_strtod_l+0x562>
 800dfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfba:	4633      	mov	r3, r6
 800dfbc:	465a      	mov	r2, fp
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f7ff f8cc 	bl	800d15c <__s2b>
 800dfc4:	9009      	str	r0, [sp, #36]	; 0x24
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	f43f af2a 	beq.w	800de20 <_strtod_l+0x480>
 800dfcc:	9a08      	ldr	r2, [sp, #32]
 800dfce:	9b05      	ldr	r3, [sp, #20]
 800dfd0:	2a00      	cmp	r2, #0
 800dfd2:	eba3 0307 	sub.w	r3, r3, r7
 800dfd6:	bfa8      	it	ge
 800dfd8:	2300      	movge	r3, #0
 800dfda:	930c      	str	r3, [sp, #48]	; 0x30
 800dfdc:	2500      	movs	r5, #0
 800dfde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dfe2:	9312      	str	r3, [sp, #72]	; 0x48
 800dfe4:	46ab      	mov	fp, r5
 800dfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe8:	4620      	mov	r0, r4
 800dfea:	6859      	ldr	r1, [r3, #4]
 800dfec:	f7ff f80e 	bl	800d00c <_Balloc>
 800dff0:	9005      	str	r0, [sp, #20]
 800dff2:	2800      	cmp	r0, #0
 800dff4:	f43f af18 	beq.w	800de28 <_strtod_l+0x488>
 800dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffa:	691a      	ldr	r2, [r3, #16]
 800dffc:	3202      	adds	r2, #2
 800dffe:	f103 010c 	add.w	r1, r3, #12
 800e002:	0092      	lsls	r2, r2, #2
 800e004:	300c      	adds	r0, #12
 800e006:	f7fe f86a 	bl	800c0de <memcpy>
 800e00a:	ec49 8b10 	vmov	d0, r8, r9
 800e00e:	aa18      	add	r2, sp, #96	; 0x60
 800e010:	a917      	add	r1, sp, #92	; 0x5c
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff fbd6 	bl	800d7c4 <__d2b>
 800e018:	ec49 8b18 	vmov	d8, r8, r9
 800e01c:	9016      	str	r0, [sp, #88]	; 0x58
 800e01e:	2800      	cmp	r0, #0
 800e020:	f43f af02 	beq.w	800de28 <_strtod_l+0x488>
 800e024:	2101      	movs	r1, #1
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff f930 	bl	800d28c <__i2b>
 800e02c:	4683      	mov	fp, r0
 800e02e:	2800      	cmp	r0, #0
 800e030:	f43f aefa 	beq.w	800de28 <_strtod_l+0x488>
 800e034:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e036:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e038:	2e00      	cmp	r6, #0
 800e03a:	bfab      	itete	ge
 800e03c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e03e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e040:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e042:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e046:	bfac      	ite	ge
 800e048:	eb06 0a03 	addge.w	sl, r6, r3
 800e04c:	1b9f      	sublt	r7, r3, r6
 800e04e:	9b04      	ldr	r3, [sp, #16]
 800e050:	1af6      	subs	r6, r6, r3
 800e052:	4416      	add	r6, r2
 800e054:	4ba0      	ldr	r3, [pc, #640]	; (800e2d8 <_strtod_l+0x938>)
 800e056:	3e01      	subs	r6, #1
 800e058:	429e      	cmp	r6, r3
 800e05a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e05e:	f280 80c4 	bge.w	800e1ea <_strtod_l+0x84a>
 800e062:	1b9b      	subs	r3, r3, r6
 800e064:	2b1f      	cmp	r3, #31
 800e066:	eba2 0203 	sub.w	r2, r2, r3
 800e06a:	f04f 0101 	mov.w	r1, #1
 800e06e:	f300 80b0 	bgt.w	800e1d2 <_strtod_l+0x832>
 800e072:	fa01 f303 	lsl.w	r3, r1, r3
 800e076:	930e      	str	r3, [sp, #56]	; 0x38
 800e078:	2300      	movs	r3, #0
 800e07a:	930d      	str	r3, [sp, #52]	; 0x34
 800e07c:	eb0a 0602 	add.w	r6, sl, r2
 800e080:	9b04      	ldr	r3, [sp, #16]
 800e082:	45b2      	cmp	sl, r6
 800e084:	4417      	add	r7, r2
 800e086:	441f      	add	r7, r3
 800e088:	4653      	mov	r3, sl
 800e08a:	bfa8      	it	ge
 800e08c:	4633      	movge	r3, r6
 800e08e:	42bb      	cmp	r3, r7
 800e090:	bfa8      	it	ge
 800e092:	463b      	movge	r3, r7
 800e094:	2b00      	cmp	r3, #0
 800e096:	bfc2      	ittt	gt
 800e098:	1af6      	subgt	r6, r6, r3
 800e09a:	1aff      	subgt	r7, r7, r3
 800e09c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e0a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	dd17      	ble.n	800e0d6 <_strtod_l+0x736>
 800e0a6:	4659      	mov	r1, fp
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f7ff f9ae 	bl	800d40c <__pow5mult>
 800e0b0:	4683      	mov	fp, r0
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f43f aeb8 	beq.w	800de28 <_strtod_l+0x488>
 800e0b8:	4601      	mov	r1, r0
 800e0ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f7ff f8fb 	bl	800d2b8 <__multiply>
 800e0c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	f43f aeaf 	beq.w	800de28 <_strtod_l+0x488>
 800e0ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f7fe ffdd 	bl	800d08c <_Bfree>
 800e0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0d4:	9316      	str	r3, [sp, #88]	; 0x58
 800e0d6:	2e00      	cmp	r6, #0
 800e0d8:	f300 808c 	bgt.w	800e1f4 <_strtod_l+0x854>
 800e0dc:	9b08      	ldr	r3, [sp, #32]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	dd08      	ble.n	800e0f4 <_strtod_l+0x754>
 800e0e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0e4:	9905      	ldr	r1, [sp, #20]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f7ff f990 	bl	800d40c <__pow5mult>
 800e0ec:	9005      	str	r0, [sp, #20]
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	f43f ae9a 	beq.w	800de28 <_strtod_l+0x488>
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	dd08      	ble.n	800e10a <_strtod_l+0x76a>
 800e0f8:	9905      	ldr	r1, [sp, #20]
 800e0fa:	463a      	mov	r2, r7
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f7ff f9df 	bl	800d4c0 <__lshift>
 800e102:	9005      	str	r0, [sp, #20]
 800e104:	2800      	cmp	r0, #0
 800e106:	f43f ae8f 	beq.w	800de28 <_strtod_l+0x488>
 800e10a:	f1ba 0f00 	cmp.w	sl, #0
 800e10e:	dd08      	ble.n	800e122 <_strtod_l+0x782>
 800e110:	4659      	mov	r1, fp
 800e112:	4652      	mov	r2, sl
 800e114:	4620      	mov	r0, r4
 800e116:	f7ff f9d3 	bl	800d4c0 <__lshift>
 800e11a:	4683      	mov	fp, r0
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f43f ae83 	beq.w	800de28 <_strtod_l+0x488>
 800e122:	9a05      	ldr	r2, [sp, #20]
 800e124:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fa52 	bl	800d5d0 <__mdiff>
 800e12c:	4605      	mov	r5, r0
 800e12e:	2800      	cmp	r0, #0
 800e130:	f43f ae7a 	beq.w	800de28 <_strtod_l+0x488>
 800e134:	68c3      	ldr	r3, [r0, #12]
 800e136:	930b      	str	r3, [sp, #44]	; 0x2c
 800e138:	2300      	movs	r3, #0
 800e13a:	60c3      	str	r3, [r0, #12]
 800e13c:	4659      	mov	r1, fp
 800e13e:	f7ff fa2b 	bl	800d598 <__mcmp>
 800e142:	2800      	cmp	r0, #0
 800e144:	da60      	bge.n	800e208 <_strtod_l+0x868>
 800e146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e148:	ea53 0308 	orrs.w	r3, r3, r8
 800e14c:	f040 8084 	bne.w	800e258 <_strtod_l+0x8b8>
 800e150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e154:	2b00      	cmp	r3, #0
 800e156:	d17f      	bne.n	800e258 <_strtod_l+0x8b8>
 800e158:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e15c:	0d1b      	lsrs	r3, r3, #20
 800e15e:	051b      	lsls	r3, r3, #20
 800e160:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e164:	d978      	bls.n	800e258 <_strtod_l+0x8b8>
 800e166:	696b      	ldr	r3, [r5, #20]
 800e168:	b913      	cbnz	r3, 800e170 <_strtod_l+0x7d0>
 800e16a:	692b      	ldr	r3, [r5, #16]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	dd73      	ble.n	800e258 <_strtod_l+0x8b8>
 800e170:	4629      	mov	r1, r5
 800e172:	2201      	movs	r2, #1
 800e174:	4620      	mov	r0, r4
 800e176:	f7ff f9a3 	bl	800d4c0 <__lshift>
 800e17a:	4659      	mov	r1, fp
 800e17c:	4605      	mov	r5, r0
 800e17e:	f7ff fa0b 	bl	800d598 <__mcmp>
 800e182:	2800      	cmp	r0, #0
 800e184:	dd68      	ble.n	800e258 <_strtod_l+0x8b8>
 800e186:	9904      	ldr	r1, [sp, #16]
 800e188:	4a54      	ldr	r2, [pc, #336]	; (800e2dc <_strtod_l+0x93c>)
 800e18a:	464b      	mov	r3, r9
 800e18c:	2900      	cmp	r1, #0
 800e18e:	f000 8084 	beq.w	800e29a <_strtod_l+0x8fa>
 800e192:	ea02 0109 	and.w	r1, r2, r9
 800e196:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e19a:	dc7e      	bgt.n	800e29a <_strtod_l+0x8fa>
 800e19c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e1a0:	f77f aeb3 	ble.w	800df0a <_strtod_l+0x56a>
 800e1a4:	4b4e      	ldr	r3, [pc, #312]	; (800e2e0 <_strtod_l+0x940>)
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f7f2 fa24 	bl	80005f8 <__aeabi_dmul>
 800e1b0:	4b4a      	ldr	r3, [pc, #296]	; (800e2dc <_strtod_l+0x93c>)
 800e1b2:	400b      	ands	r3, r1
 800e1b4:	4680      	mov	r8, r0
 800e1b6:	4689      	mov	r9, r1
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f47f ae3f 	bne.w	800de3c <_strtod_l+0x49c>
 800e1be:	2322      	movs	r3, #34	; 0x22
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	e63b      	b.n	800de3c <_strtod_l+0x49c>
 800e1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1cc:	ea03 0808 	and.w	r8, r3, r8
 800e1d0:	e6e8      	b.n	800dfa4 <_strtod_l+0x604>
 800e1d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e1d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e1da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e1de:	36e2      	adds	r6, #226	; 0xe2
 800e1e0:	fa01 f306 	lsl.w	r3, r1, r6
 800e1e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e1e8:	e748      	b.n	800e07c <_strtod_l+0x6dc>
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e1f2:	e743      	b.n	800e07c <_strtod_l+0x6dc>
 800e1f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1f6:	4632      	mov	r2, r6
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f7ff f961 	bl	800d4c0 <__lshift>
 800e1fe:	9016      	str	r0, [sp, #88]	; 0x58
 800e200:	2800      	cmp	r0, #0
 800e202:	f47f af6b 	bne.w	800e0dc <_strtod_l+0x73c>
 800e206:	e60f      	b.n	800de28 <_strtod_l+0x488>
 800e208:	46ca      	mov	sl, r9
 800e20a:	d171      	bne.n	800e2f0 <_strtod_l+0x950>
 800e20c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e20e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e212:	b352      	cbz	r2, 800e26a <_strtod_l+0x8ca>
 800e214:	4a33      	ldr	r2, [pc, #204]	; (800e2e4 <_strtod_l+0x944>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d12a      	bne.n	800e270 <_strtod_l+0x8d0>
 800e21a:	9b04      	ldr	r3, [sp, #16]
 800e21c:	4641      	mov	r1, r8
 800e21e:	b1fb      	cbz	r3, 800e260 <_strtod_l+0x8c0>
 800e220:	4b2e      	ldr	r3, [pc, #184]	; (800e2dc <_strtod_l+0x93c>)
 800e222:	ea09 0303 	and.w	r3, r9, r3
 800e226:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e22a:	f04f 32ff 	mov.w	r2, #4294967295
 800e22e:	d81a      	bhi.n	800e266 <_strtod_l+0x8c6>
 800e230:	0d1b      	lsrs	r3, r3, #20
 800e232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e236:	fa02 f303 	lsl.w	r3, r2, r3
 800e23a:	4299      	cmp	r1, r3
 800e23c:	d118      	bne.n	800e270 <_strtod_l+0x8d0>
 800e23e:	4b2a      	ldr	r3, [pc, #168]	; (800e2e8 <_strtod_l+0x948>)
 800e240:	459a      	cmp	sl, r3
 800e242:	d102      	bne.n	800e24a <_strtod_l+0x8aa>
 800e244:	3101      	adds	r1, #1
 800e246:	f43f adef 	beq.w	800de28 <_strtod_l+0x488>
 800e24a:	4b24      	ldr	r3, [pc, #144]	; (800e2dc <_strtod_l+0x93c>)
 800e24c:	ea0a 0303 	and.w	r3, sl, r3
 800e250:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e254:	f04f 0800 	mov.w	r8, #0
 800e258:	9b04      	ldr	r3, [sp, #16]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1a2      	bne.n	800e1a4 <_strtod_l+0x804>
 800e25e:	e5ed      	b.n	800de3c <_strtod_l+0x49c>
 800e260:	f04f 33ff 	mov.w	r3, #4294967295
 800e264:	e7e9      	b.n	800e23a <_strtod_l+0x89a>
 800e266:	4613      	mov	r3, r2
 800e268:	e7e7      	b.n	800e23a <_strtod_l+0x89a>
 800e26a:	ea53 0308 	orrs.w	r3, r3, r8
 800e26e:	d08a      	beq.n	800e186 <_strtod_l+0x7e6>
 800e270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e272:	b1e3      	cbz	r3, 800e2ae <_strtod_l+0x90e>
 800e274:	ea13 0f0a 	tst.w	r3, sl
 800e278:	d0ee      	beq.n	800e258 <_strtod_l+0x8b8>
 800e27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e27c:	9a04      	ldr	r2, [sp, #16]
 800e27e:	4640      	mov	r0, r8
 800e280:	4649      	mov	r1, r9
 800e282:	b1c3      	cbz	r3, 800e2b6 <_strtod_l+0x916>
 800e284:	f7ff fb6f 	bl	800d966 <sulp>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	ec51 0b18 	vmov	r0, r1, d8
 800e290:	f7f1 fffc 	bl	800028c <__adddf3>
 800e294:	4680      	mov	r8, r0
 800e296:	4689      	mov	r9, r1
 800e298:	e7de      	b.n	800e258 <_strtod_l+0x8b8>
 800e29a:	4013      	ands	r3, r2
 800e29c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e2a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e2a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e2a8:	f04f 38ff 	mov.w	r8, #4294967295
 800e2ac:	e7d4      	b.n	800e258 <_strtod_l+0x8b8>
 800e2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2b0:	ea13 0f08 	tst.w	r3, r8
 800e2b4:	e7e0      	b.n	800e278 <_strtod_l+0x8d8>
 800e2b6:	f7ff fb56 	bl	800d966 <sulp>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	ec51 0b18 	vmov	r0, r1, d8
 800e2c2:	f7f1 ffe1 	bl	8000288 <__aeabi_dsub>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4680      	mov	r8, r0
 800e2cc:	4689      	mov	r9, r1
 800e2ce:	f7f2 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d0c0      	beq.n	800e258 <_strtod_l+0x8b8>
 800e2d6:	e618      	b.n	800df0a <_strtod_l+0x56a>
 800e2d8:	fffffc02 	.word	0xfffffc02
 800e2dc:	7ff00000 	.word	0x7ff00000
 800e2e0:	39500000 	.word	0x39500000
 800e2e4:	000fffff 	.word	0x000fffff
 800e2e8:	7fefffff 	.word	0x7fefffff
 800e2ec:	0800fc60 	.word	0x0800fc60
 800e2f0:	4659      	mov	r1, fp
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f7ff fac0 	bl	800d878 <__ratio>
 800e2f8:	ec57 6b10 	vmov	r6, r7, d0
 800e2fc:	ee10 0a10 	vmov	r0, s0
 800e300:	2200      	movs	r2, #0
 800e302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e306:	4639      	mov	r1, r7
 800e308:	f7f2 fbf2 	bl	8000af0 <__aeabi_dcmple>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d071      	beq.n	800e3f4 <_strtod_l+0xa54>
 800e310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e312:	2b00      	cmp	r3, #0
 800e314:	d17c      	bne.n	800e410 <_strtod_l+0xa70>
 800e316:	f1b8 0f00 	cmp.w	r8, #0
 800e31a:	d15a      	bne.n	800e3d2 <_strtod_l+0xa32>
 800e31c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e320:	2b00      	cmp	r3, #0
 800e322:	d15d      	bne.n	800e3e0 <_strtod_l+0xa40>
 800e324:	4b90      	ldr	r3, [pc, #576]	; (800e568 <_strtod_l+0xbc8>)
 800e326:	2200      	movs	r2, #0
 800e328:	4630      	mov	r0, r6
 800e32a:	4639      	mov	r1, r7
 800e32c:	f7f2 fbd6 	bl	8000adc <__aeabi_dcmplt>
 800e330:	2800      	cmp	r0, #0
 800e332:	d15c      	bne.n	800e3ee <_strtod_l+0xa4e>
 800e334:	4630      	mov	r0, r6
 800e336:	4639      	mov	r1, r7
 800e338:	4b8c      	ldr	r3, [pc, #560]	; (800e56c <_strtod_l+0xbcc>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	f7f2 f95c 	bl	80005f8 <__aeabi_dmul>
 800e340:	4606      	mov	r6, r0
 800e342:	460f      	mov	r7, r1
 800e344:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e348:	9606      	str	r6, [sp, #24]
 800e34a:	9307      	str	r3, [sp, #28]
 800e34c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e350:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e354:	4b86      	ldr	r3, [pc, #536]	; (800e570 <_strtod_l+0xbd0>)
 800e356:	ea0a 0303 	and.w	r3, sl, r3
 800e35a:	930d      	str	r3, [sp, #52]	; 0x34
 800e35c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e35e:	4b85      	ldr	r3, [pc, #532]	; (800e574 <_strtod_l+0xbd4>)
 800e360:	429a      	cmp	r2, r3
 800e362:	f040 8090 	bne.w	800e486 <_strtod_l+0xae6>
 800e366:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e36a:	ec49 8b10 	vmov	d0, r8, r9
 800e36e:	f7ff f9b9 	bl	800d6e4 <__ulp>
 800e372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e376:	ec51 0b10 	vmov	r0, r1, d0
 800e37a:	f7f2 f93d 	bl	80005f8 <__aeabi_dmul>
 800e37e:	4642      	mov	r2, r8
 800e380:	464b      	mov	r3, r9
 800e382:	f7f1 ff83 	bl	800028c <__adddf3>
 800e386:	460b      	mov	r3, r1
 800e388:	4979      	ldr	r1, [pc, #484]	; (800e570 <_strtod_l+0xbd0>)
 800e38a:	4a7b      	ldr	r2, [pc, #492]	; (800e578 <_strtod_l+0xbd8>)
 800e38c:	4019      	ands	r1, r3
 800e38e:	4291      	cmp	r1, r2
 800e390:	4680      	mov	r8, r0
 800e392:	d944      	bls.n	800e41e <_strtod_l+0xa7e>
 800e394:	ee18 2a90 	vmov	r2, s17
 800e398:	4b78      	ldr	r3, [pc, #480]	; (800e57c <_strtod_l+0xbdc>)
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d104      	bne.n	800e3a8 <_strtod_l+0xa08>
 800e39e:	ee18 3a10 	vmov	r3, s16
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	f43f ad40 	beq.w	800de28 <_strtod_l+0x488>
 800e3a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e57c <_strtod_l+0xbdc>
 800e3ac:	f04f 38ff 	mov.w	r8, #4294967295
 800e3b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7fe fe6a 	bl	800d08c <_Bfree>
 800e3b8:	9905      	ldr	r1, [sp, #20]
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f7fe fe66 	bl	800d08c <_Bfree>
 800e3c0:	4659      	mov	r1, fp
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7fe fe62 	bl	800d08c <_Bfree>
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f7fe fe5e 	bl	800d08c <_Bfree>
 800e3d0:	e609      	b.n	800dfe6 <_strtod_l+0x646>
 800e3d2:	f1b8 0f01 	cmp.w	r8, #1
 800e3d6:	d103      	bne.n	800e3e0 <_strtod_l+0xa40>
 800e3d8:	f1b9 0f00 	cmp.w	r9, #0
 800e3dc:	f43f ad95 	beq.w	800df0a <_strtod_l+0x56a>
 800e3e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e538 <_strtod_l+0xb98>
 800e3e4:	4f60      	ldr	r7, [pc, #384]	; (800e568 <_strtod_l+0xbc8>)
 800e3e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3ea:	2600      	movs	r6, #0
 800e3ec:	e7ae      	b.n	800e34c <_strtod_l+0x9ac>
 800e3ee:	4f5f      	ldr	r7, [pc, #380]	; (800e56c <_strtod_l+0xbcc>)
 800e3f0:	2600      	movs	r6, #0
 800e3f2:	e7a7      	b.n	800e344 <_strtod_l+0x9a4>
 800e3f4:	4b5d      	ldr	r3, [pc, #372]	; (800e56c <_strtod_l+0xbcc>)
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	4639      	mov	r1, r7
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f7f2 f8fc 	bl	80005f8 <__aeabi_dmul>
 800e400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e402:	4606      	mov	r6, r0
 800e404:	460f      	mov	r7, r1
 800e406:	2b00      	cmp	r3, #0
 800e408:	d09c      	beq.n	800e344 <_strtod_l+0x9a4>
 800e40a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e40e:	e79d      	b.n	800e34c <_strtod_l+0x9ac>
 800e410:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e540 <_strtod_l+0xba0>
 800e414:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e418:	ec57 6b17 	vmov	r6, r7, d7
 800e41c:	e796      	b.n	800e34c <_strtod_l+0x9ac>
 800e41e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e422:	9b04      	ldr	r3, [sp, #16]
 800e424:	46ca      	mov	sl, r9
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1c2      	bne.n	800e3b0 <_strtod_l+0xa10>
 800e42a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e42e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e430:	0d1b      	lsrs	r3, r3, #20
 800e432:	051b      	lsls	r3, r3, #20
 800e434:	429a      	cmp	r2, r3
 800e436:	d1bb      	bne.n	800e3b0 <_strtod_l+0xa10>
 800e438:	4630      	mov	r0, r6
 800e43a:	4639      	mov	r1, r7
 800e43c:	f7f2 fc3c 	bl	8000cb8 <__aeabi_d2lz>
 800e440:	f7f2 f8ac 	bl	800059c <__aeabi_l2d>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4630      	mov	r0, r6
 800e44a:	4639      	mov	r1, r7
 800e44c:	f7f1 ff1c 	bl	8000288 <__aeabi_dsub>
 800e450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e452:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e456:	ea43 0308 	orr.w	r3, r3, r8
 800e45a:	4313      	orrs	r3, r2
 800e45c:	4606      	mov	r6, r0
 800e45e:	460f      	mov	r7, r1
 800e460:	d054      	beq.n	800e50c <_strtod_l+0xb6c>
 800e462:	a339      	add	r3, pc, #228	; (adr r3, 800e548 <_strtod_l+0xba8>)
 800e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e468:	f7f2 fb38 	bl	8000adc <__aeabi_dcmplt>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	f47f ace5 	bne.w	800de3c <_strtod_l+0x49c>
 800e472:	a337      	add	r3, pc, #220	; (adr r3, 800e550 <_strtod_l+0xbb0>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	4630      	mov	r0, r6
 800e47a:	4639      	mov	r1, r7
 800e47c:	f7f2 fb4c 	bl	8000b18 <__aeabi_dcmpgt>
 800e480:	2800      	cmp	r0, #0
 800e482:	d095      	beq.n	800e3b0 <_strtod_l+0xa10>
 800e484:	e4da      	b.n	800de3c <_strtod_l+0x49c>
 800e486:	9b04      	ldr	r3, [sp, #16]
 800e488:	b333      	cbz	r3, 800e4d8 <_strtod_l+0xb38>
 800e48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e48c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e490:	d822      	bhi.n	800e4d8 <_strtod_l+0xb38>
 800e492:	a331      	add	r3, pc, #196	; (adr r3, 800e558 <_strtod_l+0xbb8>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	4630      	mov	r0, r6
 800e49a:	4639      	mov	r1, r7
 800e49c:	f7f2 fb28 	bl	8000af0 <__aeabi_dcmple>
 800e4a0:	b1a0      	cbz	r0, 800e4cc <_strtod_l+0xb2c>
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7f2 fb7f 	bl	8000ba8 <__aeabi_d2uiz>
 800e4aa:	2801      	cmp	r0, #1
 800e4ac:	bf38      	it	cc
 800e4ae:	2001      	movcc	r0, #1
 800e4b0:	f7f2 f828 	bl	8000504 <__aeabi_ui2d>
 800e4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	460f      	mov	r7, r1
 800e4ba:	bb23      	cbnz	r3, 800e506 <_strtod_l+0xb66>
 800e4bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4c0:	9010      	str	r0, [sp, #64]	; 0x40
 800e4c2:	9311      	str	r3, [sp, #68]	; 0x44
 800e4c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e4d4:	1a9b      	subs	r3, r3, r2
 800e4d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e4dc:	eeb0 0a48 	vmov.f32	s0, s16
 800e4e0:	eef0 0a68 	vmov.f32	s1, s17
 800e4e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e4e8:	f7ff f8fc 	bl	800d6e4 <__ulp>
 800e4ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e4f0:	ec53 2b10 	vmov	r2, r3, d0
 800e4f4:	f7f2 f880 	bl	80005f8 <__aeabi_dmul>
 800e4f8:	ec53 2b18 	vmov	r2, r3, d8
 800e4fc:	f7f1 fec6 	bl	800028c <__adddf3>
 800e500:	4680      	mov	r8, r0
 800e502:	4689      	mov	r9, r1
 800e504:	e78d      	b.n	800e422 <_strtod_l+0xa82>
 800e506:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e50a:	e7db      	b.n	800e4c4 <_strtod_l+0xb24>
 800e50c:	a314      	add	r3, pc, #80	; (adr r3, 800e560 <_strtod_l+0xbc0>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	f7f2 fae3 	bl	8000adc <__aeabi_dcmplt>
 800e516:	e7b3      	b.n	800e480 <_strtod_l+0xae0>
 800e518:	2300      	movs	r3, #0
 800e51a:	930a      	str	r3, [sp, #40]	; 0x28
 800e51c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e51e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e520:	6013      	str	r3, [r2, #0]
 800e522:	f7ff ba7c 	b.w	800da1e <_strtod_l+0x7e>
 800e526:	2a65      	cmp	r2, #101	; 0x65
 800e528:	f43f ab75 	beq.w	800dc16 <_strtod_l+0x276>
 800e52c:	2a45      	cmp	r2, #69	; 0x45
 800e52e:	f43f ab72 	beq.w	800dc16 <_strtod_l+0x276>
 800e532:	2301      	movs	r3, #1
 800e534:	f7ff bbaa 	b.w	800dc8c <_strtod_l+0x2ec>
 800e538:	00000000 	.word	0x00000000
 800e53c:	bff00000 	.word	0xbff00000
 800e540:	00000000 	.word	0x00000000
 800e544:	3ff00000 	.word	0x3ff00000
 800e548:	94a03595 	.word	0x94a03595
 800e54c:	3fdfffff 	.word	0x3fdfffff
 800e550:	35afe535 	.word	0x35afe535
 800e554:	3fe00000 	.word	0x3fe00000
 800e558:	ffc00000 	.word	0xffc00000
 800e55c:	41dfffff 	.word	0x41dfffff
 800e560:	94a03595 	.word	0x94a03595
 800e564:	3fcfffff 	.word	0x3fcfffff
 800e568:	3ff00000 	.word	0x3ff00000
 800e56c:	3fe00000 	.word	0x3fe00000
 800e570:	7ff00000 	.word	0x7ff00000
 800e574:	7fe00000 	.word	0x7fe00000
 800e578:	7c9fffff 	.word	0x7c9fffff
 800e57c:	7fefffff 	.word	0x7fefffff

0800e580 <_strtod_r>:
 800e580:	4b01      	ldr	r3, [pc, #4]	; (800e588 <_strtod_r+0x8>)
 800e582:	f7ff ba0d 	b.w	800d9a0 <_strtod_l>
 800e586:	bf00      	nop
 800e588:	20000158 	.word	0x20000158

0800e58c <_strtol_l.constprop.0>:
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e592:	d001      	beq.n	800e598 <_strtol_l.constprop.0+0xc>
 800e594:	2b24      	cmp	r3, #36	; 0x24
 800e596:	d906      	bls.n	800e5a6 <_strtol_l.constprop.0+0x1a>
 800e598:	f7fd fd74 	bl	800c084 <__errno>
 800e59c:	2316      	movs	r3, #22
 800e59e:	6003      	str	r3, [r0, #0]
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e68c <_strtol_l.constprop.0+0x100>
 800e5aa:	460d      	mov	r5, r1
 800e5ac:	462e      	mov	r6, r5
 800e5ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5b2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e5b6:	f017 0708 	ands.w	r7, r7, #8
 800e5ba:	d1f7      	bne.n	800e5ac <_strtol_l.constprop.0+0x20>
 800e5bc:	2c2d      	cmp	r4, #45	; 0x2d
 800e5be:	d132      	bne.n	800e626 <_strtol_l.constprop.0+0x9a>
 800e5c0:	782c      	ldrb	r4, [r5, #0]
 800e5c2:	2701      	movs	r7, #1
 800e5c4:	1cb5      	adds	r5, r6, #2
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d05b      	beq.n	800e682 <_strtol_l.constprop.0+0xf6>
 800e5ca:	2b10      	cmp	r3, #16
 800e5cc:	d109      	bne.n	800e5e2 <_strtol_l.constprop.0+0x56>
 800e5ce:	2c30      	cmp	r4, #48	; 0x30
 800e5d0:	d107      	bne.n	800e5e2 <_strtol_l.constprop.0+0x56>
 800e5d2:	782c      	ldrb	r4, [r5, #0]
 800e5d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e5d8:	2c58      	cmp	r4, #88	; 0x58
 800e5da:	d14d      	bne.n	800e678 <_strtol_l.constprop.0+0xec>
 800e5dc:	786c      	ldrb	r4, [r5, #1]
 800e5de:	2310      	movs	r3, #16
 800e5e0:	3502      	adds	r5, #2
 800e5e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e5e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5ea:	f04f 0e00 	mov.w	lr, #0
 800e5ee:	fbb8 f9f3 	udiv	r9, r8, r3
 800e5f2:	4676      	mov	r6, lr
 800e5f4:	fb03 8a19 	mls	sl, r3, r9, r8
 800e5f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e5fc:	f1bc 0f09 	cmp.w	ip, #9
 800e600:	d816      	bhi.n	800e630 <_strtol_l.constprop.0+0xa4>
 800e602:	4664      	mov	r4, ip
 800e604:	42a3      	cmp	r3, r4
 800e606:	dd24      	ble.n	800e652 <_strtol_l.constprop.0+0xc6>
 800e608:	f1be 3fff 	cmp.w	lr, #4294967295
 800e60c:	d008      	beq.n	800e620 <_strtol_l.constprop.0+0x94>
 800e60e:	45b1      	cmp	r9, r6
 800e610:	d31c      	bcc.n	800e64c <_strtol_l.constprop.0+0xc0>
 800e612:	d101      	bne.n	800e618 <_strtol_l.constprop.0+0x8c>
 800e614:	45a2      	cmp	sl, r4
 800e616:	db19      	blt.n	800e64c <_strtol_l.constprop.0+0xc0>
 800e618:	fb06 4603 	mla	r6, r6, r3, r4
 800e61c:	f04f 0e01 	mov.w	lr, #1
 800e620:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e624:	e7e8      	b.n	800e5f8 <_strtol_l.constprop.0+0x6c>
 800e626:	2c2b      	cmp	r4, #43	; 0x2b
 800e628:	bf04      	itt	eq
 800e62a:	782c      	ldrbeq	r4, [r5, #0]
 800e62c:	1cb5      	addeq	r5, r6, #2
 800e62e:	e7ca      	b.n	800e5c6 <_strtol_l.constprop.0+0x3a>
 800e630:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e634:	f1bc 0f19 	cmp.w	ip, #25
 800e638:	d801      	bhi.n	800e63e <_strtol_l.constprop.0+0xb2>
 800e63a:	3c37      	subs	r4, #55	; 0x37
 800e63c:	e7e2      	b.n	800e604 <_strtol_l.constprop.0+0x78>
 800e63e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e642:	f1bc 0f19 	cmp.w	ip, #25
 800e646:	d804      	bhi.n	800e652 <_strtol_l.constprop.0+0xc6>
 800e648:	3c57      	subs	r4, #87	; 0x57
 800e64a:	e7db      	b.n	800e604 <_strtol_l.constprop.0+0x78>
 800e64c:	f04f 3eff 	mov.w	lr, #4294967295
 800e650:	e7e6      	b.n	800e620 <_strtol_l.constprop.0+0x94>
 800e652:	f1be 3fff 	cmp.w	lr, #4294967295
 800e656:	d105      	bne.n	800e664 <_strtol_l.constprop.0+0xd8>
 800e658:	2322      	movs	r3, #34	; 0x22
 800e65a:	6003      	str	r3, [r0, #0]
 800e65c:	4646      	mov	r6, r8
 800e65e:	b942      	cbnz	r2, 800e672 <_strtol_l.constprop.0+0xe6>
 800e660:	4630      	mov	r0, r6
 800e662:	e79e      	b.n	800e5a2 <_strtol_l.constprop.0+0x16>
 800e664:	b107      	cbz	r7, 800e668 <_strtol_l.constprop.0+0xdc>
 800e666:	4276      	negs	r6, r6
 800e668:	2a00      	cmp	r2, #0
 800e66a:	d0f9      	beq.n	800e660 <_strtol_l.constprop.0+0xd4>
 800e66c:	f1be 0f00 	cmp.w	lr, #0
 800e670:	d000      	beq.n	800e674 <_strtol_l.constprop.0+0xe8>
 800e672:	1e69      	subs	r1, r5, #1
 800e674:	6011      	str	r1, [r2, #0]
 800e676:	e7f3      	b.n	800e660 <_strtol_l.constprop.0+0xd4>
 800e678:	2430      	movs	r4, #48	; 0x30
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1b1      	bne.n	800e5e2 <_strtol_l.constprop.0+0x56>
 800e67e:	2308      	movs	r3, #8
 800e680:	e7af      	b.n	800e5e2 <_strtol_l.constprop.0+0x56>
 800e682:	2c30      	cmp	r4, #48	; 0x30
 800e684:	d0a5      	beq.n	800e5d2 <_strtol_l.constprop.0+0x46>
 800e686:	230a      	movs	r3, #10
 800e688:	e7ab      	b.n	800e5e2 <_strtol_l.constprop.0+0x56>
 800e68a:	bf00      	nop
 800e68c:	0800fc89 	.word	0x0800fc89

0800e690 <_strtol_r>:
 800e690:	f7ff bf7c 	b.w	800e58c <_strtol_l.constprop.0>

0800e694 <__ssputs_r>:
 800e694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e698:	688e      	ldr	r6, [r1, #8]
 800e69a:	461f      	mov	r7, r3
 800e69c:	42be      	cmp	r6, r7
 800e69e:	680b      	ldr	r3, [r1, #0]
 800e6a0:	4682      	mov	sl, r0
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4690      	mov	r8, r2
 800e6a6:	d82c      	bhi.n	800e702 <__ssputs_r+0x6e>
 800e6a8:	898a      	ldrh	r2, [r1, #12]
 800e6aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6ae:	d026      	beq.n	800e6fe <__ssputs_r+0x6a>
 800e6b0:	6965      	ldr	r5, [r4, #20]
 800e6b2:	6909      	ldr	r1, [r1, #16]
 800e6b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6b8:	eba3 0901 	sub.w	r9, r3, r1
 800e6bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e6c0:	1c7b      	adds	r3, r7, #1
 800e6c2:	444b      	add	r3, r9
 800e6c4:	106d      	asrs	r5, r5, #1
 800e6c6:	429d      	cmp	r5, r3
 800e6c8:	bf38      	it	cc
 800e6ca:	461d      	movcc	r5, r3
 800e6cc:	0553      	lsls	r3, r2, #21
 800e6ce:	d527      	bpl.n	800e720 <__ssputs_r+0x8c>
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7fe fc0f 	bl	800cef4 <_malloc_r>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	b360      	cbz	r0, 800e734 <__ssputs_r+0xa0>
 800e6da:	6921      	ldr	r1, [r4, #16]
 800e6dc:	464a      	mov	r2, r9
 800e6de:	f7fd fcfe 	bl	800c0de <memcpy>
 800e6e2:	89a3      	ldrh	r3, [r4, #12]
 800e6e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ec:	81a3      	strh	r3, [r4, #12]
 800e6ee:	6126      	str	r6, [r4, #16]
 800e6f0:	6165      	str	r5, [r4, #20]
 800e6f2:	444e      	add	r6, r9
 800e6f4:	eba5 0509 	sub.w	r5, r5, r9
 800e6f8:	6026      	str	r6, [r4, #0]
 800e6fa:	60a5      	str	r5, [r4, #8]
 800e6fc:	463e      	mov	r6, r7
 800e6fe:	42be      	cmp	r6, r7
 800e700:	d900      	bls.n	800e704 <__ssputs_r+0x70>
 800e702:	463e      	mov	r6, r7
 800e704:	6820      	ldr	r0, [r4, #0]
 800e706:	4632      	mov	r2, r6
 800e708:	4641      	mov	r1, r8
 800e70a:	f7fd fc3d 	bl	800bf88 <memmove>
 800e70e:	68a3      	ldr	r3, [r4, #8]
 800e710:	1b9b      	subs	r3, r3, r6
 800e712:	60a3      	str	r3, [r4, #8]
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	4433      	add	r3, r6
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	2000      	movs	r0, #0
 800e71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e720:	462a      	mov	r2, r5
 800e722:	f000 ff60 	bl	800f5e6 <_realloc_r>
 800e726:	4606      	mov	r6, r0
 800e728:	2800      	cmp	r0, #0
 800e72a:	d1e0      	bne.n	800e6ee <__ssputs_r+0x5a>
 800e72c:	6921      	ldr	r1, [r4, #16]
 800e72e:	4650      	mov	r0, sl
 800e730:	f7fe fb6c 	bl	800ce0c <_free_r>
 800e734:	230c      	movs	r3, #12
 800e736:	f8ca 3000 	str.w	r3, [sl]
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e740:	81a3      	strh	r3, [r4, #12]
 800e742:	f04f 30ff 	mov.w	r0, #4294967295
 800e746:	e7e9      	b.n	800e71c <__ssputs_r+0x88>

0800e748 <_svfiprintf_r>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	4698      	mov	r8, r3
 800e74e:	898b      	ldrh	r3, [r1, #12]
 800e750:	061b      	lsls	r3, r3, #24
 800e752:	b09d      	sub	sp, #116	; 0x74
 800e754:	4607      	mov	r7, r0
 800e756:	460d      	mov	r5, r1
 800e758:	4614      	mov	r4, r2
 800e75a:	d50e      	bpl.n	800e77a <_svfiprintf_r+0x32>
 800e75c:	690b      	ldr	r3, [r1, #16]
 800e75e:	b963      	cbnz	r3, 800e77a <_svfiprintf_r+0x32>
 800e760:	2140      	movs	r1, #64	; 0x40
 800e762:	f7fe fbc7 	bl	800cef4 <_malloc_r>
 800e766:	6028      	str	r0, [r5, #0]
 800e768:	6128      	str	r0, [r5, #16]
 800e76a:	b920      	cbnz	r0, 800e776 <_svfiprintf_r+0x2e>
 800e76c:	230c      	movs	r3, #12
 800e76e:	603b      	str	r3, [r7, #0]
 800e770:	f04f 30ff 	mov.w	r0, #4294967295
 800e774:	e0d0      	b.n	800e918 <_svfiprintf_r+0x1d0>
 800e776:	2340      	movs	r3, #64	; 0x40
 800e778:	616b      	str	r3, [r5, #20]
 800e77a:	2300      	movs	r3, #0
 800e77c:	9309      	str	r3, [sp, #36]	; 0x24
 800e77e:	2320      	movs	r3, #32
 800e780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e784:	f8cd 800c 	str.w	r8, [sp, #12]
 800e788:	2330      	movs	r3, #48	; 0x30
 800e78a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e930 <_svfiprintf_r+0x1e8>
 800e78e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e792:	f04f 0901 	mov.w	r9, #1
 800e796:	4623      	mov	r3, r4
 800e798:	469a      	mov	sl, r3
 800e79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e79e:	b10a      	cbz	r2, 800e7a4 <_svfiprintf_r+0x5c>
 800e7a0:	2a25      	cmp	r2, #37	; 0x25
 800e7a2:	d1f9      	bne.n	800e798 <_svfiprintf_r+0x50>
 800e7a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a8:	d00b      	beq.n	800e7c2 <_svfiprintf_r+0x7a>
 800e7aa:	465b      	mov	r3, fp
 800e7ac:	4622      	mov	r2, r4
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7ff ff6f 	bl	800e694 <__ssputs_r>
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	f000 80a9 	beq.w	800e90e <_svfiprintf_r+0x1c6>
 800e7bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7be:	445a      	add	r2, fp
 800e7c0:	9209      	str	r2, [sp, #36]	; 0x24
 800e7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 80a1 	beq.w	800e90e <_svfiprintf_r+0x1c6>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d6:	f10a 0a01 	add.w	sl, sl, #1
 800e7da:	9304      	str	r3, [sp, #16]
 800e7dc:	9307      	str	r3, [sp, #28]
 800e7de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7e2:	931a      	str	r3, [sp, #104]	; 0x68
 800e7e4:	4654      	mov	r4, sl
 800e7e6:	2205      	movs	r2, #5
 800e7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ec:	4850      	ldr	r0, [pc, #320]	; (800e930 <_svfiprintf_r+0x1e8>)
 800e7ee:	f7f1 fcef 	bl	80001d0 <memchr>
 800e7f2:	9a04      	ldr	r2, [sp, #16]
 800e7f4:	b9d8      	cbnz	r0, 800e82e <_svfiprintf_r+0xe6>
 800e7f6:	06d0      	lsls	r0, r2, #27
 800e7f8:	bf44      	itt	mi
 800e7fa:	2320      	movmi	r3, #32
 800e7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e800:	0711      	lsls	r1, r2, #28
 800e802:	bf44      	itt	mi
 800e804:	232b      	movmi	r3, #43	; 0x2b
 800e806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e80a:	f89a 3000 	ldrb.w	r3, [sl]
 800e80e:	2b2a      	cmp	r3, #42	; 0x2a
 800e810:	d015      	beq.n	800e83e <_svfiprintf_r+0xf6>
 800e812:	9a07      	ldr	r2, [sp, #28]
 800e814:	4654      	mov	r4, sl
 800e816:	2000      	movs	r0, #0
 800e818:	f04f 0c0a 	mov.w	ip, #10
 800e81c:	4621      	mov	r1, r4
 800e81e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e822:	3b30      	subs	r3, #48	; 0x30
 800e824:	2b09      	cmp	r3, #9
 800e826:	d94d      	bls.n	800e8c4 <_svfiprintf_r+0x17c>
 800e828:	b1b0      	cbz	r0, 800e858 <_svfiprintf_r+0x110>
 800e82a:	9207      	str	r2, [sp, #28]
 800e82c:	e014      	b.n	800e858 <_svfiprintf_r+0x110>
 800e82e:	eba0 0308 	sub.w	r3, r0, r8
 800e832:	fa09 f303 	lsl.w	r3, r9, r3
 800e836:	4313      	orrs	r3, r2
 800e838:	9304      	str	r3, [sp, #16]
 800e83a:	46a2      	mov	sl, r4
 800e83c:	e7d2      	b.n	800e7e4 <_svfiprintf_r+0x9c>
 800e83e:	9b03      	ldr	r3, [sp, #12]
 800e840:	1d19      	adds	r1, r3, #4
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	9103      	str	r1, [sp, #12]
 800e846:	2b00      	cmp	r3, #0
 800e848:	bfbb      	ittet	lt
 800e84a:	425b      	neglt	r3, r3
 800e84c:	f042 0202 	orrlt.w	r2, r2, #2
 800e850:	9307      	strge	r3, [sp, #28]
 800e852:	9307      	strlt	r3, [sp, #28]
 800e854:	bfb8      	it	lt
 800e856:	9204      	strlt	r2, [sp, #16]
 800e858:	7823      	ldrb	r3, [r4, #0]
 800e85a:	2b2e      	cmp	r3, #46	; 0x2e
 800e85c:	d10c      	bne.n	800e878 <_svfiprintf_r+0x130>
 800e85e:	7863      	ldrb	r3, [r4, #1]
 800e860:	2b2a      	cmp	r3, #42	; 0x2a
 800e862:	d134      	bne.n	800e8ce <_svfiprintf_r+0x186>
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	1d1a      	adds	r2, r3, #4
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	9203      	str	r2, [sp, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	bfb8      	it	lt
 800e870:	f04f 33ff 	movlt.w	r3, #4294967295
 800e874:	3402      	adds	r4, #2
 800e876:	9305      	str	r3, [sp, #20]
 800e878:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e940 <_svfiprintf_r+0x1f8>
 800e87c:	7821      	ldrb	r1, [r4, #0]
 800e87e:	2203      	movs	r2, #3
 800e880:	4650      	mov	r0, sl
 800e882:	f7f1 fca5 	bl	80001d0 <memchr>
 800e886:	b138      	cbz	r0, 800e898 <_svfiprintf_r+0x150>
 800e888:	9b04      	ldr	r3, [sp, #16]
 800e88a:	eba0 000a 	sub.w	r0, r0, sl
 800e88e:	2240      	movs	r2, #64	; 0x40
 800e890:	4082      	lsls	r2, r0
 800e892:	4313      	orrs	r3, r2
 800e894:	3401      	adds	r4, #1
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e89c:	4825      	ldr	r0, [pc, #148]	; (800e934 <_svfiprintf_r+0x1ec>)
 800e89e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8a2:	2206      	movs	r2, #6
 800e8a4:	f7f1 fc94 	bl	80001d0 <memchr>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d038      	beq.n	800e91e <_svfiprintf_r+0x1d6>
 800e8ac:	4b22      	ldr	r3, [pc, #136]	; (800e938 <_svfiprintf_r+0x1f0>)
 800e8ae:	bb1b      	cbnz	r3, 800e8f8 <_svfiprintf_r+0x1b0>
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	3307      	adds	r3, #7
 800e8b4:	f023 0307 	bic.w	r3, r3, #7
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	9303      	str	r3, [sp, #12]
 800e8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8be:	4433      	add	r3, r6
 800e8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c2:	e768      	b.n	800e796 <_svfiprintf_r+0x4e>
 800e8c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	e7a6      	b.n	800e81c <_svfiprintf_r+0xd4>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	3401      	adds	r4, #1
 800e8d2:	9305      	str	r3, [sp, #20]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	f04f 0c0a 	mov.w	ip, #10
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e0:	3a30      	subs	r2, #48	; 0x30
 800e8e2:	2a09      	cmp	r2, #9
 800e8e4:	d903      	bls.n	800e8ee <_svfiprintf_r+0x1a6>
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d0c6      	beq.n	800e878 <_svfiprintf_r+0x130>
 800e8ea:	9105      	str	r1, [sp, #20]
 800e8ec:	e7c4      	b.n	800e878 <_svfiprintf_r+0x130>
 800e8ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e7f0      	b.n	800e8da <_svfiprintf_r+0x192>
 800e8f8:	ab03      	add	r3, sp, #12
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4b0f      	ldr	r3, [pc, #60]	; (800e93c <_svfiprintf_r+0x1f4>)
 800e900:	a904      	add	r1, sp, #16
 800e902:	4638      	mov	r0, r7
 800e904:	f7fc fb58 	bl	800afb8 <_printf_float>
 800e908:	1c42      	adds	r2, r0, #1
 800e90a:	4606      	mov	r6, r0
 800e90c:	d1d6      	bne.n	800e8bc <_svfiprintf_r+0x174>
 800e90e:	89ab      	ldrh	r3, [r5, #12]
 800e910:	065b      	lsls	r3, r3, #25
 800e912:	f53f af2d 	bmi.w	800e770 <_svfiprintf_r+0x28>
 800e916:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e918:	b01d      	add	sp, #116	; 0x74
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	ab03      	add	r3, sp, #12
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	462a      	mov	r2, r5
 800e924:	4b05      	ldr	r3, [pc, #20]	; (800e93c <_svfiprintf_r+0x1f4>)
 800e926:	a904      	add	r1, sp, #16
 800e928:	4638      	mov	r0, r7
 800e92a:	f7fc fde9 	bl	800b500 <_printf_i>
 800e92e:	e7eb      	b.n	800e908 <_svfiprintf_r+0x1c0>
 800e930:	0800fd89 	.word	0x0800fd89
 800e934:	0800fd93 	.word	0x0800fd93
 800e938:	0800afb9 	.word	0x0800afb9
 800e93c:	0800e695 	.word	0x0800e695
 800e940:	0800fd8f 	.word	0x0800fd8f

0800e944 <__sfputc_r>:
 800e944:	6893      	ldr	r3, [r2, #8]
 800e946:	3b01      	subs	r3, #1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	b410      	push	{r4}
 800e94c:	6093      	str	r3, [r2, #8]
 800e94e:	da08      	bge.n	800e962 <__sfputc_r+0x1e>
 800e950:	6994      	ldr	r4, [r2, #24]
 800e952:	42a3      	cmp	r3, r4
 800e954:	db01      	blt.n	800e95a <__sfputc_r+0x16>
 800e956:	290a      	cmp	r1, #10
 800e958:	d103      	bne.n	800e962 <__sfputc_r+0x1e>
 800e95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e95e:	f7fd ba7e 	b.w	800be5e <__swbuf_r>
 800e962:	6813      	ldr	r3, [r2, #0]
 800e964:	1c58      	adds	r0, r3, #1
 800e966:	6010      	str	r0, [r2, #0]
 800e968:	7019      	strb	r1, [r3, #0]
 800e96a:	4608      	mov	r0, r1
 800e96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <__sfputs_r>:
 800e972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e974:	4606      	mov	r6, r0
 800e976:	460f      	mov	r7, r1
 800e978:	4614      	mov	r4, r2
 800e97a:	18d5      	adds	r5, r2, r3
 800e97c:	42ac      	cmp	r4, r5
 800e97e:	d101      	bne.n	800e984 <__sfputs_r+0x12>
 800e980:	2000      	movs	r0, #0
 800e982:	e007      	b.n	800e994 <__sfputs_r+0x22>
 800e984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e988:	463a      	mov	r2, r7
 800e98a:	4630      	mov	r0, r6
 800e98c:	f7ff ffda 	bl	800e944 <__sfputc_r>
 800e990:	1c43      	adds	r3, r0, #1
 800e992:	d1f3      	bne.n	800e97c <__sfputs_r+0xa>
 800e994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e998 <_vfiprintf_r>:
 800e998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	460d      	mov	r5, r1
 800e99e:	b09d      	sub	sp, #116	; 0x74
 800e9a0:	4614      	mov	r4, r2
 800e9a2:	4698      	mov	r8, r3
 800e9a4:	4606      	mov	r6, r0
 800e9a6:	b118      	cbz	r0, 800e9b0 <_vfiprintf_r+0x18>
 800e9a8:	6a03      	ldr	r3, [r0, #32]
 800e9aa:	b90b      	cbnz	r3, 800e9b0 <_vfiprintf_r+0x18>
 800e9ac:	f7fd f966 	bl	800bc7c <__sinit>
 800e9b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9b2:	07d9      	lsls	r1, r3, #31
 800e9b4:	d405      	bmi.n	800e9c2 <_vfiprintf_r+0x2a>
 800e9b6:	89ab      	ldrh	r3, [r5, #12]
 800e9b8:	059a      	lsls	r2, r3, #22
 800e9ba:	d402      	bmi.n	800e9c2 <_vfiprintf_r+0x2a>
 800e9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9be:	f7fd fb8c 	bl	800c0da <__retarget_lock_acquire_recursive>
 800e9c2:	89ab      	ldrh	r3, [r5, #12]
 800e9c4:	071b      	lsls	r3, r3, #28
 800e9c6:	d501      	bpl.n	800e9cc <_vfiprintf_r+0x34>
 800e9c8:	692b      	ldr	r3, [r5, #16]
 800e9ca:	b99b      	cbnz	r3, 800e9f4 <_vfiprintf_r+0x5c>
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f7fd fa82 	bl	800bed8 <__swsetup_r>
 800e9d4:	b170      	cbz	r0, 800e9f4 <_vfiprintf_r+0x5c>
 800e9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9d8:	07dc      	lsls	r4, r3, #31
 800e9da:	d504      	bpl.n	800e9e6 <_vfiprintf_r+0x4e>
 800e9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e0:	b01d      	add	sp, #116	; 0x74
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e6:	89ab      	ldrh	r3, [r5, #12]
 800e9e8:	0598      	lsls	r0, r3, #22
 800e9ea:	d4f7      	bmi.n	800e9dc <_vfiprintf_r+0x44>
 800e9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ee:	f7fd fb75 	bl	800c0dc <__retarget_lock_release_recursive>
 800e9f2:	e7f3      	b.n	800e9dc <_vfiprintf_r+0x44>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e9f8:	2320      	movs	r3, #32
 800e9fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea02:	2330      	movs	r3, #48	; 0x30
 800ea04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ebb8 <_vfiprintf_r+0x220>
 800ea08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea0c:	f04f 0901 	mov.w	r9, #1
 800ea10:	4623      	mov	r3, r4
 800ea12:	469a      	mov	sl, r3
 800ea14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea18:	b10a      	cbz	r2, 800ea1e <_vfiprintf_r+0x86>
 800ea1a:	2a25      	cmp	r2, #37	; 0x25
 800ea1c:	d1f9      	bne.n	800ea12 <_vfiprintf_r+0x7a>
 800ea1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ea22:	d00b      	beq.n	800ea3c <_vfiprintf_r+0xa4>
 800ea24:	465b      	mov	r3, fp
 800ea26:	4622      	mov	r2, r4
 800ea28:	4629      	mov	r1, r5
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f7ff ffa1 	bl	800e972 <__sfputs_r>
 800ea30:	3001      	adds	r0, #1
 800ea32:	f000 80a9 	beq.w	800eb88 <_vfiprintf_r+0x1f0>
 800ea36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea38:	445a      	add	r2, fp
 800ea3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ea3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f000 80a1 	beq.w	800eb88 <_vfiprintf_r+0x1f0>
 800ea46:	2300      	movs	r3, #0
 800ea48:	f04f 32ff 	mov.w	r2, #4294967295
 800ea4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea50:	f10a 0a01 	add.w	sl, sl, #1
 800ea54:	9304      	str	r3, [sp, #16]
 800ea56:	9307      	str	r3, [sp, #28]
 800ea58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ea5e:	4654      	mov	r4, sl
 800ea60:	2205      	movs	r2, #5
 800ea62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea66:	4854      	ldr	r0, [pc, #336]	; (800ebb8 <_vfiprintf_r+0x220>)
 800ea68:	f7f1 fbb2 	bl	80001d0 <memchr>
 800ea6c:	9a04      	ldr	r2, [sp, #16]
 800ea6e:	b9d8      	cbnz	r0, 800eaa8 <_vfiprintf_r+0x110>
 800ea70:	06d1      	lsls	r1, r2, #27
 800ea72:	bf44      	itt	mi
 800ea74:	2320      	movmi	r3, #32
 800ea76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea7a:	0713      	lsls	r3, r2, #28
 800ea7c:	bf44      	itt	mi
 800ea7e:	232b      	movmi	r3, #43	; 0x2b
 800ea80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea84:	f89a 3000 	ldrb.w	r3, [sl]
 800ea88:	2b2a      	cmp	r3, #42	; 0x2a
 800ea8a:	d015      	beq.n	800eab8 <_vfiprintf_r+0x120>
 800ea8c:	9a07      	ldr	r2, [sp, #28]
 800ea8e:	4654      	mov	r4, sl
 800ea90:	2000      	movs	r0, #0
 800ea92:	f04f 0c0a 	mov.w	ip, #10
 800ea96:	4621      	mov	r1, r4
 800ea98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea9c:	3b30      	subs	r3, #48	; 0x30
 800ea9e:	2b09      	cmp	r3, #9
 800eaa0:	d94d      	bls.n	800eb3e <_vfiprintf_r+0x1a6>
 800eaa2:	b1b0      	cbz	r0, 800ead2 <_vfiprintf_r+0x13a>
 800eaa4:	9207      	str	r2, [sp, #28]
 800eaa6:	e014      	b.n	800ead2 <_vfiprintf_r+0x13a>
 800eaa8:	eba0 0308 	sub.w	r3, r0, r8
 800eaac:	fa09 f303 	lsl.w	r3, r9, r3
 800eab0:	4313      	orrs	r3, r2
 800eab2:	9304      	str	r3, [sp, #16]
 800eab4:	46a2      	mov	sl, r4
 800eab6:	e7d2      	b.n	800ea5e <_vfiprintf_r+0xc6>
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	1d19      	adds	r1, r3, #4
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	9103      	str	r1, [sp, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	bfbb      	ittet	lt
 800eac4:	425b      	neglt	r3, r3
 800eac6:	f042 0202 	orrlt.w	r2, r2, #2
 800eaca:	9307      	strge	r3, [sp, #28]
 800eacc:	9307      	strlt	r3, [sp, #28]
 800eace:	bfb8      	it	lt
 800ead0:	9204      	strlt	r2, [sp, #16]
 800ead2:	7823      	ldrb	r3, [r4, #0]
 800ead4:	2b2e      	cmp	r3, #46	; 0x2e
 800ead6:	d10c      	bne.n	800eaf2 <_vfiprintf_r+0x15a>
 800ead8:	7863      	ldrb	r3, [r4, #1]
 800eada:	2b2a      	cmp	r3, #42	; 0x2a
 800eadc:	d134      	bne.n	800eb48 <_vfiprintf_r+0x1b0>
 800eade:	9b03      	ldr	r3, [sp, #12]
 800eae0:	1d1a      	adds	r2, r3, #4
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	9203      	str	r2, [sp, #12]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	bfb8      	it	lt
 800eaea:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaee:	3402      	adds	r4, #2
 800eaf0:	9305      	str	r3, [sp, #20]
 800eaf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ebc8 <_vfiprintf_r+0x230>
 800eaf6:	7821      	ldrb	r1, [r4, #0]
 800eaf8:	2203      	movs	r2, #3
 800eafa:	4650      	mov	r0, sl
 800eafc:	f7f1 fb68 	bl	80001d0 <memchr>
 800eb00:	b138      	cbz	r0, 800eb12 <_vfiprintf_r+0x17a>
 800eb02:	9b04      	ldr	r3, [sp, #16]
 800eb04:	eba0 000a 	sub.w	r0, r0, sl
 800eb08:	2240      	movs	r2, #64	; 0x40
 800eb0a:	4082      	lsls	r2, r0
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	3401      	adds	r4, #1
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb16:	4829      	ldr	r0, [pc, #164]	; (800ebbc <_vfiprintf_r+0x224>)
 800eb18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb1c:	2206      	movs	r2, #6
 800eb1e:	f7f1 fb57 	bl	80001d0 <memchr>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d03f      	beq.n	800eba6 <_vfiprintf_r+0x20e>
 800eb26:	4b26      	ldr	r3, [pc, #152]	; (800ebc0 <_vfiprintf_r+0x228>)
 800eb28:	bb1b      	cbnz	r3, 800eb72 <_vfiprintf_r+0x1da>
 800eb2a:	9b03      	ldr	r3, [sp, #12]
 800eb2c:	3307      	adds	r3, #7
 800eb2e:	f023 0307 	bic.w	r3, r3, #7
 800eb32:	3308      	adds	r3, #8
 800eb34:	9303      	str	r3, [sp, #12]
 800eb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb38:	443b      	add	r3, r7
 800eb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb3c:	e768      	b.n	800ea10 <_vfiprintf_r+0x78>
 800eb3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb42:	460c      	mov	r4, r1
 800eb44:	2001      	movs	r0, #1
 800eb46:	e7a6      	b.n	800ea96 <_vfiprintf_r+0xfe>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	3401      	adds	r4, #1
 800eb4c:	9305      	str	r3, [sp, #20]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	f04f 0c0a 	mov.w	ip, #10
 800eb54:	4620      	mov	r0, r4
 800eb56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb5a:	3a30      	subs	r2, #48	; 0x30
 800eb5c:	2a09      	cmp	r2, #9
 800eb5e:	d903      	bls.n	800eb68 <_vfiprintf_r+0x1d0>
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d0c6      	beq.n	800eaf2 <_vfiprintf_r+0x15a>
 800eb64:	9105      	str	r1, [sp, #20]
 800eb66:	e7c4      	b.n	800eaf2 <_vfiprintf_r+0x15a>
 800eb68:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e7f0      	b.n	800eb54 <_vfiprintf_r+0x1bc>
 800eb72:	ab03      	add	r3, sp, #12
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	462a      	mov	r2, r5
 800eb78:	4b12      	ldr	r3, [pc, #72]	; (800ebc4 <_vfiprintf_r+0x22c>)
 800eb7a:	a904      	add	r1, sp, #16
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7fc fa1b 	bl	800afb8 <_printf_float>
 800eb82:	4607      	mov	r7, r0
 800eb84:	1c78      	adds	r0, r7, #1
 800eb86:	d1d6      	bne.n	800eb36 <_vfiprintf_r+0x19e>
 800eb88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb8a:	07d9      	lsls	r1, r3, #31
 800eb8c:	d405      	bmi.n	800eb9a <_vfiprintf_r+0x202>
 800eb8e:	89ab      	ldrh	r3, [r5, #12]
 800eb90:	059a      	lsls	r2, r3, #22
 800eb92:	d402      	bmi.n	800eb9a <_vfiprintf_r+0x202>
 800eb94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb96:	f7fd faa1 	bl	800c0dc <__retarget_lock_release_recursive>
 800eb9a:	89ab      	ldrh	r3, [r5, #12]
 800eb9c:	065b      	lsls	r3, r3, #25
 800eb9e:	f53f af1d 	bmi.w	800e9dc <_vfiprintf_r+0x44>
 800eba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eba4:	e71c      	b.n	800e9e0 <_vfiprintf_r+0x48>
 800eba6:	ab03      	add	r3, sp, #12
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	462a      	mov	r2, r5
 800ebac:	4b05      	ldr	r3, [pc, #20]	; (800ebc4 <_vfiprintf_r+0x22c>)
 800ebae:	a904      	add	r1, sp, #16
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7fc fca5 	bl	800b500 <_printf_i>
 800ebb6:	e7e4      	b.n	800eb82 <_vfiprintf_r+0x1ea>
 800ebb8:	0800fd89 	.word	0x0800fd89
 800ebbc:	0800fd93 	.word	0x0800fd93
 800ebc0:	0800afb9 	.word	0x0800afb9
 800ebc4:	0800e973 	.word	0x0800e973
 800ebc8:	0800fd8f 	.word	0x0800fd8f

0800ebcc <__sflush_r>:
 800ebcc:	898a      	ldrh	r2, [r1, #12]
 800ebce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	0710      	lsls	r0, r2, #28
 800ebd6:	460c      	mov	r4, r1
 800ebd8:	d458      	bmi.n	800ec8c <__sflush_r+0xc0>
 800ebda:	684b      	ldr	r3, [r1, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	dc05      	bgt.n	800ebec <__sflush_r+0x20>
 800ebe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	dc02      	bgt.n	800ebec <__sflush_r+0x20>
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebee:	2e00      	cmp	r6, #0
 800ebf0:	d0f9      	beq.n	800ebe6 <__sflush_r+0x1a>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebf8:	682f      	ldr	r7, [r5, #0]
 800ebfa:	6a21      	ldr	r1, [r4, #32]
 800ebfc:	602b      	str	r3, [r5, #0]
 800ebfe:	d032      	beq.n	800ec66 <__sflush_r+0x9a>
 800ec00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	075a      	lsls	r2, r3, #29
 800ec06:	d505      	bpl.n	800ec14 <__sflush_r+0x48>
 800ec08:	6863      	ldr	r3, [r4, #4]
 800ec0a:	1ac0      	subs	r0, r0, r3
 800ec0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec0e:	b10b      	cbz	r3, 800ec14 <__sflush_r+0x48>
 800ec10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec12:	1ac0      	subs	r0, r0, r3
 800ec14:	2300      	movs	r3, #0
 800ec16:	4602      	mov	r2, r0
 800ec18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec1a:	6a21      	ldr	r1, [r4, #32]
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	47b0      	blx	r6
 800ec20:	1c43      	adds	r3, r0, #1
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	d106      	bne.n	800ec34 <__sflush_r+0x68>
 800ec26:	6829      	ldr	r1, [r5, #0]
 800ec28:	291d      	cmp	r1, #29
 800ec2a:	d82b      	bhi.n	800ec84 <__sflush_r+0xb8>
 800ec2c:	4a29      	ldr	r2, [pc, #164]	; (800ecd4 <__sflush_r+0x108>)
 800ec2e:	410a      	asrs	r2, r1
 800ec30:	07d6      	lsls	r6, r2, #31
 800ec32:	d427      	bmi.n	800ec84 <__sflush_r+0xb8>
 800ec34:	2200      	movs	r2, #0
 800ec36:	6062      	str	r2, [r4, #4]
 800ec38:	04d9      	lsls	r1, r3, #19
 800ec3a:	6922      	ldr	r2, [r4, #16]
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	d504      	bpl.n	800ec4a <__sflush_r+0x7e>
 800ec40:	1c42      	adds	r2, r0, #1
 800ec42:	d101      	bne.n	800ec48 <__sflush_r+0x7c>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	b903      	cbnz	r3, 800ec4a <__sflush_r+0x7e>
 800ec48:	6560      	str	r0, [r4, #84]	; 0x54
 800ec4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec4c:	602f      	str	r7, [r5, #0]
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	d0c9      	beq.n	800ebe6 <__sflush_r+0x1a>
 800ec52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec56:	4299      	cmp	r1, r3
 800ec58:	d002      	beq.n	800ec60 <__sflush_r+0x94>
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f7fe f8d6 	bl	800ce0c <_free_r>
 800ec60:	2000      	movs	r0, #0
 800ec62:	6360      	str	r0, [r4, #52]	; 0x34
 800ec64:	e7c0      	b.n	800ebe8 <__sflush_r+0x1c>
 800ec66:	2301      	movs	r3, #1
 800ec68:	4628      	mov	r0, r5
 800ec6a:	47b0      	blx	r6
 800ec6c:	1c41      	adds	r1, r0, #1
 800ec6e:	d1c8      	bne.n	800ec02 <__sflush_r+0x36>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d0c5      	beq.n	800ec02 <__sflush_r+0x36>
 800ec76:	2b1d      	cmp	r3, #29
 800ec78:	d001      	beq.n	800ec7e <__sflush_r+0xb2>
 800ec7a:	2b16      	cmp	r3, #22
 800ec7c:	d101      	bne.n	800ec82 <__sflush_r+0xb6>
 800ec7e:	602f      	str	r7, [r5, #0]
 800ec80:	e7b1      	b.n	800ebe6 <__sflush_r+0x1a>
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec88:	81a3      	strh	r3, [r4, #12]
 800ec8a:	e7ad      	b.n	800ebe8 <__sflush_r+0x1c>
 800ec8c:	690f      	ldr	r7, [r1, #16]
 800ec8e:	2f00      	cmp	r7, #0
 800ec90:	d0a9      	beq.n	800ebe6 <__sflush_r+0x1a>
 800ec92:	0793      	lsls	r3, r2, #30
 800ec94:	680e      	ldr	r6, [r1, #0]
 800ec96:	bf08      	it	eq
 800ec98:	694b      	ldreq	r3, [r1, #20]
 800ec9a:	600f      	str	r7, [r1, #0]
 800ec9c:	bf18      	it	ne
 800ec9e:	2300      	movne	r3, #0
 800eca0:	eba6 0807 	sub.w	r8, r6, r7
 800eca4:	608b      	str	r3, [r1, #8]
 800eca6:	f1b8 0f00 	cmp.w	r8, #0
 800ecaa:	dd9c      	ble.n	800ebe6 <__sflush_r+0x1a>
 800ecac:	6a21      	ldr	r1, [r4, #32]
 800ecae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecb0:	4643      	mov	r3, r8
 800ecb2:	463a      	mov	r2, r7
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	47b0      	blx	r6
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	dc06      	bgt.n	800ecca <__sflush_r+0xfe>
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecc2:	81a3      	strh	r3, [r4, #12]
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	e78e      	b.n	800ebe8 <__sflush_r+0x1c>
 800ecca:	4407      	add	r7, r0
 800eccc:	eba8 0800 	sub.w	r8, r8, r0
 800ecd0:	e7e9      	b.n	800eca6 <__sflush_r+0xda>
 800ecd2:	bf00      	nop
 800ecd4:	dfbffffe 	.word	0xdfbffffe

0800ecd8 <_fflush_r>:
 800ecd8:	b538      	push	{r3, r4, r5, lr}
 800ecda:	690b      	ldr	r3, [r1, #16]
 800ecdc:	4605      	mov	r5, r0
 800ecde:	460c      	mov	r4, r1
 800ece0:	b913      	cbnz	r3, 800ece8 <_fflush_r+0x10>
 800ece2:	2500      	movs	r5, #0
 800ece4:	4628      	mov	r0, r5
 800ece6:	bd38      	pop	{r3, r4, r5, pc}
 800ece8:	b118      	cbz	r0, 800ecf2 <_fflush_r+0x1a>
 800ecea:	6a03      	ldr	r3, [r0, #32]
 800ecec:	b90b      	cbnz	r3, 800ecf2 <_fflush_r+0x1a>
 800ecee:	f7fc ffc5 	bl	800bc7c <__sinit>
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0f3      	beq.n	800ece2 <_fflush_r+0xa>
 800ecfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecfc:	07d0      	lsls	r0, r2, #31
 800ecfe:	d404      	bmi.n	800ed0a <_fflush_r+0x32>
 800ed00:	0599      	lsls	r1, r3, #22
 800ed02:	d402      	bmi.n	800ed0a <_fflush_r+0x32>
 800ed04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed06:	f7fd f9e8 	bl	800c0da <__retarget_lock_acquire_recursive>
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f7ff ff5d 	bl	800ebcc <__sflush_r>
 800ed12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed14:	07da      	lsls	r2, r3, #31
 800ed16:	4605      	mov	r5, r0
 800ed18:	d4e4      	bmi.n	800ece4 <_fflush_r+0xc>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	059b      	lsls	r3, r3, #22
 800ed1e:	d4e1      	bmi.n	800ece4 <_fflush_r+0xc>
 800ed20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed22:	f7fd f9db 	bl	800c0dc <__retarget_lock_release_recursive>
 800ed26:	e7dd      	b.n	800ece4 <_fflush_r+0xc>

0800ed28 <__swhatbuf_r>:
 800ed28:	b570      	push	{r4, r5, r6, lr}
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed30:	2900      	cmp	r1, #0
 800ed32:	b096      	sub	sp, #88	; 0x58
 800ed34:	4615      	mov	r5, r2
 800ed36:	461e      	mov	r6, r3
 800ed38:	da0d      	bge.n	800ed56 <__swhatbuf_r+0x2e>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ed40:	f04f 0100 	mov.w	r1, #0
 800ed44:	bf0c      	ite	eq
 800ed46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ed4a:	2340      	movne	r3, #64	; 0x40
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	6031      	str	r1, [r6, #0]
 800ed50:	602b      	str	r3, [r5, #0]
 800ed52:	b016      	add	sp, #88	; 0x58
 800ed54:	bd70      	pop	{r4, r5, r6, pc}
 800ed56:	466a      	mov	r2, sp
 800ed58:	f000 f878 	bl	800ee4c <_fstat_r>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	dbec      	blt.n	800ed3a <__swhatbuf_r+0x12>
 800ed60:	9901      	ldr	r1, [sp, #4]
 800ed62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ed66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ed6a:	4259      	negs	r1, r3
 800ed6c:	4159      	adcs	r1, r3
 800ed6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed72:	e7eb      	b.n	800ed4c <__swhatbuf_r+0x24>

0800ed74 <__smakebuf_r>:
 800ed74:	898b      	ldrh	r3, [r1, #12]
 800ed76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed78:	079d      	lsls	r5, r3, #30
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	d507      	bpl.n	800ed90 <__smakebuf_r+0x1c>
 800ed80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	6123      	str	r3, [r4, #16]
 800ed88:	2301      	movs	r3, #1
 800ed8a:	6163      	str	r3, [r4, #20]
 800ed8c:	b002      	add	sp, #8
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}
 800ed90:	ab01      	add	r3, sp, #4
 800ed92:	466a      	mov	r2, sp
 800ed94:	f7ff ffc8 	bl	800ed28 <__swhatbuf_r>
 800ed98:	9900      	ldr	r1, [sp, #0]
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f7fe f8a9 	bl	800cef4 <_malloc_r>
 800eda2:	b948      	cbnz	r0, 800edb8 <__smakebuf_r+0x44>
 800eda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eda8:	059a      	lsls	r2, r3, #22
 800edaa:	d4ef      	bmi.n	800ed8c <__smakebuf_r+0x18>
 800edac:	f023 0303 	bic.w	r3, r3, #3
 800edb0:	f043 0302 	orr.w	r3, r3, #2
 800edb4:	81a3      	strh	r3, [r4, #12]
 800edb6:	e7e3      	b.n	800ed80 <__smakebuf_r+0xc>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	6020      	str	r0, [r4, #0]
 800edbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc0:	81a3      	strh	r3, [r4, #12]
 800edc2:	9b00      	ldr	r3, [sp, #0]
 800edc4:	6163      	str	r3, [r4, #20]
 800edc6:	9b01      	ldr	r3, [sp, #4]
 800edc8:	6120      	str	r0, [r4, #16]
 800edca:	b15b      	cbz	r3, 800ede4 <__smakebuf_r+0x70>
 800edcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edd0:	4630      	mov	r0, r6
 800edd2:	f000 f84d 	bl	800ee70 <_isatty_r>
 800edd6:	b128      	cbz	r0, 800ede4 <__smakebuf_r+0x70>
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	f023 0303 	bic.w	r3, r3, #3
 800edde:	f043 0301 	orr.w	r3, r3, #1
 800ede2:	81a3      	strh	r3, [r4, #12]
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	431d      	orrs	r5, r3
 800ede8:	81a5      	strh	r5, [r4, #12]
 800edea:	e7cf      	b.n	800ed8c <__smakebuf_r+0x18>

0800edec <_raise_r>:
 800edec:	291f      	cmp	r1, #31
 800edee:	b538      	push	{r3, r4, r5, lr}
 800edf0:	4604      	mov	r4, r0
 800edf2:	460d      	mov	r5, r1
 800edf4:	d904      	bls.n	800ee00 <_raise_r+0x14>
 800edf6:	2316      	movs	r3, #22
 800edf8:	6003      	str	r3, [r0, #0]
 800edfa:	f04f 30ff 	mov.w	r0, #4294967295
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee02:	b112      	cbz	r2, 800ee0a <_raise_r+0x1e>
 800ee04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee08:	b94b      	cbnz	r3, 800ee1e <_raise_r+0x32>
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f000 f852 	bl	800eeb4 <_getpid_r>
 800ee10:	462a      	mov	r2, r5
 800ee12:	4601      	mov	r1, r0
 800ee14:	4620      	mov	r0, r4
 800ee16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee1a:	f000 b839 	b.w	800ee90 <_kill_r>
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d00a      	beq.n	800ee38 <_raise_r+0x4c>
 800ee22:	1c59      	adds	r1, r3, #1
 800ee24:	d103      	bne.n	800ee2e <_raise_r+0x42>
 800ee26:	2316      	movs	r3, #22
 800ee28:	6003      	str	r3, [r0, #0]
 800ee2a:	2001      	movs	r0, #1
 800ee2c:	e7e7      	b.n	800edfe <_raise_r+0x12>
 800ee2e:	2400      	movs	r4, #0
 800ee30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee34:	4628      	mov	r0, r5
 800ee36:	4798      	blx	r3
 800ee38:	2000      	movs	r0, #0
 800ee3a:	e7e0      	b.n	800edfe <_raise_r+0x12>

0800ee3c <raise>:
 800ee3c:	4b02      	ldr	r3, [pc, #8]	; (800ee48 <raise+0xc>)
 800ee3e:	4601      	mov	r1, r0
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	f7ff bfd3 	b.w	800edec <_raise_r>
 800ee46:	bf00      	nop
 800ee48:	20000154 	.word	0x20000154

0800ee4c <_fstat_r>:
 800ee4c:	b538      	push	{r3, r4, r5, lr}
 800ee4e:	4d07      	ldr	r5, [pc, #28]	; (800ee6c <_fstat_r+0x20>)
 800ee50:	2300      	movs	r3, #0
 800ee52:	4604      	mov	r4, r0
 800ee54:	4608      	mov	r0, r1
 800ee56:	4611      	mov	r1, r2
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	f7f3 fc63 	bl	8002724 <_fstat>
 800ee5e:	1c43      	adds	r3, r0, #1
 800ee60:	d102      	bne.n	800ee68 <_fstat_r+0x1c>
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	b103      	cbz	r3, 800ee68 <_fstat_r+0x1c>
 800ee66:	6023      	str	r3, [r4, #0]
 800ee68:	bd38      	pop	{r3, r4, r5, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20002e70 	.word	0x20002e70

0800ee70 <_isatty_r>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	4d06      	ldr	r5, [pc, #24]	; (800ee8c <_isatty_r+0x1c>)
 800ee74:	2300      	movs	r3, #0
 800ee76:	4604      	mov	r4, r0
 800ee78:	4608      	mov	r0, r1
 800ee7a:	602b      	str	r3, [r5, #0]
 800ee7c:	f7f3 fc62 	bl	8002744 <_isatty>
 800ee80:	1c43      	adds	r3, r0, #1
 800ee82:	d102      	bne.n	800ee8a <_isatty_r+0x1a>
 800ee84:	682b      	ldr	r3, [r5, #0]
 800ee86:	b103      	cbz	r3, 800ee8a <_isatty_r+0x1a>
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	bd38      	pop	{r3, r4, r5, pc}
 800ee8c:	20002e70 	.word	0x20002e70

0800ee90 <_kill_r>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4d07      	ldr	r5, [pc, #28]	; (800eeb0 <_kill_r+0x20>)
 800ee94:	2300      	movs	r3, #0
 800ee96:	4604      	mov	r4, r0
 800ee98:	4608      	mov	r0, r1
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	602b      	str	r3, [r5, #0]
 800ee9e:	f7f3 fbfe 	bl	800269e <_kill>
 800eea2:	1c43      	adds	r3, r0, #1
 800eea4:	d102      	bne.n	800eeac <_kill_r+0x1c>
 800eea6:	682b      	ldr	r3, [r5, #0]
 800eea8:	b103      	cbz	r3, 800eeac <_kill_r+0x1c>
 800eeaa:	6023      	str	r3, [r4, #0]
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
 800eeae:	bf00      	nop
 800eeb0:	20002e70 	.word	0x20002e70

0800eeb4 <_getpid_r>:
 800eeb4:	f7f3 bbeb 	b.w	800268e <_getpid>

0800eeb8 <_sbrk_r>:
 800eeb8:	b538      	push	{r3, r4, r5, lr}
 800eeba:	4d06      	ldr	r5, [pc, #24]	; (800eed4 <_sbrk_r+0x1c>)
 800eebc:	2300      	movs	r3, #0
 800eebe:	4604      	mov	r4, r0
 800eec0:	4608      	mov	r0, r1
 800eec2:	602b      	str	r3, [r5, #0]
 800eec4:	f7f3 fc56 	bl	8002774 <_sbrk>
 800eec8:	1c43      	adds	r3, r0, #1
 800eeca:	d102      	bne.n	800eed2 <_sbrk_r+0x1a>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	b103      	cbz	r3, 800eed2 <_sbrk_r+0x1a>
 800eed0:	6023      	str	r3, [r4, #0]
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	20002e70 	.word	0x20002e70

0800eed8 <nan>:
 800eed8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eee0 <nan+0x8>
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	00000000 	.word	0x00000000
 800eee4:	7ff80000 	.word	0x7ff80000

0800eee8 <_calloc_r>:
 800eee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeea:	fba1 2402 	umull	r2, r4, r1, r2
 800eeee:	b94c      	cbnz	r4, 800ef04 <_calloc_r+0x1c>
 800eef0:	4611      	mov	r1, r2
 800eef2:	9201      	str	r2, [sp, #4]
 800eef4:	f7fd fffe 	bl	800cef4 <_malloc_r>
 800eef8:	9a01      	ldr	r2, [sp, #4]
 800eefa:	4605      	mov	r5, r0
 800eefc:	b930      	cbnz	r0, 800ef0c <_calloc_r+0x24>
 800eefe:	4628      	mov	r0, r5
 800ef00:	b003      	add	sp, #12
 800ef02:	bd30      	pop	{r4, r5, pc}
 800ef04:	220c      	movs	r2, #12
 800ef06:	6002      	str	r2, [r0, #0]
 800ef08:	2500      	movs	r5, #0
 800ef0a:	e7f8      	b.n	800eefe <_calloc_r+0x16>
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	f7fd f855 	bl	800bfbc <memset>
 800ef12:	e7f4      	b.n	800eefe <_calloc_r+0x16>

0800ef14 <rshift>:
 800ef14:	6903      	ldr	r3, [r0, #16]
 800ef16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef22:	f100 0414 	add.w	r4, r0, #20
 800ef26:	dd45      	ble.n	800efb4 <rshift+0xa0>
 800ef28:	f011 011f 	ands.w	r1, r1, #31
 800ef2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef34:	d10c      	bne.n	800ef50 <rshift+0x3c>
 800ef36:	f100 0710 	add.w	r7, r0, #16
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	42b1      	cmp	r1, r6
 800ef3e:	d334      	bcc.n	800efaa <rshift+0x96>
 800ef40:	1a9b      	subs	r3, r3, r2
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	1eea      	subs	r2, r5, #3
 800ef46:	4296      	cmp	r6, r2
 800ef48:	bf38      	it	cc
 800ef4a:	2300      	movcc	r3, #0
 800ef4c:	4423      	add	r3, r4
 800ef4e:	e015      	b.n	800ef7c <rshift+0x68>
 800ef50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef54:	f1c1 0820 	rsb	r8, r1, #32
 800ef58:	40cf      	lsrs	r7, r1
 800ef5a:	f105 0e04 	add.w	lr, r5, #4
 800ef5e:	46a1      	mov	r9, r4
 800ef60:	4576      	cmp	r6, lr
 800ef62:	46f4      	mov	ip, lr
 800ef64:	d815      	bhi.n	800ef92 <rshift+0x7e>
 800ef66:	1a9a      	subs	r2, r3, r2
 800ef68:	0092      	lsls	r2, r2, #2
 800ef6a:	3a04      	subs	r2, #4
 800ef6c:	3501      	adds	r5, #1
 800ef6e:	42ae      	cmp	r6, r5
 800ef70:	bf38      	it	cc
 800ef72:	2200      	movcc	r2, #0
 800ef74:	18a3      	adds	r3, r4, r2
 800ef76:	50a7      	str	r7, [r4, r2]
 800ef78:	b107      	cbz	r7, 800ef7c <rshift+0x68>
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	1b1a      	subs	r2, r3, r4
 800ef7e:	42a3      	cmp	r3, r4
 800ef80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef84:	bf08      	it	eq
 800ef86:	2300      	moveq	r3, #0
 800ef88:	6102      	str	r2, [r0, #16]
 800ef8a:	bf08      	it	eq
 800ef8c:	6143      	streq	r3, [r0, #20]
 800ef8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef92:	f8dc c000 	ldr.w	ip, [ip]
 800ef96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ef9e:	f849 7b04 	str.w	r7, [r9], #4
 800efa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efa6:	40cf      	lsrs	r7, r1
 800efa8:	e7da      	b.n	800ef60 <rshift+0x4c>
 800efaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800efae:	f847 cf04 	str.w	ip, [r7, #4]!
 800efb2:	e7c3      	b.n	800ef3c <rshift+0x28>
 800efb4:	4623      	mov	r3, r4
 800efb6:	e7e1      	b.n	800ef7c <rshift+0x68>

0800efb8 <__hexdig_fun>:
 800efb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800efbc:	2b09      	cmp	r3, #9
 800efbe:	d802      	bhi.n	800efc6 <__hexdig_fun+0xe>
 800efc0:	3820      	subs	r0, #32
 800efc2:	b2c0      	uxtb	r0, r0
 800efc4:	4770      	bx	lr
 800efc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efca:	2b05      	cmp	r3, #5
 800efcc:	d801      	bhi.n	800efd2 <__hexdig_fun+0x1a>
 800efce:	3847      	subs	r0, #71	; 0x47
 800efd0:	e7f7      	b.n	800efc2 <__hexdig_fun+0xa>
 800efd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800efd6:	2b05      	cmp	r3, #5
 800efd8:	d801      	bhi.n	800efde <__hexdig_fun+0x26>
 800efda:	3827      	subs	r0, #39	; 0x27
 800efdc:	e7f1      	b.n	800efc2 <__hexdig_fun+0xa>
 800efde:	2000      	movs	r0, #0
 800efe0:	4770      	bx	lr
	...

0800efe4 <__gethex>:
 800efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	4617      	mov	r7, r2
 800efea:	680a      	ldr	r2, [r1, #0]
 800efec:	b085      	sub	sp, #20
 800efee:	f102 0b02 	add.w	fp, r2, #2
 800eff2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eff6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800effa:	4681      	mov	r9, r0
 800effc:	468a      	mov	sl, r1
 800effe:	9302      	str	r3, [sp, #8]
 800f000:	32fe      	adds	r2, #254	; 0xfe
 800f002:	eb02 030b 	add.w	r3, r2, fp
 800f006:	46d8      	mov	r8, fp
 800f008:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f00c:	9301      	str	r3, [sp, #4]
 800f00e:	2830      	cmp	r0, #48	; 0x30
 800f010:	d0f7      	beq.n	800f002 <__gethex+0x1e>
 800f012:	f7ff ffd1 	bl	800efb8 <__hexdig_fun>
 800f016:	4604      	mov	r4, r0
 800f018:	2800      	cmp	r0, #0
 800f01a:	d138      	bne.n	800f08e <__gethex+0xaa>
 800f01c:	49a7      	ldr	r1, [pc, #668]	; (800f2bc <__gethex+0x2d8>)
 800f01e:	2201      	movs	r2, #1
 800f020:	4640      	mov	r0, r8
 800f022:	f7fc ffd3 	bl	800bfcc <strncmp>
 800f026:	4606      	mov	r6, r0
 800f028:	2800      	cmp	r0, #0
 800f02a:	d169      	bne.n	800f100 <__gethex+0x11c>
 800f02c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f030:	465d      	mov	r5, fp
 800f032:	f7ff ffc1 	bl	800efb8 <__hexdig_fun>
 800f036:	2800      	cmp	r0, #0
 800f038:	d064      	beq.n	800f104 <__gethex+0x120>
 800f03a:	465a      	mov	r2, fp
 800f03c:	7810      	ldrb	r0, [r2, #0]
 800f03e:	2830      	cmp	r0, #48	; 0x30
 800f040:	4690      	mov	r8, r2
 800f042:	f102 0201 	add.w	r2, r2, #1
 800f046:	d0f9      	beq.n	800f03c <__gethex+0x58>
 800f048:	f7ff ffb6 	bl	800efb8 <__hexdig_fun>
 800f04c:	2301      	movs	r3, #1
 800f04e:	fab0 f480 	clz	r4, r0
 800f052:	0964      	lsrs	r4, r4, #5
 800f054:	465e      	mov	r6, fp
 800f056:	9301      	str	r3, [sp, #4]
 800f058:	4642      	mov	r2, r8
 800f05a:	4615      	mov	r5, r2
 800f05c:	3201      	adds	r2, #1
 800f05e:	7828      	ldrb	r0, [r5, #0]
 800f060:	f7ff ffaa 	bl	800efb8 <__hexdig_fun>
 800f064:	2800      	cmp	r0, #0
 800f066:	d1f8      	bne.n	800f05a <__gethex+0x76>
 800f068:	4994      	ldr	r1, [pc, #592]	; (800f2bc <__gethex+0x2d8>)
 800f06a:	2201      	movs	r2, #1
 800f06c:	4628      	mov	r0, r5
 800f06e:	f7fc ffad 	bl	800bfcc <strncmp>
 800f072:	b978      	cbnz	r0, 800f094 <__gethex+0xb0>
 800f074:	b946      	cbnz	r6, 800f088 <__gethex+0xa4>
 800f076:	1c6e      	adds	r6, r5, #1
 800f078:	4632      	mov	r2, r6
 800f07a:	4615      	mov	r5, r2
 800f07c:	3201      	adds	r2, #1
 800f07e:	7828      	ldrb	r0, [r5, #0]
 800f080:	f7ff ff9a 	bl	800efb8 <__hexdig_fun>
 800f084:	2800      	cmp	r0, #0
 800f086:	d1f8      	bne.n	800f07a <__gethex+0x96>
 800f088:	1b73      	subs	r3, r6, r5
 800f08a:	009e      	lsls	r6, r3, #2
 800f08c:	e004      	b.n	800f098 <__gethex+0xb4>
 800f08e:	2400      	movs	r4, #0
 800f090:	4626      	mov	r6, r4
 800f092:	e7e1      	b.n	800f058 <__gethex+0x74>
 800f094:	2e00      	cmp	r6, #0
 800f096:	d1f7      	bne.n	800f088 <__gethex+0xa4>
 800f098:	782b      	ldrb	r3, [r5, #0]
 800f09a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f09e:	2b50      	cmp	r3, #80	; 0x50
 800f0a0:	d13d      	bne.n	800f11e <__gethex+0x13a>
 800f0a2:	786b      	ldrb	r3, [r5, #1]
 800f0a4:	2b2b      	cmp	r3, #43	; 0x2b
 800f0a6:	d02f      	beq.n	800f108 <__gethex+0x124>
 800f0a8:	2b2d      	cmp	r3, #45	; 0x2d
 800f0aa:	d031      	beq.n	800f110 <__gethex+0x12c>
 800f0ac:	1c69      	adds	r1, r5, #1
 800f0ae:	f04f 0b00 	mov.w	fp, #0
 800f0b2:	7808      	ldrb	r0, [r1, #0]
 800f0b4:	f7ff ff80 	bl	800efb8 <__hexdig_fun>
 800f0b8:	1e42      	subs	r2, r0, #1
 800f0ba:	b2d2      	uxtb	r2, r2
 800f0bc:	2a18      	cmp	r2, #24
 800f0be:	d82e      	bhi.n	800f11e <__gethex+0x13a>
 800f0c0:	f1a0 0210 	sub.w	r2, r0, #16
 800f0c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0c8:	f7ff ff76 	bl	800efb8 <__hexdig_fun>
 800f0cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800f0d0:	fa5f fc8c 	uxtb.w	ip, ip
 800f0d4:	f1bc 0f18 	cmp.w	ip, #24
 800f0d8:	d91d      	bls.n	800f116 <__gethex+0x132>
 800f0da:	f1bb 0f00 	cmp.w	fp, #0
 800f0de:	d000      	beq.n	800f0e2 <__gethex+0xfe>
 800f0e0:	4252      	negs	r2, r2
 800f0e2:	4416      	add	r6, r2
 800f0e4:	f8ca 1000 	str.w	r1, [sl]
 800f0e8:	b1dc      	cbz	r4, 800f122 <__gethex+0x13e>
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bf14      	ite	ne
 800f0f0:	f04f 0800 	movne.w	r8, #0
 800f0f4:	f04f 0806 	moveq.w	r8, #6
 800f0f8:	4640      	mov	r0, r8
 800f0fa:	b005      	add	sp, #20
 800f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f100:	4645      	mov	r5, r8
 800f102:	4626      	mov	r6, r4
 800f104:	2401      	movs	r4, #1
 800f106:	e7c7      	b.n	800f098 <__gethex+0xb4>
 800f108:	f04f 0b00 	mov.w	fp, #0
 800f10c:	1ca9      	adds	r1, r5, #2
 800f10e:	e7d0      	b.n	800f0b2 <__gethex+0xce>
 800f110:	f04f 0b01 	mov.w	fp, #1
 800f114:	e7fa      	b.n	800f10c <__gethex+0x128>
 800f116:	230a      	movs	r3, #10
 800f118:	fb03 0002 	mla	r0, r3, r2, r0
 800f11c:	e7d0      	b.n	800f0c0 <__gethex+0xdc>
 800f11e:	4629      	mov	r1, r5
 800f120:	e7e0      	b.n	800f0e4 <__gethex+0x100>
 800f122:	eba5 0308 	sub.w	r3, r5, r8
 800f126:	3b01      	subs	r3, #1
 800f128:	4621      	mov	r1, r4
 800f12a:	2b07      	cmp	r3, #7
 800f12c:	dc0a      	bgt.n	800f144 <__gethex+0x160>
 800f12e:	4648      	mov	r0, r9
 800f130:	f7fd ff6c 	bl	800d00c <_Balloc>
 800f134:	4604      	mov	r4, r0
 800f136:	b940      	cbnz	r0, 800f14a <__gethex+0x166>
 800f138:	4b61      	ldr	r3, [pc, #388]	; (800f2c0 <__gethex+0x2dc>)
 800f13a:	4602      	mov	r2, r0
 800f13c:	21e4      	movs	r1, #228	; 0xe4
 800f13e:	4861      	ldr	r0, [pc, #388]	; (800f2c4 <__gethex+0x2e0>)
 800f140:	f7fb fe7c 	bl	800ae3c <__assert_func>
 800f144:	3101      	adds	r1, #1
 800f146:	105b      	asrs	r3, r3, #1
 800f148:	e7ef      	b.n	800f12a <__gethex+0x146>
 800f14a:	f100 0a14 	add.w	sl, r0, #20
 800f14e:	2300      	movs	r3, #0
 800f150:	495a      	ldr	r1, [pc, #360]	; (800f2bc <__gethex+0x2d8>)
 800f152:	f8cd a004 	str.w	sl, [sp, #4]
 800f156:	469b      	mov	fp, r3
 800f158:	45a8      	cmp	r8, r5
 800f15a:	d342      	bcc.n	800f1e2 <__gethex+0x1fe>
 800f15c:	9801      	ldr	r0, [sp, #4]
 800f15e:	f840 bb04 	str.w	fp, [r0], #4
 800f162:	eba0 000a 	sub.w	r0, r0, sl
 800f166:	1080      	asrs	r0, r0, #2
 800f168:	6120      	str	r0, [r4, #16]
 800f16a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f16e:	4658      	mov	r0, fp
 800f170:	f7fe f83e 	bl	800d1f0 <__hi0bits>
 800f174:	683d      	ldr	r5, [r7, #0]
 800f176:	eba8 0000 	sub.w	r0, r8, r0
 800f17a:	42a8      	cmp	r0, r5
 800f17c:	dd59      	ble.n	800f232 <__gethex+0x24e>
 800f17e:	eba0 0805 	sub.w	r8, r0, r5
 800f182:	4641      	mov	r1, r8
 800f184:	4620      	mov	r0, r4
 800f186:	f7fe fbcd 	bl	800d924 <__any_on>
 800f18a:	4683      	mov	fp, r0
 800f18c:	b1b8      	cbz	r0, 800f1be <__gethex+0x1da>
 800f18e:	f108 33ff 	add.w	r3, r8, #4294967295
 800f192:	1159      	asrs	r1, r3, #5
 800f194:	f003 021f 	and.w	r2, r3, #31
 800f198:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f19c:	f04f 0b01 	mov.w	fp, #1
 800f1a0:	fa0b f202 	lsl.w	r2, fp, r2
 800f1a4:	420a      	tst	r2, r1
 800f1a6:	d00a      	beq.n	800f1be <__gethex+0x1da>
 800f1a8:	455b      	cmp	r3, fp
 800f1aa:	dd06      	ble.n	800f1ba <__gethex+0x1d6>
 800f1ac:	f1a8 0102 	sub.w	r1, r8, #2
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f7fe fbb7 	bl	800d924 <__any_on>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d138      	bne.n	800f22c <__gethex+0x248>
 800f1ba:	f04f 0b02 	mov.w	fp, #2
 800f1be:	4641      	mov	r1, r8
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f7ff fea7 	bl	800ef14 <rshift>
 800f1c6:	4446      	add	r6, r8
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	42b3      	cmp	r3, r6
 800f1cc:	da41      	bge.n	800f252 <__gethex+0x26e>
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	4648      	mov	r0, r9
 800f1d2:	f7fd ff5b 	bl	800d08c <_Bfree>
 800f1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1d8:	2300      	movs	r3, #0
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f1e0:	e78a      	b.n	800f0f8 <__gethex+0x114>
 800f1e2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f1e6:	2a2e      	cmp	r2, #46	; 0x2e
 800f1e8:	d014      	beq.n	800f214 <__gethex+0x230>
 800f1ea:	2b20      	cmp	r3, #32
 800f1ec:	d106      	bne.n	800f1fc <__gethex+0x218>
 800f1ee:	9b01      	ldr	r3, [sp, #4]
 800f1f0:	f843 bb04 	str.w	fp, [r3], #4
 800f1f4:	f04f 0b00 	mov.w	fp, #0
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	465b      	mov	r3, fp
 800f1fc:	7828      	ldrb	r0, [r5, #0]
 800f1fe:	9303      	str	r3, [sp, #12]
 800f200:	f7ff feda 	bl	800efb8 <__hexdig_fun>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	f000 000f 	and.w	r0, r0, #15
 800f20a:	4098      	lsls	r0, r3
 800f20c:	ea4b 0b00 	orr.w	fp, fp, r0
 800f210:	3304      	adds	r3, #4
 800f212:	e7a1      	b.n	800f158 <__gethex+0x174>
 800f214:	45a8      	cmp	r8, r5
 800f216:	d8e8      	bhi.n	800f1ea <__gethex+0x206>
 800f218:	2201      	movs	r2, #1
 800f21a:	4628      	mov	r0, r5
 800f21c:	9303      	str	r3, [sp, #12]
 800f21e:	f7fc fed5 	bl	800bfcc <strncmp>
 800f222:	4926      	ldr	r1, [pc, #152]	; (800f2bc <__gethex+0x2d8>)
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	2800      	cmp	r0, #0
 800f228:	d1df      	bne.n	800f1ea <__gethex+0x206>
 800f22a:	e795      	b.n	800f158 <__gethex+0x174>
 800f22c:	f04f 0b03 	mov.w	fp, #3
 800f230:	e7c5      	b.n	800f1be <__gethex+0x1da>
 800f232:	da0b      	bge.n	800f24c <__gethex+0x268>
 800f234:	eba5 0800 	sub.w	r8, r5, r0
 800f238:	4621      	mov	r1, r4
 800f23a:	4642      	mov	r2, r8
 800f23c:	4648      	mov	r0, r9
 800f23e:	f7fe f93f 	bl	800d4c0 <__lshift>
 800f242:	eba6 0608 	sub.w	r6, r6, r8
 800f246:	4604      	mov	r4, r0
 800f248:	f100 0a14 	add.w	sl, r0, #20
 800f24c:	f04f 0b00 	mov.w	fp, #0
 800f250:	e7ba      	b.n	800f1c8 <__gethex+0x1e4>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	42b3      	cmp	r3, r6
 800f256:	dd73      	ble.n	800f340 <__gethex+0x35c>
 800f258:	1b9e      	subs	r6, r3, r6
 800f25a:	42b5      	cmp	r5, r6
 800f25c:	dc34      	bgt.n	800f2c8 <__gethex+0x2e4>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b02      	cmp	r3, #2
 800f262:	d023      	beq.n	800f2ac <__gethex+0x2c8>
 800f264:	2b03      	cmp	r3, #3
 800f266:	d025      	beq.n	800f2b4 <__gethex+0x2d0>
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d115      	bne.n	800f298 <__gethex+0x2b4>
 800f26c:	42b5      	cmp	r5, r6
 800f26e:	d113      	bne.n	800f298 <__gethex+0x2b4>
 800f270:	2d01      	cmp	r5, #1
 800f272:	d10b      	bne.n	800f28c <__gethex+0x2a8>
 800f274:	9a02      	ldr	r2, [sp, #8]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6013      	str	r3, [r2, #0]
 800f27a:	2301      	movs	r3, #1
 800f27c:	6123      	str	r3, [r4, #16]
 800f27e:	f8ca 3000 	str.w	r3, [sl]
 800f282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f284:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f288:	601c      	str	r4, [r3, #0]
 800f28a:	e735      	b.n	800f0f8 <__gethex+0x114>
 800f28c:	1e69      	subs	r1, r5, #1
 800f28e:	4620      	mov	r0, r4
 800f290:	f7fe fb48 	bl	800d924 <__any_on>
 800f294:	2800      	cmp	r0, #0
 800f296:	d1ed      	bne.n	800f274 <__gethex+0x290>
 800f298:	4621      	mov	r1, r4
 800f29a:	4648      	mov	r0, r9
 800f29c:	f7fd fef6 	bl	800d08c <_Bfree>
 800f2a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	6013      	str	r3, [r2, #0]
 800f2a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f2aa:	e725      	b.n	800f0f8 <__gethex+0x114>
 800f2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1f2      	bne.n	800f298 <__gethex+0x2b4>
 800f2b2:	e7df      	b.n	800f274 <__gethex+0x290>
 800f2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1dc      	bne.n	800f274 <__gethex+0x290>
 800f2ba:	e7ed      	b.n	800f298 <__gethex+0x2b4>
 800f2bc:	0800fc34 	.word	0x0800fc34
 800f2c0:	0800fac9 	.word	0x0800fac9
 800f2c4:	0800fda2 	.word	0x0800fda2
 800f2c8:	f106 38ff 	add.w	r8, r6, #4294967295
 800f2cc:	f1bb 0f00 	cmp.w	fp, #0
 800f2d0:	d133      	bne.n	800f33a <__gethex+0x356>
 800f2d2:	f1b8 0f00 	cmp.w	r8, #0
 800f2d6:	d004      	beq.n	800f2e2 <__gethex+0x2fe>
 800f2d8:	4641      	mov	r1, r8
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f7fe fb22 	bl	800d924 <__any_on>
 800f2e0:	4683      	mov	fp, r0
 800f2e2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f2ec:	f008 081f 	and.w	r8, r8, #31
 800f2f0:	fa03 f308 	lsl.w	r3, r3, r8
 800f2f4:	4213      	tst	r3, r2
 800f2f6:	4631      	mov	r1, r6
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	bf18      	it	ne
 800f2fc:	f04b 0b02 	orrne.w	fp, fp, #2
 800f300:	1bad      	subs	r5, r5, r6
 800f302:	f7ff fe07 	bl	800ef14 <rshift>
 800f306:	687e      	ldr	r6, [r7, #4]
 800f308:	f04f 0802 	mov.w	r8, #2
 800f30c:	f1bb 0f00 	cmp.w	fp, #0
 800f310:	d04a      	beq.n	800f3a8 <__gethex+0x3c4>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2b02      	cmp	r3, #2
 800f316:	d016      	beq.n	800f346 <__gethex+0x362>
 800f318:	2b03      	cmp	r3, #3
 800f31a:	d018      	beq.n	800f34e <__gethex+0x36a>
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d109      	bne.n	800f334 <__gethex+0x350>
 800f320:	f01b 0f02 	tst.w	fp, #2
 800f324:	d006      	beq.n	800f334 <__gethex+0x350>
 800f326:	f8da 3000 	ldr.w	r3, [sl]
 800f32a:	ea4b 0b03 	orr.w	fp, fp, r3
 800f32e:	f01b 0f01 	tst.w	fp, #1
 800f332:	d10f      	bne.n	800f354 <__gethex+0x370>
 800f334:	f048 0810 	orr.w	r8, r8, #16
 800f338:	e036      	b.n	800f3a8 <__gethex+0x3c4>
 800f33a:	f04f 0b01 	mov.w	fp, #1
 800f33e:	e7d0      	b.n	800f2e2 <__gethex+0x2fe>
 800f340:	f04f 0801 	mov.w	r8, #1
 800f344:	e7e2      	b.n	800f30c <__gethex+0x328>
 800f346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f348:	f1c3 0301 	rsb	r3, r3, #1
 800f34c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f34e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f350:	2b00      	cmp	r3, #0
 800f352:	d0ef      	beq.n	800f334 <__gethex+0x350>
 800f354:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f358:	f104 0214 	add.w	r2, r4, #20
 800f35c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f360:	9301      	str	r3, [sp, #4]
 800f362:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f366:	2300      	movs	r3, #0
 800f368:	4694      	mov	ip, r2
 800f36a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f36e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f372:	d01e      	beq.n	800f3b2 <__gethex+0x3ce>
 800f374:	3101      	adds	r1, #1
 800f376:	f8cc 1000 	str.w	r1, [ip]
 800f37a:	f1b8 0f02 	cmp.w	r8, #2
 800f37e:	f104 0214 	add.w	r2, r4, #20
 800f382:	d13d      	bne.n	800f400 <__gethex+0x41c>
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	3b01      	subs	r3, #1
 800f388:	42ab      	cmp	r3, r5
 800f38a:	d10b      	bne.n	800f3a4 <__gethex+0x3c0>
 800f38c:	1169      	asrs	r1, r5, #5
 800f38e:	2301      	movs	r3, #1
 800f390:	f005 051f 	and.w	r5, r5, #31
 800f394:	fa03 f505 	lsl.w	r5, r3, r5
 800f398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f39c:	421d      	tst	r5, r3
 800f39e:	bf18      	it	ne
 800f3a0:	f04f 0801 	movne.w	r8, #1
 800f3a4:	f048 0820 	orr.w	r8, r8, #32
 800f3a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3aa:	601c      	str	r4, [r3, #0]
 800f3ac:	9b02      	ldr	r3, [sp, #8]
 800f3ae:	601e      	str	r6, [r3, #0]
 800f3b0:	e6a2      	b.n	800f0f8 <__gethex+0x114>
 800f3b2:	4290      	cmp	r0, r2
 800f3b4:	f842 3c04 	str.w	r3, [r2, #-4]
 800f3b8:	d8d6      	bhi.n	800f368 <__gethex+0x384>
 800f3ba:	68a2      	ldr	r2, [r4, #8]
 800f3bc:	4593      	cmp	fp, r2
 800f3be:	db17      	blt.n	800f3f0 <__gethex+0x40c>
 800f3c0:	6861      	ldr	r1, [r4, #4]
 800f3c2:	4648      	mov	r0, r9
 800f3c4:	3101      	adds	r1, #1
 800f3c6:	f7fd fe21 	bl	800d00c <_Balloc>
 800f3ca:	4682      	mov	sl, r0
 800f3cc:	b918      	cbnz	r0, 800f3d6 <__gethex+0x3f2>
 800f3ce:	4b1b      	ldr	r3, [pc, #108]	; (800f43c <__gethex+0x458>)
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	2184      	movs	r1, #132	; 0x84
 800f3d4:	e6b3      	b.n	800f13e <__gethex+0x15a>
 800f3d6:	6922      	ldr	r2, [r4, #16]
 800f3d8:	3202      	adds	r2, #2
 800f3da:	f104 010c 	add.w	r1, r4, #12
 800f3de:	0092      	lsls	r2, r2, #2
 800f3e0:	300c      	adds	r0, #12
 800f3e2:	f7fc fe7c 	bl	800c0de <memcpy>
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	4648      	mov	r0, r9
 800f3ea:	f7fd fe4f 	bl	800d08c <_Bfree>
 800f3ee:	4654      	mov	r4, sl
 800f3f0:	6922      	ldr	r2, [r4, #16]
 800f3f2:	1c51      	adds	r1, r2, #1
 800f3f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3f8:	6121      	str	r1, [r4, #16]
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	6151      	str	r1, [r2, #20]
 800f3fe:	e7bc      	b.n	800f37a <__gethex+0x396>
 800f400:	6921      	ldr	r1, [r4, #16]
 800f402:	4559      	cmp	r1, fp
 800f404:	dd0b      	ble.n	800f41e <__gethex+0x43a>
 800f406:	2101      	movs	r1, #1
 800f408:	4620      	mov	r0, r4
 800f40a:	f7ff fd83 	bl	800ef14 <rshift>
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	3601      	adds	r6, #1
 800f412:	42b3      	cmp	r3, r6
 800f414:	f6ff aedb 	blt.w	800f1ce <__gethex+0x1ea>
 800f418:	f04f 0801 	mov.w	r8, #1
 800f41c:	e7c2      	b.n	800f3a4 <__gethex+0x3c0>
 800f41e:	f015 051f 	ands.w	r5, r5, #31
 800f422:	d0f9      	beq.n	800f418 <__gethex+0x434>
 800f424:	9b01      	ldr	r3, [sp, #4]
 800f426:	441a      	add	r2, r3
 800f428:	f1c5 0520 	rsb	r5, r5, #32
 800f42c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f430:	f7fd fede 	bl	800d1f0 <__hi0bits>
 800f434:	42a8      	cmp	r0, r5
 800f436:	dbe6      	blt.n	800f406 <__gethex+0x422>
 800f438:	e7ee      	b.n	800f418 <__gethex+0x434>
 800f43a:	bf00      	nop
 800f43c:	0800fac9 	.word	0x0800fac9

0800f440 <L_shift>:
 800f440:	f1c2 0208 	rsb	r2, r2, #8
 800f444:	0092      	lsls	r2, r2, #2
 800f446:	b570      	push	{r4, r5, r6, lr}
 800f448:	f1c2 0620 	rsb	r6, r2, #32
 800f44c:	6843      	ldr	r3, [r0, #4]
 800f44e:	6804      	ldr	r4, [r0, #0]
 800f450:	fa03 f506 	lsl.w	r5, r3, r6
 800f454:	432c      	orrs	r4, r5
 800f456:	40d3      	lsrs	r3, r2
 800f458:	6004      	str	r4, [r0, #0]
 800f45a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f45e:	4288      	cmp	r0, r1
 800f460:	d3f4      	bcc.n	800f44c <L_shift+0xc>
 800f462:	bd70      	pop	{r4, r5, r6, pc}

0800f464 <__match>:
 800f464:	b530      	push	{r4, r5, lr}
 800f466:	6803      	ldr	r3, [r0, #0]
 800f468:	3301      	adds	r3, #1
 800f46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f46e:	b914      	cbnz	r4, 800f476 <__match+0x12>
 800f470:	6003      	str	r3, [r0, #0]
 800f472:	2001      	movs	r0, #1
 800f474:	bd30      	pop	{r4, r5, pc}
 800f476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f47a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f47e:	2d19      	cmp	r5, #25
 800f480:	bf98      	it	ls
 800f482:	3220      	addls	r2, #32
 800f484:	42a2      	cmp	r2, r4
 800f486:	d0f0      	beq.n	800f46a <__match+0x6>
 800f488:	2000      	movs	r0, #0
 800f48a:	e7f3      	b.n	800f474 <__match+0x10>

0800f48c <__hexnan>:
 800f48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f490:	680b      	ldr	r3, [r1, #0]
 800f492:	6801      	ldr	r1, [r0, #0]
 800f494:	115e      	asrs	r6, r3, #5
 800f496:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f49a:	f013 031f 	ands.w	r3, r3, #31
 800f49e:	b087      	sub	sp, #28
 800f4a0:	bf18      	it	ne
 800f4a2:	3604      	addne	r6, #4
 800f4a4:	2500      	movs	r5, #0
 800f4a6:	1f37      	subs	r7, r6, #4
 800f4a8:	4682      	mov	sl, r0
 800f4aa:	4690      	mov	r8, r2
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4b2:	46b9      	mov	r9, r7
 800f4b4:	463c      	mov	r4, r7
 800f4b6:	9502      	str	r5, [sp, #8]
 800f4b8:	46ab      	mov	fp, r5
 800f4ba:	784a      	ldrb	r2, [r1, #1]
 800f4bc:	1c4b      	adds	r3, r1, #1
 800f4be:	9303      	str	r3, [sp, #12]
 800f4c0:	b342      	cbz	r2, 800f514 <__hexnan+0x88>
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	9105      	str	r1, [sp, #20]
 800f4c6:	9204      	str	r2, [sp, #16]
 800f4c8:	f7ff fd76 	bl	800efb8 <__hexdig_fun>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d14f      	bne.n	800f570 <__hexnan+0xe4>
 800f4d0:	9a04      	ldr	r2, [sp, #16]
 800f4d2:	9905      	ldr	r1, [sp, #20]
 800f4d4:	2a20      	cmp	r2, #32
 800f4d6:	d818      	bhi.n	800f50a <__hexnan+0x7e>
 800f4d8:	9b02      	ldr	r3, [sp, #8]
 800f4da:	459b      	cmp	fp, r3
 800f4dc:	dd13      	ble.n	800f506 <__hexnan+0x7a>
 800f4de:	454c      	cmp	r4, r9
 800f4e0:	d206      	bcs.n	800f4f0 <__hexnan+0x64>
 800f4e2:	2d07      	cmp	r5, #7
 800f4e4:	dc04      	bgt.n	800f4f0 <__hexnan+0x64>
 800f4e6:	462a      	mov	r2, r5
 800f4e8:	4649      	mov	r1, r9
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f7ff ffa8 	bl	800f440 <L_shift>
 800f4f0:	4544      	cmp	r4, r8
 800f4f2:	d950      	bls.n	800f596 <__hexnan+0x10a>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f1a4 0904 	sub.w	r9, r4, #4
 800f4fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4fe:	f8cd b008 	str.w	fp, [sp, #8]
 800f502:	464c      	mov	r4, r9
 800f504:	461d      	mov	r5, r3
 800f506:	9903      	ldr	r1, [sp, #12]
 800f508:	e7d7      	b.n	800f4ba <__hexnan+0x2e>
 800f50a:	2a29      	cmp	r2, #41	; 0x29
 800f50c:	d155      	bne.n	800f5ba <__hexnan+0x12e>
 800f50e:	3102      	adds	r1, #2
 800f510:	f8ca 1000 	str.w	r1, [sl]
 800f514:	f1bb 0f00 	cmp.w	fp, #0
 800f518:	d04f      	beq.n	800f5ba <__hexnan+0x12e>
 800f51a:	454c      	cmp	r4, r9
 800f51c:	d206      	bcs.n	800f52c <__hexnan+0xa0>
 800f51e:	2d07      	cmp	r5, #7
 800f520:	dc04      	bgt.n	800f52c <__hexnan+0xa0>
 800f522:	462a      	mov	r2, r5
 800f524:	4649      	mov	r1, r9
 800f526:	4620      	mov	r0, r4
 800f528:	f7ff ff8a 	bl	800f440 <L_shift>
 800f52c:	4544      	cmp	r4, r8
 800f52e:	d934      	bls.n	800f59a <__hexnan+0x10e>
 800f530:	f1a8 0204 	sub.w	r2, r8, #4
 800f534:	4623      	mov	r3, r4
 800f536:	f853 1b04 	ldr.w	r1, [r3], #4
 800f53a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f53e:	429f      	cmp	r7, r3
 800f540:	d2f9      	bcs.n	800f536 <__hexnan+0xaa>
 800f542:	1b3b      	subs	r3, r7, r4
 800f544:	f023 0303 	bic.w	r3, r3, #3
 800f548:	3304      	adds	r3, #4
 800f54a:	3e03      	subs	r6, #3
 800f54c:	3401      	adds	r4, #1
 800f54e:	42a6      	cmp	r6, r4
 800f550:	bf38      	it	cc
 800f552:	2304      	movcc	r3, #4
 800f554:	4443      	add	r3, r8
 800f556:	2200      	movs	r2, #0
 800f558:	f843 2b04 	str.w	r2, [r3], #4
 800f55c:	429f      	cmp	r7, r3
 800f55e:	d2fb      	bcs.n	800f558 <__hexnan+0xcc>
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	b91b      	cbnz	r3, 800f56c <__hexnan+0xe0>
 800f564:	4547      	cmp	r7, r8
 800f566:	d126      	bne.n	800f5b6 <__hexnan+0x12a>
 800f568:	2301      	movs	r3, #1
 800f56a:	603b      	str	r3, [r7, #0]
 800f56c:	2005      	movs	r0, #5
 800f56e:	e025      	b.n	800f5bc <__hexnan+0x130>
 800f570:	3501      	adds	r5, #1
 800f572:	2d08      	cmp	r5, #8
 800f574:	f10b 0b01 	add.w	fp, fp, #1
 800f578:	dd06      	ble.n	800f588 <__hexnan+0xfc>
 800f57a:	4544      	cmp	r4, r8
 800f57c:	d9c3      	bls.n	800f506 <__hexnan+0x7a>
 800f57e:	2300      	movs	r3, #0
 800f580:	f844 3c04 	str.w	r3, [r4, #-4]
 800f584:	2501      	movs	r5, #1
 800f586:	3c04      	subs	r4, #4
 800f588:	6822      	ldr	r2, [r4, #0]
 800f58a:	f000 000f 	and.w	r0, r0, #15
 800f58e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f592:	6020      	str	r0, [r4, #0]
 800f594:	e7b7      	b.n	800f506 <__hexnan+0x7a>
 800f596:	2508      	movs	r5, #8
 800f598:	e7b5      	b.n	800f506 <__hexnan+0x7a>
 800f59a:	9b01      	ldr	r3, [sp, #4]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d0df      	beq.n	800f560 <__hexnan+0xd4>
 800f5a0:	f1c3 0320 	rsb	r3, r3, #32
 800f5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a8:	40da      	lsrs	r2, r3
 800f5aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f5b4:	e7d4      	b.n	800f560 <__hexnan+0xd4>
 800f5b6:	3f04      	subs	r7, #4
 800f5b8:	e7d2      	b.n	800f560 <__hexnan+0xd4>
 800f5ba:	2004      	movs	r0, #4
 800f5bc:	b007      	add	sp, #28
 800f5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5c2 <__ascii_mbtowc>:
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	b901      	cbnz	r1, 800f5c8 <__ascii_mbtowc+0x6>
 800f5c6:	a901      	add	r1, sp, #4
 800f5c8:	b142      	cbz	r2, 800f5dc <__ascii_mbtowc+0x1a>
 800f5ca:	b14b      	cbz	r3, 800f5e0 <__ascii_mbtowc+0x1e>
 800f5cc:	7813      	ldrb	r3, [r2, #0]
 800f5ce:	600b      	str	r3, [r1, #0]
 800f5d0:	7812      	ldrb	r2, [r2, #0]
 800f5d2:	1e10      	subs	r0, r2, #0
 800f5d4:	bf18      	it	ne
 800f5d6:	2001      	movne	r0, #1
 800f5d8:	b002      	add	sp, #8
 800f5da:	4770      	bx	lr
 800f5dc:	4610      	mov	r0, r2
 800f5de:	e7fb      	b.n	800f5d8 <__ascii_mbtowc+0x16>
 800f5e0:	f06f 0001 	mvn.w	r0, #1
 800f5e4:	e7f8      	b.n	800f5d8 <__ascii_mbtowc+0x16>

0800f5e6 <_realloc_r>:
 800f5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ea:	4680      	mov	r8, r0
 800f5ec:	4614      	mov	r4, r2
 800f5ee:	460e      	mov	r6, r1
 800f5f0:	b921      	cbnz	r1, 800f5fc <_realloc_r+0x16>
 800f5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f6:	4611      	mov	r1, r2
 800f5f8:	f7fd bc7c 	b.w	800cef4 <_malloc_r>
 800f5fc:	b92a      	cbnz	r2, 800f60a <_realloc_r+0x24>
 800f5fe:	f7fd fc05 	bl	800ce0c <_free_r>
 800f602:	4625      	mov	r5, r4
 800f604:	4628      	mov	r0, r5
 800f606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f60a:	f000 f828 	bl	800f65e <_malloc_usable_size_r>
 800f60e:	4284      	cmp	r4, r0
 800f610:	4607      	mov	r7, r0
 800f612:	d802      	bhi.n	800f61a <_realloc_r+0x34>
 800f614:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f618:	d812      	bhi.n	800f640 <_realloc_r+0x5a>
 800f61a:	4621      	mov	r1, r4
 800f61c:	4640      	mov	r0, r8
 800f61e:	f7fd fc69 	bl	800cef4 <_malloc_r>
 800f622:	4605      	mov	r5, r0
 800f624:	2800      	cmp	r0, #0
 800f626:	d0ed      	beq.n	800f604 <_realloc_r+0x1e>
 800f628:	42bc      	cmp	r4, r7
 800f62a:	4622      	mov	r2, r4
 800f62c:	4631      	mov	r1, r6
 800f62e:	bf28      	it	cs
 800f630:	463a      	movcs	r2, r7
 800f632:	f7fc fd54 	bl	800c0de <memcpy>
 800f636:	4631      	mov	r1, r6
 800f638:	4640      	mov	r0, r8
 800f63a:	f7fd fbe7 	bl	800ce0c <_free_r>
 800f63e:	e7e1      	b.n	800f604 <_realloc_r+0x1e>
 800f640:	4635      	mov	r5, r6
 800f642:	e7df      	b.n	800f604 <_realloc_r+0x1e>

0800f644 <__ascii_wctomb>:
 800f644:	b149      	cbz	r1, 800f65a <__ascii_wctomb+0x16>
 800f646:	2aff      	cmp	r2, #255	; 0xff
 800f648:	bf85      	ittet	hi
 800f64a:	238a      	movhi	r3, #138	; 0x8a
 800f64c:	6003      	strhi	r3, [r0, #0]
 800f64e:	700a      	strbls	r2, [r1, #0]
 800f650:	f04f 30ff 	movhi.w	r0, #4294967295
 800f654:	bf98      	it	ls
 800f656:	2001      	movls	r0, #1
 800f658:	4770      	bx	lr
 800f65a:	4608      	mov	r0, r1
 800f65c:	4770      	bx	lr

0800f65e <_malloc_usable_size_r>:
 800f65e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f662:	1f18      	subs	r0, r3, #4
 800f664:	2b00      	cmp	r3, #0
 800f666:	bfbc      	itt	lt
 800f668:	580b      	ldrlt	r3, [r1, r0]
 800f66a:	18c0      	addlt	r0, r0, r3
 800f66c:	4770      	bx	lr
	...

0800f670 <_init>:
 800f670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f672:	bf00      	nop
 800f674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f676:	bc08      	pop	{r3}
 800f678:	469e      	mov	lr, r3
 800f67a:	4770      	bx	lr

0800f67c <_fini>:
 800f67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f67e:	bf00      	nop
 800f680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f682:	bc08      	pop	{r3}
 800f684:	469e      	mov	lr, r3
 800f686:	4770      	bx	lr
