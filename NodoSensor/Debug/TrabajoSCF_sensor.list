
TrabajoSCF_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d9c  080169d8  080169d8  000269d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018774  08018774  000302e0  2**0
                  CONTENTS
  4 .ARM          00000008  08018774  08018774  00028774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801877c  0801877c  000302e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801877c  0801877c  0002877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018780  08018780  00028780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08018784  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000390c  200002e0  08018a64  000302e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bec  08018a64  00033bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031bb9  00000000  00000000  00030353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006999  00000000  00000000  00061f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029f8  00000000  00000000  000688a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002086  00000000  00000000  0006b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000947f  00000000  00000000  0006d326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031db5  00000000  00000000  000767a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e43e  00000000  00000000  000a855a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c8fc  00000000  00000000  001b6998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c3294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080169c0 	.word	0x080169c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	080169c0 	.word	0x080169c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
extern UART_HandleTypeDef hDiscoUart;
#endif /* TERMINAL_USE */

static  uint8_t  IP_Addr[4];

int _write(int file, char *ptr, int len){
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffc9 	bl	8000ff0 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
	}
	return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f002 f82f 	bl	80030de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f89c 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fac2 	bl	800160c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001088:	f000 f8fc 	bl	8001284 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108c:	f000 f932 	bl	80012f4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001090:	f000 f96e 	bl	8001370 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001094:	f000 f9ee 	bl	8001474 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001098:	f000 fa2a 	bl	80014f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109c:	f000 fa58 	bl	8001550 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a0:	f000 fa86 	bl	80015b0 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80010a4:	f000 f98a 	bl	80013bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  #if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <main+0x100>)
 80010aa:	4a34      	ldr	r2, [pc, #208]	; (800117c <main+0x104>)
 80010ac:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <main+0x100>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <main+0x100>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <main+0x100>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <main+0x100>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <main+0x100>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <main+0x100>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <main+0x100>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <main+0x100>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <main+0x100>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 80010e6:	4924      	ldr	r1, [pc, #144]	; (8001178 <main+0x100>)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f008 f851 	bl	8009190 <BSP_COM_Init>

  #endif /* TERMINAL_USE */
  BSP_TSENSOR_Init(); // Inicializamos temperatura
 80010ee:	f008 faa9 	bl	8009644 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init(); // Inicializamos humedad
 80010f2:	f008 fa79 	bl	80095e8 <BSP_HSENSOR_Init>
  printf("****** Sistemas Ciberfisicos ****** \n\r");
 80010f6:	4822      	ldr	r0, [pc, #136]	; (8001180 <main+0x108>)
 80010f8:	f011 ff42 	bl	8012f80 <iprintf>

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000); 			/* TransmisiÃ³n de mensajes por UART */
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	2231      	movs	r2, #49	; 0x31
 8001102:	4920      	ldr	r1, [pc, #128]	; (8001184 <main+0x10c>)
 8001104:	4820      	ldr	r0, [pc, #128]	; (8001188 <main+0x110>)
 8001106:	f007 f840 	bl	800818a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	2231      	movs	r2, #49	; 0x31
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <main+0x114>)
 8001112:	481d      	ldr	r0, [pc, #116]	; (8001188 <main+0x110>)
 8001114:	f007 f839 	bl	800818a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2233      	movs	r2, #51	; 0x33
 800111e:	491c      	ldr	r1, [pc, #112]	; (8001190 <main+0x118>)
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <main+0x110>)
 8001122:	f007 f832 	bl	800818a <HAL_UART_Transmit>


  iniAcc = BSP_ACCELERO_Init();									/* InicializaciÃ³n del acelerÃ³metro */
 8001126:	f008 f9ef 	bl	8009508 <BSP_ACCELERO_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <main+0x11c>)
 8001130:	701a      	strb	r2, [r3, #0]
  LSM6DSL_AccInt_Drdy();											/* ConfiguraciÃ³n del acelerÃ³metro*/
 8001132:	f000 fc25 	bl	8001980 <LSM6DSL_AccInt_Drdy>
  BSP_ACCELERO_LowPower(0);										/* Deshabilitado del modo de bajo consumo*/
 8001136:	2000      	movs	r0, #0
 8001138:	f008 fa24 	bl	8009584 <BSP_ACCELERO_LowPower>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800113c:	f00d ff1c 	bl	800ef78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <main+0x120>)
 8001142:	2100      	movs	r1, #0
 8001144:	4815      	ldr	r0, [pc, #84]	; (800119c <main+0x124>)
 8001146:	f00d ff61 	bl	800f00c <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <main+0x128>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <main+0x12c>)
 8001152:	2100      	movs	r1, #0
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <main+0x130>)
 8001156:	f00d ff59 	bl	800f00c <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <main+0x134>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of acel_task */
  acel_taskHandle = osThreadNew(acel_task_function, NULL, &acel_task_attributes);
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <main+0x138>)
 8001162:	2100      	movs	r1, #0
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <main+0x13c>)
 8001166:	f00d ff51 	bl	800f00c <osThreadNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <main+0x140>)
 800116e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001170:	f00d ff26 	bl	800efc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0xfc>
 8001176:	bf00      	nop
 8001178:	20000fbc 	.word	0x20000fbc
 800117c:	40013800 	.word	0x40013800
 8001180:	080169fc 	.word	0x080169fc
 8001184:	20000000 	.word	0x20000000
 8001188:	20000454 	.word	0x20000454
 800118c:	20000034 	.word	0x20000034
 8001190:	20000068 	.word	0x20000068
 8001194:	20000ac5 	.word	0x20000ac5
 8001198:	08017f70 	.word	0x08017f70
 800119c:	08001bb5 	.word	0x08001bb5
 80011a0:	20000a70 	.word	0x20000a70
 80011a4:	08017f94 	.word	0x08017f94
 80011a8:	08001d1d 	.word	0x08001d1d
 80011ac:	20000a74 	.word	0x20000a74
 80011b0:	08017fb8 	.word	0x08017fb8
 80011b4:	08001d35 	.word	0x08001d35
 80011b8:	20000a78 	.word	0x20000a78

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2244      	movs	r2, #68	; 0x44
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f012 f89c 	bl	8013308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011e2:	f003 fd3b 	bl	8004c5c <HAL_PWREx_ControlVoltageScaling>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011ec:	f001 f8f2 	bl	80023d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011f0:	f003 fd16 	bl	8004c20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <SystemClock_Config+0xc4>)
 80011f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <SystemClock_Config+0xc4>)
 80011fc:	f023 0318 	bic.w	r3, r3, #24
 8001200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001204:	231c      	movs	r3, #28
 8001206:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001220:	2301      	movs	r3, #1
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001228:	2328      	movs	r3, #40	; 0x28
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800122c:	2307      	movs	r3, #7
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fe2f 	bl	8004ea0 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001248:	f001 f8c4 	bl	80023d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2303      	movs	r3, #3
 8001252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2104      	movs	r1, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f9f7 	bl	8005658 <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001270:	f001 f8b0 	bl	80023d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001274:	f004 fefe 	bl	8006074 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001278:	bf00      	nop
 800127a:	3758      	adds	r7, #88	; 0x58
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000

08001284 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_DFSDM1_Init+0x68>)
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <MX_DFSDM1_Init+0x6c>)
 800128c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_DFSDM1_Init+0x68>)
 8001290:	2201      	movs	r2, #1
 8001292:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_DFSDM1_Init+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_DFSDM1_Init+0x68>)
 800129c:	2202      	movs	r2, #2
 800129e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012bc:	2204      	movs	r2, #4
 80012be:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012da:	f002 f8dd 	bl	8003498 <HAL_DFSDM_ChannelInit>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80012e4:	f001 f876 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002fc 	.word	0x200002fc
 80012f0:	40016020 	.word	0x40016020

080012f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_I2C2_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_I2C2_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_I2C2_Init+0x74>)
 8001300:	f640 6214 	movw	r2, #3604	; 0xe14
 8001304:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_I2C2_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_I2C2_Init+0x74>)
 800130e:	2201      	movs	r2, #1
 8001310:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_I2C2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_I2C2_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_I2C2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_I2C2_Init+0x74>)
 8001332:	f002 fce5 	bl	8003d00 <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800133c:	f001 f84a 	bl	80023d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	4809      	ldr	r0, [pc, #36]	; (8001368 <MX_I2C2_Init+0x74>)
 8001344:	f003 fa8c 	bl	8004860 <HAL_I2CEx_ConfigAnalogFilter>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800134e:	f001 f841 	bl	80023d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_I2C2_Init+0x74>)
 8001356:	f003 face 	bl	80048f6 <HAL_I2CEx_ConfigDigitalFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001360:	f001 f838 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000334 	.word	0x20000334
 800136c:	40005800 	.word	0x40005800

08001370 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <MX_QUADSPI_Init+0x48>)
 8001378:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800137c:	2202      	movs	r2, #2
 800137e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001382:	2204      	movs	r2, #4
 8001384:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001388:	2210      	movs	r2, #16
 800138a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800138e:	2217      	movs	r2, #23
 8001390:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 80013a0:	f003 fcc2 	bl	8004d28 <HAL_QSPI_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80013aa:	f001 f813 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000388 	.word	0x20000388
 80013b8:	a0001000 	.word	0xa0001000

080013bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <MX_RTC_Init+0xb0>)
 80013d6:	4a26      	ldr	r2, [pc, #152]	; (8001470 <MX_RTC_Init+0xb4>)
 80013d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_RTC_Init+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_RTC_Init+0xb0>)
 80013e2:	227f      	movs	r2, #127	; 0x7f
 80013e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_RTC_Init+0xb0>)
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_RTC_Init+0xb0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_RTC_Init+0xb0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_RTC_Init+0xb0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_RTC_Init+0xb0>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <MX_RTC_Init+0xb0>)
 8001406:	f005 f817 	bl	8006438 <HAL_RTC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001410:	f000 ffe0 	bl	80023d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001414:	2312      	movs	r3, #18
 8001416:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x49;
 8001418:	2349      	movs	r3, #73	; 0x49
 800141a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 800141c:	2350      	movs	r3, #80	; 0x50
 800141e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <MX_RTC_Init+0xb0>)
 8001430:	f005 f88a 	bl	8006548 <HAL_RTC_SetTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800143a:	f000 ffcb 	bl	80023d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800143e:	2303      	movs	r3, #3
 8001440:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001442:	2301      	movs	r3, #1
 8001444:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 8001446:	2303      	movs	r3, #3
 8001448:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 800144a:	2324      	movs	r3, #36	; 0x24
 800144c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_RTC_Init+0xb0>)
 8001456:	f005 f970 	bl	800673a <HAL_RTC_SetDate>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001460:	f000 ffb8 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200003cc 	.word	0x200003cc
 8001470:	40002800 	.word	0x40002800

08001474 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_SPI3_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_SPI3_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_SPI3_Init+0x74>)
 8001480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001484:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_SPI3_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_SPI3_Init+0x74>)
 800148e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001492:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_SPI3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_SPI3_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014d4:	f005 fad6 	bl	8006a84 <HAL_SPI_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014de:	f000 ff79 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200003f0 	.word	0x200003f0
 80014ec:	40003c00 	.word	0x40003c00

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_USART1_UART_Init+0x58>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_USART1_UART_Init+0x5c>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_USART1_UART_Init+0x58>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001534:	f006 fddb 	bl	80080ee <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 ff49 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000454 	.word	0x20000454
 800154c:	40013800 	.word	0x40013800

08001550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART3_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001594:	f006 fdab 	bl	80080ee <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800159e:	f000 ff19 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200004dc 	.word	0x200004dc
 80015ac:	40004800 	.word	0x40004800

080015b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015be:	2206      	movs	r2, #6
 80015c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f4:	f003 f9cb 	bl	800498e <HAL_PCD_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 fee9 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000564 	.word	0x20000564

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	4bbd      	ldr	r3, [pc, #756]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4abc      	ldr	r2, [pc, #752]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4bba      	ldr	r3, [pc, #744]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4bb7      	ldr	r3, [pc, #732]	; (8001918 <MX_GPIO_Init+0x30c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4ab6      	ldr	r2, [pc, #728]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4bb4      	ldr	r3, [pc, #720]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4bb1      	ldr	r3, [pc, #708]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4ab0      	ldr	r2, [pc, #704]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4bae      	ldr	r3, [pc, #696]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4bab      	ldr	r3, [pc, #684]	; (8001918 <MX_GPIO_Init+0x30c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4aaa      	ldr	r2, [pc, #680]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4ba8      	ldr	r3, [pc, #672]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4aa4      	ldr	r2, [pc, #656]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4ba2      	ldr	r3, [pc, #648]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80016a0:	489e      	ldr	r0, [pc, #632]	; (800191c <MX_GPIO_Init+0x310>)
 80016a2:	f002 fafd 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f248 1104 	movw	r1, #33028	; 0x8104
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f002 faf6 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016b4:	2200      	movs	r2, #0
 80016b6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80016ba:	4899      	ldr	r0, [pc, #612]	; (8001920 <MX_GPIO_Init+0x314>)
 80016bc:	f002 faf0 	bl	8003ca0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f241 0181 	movw	r1, #4225	; 0x1081
 80016c6:	4897      	ldr	r0, [pc, #604]	; (8001924 <MX_GPIO_Init+0x318>)
 80016c8:	f002 faea 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4894      	ldr	r0, [pc, #592]	; (8001924 <MX_GPIO_Init+0x318>)
 80016d4:	f002 fae4 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80016de:	4892      	ldr	r0, [pc, #584]	; (8001928 <MX_GPIO_Init+0x31c>)
 80016e0:	f002 fade 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2120      	movs	r1, #32
 80016e8:	488d      	ldr	r0, [pc, #564]	; (8001920 <MX_GPIO_Init+0x314>)
 80016ea:	f002 fad9 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2101      	movs	r1, #1
 80016f2:	488a      	ldr	r0, [pc, #552]	; (800191c <MX_GPIO_Init+0x310>)
 80016f4:	f002 fad4 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016f8:	f240 1315 	movw	r3, #277	; 0x115
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4882      	ldr	r0, [pc, #520]	; (800191c <MX_GPIO_Init+0x310>)
 8001712:	f002 f80f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001716:	236a      	movs	r3, #106	; 0x6a
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	487c      	ldr	r0, [pc, #496]	; (800191c <MX_GPIO_Init+0x310>)
 800172c:	f002 f802 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4878      	ldr	r0, [pc, #480]	; (8001928 <MX_GPIO_Init+0x31c>)
 8001748:	f001 fff4 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800174c:	233f      	movs	r3, #63	; 0x3f
 800174e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001750:	230b      	movs	r3, #11
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4872      	ldr	r0, [pc, #456]	; (8001928 <MX_GPIO_Init+0x31c>)
 8001760:	f001 ffe8 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001764:	2303      	movs	r3, #3
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001774:	2308      	movs	r3, #8
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f001 ffd7 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001786:	f248 1304 	movw	r3, #33028	; 0x8104
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f001 ffc7 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80017a6:	2308      	movs	r3, #8
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f001 ffb6 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80017c8:	2310      	movs	r3, #16
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017cc:	230b      	movs	r3, #11
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 ffa9 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80017e2:	23e0      	movs	r3, #224	; 0xe0
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f2:	2305      	movs	r3, #5
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f001 ff98 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001804:	2301      	movs	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4841      	ldr	r0, [pc, #260]	; (8001920 <MX_GPIO_Init+0x314>)
 800181a:	f001 ff8b 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001822:	230b      	movs	r3, #11
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	483b      	ldr	r0, [pc, #236]	; (8001920 <MX_GPIO_Init+0x314>)
 8001832:	f001 ff7f 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001836:	f24f 0334 	movw	r3, #61492	; 0xf034
 800183a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4834      	ldr	r0, [pc, #208]	; (8001920 <MX_GPIO_Init+0x314>)
 8001850:	f001 ff70 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001854:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001858:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	482e      	ldr	r0, [pc, #184]	; (8001924 <MX_GPIO_Init+0x318>)
 800186c:	f001 ff62 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001870:	f243 0381 	movw	r3, #12417	; 0x3081
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4826      	ldr	r0, [pc, #152]	; (8001924 <MX_GPIO_Init+0x318>)
 800188a:	f001 ff53 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800188e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4820      	ldr	r0, [pc, #128]	; (8001928 <MX_GPIO_Init+0x31c>)
 80018a8:	f001 ff44 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <MX_GPIO_Init+0x31c>)
 80018c4:	f001 ff36 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80018c8:	2302      	movs	r3, #2
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d8:	2305      	movs	r3, #5
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <MX_GPIO_Init+0x318>)
 80018e4:	f001 ff26 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018e8:	2378      	movs	r3, #120	; 0x78
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f8:	2307      	movs	r3, #7
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <MX_GPIO_Init+0x318>)
 8001904:	f001 ff16 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	e00a      	b.n	800192c <MX_GPIO_Init+0x320>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	48001000 	.word	0x48001000
 8001920:	48000400 	.word	0x48000400
 8001924:	48000c00 	.word	0x48000c00
 8001928:	48000800 	.word	0x48000800
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001932:	2304      	movs	r3, #4
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480f      	ldr	r0, [pc, #60]	; (800197c <MX_GPIO_Init+0x370>)
 800193e:	f001 fef9 	bl	8003734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2105      	movs	r1, #5
 8001946:	2007      	movs	r0, #7
 8001948:	f001 fd61 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800194c:	2007      	movs	r0, #7
 800194e:	f001 fd7a 	bl	8003446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2105      	movs	r1, #5
 8001956:	2017      	movs	r0, #23
 8001958:	f001 fd59 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800195c:	2017      	movs	r0, #23
 800195e:	f001 fd72 	bl	8003446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2105      	movs	r1, #5
 8001966:	2028      	movs	r0, #40	; 0x28
 8001968:	f001 fd51 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800196c:	2028      	movs	r0, #40	; 0x28
 800196e:	f001 fd6a 	bl	8003446 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	48000400 	.word	0x48000400

08001980 <LSM6DSL_AccInt_Drdy>:

/* USER CODE BEGIN 4 */
void LSM6DSL_AccInt_Drdy()						/* InicializaciÃ³n del acelerÃ³metro */
	{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

		uint8_t ctrl = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	71fb      	strb	r3, [r7, #7]
		uint8_t tmp;
		/* Read DRDY_PULSE_CFG_G value  (LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);*/
		drdyPulsedCfg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);     /*Buscar en archivo lsm6dsl.h*/
 800198a:	210b      	movs	r1, #11
 800198c:	20d4      	movs	r0, #212	; 0xd4
 800198e:	f007 fd7f 	bl	8009490 <SENSOR_IO_Read>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 8001998:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
		drdyPulsedCfg |= 0b10000000;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 80019a6:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, drdyPulsedCfg);
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	210b      	movs	r1, #11
 80019b0:	20d4      	movs	r0, #212	; 0xd4
 80019b2:	f007 fd53 	bl	800945c <SENSOR_IO_Write>

		/* Read INT1_CTRL value */
		ctrlDrdy = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 80019b6:	210d      	movs	r1, #13
 80019b8:	20d4      	movs	r0, #212	; 0xd4
 80019ba:	f007 fd69 	bl	8009490 <SENSOR_IO_Read>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019c4:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
	    ctrlDrdy |= 0b00000011;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	f043 0303 	orr.w	r3, r3, #3
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019d2:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, ctrlDrdy);
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	210d      	movs	r1, #13
 80019dc:	20d4      	movs	r0, #212	; 0xd4
 80019de:	f007 fd3d 	bl	800945c <SENSOR_IO_Write>

		/* Read MASTER_CONFIG value */
		ctrlMaster = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 80019e2:	211a      	movs	r1, #26
 80019e4:	20d4      	movs	r0, #212	; 0xd4
 80019e6:	f007 fd53 	bl	8009490 <SENSOR_IO_Read>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 80019f0:	701a      	strb	r2, [r3, #0]

		ctrlMaster |= 0b00000011;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f043 0303 	orr.w	r3, r3, #3
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 80019fe:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, ctrlMaster);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	211a      	movs	r1, #26
 8001a08:	20d4      	movs	r0, #212	; 0xd4
 8001a0a:	f007 fd27 	bl	800945c <SENSOR_IO_Write>
	}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000b44 	.word	0x20000b44
 8001a1c:	20000b45 	.word	0x20000b45
 8001a20:	20000b46 	.word	0x20000b46

08001a24 <wifi_start>:

static int wifi_start(void)
{
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af04      	add	r7, sp, #16
  printf("Wifi Start Function. \n\r");
 8001a2a:	4819      	ldr	r0, [pc, #100]	; (8001a90 <wifi_start+0x6c>)
 8001a2c:	f011 faa8 	bl	8012f80 <iprintf>
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001a30:	f009 fbea 	bl	800b208 <WIFI_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d123      	bne.n	8001a82 <wifi_start+0x5e>
  {
    printf("ES-WIFI Initialized.\n\r");
 8001a3a:	4816      	ldr	r0, [pc, #88]	; (8001a94 <wifi_start+0x70>)
 8001a3c:	f011 faa0 	bl	8012f80 <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4618      	mov	r0, r3
 8001a44:	f009 fc2e 	bl	800b2a4 <WIFI_GetMAC_Address>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d113      	bne.n	8001a76 <wifi_start+0x52>
    {
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
               MAC_Addr[0],
 8001a4e:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a50:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001a52:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a54:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001a56:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a58:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001a5c:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001a5e:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a60:	9102      	str	r1, [sp, #8]
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	462b      	mov	r3, r5
 8001a68:	4622      	mov	r2, r4
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <wifi_start+0x74>)
 8001a6e:	f011 fa87 	bl	8012f80 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e007      	b.n	8001a86 <wifi_start+0x62>
      printf("> ERROR : CANNOT get MAC address.\n\r");
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <wifi_start+0x78>)
 8001a78:	f011 fa82 	bl	8012f80 <iprintf>
      return -1;
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	e001      	b.n	8001a86 <wifi_start+0x62>
    return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08016a24 	.word	0x08016a24
 8001a94:	08016a3c 	.word	0x08016a3c
 8001a98:	08016a54 	.word	0x08016a54
 8001a9c:	08016a94 	.word	0x08016a94

08001aa0 <wifi_connect>:

int wifi_connect(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
    uint8_t MAX_tries = 3;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	717b      	strb	r3, [r7, #5]
    uint8_t return_value=-1;
 8001aaa:	23ff      	movs	r3, #255	; 0xff
 8001aac:	71fb      	strb	r3, [r7, #7]
    uint8_t try=1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001ab2:	e044      	b.n	8001b3e <wifi_connect+0x9e>
	  printf("Wifi connect function.. try %d/%d\n\r", try,MAX_tries);
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	797a      	ldrb	r2, [r7, #5]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4827      	ldr	r0, [pc, #156]	; (8001b58 <wifi_connect+0xb8>)
 8001abc:	f011 fa60 	bl	8012f80 <iprintf>
	  wifi_start();
 8001ac0:	f7ff ffb0 	bl	8001a24 <wifi_start>
	  printf("Connecting to %s , %s.\n\r",SSID,PASSWORD);
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <wifi_connect+0xbc>)
 8001ac6:	4926      	ldr	r1, [pc, #152]	; (8001b60 <wifi_connect+0xc0>)
 8001ac8:	4826      	ldr	r0, [pc, #152]	; (8001b64 <wifi_connect+0xc4>)
 8001aca:	f011 fa59 	bl	8012f80 <iprintf>
	  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4922      	ldr	r1, [pc, #136]	; (8001b5c <wifi_connect+0xbc>)
 8001ad2:	4823      	ldr	r0, [pc, #140]	; (8001b60 <wifi_connect+0xc0>)
 8001ad4:	f009 fbc4 	bl	800b260 <WIFI_Connect>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d127      	bne.n	8001b2e <wifi_connect+0x8e>
	  {
		if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001ade:	4822      	ldr	r0, [pc, #136]	; (8001b68 <wifi_connect+0xc8>)
 8001ae0:	f009 fbf6 	bl	800b2d0 <WIFI_GetIP_Address>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11b      	bne.n	8001b22 <wifi_connect+0x82>
		{
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
				   IP_Addr[0],
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <wifi_connect+0xc8>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001aee:	4619      	mov	r1, r3
				   IP_Addr[1],
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <wifi_connect+0xc8>)
 8001af2:	785b      	ldrb	r3, [r3, #1]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001af4:	461a      	mov	r2, r3
				   IP_Addr[2],
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <wifi_connect+0xc8>)
 8001af8:	789b      	ldrb	r3, [r3, #2]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001afa:	4618      	mov	r0, r3
				   IP_Addr[3]);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <wifi_connect+0xc8>)
 8001afe:	78db      	ldrb	r3, [r3, #3]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4603      	mov	r3, r0
 8001b04:	4819      	ldr	r0, [pc, #100]	; (8001b6c <wifi_connect+0xcc>)
 8001b06:	f011 fa3b 	bl	8012f80 <iprintf>
		  return_value=0; // CORRECTO
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]
		  try=MAX_tries+1;
 8001b0e:	797b      	ldrb	r3, [r7, #5]
 8001b10:	3301      	adds	r3, #1
 8001b12:	71bb      	strb	r3, [r7, #6]
		  //osThreadFlagsSet(wifiStartHandle, 0x0001U);

		  // Activa la tarea de aceleracion
		  osThreadFlagsSet(acel_taskHandle, 0x000002U);
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <wifi_connect+0xd0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d fb08 	bl	800f130 <osThreadFlagsSet>
 8001b20:	e00a      	b.n	8001b38 <wifi_connect+0x98>
		}
		else
		{
		  printf("ERROR : es-wifi module CANNOT get IP address\n\r");
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <wifi_connect+0xd4>)
 8001b24:	f011 fa2c 	bl	8012f80 <iprintf>
		  return_value= -1;
 8001b28:	23ff      	movs	r3, #255	; 0xff
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	e004      	b.n	8001b38 <wifi_connect+0x98>
		}
	  }
	  else
	  {
		  printf("ERROR : es-wifi module NOT connected\n\r");
 8001b2e:	4812      	ldr	r0, [pc, #72]	; (8001b78 <wifi_connect+0xd8>)
 8001b30:	f011 fa26 	bl	8012f80 <iprintf>
		  return_value= -1;
 8001b34:	23ff      	movs	r3, #255	; 0xff
 8001b36:	71fb      	strb	r3, [r7, #7]
	  }
	  try=try+1;
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001b3e:	79ba      	ldrb	r2, [r7, #6]
 8001b40:	797b      	ldrb	r3, [r7, #5]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d9b6      	bls.n	8001ab4 <wifi_connect+0x14>
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1b3      	bne.n	8001ab4 <wifi_connect+0x14>
	}
  return return_value;
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	08016ab8 	.word	0x08016ab8
 8001b5c:	08016adc 	.word	0x08016adc
 8001b60:	08016ae8 	.word	0x08016ae8
 8001b64:	08016afc 	.word	0x08016afc
 8001b68:	20000a7c 	.word	0x20000a7c
 8001b6c:	08016b18 	.word	0x08016b18
 8001b70:	20000a78 	.word	0x20000a78
 8001b74:	08016b54 	.word	0x08016b54
 8001b78:	08016b84 	.word	0x08016b84

08001b7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_EXTI_Callback+0x18>
 8001b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_EXTI_Callback+0x1e>
    case (GPIO_PIN_11):
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
      break;
    default:
    {
      break;
 8001b92:	e009      	b.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x2c>
      SPI_WIFI_ISR();
 8001b94:	f009 fb28 	bl	800b1e8 <SPI_WIFI_ISR>
      break;
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x2c>
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d fac5 	bl	800f130 <osThreadFlagsSet>
      break;
 8001ba6:	bf00      	nop
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000a78 	.word	0x20000a78

08001bb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f00d fb86 	bl	800f2ce <osDelay>
 8001bc2:	e7fb      	b.n	8001bbc <StartDefaultTask+0x8>

08001bc4 <MQTTTask>:
* @retval None
*/


void MQTTTask(void)
{
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	b0b5      	sub	sp, #212	; 0xd4
 8001bc8:	af06      	add	r7, sp, #24
const uint32_t ulMaxPublishCount = 5UL;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
NetworkContext_t xNetworkContext = { 0 };
 8001bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
float ftemp;
float fhum;
char payLoad[64];
 /* Attempt to connect to the MQTT broker. The socket is returned in
 * the network context structure. */
 xNetworkStatus = prvConnectToServer( &xNetworkContext );
 8001bda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fbfe 	bl	80023e0 <prvConnectToServer>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001bea:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d00b      	beq.n	8001c0a <MQTTTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c06:	bf00      	nop
 8001c08:	e7fe      	b.n	8001c08 <MQTTTask+0x44>
 //LOG(("Trying to create an MQTT connection\n"));
 prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001c0a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001c0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fc2d 	bl	8002474 <prvCreateMQTTConnectionWithBroker>

 // subscribirse a un topic
 LOG(("Trying to subscribe to topic\n"));
 8001c1a:	4832      	ldr	r0, [pc, #200]	; (8001ce4 <MQTTTask+0x120>)
 8001c1c:	f011 fa16 	bl	801304c <puts>
 prvMQTTSubscribeToTopic(&xMQTTContext,pcEstadoTopic);
 8001c20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c24:	4930      	ldr	r1, [pc, #192]	; (8001ce8 <MQTTTask+0x124>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fcd8 	bl	80025dc <prvMQTTSubscribeToTopic>
 for( ; ; )
 {
   /* Publicar cada 5 segundos */
   osDelay(5000);
 8001c2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c30:	f00d fb4d 	bl	800f2ce <osDelay>
   ftemp=BSP_TSENSOR_ReadTemp();
 8001c34:	f007 fd22 	bl	800967c <BSP_TSENSOR_ReadTemp>
 8001c38:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
   fhum=BSP_HSENSOR_ReadHumidity();
 8001c3c:	f007 fcf4 	bl	8009628 <BSP_HSENSOR_ReadHumidity>
 8001c40:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8

   // Media de las aceleraciones

   if (acel_flag==1){
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <MQTTTask+0x128>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d127      	bne.n	8001c9c <MQTTTask+0xd8>
	   sprintf(payLoad,"{\"temperatura\":%02.2f, \"humedad\":%02.2f, \"acel_x\":%d, \"acel_y\":%d, \"acel_z\":%d}",ftemp, fhum, acel_x,acel_y,acel_z);
 8001c4c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_f2d>
 8001c54:	4604      	mov	r4, r0
 8001c56:	460d      	mov	r5, r1
 8001c58:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001c5c:	f7fe fc74 	bl	8000548 <__aeabi_f2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4922      	ldr	r1, [pc, #136]	; (8001cf0 <MQTTTask+0x12c>)
 8001c66:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001c6a:	460e      	mov	r6, r1
 8001c6c:	4921      	ldr	r1, [pc, #132]	; (8001cf4 <MQTTTask+0x130>)
 8001c6e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001c72:	6079      	str	r1, [r7, #4]
 8001c74:	4920      	ldr	r1, [pc, #128]	; (8001cf8 <MQTTTask+0x134>)
 8001c76:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001c7a:	f107 000c 	add.w	r0, r7, #12
 8001c7e:	9104      	str	r1, [sp, #16]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	9103      	str	r1, [sp, #12]
 8001c84:	9602      	str	r6, [sp, #8]
 8001c86:	e9cd 2300 	strd	r2, r3, [sp]
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <MQTTTask+0x138>)
 8001c90:	f011 fa18 	bl	80130c4 <siprintf>
	   acel_flag = 0;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MQTTTask+0x128>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e014      	b.n	8001cc6 <MQTTTask+0x102>
   }
   else{
	   sprintf(payLoad,"{\"temperatura\":%02.2f, \"humedad\":%02.2f}",ftemp, fhum);
 8001c9c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001ca0:	f7fe fc52 	bl	8000548 <__aeabi_f2d>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001cac:	f7fe fc4c 	bl	8000548 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	f107 000c 	add.w	r0, r7, #12
 8001cb8:	e9cd 2300 	strd	r2, r3, [sp]
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	490f      	ldr	r1, [pc, #60]	; (8001d00 <MQTTTask+0x13c>)
 8001cc2:	f011 f9ff 	bl	80130c4 <siprintf>
   }

   prvMQTTPublishToTopic(&xMQTTContext,pcBaseTopic,payLoad);
 8001cc6:	f107 020c 	add.w	r2, r7, #12
 8001cca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <MQTTTask+0x140>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fc49 	bl	8002568 <prvMQTTPublishToTopic>

   MQTT_ProcessLoop(&xMQTTContext);
 8001cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00b f8f6 	bl	800cecc <MQTT_ProcessLoop>
   osDelay(5000);
 8001ce0:	e7a4      	b.n	8001c2c <MQTTTask+0x68>
 8001ce2:	bf00      	nop
 8001ce4:	08016bac 	.word	0x08016bac
 8001ce8:	08016bcc 	.word	0x08016bcc
 8001cec:	20000b00 	.word	0x20000b00
 8001cf0:	20000afa 	.word	0x20000afa
 8001cf4:	20000afc 	.word	0x20000afc
 8001cf8:	20000afe 	.word	0x20000afe
 8001cfc:	08016bf0 	.word	0x08016bf0
 8001d00:	08016c40 	.word	0x08016c40
 8001d04:	08016c6c 	.word	0x08016c6c

08001d08 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <SPI3_IRQHandler+0x10>)
 8001d0e:	f005 fcc5 	bl	800769c <HAL_SPI_IRQHandler>
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20001054 	.word	0x20001054

08001d1c <wifiStartTask>:

/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask */
  /* Infinite loop */
	wifi_connect();
 8001d24:	f7ff febc 	bl	8001aa0 <wifi_connect>
  for(;;)
  {
	MQTTTask();
 8001d28:	f7ff ff4c 	bl	8001bc4 <MQTTTask>
    osDelay(1);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f00d face 	bl	800f2ce <osDelay>
	MQTTTask();
 8001d32:	e7f9      	b.n	8001d28 <wifiStartTask+0xc>

08001d34 <acel_task_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_acel_task_function */
void acel_task_function(void *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af04      	add	r7, sp, #16
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN acel_task_function */
    uint32_t ret_flag = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  ret_flag = osThreadFlagsWait(0x00000002U, osFlagsWaitAny,osWaitForever);
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	2100      	movs	r1, #0
 8001d46:	2002      	movs	r0, #2
 8001d48:	f00d fa40 	bl	800f1cc <osThreadFlagsWait>
 8001d4c:	60b8      	str	r0, [r7, #8]
  printf("Llamada desde la tarea de wifi.\n\r");
 8001d4e:	48a3      	ldr	r0, [pc, #652]	; (8001fdc <acel_task_function+0x2a8>)
 8001d50:	f011 f916 	bl	8012f80 <iprintf>
  uint8_t contador = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
  int16_t temp_acel_x = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	82bb      	strh	r3, [r7, #20]
  int16_t temp_acel_y = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	827b      	strh	r3, [r7, #18]
  int16_t temp_acel_z = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	823b      	strh	r3, [r7, #16]
  // Infinite loop //
  for(;;)
  {
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f00d fa2e 	bl	800f1cc <osThreadFlagsWait>
 8001d70:	60b8      	str	r0, [r7, #8]
      if (ret_flag == 1U){
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	f040 8320 	bne.w	80023ba <acel_task_function+0x686>
        BSP_ACCELERO_AccGetXYZ(pDataAcc);                            // Toma de Aceleración /
 8001d7a:	4899      	ldr	r0, [pc, #612]	; (8001fe0 <acel_task_function+0x2ac>)
 8001d7c:	f007 fc1c 	bl	80095b8 <BSP_ACCELERO_AccGetXYZ>
        HAL_RTC_GetTime(&hrtc, &varTime, RTC_FORMAT_BIN);            // Toma de timestamp /
 8001d80:	2200      	movs	r2, #0
 8001d82:	4998      	ldr	r1, [pc, #608]	; (8001fe4 <acel_task_function+0x2b0>)
 8001d84:	4898      	ldr	r0, [pc, #608]	; (8001fe8 <acel_task_function+0x2b4>)
 8001d86:	f004 fc7c 	bl	8006682 <HAL_RTC_GetTime>
        subsec = (varTime.SecondFraction-varTime.SubSeconds)*1000/varTime.SecondFraction;      /* ms del timestamp */
 8001d8a:	4b96      	ldr	r3, [pc, #600]	; (8001fe4 <acel_task_function+0x2b0>)
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <acel_task_function+0x2b0>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d98:	fb03 f202 	mul.w	r2, r3, r2
 8001d9c:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <acel_task_function+0x2b0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b91      	ldr	r3, [pc, #580]	; (8001fec <acel_task_function+0x2b8>)
 8001da8:	801a      	strh	r2, [r3, #0]
        HAL_RTC_GetDate(&hrtc, &varDate, RTC_FORMAT_BCD);            // Toma de fecha /
 8001daa:	2201      	movs	r2, #1
 8001dac:	4990      	ldr	r1, [pc, #576]	; (8001ff0 <acel_task_function+0x2bc>)
 8001dae:	488e      	ldr	r0, [pc, #568]	; (8001fe8 <acel_task_function+0x2b4>)
 8001db0:	f004 fd4a 	bl	8006848 <HAL_RTC_GetDate>

        snprintf(str_x,14,"Eje_X = %d, ",pDataAcc[0]);                /* Formateo del mensaje de aceleración del eje X */
 8001db4:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <acel_task_function+0x2ac>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	4a8e      	ldr	r2, [pc, #568]	; (8001ff4 <acel_task_function+0x2c0>)
 8001dbc:	210e      	movs	r1, #14
 8001dbe:	488e      	ldr	r0, [pc, #568]	; (8001ff8 <acel_task_function+0x2c4>)
 8001dc0:	f011 f94c 	bl	801305c <sniprintf>
        snprintf(str_y,14,"Eje_Y = %d, ",pDataAcc[1]);
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <acel_task_function+0x2ac>)
 8001dc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dca:	4a8c      	ldr	r2, [pc, #560]	; (8001ffc <acel_task_function+0x2c8>)
 8001dcc:	210e      	movs	r1, #14
 8001dce:	488c      	ldr	r0, [pc, #560]	; (8002000 <acel_task_function+0x2cc>)
 8001dd0:	f011 f944 	bl	801305c <sniprintf>
        snprintf(str_z,18,"Eje_Z = %d, \r\n",pDataAcc[2]);
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <acel_task_function+0x2ac>)
 8001dd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dda:	4a8a      	ldr	r2, [pc, #552]	; (8002004 <acel_task_function+0x2d0>)
 8001ddc:	2112      	movs	r1, #18
 8001dde:	488a      	ldr	r0, [pc, #552]	; (8002008 <acel_task_function+0x2d4>)
 8001de0:	f011 f93c 	bl	801305c <sniprintf>

        if (subsec <10){
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <acel_task_function+0x2b8>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d814      	bhi.n	8001e16 <acel_task_function+0xe2>
            snprintf(timestamp,27,"\r\nTimestamp = %d:%d:%d.00%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001dec:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <acel_task_function+0x2b0>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <acel_task_function+0x2b0>)
 8001df4:	785b      	ldrb	r3, [r3, #1]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <acel_task_function+0x2b0>)
 8001dfa:	789b      	ldrb	r3, [r3, #2]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <acel_task_function+0x2b8>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	9101      	str	r1, [sp, #4]
 8001e06:	9200      	str	r2, [sp, #0]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a80      	ldr	r2, [pc, #512]	; (800200c <acel_task_function+0x2d8>)
 8001e0c:	211b      	movs	r1, #27
 8001e0e:	4880      	ldr	r0, [pc, #512]	; (8002010 <acel_task_function+0x2dc>)
 8001e10:	f011 f924 	bl	801305c <sniprintf>
 8001e14:	e030      	b.n	8001e78 <acel_task_function+0x144>

        }
        else if (10<=subsec && subsec <100) {
 8001e16:	4b75      	ldr	r3, [pc, #468]	; (8001fec <acel_task_function+0x2b8>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d918      	bls.n	8001e50 <acel_task_function+0x11c>
 8001e1e:	4b73      	ldr	r3, [pc, #460]	; (8001fec <acel_task_function+0x2b8>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	2b63      	cmp	r3, #99	; 0x63
 8001e24:	d814      	bhi.n	8001e50 <acel_task_function+0x11c>
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.0%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <acel_task_function+0x2b0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <acel_task_function+0x2b0>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <acel_task_function+0x2b0>)
 8001e34:	789b      	ldrb	r3, [r3, #2]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <acel_task_function+0x2b8>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	9101      	str	r1, [sp, #4]
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a73      	ldr	r2, [pc, #460]	; (8002014 <acel_task_function+0x2e0>)
 8001e46:	211c      	movs	r1, #28
 8001e48:	4871      	ldr	r0, [pc, #452]	; (8002010 <acel_task_function+0x2dc>)
 8001e4a:	f011 f907 	bl	801305c <sniprintf>
 8001e4e:	e013      	b.n	8001e78 <acel_task_function+0x144>

        }
        else{
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <acel_task_function+0x2b0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <acel_task_function+0x2b0>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <acel_task_function+0x2b0>)
 8001e5e:	789b      	ldrb	r3, [r3, #2]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4b62      	ldr	r3, [pc, #392]	; (8001fec <acel_task_function+0x2b8>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	9101      	str	r1, [sp, #4]
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <acel_task_function+0x2e4>)
 8001e70:	211c      	movs	r1, #28
 8001e72:	4867      	ldr	r0, [pc, #412]	; (8002010 <acel_task_function+0x2dc>)
 8001e74:	f011 f8f2 	bl	801305c <sniprintf>
        }


    	HAL_UART_Transmit(&huart1,(uint8_t *)timestamp,26,1000);		/* TransmisiÃ³n de la informaciÃ³n por UART */
 8001e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7c:	221a      	movs	r2, #26
 8001e7e:	4964      	ldr	r1, [pc, #400]	; (8002010 <acel_task_function+0x2dc>)
 8001e80:	4866      	ldr	r0, [pc, #408]	; (800201c <acel_task_function+0x2e8>)
 8001e82:	f006 f982 	bl	800818a <HAL_UART_Transmit>


    	lista_acelx[contador] = pDataAcc[0];
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <acel_task_function+0x2ac>)
 8001e8a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001e8e:	4a64      	ldr	r2, [pc, #400]	; (8002020 <acel_task_function+0x2ec>)
 8001e90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lista_acely[contador] = pDataAcc[1];
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <acel_task_function+0x2ac>)
 8001e98:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8001e9c:	4a61      	ldr	r2, [pc, #388]	; (8002024 <acel_task_function+0x2f0>)
 8001e9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lista_acelz[contador] = pDataAcc[2];
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <acel_task_function+0x2ac>)
 8001ea6:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <acel_task_function+0x2f4>)
 8001eac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        //printf("Contador: %d. \n\r",contador);
        //printf("Modo op %d. \n\r",modo_op);
        if (contador >= 10){
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b09      	cmp	r3, #9
 8001eb4:	d96b      	bls.n	8001f8e <acel_task_function+0x25a>
        	acel_x=0;
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <acel_task_function+0x2f8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	801a      	strh	r2, [r3, #0]
        	acel_y=0;
 8001ebc:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <acel_task_function+0x2fc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	801a      	strh	r2, [r3, #0]
        	acel_z=0;
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <acel_task_function+0x300>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
        	for (int i = 0; i < 10; i++){
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e01d      	b.n	8001f0a <acel_task_function+0x1d6>
        		temp_acel_x += lista_acelx[i];
 8001ece:	4a54      	ldr	r2, [pc, #336]	; (8002020 <acel_task_function+0x2ec>)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	8abb      	ldrh	r3, [r7, #20]
 8001eda:	4413      	add	r3, r2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	82bb      	strh	r3, [r7, #20]
        		temp_acel_y += lista_acely[i];
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <acel_task_function+0x2f0>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	8a7b      	ldrh	r3, [r7, #18]
 8001eec:	4413      	add	r3, r2
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	827b      	strh	r3, [r7, #18]
        		temp_acel_z += lista_acelz[i];
 8001ef2:	4a4d      	ldr	r2, [pc, #308]	; (8002028 <acel_task_function+0x2f4>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	8a3b      	ldrh	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	823b      	strh	r3, [r7, #16]
        	for (int i = 0; i < 10; i++){
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	ddde      	ble.n	8001ece <acel_task_function+0x19a>
        	}

        	acel_x = temp_acel_x/10;
 8001f10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f14:	4a48      	ldr	r2, [pc, #288]	; (8002038 <acel_task_function+0x304>)
 8001f16:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1a:	1092      	asrs	r2, r2, #2
 8001f1c:	17db      	asrs	r3, r3, #31
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	4b42      	ldr	r3, [pc, #264]	; (800202c <acel_task_function+0x2f8>)
 8001f24:	801a      	strh	r2, [r3, #0]
        	acel_y = temp_acel_y/10;
 8001f26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f2a:	4a43      	ldr	r2, [pc, #268]	; (8002038 <acel_task_function+0x304>)
 8001f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f30:	1092      	asrs	r2, r2, #2
 8001f32:	17db      	asrs	r3, r3, #31
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <acel_task_function+0x2fc>)
 8001f3a:	801a      	strh	r2, [r3, #0]
        	acel_z = temp_acel_z/10;
 8001f3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f40:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <acel_task_function+0x304>)
 8001f42:	fb82 1203 	smull	r1, r2, r2, r3
 8001f46:	1092      	asrs	r2, r2, #2
 8001f48:	17db      	asrs	r3, r3, #31
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <acel_task_function+0x300>)
 8001f50:	801a      	strh	r2, [r3, #0]

        	acel_flag=1;
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <acel_task_function+0x308>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
        	contador=0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75fb      	strb	r3, [r7, #23]
        	temp_acel_x=0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	82bb      	strh	r3, [r7, #20]
        	temp_acel_y=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	827b      	strh	r3, [r7, #18]
        	temp_acel_z=0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	823b      	strh	r3, [r7, #16]
        	printf("Modo operacion: %d. \n\r", modo_op);
 8001f68:	4b35      	ldr	r3, [pc, #212]	; (8002040 <acel_task_function+0x30c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4835      	ldr	r0, [pc, #212]	; (8002044 <acel_task_function+0x310>)
 8001f70:	f011 f806 	bl	8012f80 <iprintf>
        	if (modo_op == 1){
 8001f74:	4b32      	ldr	r3, [pc, #200]	; (8002040 <acel_task_function+0x30c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d104      	bne.n	8001f86 <acel_task_function+0x252>
            	osDelay(pdMS_TO_TICKS(20000));
 8001f7c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f80:	f00d f9a5 	bl	800f2ce <osDelay>
 8001f84:	e003      	b.n	8001f8e <acel_task_function+0x25a>
        	}
        	else
        	{
        		osDelay(pdMS_TO_TICKS(60000));
 8001f86:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001f8a:	f00d f9a0 	bl	800f2ce <osDelay>
        	}

        }
        contador=contador+1;
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	3301      	adds	r3, #1
 8001f92:	75fb      	strb	r3, [r7, #23]


    	if (pDataAcc[0]>=0 && pDataAcc[0]<10){							/* Eje X */
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <acel_task_function+0x2ac>)
 8001f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0c      	blt.n	8001fb8 <acel_task_function+0x284>
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <acel_task_function+0x2ac>)
 8001fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	dc07      	bgt.n	8001fb8 <acel_task_function+0x284>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,10,1000);
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	220a      	movs	r2, #10
 8001fae:	4912      	ldr	r1, [pc, #72]	; (8001ff8 <acel_task_function+0x2c4>)
 8001fb0:	481a      	ldr	r0, [pc, #104]	; (800201c <acel_task_function+0x2e8>)
 8001fb2:	f006 f8ea 	bl	800818a <HAL_UART_Transmit>
 8001fb6:	e0bd      	b.n	8002134 <acel_task_function+0x400>
    	}
    	else if (pDataAcc[0]>=10 && pDataAcc[0]<100){
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <acel_task_function+0x2ac>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	dd42      	ble.n	8002048 <acel_task_function+0x314>
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <acel_task_function+0x2ac>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	2b63      	cmp	r3, #99	; 0x63
 8001fca:	dc3d      	bgt.n	8002048 <acel_task_function+0x314>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,11,1000);
 8001fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd0:	220b      	movs	r2, #11
 8001fd2:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <acel_task_function+0x2c4>)
 8001fd4:	4811      	ldr	r0, [pc, #68]	; (800201c <acel_task_function+0x2e8>)
 8001fd6:	f006 f8d8 	bl	800818a <HAL_UART_Transmit>
 8001fda:	e0ab      	b.n	8002134 <acel_task_function+0x400>
 8001fdc:	08016c88 	.word	0x08016c88
 8001fe0:	20000a80 	.word	0x20000a80
 8001fe4:	20000b2c 	.word	0x20000b2c
 8001fe8:	200003cc 	.word	0x200003cc
 8001fec:	20000b28 	.word	0x20000b28
 8001ff0:	20000b40 	.word	0x20000b40
 8001ff4:	08016cac 	.word	0x08016cac
 8001ff8:	20000ac8 	.word	0x20000ac8
 8001ffc:	08016cbc 	.word	0x08016cbc
 8002000:	20000ad8 	.word	0x20000ad8
 8002004:	08016ccc 	.word	0x08016ccc
 8002008:	20000ae8 	.word	0x20000ae8
 800200c:	08016cdc 	.word	0x08016cdc
 8002010:	20000b04 	.word	0x20000b04
 8002014:	08016cfc 	.word	0x08016cfc
 8002018:	08016d1c 	.word	0x08016d1c
 800201c:	20000454 	.word	0x20000454
 8002020:	20000a88 	.word	0x20000a88
 8002024:	20000a9c 	.word	0x20000a9c
 8002028:	20000ab0 	.word	0x20000ab0
 800202c:	20000afa 	.word	0x20000afa
 8002030:	20000afc 	.word	0x20000afc
 8002034:	20000afe 	.word	0x20000afe
 8002038:	66666667 	.word	0x66666667
 800203c:	20000b00 	.word	0x20000b00
 8002040:	20000ac4 	.word	0x20000ac4
 8002044:	08016d3c 	.word	0x08016d3c
    	}
    	else if (pDataAcc[0]>=100 && pDataAcc[0]<1000){
 8002048:	4ba3      	ldr	r3, [pc, #652]	; (80022d8 <acel_task_function+0x5a4>)
 800204a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204e:	2b63      	cmp	r3, #99	; 0x63
 8002050:	dd0d      	ble.n	800206e <acel_task_function+0x33a>
 8002052:	4ba1      	ldr	r3, [pc, #644]	; (80022d8 <acel_task_function+0x5a4>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800205c:	da07      	bge.n	800206e <acel_task_function+0x33a>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,12,1000);
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	220c      	movs	r2, #12
 8002064:	499d      	ldr	r1, [pc, #628]	; (80022dc <acel_task_function+0x5a8>)
 8002066:	489e      	ldr	r0, [pc, #632]	; (80022e0 <acel_task_function+0x5ac>)
 8002068:	f006 f88f 	bl	800818a <HAL_UART_Transmit>
 800206c:	e062      	b.n	8002134 <acel_task_function+0x400>
    	}
    	else if (pDataAcc[0]>=1000 && pDataAcc[0]<10000){
 800206e:	4b9a      	ldr	r3, [pc, #616]	; (80022d8 <acel_task_function+0x5a4>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002078:	db0e      	blt.n	8002098 <acel_task_function+0x364>
 800207a:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <acel_task_function+0x5a4>)
 800207c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002080:	f242 720f 	movw	r2, #9999	; 0x270f
 8002084:	4293      	cmp	r3, r2
 8002086:	dc07      	bgt.n	8002098 <acel_task_function+0x364>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,13,1000);
 8002088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208c:	220d      	movs	r2, #13
 800208e:	4993      	ldr	r1, [pc, #588]	; (80022dc <acel_task_function+0x5a8>)
 8002090:	4893      	ldr	r0, [pc, #588]	; (80022e0 <acel_task_function+0x5ac>)
 8002092:	f006 f87a 	bl	800818a <HAL_UART_Transmit>
 8002096:	e04d      	b.n	8002134 <acel_task_function+0x400>
    	}
    	else if (pDataAcc[0]<0 && pDataAcc[0]>-10){
 8002098:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <acel_task_function+0x5a4>)
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da0d      	bge.n	80020be <acel_task_function+0x38a>
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <acel_task_function+0x5a4>)
 80020a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a8:	f113 0f09 	cmn.w	r3, #9
 80020ac:	db07      	blt.n	80020be <acel_task_function+0x38a>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,11,1000);
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	220b      	movs	r2, #11
 80020b4:	4989      	ldr	r1, [pc, #548]	; (80022dc <acel_task_function+0x5a8>)
 80020b6:	488a      	ldr	r0, [pc, #552]	; (80022e0 <acel_task_function+0x5ac>)
 80020b8:	f006 f867 	bl	800818a <HAL_UART_Transmit>
 80020bc:	e03a      	b.n	8002134 <acel_task_function+0x400>
    	}
    	else if (pDataAcc[0]<=-10 && pDataAcc[0]>-100){
 80020be:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <acel_task_function+0x5a4>)
 80020c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c4:	f113 0f09 	cmn.w	r3, #9
 80020c8:	da0d      	bge.n	80020e6 <acel_task_function+0x3b2>
 80020ca:	4b83      	ldr	r3, [pc, #524]	; (80022d8 <acel_task_function+0x5a4>)
 80020cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80020d4:	db07      	blt.n	80020e6 <acel_task_function+0x3b2>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,12,1000);
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	220c      	movs	r2, #12
 80020dc:	497f      	ldr	r1, [pc, #508]	; (80022dc <acel_task_function+0x5a8>)
 80020de:	4880      	ldr	r0, [pc, #512]	; (80022e0 <acel_task_function+0x5ac>)
 80020e0:	f006 f853 	bl	800818a <HAL_UART_Transmit>
 80020e4:	e026      	b.n	8002134 <acel_task_function+0x400>
    	}
    	else if (pDataAcc[0]<=-100 && pDataAcc[0]>-1000){
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <acel_task_function+0x5a4>)
 80020e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ec:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80020f0:	da0d      	bge.n	800210e <acel_task_function+0x3da>
 80020f2:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <acel_task_function+0x5a4>)
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80020fc:	dd07      	ble.n	800210e <acel_task_function+0x3da>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,13,1000);
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	220d      	movs	r2, #13
 8002104:	4975      	ldr	r1, [pc, #468]	; (80022dc <acel_task_function+0x5a8>)
 8002106:	4876      	ldr	r0, [pc, #472]	; (80022e0 <acel_task_function+0x5ac>)
 8002108:	f006 f83f 	bl	800818a <HAL_UART_Transmit>
 800210c:	e012      	b.n	8002134 <acel_task_function+0x400>
    	}
    	else if (pDataAcc[0]<=-1000 && pDataAcc[0]>-10000){
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <acel_task_function+0x5a4>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002118:	dc0c      	bgt.n	8002134 <acel_task_function+0x400>
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <acel_task_function+0x5a4>)
 800211c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002120:	4a70      	ldr	r2, [pc, #448]	; (80022e4 <acel_task_function+0x5b0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	db06      	blt.n	8002134 <acel_task_function+0x400>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,14,1000);
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	220e      	movs	r2, #14
 800212c:	496b      	ldr	r1, [pc, #428]	; (80022dc <acel_task_function+0x5a8>)
 800212e:	486c      	ldr	r0, [pc, #432]	; (80022e0 <acel_task_function+0x5ac>)
 8002130:	f006 f82b 	bl	800818a <HAL_UART_Transmit>
    	}


    	if (pDataAcc[1]>=0 && pDataAcc[1]<10){						/* Eje Y */
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <acel_task_function+0x5a4>)
 8002136:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0c      	blt.n	8002158 <acel_task_function+0x424>
 800213e:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <acel_task_function+0x5a4>)
 8002140:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002144:	2b09      	cmp	r3, #9
 8002146:	dc07      	bgt.n	8002158 <acel_task_function+0x424>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,10,1000);
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	220a      	movs	r2, #10
 800214e:	4966      	ldr	r1, [pc, #408]	; (80022e8 <acel_task_function+0x5b4>)
 8002150:	4863      	ldr	r0, [pc, #396]	; (80022e0 <acel_task_function+0x5ac>)
 8002152:	f006 f81a 	bl	800818a <HAL_UART_Transmit>
 8002156:	e087      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]>=10 && pDataAcc[1]<100){
 8002158:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <acel_task_function+0x5a4>)
 800215a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800215e:	2b09      	cmp	r3, #9
 8002160:	dd0c      	ble.n	800217c <acel_task_function+0x448>
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <acel_task_function+0x5a4>)
 8002164:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002168:	2b63      	cmp	r3, #99	; 0x63
 800216a:	dc07      	bgt.n	800217c <acel_task_function+0x448>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,11,1000);
 800216c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002170:	220b      	movs	r2, #11
 8002172:	495d      	ldr	r1, [pc, #372]	; (80022e8 <acel_task_function+0x5b4>)
 8002174:	485a      	ldr	r0, [pc, #360]	; (80022e0 <acel_task_function+0x5ac>)
 8002176:	f006 f808 	bl	800818a <HAL_UART_Transmit>
 800217a:	e075      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]>=100 && pDataAcc[1]<1000){
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <acel_task_function+0x5a4>)
 800217e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002182:	2b63      	cmp	r3, #99	; 0x63
 8002184:	dd0d      	ble.n	80021a2 <acel_task_function+0x46e>
 8002186:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <acel_task_function+0x5a4>)
 8002188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800218c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002190:	da07      	bge.n	80021a2 <acel_task_function+0x46e>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,12,1000);
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	220c      	movs	r2, #12
 8002198:	4953      	ldr	r1, [pc, #332]	; (80022e8 <acel_task_function+0x5b4>)
 800219a:	4851      	ldr	r0, [pc, #324]	; (80022e0 <acel_task_function+0x5ac>)
 800219c:	f005 fff5 	bl	800818a <HAL_UART_Transmit>
 80021a0:	e062      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]>=1000 && pDataAcc[1]<10000){
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <acel_task_function+0x5a4>)
 80021a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ac:	db0e      	blt.n	80021cc <acel_task_function+0x498>
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <acel_task_function+0x5a4>)
 80021b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80021b8:	4293      	cmp	r3, r2
 80021ba:	dc07      	bgt.n	80021cc <acel_task_function+0x498>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,13,1000);
 80021bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c0:	220d      	movs	r2, #13
 80021c2:	4949      	ldr	r1, [pc, #292]	; (80022e8 <acel_task_function+0x5b4>)
 80021c4:	4846      	ldr	r0, [pc, #280]	; (80022e0 <acel_task_function+0x5ac>)
 80021c6:	f005 ffe0 	bl	800818a <HAL_UART_Transmit>
 80021ca:	e04d      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]<0 && pDataAcc[1]>-10){
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <acel_task_function+0x5a4>)
 80021ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da0d      	bge.n	80021f2 <acel_task_function+0x4be>
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <acel_task_function+0x5a4>)
 80021d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021dc:	f113 0f09 	cmn.w	r3, #9
 80021e0:	db07      	blt.n	80021f2 <acel_task_function+0x4be>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,11,1000);
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	220b      	movs	r2, #11
 80021e8:	493f      	ldr	r1, [pc, #252]	; (80022e8 <acel_task_function+0x5b4>)
 80021ea:	483d      	ldr	r0, [pc, #244]	; (80022e0 <acel_task_function+0x5ac>)
 80021ec:	f005 ffcd 	bl	800818a <HAL_UART_Transmit>
 80021f0:	e03a      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]<=-10 && pDataAcc[1]>-100){
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <acel_task_function+0x5a4>)
 80021f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021f8:	f113 0f09 	cmn.w	r3, #9
 80021fc:	da0d      	bge.n	800221a <acel_task_function+0x4e6>
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <acel_task_function+0x5a4>)
 8002200:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002204:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002208:	db07      	blt.n	800221a <acel_task_function+0x4e6>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,12,1000);
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	220c      	movs	r2, #12
 8002210:	4935      	ldr	r1, [pc, #212]	; (80022e8 <acel_task_function+0x5b4>)
 8002212:	4833      	ldr	r0, [pc, #204]	; (80022e0 <acel_task_function+0x5ac>)
 8002214:	f005 ffb9 	bl	800818a <HAL_UART_Transmit>
 8002218:	e026      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]<=-100 && pDataAcc[1]>-1000){
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <acel_task_function+0x5a4>)
 800221c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002220:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002224:	da0d      	bge.n	8002242 <acel_task_function+0x50e>
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <acel_task_function+0x5a4>)
 8002228:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800222c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002230:	dd07      	ble.n	8002242 <acel_task_function+0x50e>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,13,1000);
 8002232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002236:	220d      	movs	r2, #13
 8002238:	492b      	ldr	r1, [pc, #172]	; (80022e8 <acel_task_function+0x5b4>)
 800223a:	4829      	ldr	r0, [pc, #164]	; (80022e0 <acel_task_function+0x5ac>)
 800223c:	f005 ffa5 	bl	800818a <HAL_UART_Transmit>
 8002240:	e012      	b.n	8002268 <acel_task_function+0x534>
    	}
    	else if (pDataAcc[1]<=-1000 && pDataAcc[1]>-10000){
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <acel_task_function+0x5a4>)
 8002244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002248:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800224c:	dc0c      	bgt.n	8002268 <acel_task_function+0x534>
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <acel_task_function+0x5a4>)
 8002250:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002254:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <acel_task_function+0x5b0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	db06      	blt.n	8002268 <acel_task_function+0x534>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,14,1000);
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	220e      	movs	r2, #14
 8002260:	4921      	ldr	r1, [pc, #132]	; (80022e8 <acel_task_function+0x5b4>)
 8002262:	481f      	ldr	r0, [pc, #124]	; (80022e0 <acel_task_function+0x5ac>)
 8002264:	f005 ff91 	bl	800818a <HAL_UART_Transmit>
    	}

    	if (pDataAcc[2]>=0 && pDataAcc[2]<10){						/* Eje Z */
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <acel_task_function+0x5a4>)
 800226a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0c      	blt.n	800228c <acel_task_function+0x558>
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <acel_task_function+0x5a4>)
 8002274:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002278:	2b09      	cmp	r3, #9
 800227a:	dc07      	bgt.n	800228c <acel_task_function+0x558>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,10,1000);
 800227c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002280:	220a      	movs	r2, #10
 8002282:	491a      	ldr	r1, [pc, #104]	; (80022ec <acel_task_function+0x5b8>)
 8002284:	4816      	ldr	r0, [pc, #88]	; (80022e0 <acel_task_function+0x5ac>)
 8002286:	f005 ff80 	bl	800818a <HAL_UART_Transmit>
 800228a:	e096      	b.n	80023ba <acel_task_function+0x686>
    	}
    	else if (pDataAcc[2]>=10 && pDataAcc[2]<100){
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <acel_task_function+0x5a4>)
 800228e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002292:	2b09      	cmp	r3, #9
 8002294:	dd0c      	ble.n	80022b0 <acel_task_function+0x57c>
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <acel_task_function+0x5a4>)
 8002298:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800229c:	2b63      	cmp	r3, #99	; 0x63
 800229e:	dc07      	bgt.n	80022b0 <acel_task_function+0x57c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,11,1000);
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	220b      	movs	r2, #11
 80022a6:	4911      	ldr	r1, [pc, #68]	; (80022ec <acel_task_function+0x5b8>)
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <acel_task_function+0x5ac>)
 80022aa:	f005 ff6e 	bl	800818a <HAL_UART_Transmit>
 80022ae:	e084      	b.n	80023ba <acel_task_function+0x686>
    	}
    	else if (pDataAcc[2]>=100 && pDataAcc[2]<1000){
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <acel_task_function+0x5a4>)
 80022b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022b6:	2b63      	cmp	r3, #99	; 0x63
 80022b8:	dd1a      	ble.n	80022f0 <acel_task_function+0x5bc>
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <acel_task_function+0x5a4>)
 80022bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c4:	da14      	bge.n	80022f0 <acel_task_function+0x5bc>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,12,1000);
 80022c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ca:	220c      	movs	r2, #12
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <acel_task_function+0x5b8>)
 80022ce:	4804      	ldr	r0, [pc, #16]	; (80022e0 <acel_task_function+0x5ac>)
 80022d0:	f005 ff5b 	bl	800818a <HAL_UART_Transmit>
 80022d4:	e071      	b.n	80023ba <acel_task_function+0x686>
 80022d6:	bf00      	nop
 80022d8:	20000a80 	.word	0x20000a80
 80022dc:	20000ac8 	.word	0x20000ac8
 80022e0:	20000454 	.word	0x20000454
 80022e4:	ffffd8f1 	.word	0xffffd8f1
 80022e8:	20000ad8 	.word	0x20000ad8
 80022ec:	20000ae8 	.word	0x20000ae8
    	}
    	else if (pDataAcc[2]>=1000 && pDataAcc[2]<10000){
 80022f0:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <acel_task_function+0x690>)
 80022f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022fa:	db0e      	blt.n	800231a <acel_task_function+0x5e6>
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <acel_task_function+0x690>)
 80022fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002302:	f242 720f 	movw	r2, #9999	; 0x270f
 8002306:	4293      	cmp	r3, r2
 8002308:	dc07      	bgt.n	800231a <acel_task_function+0x5e6>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,13,1000);
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	220d      	movs	r2, #13
 8002310:	492d      	ldr	r1, [pc, #180]	; (80023c8 <acel_task_function+0x694>)
 8002312:	482e      	ldr	r0, [pc, #184]	; (80023cc <acel_task_function+0x698>)
 8002314:	f005 ff39 	bl	800818a <HAL_UART_Transmit>
 8002318:	e04f      	b.n	80023ba <acel_task_function+0x686>
    	}
    	else if (pDataAcc[2]<0 && pDataAcc[2]>-10){
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <acel_task_function+0x690>)
 800231c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	da0d      	bge.n	8002340 <acel_task_function+0x60c>
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <acel_task_function+0x690>)
 8002326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800232a:	f113 0f09 	cmn.w	r3, #9
 800232e:	db07      	blt.n	8002340 <acel_task_function+0x60c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,11,1000);
 8002330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002334:	220b      	movs	r2, #11
 8002336:	4924      	ldr	r1, [pc, #144]	; (80023c8 <acel_task_function+0x694>)
 8002338:	4824      	ldr	r0, [pc, #144]	; (80023cc <acel_task_function+0x698>)
 800233a:	f005 ff26 	bl	800818a <HAL_UART_Transmit>
 800233e:	e03c      	b.n	80023ba <acel_task_function+0x686>
    	}
    	else if (pDataAcc[2]<=-10 && pDataAcc[2]>-100){
 8002340:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <acel_task_function+0x690>)
 8002342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002346:	f113 0f09 	cmn.w	r3, #9
 800234a:	da0d      	bge.n	8002368 <acel_task_function+0x634>
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <acel_task_function+0x690>)
 800234e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002352:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002356:	db07      	blt.n	8002368 <acel_task_function+0x634>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,12,1000);
 8002358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235c:	220c      	movs	r2, #12
 800235e:	491a      	ldr	r1, [pc, #104]	; (80023c8 <acel_task_function+0x694>)
 8002360:	481a      	ldr	r0, [pc, #104]	; (80023cc <acel_task_function+0x698>)
 8002362:	f005 ff12 	bl	800818a <HAL_UART_Transmit>
 8002366:	e028      	b.n	80023ba <acel_task_function+0x686>
    	}
    	else if (pDataAcc[2]<=-100 && pDataAcc[2]>-1000){
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <acel_task_function+0x690>)
 800236a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800236e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002372:	da0d      	bge.n	8002390 <acel_task_function+0x65c>
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <acel_task_function+0x690>)
 8002376:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800237a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800237e:	dd07      	ble.n	8002390 <acel_task_function+0x65c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,13,1000);
 8002380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002384:	220d      	movs	r2, #13
 8002386:	4910      	ldr	r1, [pc, #64]	; (80023c8 <acel_task_function+0x694>)
 8002388:	4810      	ldr	r0, [pc, #64]	; (80023cc <acel_task_function+0x698>)
 800238a:	f005 fefe 	bl	800818a <HAL_UART_Transmit>
 800238e:	e014      	b.n	80023ba <acel_task_function+0x686>
    	}
    	else if (pDataAcc[2]<=-1000 && pDataAcc[2]>-10000){
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <acel_task_function+0x690>)
 8002392:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002396:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800239a:	dc0d      	bgt.n	80023b8 <acel_task_function+0x684>
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <acel_task_function+0x690>)
 800239e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <acel_task_function+0x69c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	db07      	blt.n	80023b8 <acel_task_function+0x684>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,14,1000);
 80023a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ac:	220e      	movs	r2, #14
 80023ae:	4906      	ldr	r1, [pc, #24]	; (80023c8 <acel_task_function+0x694>)
 80023b0:	4806      	ldr	r0, [pc, #24]	; (80023cc <acel_task_function+0x698>)
 80023b2:	f005 feea 	bl	800818a <HAL_UART_Transmit>
 80023b6:	e000      	b.n	80023ba <acel_task_function+0x686>
    	}

    	else
    		__NOP();
 80023b8:	bf00      	nop
    	}
*/
    	}


    osDelay(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f00c ff87 	bl	800f2ce <osDelay>
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 80023c0:	e4d0      	b.n	8001d64 <acel_task_function+0x30>
 80023c2:	bf00      	nop
 80023c4:	20000a80 	.word	0x20000a80
 80023c8:	20000ae8 	.word	0x20000ae8
 80023cc:	20000454 	.word	0x20000454
 80023d0:	ffffd8f1 	.word	0xffffd8f1

080023d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d8:	b672      	cpsid	i
}
 80023da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023dc:	e7fe      	b.n	80023dc <Error_Handler+0x8>
	...

080023e0 <prvConnectToServer>:


extern uint8_t modo_op;

TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <prvConnectToServer+0x80>)
 80023ea:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 80023ec:	f240 725b 	movw	r2, #1883	; 0x75b
 80023f0:	491c      	ldr	r1, [pc, #112]	; (8002464 <prvConnectToServer+0x84>)
 80023f2:	481d      	ldr	r0, [pc, #116]	; (8002468 <prvConnectToServer+0x88>)
 80023f4:	f010 fdc4 	bl	8012f80 <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	2200      	movs	r2, #0
 80023fe:	9201      	str	r2, [sp, #4]
 8002400:	f240 725b 	movw	r2, #1883	; 0x75b
 8002404:	9200      	str	r2, [sp, #0]
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <prvConnectToServer+0x8c>)
 8002408:	2100      	movs	r1, #0
 800240a:	2000      	movs	r0, #0
 800240c:	f008 ff7c 	bl	800b308 <WIFI_OpenClientConnection>
 8002410:	4603      	mov	r3, r0
 8002412:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <prvConnectToServer+0x4e>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	4619      	mov	r1, r3
 800241e:	4814      	ldr	r0, [pc, #80]	; (8002470 <prvConnectToServer+0x90>)
 8002420:	f010 fdae 	bl	8012f80 <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 8002424:	f242 7010 	movw	r0, #10000	; 0x2710
 8002428:	f00c ff51 	bl	800f2ce <osDelay>
 800242c:	e00f      	b.n	800244e <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3302      	adds	r3, #2
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f240 725b 	movw	r2, #1883	; 0x75b
 8002448:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d1cb      	bne.n	80023ec <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2ea035a9 	.word	0x2ea035a9
 8002464:	08016d7c 	.word	0x08016d7c
 8002468:	08016d98 	.word	0x08016d98
 800246c:	08016dbc 	.word	0x08016dbc
 8002470:	08016dc4 	.word	0x08016dc4

08002474 <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b094      	sub	sp, #80	; 0x50
 8002478:	af02      	add	r7, sp, #8
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	7818      	ldrb	r0, [r3, #0]
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	f00c fd1b 	bl	800eec4 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 800248e:	f107 010c 	add.w	r1, r7, #12
 8002492:	4b2e      	ldr	r3, [pc, #184]	; (800254c <prvCreateMQTTConnectionWithBroker+0xd8>)
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <prvCreateMQTTConnectionWithBroker+0xdc>)
 8002498:	4a2e      	ldr	r2, [pc, #184]	; (8002554 <prvCreateMQTTConnectionWithBroker+0xe0>)
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f00a fb34 	bl	800cb08 <MQTT_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 80024a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
}
 80024c0:	bf00      	nop
 80024c2:	e7fe      	b.n	80024c2 <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 80024c4:	4824      	ldr	r0, [pc, #144]	; (8002558 <prvCreateMQTTConnectionWithBroker+0xe4>)
 80024c6:	f010 fdc1 	bl	801304c <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	221c      	movs	r2, #28
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f010 ff18 	bl	8013308 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <prvCreateMQTTConnectionWithBroker+0xe8>)
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 80024e2:	2317      	movs	r3, #23
 80024e4:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <prvCreateMQTTConnectionWithBroker+0xec>)
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 80024ea:	2323      	movs	r3, #35	; 0x23
 80024ec:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fd febc 	bl	8000270 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 80024fe:	233c      	movs	r3, #60	; 0x3c
 8002500:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 8002502:	f107 0120 	add.w	r1, r7, #32
 8002506:	f107 031f 	add.w	r3, r7, #31
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002510:	2200      	movs	r2, #0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f00a fb4d 	bl	800cbb2 <MQTT_Connect>
 8002518:	4603      	mov	r3, r0
 800251a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 800251e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <prvCreateMQTTConnectionWithBroker+0xc8>
	__asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <prvCreateMQTTConnectionWithBroker+0xc6>
    LOG(("MQTT connected to broker\n"));
 800253c:	4809      	ldr	r0, [pc, #36]	; (8002564 <prvCreateMQTTConnectionWithBroker+0xf0>)
 800253e:	f010 fd85 	bl	801304c <puts>

}
 8002542:	bf00      	nop
 8002544:	3748      	adds	r7, #72	; 0x48
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000009c 	.word	0x2000009c
 8002550:	080027a5 	.word	0x080027a5
 8002554:	08002775 	.word	0x08002775
 8002558:	08016dec 	.word	0x08016dec
 800255c:	08016e00 	.word	0x08016e00
 8002560:	08016e18 	.word	0x08016e18
 8002564:	08016e3c 	.word	0x08016e3c

08002568 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	2214      	movs	r2, #20
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f010 fec3 	bl	8013308 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 8002582:	2300      	movs	r3, #0
 8002584:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 8002586:	2300      	movs	r3, #0
 8002588:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 800258e:	68b8      	ldr	r0, [r7, #8]
 8002590:	f7fd fe6e 	bl	8000270 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	b29b      	uxth	r3, r3
 8002598:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fd fe66 	bl	8000270 <strlen>
 80025a4:	4603      	mov	r3, r0
 80025a6:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f00a fba9 	bl	800cd08 <MQTT_Publish>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
 80025bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <prvMQTTPublishToTopic+0x66>
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4803      	ldr	r0, [pc, #12]	; (80025d8 <prvMQTTPublishToTopic+0x70>)
 80025ca:	f010 fcd9 	bl	8012f80 <iprintf>
    //configASSERT( xResult == MQTTSuccess );
}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	08016e58 	.word	0x08016e58

080025dc <prvMQTTSubscribeToTopic>:

void prvMQTTSubscribeToTopic( MQTTContext_t * pxMQTTContext, char * topic )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t xResult = MQTTSuccess;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    MQTTSubscribeInfo_t xMQTTSubscription[ TOPIC_COUNT ];
    bool xFailedSubscribeToTopic = false;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75bb      	strb	r3, [r7, #22]

    /* Some fields not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTSubscription, 0x00, sizeof( xMQTTSubscription ) );
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	220c      	movs	r2, #12
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f010 fe86 	bl	8013308 <memset>

    /* Each packet requires a unique ID. */
    usSubscribePacketIdentifier = MQTT_GetPacketId( pxMQTTContext );
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f00a fc85 	bl	800cf0c <MQTT_GetPacketId>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <prvMQTTSubscribeToTopic+0xa8>)
 8002608:	801a      	strh	r2, [r3, #0]

    /* Subscribe to the pcExampleTopic topic filter. This example subscribes
     * to only one topic and uses QoS0. */
    xMQTTSubscription[ 0 ].qos = MQTTQoS0;
 800260a:	2300      	movs	r3, #0
 800260c:	723b      	strb	r3, [r7, #8]
    xMQTTSubscription[ 0 ].pTopicFilter = topic;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	60fb      	str	r3, [r7, #12]
    xMQTTSubscription[ 0 ].topicFilterLength = strlen( topic );
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	f7fd fe2c 	bl	8000270 <strlen>
 8002618:	4603      	mov	r3, r0
 800261a:	b29b      	uxth	r3, r3
 800261c:	823b      	strh	r3, [r7, #16]
    do
    {
        /* The client is already connected to the broker. Subscribe to the topic
         * as specified in pcExampleTopic by sending a subscribe packet then
         * waiting for a subscribe acknowledgment (SUBACK). */
        xResult = MQTT_Subscribe( pxMQTTContext,
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <prvMQTTSubscribeToTopic+0xa8>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	f107 0108 	add.w	r1, r7, #8
 8002626:	2201      	movs	r2, #1
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f00a fb3a 	bl	800cca2 <MQTT_Subscribe>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]
                                  xMQTTSubscription,
                                  1, /* Only subscribing to one topic. */
                                  usSubscribePacketIdentifier );
        if(xResult==MQTTSuccess) LOG(("Subscription to %s, result: %d, success\n",topic,xResult));
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <prvMQTTSubscribeToTopic+0x6a>
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	461a      	mov	r2, r3
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	4812      	ldr	r0, [pc, #72]	; (8002688 <prvMQTTSubscribeToTopic+0xac>)
 8002640:	f010 fc9e 	bl	8012f80 <iprintf>
 8002644:	e005      	b.n	8002652 <prvMQTTSubscribeToTopic+0x76>
        else LOG(("Subscription to %s, result: %d, failed\n",topic,xResult));
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	461a      	mov	r2, r3
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	480f      	ldr	r0, [pc, #60]	; (800268c <prvMQTTSubscribeToTopic+0xb0>)
 800264e:	f010 fc97 	bl	8012f80 <iprintf>
    	modo_op = xResult;
 8002652:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <prvMQTTSubscribeToTopic+0xb4>)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	7013      	strb	r3, [r2, #0]
         * packet.  This demo uses the generic packet processing function
         * everywhere to highlight this fact. Note there is a separate demo that
         * shows how to use coreMQTT in a thread safe way – in which case the
         * MQTT protocol runs in the background and this call is not required. */
        /* For version 1.1.0: xResult = MQTT_ProcessLoop( pxMQTTContext, 1000 ); */
        xResult = MQTT_ProcessLoop( pxMQTTContext );
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f00a fc37 	bl	800cecc <MQTT_ProcessLoop>
 800265e:	4603      	mov	r3, r0
 8002660:	75fb      	strb	r3, [r7, #23]
        //configASSERT( xResult == MQTTSuccess );

        /* Reset flag before checking suback responses. */
        xFailedSubscribeToTopic = false;
 8002662:	2300      	movs	r3, #0
 8002664:	75bb      	strb	r3, [r7, #22]
         * #xTopicFilterContext is updated in the event callback (shown in a
         * code block below) to reflect the status of the SUBACK sent by the
         * broker. It represents either the QoS level granted by the server upon
         * subscription, or acknowledgment of server rejection of the
         * subscription request. */
        if( xTopicFilterContext[0].xSubAckStatus == MQTTSubAckFailure )
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <prvMQTTSubscribeToTopic+0xb8>)
 8002668:	791b      	ldrb	r3, [r3, #4]
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d102      	bne.n	8002674 <prvMQTTSubscribeToTopic+0x98>
        {
            xFailedSubscribeToTopic = true;
 800266e:	2301      	movs	r3, #1
 8002670:	75bb      	strb	r3, [r7, #22]
            break;
 8002672:	e003      	b.n	800267c <prvMQTTSubscribeToTopic+0xa0>
        }

    } while( xFailedSubscribeToTopic == true  );
 8002674:	7dbb      	ldrb	r3, [r7, #22]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1d1      	bne.n	800261e <prvMQTTSubscribeToTopic+0x42>
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000f30 	.word	0x20000f30
 8002688:	08016e74 	.word	0x08016e74
 800268c:	08016ea0 	.word	0x08016ea0
 8002690:	20000ac4 	.word	0x20000ac4
 8002694:	200000a4 	.word	0x200000a4

08002698 <prvMQTTProcessIncomingPublish>:

uint16_t prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0c2      	sub	sp, #264	; 0x108
 800269c:	af00      	add	r7, sp, #0
 800269e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026a6:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    //const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 80026a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b7f      	cmp	r3, #127	; 0x7f
 80026c2:	bf28      	it	cs
 80026c4:	237f      	movcs	r3, #127	; 0x7f
 80026c6:	461a      	mov	r2, r3
 80026c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80026cc:	4618      	mov	r0, r3
 80026ce:	f010 ff32 	bl	8013536 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 80026d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80026e2:	4293      	cmp	r3, r2
 80026e4:	bf28      	it	cs
 80026e6:	4613      	movcs	r3, r2
 80026e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80026ec:	443b      	add	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 80026f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	891b      	ldrh	r3, [r3, #8]
 800270c:	2b7f      	cmp	r3, #127	; 0x7f
 800270e:	bf28      	it	cs
 8002710:	237f      	movcs	r3, #127	; 0x7f
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	4618      	mov	r0, r3
 800271c:	f010 ff0b 	bl	8013536 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 8002720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	891b      	ldrh	r3, [r3, #8]
 800272c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002730:	4293      	cmp	r3, r2
 8002732:	bf28      	it	cs
 8002734:	4613      	movcs	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800273e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

	printf("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1);
 8002746:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	4619      	mov	r1, r3
 8002750:	4807      	ldr	r0, [pc, #28]	; (8002770 <prvMQTTProcessIncomingPublish+0xd8>)
 8002752:	f010 fc15 	bl	8012f80 <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	//if(buffer1[0]=='1') BSP_LED_On(LED2);
	//if(buffer1[0]=='0') BSP_LED_Off(LED2);
	return atoi(buffer1);
 8002756:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800275a:	4618      	mov	r0, r3
 800275c:	f00f fc34 	bl	8011fc8 <atoi>
 8002760:	4603      	mov	r3, r0
 8002762:	b29b      	uxth	r3, r3

}
 8002764:	4618      	mov	r0, r3
 8002766:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	08016ec8 	.word	0x08016ec8

08002774 <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 8002782:	f00d fe7b 	bl	801047c <xTaskGetTickCount>
 8002786:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <prvGetTimeMs+0x2c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 8002796:	683b      	ldr	r3, [r7, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000f34 	.word	0x20000f34

080027a4 <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    printf("Ha llegado un paquete MQTT. \n\r");
 80027b0:	4812      	ldr	r0, [pc, #72]	; (80027fc <prvEventCallback+0x58>)
 80027b2:	f010 fbe5 	bl	8012f80 <iprintf>
    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027be:	2b30      	cmp	r3, #48	; 0x30
 80027c0:	d10c      	bne.n	80027dc <prvEventCallback+0x38>
    {
        printf("Ha llegado un paquete tipo Publish. \n\r");
 80027c2:	480f      	ldr	r0, [pc, #60]	; (8002800 <prvEventCallback+0x5c>)
 80027c4:	f010 fbdc 	bl	8012f80 <iprintf>
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
    	modo_op = prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff63 	bl	8002698 <prvMQTTProcessIncomingPublish>
 80027d2:	4603      	mov	r3, r0
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <prvEventCallback+0x60>)
 80027d8:	701a      	strb	r2, [r3, #0]
    	modo_op = prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 80027da:	e00b      	b.n	80027f4 <prvEventCallback+0x50>
        printf("Ha llegado un paquete que NO es tipo Publish. \n\r");
 80027dc:	480a      	ldr	r0, [pc, #40]	; (8002808 <prvEventCallback+0x64>)
 80027de:	f010 fbcf 	bl	8012f80 <iprintf>
    	modo_op = prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff56 	bl	8002698 <prvMQTTProcessIncomingPublish>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <prvEventCallback+0x60>)
 80027f2:	701a      	strb	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	08016ee4 	.word	0x08016ee4
 8002800:	08016f04 	.word	0x08016f04
 8002804:	20000ac4 	.word	0x20000ac4
 8002808:	08016f2c 	.word	0x08016f2c

0800280c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_MspInit+0x4c>)
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_MspInit+0x4c>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6613      	str	r3, [r2, #96]	; 0x60
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_MspInit+0x4c>)
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_MspInit+0x4c>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_MspInit+0x4c>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_MspInit+0x4c>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	210f      	movs	r1, #15
 8002846:	f06f 0001 	mvn.w	r0, #1
 800284a:	f000 fde0 	bl	800340e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ac      	sub	sp, #176	; 0xb0
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	2288      	movs	r2, #136	; 0x88
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f010 fd43 	bl	8013308 <memset>
  if(DFSDM1_Init == 0)
 8002882:	4b25      	ldr	r3, [pc, #148]	; (8002918 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d142      	bne.n	8002910 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800288a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4618      	mov	r0, r3
 800289c:	f003 f900 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80028a6:	f7ff fd95 	bl	80023d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80028b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b4:	6613      	str	r3, [r2, #96]	; 0x60
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80028da:	f44f 7320 	mov.w	r3, #640	; 0x280
 80028de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80028f4:	2306      	movs	r3, #6
 80028f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028fe:	4619      	mov	r1, r3
 8002900:	4807      	ldr	r0, [pc, #28]	; (8002920 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002902:	f000 ff17 	bl	8003734 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	4a02      	ldr	r2, [pc, #8]	; (8002918 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800290e:	6013      	str	r3, [r2, #0]
  }

}
 8002910:	bf00      	nop
 8002912:	37b0      	adds	r7, #176	; 0xb0
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000f38 	.word	0x20000f38
 800291c:	40021000 	.word	0x40021000
 8002920:	48001000 	.word	0x48001000

08002924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b0ac      	sub	sp, #176	; 0xb0
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2288      	movs	r2, #136	; 0x88
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f010 fcdf 	bl	8013308 <memset>
  if(hi2c->Instance==I2C2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <HAL_I2C_MspInit+0xb0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d13b      	bne.n	80029cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002958:	2300      	movs	r3, #0
 800295a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4618      	mov	r0, r3
 8002962:	f003 f89d 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800296c:	f7ff fd32 	bl	80023d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_I2C_MspInit+0xb4>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_I2C_MspInit+0xb4>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_I2C_MspInit+0xb4>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800298c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002990:	2312      	movs	r3, #18
 8002992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002996:	2301      	movs	r3, #1
 8002998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029a2:	2304      	movs	r3, #4
 80029a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029ac:	4619      	mov	r1, r3
 80029ae:	480b      	ldr	r0, [pc, #44]	; (80029dc <HAL_I2C_MspInit+0xb8>)
 80029b0:	f000 fec0 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_I2C_MspInit+0xb4>)
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_I2C_MspInit+0xb4>)
 80029ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029be:	6593      	str	r3, [r2, #88]	; 0x58
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_I2C_MspInit+0xb4>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	37b0      	adds	r7, #176	; 0xb0
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40005800 	.word	0x40005800
 80029d8:	40021000 	.word	0x40021000
 80029dc:	48000400 	.word	0x48000400

080029e0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_I2C_MspDeInit+0x3c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10f      	bne.n	8002a12 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_I2C_MspDeInit+0x40>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <HAL_I2C_MspDeInit+0x40>)
 80029f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80029fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a02:	4808      	ldr	r0, [pc, #32]	; (8002a24 <HAL_I2C_MspDeInit+0x44>)
 8002a04:	f001 f840 	bl	8003a88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <HAL_I2C_MspDeInit+0x44>)
 8002a0e:	f001 f83b 	bl	8003a88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40005800 	.word	0x40005800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	48000400 	.word	0x48000400

08002a28 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_QSPI_MspInit+0x7c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d128      	bne.n	8002a9c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_QSPI_MspInit+0x80>)
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_QSPI_MspInit+0x80>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6513      	str	r3, [r2, #80]	; 0x50
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_QSPI_MspInit+0x80>)
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_QSPI_MspInit+0x80>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_QSPI_MspInit+0x80>)
 8002a68:	f043 0310 	orr.w	r3, r3, #16
 8002a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_QSPI_MspInit+0x80>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002a7a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002a7e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <HAL_QSPI_MspInit+0x84>)
 8002a98:	f000 fe4c 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	a0001000 	.word	0xa0001000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	48001000 	.word	0x48001000

08002ab0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b0a4      	sub	sp, #144	; 0x90
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	2288      	movs	r2, #136	; 0x88
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f010 fc21 	bl	8013308 <memset>
  if(hrtc->Instance==RTC)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_RTC_MspInit+0x5c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d118      	bne.n	8002b02 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 ffdc 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002aee:	f7ff fc71 	bl	80023d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_RTC_MspInit+0x60>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_RTC_MspInit+0x60>)
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3790      	adds	r7, #144	; 0x90
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40002800 	.word	0x40002800
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <HAL_SPI_MspInit+0x8c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d130      	bne.n	8002b98 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_SPI_MspInit+0x90>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_SPI_MspInit+0x90>)
 8002b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b40:	6593      	str	r3, [r2, #88]	; 0x58
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_SPI_MspInit+0x90>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_SPI_MspInit+0x90>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_SPI_MspInit+0x90>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_SPI_MspInit+0x90>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002b66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b78:	2306      	movs	r3, #6
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <HAL_SPI_MspInit+0x94>)
 8002b84:	f000 fdd6 	bl	8003734 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2105      	movs	r1, #5
 8002b8c:	2033      	movs	r0, #51	; 0x33
 8002b8e:	f000 fc3e 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002b92:	2033      	movs	r0, #51	; 0x33
 8002b94:	f000 fc57 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	; 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40003c00 	.word	0x40003c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000800 	.word	0x48000800

08002bac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <HAL_SPI_MspDeInit+0x38>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_SPI_MspDeInit+0x3c>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_SPI_MspDeInit+0x3c>)
 8002bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002bca:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002bce:	4807      	ldr	r0, [pc, #28]	; (8002bec <HAL_SPI_MspDeInit+0x40>)
 8002bd0:	f000 ff5a 	bl	8003a88 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002bd4:	2033      	movs	r0, #51	; 0x33
 8002bd6:	f000 fc44 	bl	8003462 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40003c00 	.word	0x40003c00
 8002be8:	40021000 	.word	0x40021000
 8002bec:	48000800 	.word	0x48000800

08002bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0ae      	sub	sp, #184	; 0xb8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	2288      	movs	r2, #136	; 0x88
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f010 fb79 	bl	8013308 <memset>
  if(huart->Instance==USART1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <HAL_UART_MspInit+0x134>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d13b      	bne.n	8002c98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c24:	2300      	movs	r3, #0
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 ff37 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c38:	f7ff fbcc 	bl	80023d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	4a39      	ldr	r2, [pc, #228]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c46:	6613      	str	r3, [r2, #96]	; 0x60
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002c6c:	23c0      	movs	r3, #192	; 0xc0
 8002c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c84:	2307      	movs	r3, #7
 8002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4826      	ldr	r0, [pc, #152]	; (8002d2c <HAL_UART_MspInit+0x13c>)
 8002c92:	f000 fd4f 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c96:	e040      	b.n	8002d1a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <HAL_UART_MspInit+0x140>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d13b      	bne.n	8002d1a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 fef6 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002cba:	f7ff fb8b 	bl	80023d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_UART_MspInit+0x138>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d08:	2307      	movs	r3, #7
 8002d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <HAL_UART_MspInit+0x144>)
 8002d16:	f000 fd0d 	bl	8003734 <HAL_GPIO_Init>
}
 8002d1a:	bf00      	nop
 8002d1c:	37b8      	adds	r7, #184	; 0xb8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40013800 	.word	0x40013800
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	48000400 	.word	0x48000400
 8002d30:	40004800 	.word	0x40004800
 8002d34:	48000c00 	.word	0x48000c00

08002d38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0ac      	sub	sp, #176	; 0xb0
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2288      	movs	r2, #136	; 0x88
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f010 fad5 	bl	8013308 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d66:	d17c      	bne.n	8002e62 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002d6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002d76:	2301      	movs	r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002d7e:	2318      	movs	r3, #24
 8002d80:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002d82:	2307      	movs	r3, #7
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002d86:	2302      	movs	r3, #2
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002d8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 fe81 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002da4:	f7ff fb16 	bl	80023d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dde:	f000 fca9 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002de2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0c:	f000 fc92 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d114      	bne.n	8002e5e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002e4c:	f001 ff5c 	bl	8004d08 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <HAL_PCD_MspInit+0x134>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e5c:	e001      	b.n	8002e62 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002e5e:	f001 ff53 	bl	8004d08 <HAL_PWREx_EnableVddUSB>
}
 8002e62:	bf00      	nop
 8002e64:	37b0      	adds	r7, #176	; 0xb0
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <NMI_Handler+0x4>

08002e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <HardFault_Handler+0x4>

08002e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <MemManage_Handler+0x4>

08002e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <BusFault_Handler+0x4>

08002e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <UsageFault_Handler+0x4>

08002e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea0:	f000 f972 	bl	8003188 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ea4:	f00d fe20 	bl	8010ae8 <xTaskGetSchedulerState>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002eae:	f00e fdf3 	bl	8011a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f000 ff08 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002ec8:	2020      	movs	r0, #32
 8002eca:	f000 ff01 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002ece:	2040      	movs	r0, #64	; 0x40
 8002ed0:	f000 fefe 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002ed4:	2080      	movs	r0, #128	; 0x80
 8002ed6:	f000 fefb 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002eda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ede:	f000 fef7 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002eea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002eee:	f000 feef 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002ef2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ef6:	f000 feeb 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002efa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002efe:	f000 fee7 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002f02:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f06:	f000 fee3 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002f0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f0e:	f000 fedf 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  return 1;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <_kill>:

int _kill(int pid, int sig)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f30:	f010 fad4 	bl	80134dc <__errno>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2216      	movs	r2, #22
 8002f38:	601a      	str	r2, [r3, #0]
  return -1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_exit>:

void _exit (int status)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f4e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffe7 	bl	8002f26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f58:	e7fe      	b.n	8002f58 <_exit+0x12>

08002f5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e00a      	b.n	8002f82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f6c:	f3af 8000 	nop.w
 8002f70:	4601      	mov	r1, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	60ba      	str	r2, [r7, #8]
 8002f78:	b2ca      	uxtb	r2, r1
 8002f7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dbf0      	blt.n	8002f6c <_read+0x12>
  }

  return len;
 8002f8a:	687b      	ldr	r3, [r7, #4]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fbc:	605a      	str	r2, [r3, #4]
  return 0;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <_isatty>:

int _isatty(int file)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <_sbrk+0x5c>)
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <_sbrk+0x60>)
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <_sbrk+0x64>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <_sbrk+0x68>)
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	429a      	cmp	r2, r3
 800302a:	d207      	bcs.n	800303c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800302c:	f010 fa56 	bl	80134dc <__errno>
 8003030:	4603      	mov	r3, r0
 8003032:	220c      	movs	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	e009      	b.n	8003050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <_sbrk+0x64>)
 800304c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20018000 	.word	0x20018000
 800305c:	00000400 	.word	0x00000400
 8003060:	20000f3c 	.word	0x20000f3c
 8003064:	20003bf0 	.word	0x20003bf0

08003068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <SystemInit+0x20>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <SystemInit+0x20>)
 8003074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800308c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003090:	f7ff ffea 	bl	8003068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003096:	490d      	ldr	r1, [pc, #52]	; (80030cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003098:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <LoopForever+0xe>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800309c:	e002      	b.n	80030a4 <LoopCopyDataInit>

0800309e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a2:	3304      	adds	r3, #4

080030a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a8:	d3f9      	bcc.n	800309e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030ac:	4c0a      	ldr	r4, [pc, #40]	; (80030d8 <LoopForever+0x16>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b0:	e001      	b.n	80030b6 <LoopFillZerobss>

080030b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b4:	3204      	adds	r2, #4

080030b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b8:	d3fb      	bcc.n	80030b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ba:	f010 fa15 	bl	80134e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030be:	f7fd ffdb 	bl	8001078 <main>

080030c2 <LoopForever>:

LoopForever:
    b LoopForever
 80030c2:	e7fe      	b.n	80030c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030cc:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80030d0:	08018784 	.word	0x08018784
  ldr r2, =_sbss
 80030d4:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80030d8:	20003bec 	.word	0x20003bec

080030dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC1_2_IRQHandler>

080030de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e8:	2003      	movs	r0, #3
 80030ea:	f000 f985 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ee:	200f      	movs	r0, #15
 80030f0:	f000 f80e 	bl	8003110 <HAL_InitTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	e001      	b.n	8003104 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003100:	f7ff fb84 	bl	800280c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003104:	79fb      	ldrb	r3, [r7, #7]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_InitTick+0x6c>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003124:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_InitTick+0x70>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_InitTick+0x6c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003132:	fbb3 f3f1 	udiv	r3, r3, r1
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f99f 	bl	800347e <HAL_SYSTICK_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d809      	bhi.n	8003160 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800314c:	2200      	movs	r2, #0
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f000 f95b 	bl	800340e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_InitTick+0x74>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e007      	b.n	8003170 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	e004      	b.n	8003170 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e001      	b.n	8003170 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200000b4 	.word	0x200000b4
 8003180:	200000ac 	.word	0x200000ac
 8003184:	200000b0 	.word	0x200000b0

08003188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x20>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x24>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_IncTick+0x24>)
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	200000b4 	.word	0x200000b4
 80031ac:	20000f40 	.word	0x20000f40

080031b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return uwTick;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_GetTick+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000f40 	.word	0x20000f40

080031c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff ffee 	bl	80031b0 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d005      	beq.n	80031ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_Delay+0x44>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ee:	bf00      	nop
 80031f0:	f7ff ffde 	bl	80031b0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d8f7      	bhi.n	80031f0 <HAL_Delay+0x28>
  {
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200000b4 	.word	0x200000b4

08003210 <__NVIC_SetPriorityGrouping>:
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_DisableIRQ>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db12      	blt.n	80032e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	490a      	ldr	r1, [pc, #40]	; (80032f4 <__NVIC_DisableIRQ+0x44>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	3320      	adds	r3, #32
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032dc:	f3bf 8f4f 	dsb	sy
}
 80032e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032e2:	f3bf 8f6f 	isb	sy
}
 80032e6:	bf00      	nop
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	; (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	; (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff05 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff1a 	bl	8003258 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff0d 	bl	8003274 <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff1d 	bl	80032b0 <__NVIC_DisableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff94 	bl	80033b4 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0ac      	b.n	8003604 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f8b2 	bl	8003618 <DFSDM_GetChannelFromInstance>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4a55      	ldr	r2, [pc, #340]	; (800360c <HAL_DFSDM_ChannelInit+0x174>)
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e09f      	b.n	8003604 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff f9c9 	bl	800285c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80034ca:	4b51      	ldr	r3, [pc, #324]	; (8003610 <HAL_DFSDM_ChannelInit+0x178>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_DFSDM_ChannelInit+0x178>)
 80034d2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80034d4:	4b4e      	ldr	r3, [pc, #312]	; (8003610 <HAL_DFSDM_ChannelInit+0x178>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d125      	bne.n	8003528 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80034dc:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a4c      	ldr	r2, [pc, #304]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 80034e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034e6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80034e8:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4948      	ldr	r1, [pc, #288]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a46      	ldr	r2, [pc, #280]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 80034fc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003500:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	791b      	ldrb	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800350a:	4b42      	ldr	r3, [pc, #264]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	3b01      	subs	r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	493f      	ldr	r1, [pc, #252]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800351c:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <HAL_DFSDM_ChannelInit+0x17c>)
 8003522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003526:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003536:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003546:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800354c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 020f 	bic.w	r2, r2, #15
 8003564:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6819      	ldr	r1, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800358c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f002 0207 	and.w	r2, r2, #7
 80035b8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f810 	bl	8003618 <DFSDM_GetChannelFromInstance>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4904      	ldr	r1, [pc, #16]	; (800360c <HAL_DFSDM_ChannelInit+0x174>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000f48 	.word	0x20000f48
 8003610:	20000f44 	.word	0x20000f44
 8003614:	40016000 	.word	0x40016000

08003618 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <DFSDM_GetChannelFromInstance+0x7c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e02b      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <DFSDM_GetChannelFromInstance+0x80>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d102      	bne.n	800363c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e024      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <DFSDM_GetChannelFromInstance+0x84>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d102      	bne.n	800364a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003644:	2302      	movs	r3, #2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e01d      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <DFSDM_GetChannelFromInstance+0x88>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d102      	bne.n	8003658 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003652:	2304      	movs	r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e016      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <DFSDM_GetChannelFromInstance+0x8c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d102      	bne.n	8003666 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003660:	2305      	movs	r3, #5
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e00f      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <DFSDM_GetChannelFromInstance+0x90>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d102      	bne.n	8003674 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800366e:	2306      	movs	r3, #6
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e008      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <DFSDM_GetChannelFromInstance+0x94>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800367c:	2307      	movs	r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e001      	b.n	8003686 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003682:	2303      	movs	r3, #3
 8003684:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003686:	68fb      	ldr	r3, [r7, #12]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	40016000 	.word	0x40016000
 8003698:	40016020 	.word	0x40016020
 800369c:	40016040 	.word	0x40016040
 80036a0:	40016080 	.word	0x40016080
 80036a4:	400160a0 	.word	0x400160a0
 80036a8:	400160c0 	.word	0x400160c0
 80036ac:	400160e0 	.word	0x400160e0

080036b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d005      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2204      	movs	r2, #4
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e029      	b.n	8003728 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 020e 	bic.w	r2, r2, #14
 80036e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0201 	bic.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	f003 021c 	and.w	r2, r3, #28
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f202 	lsl.w	r2, r1, r2
 8003706:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
    }
  }
  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003742:	e17f      	b.n	8003a44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8171 	beq.w	8003a3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d005      	beq.n	8003774 <HAL_GPIO_Init+0x40>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d130      	bne.n	80037d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037aa:	2201      	movs	r2, #1
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 0201 	and.w	r2, r3, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d118      	bne.n	8003814 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037e8:	2201      	movs	r2, #1
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f003 0201 	and.w	r2, r3, #1
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d017      	beq.n	8003850 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d123      	bne.n	80038a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	08da      	lsrs	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3208      	adds	r2, #8
 8003864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	220f      	movs	r2, #15
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	08da      	lsrs	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3208      	adds	r2, #8
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0203 	and.w	r2, r3, #3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80ac 	beq.w	8003a3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e6:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <HAL_GPIO_Init+0x330>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	4a5e      	ldr	r2, [pc, #376]	; (8003a64 <HAL_GPIO_Init+0x330>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6613      	str	r3, [r2, #96]	; 0x60
 80038f2:	4b5c      	ldr	r3, [pc, #368]	; (8003a64 <HAL_GPIO_Init+0x330>)
 80038f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038fe:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <HAL_GPIO_Init+0x334>)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003928:	d025      	beq.n	8003976 <HAL_GPIO_Init+0x242>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a4f      	ldr	r2, [pc, #316]	; (8003a6c <HAL_GPIO_Init+0x338>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <HAL_GPIO_Init+0x23e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_GPIO_Init+0x33c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x23a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a4d      	ldr	r2, [pc, #308]	; (8003a74 <HAL_GPIO_Init+0x340>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x236>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <HAL_GPIO_Init+0x344>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x232>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4b      	ldr	r2, [pc, #300]	; (8003a7c <HAL_GPIO_Init+0x348>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x22e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4a      	ldr	r2, [pc, #296]	; (8003a80 <HAL_GPIO_Init+0x34c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x22a>
 800395a:	2306      	movs	r3, #6
 800395c:	e00c      	b.n	8003978 <HAL_GPIO_Init+0x244>
 800395e:	2307      	movs	r3, #7
 8003960:	e00a      	b.n	8003978 <HAL_GPIO_Init+0x244>
 8003962:	2305      	movs	r3, #5
 8003964:	e008      	b.n	8003978 <HAL_GPIO_Init+0x244>
 8003966:	2304      	movs	r3, #4
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x244>
 800396a:	2303      	movs	r3, #3
 800396c:	e004      	b.n	8003978 <HAL_GPIO_Init+0x244>
 800396e:	2302      	movs	r3, #2
 8003970:	e002      	b.n	8003978 <HAL_GPIO_Init+0x244>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_GPIO_Init+0x244>
 8003976:	2300      	movs	r3, #0
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	f002 0203 	and.w	r2, r2, #3
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	4093      	lsls	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003988:	4937      	ldr	r1, [pc, #220]	; (8003a68 <HAL_GPIO_Init+0x334>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3302      	adds	r3, #2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003996:	4b3b      	ldr	r3, [pc, #236]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ba:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <HAL_GPIO_Init+0x350>)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039c0:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_GPIO_Init+0x350>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <HAL_GPIO_Init+0x350>)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_GPIO_Init+0x350>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a38:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <HAL_GPIO_Init+0x350>)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	3301      	adds	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f47f ae78 	bne.w	8003744 <HAL_GPIO_Init+0x10>
  }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	48000400 	.word	0x48000400
 8003a70:	48000800 	.word	0x48000800
 8003a74:	48000c00 	.word	0x48000c00
 8003a78:	48001000 	.word	0x48001000
 8003a7c:	48001400 	.word	0x48001400
 8003a80:	48001800 	.word	0x48001800
 8003a84:	40010400 	.word	0x40010400

08003a88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003a96:	e0cd      	b.n	8003c34 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a98:	2201      	movs	r2, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80c0 	beq.w	8003c2e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003aae:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_GPIO_DeInit+0x1c8>)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ad6:	d025      	beq.n	8003b24 <HAL_GPIO_DeInit+0x9c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a5e      	ldr	r2, [pc, #376]	; (8003c54 <HAL_GPIO_DeInit+0x1cc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01f      	beq.n	8003b20 <HAL_GPIO_DeInit+0x98>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a5d      	ldr	r2, [pc, #372]	; (8003c58 <HAL_GPIO_DeInit+0x1d0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d019      	beq.n	8003b1c <HAL_GPIO_DeInit+0x94>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a5c      	ldr	r2, [pc, #368]	; (8003c5c <HAL_GPIO_DeInit+0x1d4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <HAL_GPIO_DeInit+0x90>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <HAL_GPIO_DeInit+0x1d8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00d      	beq.n	8003b14 <HAL_GPIO_DeInit+0x8c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a5a      	ldr	r2, [pc, #360]	; (8003c64 <HAL_GPIO_DeInit+0x1dc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <HAL_GPIO_DeInit+0x88>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a59      	ldr	r2, [pc, #356]	; (8003c68 <HAL_GPIO_DeInit+0x1e0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_GPIO_DeInit+0x84>
 8003b08:	2306      	movs	r3, #6
 8003b0a:	e00c      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	e00a      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b10:	2305      	movs	r3, #5
 8003b12:	e008      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b14:	2304      	movs	r3, #4
 8003b16:	e006      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e004      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e002      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_GPIO_DeInit+0x9e>
 8003b24:	2300      	movs	r3, #0
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	f002 0203 	and.w	r2, r2, #3
 8003b2c:	0092      	lsls	r2, r2, #2
 8003b2e:	4093      	lsls	r3, r2
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d132      	bne.n	8003b9c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b36:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	494b      	ldr	r1, [pc, #300]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003b44:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	4947      	ldr	r1, [pc, #284]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003b52:	4b46      	ldr	r3, [pc, #280]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	4944      	ldr	r1, [pc, #272]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	4940      	ldr	r1, [pc, #256]	; (8003c6c <HAL_GPIO_DeInit+0x1e4>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	220f      	movs	r2, #15
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003b7e:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <HAL_GPIO_DeInit+0x1c8>)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	43da      	mvns	r2, r3
 8003b8e:	4830      	ldr	r0, [pc, #192]	; (8003c50 <HAL_GPIO_DeInit+0x1c8>)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	400a      	ands	r2, r1
 8003b96:	3302      	adds	r3, #2
 8003b98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2103      	movs	r1, #3
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	08d2      	lsrs	r2, r2, #3
 8003bd0:	4019      	ands	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2103      	movs	r1, #3
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	401a      	ands	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2103      	movs	r1, #3
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	401a      	ands	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	2101      	movs	r1, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	401a      	ands	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f47f af2b 	bne.w	8003a98 <HAL_GPIO_DeInit+0x10>
  }
}
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40010000 	.word	0x40010000
 8003c54:	48000400 	.word	0x48000400
 8003c58:	48000800 	.word	0x48000800
 8003c5c:	48000c00 	.word	0x48000c00
 8003c60:	48001000 	.word	0x48001000
 8003c64:	48001400 	.word	0x48001400
 8003c68:	48001800 	.word	0x48001800
 8003c6c:	40010400 	.word	0x40010400

08003c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e001      	b.n	8003c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd ff44 	bl	8001b7c <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40010400 	.word	0x40010400

08003d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e08d      	b.n	8003e2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe fdfc 	bl	8002924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	; 0x24
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	e006      	b.n	8003d88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d108      	bne.n	8003da2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	e007      	b.n	8003db2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e021      	b.n	8003e8c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	; 0x24
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fe fdbd 	bl	80029e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	817b      	strh	r3, [r7, #10]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	813b      	strh	r3, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	f040 80f9 	bne.w	80040ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x34>
 8003ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0ed      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Mem_Write+0x4e>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0e6      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eea:	f7ff f961 	bl	80031b0 <HAL_GetTick>
 8003eee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2319      	movs	r3, #25
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fac3 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0d1      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2221      	movs	r2, #33	; 0x21
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f34:	88f8      	ldrh	r0, [r7, #6]
 8003f36:	893a      	ldrh	r2, [r7, #8]
 8003f38:	8979      	ldrh	r1, [r7, #10]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4603      	mov	r3, r0
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f9d3 	bl	80042f0 <I2C_RequestMemoryWrite>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0a9      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2bff      	cmp	r3, #255	; 0xff
 8003f64:	d90e      	bls.n	8003f84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	8979      	ldrh	r1, [r7, #10]
 8003f74:	2300      	movs	r3, #0
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fc3d 	bl	80047fc <I2C_TransferConfig>
 8003f82:	e00f      	b.n	8003fa4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	8979      	ldrh	r1, [r7, #10]
 8003f96:	2300      	movs	r3, #0
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fc2c 	bl	80047fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fabc 	bl	8004526 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e07b      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d034      	beq.n	800405c <HAL_I2C_Mem_Write+0x1c8>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d130      	bne.n	800405c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	2200      	movs	r2, #0
 8004002:	2180      	movs	r1, #128	; 0x80
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fa3f 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e04d      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2bff      	cmp	r3, #255	; 0xff
 800401c:	d90e      	bls.n	800403c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fbe1 	bl	80047fc <I2C_TransferConfig>
 800403a:	e00f      	b.n	800405c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	b2da      	uxtb	r2, r3
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	2300      	movs	r3, #0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fbd0 	bl	80047fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d19e      	bne.n	8003fa4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 faa2 	bl	80045b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e01a      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2220      	movs	r2, #32
 8004080:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <HAL_I2C_Mem_Write+0x224>)
 800408e:	400b      	ands	r3, r1
 8004090:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	fe00e800 	.word	0xfe00e800

080040bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	f040 80fd 	bne.w	80042de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_I2C_Mem_Read+0x34>
 80040ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0f1      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_I2C_Mem_Read+0x4e>
 8004106:	2302      	movs	r3, #2
 8004108:	e0ea      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004112:	f7ff f84d 	bl	80031b0 <HAL_GetTick>
 8004116:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2319      	movs	r3, #25
 800411e:	2201      	movs	r2, #1
 8004120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f9af 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0d5      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2222      	movs	r2, #34	; 0x22
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415c:	88f8      	ldrh	r0, [r7, #6]
 800415e:	893a      	ldrh	r2, [r7, #8]
 8004160:	8979      	ldrh	r1, [r7, #10]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	4603      	mov	r3, r0
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f913 	bl	8004398 <I2C_RequestMemoryRead>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0ad      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2bff      	cmp	r3, #255	; 0xff
 800418c:	d90e      	bls.n	80041ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	b2da      	uxtb	r2, r3
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	4b52      	ldr	r3, [pc, #328]	; (80042e8 <HAL_I2C_Mem_Read+0x22c>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fb29 	bl	80047fc <I2C_TransferConfig>
 80041aa:	e00f      	b.n	80041cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_I2C_Mem_Read+0x22c>)
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fb18 	bl	80047fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	2200      	movs	r2, #0
 80041d4:	2104      	movs	r1, #4
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f956 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e07c      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d034      	beq.n	800428c <HAL_I2C_Mem_Read+0x1d0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d130      	bne.n	800428c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	2200      	movs	r2, #0
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f927 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e04d      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2bff      	cmp	r3, #255	; 0xff
 800424c:	d90e      	bls.n	800426c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	b2da      	uxtb	r2, r3
 800425a:	8979      	ldrh	r1, [r7, #10]
 800425c:	2300      	movs	r3, #0
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fac9 	bl	80047fc <I2C_TransferConfig>
 800426a:	e00f      	b.n	800428c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	b2da      	uxtb	r2, r3
 800427c:	8979      	ldrh	r1, [r7, #10]
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fab8 	bl	80047fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d19a      	bne.n	80041cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f98a 	bl	80045b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e01a      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2220      	movs	r2, #32
 80042b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_I2C_Mem_Read+0x230>)
 80042be:	400b      	ands	r3, r1
 80042c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	80002400 	.word	0x80002400
 80042ec:	fe00e800 	.word	0xfe00e800

080042f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <I2C_RequestMemoryWrite+0xa4>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fa6f 	bl	80047fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f8ff 	bl	8004526 <I2C_WaitOnTXISFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e02c      	b.n	800438c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004338:	893b      	ldrh	r3, [r7, #8]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	629a      	str	r2, [r3, #40]	; 0x28
 8004342:	e015      	b.n	8004370 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004344:	893b      	ldrh	r3, [r7, #8]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	b29b      	uxth	r3, r3
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	69b9      	ldr	r1, [r7, #24]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f8e5 	bl	8004526 <I2C_WaitOnTXISFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e012      	b.n	800438c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2200      	movs	r2, #0
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f884 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	80002000 	.word	0x80002000

08004398 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	817b      	strh	r3, [r7, #10]
 80043aa:	460b      	mov	r3, r1
 80043ac:	813b      	strh	r3, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	8979      	ldrh	r1, [r7, #10]
 80043b8:	4b20      	ldr	r3, [pc, #128]	; (800443c <I2C_RequestMemoryRead+0xa4>)
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2300      	movs	r3, #0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fa1c 	bl	80047fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f8ac 	bl	8004526 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e02c      	b.n	8004432 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
 80043e8:	e015      	b.n	8004416 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ea:	893b      	ldrh	r3, [r7, #8]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	69b9      	ldr	r1, [r7, #24]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f892 	bl	8004526 <I2C_WaitOnTXISFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e012      	b.n	8004432 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2200      	movs	r2, #0
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f831 	bl	8004488 <I2C_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	80002000 	.word	0x80002000

08004440 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d103      	bne.n	800445e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d007      	beq.n	800447c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	619a      	str	r2, [r3, #24]
  }
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004498:	e031      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d02d      	beq.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fe fe85 	bl	80031b0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d122      	bne.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d113      	bne.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00f      	b.n	800451e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	429a      	cmp	r2, r3
 800451a:	d0be      	beq.n	800449a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004532:	e033      	b.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f87f 	bl	800463c <I2C_IsErrorOccurred>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e031      	b.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d025      	beq.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fe fe2e 	bl	80031b0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11a      	bne.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d013      	beq.n	800459c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d1c4      	bne.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045c0:	e02f      	b.n	8004622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f838 	bl	800463c <I2C_IsErrorOccurred>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02d      	b.n	8004632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fe fdeb 	bl	80031b0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d11a      	bne.n	8004622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d013      	beq.n	8004622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f043 0220 	orr.w	r2, r3, #32
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e007      	b.n	8004632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d1c8      	bne.n	80045c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d068      	beq.n	800473a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004670:	e049      	b.n	8004706 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d045      	beq.n	8004706 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fe fd99 	bl	80031b0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_IsErrorOccurred+0x54>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d13a      	bne.n	8004706 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b2:	d121      	bne.n	80046f8 <I2C_IsErrorOccurred+0xbc>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ba:	d01d      	beq.n	80046f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d01a      	beq.n	80046f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046d2:	f7fe fd6d 	bl	80031b0 <HAL_GetTick>
 80046d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d8:	e00e      	b.n	80046f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046da:	f7fe fd69 	bl	80031b0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b19      	cmp	r3, #25
 80046e6:	d907      	bls.n	80046f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f043 0320 	orr.w	r3, r3, #32
 80046ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046f6:	e006      	b.n	8004706 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d1e9      	bne.n	80046da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b20      	cmp	r3, #32
 8004712:	d003      	beq.n	800471c <I2C_IsErrorOccurred+0xe0>
 8004714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0aa      	beq.n	8004672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800471c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2220      	movs	r2, #32
 800472a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f043 0304 	orr.w	r3, r3, #4
 8004732:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800475c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f043 0308 	orr.w	r3, r3, #8
 8004774:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800477e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	f043 0302 	orr.w	r3, r3, #2
 8004796:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff fe45 	bl	8004440 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <I2C_IsErrorOccurred+0x1bc>)
 80047c2:	400b      	ands	r3, r1
 80047c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	fe00e800 	.word	0xfe00e800

080047fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	817b      	strh	r3, [r7, #10]
 800480a:	4613      	mov	r3, r2
 800480c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004814:	7a7b      	ldrb	r3, [r7, #9]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800481c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	4313      	orrs	r3, r2
 8004826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800482a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	0d5b      	lsrs	r3, r3, #21
 8004836:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <I2C_TransferConfig+0x60>)
 800483c:	430b      	orrs	r3, r1
 800483e:	43db      	mvns	r3, r3
 8004840:	ea02 0103 	and.w	r1, r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	03ff63ff 	.word	0x03ff63ff

08004860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b20      	cmp	r3, #32
 8004874:	d138      	bne.n	80048e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004880:	2302      	movs	r3, #2
 8004882:	e032      	b.n	80048ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2224      	movs	r2, #36	; 0x24
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b20      	cmp	r3, #32
 800490a:	d139      	bne.n	8004980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004916:	2302      	movs	r3, #2
 8004918:	e033      	b.n	8004982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2224      	movs	r2, #36	; 0x24
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	021b      	lsls	r3, r3, #8
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800498e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004990:	b08f      	sub	sp, #60	; 0x3c
 8004992:	af0a      	add	r7, sp, #40	; 0x28
 8004994:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e116      	b.n	8004bce <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe f9bc 	bl	8002d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2203      	movs	r2, #3
 80049c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f004 f957 	bl	8008c92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	687e      	ldr	r6, [r7, #4]
 80049ec:	466d      	mov	r5, sp
 80049ee:	f106 0410 	add.w	r4, r6, #16
 80049f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a02:	1d33      	adds	r3, r6, #4
 8004a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a06:	6838      	ldr	r0, [r7, #0]
 8004a08:	f004 f917 	bl	8008c3a <USB_CoreInit>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0d7      	b.n	8004bce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f004 f945 	bl	8008cb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e04a      	b.n	8004ac6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	333d      	adds	r3, #61	; 0x3d
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	333c      	adds	r3, #60	; 0x3c
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a58:	7bfa      	ldrb	r2, [r7, #15]
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	b298      	uxth	r0, r3
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	3356      	adds	r3, #86	; 0x56
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3340      	adds	r3, #64	; 0x40
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	3344      	adds	r3, #68	; 0x44
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3348      	adds	r3, #72	; 0x48
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	334c      	adds	r3, #76	; 0x4c
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	7bfa      	ldrb	r2, [r7, #15]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3af      	bcc.n	8004a30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e044      	b.n	8004b60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d3b5      	bcc.n	8004ad6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	687e      	ldr	r6, [r7, #4]
 8004b72:	466d      	mov	r5, sp
 8004b74:	f106 0410 	add.w	r4, r6, #16
 8004b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b84:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b88:	1d33      	adds	r3, r6, #4
 8004b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b8c:	6838      	ldr	r0, [r7, #0]
 8004b8e:	f004 f8dd 	bl	8008d4c <USB_DevInit>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e014      	b.n	8004bce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d102      	bne.n	8004bc2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f80a 	bl	8004bd6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 fa7f 	bl	80090ca <USB_DevDisconnect>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	f043 0303 	orr.w	r3, r3, #3
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40007000 	.word	0x40007000

08004c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6a:	d130      	bne.n	8004cce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c78:	d038      	beq.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c7a:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c82:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2232      	movs	r2, #50	; 0x32
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0c9b      	lsrs	r3, r3, #18
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca0:	e002      	b.n	8004ca8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d102      	bne.n	8004cbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f2      	bne.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	d110      	bne.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00f      	b.n	8004cee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cda:	d007      	beq.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ce4:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	200000ac 	.word	0x200000ac
 8004d04:	431bde83 	.word	0x431bde83

08004d08 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d16:	6053      	str	r3, [r2, #4]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40007000 	.word	0x40007000

08004d28 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004d30:	f7fe fa3e 	bl	80031b0 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e063      	b.n	8004e08 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fd fe67 	bl	8002a28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004d5a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f858 	bl	8004e14 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	021a      	lsls	r2, r3, #8
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2120      	movs	r1, #32
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f850 	bl	8004e30 <QSPI_WaitFlagStateUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d131      	bne.n	8004dfe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f023 0310 	bic.w	r3, r3, #16
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6852      	ldr	r2, [r2, #4]
 8004dac:	0611      	lsls	r1, r2, #24
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68d2      	ldr	r2, [r2, #12]
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <HAL_QSPI_Init+0xe8>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6912      	ldr	r2, [r2, #16]
 8004dca:	0411      	lsls	r1, r2, #16
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6952      	ldr	r2, [r2, #20]
 8004dd0:	4311      	orrs	r1, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6992      	ldr	r2, [r2, #24]
 8004dd6:	4311      	orrs	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6812      	ldr	r2, [r2, #0]
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004e06:	7afb      	ldrb	r3, [r7, #11]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	ffe0f8fe 	.word	0xffe0f8fe

08004e14 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e40:	e01a      	b.n	8004e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d016      	beq.n	8004e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fe f9b1 	bl	80031b0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2204      	movs	r2, #4
 8004e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e00e      	b.n	8004e96 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d1d6      	bne.n	8004e42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e3ca      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb2:	4b97      	ldr	r3, [pc, #604]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ebc:	4b94      	ldr	r3, [pc, #592]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80e4 	beq.w	800509c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_RCC_OscConfig+0x4a>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	f040 808b 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 8087 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eea:	4b89      	ldr	r3, [pc, #548]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e3a2      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	4b82      	ldr	r3, [pc, #520]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_RCC_OscConfig+0x7c>
 8004f12:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_OscConfig+0x88>
 8004f1c:	4b7c      	ldr	r3, [pc, #496]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d223      	bcs.n	8004f74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fd55 	bl	80059e0 <RCC_SetFlashLatencyFromMSIRange>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e383      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f40:	4b73      	ldr	r3, [pc, #460]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a72      	ldr	r2, [pc, #456]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f46:	f043 0308 	orr.w	r3, r3, #8
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b70      	ldr	r3, [pc, #448]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	496d      	ldr	r1, [pc, #436]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	4968      	ldr	r1, [pc, #416]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	604b      	str	r3, [r1, #4]
 8004f72:	e025      	b.n	8004fc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f74:	4b66      	ldr	r3, [pc, #408]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a65      	ldr	r2, [pc, #404]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	f043 0308 	orr.w	r3, r3, #8
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b63      	ldr	r3, [pc, #396]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4960      	ldr	r1, [pc, #384]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f92:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	495b      	ldr	r1, [pc, #364]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fd15 	bl	80059e0 <RCC_SetFlashLatencyFromMSIRange>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e343      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fc0:	f000 fc4a 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b52      	ldr	r3, [pc, #328]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	4950      	ldr	r1, [pc, #320]	; (8005114 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <HAL_RCC_OscConfig+0x278>)
 8004fde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fe0:	4b4e      	ldr	r3, [pc, #312]	; (800511c <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe f893 	bl	8003110 <HAL_InitTick>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d052      	beq.n	800509a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	e327      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d032      	beq.n	8005066 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a42      	ldr	r2, [pc, #264]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800500c:	f7fe f8d0 	bl	80031b0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005014:	f7fe f8cc 	bl	80031b0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e310      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005026:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a36      	ldr	r2, [pc, #216]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005038:	f043 0308 	orr.w	r3, r3, #8
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b34      	ldr	r3, [pc, #208]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	4931      	ldr	r1, [pc, #196]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005050:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	492c      	ldr	r1, [pc, #176]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
 8005064:	e01a      	b.n	800509c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005066:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005072:	f7fe f89d 	bl	80031b0 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800507a:	f7fe f899 	bl	80031b0 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e2dd      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800508c:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x1da>
 8005098:	e000      	b.n	800509c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800509a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d074      	beq.n	8005192 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x21a>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d10e      	bne.n	80050d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d10b      	bne.n	80050d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d064      	beq.n	8005190 <HAL_RCC_OscConfig+0x2f0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d160      	bne.n	8005190 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e2ba      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050da:	d106      	bne.n	80050ea <HAL_RCC_OscConfig+0x24a>
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e026      	b.n	8005138 <HAL_RCC_OscConfig+0x298>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f2:	d115      	bne.n	8005120 <HAL_RCC_OscConfig+0x280>
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a05      	ldr	r2, [pc, #20]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a02      	ldr	r2, [pc, #8]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	e014      	b.n	8005138 <HAL_RCC_OscConfig+0x298>
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	08017fdc 	.word	0x08017fdc
 8005118:	200000ac 	.word	0x200000ac
 800511c:	200000b0 	.word	0x200000b0
 8005120:	4ba0      	ldr	r3, [pc, #640]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a9f      	ldr	r2, [pc, #636]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b9d      	ldr	r3, [pc, #628]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a9c      	ldr	r2, [pc, #624]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fe f836 	bl	80031b0 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005148:	f7fe f832 	bl	80031b0 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	; 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e276      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515a:	4b92      	ldr	r3, [pc, #584]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x2a8>
 8005166:	e014      	b.n	8005192 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fe f822 	bl	80031b0 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fe f81e 	bl	80031b0 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e262      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x2d0>
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d060      	beq.n	8005260 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_OscConfig+0x310>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b0c      	cmp	r3, #12
 80051a8:	d119      	bne.n	80051de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d116      	bne.n	80051de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b0:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e23f      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	4973      	ldr	r1, [pc, #460]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051dc:	e040      	b.n	8005260 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d023      	beq.n	800522e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e6:	4b6f      	ldr	r3, [pc, #444]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6e      	ldr	r2, [pc, #440]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fd ffdd 	bl	80031b0 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fa:	f7fd ffd9 	bl	80031b0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e21d      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800520c:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005218:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	495f      	ldr	r1, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	e018      	b.n	8005260 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522e:	4b5d      	ldr	r3, [pc, #372]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5c      	ldr	r2, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7fd ffb9 	bl	80031b0 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005242:	f7fd ffb5 	bl	80031b0 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1f9      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f0      	bne.n	8005242 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d03c      	beq.n	80052e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01c      	beq.n	80052ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527a:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fd ff94 	bl	80031b0 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528c:	f7fd ff90 	bl	80031b0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1d4      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529e:	4b41      	ldr	r3, [pc, #260]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ef      	beq.n	800528c <HAL_RCC_OscConfig+0x3ec>
 80052ac:	e01b      	b.n	80052e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ae:	4b3d      	ldr	r3, [pc, #244]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b4:	4a3b      	ldr	r2, [pc, #236]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fd ff77 	bl	80031b0 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fd ff73 	bl	80031b0 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e1b7      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d8:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ef      	bne.n	80052c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80a6 	beq.w	8005440 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f4:	2300      	movs	r3, #0
 80052f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530e:	6593      	str	r3, [r2, #88]	; 0x58
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005320:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d118      	bne.n	800535e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005338:	f7fd ff3a 	bl	80031b0 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fd ff36 	bl	80031b0 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e17a      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d108      	bne.n	8005378 <HAL_RCC_OscConfig+0x4d8>
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005376:	e029      	b.n	80053cc <HAL_RCC_OscConfig+0x52c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b05      	cmp	r3, #5
 800537e:	d115      	bne.n	80053ac <HAL_RCC_OscConfig+0x50c>
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	4a03      	ldr	r2, [pc, #12]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a0:	e014      	b.n	80053cc <HAL_RCC_OscConfig+0x52c>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40007000 	.word	0x40007000
 80053ac:	4b9c      	ldr	r3, [pc, #624]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	4a9b      	ldr	r2, [pc, #620]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053bc:	4b98      	ldr	r3, [pc, #608]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	4a97      	ldr	r2, [pc, #604]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d016      	beq.n	8005402 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fd feec 	bl	80031b0 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053dc:	f7fd fee8 	bl	80031b0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e12a      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f2:	4b8b      	ldr	r3, [pc, #556]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ed      	beq.n	80053dc <HAL_RCC_OscConfig+0x53c>
 8005400:	e015      	b.n	800542e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fd fed5 	bl	80031b0 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fed1 	bl	80031b0 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e113      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005420:	4b7f      	ldr	r3, [pc, #508]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ed      	bne.n	800540a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005434:	4b7a      	ldr	r3, [pc, #488]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	4a79      	ldr	r2, [pc, #484]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 800543a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80fe 	beq.w	8005646 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	2b02      	cmp	r3, #2
 8005450:	f040 80d0 	bne.w	80055f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005454:	4b72      	ldr	r3, [pc, #456]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0203 	and.w	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d130      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	3b01      	subs	r3, #1
 8005474:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d127      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d11f      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005494:	2a07      	cmp	r2, #7
 8005496:	bf14      	ite	ne
 8005498:	2201      	movne	r2, #1
 800549a:	2200      	moveq	r2, #0
 800549c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800549e:	4293      	cmp	r3, r2
 80054a0:	d113      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	3b01      	subs	r3, #1
 80054b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d109      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	3b01      	subs	r3, #1
 80054c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d06e      	beq.n	80055a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d069      	beq.n	80055a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054d0:	4b53      	ldr	r3, [pc, #332]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054dc:	4b50      	ldr	r3, [pc, #320]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0ad      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054ec:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054f8:	f7fd fe5a 	bl	80031b0 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd fe56 	bl	80031b0 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e09a      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005512:	4b43      	ldr	r3, [pc, #268]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800551e:	4b40      	ldr	r3, [pc, #256]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	4b40      	ldr	r3, [pc, #256]	; (8005624 <HAL_RCC_OscConfig+0x784>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800552e:	3a01      	subs	r2, #1
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	4311      	orrs	r1, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005538:	0212      	lsls	r2, r2, #8
 800553a:	4311      	orrs	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005540:	0852      	lsrs	r2, r2, #1
 8005542:	3a01      	subs	r2, #1
 8005544:	0552      	lsls	r2, r2, #21
 8005546:	4311      	orrs	r1, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800554c:	0852      	lsrs	r2, r2, #1
 800554e:	3a01      	subs	r2, #1
 8005550:	0652      	lsls	r2, r2, #25
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005558:	0912      	lsrs	r2, r2, #4
 800555a:	0452      	lsls	r2, r2, #17
 800555c:	430a      	orrs	r2, r1
 800555e:	4930      	ldr	r1, [pc, #192]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005560:	4313      	orrs	r3, r2
 8005562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 800556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800557a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800557c:	f7fd fe18 	bl	80031b0 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005584:	f7fd fe14 	bl	80031b0 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e058      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055a2:	e050      	b.n	8005646 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e04f      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d148      	bne.n	8005646 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055cc:	f7fd fdf0 	bl	80031b0 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fd fdec 	bl	80031b0 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e030      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x734>
 80055f2:	e028      	b.n	8005646 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d023      	beq.n	8005642 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a08      	ldr	r2, [pc, #32]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fd fdd3 	bl	80031b0 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800560c:	e00c      	b.n	8005628 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560e:	f7fd fdcf 	bl	80031b0 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d905      	bls.n	8005628 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e013      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
 8005620:	40021000 	.word	0x40021000
 8005624:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_OscConfig+0x7b0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ec      	bne.n	800560e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCC_OscConfig+0x7b0>)
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	4905      	ldr	r1, [pc, #20]	; (8005650 <HAL_RCC_OscConfig+0x7b0>)
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_OscConfig+0x7b4>)
 800563c:	4013      	ands	r3, r2
 800563e:	60cb      	str	r3, [r1, #12]
 8005640:	e001      	b.n	8005646 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	feeefffc 	.word	0xfeeefffc

08005658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0e7      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b75      	ldr	r3, [pc, #468]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d910      	bls.n	800569c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b72      	ldr	r3, [pc, #456]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 0207 	bic.w	r2, r3, #7
 8005682:	4970      	ldr	r1, [pc, #448]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b6e      	ldr	r3, [pc, #440]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0cf      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d908      	bls.n	80056ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b8:	4b63      	ldr	r3, [pc, #396]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4960      	ldr	r1, [pc, #384]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d04c      	beq.n	8005770 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d121      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0a6      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f6:	4b54      	ldr	r3, [pc, #336]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d115      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e09a      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800570e:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e08e      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e086      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800572e:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4943      	ldr	r1, [pc, #268]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	4313      	orrs	r3, r2
 800573e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005740:	f7fd fd36 	bl	80031b0 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	e00a      	b.n	800575e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fd fd32 	bl	80031b0 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e06e      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	4b3a      	ldr	r3, [pc, #232]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 020c 	and.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	429a      	cmp	r2, r3
 800576e:	d1eb      	bne.n	8005748 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005788:	429a      	cmp	r2, r3
 800578a:	d208      	bcs.n	800579e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800578c:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	492b      	ldr	r1, [pc, #172]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800579e:	4b29      	ldr	r3, [pc, #164]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d210      	bcs.n	80057ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 0207 	bic.w	r2, r3, #7
 80057b4:	4923      	ldr	r1, [pc, #140]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057bc:	4b21      	ldr	r3, [pc, #132]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e036      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4918      	ldr	r1, [pc, #96]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4910      	ldr	r1, [pc, #64]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005808:	4313      	orrs	r3, r2
 800580a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800580c:	f000 f824 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	490b      	ldr	r1, [pc, #44]	; (800584c <HAL_RCC_ClockConfig+0x1f4>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1f8>)
 800582a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1fc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f7fd fc6d 	bl	8003110 <HAL_InitTick>
 8005836:	4603      	mov	r3, r0
 8005838:	72fb      	strb	r3, [r7, #11]

  return status;
 800583a:	7afb      	ldrb	r3, [r7, #11]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40022000 	.word	0x40022000
 8005848:	40021000 	.word	0x40021000
 800584c:	08017fdc 	.word	0x08017fdc
 8005850:	200000ac 	.word	0x200000ac
 8005854:	200000b0 	.word	0x200000b0

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005870:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d121      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d11e      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800588c:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005898:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 800589a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e005      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058a8:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058b4:	4a2b      	ldr	r2, [pc, #172]	; (8005964 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d102      	bne.n	80058d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_RCC_GetSysClockFreq+0x110>)
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e004      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058dc:	4b23      	ldr	r3, [pc, #140]	; (800596c <HAL_RCC_GetSysClockFreq+0x114>)
 80058de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d134      	bne.n	8005950 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d003      	beq.n	80058fe <HAL_RCC_GetSysClockFreq+0xa6>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d003      	beq.n	8005904 <HAL_RCC_GetSysClockFreq+0xac>
 80058fc:	e005      	b.n	800590a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_RCC_GetSysClockFreq+0x110>)
 8005900:	617b      	str	r3, [r7, #20]
      break;
 8005902:	e005      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCC_GetSysClockFreq+0x114>)
 8005906:	617b      	str	r3, [r7, #20]
      break;
 8005908:	e002      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	617b      	str	r3, [r7, #20]
      break;
 800590e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005910:	4b13      	ldr	r3, [pc, #76]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	3301      	adds	r3, #1
 800591c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	fb03 f202 	mul.w	r2, r3, r2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	0e5b      	lsrs	r3, r3, #25
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	3301      	adds	r3, #1
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005950:	69bb      	ldr	r3, [r7, #24]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40021000 	.word	0x40021000
 8005964:	08017ff4 	.word	0x08017ff4
 8005968:	00f42400 	.word	0x00f42400
 800596c:	007a1200 	.word	0x007a1200

08005970 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <HAL_RCC_GetHCLKFreq+0x14>)
 8005976:	681b      	ldr	r3, [r3, #0]
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	200000ac 	.word	0x200000ac

08005988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800598c:	f7ff fff0 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 8005990:	4602      	mov	r2, r0
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	4904      	ldr	r1, [pc, #16]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40021000 	.word	0x40021000
 80059b0:	08017fec 	.word	0x08017fec

080059b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059b8:	f7ff ffda 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0adb      	lsrs	r3, r3, #11
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ca:	5ccb      	ldrb	r3, [r1, r3]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08017fec 	.word	0x08017fec

080059e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059f8:	f7ff f922 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 80059fc:	6178      	str	r0, [r7, #20]
 80059fe:	e014      	b.n	8005a2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a18:	f7ff f912 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 8005a1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a30:	d10b      	bne.n	8005a4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b80      	cmp	r3, #128	; 0x80
 8005a36:	d919      	bls.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a3c:	d902      	bls.n	8005a44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a3e:	2302      	movs	r3, #2
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e013      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a44:	2301      	movs	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e010      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d902      	bls.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a50:	2303      	movs	r3, #3
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	e00a      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d102      	bne.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e004      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b70      	cmp	r3, #112	; 0x70
 8005a66:	d101      	bne.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a68:	2301      	movs	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 0207 	bic.w	r2, r3, #7
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d001      	beq.n	8005a8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40022000 	.word	0x40022000

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aac:	2300      	movs	r3, #0
 8005aae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d041      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ac4:	d02a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ac6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005aca:	d824      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad0:	d008      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad6:	d81e      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ae2:	e018      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ae4:	4b86      	ldr	r3, [pc, #536]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a85      	ldr	r2, [pc, #532]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af0:	e015      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 facb 	bl	8006094 <RCCEx_PLLSAI1_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b02:	e00c      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3320      	adds	r3, #32
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fbb6 	bl	800627c <RCCEx_PLLSAI2_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b14:	e003      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	74fb      	strb	r3, [r7, #19]
      break;
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b1e:	7cfb      	ldrb	r3, [r7, #19]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b24:	4b76      	ldr	r3, [pc, #472]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b32:	4973      	ldr	r1, [pc, #460]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b3a:	e001      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d041      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b54:	d02a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b5a:	d824      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b60:	d008      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b66:	d81e      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b70:	d010      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b72:	e018      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b74:	4b62      	ldr	r3, [pc, #392]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a61      	ldr	r2, [pc, #388]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b80:	e015      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fa83 	bl	8006094 <RCCEx_PLLSAI1_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b92:	e00c      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3320      	adds	r3, #32
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb6e 	bl	800627c <RCCEx_PLLSAI2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bb4:	4b52      	ldr	r3, [pc, #328]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc2:	494f      	ldr	r1, [pc, #316]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80a0 	beq.w	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6593      	str	r3, [r2, #88]	; 0x58
 8005c04:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c10:	2301      	movs	r3, #1
 8005c12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c14:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a3a      	ldr	r2, [pc, #232]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c20:	f7fd fac6 	bl	80031b0 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c26:	e009      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c28:	f7fd fac2 	bl	80031b0 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	74fb      	strb	r3, [r7, #19]
        break;
 8005c3a:	e005      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c3c:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0ef      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d15c      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c4e:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01f      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d019      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c98:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fd fa81 	bl	80031b0 <HAL_GetTick>
 8005cae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb0:	e00b      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fd fa7d 	bl	80031b0 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d902      	bls.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	74fb      	strb	r3, [r7, #19]
            break;
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ec      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cee:	4904      	ldr	r1, [pc, #16]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cf6:	e009      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cf8:	7cfb      	ldrb	r3, [r7, #19]
 8005cfa:	74bb      	strb	r3, [r7, #18]
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d0c:	7c7b      	ldrb	r3, [r7, #17]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d105      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d12:	4b9e      	ldr	r3, [pc, #632]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	4a9d      	ldr	r2, [pc, #628]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d2a:	4b98      	ldr	r3, [pc, #608]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f023 0203 	bic.w	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	4994      	ldr	r1, [pc, #592]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 020c 	bic.w	r2, r3, #12
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	498c      	ldr	r1, [pc, #560]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d6e:	4b87      	ldr	r3, [pc, #540]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	4983      	ldr	r1, [pc, #524]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d90:	4b7e      	ldr	r3, [pc, #504]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	497b      	ldr	r1, [pc, #492]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005db2:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc0:	4972      	ldr	r1, [pc, #456]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd4:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de2:	496a      	ldr	r1, [pc, #424]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005df6:	4b65      	ldr	r3, [pc, #404]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	4961      	ldr	r1, [pc, #388]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e18:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	4959      	ldr	r1, [pc, #356]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e3a:	4b54      	ldr	r3, [pc, #336]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	4950      	ldr	r1, [pc, #320]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e5c:	4b4b      	ldr	r3, [pc, #300]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	4948      	ldr	r1, [pc, #288]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e7e:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	493f      	ldr	r1, [pc, #252]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d028      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea0:	4b3a      	ldr	r3, [pc, #232]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eae:	4937      	ldr	r1, [pc, #220]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ebe:	d106      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec0:	4b32      	ldr	r3, [pc, #200]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eca:	60d3      	str	r3, [r2, #12]
 8005ecc:	e011      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f8d8 	bl	8006094 <RCCEx_PLLSAI1_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005eee:	7cfb      	ldrb	r3, [r7, #19]
 8005ef0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d028      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005efe:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	491f      	ldr	r1, [pc, #124]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1c:	d106      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f28:	60d3      	str	r3, [r2, #12]
 8005f2a:	e011      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 f8a9 	bl	8006094 <RCCEx_PLLSAI1_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6a:	4908      	ldr	r1, [pc, #32]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7a:	d109      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7c:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4a02      	ldr	r2, [pc, #8]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f86:	60d3      	str	r3, [r2, #12]
 8005f88:	e014      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f877 	bl	8006094 <RCCEx_PLLSAI1_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02f      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fce:	4928      	ldr	r1, [pc, #160]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fde:	d10d      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f854 	bl	8006094 <RCCEx_PLLSAI1_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	74bb      	strb	r3, [r7, #18]
 8005ffa:	e011      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006004:	d10c      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3320      	adds	r3, #32
 800600a:	2102      	movs	r1, #2
 800600c:	4618      	mov	r0, r3
 800600e:	f000 f935 	bl	800627c <RCCEx_PLLSAI2_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603a:	490d      	ldr	r1, [pc, #52]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605e:	4904      	ldr	r1, [pc, #16]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006066:	7cbb      	ldrb	r3, [r7, #18]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40021000 	.word	0x40021000

08006074 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a04      	ldr	r2, [pc, #16]	; (8006090 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800607e:	f043 0304 	orr.w	r3, r3, #4
 8006082:	6013      	str	r3, [r2, #0]
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000

08006094 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060a2:	4b75      	ldr	r3, [pc, #468]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d018      	beq.n	80060e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060ae:	4b72      	ldr	r3, [pc, #456]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0203 	and.w	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d10d      	bne.n	80060da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
       ||
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060c6:	4b6c      	ldr	r3, [pc, #432]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
       ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d047      	beq.n	800616a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
 80060de:	e044      	b.n	800616a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d018      	beq.n	800611a <RCCEx_PLLSAI1_Config+0x86>
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d825      	bhi.n	8006138 <RCCEx_PLLSAI1_Config+0xa4>
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d002      	beq.n	80060f6 <RCCEx_PLLSAI1_Config+0x62>
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d009      	beq.n	8006108 <RCCEx_PLLSAI1_Config+0x74>
 80060f4:	e020      	b.n	8006138 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060f6:	4b60      	ldr	r3, [pc, #384]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11d      	bne.n	800613e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006106:	e01a      	b.n	800613e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006108:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d116      	bne.n	8006142 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006118:	e013      	b.n	8006142 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800611a:	4b57      	ldr	r3, [pc, #348]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006126:	4b54      	ldr	r3, [pc, #336]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006136:	e006      	b.n	8006146 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	e004      	b.n	8006148 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800613e:	bf00      	nop
 8006140:	e002      	b.n	8006148 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006142:	bf00      	nop
 8006144:	e000      	b.n	8006148 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006146:	bf00      	nop
    }

    if(status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10d      	bne.n	800616a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800614e:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	3b01      	subs	r3, #1
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	430b      	orrs	r3, r1
 8006164:	4944      	ldr	r1, [pc, #272]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006166:	4313      	orrs	r3, r2
 8006168:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d17d      	bne.n	800626c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006170:	4b41      	ldr	r3, [pc, #260]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a40      	ldr	r2, [pc, #256]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006176:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800617a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617c:	f7fd f818 	bl	80031b0 <HAL_GetTick>
 8006180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006182:	e009      	b.n	8006198 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006184:	f7fd f814 	bl	80031b0 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d902      	bls.n	8006198 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	73fb      	strb	r3, [r7, #15]
        break;
 8006196:	e005      	b.n	80061a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006198:	4b37      	ldr	r3, [pc, #220]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ef      	bne.n	8006184 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d160      	bne.n	800626c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d111      	bne.n	80061d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061b0:	4b31      	ldr	r3, [pc, #196]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80061b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6892      	ldr	r2, [r2, #8]
 80061c0:	0211      	lsls	r1, r2, #8
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68d2      	ldr	r2, [r2, #12]
 80061c6:	0912      	lsrs	r2, r2, #4
 80061c8:	0452      	lsls	r2, r2, #17
 80061ca:	430a      	orrs	r2, r1
 80061cc:	492a      	ldr	r1, [pc, #168]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	610b      	str	r3, [r1, #16]
 80061d2:	e027      	b.n	8006224 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d112      	bne.n	8006200 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061da:	4b27      	ldr	r3, [pc, #156]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6892      	ldr	r2, [r2, #8]
 80061ea:	0211      	lsls	r1, r2, #8
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6912      	ldr	r2, [r2, #16]
 80061f0:	0852      	lsrs	r2, r2, #1
 80061f2:	3a01      	subs	r2, #1
 80061f4:	0552      	lsls	r2, r2, #21
 80061f6:	430a      	orrs	r2, r1
 80061f8:	491f      	ldr	r1, [pc, #124]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]
 80061fe:	e011      	b.n	8006224 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006200:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006208:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6892      	ldr	r2, [r2, #8]
 8006210:	0211      	lsls	r1, r2, #8
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6952      	ldr	r2, [r2, #20]
 8006216:	0852      	lsrs	r2, r2, #1
 8006218:	3a01      	subs	r2, #1
 800621a:	0652      	lsls	r2, r2, #25
 800621c:	430a      	orrs	r2, r1
 800621e:	4916      	ldr	r1, [pc, #88]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a13      	ldr	r2, [pc, #76]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800622a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800622e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fc ffbe 	bl	80031b0 <HAL_GetTick>
 8006234:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006236:	e009      	b.n	800624c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006238:	f7fc ffba 	bl	80031b0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d902      	bls.n	800624c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	73fb      	strb	r3, [r7, #15]
          break;
 800624a:	e005      	b.n	8006258 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ef      	beq.n	8006238 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	4904      	ldr	r1, [pc, #16]	; (8006278 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006268:	4313      	orrs	r3, r2
 800626a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40021000 	.word	0x40021000

0800627c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800628a:	4b6a      	ldr	r3, [pc, #424]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d018      	beq.n	80062c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006296:	4b67      	ldr	r3, [pc, #412]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0203 	and.w	r2, r3, #3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d10d      	bne.n	80062c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
       ||
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80062ae:	4b61      	ldr	r3, [pc, #388]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
       ||
 80062be:	429a      	cmp	r2, r3
 80062c0:	d047      	beq.n	8006352 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e044      	b.n	8006352 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d018      	beq.n	8006302 <RCCEx_PLLSAI2_Config+0x86>
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d825      	bhi.n	8006320 <RCCEx_PLLSAI2_Config+0xa4>
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d002      	beq.n	80062de <RCCEx_PLLSAI2_Config+0x62>
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d009      	beq.n	80062f0 <RCCEx_PLLSAI2_Config+0x74>
 80062dc:	e020      	b.n	8006320 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062de:	4b55      	ldr	r3, [pc, #340]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d11d      	bne.n	8006326 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ee:	e01a      	b.n	8006326 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062f0:	4b50      	ldr	r3, [pc, #320]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d116      	bne.n	800632a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006300:	e013      	b.n	800632a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006302:	4b4c      	ldr	r3, [pc, #304]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800630e:	4b49      	ldr	r3, [pc, #292]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800631e:	e006      	b.n	800632e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e004      	b.n	8006330 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800632e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10d      	bne.n	8006352 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006336:	4b3f      	ldr	r3, [pc, #252]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6819      	ldr	r1, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	3b01      	subs	r3, #1
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	430b      	orrs	r3, r1
 800634c:	4939      	ldr	r1, [pc, #228]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800634e:	4313      	orrs	r3, r2
 8006350:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d167      	bne.n	8006428 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006358:	4b36      	ldr	r3, [pc, #216]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a35      	ldr	r2, [pc, #212]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006364:	f7fc ff24 	bl	80031b0 <HAL_GetTick>
 8006368:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800636a:	e009      	b.n	8006380 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800636c:	f7fc ff20 	bl	80031b0 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d902      	bls.n	8006380 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	73fb      	strb	r3, [r7, #15]
        break;
 800637e:	e005      	b.n	800638c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006380:	4b2c      	ldr	r3, [pc, #176]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ef      	bne.n	800636c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d14a      	bne.n	8006428 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d111      	bne.n	80063bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006398:	4b26      	ldr	r3, [pc, #152]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80063a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6892      	ldr	r2, [r2, #8]
 80063a8:	0211      	lsls	r1, r2, #8
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68d2      	ldr	r2, [r2, #12]
 80063ae:	0912      	lsrs	r2, r2, #4
 80063b0:	0452      	lsls	r2, r2, #17
 80063b2:	430a      	orrs	r2, r1
 80063b4:	491f      	ldr	r1, [pc, #124]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	614b      	str	r3, [r1, #20]
 80063ba:	e011      	b.n	80063e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6892      	ldr	r2, [r2, #8]
 80063cc:	0211      	lsls	r1, r2, #8
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6912      	ldr	r2, [r2, #16]
 80063d2:	0852      	lsrs	r2, r2, #1
 80063d4:	3a01      	subs	r2, #1
 80063d6:	0652      	lsls	r2, r2, #25
 80063d8:	430a      	orrs	r2, r1
 80063da:	4916      	ldr	r1, [pc, #88]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063e0:	4b14      	ldr	r3, [pc, #80]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a13      	ldr	r2, [pc, #76]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fc fee0 	bl	80031b0 <HAL_GetTick>
 80063f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063f2:	e009      	b.n	8006408 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063f4:	f7fc fedc 	bl	80031b0 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d902      	bls.n	8006408 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	73fb      	strb	r3, [r7, #15]
          break;
 8006406:	e005      	b.n	8006414 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006408:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0ef      	beq.n	80063f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4904      	ldr	r1, [pc, #16]	; (8006434 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006424:	4313      	orrs	r3, r2
 8006426:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000

08006438 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d079      	beq.n	800653e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fc fb26 	bl	8002ab0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d058      	beq.n	800652c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	22ca      	movs	r2, #202	; 0xca
 8006480:	625a      	str	r2, [r3, #36]	; 0x24
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2253      	movs	r2, #83	; 0x53
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa4e 	bl	800692c <RTC_EnterInitMode>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d127      	bne.n	80064ea <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ac:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6899      	ldr	r1, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68d2      	ldr	r2, [r2, #12]
 80064d4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6919      	ldr	r1, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	041a      	lsls	r2, r3, #16
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa52 	bl	8006994 <RTC_ExitInitMode>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d113      	bne.n	8006522 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0203 	bic.w	r2, r2, #3
 8006508:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	22ff      	movs	r2, #255	; 0xff
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
 800652a:	e001      	b.n	8006530 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_RTC_SetTime+0x1a>
 800655e:	2302      	movs	r3, #2
 8006560:	e08b      	b.n	800667a <HAL_RTC_SetTime+0x132>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	22ca      	movs	r2, #202	; 0xca
 8006578:	625a      	str	r2, [r3, #36]	; 0x24
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2253      	movs	r2, #83	; 0x53
 8006580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f9d2 	bl	800692c <RTC_EnterInitMode>
 8006588:	4603      	mov	r3, r0
 800658a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d163      	bne.n	800665a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d126      	bne.n	80065e6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fa2d 	bl	8006a10 <RTC_ByteToBcd2>
 80065b6:	4603      	mov	r3, r0
 80065b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fa26 	bl	8006a10 <RTC_ByteToBcd2>
 80065c4:	4603      	mov	r3, r0
 80065c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	789b      	ldrb	r3, [r3, #2]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fa1e 	bl	8006a10 <RTC_ByteToBcd2>
 80065d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	78db      	ldrb	r3, [r3, #3]
 80065de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e018      	b.n	8006618 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006606:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800660c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	78db      	ldrb	r3, [r3, #3]
 8006612:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006622:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006626:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006636:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6899      	ldr	r1, [r3, #8]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	431a      	orrs	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f99f 	bl	8006994 <RTC_ExitInitMode>
 8006656:	4603      	mov	r3, r0
 8006658:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	22ff      	movs	r2, #255	; 0xff
 8006660:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006678:	7cfb      	ldrb	r3, [r7, #19]
}
 800667a:	4618      	mov	r0, r3
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd90      	pop	{r4, r7, pc}

08006682 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80066b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	0a1b      	lsrs	r3, r3, #8
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	0d9b      	lsrs	r3, r3, #22
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d11a      	bne.n	8006730 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f9a6 	bl	8006a50 <RTC_Bcd2ToByte>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f99d 	bl	8006a50 <RTC_Bcd2ToByte>
 8006716:	4603      	mov	r3, r0
 8006718:	461a      	mov	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	789b      	ldrb	r3, [r3, #2]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f994 	bl	8006a50 <RTC_Bcd2ToByte>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800673a:	b590      	push	{r4, r7, lr}
 800673c:	b087      	sub	sp, #28
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_RTC_SetDate+0x1a>
 8006750:	2302      	movs	r3, #2
 8006752:	e075      	b.n	8006840 <HAL_RTC_SetDate+0x106>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10e      	bne.n	8006788 <HAL_RTC_SetDate+0x4e>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	b2db      	uxtb	r3, r3
 8006780:	330a      	adds	r3, #10
 8006782:	b2da      	uxtb	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11c      	bne.n	80067c8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f93c 	bl	8006a10 <RTC_ByteToBcd2>
 8006798:	4603      	mov	r3, r0
 800679a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f935 	bl	8006a10 <RTC_ByteToBcd2>
 80067a6:	4603      	mov	r3, r0
 80067a8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80067aa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	789b      	ldrb	r3, [r3, #2]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f92d 	bl	8006a10 <RTC_ByteToBcd2>
 80067b6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80067b8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e00e      	b.n	80067e6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	78db      	ldrb	r3, [r3, #3]
 80067cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80067d4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80067da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	22ca      	movs	r2, #202	; 0xca
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2253      	movs	r2, #83	; 0x53
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f898 	bl	800692c <RTC_EnterInitMode>
 80067fc:	4603      	mov	r3, r0
 80067fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10c      	bne.n	8006820 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006810:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006814:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f8bc 	bl	8006994 <RTC_ExitInitMode>
 800681c:	4603      	mov	r3, r0
 800681e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006828:	7cfb      	ldrb	r3, [r7, #19]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d103      	bne.n	8006836 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800683e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006840:	4618      	mov	r0, r3
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}

08006848 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006862:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	0c1b      	lsrs	r3, r3, #16
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	0b5b      	lsrs	r3, r3, #13
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	b2da      	uxtb	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11a      	bne.n	80068d8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	78db      	ldrb	r3, [r3, #3]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f8d2 	bl	8006a50 <RTC_Bcd2ToByte>
 80068ac:	4603      	mov	r3, r0
 80068ae:	461a      	mov	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f8c9 	bl	8006a50 <RTC_Bcd2ToByte>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	789b      	ldrb	r3, [r3, #2]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f8c0 	bl	8006a50 <RTC_Bcd2ToByte>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <HAL_RTC_WaitForSynchro+0x44>)
 80068f2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80068f4:	f7fc fc5c 	bl	80031b0 <HAL_GetTick>
 80068f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068fa:	e009      	b.n	8006910 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068fc:	f7fc fc58 	bl	80031b0 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800690a:	d901      	bls.n	8006910 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e007      	b.n	8006920 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0ee      	beq.n	80068fc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	0003ff5f 	.word	0x0003ff5f

0800692c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d120      	bne.n	8006988 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f04f 32ff 	mov.w	r2, #4294967295
 800694e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006950:	f7fc fc2e 	bl	80031b0 <HAL_GetTick>
 8006954:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006956:	e00d      	b.n	8006974 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006958:	f7fc fc2a 	bl	80031b0 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006966:	d905      	bls.n	8006974 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2203      	movs	r2, #3
 8006970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <RTC_EnterInitMode+0x5c>
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d1e7      	bne.n	8006958 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80069ac:	4b17      	ldr	r3, [pc, #92]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff93 	bl	80068e4 <HAL_RTC_WaitForSynchro>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01e      	beq.n	8006a02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	73fb      	strb	r3, [r7, #15]
 80069d0:	e017      	b.n	8006a02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069d2:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	4a0d      	ldr	r2, [pc, #52]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069d8:	f023 0320 	bic.w	r3, r3, #32
 80069dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff ff80 	bl	80068e4 <HAL_RTC_WaitForSynchro>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2203      	movs	r2, #3
 80069ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <RTC_ExitInitMode+0x78>)
 80069fc:	f043 0320 	orr.w	r3, r3, #32
 8006a00:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40002800 	.word	0x40002800

08006a10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006a22:	e005      	b.n	8006a30 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	3b0a      	subs	r3, #10
 8006a2e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	2b09      	cmp	r3, #9
 8006a34:	d8f6      	bhi.n	8006a24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	b2db      	uxtb	r3, r3
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	0092      	lsls	r2, r2, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	4413      	add	r3, r2
 8006a76:	b2db      	uxtb	r3, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e095      	b.n	8006bc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d108      	bne.n	8006ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa6:	d009      	beq.n	8006abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	61da      	str	r2, [r3, #28]
 8006aae:	e005      	b.n	8006abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fc f81c 	bl	8002b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006afc:	d902      	bls.n	8006b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e002      	b.n	8006b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b12:	d007      	beq.n	8006b24 <HAL_SPI_Init+0xa0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b1c:	d002      	beq.n	8006b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	ea42 0103 	orr.w	r1, r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	f003 0204 	and.w	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ba0:	ea42 0103 	orr.w	r1, r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e01a      	b.n	8006c12 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fb ffd9 	bl	8002bac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b088      	sub	sp, #32
 8006c1e:	af02      	add	r7, sp, #8
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d002      	beq.n	8006c40 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c3e:	e11a      	b.n	8006e76 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c48:	d112      	bne.n	8006c70 <HAL_SPI_Receive+0x56>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10e      	bne.n	8006c70 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2204      	movs	r2, #4
 8006c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4613      	mov	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f90e 	bl	8006e88 <HAL_SPI_TransmitReceive>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	e107      	b.n	8006e80 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_SPI_Receive+0x64>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e100      	b.n	8006e80 <HAL_SPI_Receive+0x266>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c86:	f7fc fa93 	bl	80031b0 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_SPI_Receive+0x7e>
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c9c:	e0eb      	b.n	8006e76 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ce8:	d908      	bls.n	8006cfc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cf8:	605a      	str	r2, [r3, #4]
 8006cfa:	e007      	b.n	8006d0c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d0a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d14:	d10f      	bne.n	8006d36 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d007      	beq.n	8006d54 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d5c:	d86f      	bhi.n	8006e3e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d5e:	e034      	b.n	8006dca <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d117      	bne.n	8006d9e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f103 020c 	add.w	r2, r3, #12
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d9c:	e015      	b.n	8006dca <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d9e:	f7fc fa07 	bl	80031b0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d803      	bhi.n	8006db6 <HAL_SPI_Receive+0x19c>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d102      	bne.n	8006dbc <HAL_SPI_Receive+0x1a2>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006dc8:	e055      	b.n	8006e76 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1c4      	bne.n	8006d60 <HAL_SPI_Receive+0x146>
 8006dd6:	e038      	b.n	8006e4a <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d115      	bne.n	8006e12 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	b292      	uxth	r2, r2
 8006df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e10:	e015      	b.n	8006e3e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e12:	f7fc f9cd 	bl	80031b0 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d803      	bhi.n	8006e2a <HAL_SPI_Receive+0x210>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d102      	bne.n	8006e30 <HAL_SPI_Receive+0x216>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006e3c:	e01b      	b.n	8006e76 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1c6      	bne.n	8006dd8 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fffe 	bl	8007e50 <SPI_EndRxTransaction>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
 8006e6c:	e003      	b.n	8006e76 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e96:	2301      	movs	r3, #1
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x26>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e20a      	b.n	80072c4 <HAL_SPI_TransmitReceive+0x43c>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb6:	f7fc f97b 	bl	80031b0 <HAL_GetTick>
 8006eba:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ec2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006eca:	887b      	ldrh	r3, [r7, #2]
 8006ecc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ed2:	7efb      	ldrb	r3, [r7, #27]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_SPI_TransmitReceive+0x6e>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ede:	d106      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x66>
 8006ee8:	7efb      	ldrb	r3, [r7, #27]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d003      	beq.n	8006ef6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ef4:	e1e0      	b.n	80072b8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x80>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x80>
 8006f02:	887b      	ldrh	r3, [r7, #2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f0e:	e1d3      	b.n	80072b8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d003      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2205      	movs	r2, #5
 8006f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	887a      	ldrh	r2, [r7, #2]
 8006f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	887a      	ldrh	r2, [r7, #2]
 8006f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	887a      	ldrh	r2, [r7, #2]
 8006f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	887a      	ldrh	r2, [r7, #2]
 8006f50:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f66:	d802      	bhi.n	8006f6e <HAL_SPI_TransmitReceive+0xe6>
 8006f68:	8a3b      	ldrh	r3, [r7, #16]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d908      	bls.n	8006f80 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e007      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d007      	beq.n	8006fae <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb6:	f240 8081 	bls.w	80070bc <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x140>
 8006fc2:	8a7b      	ldrh	r3, [r7, #18]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d16d      	bne.n	80070a4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	881a      	ldrh	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fec:	e05a      	b.n	80070a4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d11b      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x1ac>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d016      	beq.n	8007034 <HAL_SPI_TransmitReceive+0x1ac>
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	2b01      	cmp	r3, #1
 800700a:	d113      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b01      	cmp	r3, #1
 8007040:	d11c      	bne.n	800707c <HAL_SPI_TransmitReceive+0x1f4>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d016      	beq.n	800707c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	b292      	uxth	r2, r2
 800705a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	1c9a      	adds	r2, r3, #2
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007078:	2301      	movs	r3, #1
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800707c:	f7fc f898 	bl	80031b0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007088:	429a      	cmp	r2, r3
 800708a:	d80b      	bhi.n	80070a4 <HAL_SPI_TransmitReceive+0x21c>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007092:	d007      	beq.n	80070a4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80070a2:	e109      	b.n	80072b8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d19f      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x166>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d199      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x166>
 80070ba:	e0e3      	b.n	8007284 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x244>
 80070c4:	8a7b      	ldrh	r3, [r7, #18]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	f040 80cf 	bne.w	800726a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d912      	bls.n	80070fc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	881a      	ldrh	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3b02      	subs	r3, #2
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070fa:	e0b6      	b.n	800726a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	7812      	ldrb	r2, [r2, #0]
 8007108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007122:	e0a2      	b.n	800726a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b02      	cmp	r3, #2
 8007130:	d134      	bne.n	800719c <HAL_SPI_TransmitReceive+0x314>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d02f      	beq.n	800719c <HAL_SPI_TransmitReceive+0x314>
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	2b01      	cmp	r3, #1
 8007140:	d12c      	bne.n	800719c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d912      	bls.n	8007172 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	881a      	ldrh	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	1c9a      	adds	r2, r3, #2
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b02      	subs	r3, #2
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007170:	e012      	b.n	8007198 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	7812      	ldrb	r2, [r2, #0]
 800717e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d148      	bne.n	800723c <HAL_SPI_TransmitReceive+0x3b4>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d042      	beq.n	800723c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d923      	bls.n	800720a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	b292      	uxth	r2, r2
 80071ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	1c9a      	adds	r2, r3, #2
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b02      	subs	r3, #2
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d81f      	bhi.n	8007238 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	e016      	b.n	8007238 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f103 020c 	add.w	r2, r3, #12
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007238:	2301      	movs	r3, #1
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800723c:	f7fb ffb8 	bl	80031b0 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007248:	429a      	cmp	r2, r3
 800724a:	d803      	bhi.n	8007254 <HAL_SPI_TransmitReceive+0x3cc>
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007252:	d102      	bne.n	800725a <HAL_SPI_TransmitReceive+0x3d2>
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	2b00      	cmp	r3, #0
 8007258:	d107      	bne.n	800726a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007268:	e026      	b.n	80072b8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f af57 	bne.w	8007124 <HAL_SPI_TransmitReceive+0x29c>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	f47f af50 	bne.w	8007124 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fe39 	bl	8007f00 <SPI_EndRxTxTransaction>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ae:	e003      	b.n	80072b8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_SPI_Transmit_IT+0x1e>
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072ee:	e06d      	b.n	80073cc <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d002      	beq.n	8007302 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80072fc:	2302      	movs	r3, #2
 80072fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007300:	e064      	b.n	80073cc <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_SPI_Transmit_IT+0x44>
 800730c:	2302      	movs	r3, #2
 800730e:	e05e      	b.n	80073ce <HAL_SPI_Transmit_IT+0x102>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2203      	movs	r2, #3
 800731c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735c:	d903      	bls.n	8007366 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <HAL_SPI_Transmit_IT+0x110>)
 8007362:	651a      	str	r2, [r3, #80]	; 0x50
 8007364:	e002      	b.n	800736c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a1d      	ldr	r2, [pc, #116]	; (80073e0 <HAL_SPI_Transmit_IT+0x114>)
 800736a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007374:	d10f      	bne.n	8007396 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007394:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a0:	2b40      	cmp	r3, #64	; 0x40
 80073a2:	d007      	beq.n	80073b4 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80073ca:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	08007bcf 	.word	0x08007bcf
 80073e0:	08007b89 	.word	0x08007b89

080073e4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d002      	beq.n	8007408 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8007402:	2302      	movs	r3, #2
 8007404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007406:	e092      	b.n	800752e <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d110      	bne.n	8007432 <HAL_SPI_Receive_IT+0x4e>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007418:	d10b      	bne.n	8007432 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2204      	movs	r2, #4
 800741e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f889 	bl	8007540 <HAL_SPI_TransmitReceive_IT>
 800742e:	4603      	mov	r3, r0
 8007430:	e07e      	b.n	8007530 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Receive_IT+0x5a>
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007442:	e074      	b.n	800752e <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_SPI_Receive_IT+0x6e>
 800744e:	2302      	movs	r3, #2
 8007450:	e06e      	b.n	8007530 <HAL_SPI_Receive_IT+0x14c>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2204      	movs	r2, #4
 800745e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	88fa      	ldrh	r2, [r7, #6]
 8007472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	88fa      	ldrh	r2, [r7, #6]
 800747a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800749e:	d90b      	bls.n	80074b8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074ae:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4a21      	ldr	r2, [pc, #132]	; (8007538 <HAL_SPI_Receive_IT+0x154>)
 80074b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80074b6:	e00a      	b.n	80074ce <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074c6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4a1c      	ldr	r2, [pc, #112]	; (800753c <HAL_SPI_Receive_IT+0x158>)
 80074cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d6:	d10f      	bne.n	80074f8 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074f6:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d007      	beq.n	8007516 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007514:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800752c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	08007b3d 	.word	0x08007b3d
 800753c:	08007aed 	.word	0x08007aed

08007540 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007558:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007560:	7dbb      	ldrb	r3, [r7, #22]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00d      	beq.n	8007582 <HAL_SPI_TransmitReceive_IT+0x42>
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800756c:	d106      	bne.n	800757c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <HAL_SPI_TransmitReceive_IT+0x3c>
 8007576:	7dbb      	ldrb	r3, [r7, #22]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d002      	beq.n	8007582 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800757c:	2302      	movs	r3, #2
 800757e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007580:	e07d      	b.n	800767e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_SPI_TransmitReceive_IT+0x54>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <HAL_SPI_TransmitReceive_IT+0x54>
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007598:	e071      	b.n	800767e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_SPI_TransmitReceive_IT+0x68>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e06b      	b.n	8007680 <HAL_SPI_TransmitReceive_IT+0x140>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d003      	beq.n	80075c4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2205      	movs	r2, #5
 80075c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	887a      	ldrh	r2, [r7, #2]
 80075d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	887a      	ldrh	r2, [r7, #2]
 80075da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	887a      	ldrh	r2, [r7, #2]
 80075e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	887a      	ldrh	r2, [r7, #2]
 80075ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075fa:	d906      	bls.n	800760a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a23      	ldr	r2, [pc, #140]	; (800768c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007600:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4a22      	ldr	r2, [pc, #136]	; (8007690 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007606:	651a      	str	r2, [r3, #80]	; 0x50
 8007608:	e005      	b.n	8007616 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a21      	ldr	r2, [pc, #132]	; (8007694 <HAL_SPI_TransmitReceive_IT+0x154>)
 800760e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a21      	ldr	r2, [pc, #132]	; (8007698 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007614:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800761e:	d802      	bhi.n	8007626 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d908      	bls.n	8007638 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	e007      	b.n	8007648 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007646:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d007      	beq.n	8007666 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800767c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	08007a27 	.word	0x08007a27
 8007690:	08007a8d 	.word	0x08007a8d
 8007694:	080078d7 	.word	0x080078d7
 8007698:	08007995 	.word	0x08007995

0800769c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10e      	bne.n	80076dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
    return;
 80076da:	e0ce      	b.n	800787a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <HAL_SPI_IRQHandler+0x5e>
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d004      	beq.n	80076fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
    return;
 80076f8:	e0bf      	b.n	800787a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <HAL_SPI_IRQHandler+0x7e>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80b0 	beq.w	800787a <HAL_SPI_IRQHandler+0x1de>
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80aa 	beq.w	800787a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d023      	beq.n	8007778 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b03      	cmp	r3, #3
 800773a:	d011      	beq.n	8007760 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007740:	f043 0204 	orr.w	r2, r3, #4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007748:	2300      	movs	r3, #0
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	e00b      	b.n	8007778 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	693b      	ldr	r3, [r7, #16]
        return;
 8007776:	e080      	b.n	800787a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d014      	beq.n	80077ac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007786:	f043 0201 	orr.w	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00c      	beq.n	80077d0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ba:	f043 0208 	orr.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	60bb      	str	r3, [r7, #8]
 80077ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d04f      	beq.n	8007878 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <HAL_SPI_IRQHandler+0x168>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d034      	beq.n	800786e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0203 	bic.w	r2, r2, #3
 8007812:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007818:	2b00      	cmp	r3, #0
 800781a:	d011      	beq.n	8007840 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	4a17      	ldr	r2, [pc, #92]	; (8007880 <HAL_SPI_IRQHandler+0x1e4>)
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007828:	4618      	mov	r0, r3
 800782a:	f7fb ff41 	bl	80036b0 <HAL_DMA_Abort_IT>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007838:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	2b00      	cmp	r3, #0
 8007846:	d016      	beq.n	8007876 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <HAL_SPI_IRQHandler+0x1e4>)
 800784e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007854:	4618      	mov	r0, r3
 8007856:	f7fb ff2b 	bl	80036b0 <HAL_DMA_Abort_IT>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800786c:	e003      	b.n	8007876 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f812 	bl	8007898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007874:	e000      	b.n	8007878 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007876:	bf00      	nop
    return;
 8007878:	bf00      	nop
  }
}
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	080078ad 	.word	0x080078ad

08007884 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff ffe5 	bl	8007898 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d923      	bls.n	8007932 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	b292      	uxth	r2, r2
 80078f6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b02      	subs	r3, #2
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11f      	bne.n	8007960 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	e016      	b.n	8007960 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f103 020c 	add.w	r2, r3, #12
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10f      	bne.n	800798c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800797a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb00 	bl	8007f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d912      	bls.n	80079cc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	1c9a      	adds	r2, r3, #2
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b02      	subs	r3, #2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079ca:	e012      	b.n	80079f2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d110      	bne.n	8007a1e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a0a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fab7 	bl	8007f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	1c9a      	adds	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10f      	bne.n	8007a84 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a72:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d102      	bne.n	8007a84 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa84 	bl	8007f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	881a      	ldrh	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	1c9a      	adds	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d110      	bne.n	8007ae4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa54 	bl	8007f8c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f103 020c 	add.w	r2, r3, #12
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa6e 	bl	8008010 <SPI_CloseRx_ISR>
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa48 	bl	8008010 <SPI_CloseRx_ISR>
  }
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fa55 	bl	8008070 <SPI_CloseTx_ISR>
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	881a      	ldrh	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	1c9a      	adds	r2, r3, #2
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa33 	bl	8008070 <SPI_CloseTx_ISR>
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c24:	f7fb fac4 	bl	80031b0 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c34:	f7fb fabc 	bl	80031b0 <HAL_GetTick>
 8007c38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c3a:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	015b      	lsls	r3, r3, #5
 8007c40:	0d1b      	lsrs	r3, r3, #20
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c4a:	e054      	b.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c52:	d050      	beq.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c54:	f7fb faac 	bl	80031b0 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d902      	bls.n	8007c6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d13d      	bne.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c82:	d111      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8c:	d004      	beq.n	8007c98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c96:	d107      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb0:	d10f      	bne.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e017      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d19b      	bne.n	8007c4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	200000ac 	.word	0x200000ac

08007d24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d36:	f7fb fa3b 	bl	80031b0 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	4413      	add	r3, r2
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d46:	f7fb fa33 	bl	80031b0 <HAL_GetTick>
 8007d4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d54:	4b3d      	ldr	r3, [pc, #244]	; (8007e4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	00da      	lsls	r2, r3, #3
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	0d1b      	lsrs	r3, r3, #20
 8007d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d6c:	e060      	b.n	8007e30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d74:	d107      	bne.n	8007d86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d050      	beq.n	8007e30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d8e:	f7fb fa0f 	bl	80031b0 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d902      	bls.n	8007da4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d13d      	bne.n	8007e20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007db2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dbc:	d111      	bne.n	8007de2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc6:	d004      	beq.n	8007dd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd0:	d107      	bne.n	8007de2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dea:	d10f      	bne.n	8007e0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e010      	b.n	8007e42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d196      	bne.n	8007d6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3728      	adds	r7, #40	; 0x28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200000ac 	.word	0x200000ac

08007e50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e64:	d111      	bne.n	8007e8a <SPI_EndRxTransaction+0x3a>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e6e:	d004      	beq.n	8007e7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e78:	d107      	bne.n	8007e8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e88:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff febd 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea4:	f043 0220 	orr.w	r2, r3, #32
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e023      	b.n	8007ef8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb8:	d11d      	bne.n	8007ef6 <SPI_EndRxTransaction+0xa6>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec2:	d004      	beq.n	8007ece <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ecc:	d113      	bne.n	8007ef6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff22 	bl	8007d24 <SPI_WaitFifoStateUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e000      	b.n	8007ef8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7ff ff03 	bl	8007d24 <SPI_WaitFifoStateUntilTimeout>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f28:	f043 0220 	orr.w	r2, r3, #32
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e027      	b.n	8007f84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2180      	movs	r1, #128	; 0x80
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fe68 	bl	8007c14 <SPI_WaitFlagStateUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f4e:	f043 0220 	orr.w	r2, r3, #32
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e014      	b.n	8007f84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fedc 	bl	8007d24 <SPI_WaitFifoStateUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d007      	beq.n	8007f82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f76:	f043 0220 	orr.w	r2, r3, #32
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e000      	b.n	8007f84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f94:	f7fb f90c 	bl	80031b0 <HAL_GetTick>
 8007f98:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0220 	bic.w	r2, r2, #32
 8007fa8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	2164      	movs	r1, #100	; 0x64
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff ffa6 	bl	8007f00 <SPI_EndRxTxTransaction>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fbe:	f043 0220 	orr.w	r2, r3, #32
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d115      	bne.n	8007ffa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d107      	bne.n	8007fea <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f003 f8d8 	bl	800b198 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007fe8:	e00e      	b.n	8008008 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff fc46 	bl	8007884 <HAL_SPI_TxRxCpltCallback>
}
 8007ff8:	e006      	b.n	8008008 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff fc48 	bl	8007898 <HAL_SPI_ErrorCallback>
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008026:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008028:	f7fb f8c2 	bl	80031b0 <HAL_GetTick>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	2164      	movs	r1, #100	; 0x64
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff ff0c 	bl	8007e50 <SPI_EndRxTransaction>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008042:	f043 0220 	orr.w	r2, r3, #32
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	2b00      	cmp	r3, #0
 8008058:	d103      	bne.n	8008062 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f003 f89c 	bl	800b198 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008060:	e002      	b.n	8008068 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fc18 	bl	8007898 <HAL_SPI_ErrorCallback>
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008078:	f7fb f89a 	bl	80031b0 <HAL_GetTick>
 800807c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800808c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	2164      	movs	r1, #100	; 0x64
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff ff34 	bl	8007f00 <SPI_EndRxTxTransaction>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a2:	f043 0220 	orr.w	r2, r3, #32
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	60bb      	str	r3, [r7, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fbdd 	bl	8007898 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80080de:	e002      	b.n	80080e6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f003 f86d 	bl	800b1c0 <HAL_SPI_TxCpltCallback>
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e040      	b.n	8008182 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7fa fd6d 	bl	8002bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2224      	movs	r2, #36	; 0x24
 800811a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fb6b 	bl	8008810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8b0 	bl	80082a0 <UART_SetConfig>
 8008140:	4603      	mov	r3, r0
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e01b      	b.n	8008182 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008168:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0201 	orr.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fbea 	bl	8008954 <UART_CheckIdleState>
 8008180:	4603      	mov	r3, r0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08a      	sub	sp, #40	; 0x28
 800818e:	af02      	add	r7, sp, #8
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819e:	2b20      	cmp	r3, #32
 80081a0:	d178      	bne.n	8008294 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <HAL_UART_Transmit+0x24>
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e071      	b.n	8008296 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2221      	movs	r2, #33	; 0x21
 80081be:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081c0:	f7fa fff6 	bl	80031b0 <HAL_GetTick>
 80081c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	88fa      	ldrh	r2, [r7, #6]
 80081ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081de:	d108      	bne.n	80081f2 <HAL_UART_Transmit+0x68>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	e003      	b.n	80081fa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081fa:	e030      	b.n	800825e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2200      	movs	r2, #0
 8008204:	2180      	movs	r1, #128	; 0x80
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fc4c 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e03c      	b.n	8008296 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10b      	bne.n	800823a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	881a      	ldrh	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800822e:	b292      	uxth	r2, r2
 8008230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	3302      	adds	r3, #2
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	e008      	b.n	800824c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	b292      	uxth	r2, r2
 8008244:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	3301      	adds	r3, #1
 800824a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1c8      	bne.n	80081fc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2200      	movs	r2, #0
 8008272:	2140      	movs	r1, #64	; 0x40
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fc15 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e005      	b.n	8008296 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008294:	2302      	movs	r3, #2
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082a4:	b08a      	sub	sp, #40	; 0x28
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	431a      	orrs	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4ba4      	ldr	r3, [pc, #656]	; (8008560 <UART_SetConfig+0x2c0>)
 80082d0:	4013      	ands	r3, r2
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082d8:	430b      	orrs	r3, r1
 80082da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a99      	ldr	r2, [pc, #612]	; (8008564 <UART_SetConfig+0x2c4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d004      	beq.n	800830c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008308:	4313      	orrs	r3, r2
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831c:	430a      	orrs	r2, r1
 800831e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a90      	ldr	r2, [pc, #576]	; (8008568 <UART_SetConfig+0x2c8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d126      	bne.n	8008378 <UART_SetConfig+0xd8>
 800832a:	4b90      	ldr	r3, [pc, #576]	; (800856c <UART_SetConfig+0x2cc>)
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	2b03      	cmp	r3, #3
 8008336:	d81b      	bhi.n	8008370 <UART_SetConfig+0xd0>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0xa0>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008351 	.word	0x08008351
 8008344:	08008361 	.word	0x08008361
 8008348:	08008359 	.word	0x08008359
 800834c:	08008369 	.word	0x08008369
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008356:	e116      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008358:	2302      	movs	r3, #2
 800835a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800835e:	e112      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008360:	2304      	movs	r3, #4
 8008362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008366:	e10e      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008368:	2308      	movs	r3, #8
 800836a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836e:	e10a      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008370:	2310      	movs	r3, #16
 8008372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008376:	e106      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a7c      	ldr	r2, [pc, #496]	; (8008570 <UART_SetConfig+0x2d0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d138      	bne.n	80083f4 <UART_SetConfig+0x154>
 8008382:	4b7a      	ldr	r3, [pc, #488]	; (800856c <UART_SetConfig+0x2cc>)
 8008384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008388:	f003 030c 	and.w	r3, r3, #12
 800838c:	2b0c      	cmp	r3, #12
 800838e:	d82d      	bhi.n	80083ec <UART_SetConfig+0x14c>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0xf8>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083cd 	.word	0x080083cd
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	080083ed 	.word	0x080083ed
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	080083dd 	.word	0x080083dd
 80083ac:	080083ed 	.word	0x080083ed
 80083b0:	080083ed 	.word	0x080083ed
 80083b4:	080083ed 	.word	0x080083ed
 80083b8:	080083d5 	.word	0x080083d5
 80083bc:	080083ed 	.word	0x080083ed
 80083c0:	080083ed 	.word	0x080083ed
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	080083e5 	.word	0x080083e5
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d2:	e0d8      	b.n	8008586 <UART_SetConfig+0x2e6>
 80083d4:	2302      	movs	r3, #2
 80083d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083da:	e0d4      	b.n	8008586 <UART_SetConfig+0x2e6>
 80083dc:	2304      	movs	r3, #4
 80083de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083e2:	e0d0      	b.n	8008586 <UART_SetConfig+0x2e6>
 80083e4:	2308      	movs	r3, #8
 80083e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ea:	e0cc      	b.n	8008586 <UART_SetConfig+0x2e6>
 80083ec:	2310      	movs	r3, #16
 80083ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f2:	e0c8      	b.n	8008586 <UART_SetConfig+0x2e6>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a5e      	ldr	r2, [pc, #376]	; (8008574 <UART_SetConfig+0x2d4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d125      	bne.n	800844a <UART_SetConfig+0x1aa>
 80083fe:	4b5b      	ldr	r3, [pc, #364]	; (800856c <UART_SetConfig+0x2cc>)
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008408:	2b30      	cmp	r3, #48	; 0x30
 800840a:	d016      	beq.n	800843a <UART_SetConfig+0x19a>
 800840c:	2b30      	cmp	r3, #48	; 0x30
 800840e:	d818      	bhi.n	8008442 <UART_SetConfig+0x1a2>
 8008410:	2b20      	cmp	r3, #32
 8008412:	d00a      	beq.n	800842a <UART_SetConfig+0x18a>
 8008414:	2b20      	cmp	r3, #32
 8008416:	d814      	bhi.n	8008442 <UART_SetConfig+0x1a2>
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <UART_SetConfig+0x182>
 800841c:	2b10      	cmp	r3, #16
 800841e:	d008      	beq.n	8008432 <UART_SetConfig+0x192>
 8008420:	e00f      	b.n	8008442 <UART_SetConfig+0x1a2>
 8008422:	2300      	movs	r3, #0
 8008424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008428:	e0ad      	b.n	8008586 <UART_SetConfig+0x2e6>
 800842a:	2302      	movs	r3, #2
 800842c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008430:	e0a9      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008432:	2304      	movs	r3, #4
 8008434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008438:	e0a5      	b.n	8008586 <UART_SetConfig+0x2e6>
 800843a:	2308      	movs	r3, #8
 800843c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008440:	e0a1      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008442:	2310      	movs	r3, #16
 8008444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008448:	e09d      	b.n	8008586 <UART_SetConfig+0x2e6>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a4a      	ldr	r2, [pc, #296]	; (8008578 <UART_SetConfig+0x2d8>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d125      	bne.n	80084a0 <UART_SetConfig+0x200>
 8008454:	4b45      	ldr	r3, [pc, #276]	; (800856c <UART_SetConfig+0x2cc>)
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800845e:	2bc0      	cmp	r3, #192	; 0xc0
 8008460:	d016      	beq.n	8008490 <UART_SetConfig+0x1f0>
 8008462:	2bc0      	cmp	r3, #192	; 0xc0
 8008464:	d818      	bhi.n	8008498 <UART_SetConfig+0x1f8>
 8008466:	2b80      	cmp	r3, #128	; 0x80
 8008468:	d00a      	beq.n	8008480 <UART_SetConfig+0x1e0>
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d814      	bhi.n	8008498 <UART_SetConfig+0x1f8>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <UART_SetConfig+0x1d8>
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d008      	beq.n	8008488 <UART_SetConfig+0x1e8>
 8008476:	e00f      	b.n	8008498 <UART_SetConfig+0x1f8>
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800847e:	e082      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008480:	2302      	movs	r3, #2
 8008482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008486:	e07e      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008488:	2304      	movs	r3, #4
 800848a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800848e:	e07a      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008490:	2308      	movs	r3, #8
 8008492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008496:	e076      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008498:	2310      	movs	r3, #16
 800849a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800849e:	e072      	b.n	8008586 <UART_SetConfig+0x2e6>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a35      	ldr	r2, [pc, #212]	; (800857c <UART_SetConfig+0x2dc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d12a      	bne.n	8008500 <UART_SetConfig+0x260>
 80084aa:	4b30      	ldr	r3, [pc, #192]	; (800856c <UART_SetConfig+0x2cc>)
 80084ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084b8:	d01a      	beq.n	80084f0 <UART_SetConfig+0x250>
 80084ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084be:	d81b      	bhi.n	80084f8 <UART_SetConfig+0x258>
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c4:	d00c      	beq.n	80084e0 <UART_SetConfig+0x240>
 80084c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ca:	d815      	bhi.n	80084f8 <UART_SetConfig+0x258>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <UART_SetConfig+0x238>
 80084d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d4:	d008      	beq.n	80084e8 <UART_SetConfig+0x248>
 80084d6:	e00f      	b.n	80084f8 <UART_SetConfig+0x258>
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084de:	e052      	b.n	8008586 <UART_SetConfig+0x2e6>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e6:	e04e      	b.n	8008586 <UART_SetConfig+0x2e6>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ee:	e04a      	b.n	8008586 <UART_SetConfig+0x2e6>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084f6:	e046      	b.n	8008586 <UART_SetConfig+0x2e6>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fe:	e042      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a17      	ldr	r2, [pc, #92]	; (8008564 <UART_SetConfig+0x2c4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d13a      	bne.n	8008580 <UART_SetConfig+0x2e0>
 800850a:	4b18      	ldr	r3, [pc, #96]	; (800856c <UART_SetConfig+0x2cc>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008518:	d01a      	beq.n	8008550 <UART_SetConfig+0x2b0>
 800851a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800851e:	d81b      	bhi.n	8008558 <UART_SetConfig+0x2b8>
 8008520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008524:	d00c      	beq.n	8008540 <UART_SetConfig+0x2a0>
 8008526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800852a:	d815      	bhi.n	8008558 <UART_SetConfig+0x2b8>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <UART_SetConfig+0x298>
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d008      	beq.n	8008548 <UART_SetConfig+0x2a8>
 8008536:	e00f      	b.n	8008558 <UART_SetConfig+0x2b8>
 8008538:	2300      	movs	r3, #0
 800853a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800853e:	e022      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008540:	2302      	movs	r3, #2
 8008542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008546:	e01e      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854e:	e01a      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008556:	e016      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855e:	e012      	b.n	8008586 <UART_SetConfig+0x2e6>
 8008560:	efff69f3 	.word	0xefff69f3
 8008564:	40008000 	.word	0x40008000
 8008568:	40013800 	.word	0x40013800
 800856c:	40021000 	.word	0x40021000
 8008570:	40004400 	.word	0x40004400
 8008574:	40004800 	.word	0x40004800
 8008578:	40004c00 	.word	0x40004c00
 800857c:	40005000 	.word	0x40005000
 8008580:	2310      	movs	r3, #16
 8008582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a9f      	ldr	r2, [pc, #636]	; (8008808 <UART_SetConfig+0x568>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d17a      	bne.n	8008686 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008594:	2b08      	cmp	r3, #8
 8008596:	d824      	bhi.n	80085e2 <UART_SetConfig+0x342>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <UART_SetConfig+0x300>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085c5 	.word	0x080085c5
 80085a4:	080085e3 	.word	0x080085e3
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085e3 	.word	0x080085e3
 80085b0:	080085d3 	.word	0x080085d3
 80085b4:	080085e3 	.word	0x080085e3
 80085b8:	080085e3 	.word	0x080085e3
 80085bc:	080085e3 	.word	0x080085e3
 80085c0:	080085db 	.word	0x080085db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085c4:	f7fd f9e0 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 80085c8:	61f8      	str	r0, [r7, #28]
        break;
 80085ca:	e010      	b.n	80085ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085cc:	4b8f      	ldr	r3, [pc, #572]	; (800880c <UART_SetConfig+0x56c>)
 80085ce:	61fb      	str	r3, [r7, #28]
        break;
 80085d0:	e00d      	b.n	80085ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085d2:	f7fd f941 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 80085d6:	61f8      	str	r0, [r7, #28]
        break;
 80085d8:	e009      	b.n	80085ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085de:	61fb      	str	r3, [r7, #28]
        break;
 80085e0:	e005      	b.n	80085ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80085ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 80fb 	beq.w	80087ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	429a      	cmp	r2, r3
 8008604:	d305      	bcc.n	8008612 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	429a      	cmp	r2, r3
 8008610:	d903      	bls.n	800861a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008618:	e0e8      	b.n	80087ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	2200      	movs	r2, #0
 800861e:	461c      	mov	r4, r3
 8008620:	4615      	mov	r5, r2
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	022b      	lsls	r3, r5, #8
 800862c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008630:	0222      	lsls	r2, r4, #8
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	6849      	ldr	r1, [r1, #4]
 8008636:	0849      	lsrs	r1, r1, #1
 8008638:	2000      	movs	r0, #0
 800863a:	4688      	mov	r8, r1
 800863c:	4681      	mov	r9, r0
 800863e:	eb12 0a08 	adds.w	sl, r2, r8
 8008642:	eb43 0b09 	adc.w	fp, r3, r9
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008654:	4650      	mov	r0, sl
 8008656:	4659      	mov	r1, fp
 8008658:	f7f8 fb16 	bl	8000c88 <__aeabi_uldivmod>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4613      	mov	r3, r2
 8008662:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800866a:	d308      	bcc.n	800867e <UART_SetConfig+0x3de>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008672:	d204      	bcs.n	800867e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	60da      	str	r2, [r3, #12]
 800867c:	e0b6      	b.n	80087ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008684:	e0b2      	b.n	80087ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800868e:	d15e      	bne.n	800874e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008694:	2b08      	cmp	r3, #8
 8008696:	d828      	bhi.n	80086ea <UART_SetConfig+0x44a>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <UART_SetConfig+0x400>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086d5 	.word	0x080086d5
 80086ac:	080086eb 	.word	0x080086eb
 80086b0:	080086db 	.word	0x080086db
 80086b4:	080086eb 	.word	0x080086eb
 80086b8:	080086eb 	.word	0x080086eb
 80086bc:	080086eb 	.word	0x080086eb
 80086c0:	080086e3 	.word	0x080086e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086c4:	f7fd f960 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 80086c8:	61f8      	str	r0, [r7, #28]
        break;
 80086ca:	e014      	b.n	80086f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086cc:	f7fd f972 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 80086d0:	61f8      	str	r0, [r7, #28]
        break;
 80086d2:	e010      	b.n	80086f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086d4:	4b4d      	ldr	r3, [pc, #308]	; (800880c <UART_SetConfig+0x56c>)
 80086d6:	61fb      	str	r3, [r7, #28]
        break;
 80086d8:	e00d      	b.n	80086f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086da:	f7fd f8bd 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 80086de:	61f8      	str	r0, [r7, #28]
        break;
 80086e0:	e009      	b.n	80086f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e6:	61fb      	str	r3, [r7, #28]
        break;
 80086e8:	e005      	b.n	80086f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80086f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d077      	beq.n	80087ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	005a      	lsls	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	085b      	lsrs	r3, r3, #1
 8008706:	441a      	add	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008710:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b0f      	cmp	r3, #15
 8008716:	d916      	bls.n	8008746 <UART_SetConfig+0x4a6>
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800871e:	d212      	bcs.n	8008746 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	b29b      	uxth	r3, r3
 8008724:	f023 030f 	bic.w	r3, r3, #15
 8008728:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	085b      	lsrs	r3, r3, #1
 800872e:	b29b      	uxth	r3, r3
 8008730:	f003 0307 	and.w	r3, r3, #7
 8008734:	b29a      	uxth	r2, r3
 8008736:	8afb      	ldrh	r3, [r7, #22]
 8008738:	4313      	orrs	r3, r2
 800873a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	8afa      	ldrh	r2, [r7, #22]
 8008742:	60da      	str	r2, [r3, #12]
 8008744:	e052      	b.n	80087ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800874c:	e04e      	b.n	80087ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800874e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008752:	2b08      	cmp	r3, #8
 8008754:	d827      	bhi.n	80087a6 <UART_SetConfig+0x506>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x4bc>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	08008781 	.word	0x08008781
 8008760:	08008789 	.word	0x08008789
 8008764:	08008791 	.word	0x08008791
 8008768:	080087a7 	.word	0x080087a7
 800876c:	08008797 	.word	0x08008797
 8008770:	080087a7 	.word	0x080087a7
 8008774:	080087a7 	.word	0x080087a7
 8008778:	080087a7 	.word	0x080087a7
 800877c:	0800879f 	.word	0x0800879f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008780:	f7fd f902 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 8008784:	61f8      	str	r0, [r7, #28]
        break;
 8008786:	e014      	b.n	80087b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008788:	f7fd f914 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 800878c:	61f8      	str	r0, [r7, #28]
        break;
 800878e:	e010      	b.n	80087b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008790:	4b1e      	ldr	r3, [pc, #120]	; (800880c <UART_SetConfig+0x56c>)
 8008792:	61fb      	str	r3, [r7, #28]
        break;
 8008794:	e00d      	b.n	80087b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008796:	f7fd f85f 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 800879a:	61f8      	str	r0, [r7, #28]
        break;
 800879c:	e009      	b.n	80087b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a2:	61fb      	str	r3, [r7, #28]
        break;
 80087a4:	e005      	b.n	80087b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80087b0:	bf00      	nop
    }

    if (pclk != 0U)
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d019      	beq.n	80087ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	085a      	lsrs	r2, r3, #1
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b0f      	cmp	r3, #15
 80087d0:	d909      	bls.n	80087e6 <UART_SetConfig+0x546>
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d205      	bcs.n	80087e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	e002      	b.n	80087ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80087f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3728      	adds	r7, #40	; 0x28
 8008800:	46bd      	mov	sp, r7
 8008802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008806:	bf00      	nop
 8008808:	40008000 	.word	0x40008000
 800880c:	00f42400 	.word	0x00f42400

08008810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	430a      	orrs	r2, r1
 8008838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	f003 0304 	and.w	r3, r3, #4
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	f003 0310 	and.w	r3, r3, #16
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01a      	beq.n	8008926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800890e:	d10a      	bne.n	8008926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	605a      	str	r2, [r3, #4]
  }
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b098      	sub	sp, #96	; 0x60
 8008958:	af02      	add	r7, sp, #8
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008964:	f7fa fc24 	bl	80031b0 <HAL_GetTick>
 8008968:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b08      	cmp	r3, #8
 8008976:	d12e      	bne.n	80089d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008980:	2200      	movs	r2, #0
 8008982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f88c 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d021      	beq.n	80089d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089a6:	653b      	str	r3, [r7, #80]	; 0x50
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b0:	647b      	str	r3, [r7, #68]	; 0x44
 80089b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e6      	bne.n	8008992 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e062      	b.n	8008a9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d149      	bne.n	8008a78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ec:	2200      	movs	r2, #0
 80089ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f856 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d03c      	beq.n	8008a78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3308      	adds	r3, #8
 8008a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0301 	bic.w	r3, r3, #1
 8008a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a50:	61fa      	str	r2, [r7, #28]
 8008a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	69b9      	ldr	r1, [r7, #24]
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e5      	bne.n	8008a30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e011      	b.n	8008a9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3758      	adds	r7, #88	; 0x58
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab4:	e049      	b.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abc:	d045      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008abe:	f7fa fb77 	bl	80031b0 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d302      	bcc.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e048      	b.n	8008b6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d031      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f003 0308 	and.w	r3, r3, #8
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d110      	bne.n	8008b16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2208      	movs	r2, #8
 8008afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 f838 	bl	8008b72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2208      	movs	r2, #8
 8008b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e029      	b.n	8008b6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b24:	d111      	bne.n	8008b4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f81e 	bl	8008b72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e00f      	b.n	8008b6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69da      	ldr	r2, [r3, #28]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4013      	ands	r3, r2
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	bf0c      	ite	eq
 8008b5a:	2301      	moveq	r3, #1
 8008b5c:	2300      	movne	r3, #0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d0a6      	beq.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b095      	sub	sp, #84	; 0x54
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b98:	643b      	str	r3, [r7, #64]	; 0x40
 8008b9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e6      	bne.n	8008b7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3308      	adds	r3, #8
 8008bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f023 0301 	bic.w	r3, r3, #1
 8008bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d118      	bne.n	8008c1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f023 0310 	bic.w	r3, r3, #16
 8008bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	613b      	str	r3, [r7, #16]
   return(result);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e6      	bne.n	8008be8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c2e:	bf00      	nop
 8008c30:	3754      	adds	r7, #84	; 0x54
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	f107 001c 	add.w	r0, r7, #28
 8008c48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa65 	bl	8009128 <USB_CoreReset>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
 8008c74:	e005      	b.n	8008c82 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c8e:	b004      	add	sp, #16
 8008c90:	4770      	bx	lr

08008c92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f023 0201 	bic.w	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d115      	bne.n	8008d02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	f7fa fa70 	bl	80031c8 <HAL_Delay>
      ms++;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa0c 	bl	800910c <USB_GetMode>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d01e      	beq.n	8008d38 <USB_SetCurrentMode+0x84>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b31      	cmp	r3, #49	; 0x31
 8008cfe:	d9f0      	bls.n	8008ce2 <USB_SetCurrentMode+0x2e>
 8008d00:	e01a      	b.n	8008d38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d115      	bne.n	8008d34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d14:	2001      	movs	r0, #1
 8008d16:	f7fa fa57 	bl	80031c8 <HAL_Delay>
      ms++;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f9f3 	bl	800910c <USB_GetMode>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <USB_SetCurrentMode+0x84>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b31      	cmp	r3, #49	; 0x31
 8008d30:	d9f0      	bls.n	8008d14 <USB_SetCurrentMode+0x60>
 8008d32:	e001      	b.n	8008d38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e005      	b.n	8008d44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b32      	cmp	r3, #50	; 0x32
 8008d3c:	d101      	bne.n	8008d42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d66:	2300      	movs	r3, #0
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	e009      	b.n	8008d80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	3340      	adds	r3, #64	; 0x40
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b0e      	cmp	r3, #14
 8008d84:	d9f2      	bls.n	8008d6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d11c      	bne.n	8008dc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d9a:	f043 0302 	orr.w	r3, r3, #2
 8008d9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e005      	b.n	8008dd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dd8:	461a      	mov	r2, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dde:	2103      	movs	r1, #3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f959 	bl	8009098 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008de6:	2110      	movs	r1, #16
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f8f1 	bl	8008fd0 <USB_FlushTxFifo>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f91d 	bl	8009038 <USB_FlushRxFifo>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2300      	movs	r3, #0
 8008e12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e26:	461a      	mov	r2, r3
 8008e28:	2300      	movs	r3, #0
 8008e2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	613b      	str	r3, [r7, #16]
 8008e30:	e043      	b.n	8008eba <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e48:	d118      	bne.n	8008e7c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e013      	b.n	8008e8e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e72:	461a      	mov	r2, r3
 8008e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	e008      	b.n	8008e8e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	461a      	mov	r2, r3
 8008eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d3b7      	bcc.n	8008e32 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	e043      	b.n	8008f50 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ede:	d118      	bne.n	8008f12 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	e013      	b.n	8008f24 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	e008      	b.n	8008f24 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	461a      	mov	r2, r3
 8008f20:	2300      	movs	r3, #0
 8008f22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f30:	461a      	mov	r2, r3
 8008f32:	2300      	movs	r3, #0
 8008f34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f42:	461a      	mov	r2, r3
 8008f44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	613b      	str	r3, [r7, #16]
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d3b7      	bcc.n	8008ec8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	f043 0210 	orr.w	r2, r3, #16
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	4b10      	ldr	r3, [pc, #64]	; (8008fcc <USB_DevInit+0x280>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f043 0208 	orr.w	r2, r3, #8
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d107      	bne.n	8008fba <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fb2:	f043 0304 	orr.w	r3, r3, #4
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fc6:	b004      	add	sp, #16
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	803c3800 	.word	0x803c3800

08008fd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a13      	ldr	r2, [pc, #76]	; (8009034 <USB_FlushTxFifo+0x64>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d901      	bls.n	8008ff0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e01b      	b.n	8009028 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	daf2      	bge.n	8008fde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	019b      	lsls	r3, r3, #6
 8009000:	f043 0220 	orr.w	r2, r3, #32
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4a08      	ldr	r2, [pc, #32]	; (8009034 <USB_FlushTxFifo+0x64>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d901      	bls.n	800901a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e006      	b.n	8009028 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b20      	cmp	r3, #32
 8009024:	d0f0      	beq.n	8009008 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	00030d40 	.word	0x00030d40

08009038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3301      	adds	r3, #1
 8009048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4a11      	ldr	r2, [pc, #68]	; (8009094 <USB_FlushRxFifo+0x5c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d901      	bls.n	8009056 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e018      	b.n	8009088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	daf2      	bge.n	8009044 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2210      	movs	r2, #16
 8009066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3301      	adds	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4a08      	ldr	r2, [pc, #32]	; (8009094 <USB_FlushRxFifo+0x5c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d901      	bls.n	800907a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e006      	b.n	8009088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	2b10      	cmp	r3, #16
 8009084:	d0f0      	beq.n	8009068 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	00030d40 	.word	0x00030d40

08009098 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b8:	4313      	orrs	r3, r2
 80090ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr

080090ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b085      	sub	sp, #20
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090e4:	f023 0303 	bic.w	r3, r3, #3
 80090e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090f8:	f043 0302 	orr.w	r3, r3, #2
 80090fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	f003 0301 	and.w	r3, r3, #1
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4a13      	ldr	r2, [pc, #76]	; (800918c <USB_CoreReset+0x64>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d901      	bls.n	8009146 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e01b      	b.n	800917e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	daf2      	bge.n	8009134 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	f043 0201 	orr.w	r2, r3, #1
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a09      	ldr	r2, [pc, #36]	; (800918c <USB_CoreReset+0x64>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d901      	bls.n	8009170 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e006      	b.n	800917e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b01      	cmp	r3, #1
 800917a:	d0f0      	beq.n	800915e <USB_CoreReset+0x36>

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	00030d40 	.word	0x00030d40

08009190 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10b      	bne.n	80091ba <BSP_COM_Init+0x2a>
 80091a2:	4b2d      	ldr	r3, [pc, #180]	; (8009258 <BSP_COM_Init+0xc8>)
 80091a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a6:	4a2c      	ldr	r2, [pc, #176]	; (8009258 <BSP_COM_Init+0xc8>)
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091ae:	4b2a      	ldr	r3, [pc, #168]	; (8009258 <BSP_COM_Init+0xc8>)
 80091b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10b      	bne.n	80091d8 <BSP_COM_Init+0x48>
 80091c0:	4b25      	ldr	r3, [pc, #148]	; (8009258 <BSP_COM_Init+0xc8>)
 80091c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c4:	4a24      	ldr	r2, [pc, #144]	; (8009258 <BSP_COM_Init+0xc8>)
 80091c6:	f043 0302 	orr.w	r3, r3, #2
 80091ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091cc:	4b22      	ldr	r3, [pc, #136]	; (8009258 <BSP_COM_Init+0xc8>)
 80091ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10b      	bne.n	80091f6 <BSP_COM_Init+0x66>
 80091de:	4b1e      	ldr	r3, [pc, #120]	; (8009258 <BSP_COM_Init+0xc8>)
 80091e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e2:	4a1d      	ldr	r2, [pc, #116]	; (8009258 <BSP_COM_Init+0xc8>)
 80091e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e8:	6613      	str	r3, [r2, #96]	; 0x60
 80091ea:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <BSP_COM_Init+0xc8>)
 80091ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f2:	60bb      	str	r3, [r7, #8]
 80091f4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80091f6:	2340      	movs	r3, #64	; 0x40
 80091f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80091fa:	2302      	movs	r3, #2
 80091fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80091fe:	2302      	movs	r3, #2
 8009200:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8009206:	2307      	movs	r3, #7
 8009208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	4a13      	ldr	r2, [pc, #76]	; (800925c <BSP_COM_Init+0xcc>)
 800920e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009212:	f107 0214 	add.w	r2, r7, #20
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f7fa fa8b 	bl	8003734 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800921e:	2380      	movs	r3, #128	; 0x80
 8009220:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8009222:	2302      	movs	r3, #2
 8009224:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8009226:	2307      	movs	r3, #7
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <BSP_COM_Init+0xd0>)
 800922e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009232:	f107 0214 	add.w	r2, r7, #20
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7fa fa7b 	bl	8003734 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <BSP_COM_Init+0xd4>)
 8009242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800924a:	6838      	ldr	r0, [r7, #0]
 800924c:	f7fe ff4f 	bl	80080ee <HAL_UART_Init>
}
 8009250:	bf00      	nop
 8009252:	3728      	adds	r7, #40	; 0x28
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40021000 	.word	0x40021000
 800925c:	200000bc 	.word	0x200000bc
 8009260:	200000c0 	.word	0x200000c0
 8009264:	200000b8 	.word	0x200000b8

08009268 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	; 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009270:	4b27      	ldr	r3, [pc, #156]	; (8009310 <I2Cx_MspInit+0xa8>)
 8009272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009274:	4a26      	ldr	r2, [pc, #152]	; (8009310 <I2Cx_MspInit+0xa8>)
 8009276:	f043 0302 	orr.w	r3, r3, #2
 800927a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800927c:	4b24      	ldr	r3, [pc, #144]	; (8009310 <I2Cx_MspInit+0xa8>)
 800927e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800928c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800928e:	2312      	movs	r3, #18
 8009290:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009292:	2301      	movs	r3, #1
 8009294:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009296:	2303      	movs	r3, #3
 8009298:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800929a:	2304      	movs	r3, #4
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800929e:	f107 0314 	add.w	r3, r7, #20
 80092a2:	4619      	mov	r1, r3
 80092a4:	481b      	ldr	r0, [pc, #108]	; (8009314 <I2Cx_MspInit+0xac>)
 80092a6:	f7fa fa45 	bl	8003734 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80092aa:	f107 0314 	add.w	r3, r7, #20
 80092ae:	4619      	mov	r1, r3
 80092b0:	4818      	ldr	r0, [pc, #96]	; (8009314 <I2Cx_MspInit+0xac>)
 80092b2:	f7fa fa3f 	bl	8003734 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	4a15      	ldr	r2, [pc, #84]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092c0:	6593      	str	r3, [r2, #88]	; 0x58
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80092ce:	4b10      	ldr	r3, [pc, #64]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80092da:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	4a0c      	ldr	r2, [pc, #48]	; (8009310 <I2Cx_MspInit+0xa8>)
 80092e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80092e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80092e6:	2200      	movs	r2, #0
 80092e8:	210f      	movs	r1, #15
 80092ea:	2021      	movs	r0, #33	; 0x21
 80092ec:	f7fa f88f 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80092f0:	2021      	movs	r0, #33	; 0x21
 80092f2:	f7fa f8a8 	bl	8003446 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80092f6:	2200      	movs	r2, #0
 80092f8:	210f      	movs	r1, #15
 80092fa:	2022      	movs	r0, #34	; 0x22
 80092fc:	f7fa f887 	bl	800340e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009300:	2022      	movs	r0, #34	; 0x22
 8009302:	f7fa f8a0 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8009306:	bf00      	nop
 8009308:	3728      	adds	r7, #40	; 0x28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	40021000 	.word	0x40021000
 8009314:	48000400 	.word	0x48000400

08009318 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a12      	ldr	r2, [pc, #72]	; (800936c <I2Cx_Init+0x54>)
 8009324:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a11      	ldr	r2, [pc, #68]	; (8009370 <I2Cx_Init+0x58>)
 800932a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ff89 	bl	8009268 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7fa fcd2 	bl	8003d00 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800935c:	2100      	movs	r1, #0
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fb fa7e 	bl	8004860 <HAL_I2CEx_ConfigAnalogFilter>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	40005800 	.word	0x40005800
 8009370:	00702681 	.word	0x00702681

08009374 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af04      	add	r7, sp, #16
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	4608      	mov	r0, r1
 800937e:	4611      	mov	r1, r2
 8009380:	461a      	mov	r2, r3
 8009382:	4603      	mov	r3, r0
 8009384:	72fb      	strb	r3, [r7, #11]
 8009386:	460b      	mov	r3, r1
 8009388:	813b      	strh	r3, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	b299      	uxth	r1, r3
 8009396:	88f8      	ldrh	r0, [r7, #6]
 8009398:	893a      	ldrh	r2, [r7, #8]
 800939a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	4603      	mov	r3, r0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7fa fe86 	bl	80040bc <HAL_I2C_Mem_Read>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	4619      	mov	r1, r3
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f832 	bl	8009428 <I2Cx_Error>
  }
  return status;
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b08a      	sub	sp, #40	; 0x28
 80093d2:	af04      	add	r7, sp, #16
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	4608      	mov	r0, r1
 80093d8:	4611      	mov	r1, r2
 80093da:	461a      	mov	r2, r3
 80093dc:	4603      	mov	r3, r0
 80093de:	72fb      	strb	r3, [r7, #11]
 80093e0:	460b      	mov	r3, r1
 80093e2:	813b      	strh	r3, [r7, #8]
 80093e4:	4613      	mov	r3, r2
 80093e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	b299      	uxth	r1, r3
 80093f0:	88f8      	ldrh	r0, [r7, #6]
 80093f2:	893a      	ldrh	r2, [r7, #8]
 80093f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093f8:	9302      	str	r3, [sp, #8]
 80093fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4603      	mov	r3, r0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7fa fd45 	bl	8003e94 <HAL_I2C_Mem_Write>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	4619      	mov	r1, r3
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 f805 	bl	8009428 <I2Cx_Error>
  }
  return status;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7fa fcfe 	bl	8003e36 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7ff ff6c 	bl	8009318 <I2Cx_Init>
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800944c:	4802      	ldr	r0, [pc, #8]	; (8009458 <SENSOR_IO_Init+0x10>)
 800944e:	f7ff ff63 	bl	8009318 <I2Cx_Init>
}
 8009452:	bf00      	nop
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000f68 	.word	0x20000f68

0800945c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af02      	add	r7, sp, #8
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
 8009466:	460b      	mov	r3, r1
 8009468:	71bb      	strb	r3, [r7, #6]
 800946a:	4613      	mov	r3, r2
 800946c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800946e:	79bb      	ldrb	r3, [r7, #6]
 8009470:	b29a      	uxth	r2, r3
 8009472:	79f9      	ldrb	r1, [r7, #7]
 8009474:	2301      	movs	r3, #1
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	1d7b      	adds	r3, r7, #5
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	2301      	movs	r3, #1
 800947e:	4803      	ldr	r0, [pc, #12]	; (800948c <SENSOR_IO_Write+0x30>)
 8009480:	f7ff ffa5 	bl	80093ce <I2Cx_WriteMultiple>
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20000f68 	.word	0x20000f68

08009490 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af02      	add	r7, sp, #8
 8009496:	4603      	mov	r3, r0
 8009498:	460a      	mov	r2, r1
 800949a:	71fb      	strb	r3, [r7, #7]
 800949c:	4613      	mov	r3, r2
 800949e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80094a4:	79bb      	ldrb	r3, [r7, #6]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	79f9      	ldrb	r1, [r7, #7]
 80094aa:	2301      	movs	r3, #1
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	f107 030f 	add.w	r3, r7, #15
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2301      	movs	r3, #1
 80094b6:	4804      	ldr	r0, [pc, #16]	; (80094c8 <SENSOR_IO_Read+0x38>)
 80094b8:	f7ff ff5c 	bl	8009374 <I2Cx_ReadMultiple>

  return read_value;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20000f68 	.word	0x20000f68

080094cc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	603a      	str	r2, [r7, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	71fb      	strb	r3, [r7, #7]
 80094da:	460b      	mov	r3, r1
 80094dc:	71bb      	strb	r3, [r7, #6]
 80094de:	4613      	mov	r3, r2
 80094e0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80094e2:	79bb      	ldrb	r3, [r7, #6]
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	79f9      	ldrb	r1, [r7, #7]
 80094e8:	88bb      	ldrh	r3, [r7, #4]
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2301      	movs	r3, #1
 80094f2:	4804      	ldr	r0, [pc, #16]	; (8009504 <SENSOR_IO_ReadMultiple+0x38>)
 80094f4:	f7ff ff3e 	bl	8009374 <I2Cx_ReadMultiple>
 80094f8:	4603      	mov	r3, r0
 80094fa:	b29b      	uxth	r3, r3
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000f68 	.word	0x20000f68

08009508 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009512:	2300      	movs	r3, #0
 8009514:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009516:	4b19      	ldr	r3, [pc, #100]	; (800957c <BSP_ACCELERO_Init+0x74>)
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	4798      	blx	r3
 800951c:	4603      	mov	r3, r0
 800951e:	2b6a      	cmp	r3, #106	; 0x6a
 8009520:	d002      	beq.n	8009528 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
 8009526:	e024      	b.n	8009572 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009528:	4b15      	ldr	r3, [pc, #84]	; (8009580 <BSP_ACCELERO_Init+0x78>)
 800952a:	4a14      	ldr	r2, [pc, #80]	; (800957c <BSP_ACCELERO_Init+0x74>)
 800952c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800952e:	2330      	movs	r3, #48	; 0x30
 8009530:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8009536:	2300      	movs	r3, #0
 8009538:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009546:	797a      	ldrb	r2, [r7, #5]
 8009548:	7abb      	ldrb	r3, [r7, #10]
 800954a:	4313      	orrs	r3, r2
 800954c:	b2db      	uxtb	r3, r3
 800954e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009550:	7a3b      	ldrb	r3, [r7, #8]
 8009552:	f043 0304 	orr.w	r3, r3, #4
 8009556:	b2db      	uxtb	r3, r3
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	b21a      	sxth	r2, r3
 800955c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	b21b      	sxth	r3, r3
 8009564:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009566:	4b06      	ldr	r3, [pc, #24]	; (8009580 <BSP_ACCELERO_Init+0x78>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	89ba      	ldrh	r2, [r7, #12]
 800956e:	4610      	mov	r0, r2
 8009570:	4798      	blx	r3
  }  

  return ret;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	200000e0 	.word	0x200000e0
 8009580:	20001044 	.word	0x20001044

08009584 <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <BSP_ACCELERO_LowPower+0x30>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 8009596:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <BSP_ACCELERO_LowPower+0x30>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 80095a0:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <BSP_ACCELERO_LowPower+0x30>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	88fa      	ldrh	r2, [r7, #6]
 80095a8:	4610      	mov	r0, r2
 80095aa:	4798      	blx	r3
    }
  }
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001044 	.word	0x20001044

080095b8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 80095c0:	4b08      	ldr	r3, [pc, #32]	; (80095e4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d009      	beq.n	80095dc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80095c8:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d004      	beq.n	80095dc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80095d2:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3


    }
  }
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	20001044 	.word	0x20001044

080095e8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80095ee:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <BSP_HSENSOR_Init+0x38>)
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	20be      	movs	r0, #190	; 0xbe
 80095f4:	4798      	blx	r3
 80095f6:	4603      	mov	r3, r0
 80095f8:	2bbc      	cmp	r3, #188	; 0xbc
 80095fa:	d002      	beq.n	8009602 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	e009      	b.n	8009616 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <BSP_HSENSOR_Init+0x3c>)
 8009604:	4a06      	ldr	r2, [pc, #24]	; (8009620 <BSP_HSENSOR_Init+0x38>)
 8009606:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <BSP_HSENSOR_Init+0x3c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	20be      	movs	r0, #190	; 0xbe
 8009610:	4798      	blx	r3
    ret = HSENSOR_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8009616:	687b      	ldr	r3, [r7, #4]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	200000c4 	.word	0x200000c4
 8009624:	20001048 	.word	0x20001048

08009628 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <BSP_HSENSOR_ReadHumidity+0x18>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	20be      	movs	r0, #190	; 0xbe
 8009634:	4798      	blx	r3
 8009636:	eef0 7a40 	vmov.f32	s15, s0
}
 800963a:	eeb0 0a67 	vmov.f32	s0, s15
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001048 	.word	0x20001048

08009644 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800964e:	4b09      	ldr	r3, [pc, #36]	; (8009674 <BSP_TSENSOR_Init+0x30>)
 8009650:	4a09      	ldr	r2, [pc, #36]	; (8009678 <BSP_TSENSOR_Init+0x34>)
 8009652:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8009654:	f7ff fef8 	bl	8009448 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <BSP_TSENSOR_Init+0x30>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2100      	movs	r1, #0
 8009660:	20be      	movs	r0, #190	; 0xbe
 8009662:	4798      	blx	r3

  ret = TSENSOR_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8009668:	79fb      	ldrb	r3, [r7, #7]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	2000104c 	.word	0x2000104c
 8009678:	200000d0 	.word	0x200000d0

0800967c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8009680:	4b04      	ldr	r3, [pc, #16]	; (8009694 <BSP_TSENSOR_ReadTemp+0x18>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	20be      	movs	r0, #190	; 0xbe
 8009688:	4798      	blx	r3
 800968a:	eef0 7a40 	vmov.f32	s15, s0
}
 800968e:	eeb0 0a67 	vmov.f32	s0, s15
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000104c 	.word	0x2000104c

08009698 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2120      	movs	r1, #32
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fef1 	bl	8009490 <SENSOR_IO_Read>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	f023 0304 	bic.w	r3, r3, #4
 80096b8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	f043 0304 	orr.w	r3, r3, #4
 80096c0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	f023 0303 	bic.w	r3, r3, #3
 80096c8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	f043 0301 	orr.w	r3, r3, #1
 80096d0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096d8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80096da:	88fb      	ldrh	r3, [r7, #6]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	7bfa      	ldrb	r2, [r7, #15]
 80096e0:	2120      	movs	r1, #32
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff feba 	bl	800945c <SENSOR_IO_Write>
}
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80096fe:	f7ff fea3 	bl	8009448 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8009702:	88fb      	ldrh	r3, [r7, #6]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	210f      	movs	r1, #15
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fec1 	bl	8009490 <SENSOR_IO_Read>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	b2d8      	uxtb	r0, r3
 800972a:	f107 020c 	add.w	r2, r7, #12
 800972e:	2302      	movs	r3, #2
 8009730:	21b0      	movs	r1, #176	; 0xb0
 8009732:	f7ff fecb 	bl	80094cc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8009736:	7b3b      	ldrb	r3, [r7, #12]
 8009738:	085b      	lsrs	r3, r3, #1
 800973a:	b2db      	uxtb	r3, r3
 800973c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800973e:	7b7b      	ldrb	r3, [r7, #13]
 8009740:	085b      	lsrs	r3, r3, #1
 8009742:	b2db      	uxtb	r3, r3
 8009744:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8009746:	88fb      	ldrh	r3, [r7, #6]
 8009748:	b2d8      	uxtb	r0, r3
 800974a:	f107 020c 	add.w	r2, r7, #12
 800974e:	2302      	movs	r3, #2
 8009750:	21b6      	movs	r1, #182	; 0xb6
 8009752:	f7ff febb 	bl	80094cc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009756:	7b7b      	ldrb	r3, [r7, #13]
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	b21a      	sxth	r2, r3
 800975c:	7b3b      	ldrb	r3, [r7, #12]
 800975e:	b21b      	sxth	r3, r3
 8009760:	4313      	orrs	r3, r2
 8009762:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009764:	88fb      	ldrh	r3, [r7, #6]
 8009766:	b2d8      	uxtb	r0, r3
 8009768:	f107 020c 	add.w	r2, r7, #12
 800976c:	2302      	movs	r3, #2
 800976e:	21ba      	movs	r1, #186	; 0xba
 8009770:	f7ff feac 	bl	80094cc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009774:	7b7b      	ldrb	r3, [r7, #13]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	b21a      	sxth	r2, r3
 800977a:	7b3b      	ldrb	r3, [r7, #12]
 800977c:	b21b      	sxth	r3, r3
 800977e:	4313      	orrs	r3, r2
 8009780:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	b2d8      	uxtb	r0, r3
 8009786:	f107 020c 	add.w	r2, r7, #12
 800978a:	2302      	movs	r3, #2
 800978c:	21a8      	movs	r1, #168	; 0xa8
 800978e:	f7ff fe9d 	bl	80094cc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009792:	7b7b      	ldrb	r3, [r7, #13]
 8009794:	021b      	lsls	r3, r3, #8
 8009796:	b21a      	sxth	r2, r3
 8009798:	7b3b      	ldrb	r3, [r7, #12]
 800979a:	b21b      	sxth	r3, r3
 800979c:	4313      	orrs	r3, r2
 800979e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80097a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80097a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097b2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80097b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80097c8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80097cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ee:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80097f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80097f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80097fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097fe:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8009802:	edd7 7a04 	vldr	s15, [r7, #16]
 8009806:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800984c <HTS221_H_ReadHumidity+0x130>
 800980a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800980e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009812:	dd01      	ble.n	8009818 <HTS221_H_ReadHumidity+0xfc>
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HTS221_H_ReadHumidity+0x134>)
 8009816:	e00a      	b.n	800982e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8009818:	edd7 7a04 	vldr	s15, [r7, #16]
 800981c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009824:	d502      	bpl.n	800982c <HTS221_H_ReadHumidity+0x110>
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	e000      	b.n	800982e <HTS221_H_ReadHumidity+0x112>
 800982c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800982e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8009830:	edd7 7a04 	vldr	s15, [r7, #16]
 8009834:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009838:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800983c:	eef0 7a66 	vmov.f32	s15, s13
}
 8009840:	eeb0 0a67 	vmov.f32	s0, s15
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	447a0000 	.word	0x447a0000
 8009850:	447a0000 	.word	0x447a0000

08009854 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009860:	88fb      	ldrh	r3, [r7, #6]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2120      	movs	r1, #32
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff fe12 	bl	8009490 <SENSOR_IO_Read>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	f023 0304 	bic.w	r3, r3, #4
 8009876:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	f043 0304 	orr.w	r3, r3, #4
 800987e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009896:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009898:	88fb      	ldrh	r3, [r7, #6]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	7bfa      	ldrb	r2, [r7, #15]
 800989e:	2120      	movs	r1, #32
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7ff fddb 	bl	800945c <SENSOR_IO_Write>
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b088      	sub	sp, #32
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	4603      	mov	r3, r0
 80098b6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80098b8:	88fb      	ldrh	r3, [r7, #6]
 80098ba:	b2d8      	uxtb	r0, r3
 80098bc:	f107 0208 	add.w	r2, r7, #8
 80098c0:	2302      	movs	r3, #2
 80098c2:	21b2      	movs	r1, #178	; 0xb2
 80098c4:	f7ff fe02 	bl	80094cc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80098c8:	88fb      	ldrh	r3, [r7, #6]
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2135      	movs	r1, #53	; 0x35
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fdde 	bl	8009490 <SENSOR_IO_Read>
 80098d4:	4603      	mov	r3, r0
 80098d6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80098d8:	7ffb      	ldrb	r3, [r7, #31]
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	b21b      	sxth	r3, r3
 80098de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098e2:	b21a      	sxth	r2, r3
 80098e4:	7a3b      	ldrb	r3, [r7, #8]
 80098e6:	b21b      	sxth	r3, r3
 80098e8:	4313      	orrs	r3, r2
 80098ea:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80098ec:	7ffb      	ldrb	r3, [r7, #31]
 80098ee:	019b      	lsls	r3, r3, #6
 80098f0:	b21b      	sxth	r3, r3
 80098f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098f6:	b21a      	sxth	r2, r3
 80098f8:	7a7b      	ldrb	r3, [r7, #9]
 80098fa:	b21b      	sxth	r3, r3
 80098fc:	4313      	orrs	r3, r2
 80098fe:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8009900:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009904:	10db      	asrs	r3, r3, #3
 8009906:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8009908:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800990c:	10db      	asrs	r3, r3, #3
 800990e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8009910:	88fb      	ldrh	r3, [r7, #6]
 8009912:	b2d8      	uxtb	r0, r3
 8009914:	f107 0208 	add.w	r2, r7, #8
 8009918:	2304      	movs	r3, #4
 800991a:	21bc      	movs	r1, #188	; 0xbc
 800991c:	f7ff fdd6 	bl	80094cc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009920:	7a7b      	ldrb	r3, [r7, #9]
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	b21a      	sxth	r2, r3
 8009926:	7a3b      	ldrb	r3, [r7, #8]
 8009928:	b21b      	sxth	r3, r3
 800992a:	4313      	orrs	r3, r2
 800992c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800992e:	7afb      	ldrb	r3, [r7, #11]
 8009930:	021b      	lsls	r3, r3, #8
 8009932:	b21a      	sxth	r2, r3
 8009934:	7abb      	ldrb	r3, [r7, #10]
 8009936:	b21b      	sxth	r3, r3
 8009938:	4313      	orrs	r3, r2
 800993a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	b2d8      	uxtb	r0, r3
 8009940:	f107 0208 	add.w	r2, r7, #8
 8009944:	2302      	movs	r3, #2
 8009946:	21aa      	movs	r1, #170	; 0xaa
 8009948:	f7ff fdc0 	bl	80094cc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800994c:	7a7b      	ldrb	r3, [r7, #9]
 800994e:	021b      	lsls	r3, r3, #8
 8009950:	b21a      	sxth	r2, r3
 8009952:	7a3b      	ldrb	r3, [r7, #8]
 8009954:	b21b      	sxth	r3, r3
 8009956:	4313      	orrs	r3, r2
 8009958:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800995a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800995e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800996c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009970:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800997e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009982:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009986:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009998:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800999c:	ee07 3a90 	vmov	s15, r3
 80099a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099a8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	ee07 3a90 	vmov	s15, r3
}
 80099b2:	eeb0 0a67 	vmov.f32	s0, s15
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80099ca:	2110      	movs	r1, #16
 80099cc:	20d4      	movs	r0, #212	; 0xd4
 80099ce:	f7ff fd5f 	bl	8009490 <SENSOR_IO_Read>
 80099d2:	4603      	mov	r3, r0
 80099d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	f003 0303 	and.w	r3, r3, #3
 80099e0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80099e2:	7bba      	ldrb	r2, [r7, #14]
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	461a      	mov	r2, r3
 80099ee:	2110      	movs	r1, #16
 80099f0:	20d4      	movs	r0, #212	; 0xd4
 80099f2:	f7ff fd33 	bl	800945c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80099f6:	2112      	movs	r1, #18
 80099f8:	20d4      	movs	r0, #212	; 0xd4
 80099fa:	f7ff fd49 	bl	8009490 <SENSOR_IO_Read>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	0a1b      	lsrs	r3, r3, #8
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8009a10:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8009a12:	7bba      	ldrb	r2, [r7, #14]
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	2112      	movs	r1, #18
 8009a20:	20d4      	movs	r0, #212	; 0xd4
 8009a22:	f7ff fd1b 	bl	800945c <SENSOR_IO_Write>
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009a34:	2300      	movs	r3, #0
 8009a36:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009a38:	2110      	movs	r1, #16
 8009a3a:	20d4      	movs	r0, #212	; 0xd4
 8009a3c:	f7ff fd28 	bl	8009490 <SENSOR_IO_Read>
 8009a40:	4603      	mov	r3, r0
 8009a42:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	2110      	movs	r1, #16
 8009a52:	20d4      	movs	r0, #212	; 0xd4
 8009a54:	f7ff fd02 	bl	800945c <SENSOR_IO_Write>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009a64:	f7ff fcf0 	bl	8009448 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8009a68:	210f      	movs	r1, #15
 8009a6a:	20d4      	movs	r0, #212	; 0xd4
 8009a6c:	f7ff fd10 	bl	8009490 <SENSOR_IO_Read>
 8009a70:	4603      	mov	r3, r0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b084      	sub	sp, #16
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009a84:	2115      	movs	r1, #21
 8009a86:	20d4      	movs	r0, #212	; 0xd4
 8009a88:	f7ff fd02 	bl	8009490 <SENSOR_IO_Read>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	f023 0310 	bic.w	r3, r3, #16
 8009a96:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009a98:	88fb      	ldrh	r3, [r7, #6]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	f043 0310 	orr.w	r3, r3, #16
 8009aa4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	2115      	movs	r1, #21
 8009aac:	20d4      	movs	r0, #212	; 0xd4
 8009aae:	f7ff fcd5 	bl	800945c <SENSOR_IO_Write>
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009ad2:	2110      	movs	r1, #16
 8009ad4:	20d4      	movs	r0, #212	; 0xd4
 8009ad6:	f7ff fcdb 	bl	8009490 <SENSOR_IO_Read>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8009ade:	f107 0208 	add.w	r2, r7, #8
 8009ae2:	2306      	movs	r3, #6
 8009ae4:	2128      	movs	r1, #40	; 0x28
 8009ae6:	20d4      	movs	r0, #212	; 0xd4
 8009ae8:	f7ff fcf0 	bl	80094cc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009aec:	2300      	movs	r3, #0
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e01c      	b.n	8009b2c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009af2:	7ffb      	ldrb	r3, [r7, #31]
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	3301      	adds	r3, #1
 8009af8:	3320      	adds	r3, #32
 8009afa:	443b      	add	r3, r7
 8009afc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	021b      	lsls	r3, r3, #8
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	7ffb      	ldrb	r3, [r7, #31]
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	3320      	adds	r3, #32
 8009b0c:	443b      	add	r3, r7
 8009b0e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4413      	add	r3, r2
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	7ffb      	ldrb	r3, [r7, #31]
 8009b1a:	b212      	sxth	r2, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	3320      	adds	r3, #32
 8009b20:	443b      	add	r3, r7
 8009b22:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009b26:	7ffb      	ldrb	r3, [r7, #31]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	7ffb      	ldrb	r3, [r7, #31]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d9df      	bls.n	8009af2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	f003 030c 	and.w	r3, r3, #12
 8009b38:	2b0c      	cmp	r3, #12
 8009b3a:	d829      	bhi.n	8009b90 <LSM6DSL_AccReadXYZ+0xd4>
 8009b3c:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <LSM6DSL_AccReadXYZ+0x88>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b79 	.word	0x08009b79
 8009b48:	08009b91 	.word	0x08009b91
 8009b4c:	08009b91 	.word	0x08009b91
 8009b50:	08009b91 	.word	0x08009b91
 8009b54:	08009b8b 	.word	0x08009b8b
 8009b58:	08009b91 	.word	0x08009b91
 8009b5c:	08009b91 	.word	0x08009b91
 8009b60:	08009b91 	.word	0x08009b91
 8009b64:	08009b7f 	.word	0x08009b7f
 8009b68:	08009b91 	.word	0x08009b91
 8009b6c:	08009b91 	.word	0x08009b91
 8009b70:	08009b91 	.word	0x08009b91
 8009b74:	08009b85 	.word	0x08009b85
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8009b78:	4b18      	ldr	r3, [pc, #96]	; (8009bdc <LSM6DSL_AccReadXYZ+0x120>)
 8009b7a:	61bb      	str	r3, [r7, #24]
    break;
 8009b7c:	e008      	b.n	8009b90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <LSM6DSL_AccReadXYZ+0x124>)
 8009b80:	61bb      	str	r3, [r7, #24]
    break;
 8009b82:	e005      	b.n	8009b90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009b84:	4b17      	ldr	r3, [pc, #92]	; (8009be4 <LSM6DSL_AccReadXYZ+0x128>)
 8009b86:	61bb      	str	r3, [r7, #24]
    break;
 8009b88:	e002      	b.n	8009b90 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8009b8a:	4b17      	ldr	r3, [pc, #92]	; (8009be8 <LSM6DSL_AccReadXYZ+0x12c>)
 8009b8c:	61bb      	str	r3, [r7, #24]
    break;    
 8009b8e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009b90:	2300      	movs	r3, #0
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e01a      	b.n	8009bcc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009b96:	7ffb      	ldrb	r3, [r7, #31]
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	3320      	adds	r3, #32
 8009b9c:	443b      	add	r3, r7
 8009b9e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	7ffb      	ldrb	r3, [r7, #31]
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	4413      	add	r3, r2
 8009bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bbe:	ee17 2a90 	vmov	r2, s15
 8009bc2:	b212      	sxth	r2, r2
 8009bc4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009bc6:	7ffb      	ldrb	r3, [r7, #31]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	7ffb      	ldrb	r3, [r7, #31]
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d9e1      	bls.n	8009b96 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	3d79db23 	.word	0x3d79db23
 8009be0:	3df9db23 	.word	0x3df9db23
 8009be4:	3e79db23 	.word	0x3e79db23
 8009be8:	3ef9db23 	.word	0x3ef9db23

08009bec <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	2b2f      	cmp	r3, #47	; 0x2f
 8009bfa:	d906      	bls.n	8009c0a <Hex2Num+0x1e>
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b39      	cmp	r3, #57	; 0x39
 8009c00:	d803      	bhi.n	8009c0a <Hex2Num+0x1e>
        return a - '0';
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	3b30      	subs	r3, #48	; 0x30
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	e014      	b.n	8009c34 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	2b60      	cmp	r3, #96	; 0x60
 8009c0e:	d906      	bls.n	8009c1e <Hex2Num+0x32>
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b66      	cmp	r3, #102	; 0x66
 8009c14:	d803      	bhi.n	8009c1e <Hex2Num+0x32>
        return (a - 'a') + 10;
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	3b57      	subs	r3, #87	; 0x57
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	e00a      	b.n	8009c34 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	2b40      	cmp	r3, #64	; 0x40
 8009c22:	d906      	bls.n	8009c32 <Hex2Num+0x46>
 8009c24:	79fb      	ldrb	r3, [r7, #7]
 8009c26:	2b46      	cmp	r3, #70	; 0x46
 8009c28:	d803      	bhi.n	8009c32 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	3b37      	subs	r3, #55	; 0x37
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	e000      	b.n	8009c34 <Hex2Num+0x48>
    }

    return 0;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009c52:	e012      	b.n	8009c7a <ParseHexNumber+0x3a>
        sum <<= 4;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff ffc4 	bl	8009bec <Hex2Num>
 8009c64:	4603      	mov	r3, r0
 8009c66:	461a      	mov	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3301      	adds	r3, #1
 8009c72:	607b      	str	r3, [r7, #4]
        i++;
 8009c74:	7afb      	ldrb	r3, [r7, #11]
 8009c76:	3301      	adds	r3, #1
 8009c78:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b2f      	cmp	r3, #47	; 0x2f
 8009c80:	d903      	bls.n	8009c8a <ParseHexNumber+0x4a>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b39      	cmp	r3, #57	; 0x39
 8009c88:	d9e4      	bls.n	8009c54 <ParseHexNumber+0x14>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b60      	cmp	r3, #96	; 0x60
 8009c90:	d903      	bls.n	8009c9a <ParseHexNumber+0x5a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b66      	cmp	r3, #102	; 0x66
 8009c98:	d9dc      	bls.n	8009c54 <ParseHexNumber+0x14>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d903      	bls.n	8009caa <ParseHexNumber+0x6a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b46      	cmp	r3, #70	; 0x46
 8009ca8:	d9d4      	bls.n	8009c54 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <ParseHexNumber+0x76>
        *cnt = i;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	7afa      	ldrb	r2, [r7, #11]
 8009cb4:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b2d      	cmp	r3, #45	; 0x2d
 8009cdc:	d119      	bne.n	8009d12 <ParseNumber+0x52>
        minus = 1;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	607b      	str	r3, [r7, #4]
        i++;
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	3301      	adds	r3, #1
 8009cec:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009cee:	e010      	b.n	8009d12 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	3b30      	subs	r3, #48	; 0x30
 8009d02:	4413      	add	r3, r2
 8009d04:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	607b      	str	r3, [r7, #4]
        i++;
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b2f      	cmp	r3, #47	; 0x2f
 8009d18:	d903      	bls.n	8009d22 <ParseNumber+0x62>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b39      	cmp	r3, #57	; 0x39
 8009d20:	d9e6      	bls.n	8009cf0 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <ParseNumber+0x6e>
        *cnt = i;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	7bba      	ldrb	r2, [r7, #14]
 8009d2c:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <ParseNumber+0x7a>
        return 0 - sum;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	425b      	negs	r3, r3
 8009d38:	e000      	b.n	8009d3c <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009d3a:	68bb      	ldr	r3, [r7, #8]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009d52:	2300      	movs	r3, #0
 8009d54:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009d56:	e019      	b.n	8009d8c <ParseMAC+0x44>
    hexcnt = 1;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b3a      	cmp	r3, #58	; 0x3a
 8009d62:	d00e      	beq.n	8009d82 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009d64:	f107 030e 	add.w	r3, r7, #14
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ff68 	bl	8009c40 <ParseHexNumber>
 8009d70:	4601      	mov	r1, r0
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	73fa      	strb	r2, [r7, #15]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	b2ca      	uxtb	r2, r1
 8009d80:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	461a      	mov	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4413      	add	r3, r2
 8009d8a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e1      	bne.n	8009d58 <ParseMAC+0x10>
  }
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009dac:	e019      	b.n	8009de2 <ParseIP+0x44>
    hexcnt = 1;
 8009dae:	2301      	movs	r3, #1
 8009db0:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b2e      	cmp	r3, #46	; 0x2e
 8009db8:	d00e      	beq.n	8009dd8 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009dba:	f107 030e 	add.w	r3, r7, #14
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff7d 	bl	8009cc0 <ParseNumber>
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	73fa      	strb	r2, [r7, #15]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	b2ca      	uxtb	r2, r1
 8009dd6:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4413      	add	r3, r2
 8009de0:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e1      	bne.n	8009dae <ParseIP+0x10>
  }
}
 8009dea:	bf00      	nop
 8009dec:	bf00      	nop
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3302      	adds	r3, #2
 8009e06:	4934      	ldr	r1, [pc, #208]	; (8009ed8 <AT_ParseInfo+0xe4>)
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f009 faab 	bl	8013364 <strtok>
 8009e0e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009e10:	e05a      	b.n	8009ec8 <AT_ParseInfo+0xd4>
    switch (num++) {
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	72fa      	strb	r2, [r7, #11]
 8009e18:	2b06      	cmp	r3, #6
 8009e1a:	d84f      	bhi.n	8009ebc <AT_ParseInfo+0xc8>
 8009e1c:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <AT_ParseInfo+0x30>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	08009e4f 	.word	0x08009e4f
 8009e2c:	08009e5f 	.word	0x08009e5f
 8009e30:	08009e6f 	.word	0x08009e6f
 8009e34:	08009e7f 	.word	0x08009e7f
 8009e38:	08009e8f 	.word	0x08009e8f
 8009e3c:	08009ea3 	.word	0x08009ea3
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2220      	movs	r2, #32
 8009e44:	68f9      	ldr	r1, [r7, #12]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f009 fa78 	bl	801333c <strncpy>
      break;
 8009e4c:	e037      	b.n	8009ebe <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3320      	adds	r3, #32
 8009e52:	2218      	movs	r2, #24
 8009e54:	68f9      	ldr	r1, [r7, #12]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f009 fa70 	bl	801333c <strncpy>
      break;
 8009e5c:	e02f      	b.n	8009ebe <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3338      	adds	r3, #56	; 0x38
 8009e62:	2210      	movs	r2, #16
 8009e64:	68f9      	ldr	r1, [r7, #12]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f009 fa68 	bl	801333c <strncpy>
      break;
 8009e6c:	e027      	b.n	8009ebe <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3348      	adds	r3, #72	; 0x48
 8009e72:	2210      	movs	r2, #16
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f009 fa60 	bl	801333c <strncpy>
      break;
 8009e7c:	e01f      	b.n	8009ebe <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3358      	adds	r3, #88	; 0x58
 8009e82:	2210      	movs	r2, #16
 8009e84:	68f9      	ldr	r1, [r7, #12]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f009 fa58 	bl	801333c <strncpy>
      break;
 8009e8c:	e017      	b.n	8009ebe <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009e8e:	2100      	movs	r1, #0
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7ff ff15 	bl	8009cc0 <ParseNumber>
 8009e96:	4603      	mov	r3, r0
 8009e98:	461a      	mov	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009ea0:	e00d      	b.n	8009ebe <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009ea2:	490e      	ldr	r1, [pc, #56]	; (8009edc <AT_ParseInfo+0xe8>)
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f009 fa5d 	bl	8013364 <strtok>
 8009eaa:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3368      	adds	r3, #104	; 0x68
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f009 fa41 	bl	801333c <strncpy>
      break;
 8009eba:	e000      	b.n	8009ebe <AT_ParseInfo+0xca>

    default: break;
 8009ebc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009ebe:	4906      	ldr	r1, [pc, #24]	; (8009ed8 <AT_ParseInfo+0xe4>)
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f009 fa4f 	bl	8013364 <strtok>
 8009ec6:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1a1      	bne.n	8009e12 <AT_ParseInfo+0x1e>
  }
}
 8009ece:	bf00      	nop
 8009ed0:	bf00      	nop
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	0801704c 	.word	0x0801704c
 8009edc:	08017050 	.word	0x08017050

08009ee0 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3302      	adds	r3, #2
 8009ef2:	4952      	ldr	r1, [pc, #328]	; (800a03c <AT_ParseConnSettings+0x15c>)
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f009 fa35 	bl	8013364 <strtok>
 8009efa:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009efc:	e095      	b.n	800a02a <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	73fa      	strb	r2, [r7, #15]
 8009f04:	2b0b      	cmp	r3, #11
 8009f06:	d87f      	bhi.n	800a008 <AT_ParseConnSettings+0x128>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <AT_ParseConnSettings+0x30>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f41 	.word	0x08009f41
 8009f14:	08009f4f 	.word	0x08009f4f
 8009f18:	08009f5f 	.word	0x08009f5f
 8009f1c:	08009f73 	.word	0x08009f73
 8009f20:	08009f87 	.word	0x08009f87
 8009f24:	08009f9b 	.word	0x08009f9b
 8009f28:	08009fa9 	.word	0x08009fa9
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	08009fc5 	.word	0x08009fc5
 8009f34:	08009fd3 	.word	0x08009fd3
 8009f38:	08009fe1 	.word	0x08009fe1
 8009f3c:	08009ff5 	.word	0x08009ff5
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2221      	movs	r2, #33	; 0x21
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f009 f9f8 	bl	801333c <strncpy>
      break;
 8009f4c:	e05d      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3321      	adds	r3, #33	; 0x21
 8009f52:	2221      	movs	r2, #33	; 0x21
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f009 f9f0 	bl	801333c <strncpy>
      break;
 8009f5c:	e055      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009f5e:	2100      	movs	r1, #0
 8009f60:	68b8      	ldr	r0, [r7, #8]
 8009f62:	f7ff fead 	bl	8009cc0 <ParseNumber>
 8009f66:	4603      	mov	r3, r0
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009f70:	e04b      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8009f72:	2100      	movs	r1, #0
 8009f74:	68b8      	ldr	r0, [r7, #8]
 8009f76:	f7ff fea3 	bl	8009cc0 <ParseNumber>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8009f84:	e041      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8009f86:	2100      	movs	r1, #0
 8009f88:	68b8      	ldr	r0, [r7, #8]
 8009f8a:	f7ff fe99 	bl	8009cc0 <ParseNumber>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009f98:	e037      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	3348      	adds	r3, #72	; 0x48
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68b8      	ldr	r0, [r7, #8]
 8009fa2:	f7ff fefc 	bl	8009d9e <ParseIP>
      break;
 8009fa6:	e030      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	334c      	adds	r3, #76	; 0x4c
 8009fac:	4619      	mov	r1, r3
 8009fae:	68b8      	ldr	r0, [r7, #8]
 8009fb0:	f7ff fef5 	bl	8009d9e <ParseIP>
      break;
 8009fb4:	e029      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	3350      	adds	r3, #80	; 0x50
 8009fba:	4619      	mov	r1, r3
 8009fbc:	68b8      	ldr	r0, [r7, #8]
 8009fbe:	f7ff feee 	bl	8009d9e <ParseIP>
      break;
 8009fc2:	e022      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	3354      	adds	r3, #84	; 0x54
 8009fc8:	4619      	mov	r1, r3
 8009fca:	68b8      	ldr	r0, [r7, #8]
 8009fcc:	f7ff fee7 	bl	8009d9e <ParseIP>
      break;
 8009fd0:	e01b      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	3358      	adds	r3, #88	; 0x58
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68b8      	ldr	r0, [r7, #8]
 8009fda:	f7ff fee0 	bl	8009d9e <ParseIP>
      break;
 8009fde:	e014      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f7ff fe6c 	bl	8009cc0 <ParseNumber>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8009ff2:	e00a      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	68b8      	ldr	r0, [r7, #8]
 8009ff8:	f7ff fe62 	bl	8009cc0 <ParseNumber>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800a006:	e000      	b.n	800a00a <AT_ParseConnSettings+0x12a>

    default:
      break;
 800a008:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800a00a:	490c      	ldr	r1, [pc, #48]	; (800a03c <AT_ParseConnSettings+0x15c>)
 800a00c:	2000      	movs	r0, #0
 800a00e:	f009 f9a9 	bl	8013364 <strtok>
 800a012:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d007      	beq.n	800a02a <AT_ParseConnSettings+0x14a>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b2c      	cmp	r3, #44	; 0x2c
 800a022:	d102      	bne.n	800a02a <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	3301      	adds	r3, #1
 800a028:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f47f af66 	bne.w	8009efe <AT_ParseConnSettings+0x1e>
    }
  }
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	0801704c 	.word	0x0801704c

0800a040 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3302      	adds	r3, #2
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b31      	cmp	r3, #49	; 0x31
 800a052:	bf0c      	ite	eq
 800a054:	2301      	moveq	r3, #1
 800a056:	2300      	movne	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	701a      	strb	r2, [r3, #0]
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a086:	68b8      	ldr	r0, [r7, #8]
 800a088:	f7f6 f8f2 	bl	8000270 <strlen>
 800a08c:	4603      	mov	r3, r0
 800a08e:	b299      	uxth	r1, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a096:	461a      	mov	r2, r3
 800a098:	68b8      	ldr	r0, [r7, #8]
 800a09a:	47a0      	blx	r4
 800a09c:	4603      	mov	r3, r0
 800a09e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd3e      	ble.n	800a124 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a0b2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800a0be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd27      	ble.n	800a116 <AT_ExecuteCommand+0xaa>
 800a0c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a0ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a0ce:	dc22      	bgt.n	800a116 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800a0d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a0d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a0d8:	d105      	bne.n	800a0e6 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800a0da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800a0e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800a0f2:	490f      	ldr	r1, [pc, #60]	; (800a130 <AT_ExecuteCommand+0xc4>)
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f009 f991 	bl	801341c <strstr>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	e010      	b.n	800a126 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800a104:	490b      	ldr	r1, [pc, #44]	; (800a134 <AT_ExecuteCommand+0xc8>)
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f009 f988 	bl	801341c <strstr>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a112:	2305      	movs	r3, #5
 800a114:	e007      	b.n	800a126 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a116:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a11a:	f113 0f04 	cmn.w	r3, #4
 800a11e:	d101      	bne.n	800a124 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800a120:	2306      	movs	r3, #6
 800a122:	e000      	b.n	800a126 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a124:	2304      	movs	r3, #4
}
 800a126:	4618      	mov	r0, r3
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd90      	pop	{r4, r7, pc}
 800a12e:	bf00      	nop
 800a130:	08017060 	.word	0x08017060
 800a134:	0801706c 	.word	0x0801706c

0800a138 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800a152:	68b8      	ldr	r0, [r7, #8]
 800a154:	f7f6 f88c 	bl	8000270 <strlen>
 800a158:	4603      	mov	r3, r0
 800a15a:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800a15c:	8a7b      	ldrh	r3, [r7, #18]
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <AT_RequestSendData+0x32>
 800a166:	2302      	movs	r3, #2
 800a168:	e053      	b.n	800a212 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a176:	8a79      	ldrh	r1, [r7, #18]
 800a178:	68b8      	ldr	r0, [r7, #8]
 800a17a:	4798      	blx	r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800a180:	8a3a      	ldrh	r2, [r7, #16]
 800a182:	8a7b      	ldrh	r3, [r7, #18]
 800a184:	429a      	cmp	r2, r3
 800a186:	d143      	bne.n	800a210 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a194:	8879      	ldrh	r1, [r7, #2]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800a19e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1a2:	887b      	ldrh	r3, [r7, #2]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d131      	bne.n	800a20c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6a38      	ldr	r0, [r7, #32]
 800a1b8:	4798      	blx	r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800a1be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd19      	ble.n	800a1fa <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800a1c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1ca:	6a3a      	ldr	r2, [r7, #32]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800a1d2:	4912      	ldr	r1, [pc, #72]	; (800a21c <AT_RequestSendData+0xe4>)
 800a1d4:	6a38      	ldr	r0, [r7, #32]
 800a1d6:	f009 f921 	bl	801341c <strstr>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e016      	b.n	800a212 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800a1e4:	490e      	ldr	r1, [pc, #56]	; (800a220 <AT_RequestSendData+0xe8>)
 800a1e6:	6a38      	ldr	r0, [r7, #32]
 800a1e8:	f009 f918 	bl	801341c <strstr>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a1f2:	2305      	movs	r3, #5
 800a1f4:	e00d      	b.n	800a212 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e00b      	b.n	800a212 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a1fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1fe:	f113 0f04 	cmn.w	r3, #4
 800a202:	d101      	bne.n	800a208 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800a204:	2306      	movs	r3, #6
 800a206:	e004      	b.n	800a212 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800a208:	2302      	movs	r3, #2
 800a20a:	e002      	b.n	800a212 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800a20c:	2302      	movs	r3, #2
 800a20e:	e000      	b.n	800a212 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800a210:	2304      	movs	r3, #4
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	08017060 	.word	0x08017060
 800a220:	0801706c 	.word	0x0801706c

0800a224 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a238:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a240:	68b8      	ldr	r0, [r7, #8]
 800a242:	f7f6 f815 	bl	8000270 <strlen>
 800a246:	4603      	mov	r3, r0
 800a248:	b299      	uxth	r1, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a250:	461a      	mov	r2, r3
 800a252:	68b8      	ldr	r0, [r7, #8]
 800a254:	47a0      	blx	r4
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dd6f      	ble.n	800a33c <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a268:	2100      	movs	r1, #0
 800a26a:	6938      	ldr	r0, [r7, #16]
 800a26c:	4798      	blx	r3
 800a26e:	4603      	mov	r3, r0
 800a270:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b0d      	cmp	r3, #13
 800a278:	d104      	bne.n	800a284 <AT_RequestReceiveData+0x60>
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	3301      	adds	r3, #1
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b0a      	cmp	r3, #10
 800a282:	d001      	beq.n	800a288 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a284:	2304      	movs	r3, #4
 800a286:	e05a      	b.n	800a33e <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3b02      	subs	r3, #2
 800a28c:	617b      	str	r3, [r7, #20]
    p+=2;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3302      	adds	r3, #2
 800a292:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b07      	cmp	r3, #7
 800a298:	d94a      	bls.n	800a330 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a29a:	e002      	b.n	800a2a2 <AT_RequestReceiveData+0x7e>
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d006      	beq.n	800a2b6 <AT_RequestReceiveData+0x92>
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b15      	cmp	r3, #21
 800a2b4:	d0f2      	beq.n	800a29c <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	2200      	movs	r2, #0
 800a2be:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	3b08      	subs	r3, #8
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	491f      	ldr	r1, [pc, #124]	; (800a348 <AT_RequestReceiveData+0x124>)
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f009 f8a6 	bl	801341c <strstr>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d016      	beq.n	800a304 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	3b08      	subs	r3, #8
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	887a      	ldrh	r2, [r7, #2]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d202      	bcs.n	800a2f2 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	887a      	ldrh	r2, [r7, #2]
 800a2f0:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	6939      	ldr	r1, [r7, #16]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f009 f91b 	bl	8013536 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	e01c      	b.n	800a33e <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	3b04      	subs	r3, #4
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4413      	add	r3, r2
 800a30c:	2204      	movs	r2, #4
 800a30e:	490f      	ldr	r1, [pc, #60]	; (800a34c <AT_RequestReceiveData+0x128>)
 800a310:	4618      	mov	r0, r3
 800a312:	f008 ffcf 	bl	80132b4 <memcmp>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d104      	bne.n	800a326 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	2200      	movs	r2, #0
 800a320:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a322:	2305      	movs	r3, #5
 800a324:	e00b      	b.n	800a33e <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	2200      	movs	r2, #0
 800a32a:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a32c:	2305      	movs	r3, #5
 800a32e:	e006      	b.n	800a33e <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f113 0f04 	cmn.w	r3, #4
 800a336:	d101      	bne.n	800a33c <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a338:	2306      	movs	r3, #6
 800a33a:	e000      	b.n	800a33e <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a33c:	2304      	movs	r3, #4
}
 800a33e:	4618      	mov	r0, r3
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	bd90      	pop	{r4, r7, pc}
 800a346:	bf00      	nop
 800a348:	08017060 	.word	0x08017060
 800a34c:	08017074 	.word	0x08017074

0800a350 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a358:	2302      	movs	r3, #2
 800a35a:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f247 5230 	movw	r2, #30000	; 0x7530
 800a362:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a36c:	2000      	movs	r0, #0
 800a36e:	4798      	blx	r3
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d113      	bne.n	800a39e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a37c:	461a      	mov	r2, r3
 800a37e:	490a      	ldr	r1, [pc, #40]	; (800a3a8 <ES_WIFI_Init+0x58>)
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fe73 	bl	800a06c <AT_ExecuteCommand>
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff fd2b 	bl	8009df4 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	0801707c 	.word	0x0801707c

0800a3ac <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <ES_WIFI_RegisterBusIO+0x2c>
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <ES_WIFI_RegisterBusIO+0x2c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <ES_WIFI_RegisterBusIO+0x2c>
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <ES_WIFI_RegisterBusIO+0x2c>
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e014      	b.n	800a406 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
	...

0800a414 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	4932      	ldr	r1, [pc, #200]	; (800a4f4 <ES_WIFI_Connect+0xe0>)
 800a42c:	4618      	mov	r0, r3
 800a42e:	f008 fe49 	bl	80130c4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a43e:	461a      	mov	r2, r3
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f7ff fe13 	bl	800a06c <AT_ExecuteCommand>
 800a446:	4603      	mov	r3, r0
 800a448:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d14b      	bne.n	800a4e8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	4927      	ldr	r1, [pc, #156]	; (800a4f8 <ES_WIFI_Connect+0xe4>)
 800a45a:	4618      	mov	r0, r3
 800a45c:	f008 fe32 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a46c:	461a      	mov	r2, r3
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7ff fdfc 	bl	800a06c <AT_ExecuteCommand>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d134      	bne.n	800a4e8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	78fa      	ldrb	r2, [r7, #3]
 800a482:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a48c:	78fa      	ldrb	r2, [r7, #3]
 800a48e:	491b      	ldr	r1, [pc, #108]	; (800a4fc <ES_WIFI_Connect+0xe8>)
 800a490:	4618      	mov	r0, r3
 800a492:	f008 fe17 	bl	80130c4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fde1 	bl	800a06c <AT_ExecuteCommand>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d119      	bne.n	800a4e8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4ba:	4911      	ldr	r1, [pc, #68]	; (800a500 <ES_WIFI_Connect+0xec>)
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f008 fe01 	bl	80130c4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fdcb 	bl	800a06c <AT_ExecuteCommand>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d103      	bne.n	800a4e8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	08017094 	.word	0x08017094
 800a4f8:	0801709c 	.word	0x0801709c
 800a4fc:	080170a4 	.word	0x080170a4
 800a500:	080170ac 	.word	0x080170ac

0800a504 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a512:	4911      	ldr	r1, [pc, #68]	; (800a558 <ES_WIFI_IsConnected+0x54>)
 800a514:	4618      	mov	r0, r3
 800a516:	f008 fdd5 	bl	80130c4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a526:	461a      	mov	r2, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff fd9f 	bl	800a06c <AT_ExecuteCommand>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d108      	bne.n	800a54a <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	33d2      	adds	r3, #210	; 0xd2
 800a542:	4619      	mov	r1, r3
 800a544:	4610      	mov	r0, r2
 800a546:	f7ff fd7b 	bl	800a040 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	080170b0 	.word	0x080170b0

0800a55c <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a56a:	4910      	ldr	r1, [pc, #64]	; (800a5ac <ES_WIFI_GetNetworkSettings+0x50>)
 800a56c:	4618      	mov	r0, r3
 800a56e:	f008 fda9 	bl	80130c4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a57e:	461a      	mov	r2, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff fd73 	bl	800a06c <AT_ExecuteCommand>
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d108      	bne.n	800a5a2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	338d      	adds	r3, #141	; 0x8d
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7ff fc9f 	bl	8009ee0 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	080170b8 	.word	0x080170b8

0800a5b0 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5c0:	4912      	ldr	r1, [pc, #72]	; (800a60c <ES_WIFI_GetMACAddress+0x5c>)
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f008 fd7e 	bl	80130c4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fd48 	bl	800a06c <AT_ExecuteCommand>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10c      	bne.n	800a600 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	4908      	ldr	r1, [pc, #32]	; (800a610 <ES_WIFI_GetMACAddress+0x60>)
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f008 feb7 	bl	8013364 <strtok>
 800a5f6:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	68b8      	ldr	r0, [r7, #8]
 800a5fc:	f7ff fba4 	bl	8009d48 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	08017108 	.word	0x08017108
 800a610:	0801710c 	.word	0x0801710c

0800a614 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a614:	b590      	push	{r4, r7, lr}
 800a616:	b087      	sub	sp, #28
 800a618:	af02      	add	r7, sp, #8
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <ES_WIFI_StartClientConnection+0x1e>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d105      	bne.n	800a63e <ES_WIFI_StartClientConnection+0x2a>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	885b      	ldrh	r3, [r3, #2]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <ES_WIFI_StartClientConnection+0x2a>
 800a63a:	2302      	movs	r3, #2
 800a63c:	e0c1      	b.n	800a7c2 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	461a      	mov	r2, r3
 800a64a:	4960      	ldr	r1, [pc, #384]	; (800a7cc <ES_WIFI_StartClientConnection+0x1b8>)
 800a64c:	f008 fd3a 	bl	80130c4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a65c:	461a      	mov	r2, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff fd04 	bl	800a06c <AT_ExecuteCommand>
 800a664:	4603      	mov	r3, r0
 800a666:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d114      	bne.n	800a698 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	461a      	mov	r2, r3
 800a67a:	4955      	ldr	r1, [pc, #340]	; (800a7d0 <ES_WIFI_StartClientConnection+0x1bc>)
 800a67c:	f008 fd22 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a68c:	461a      	mov	r2, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fcec 	bl	800a06c <AT_ExecuteCommand>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d114      	bne.n	800a6c8 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	889b      	ldrh	r3, [r3, #4]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	494a      	ldr	r1, [pc, #296]	; (800a7d4 <ES_WIFI_StartClientConnection+0x1c0>)
 800a6ac:	f008 fd0a 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fcd4 	bl	800a06c <AT_ExecuteCommand>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d11c      	bne.n	800a708 <ES_WIFI_StartClientConnection+0xf4>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <ES_WIFI_StartClientConnection+0xca>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d114      	bne.n	800a708 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	885b      	ldrh	r3, [r3, #2]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	493b      	ldr	r1, [pc, #236]	; (800a7d8 <ES_WIFI_StartClientConnection+0x1c4>)
 800a6ec:	f008 fcea 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff fcb4 	bl	800a06c <AT_ExecuteCommand>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d128      	bne.n	800a760 <ES_WIFI_StartClientConnection+0x14c>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <ES_WIFI_StartClientConnection+0x10a>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d120      	bne.n	800a760 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	799b      	ldrb	r3, [r3, #6]
 800a728:	4619      	mov	r1, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	79db      	ldrb	r3, [r3, #7]
 800a72e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a734:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	9200      	str	r2, [sp, #0]
 800a73e:	4623      	mov	r3, r4
 800a740:	460a      	mov	r2, r1
 800a742:	4926      	ldr	r1, [pc, #152]	; (800a7dc <ES_WIFI_StartClientConnection+0x1c8>)
 800a744:	f008 fcbe 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a754:	461a      	mov	r2, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff fc88 	bl	800a06c <AT_ExecuteCommand>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d116      	bne.n	800a794 <ES_WIFI_StartClientConnection+0x180>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d112      	bne.n	800a794 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a774:	491a      	ldr	r1, [pc, #104]	; (800a7e0 <ES_WIFI_StartClientConnection+0x1cc>)
 800a776:	4618      	mov	r0, r3
 800a778:	f008 fca4 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a788:	461a      	mov	r2, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fc6e 	bl	800a06c <AT_ExecuteCommand>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d112      	bne.n	800a7c0 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7a0:	4910      	ldr	r1, [pc, #64]	; (800a7e4 <ES_WIFI_StartClientConnection+0x1d0>)
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f008 fc8e 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7ff fc58 	bl	800a06c <AT_ExecuteCommand>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd90      	pop	{r4, r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	08017170 	.word	0x08017170
 800a7d0:	08017178 	.word	0x08017178
 800a7d4:	08017180 	.word	0x08017180
 800a7d8:	08017188 	.word	0x08017188
 800a7dc:	08017190 	.word	0x08017190
 800a7e0:	080171a0 	.word	0x080171a0
 800a7e4:	080171a8 	.word	0x080171a8

0800a7e8 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af02      	add	r7, sp, #8
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	607a      	str	r2, [r7, #4]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	72fb      	strb	r3, [r7, #11]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a806:	2301      	movs	r3, #1
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e001      	b.n	800a810 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a810:	893b      	ldrh	r3, [r7, #8]
 800a812:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a816:	d302      	bcc.n	800a81e <ES_WIFI_SendData+0x36>
 800a818:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a81c:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	893a      	ldrh	r2, [r7, #8]
 800a822:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a82a:	7afa      	ldrb	r2, [r7, #11]
 800a82c:	4942      	ldr	r1, [pc, #264]	; (800a938 <ES_WIFI_SendData+0x150>)
 800a82e:	4618      	mov	r0, r3
 800a830:	f008 fc48 	bl	80130c4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a840:	461a      	mov	r2, r3
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fc12 	bl	800a06c <AT_ExecuteCommand>
 800a848:	4603      	mov	r3, r0
 800a84a:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a84c:	7cfb      	ldrb	r3, [r7, #19]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d15e      	bne.n	800a910 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4938      	ldr	r1, [pc, #224]	; (800a93c <ES_WIFI_SendData+0x154>)
 800a85c:	4618      	mov	r0, r3
 800a85e:	f008 fc31 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a86e:	461a      	mov	r2, r3
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7ff fbfb 	bl	800a06c <AT_ExecuteCommand>
 800a876:	4603      	mov	r3, r0
 800a878:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a87a:	7cfb      	ldrb	r3, [r7, #19]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d13d      	bne.n	800a8fc <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a886:	893a      	ldrh	r2, [r7, #8]
 800a888:	492d      	ldr	r1, [pc, #180]	; (800a940 <ES_WIFI_SendData+0x158>)
 800a88a:	4618      	mov	r0, r3
 800a88c:	f008 fc1a 	bl	80130c4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a89c:	893a      	ldrh	r2, [r7, #8]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff fc47 	bl	800a138 <AT_RequestSendData>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a8ae:	7cfb      	ldrb	r3, [r7, #19]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d119      	bne.n	800a8e8 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8ba:	4922      	ldr	r1, [pc, #136]	; (800a944 <ES_WIFI_SendData+0x15c>)
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f008 fdad 	bl	801341c <strstr>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d02c      	beq.n	800a922 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a8c8:	f640 024c 	movw	r2, #2124	; 0x84c
 800a8cc:	491e      	ldr	r1, [pc, #120]	; (800a948 <ES_WIFI_SendData+0x160>)
 800a8ce:	481f      	ldr	r0, [pc, #124]	; (800a94c <ES_WIFI_SendData+0x164>)
 800a8d0:	f008 fb56 	bl	8012f80 <iprintf>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8da:	4619      	mov	r1, r3
 800a8dc:	481c      	ldr	r0, [pc, #112]	; (800a950 <ES_WIFI_SendData+0x168>)
 800a8de:	f008 fb4f 	bl	8012f80 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	74fb      	strb	r3, [r7, #19]
 800a8e6:	e01c      	b.n	800a922 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a8e8:	f640 0252 	movw	r2, #2130	; 0x852
 800a8ec:	4916      	ldr	r1, [pc, #88]	; (800a948 <ES_WIFI_SendData+0x160>)
 800a8ee:	4817      	ldr	r0, [pc, #92]	; (800a94c <ES_WIFI_SendData+0x164>)
 800a8f0:	f008 fb46 	bl	8012f80 <iprintf>
 800a8f4:	4817      	ldr	r0, [pc, #92]	; (800a954 <ES_WIFI_SendData+0x16c>)
 800a8f6:	f008 fba9 	bl	801304c <puts>
 800a8fa:	e012      	b.n	800a922 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a8fc:	f640 0257 	movw	r2, #2135	; 0x857
 800a900:	4911      	ldr	r1, [pc, #68]	; (800a948 <ES_WIFI_SendData+0x160>)
 800a902:	4812      	ldr	r0, [pc, #72]	; (800a94c <ES_WIFI_SendData+0x164>)
 800a904:	f008 fb3c 	bl	8012f80 <iprintf>
 800a908:	4813      	ldr	r0, [pc, #76]	; (800a958 <ES_WIFI_SendData+0x170>)
 800a90a:	f008 fb9f 	bl	801304c <puts>
 800a90e:	e008      	b.n	800a922 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a910:	f640 025c 	movw	r2, #2140	; 0x85c
 800a914:	490c      	ldr	r1, [pc, #48]	; (800a948 <ES_WIFI_SendData+0x160>)
 800a916:	480d      	ldr	r0, [pc, #52]	; (800a94c <ES_WIFI_SendData+0x164>)
 800a918:	f008 fb32 	bl	8012f80 <iprintf>
 800a91c:	480f      	ldr	r0, [pc, #60]	; (800a95c <ES_WIFI_SendData+0x174>)
 800a91e:	f008 fb95 	bl	801304c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a922:	7cfb      	ldrb	r3, [r7, #19]
 800a924:	2b02      	cmp	r3, #2
 800a926:	d102      	bne.n	800a92e <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	2200      	movs	r2, #0
 800a92c:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a92e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	08017170 	.word	0x08017170
 800a93c:	08017328 	.word	0x08017328
 800a940:	08017330 	.word	0x08017330
 800a944:	0801733c 	.word	0x0801733c
 800a948:	08017200 	.word	0x08017200
 800a94c:	0801721c 	.word	0x0801721c
 800a950:	08017344 	.word	0x08017344
 800a954:	08017360 	.word	0x08017360
 800a958:	0801737c 	.word	0x0801737c
 800a95c:	08017390 	.word	0x08017390

0800a960 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af02      	add	r7, sp, #8
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	607a      	str	r2, [r7, #4]
 800a96a:	461a      	mov	r2, r3
 800a96c:	460b      	mov	r3, r1
 800a96e:	72fb      	strb	r3, [r7, #11]
 800a970:	4613      	mov	r3, r2
 800a972:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a974:	2302      	movs	r3, #2
 800a976:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d102      	bne.n	800a984 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800a97e:	2301      	movs	r3, #1
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	e001      	b.n	800a988 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800a988:	893b      	ldrh	r3, [r7, #8]
 800a98a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a98e:	f200 808b 	bhi.w	800aaa8 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a998:	7afa      	ldrb	r2, [r7, #11]
 800a99a:	4946      	ldr	r1, [pc, #280]	; (800aab4 <ES_WIFI_ReceiveData+0x154>)
 800a99c:	4618      	mov	r0, r3
 800a99e:	f008 fb91 	bl	80130c4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f7ff fb5b 	bl	800a06c <AT_ExecuteCommand>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a9ba:	7cfb      	ldrb	r3, [r7, #19]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d165      	bne.n	800aa8c <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9c6:	893a      	ldrh	r2, [r7, #8]
 800a9c8:	493b      	ldr	r1, [pc, #236]	; (800aab8 <ES_WIFI_ReceiveData+0x158>)
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f008 fb7a 	bl	80130c4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9dc:	461a      	mov	r2, r3
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7ff fb44 	bl	800a06c <AT_ExecuteCommand>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800a9e8:	7cfb      	ldrb	r3, [r7, #19]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d141      	bne.n	800aa72 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	4931      	ldr	r1, [pc, #196]	; (800aabc <ES_WIFI_ReceiveData+0x15c>)
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f008 fb63 	bl	80130c4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7ff fb2d 	bl	800a06c <AT_ExecuteCommand>
 800aa12:	4603      	mov	r3, r0
 800aa14:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800aa16:	7cfb      	ldrb	r3, [r7, #19]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d120      	bne.n	800aa5e <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800aa22:	4927      	ldr	r1, [pc, #156]	; (800aac0 <ES_WIFI_ReceiveData+0x160>)
 800aa24:	4618      	mov	r0, r3
 800aa26:	f008 fb4d 	bl	80130c4 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800aa30:	893a      	ldrh	r2, [r7, #8]
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	4613      	mov	r3, r2
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff fbf2 	bl	800a224 <AT_RequestReceiveData>
 800aa40:	4603      	mov	r3, r0
 800aa42:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800aa44:	7cfb      	ldrb	r3, [r7, #19]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d02e      	beq.n	800aaa8 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800aa4a:	f640 02ed 	movw	r2, #2285	; 0x8ed
 800aa4e:	491d      	ldr	r1, [pc, #116]	; (800aac4 <ES_WIFI_ReceiveData+0x164>)
 800aa50:	481d      	ldr	r0, [pc, #116]	; (800aac8 <ES_WIFI_ReceiveData+0x168>)
 800aa52:	f008 fa95 	bl	8012f80 <iprintf>
 800aa56:	481d      	ldr	r0, [pc, #116]	; (800aacc <ES_WIFI_ReceiveData+0x16c>)
 800aa58:	f008 faf8 	bl	801304c <puts>
 800aa5c:	e024      	b.n	800aaa8 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800aa5e:	f640 02f2 	movw	r2, #2290	; 0x8f2
 800aa62:	4918      	ldr	r1, [pc, #96]	; (800aac4 <ES_WIFI_ReceiveData+0x164>)
 800aa64:	4818      	ldr	r0, [pc, #96]	; (800aac8 <ES_WIFI_ReceiveData+0x168>)
 800aa66:	f008 fa8b 	bl	8012f80 <iprintf>
 800aa6a:	4819      	ldr	r0, [pc, #100]	; (800aad0 <ES_WIFI_ReceiveData+0x170>)
 800aa6c:	f008 faee 	bl	801304c <puts>
 800aa70:	e01a      	b.n	800aaa8 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800aa72:	f640 02f7 	movw	r2, #2295	; 0x8f7
 800aa76:	4913      	ldr	r1, [pc, #76]	; (800aac4 <ES_WIFI_ReceiveData+0x164>)
 800aa78:	4813      	ldr	r0, [pc, #76]	; (800aac8 <ES_WIFI_ReceiveData+0x168>)
 800aa7a:	f008 fa81 	bl	8012f80 <iprintf>
 800aa7e:	4815      	ldr	r0, [pc, #84]	; (800aad4 <ES_WIFI_ReceiveData+0x174>)
 800aa80:	f008 fae4 	bl	801304c <puts>
        *Receivedlen = 0;
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	2200      	movs	r2, #0
 800aa88:	801a      	strh	r2, [r3, #0]
 800aa8a:	e00d      	b.n	800aaa8 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800aa8c:	f640 02fd 	movw	r2, #2301	; 0x8fd
 800aa90:	490c      	ldr	r1, [pc, #48]	; (800aac4 <ES_WIFI_ReceiveData+0x164>)
 800aa92:	480d      	ldr	r0, [pc, #52]	; (800aac8 <ES_WIFI_ReceiveData+0x168>)
 800aa94:	f008 fa74 	bl	8012f80 <iprintf>
 800aa98:	480f      	ldr	r0, [pc, #60]	; (800aad8 <ES_WIFI_ReceiveData+0x178>)
 800aa9a:	f008 fad7 	bl	801304c <puts>
      issue15++;
 800aa9e:	4b0f      	ldr	r3, [pc, #60]	; (800aadc <ES_WIFI_ReceiveData+0x17c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	4a0d      	ldr	r2, [pc, #52]	; (800aadc <ES_WIFI_ReceiveData+0x17c>)
 800aaa6:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800aaa8:	7cfb      	ldrb	r3, [r7, #19]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	08017170 	.word	0x08017170
 800aab8:	080173b4 	.word	0x080173b4
 800aabc:	080173bc 	.word	0x080173bc
 800aac0:	080173c4 	.word	0x080173c4
 800aac4:	08017200 	.word	0x08017200
 800aac8:	0801721c 	.word	0x0801721c
 800aacc:	080173c8 	.word	0x080173c8
 800aad0:	080173e8 	.word	0x080173e8
 800aad4:	08017400 	.word	0x08017400
 800aad8:	08017420 	.word	0x08017420
 800aadc:	20001050 	.word	0x20001050

0800aae0 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08c      	sub	sp, #48	; 0x30
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800aae8:	4b57      	ldr	r3, [pc, #348]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800aaea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaec:	4a56      	ldr	r2, [pc, #344]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800aaee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf2:	6593      	str	r3, [r2, #88]	; 0x58
 800aaf4:	4b54      	ldr	r3, [pc, #336]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800aaf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab00:	4b51      	ldr	r3, [pc, #324]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab04:	4a50      	ldr	r2, [pc, #320]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab06:	f043 0302 	orr.w	r3, r3, #2
 800ab0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab0c:	4b4e      	ldr	r3, [pc, #312]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab18:	4b4b      	ldr	r3, [pc, #300]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1c:	4a4a      	ldr	r2, [pc, #296]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab1e:	f043 0304 	orr.w	r3, r3, #4
 800ab22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab24:	4b48      	ldr	r3, [pc, #288]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	613b      	str	r3, [r7, #16]
 800ab2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ab30:	4b45      	ldr	r3, [pc, #276]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab34:	4a44      	ldr	r2, [pc, #272]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab36:	f043 0310 	orr.w	r3, r3, #16
 800ab3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab3c:	4b42      	ldr	r3, [pc, #264]	; (800ac48 <SPI_WIFI_MspInit+0x168>)
 800ab3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab40:	f003 0310 	and.w	r3, r3, #16
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ab4e:	483f      	ldr	r0, [pc, #252]	; (800ac4c <SPI_WIFI_MspInit+0x16c>)
 800ab50:	f7f9 f8a6 	bl	8003ca0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800ab54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab58:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800ab62:	2300      	movs	r3, #0
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800ab66:	f107 031c 	add.w	r3, r7, #28
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4837      	ldr	r0, [pc, #220]	; (800ac4c <SPI_WIFI_MspInit+0x16c>)
 800ab6e:	f7f8 fde1 	bl	8003734 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800ab72:	2302      	movs	r3, #2
 800ab74:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800ab76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ab7a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800ab80:	2300      	movs	r3, #0
 800ab82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800ab84:	f107 031c 	add.w	r3, r7, #28
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4831      	ldr	r0, [pc, #196]	; (800ac50 <SPI_WIFI_MspInit+0x170>)
 800ab8c:	f7f8 fdd2 	bl	8003734 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800ab90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab94:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800ab96:	2301      	movs	r3, #1
 800ab98:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800aba6:	f107 031c 	add.w	r3, r7, #28
 800abaa:	4619      	mov	r1, r3
 800abac:	4828      	ldr	r0, [pc, #160]	; (800ac50 <SPI_WIFI_MspInit+0x170>)
 800abae:	f7f8 fdc1 	bl	8003734 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800abb2:	2201      	movs	r2, #1
 800abb4:	2101      	movs	r1, #1
 800abb6:	4826      	ldr	r0, [pc, #152]	; (800ac50 <SPI_WIFI_MspInit+0x170>)
 800abb8:	f7f9 f872 	bl	8003ca0 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800abbc:	2301      	movs	r3, #1
 800abbe:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800abc0:	2301      	movs	r3, #1
 800abc2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800abc4:	2300      	movs	r3, #0
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800abc8:	2301      	movs	r3, #1
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800abcc:	f107 031c 	add.w	r3, r7, #28
 800abd0:	4619      	mov	r1, r3
 800abd2:	481f      	ldr	r0, [pc, #124]	; (800ac50 <SPI_WIFI_MspInit+0x170>)
 800abd4:	f7f8 fdae 	bl	8003734 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800abd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abdc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800abde:	2302      	movs	r3, #2
 800abe0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800abe6:	2301      	movs	r3, #1
 800abe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800abea:	2306      	movs	r3, #6
 800abec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800abee:	f107 031c 	add.w	r3, r7, #28
 800abf2:	4619      	mov	r1, r3
 800abf4:	4817      	ldr	r0, [pc, #92]	; (800ac54 <SPI_WIFI_MspInit+0x174>)
 800abf6:	f7f8 fd9d 	bl	8003734 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800abfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abfe:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800ac00:	2302      	movs	r3, #2
 800ac02:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800ac0c:	2306      	movs	r3, #6
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800ac10:	f107 031c 	add.w	r3, r7, #28
 800ac14:	4619      	mov	r1, r3
 800ac16:	480f      	ldr	r0, [pc, #60]	; (800ac54 <SPI_WIFI_MspInit+0x174>)
 800ac18:	f7f8 fd8c 	bl	8003734 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800ac1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac20:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800ac22:	2302      	movs	r3, #2
 800ac24:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800ac26:	2301      	movs	r3, #1
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800ac2e:	2306      	movs	r3, #6
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800ac32:	f107 031c 	add.w	r3, r7, #28
 800ac36:	4619      	mov	r1, r3
 800ac38:	4806      	ldr	r0, [pc, #24]	; (800ac54 <SPI_WIFI_MspInit+0x174>)
 800ac3a:	f7f8 fd7b 	bl	8003734 <HAL_GPIO_Init>
}
 800ac3e:	bf00      	nop
 800ac40:	3730      	adds	r7, #48	; 0x30
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	40021000 	.word	0x40021000
 800ac4c:	48000400 	.word	0x48000400
 800ac50:	48001000 	.word	0x48001000
 800ac54:	48000800 	.word	0x48000800

0800ac58 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800ac66:	88fb      	ldrh	r3, [r7, #6]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d145      	bne.n	800acf8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac6e:	4a28      	ldr	r2, [pc, #160]	; (800ad10 <SPI_WIFI_Init+0xb8>)
 800ac70:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800ac72:	4826      	ldr	r0, [pc, #152]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac74:	f7ff ff34 	bl	800aae0 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800ac78:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ac7e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800ac80:	4b22      	ldr	r3, [pc, #136]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac88:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800ac8c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800ac8e:	4b1f      	ldr	r3, [pc, #124]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800ac94:	4b1d      	ldr	r3, [pc, #116]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800ac9a:	4b1c      	ldr	r3, [pc, #112]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800ac9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aca0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800aca2:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800aca4:	2210      	movs	r2, #16
 800aca6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800aca8:	4b18      	ldr	r3, [pc, #96]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800acaa:	2200      	movs	r2, #0
 800acac:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800acae:	4b17      	ldr	r3, [pc, #92]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800acb4:	4b15      	ldr	r3, [pc, #84]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800acba:	4b14      	ldr	r3, [pc, #80]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800acc0:	4812      	ldr	r0, [pc, #72]	; (800ad0c <SPI_WIFI_Init+0xb4>)
 800acc2:	f7fb fedf 	bl	8006a84 <HAL_SPI_Init>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800accc:	f04f 33ff 	mov.w	r3, #4294967295
 800acd0:	e018      	b.n	800ad04 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800acd2:	2200      	movs	r2, #0
 800acd4:	2100      	movs	r1, #0
 800acd6:	2007      	movs	r0, #7
 800acd8:	f7f8 fb99 	bl	800340e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800acdc:	2007      	movs	r0, #7
 800acde:	f7f8 fbb2 	bl	8003446 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800ace2:	2200      	movs	r2, #0
 800ace4:	2100      	movs	r1, #0
 800ace6:	2033      	movs	r0, #51	; 0x33
 800ace8:	f7f8 fb91 	bl	800340e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800acec:	2033      	movs	r0, #51	; 0x33
 800acee:	f7f8 fbaa 	bl	8003446 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800acf2:	200a      	movs	r0, #10
 800acf4:	f000 f9fe 	bl	800b0f4 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800acf8:	f000 f80c 	bl	800ad14 <SPI_WIFI_ResetModule>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]

  return rc;
 800ad00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20001054 	.word	0x20001054
 800ad10:	40003c00 	.word	0x40003c00

0800ad14 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800ad1a:	f7f8 fa49 	bl	80031b0 <HAL_GetTick>
 800ad1e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800ad24:	2200      	movs	r2, #0
 800ad26:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad2a:	4830      	ldr	r0, [pc, #192]	; (800adec <SPI_WIFI_ResetModule+0xd8>)
 800ad2c:	f7f8 ffb8 	bl	8003ca0 <HAL_GPIO_WritePin>
 800ad30:	200a      	movs	r0, #10
 800ad32:	f7f8 fa49 	bl	80031c8 <HAL_Delay>
 800ad36:	2201      	movs	r2, #1
 800ad38:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad3c:	482b      	ldr	r0, [pc, #172]	; (800adec <SPI_WIFI_ResetModule+0xd8>)
 800ad3e:	f7f8 ffaf 	bl	8003ca0 <HAL_GPIO_WritePin>
 800ad42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad46:	f7f8 fa3f 	bl	80031c8 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	4827      	ldr	r0, [pc, #156]	; (800adec <SPI_WIFI_ResetModule+0xd8>)
 800ad50:	f7f8 ffa6 	bl	8003ca0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ad54:	200f      	movs	r0, #15
 800ad56:	f000 f9cd 	bl	800b0f4 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800ad5a:	e020      	b.n	800ad9e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	463a      	mov	r2, r7
 800ad60:	18d1      	adds	r1, r2, r3
 800ad62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad66:	2201      	movs	r2, #1
 800ad68:	4821      	ldr	r0, [pc, #132]	; (800adf0 <SPI_WIFI_ResetModule+0xdc>)
 800ad6a:	f7fb ff56 	bl	8006c1a <HAL_SPI_Receive>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	3302      	adds	r3, #2
 800ad76:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800ad78:	f7f8 fa1a 	bl	80031b0 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad86:	d202      	bcs.n	800ad8e <SPI_WIFI_ResetModule+0x7a>
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d007      	beq.n	800ad9e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800ad8e:	2201      	movs	r2, #1
 800ad90:	2101      	movs	r1, #1
 800ad92:	4816      	ldr	r0, [pc, #88]	; (800adec <SPI_WIFI_ResetModule+0xd8>)
 800ad94:	f7f8 ff84 	bl	8003ca0 <HAL_GPIO_WritePin>
      return -1;
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9c:	e021      	b.n	800ade2 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800ad9e:	2102      	movs	r1, #2
 800ada0:	4812      	ldr	r0, [pc, #72]	; (800adec <SPI_WIFI_ResetModule+0xd8>)
 800ada2:	f7f8 ff65 	bl	8003c70 <HAL_GPIO_ReadPin>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d0d7      	beq.n	800ad5c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800adac:	2201      	movs	r2, #1
 800adae:	2101      	movs	r1, #1
 800adb0:	480e      	ldr	r0, [pc, #56]	; (800adec <SPI_WIFI_ResetModule+0xd8>)
 800adb2:	f7f8 ff75 	bl	8003ca0 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800adb6:	783b      	ldrb	r3, [r7, #0]
 800adb8:	2b15      	cmp	r3, #21
 800adba:	d10e      	bne.n	800adda <SPI_WIFI_ResetModule+0xc6>
 800adbc:	787b      	ldrb	r3, [r7, #1]
 800adbe:	2b15      	cmp	r3, #21
 800adc0:	d10b      	bne.n	800adda <SPI_WIFI_ResetModule+0xc6>
 800adc2:	78bb      	ldrb	r3, [r7, #2]
 800adc4:	2b0d      	cmp	r3, #13
 800adc6:	d108      	bne.n	800adda <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800adc8:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800adca:	2b0a      	cmp	r3, #10
 800adcc:	d105      	bne.n	800adda <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800adce:	793b      	ldrb	r3, [r7, #4]
 800add0:	2b3e      	cmp	r3, #62	; 0x3e
 800add2:	d102      	bne.n	800adda <SPI_WIFI_ResetModule+0xc6>
 800add4:	797b      	ldrb	r3, [r7, #5]
 800add6:	2b20      	cmp	r3, #32
 800add8:	d002      	beq.n	800ade0 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	e000      	b.n	800ade2 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	48001000 	.word	0x48001000
 800adf0:	20001054 	.word	0x20001054

0800adf4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800adf8:	4802      	ldr	r0, [pc, #8]	; (800ae04 <SPI_WIFI_DeInit+0x10>)
 800adfa:	f7fb fee6 	bl	8006bca <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	20001054 	.word	0x20001054

0800ae08 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800ae10:	f7f8 f9ce 	bl	80031b0 <HAL_GetTick>
 800ae14:	4603      	mov	r3, r0
 800ae16:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800ae18:	e00a      	b.n	800ae30 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ae1a:	f7f8 f9c9 	bl	80031b0 <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	1ad2      	subs	r2, r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d902      	bls.n	800ae30 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2e:	e007      	b.n	800ae40 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800ae30:	2102      	movs	r1, #2
 800ae32:	4805      	ldr	r0, [pc, #20]	; (800ae48 <wait_cmddata_rdy_high+0x40>)
 800ae34:	f7f8 ff1c 	bl	8003c70 <HAL_GPIO_ReadPin>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d1ed      	bne.n	800ae1a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	48001000 	.word	0x48001000

0800ae4c <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ae54:	f7f8 f9ac 	bl	80031b0 <HAL_GetTick>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800ae5c:	e00a      	b.n	800ae74 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ae5e:	f7f8 f9a7 	bl	80031b0 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	1ad2      	subs	r2, r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d902      	bls.n	800ae74 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800ae6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae72:	e004      	b.n	800ae7e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800ae74:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <wait_cmddata_rdy_rising_event+0x3c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d0f0      	beq.n	800ae5e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800ae7c:	2300      	movs	r3, #0
#endif
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200010c0 	.word	0x200010c0

0800ae8c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ae94:	f7f8 f98c 	bl	80031b0 <HAL_GetTick>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800ae9c:	e00a      	b.n	800aeb4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ae9e:	f7f8 f987 	bl	80031b0 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	1ad2      	subs	r2, r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d902      	bls.n	800aeb4 <wait_spi_rx_event+0x28>
    {
      return -1;
 800aeae:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb2:	e004      	b.n	800aebe <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800aeb4:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <wait_spi_rx_event+0x3c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d0f0      	beq.n	800ae9e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800aebc:	2300      	movs	r3, #0
#endif
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200010b8 	.word	0x200010b8

0800aecc <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800aed4:	f7f8 f96c 	bl	80031b0 <HAL_GetTick>
 800aed8:	4603      	mov	r3, r0
 800aeda:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800aedc:	e00a      	b.n	800aef4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800aede:	f7f8 f967 	bl	80031b0 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	1ad2      	subs	r2, r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d902      	bls.n	800aef4 <wait_spi_tx_event+0x28>
    {
      return -1;
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295
 800aef2:	e004      	b.n	800aefe <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <wait_spi_tx_event+0x3c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d0f0      	beq.n	800aede <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800aefc:	2300      	movs	r3, #0
#endif
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	200010bc 	.word	0x200010bc

0800af0c <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	460b      	mov	r3, r1
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800af1e:	2201      	movs	r2, #1
 800af20:	2101      	movs	r1, #1
 800af22:	4834      	ldr	r0, [pc, #208]	; (800aff4 <SPI_WIFI_ReceiveData+0xe8>)
 800af24:	f7f8 febc 	bl	8003ca0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800af28:	2003      	movs	r0, #3
 800af2a:	f000 f8e3 	bl	800b0f4 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff ff8b 	bl	800ae4c <wait_cmddata_rdy_rising_event>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	da02      	bge.n	800af42 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800af3c:	f06f 0302 	mvn.w	r3, #2
 800af40:	e054      	b.n	800afec <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800af42:	2200      	movs	r2, #0
 800af44:	2101      	movs	r1, #1
 800af46:	482b      	ldr	r0, [pc, #172]	; (800aff4 <SPI_WIFI_ReceiveData+0xe8>)
 800af48:	f7f8 feaa 	bl	8003ca0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800af4c:	200f      	movs	r0, #15
 800af4e:	f000 f8d1 	bl	800b0f4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800af52:	e03d      	b.n	800afd0 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800af54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800af58:	897b      	ldrh	r3, [r7, #10]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	db02      	blt.n	800af64 <SPI_WIFI_ReceiveData+0x58>
 800af5e:	897b      	ldrh	r3, [r7, #10]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d13c      	bne.n	800afde <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800af64:	4b24      	ldr	r3, [pc, #144]	; (800aff8 <SPI_WIFI_ReceiveData+0xec>)
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800af6a:	f107 0314 	add.w	r3, r7, #20
 800af6e:	2201      	movs	r2, #1
 800af70:	4619      	mov	r1, r3
 800af72:	4822      	ldr	r0, [pc, #136]	; (800affc <SPI_WIFI_ReceiveData+0xf0>)
 800af74:	f7fc fa36 	bl	80073e4 <HAL_SPI_Receive_IT>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800af7e:	2201      	movs	r2, #1
 800af80:	2101      	movs	r1, #1
 800af82:	481c      	ldr	r0, [pc, #112]	; (800aff4 <SPI_WIFI_ReceiveData+0xe8>)
 800af84:	f7f8 fe8c 	bl	8003ca0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800af88:	f04f 33ff 	mov.w	r3, #4294967295
 800af8c:	e02e      	b.n	800afec <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff ff7b 	bl	800ae8c <wait_spi_rx_event>

      pData[0] = tmp[0];
 800af96:	7d3a      	ldrb	r2, [r7, #20]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	7d7a      	ldrb	r2, [r7, #21]
 800afa2:	701a      	strb	r2, [r3, #0]
      length += 2;
 800afa4:	8afb      	ldrh	r3, [r7, #22]
 800afa6:	3302      	adds	r3, #2
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3302      	adds	r3, #2
 800afb0:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800afb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800afb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800afba:	db09      	blt.n	800afd0 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800afbc:	2201      	movs	r2, #1
 800afbe:	2101      	movs	r1, #1
 800afc0:	480c      	ldr	r0, [pc, #48]	; (800aff4 <SPI_WIFI_ReceiveData+0xe8>)
 800afc2:	f7f8 fe6d 	bl	8003ca0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800afc6:	f7ff fea5 	bl	800ad14 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800afca:	f06f 0303 	mvn.w	r3, #3
 800afce:	e00d      	b.n	800afec <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800afd0:	2102      	movs	r1, #2
 800afd2:	4808      	ldr	r0, [pc, #32]	; (800aff4 <SPI_WIFI_ReceiveData+0xe8>)
 800afd4:	f7f8 fe4c 	bl	8003c70 <HAL_GPIO_ReadPin>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d0ba      	beq.n	800af54 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800afde:	2201      	movs	r2, #1
 800afe0:	2101      	movs	r1, #1
 800afe2:	4804      	ldr	r0, [pc, #16]	; (800aff4 <SPI_WIFI_ReceiveData+0xe8>)
 800afe4:	f7f8 fe5c 	bl	8003ca0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800afe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	48001000 	.word	0x48001000
 800aff8:	200010b8 	.word	0x200010b8
 800affc:	20001054 	.word	0x20001054

0800b000 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	460b      	mov	r3, r1
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fef9 	bl	800ae08 <wait_cmddata_rdy_high>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	da02      	bge.n	800b022 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295
 800b020:	e04f      	b.n	800b0c2 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800b022:	4b2a      	ldr	r3, [pc, #168]	; (800b0cc <SPI_WIFI_SendData+0xcc>)
 800b024:	2201      	movs	r2, #1
 800b026:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800b028:	2200      	movs	r2, #0
 800b02a:	2101      	movs	r1, #1
 800b02c:	4828      	ldr	r0, [pc, #160]	; (800b0d0 <SPI_WIFI_SendData+0xd0>)
 800b02e:	f7f8 fe37 	bl	8003ca0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800b032:	200f      	movs	r0, #15
 800b034:	f000 f85e 	bl	800b0f4 <SPI_WIFI_DelayUs>
  if (len > 1)
 800b038:	897b      	ldrh	r3, [r7, #10]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d919      	bls.n	800b072 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800b03e:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <SPI_WIFI_SendData+0xd4>)
 800b040:	2201      	movs	r2, #1
 800b042:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800b044:	897b      	ldrh	r3, [r7, #10]
 800b046:	085b      	lsrs	r3, r3, #1
 800b048:	b29b      	uxth	r3, r3
 800b04a:	461a      	mov	r2, r3
 800b04c:	68f9      	ldr	r1, [r7, #12]
 800b04e:	4822      	ldr	r0, [pc, #136]	; (800b0d8 <SPI_WIFI_SendData+0xd8>)
 800b050:	f7fc f93c 	bl	80072cc <HAL_SPI_Transmit_IT>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800b05a:	2201      	movs	r2, #1
 800b05c:	2101      	movs	r1, #1
 800b05e:	481c      	ldr	r0, [pc, #112]	; (800b0d0 <SPI_WIFI_SendData+0xd0>)
 800b060:	f7f8 fe1e 	bl	8003ca0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800b064:	f04f 33ff 	mov.w	r3, #4294967295
 800b068:	e02b      	b.n	800b0c2 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff ff2d 	bl	800aecc <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800b072:	897b      	ldrh	r3, [r7, #10]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d020      	beq.n	800b0be <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800b07c:	897b      	ldrh	r3, [r7, #10]
 800b07e:	3b01      	subs	r3, #1
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	4413      	add	r3, r2
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800b088:	230a      	movs	r3, #10
 800b08a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800b08c:	4b11      	ldr	r3, [pc, #68]	; (800b0d4 <SPI_WIFI_SendData+0xd4>)
 800b08e:	2201      	movs	r2, #1
 800b090:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800b092:	f107 0314 	add.w	r3, r7, #20
 800b096:	2201      	movs	r2, #1
 800b098:	4619      	mov	r1, r3
 800b09a:	480f      	ldr	r0, [pc, #60]	; (800b0d8 <SPI_WIFI_SendData+0xd8>)
 800b09c:	f7fc f916 	bl	80072cc <HAL_SPI_Transmit_IT>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d007      	beq.n	800b0b6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	4809      	ldr	r0, [pc, #36]	; (800b0d0 <SPI_WIFI_SendData+0xd0>)
 800b0ac:	f7f8 fdf8 	bl	8003ca0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b4:	e005      	b.n	800b0c2 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff ff07 	bl	800aecc <wait_spi_tx_event>
    
  }
  return len;
 800b0be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	200010c0 	.word	0x200010c0
 800b0d0:	48001000 	.word	0x48001000
 800b0d4:	200010bc 	.word	0x200010bc
 800b0d8:	20001054 	.word	0x20001054

0800b0dc <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f7f8 f86f 	bl	80031c8 <HAL_Delay>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800b104:	4b20      	ldr	r3, [pc, #128]	; (800b188 <SPI_WIFI_DelayUs+0x94>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d122      	bne.n	800b152 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800b10c:	4b1f      	ldr	r3, [pc, #124]	; (800b18c <SPI_WIFI_DelayUs+0x98>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a1f      	ldr	r2, [pc, #124]	; (800b190 <SPI_WIFI_DelayUs+0x9c>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	099b      	lsrs	r3, r3, #6
 800b118:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800b122:	f7f8 f845 	bl	80031b0 <HAL_GetTick>
 800b126:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800b128:	e002      	b.n	800b130 <SPI_WIFI_DelayUs+0x3c>
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	60bb      	str	r3, [r7, #8]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f9      	bne.n	800b12a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800b136:	f7f8 f83b 	bl	80031b0 <HAL_GetTick>
 800b13a:	4602      	mov	r2, r0
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	4a11      	ldr	r2, [pc, #68]	; (800b188 <SPI_WIFI_DelayUs+0x94>)
 800b142:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800b144:	4b10      	ldr	r3, [pc, #64]	; (800b188 <SPI_WIFI_DelayUs+0x94>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <SPI_WIFI_DelayUs+0x5e>
 800b14c:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <SPI_WIFI_DelayUs+0x94>)
 800b14e:	2201      	movs	r2, #1
 800b150:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800b152:	4b0e      	ldr	r3, [pc, #56]	; (800b18c <SPI_WIFI_DelayUs+0x98>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a0f      	ldr	r2, [pc, #60]	; (800b194 <SPI_WIFI_DelayUs+0xa0>)
 800b158:	fba2 2303 	umull	r2, r3, r2, r3
 800b15c:	0c9a      	lsrs	r2, r3, #18
 800b15e:	4b0a      	ldr	r3, [pc, #40]	; (800b188 <SPI_WIFI_DelayUs+0x94>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	fb02 f303 	mul.w	r3, r2, r3
 800b170:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800b172:	e002      	b.n	800b17a <SPI_WIFI_DelayUs+0x86>
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3b01      	subs	r3, #1
 800b178:	60bb      	str	r3, [r7, #8]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1f9      	bne.n	800b174 <SPI_WIFI_DelayUs+0x80>
  return;
 800b180:	bf00      	nop
}
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	200010c4 	.word	0x200010c4
 800b18c:	200000ac 	.word	0x200000ac
 800b190:	10624dd3 	.word	0x10624dd3
 800b194:	431bde83 	.word	0x431bde83

0800b198 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <HAL_SPI_RxCpltCallback+0x24>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800b1a8:	4b04      	ldr	r3, [pc, #16]	; (800b1bc <HAL_SPI_RxCpltCallback+0x24>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	200010b8 	.word	0x200010b8

0800b1c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800b1c8:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <HAL_SPI_TxCpltCallback+0x24>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <HAL_SPI_TxCpltCallback+0x24>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
  }
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	200010bc 	.word	0x200010bc

0800b1e8 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <SPI_WIFI_ISR+0x1c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d102      	bne.n	800b1fa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800b1f4:	4b03      	ldr	r3, [pc, #12]	; (800b204 <SPI_WIFI_ISR+0x1c>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]
   }
}
 800b1fa:	bf00      	nop
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	200010c0 	.word	0x200010c0

0800b208 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800b212:	4b0d      	ldr	r3, [pc, #52]	; (800b248 <WIFI_Init+0x40>)
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	4b0d      	ldr	r3, [pc, #52]	; (800b24c <WIFI_Init+0x44>)
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4b0d      	ldr	r3, [pc, #52]	; (800b250 <WIFI_Init+0x48>)
 800b21c:	4a0d      	ldr	r2, [pc, #52]	; (800b254 <WIFI_Init+0x4c>)
 800b21e:	490e      	ldr	r1, [pc, #56]	; (800b258 <WIFI_Init+0x50>)
 800b220:	480e      	ldr	r0, [pc, #56]	; (800b25c <WIFI_Init+0x54>)
 800b222:	f7ff f8c3 	bl	800a3ac <ES_WIFI_RegisterBusIO>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d107      	bne.n	800b23c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b22c:	480b      	ldr	r0, [pc, #44]	; (800b25c <WIFI_Init+0x54>)
 800b22e:	f7ff f88f 	bl	800a350 <ES_WIFI_Init>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800b23c:	79fb      	ldrb	r3, [r7, #7]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	0800af0d 	.word	0x0800af0d
 800b24c:	0800b001 	.word	0x0800b001
 800b250:	0800b0dd 	.word	0x0800b0dd
 800b254:	0800adf5 	.word	0x0800adf5
 800b258:	0800ac59 	.word	0x0800ac59
 800b25c:	200010c8 	.word	0x200010c8

0800b260 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	4809      	ldr	r0, [pc, #36]	; (800b2a0 <WIFI_Connect+0x40>)
 800b27a:	f7ff f8cb 	bl	800a414 <ES_WIFI_Connect>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d107      	bne.n	800b294 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b284:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <WIFI_Connect+0x40>)
 800b286:	f7ff f969 	bl	800a55c <ES_WIFI_GetNetworkSettings>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	200010c8 	.word	0x200010c8

0800b2a4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b2b0:	6879      	ldr	r1, [r7, #4]
 800b2b2:	4806      	ldr	r0, [pc, #24]	; (800b2cc <WIFI_GetMAC_Address+0x28>)
 800b2b4:	f7ff f97c 	bl	800a5b0 <ES_WIFI_GetMACAddress>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	200010c8 	.word	0x200010c8

0800b2d0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b2dc:	4809      	ldr	r0, [pc, #36]	; (800b304 <WIFI_GetIP_Address+0x34>)
 800b2de:	f7ff f911 	bl	800a504 <ES_WIFI_IsConnected>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d107      	bne.n	800b2f8 <WIFI_GetIP_Address+0x28>
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <WIFI_GetIP_Address+0x34>)
 800b2ea:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b2ee:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	200010c8 	.word	0x200010c8

0800b308 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08a      	sub	sp, #40	; 0x28
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	607a      	str	r2, [r7, #4]
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	460b      	mov	r3, r1
 800b316:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b324:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b326:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b328:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b32a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b32c:	7afb      	ldrb	r3, [r7, #11]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bf14      	ite	ne
 800b332:	2301      	movne	r3, #1
 800b334:	2300      	moveq	r3, #0
 800b336:	b2db      	uxtb	r3, r3
 800b338:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	785b      	ldrb	r3, [r3, #1]
 800b344:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	789b      	ldrb	r3, [r3, #2]
 800b34a:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	78db      	ldrb	r3, [r3, #3]
 800b350:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b352:	f107 0310 	add.w	r3, r7, #16
 800b356:	4619      	mov	r1, r3
 800b358:	4807      	ldr	r0, [pc, #28]	; (800b378 <WIFI_OpenClientConnection+0x70>)
 800b35a:	f7ff f95b 	bl	800a614 <ES_WIFI_StartClientConnection>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d102      	bne.n	800b36a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b36a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3728      	adds	r7, #40	; 0x28
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200010c8 	.word	0x200010c8

0800b37c <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08a      	sub	sp, #40	; 0x28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t startTime;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <sendMessageVector+0x2c>
 800b39a:	4b66      	ldr	r3, [pc, #408]	; (800b534 <sendMessageVector+0x1b8>)
 800b39c:	4a66      	ldr	r2, [pc, #408]	; (800b538 <sendMessageVector+0x1bc>)
 800b39e:	f240 3107 	movw	r1, #775	; 0x307
 800b3a2:	4866      	ldr	r0, [pc, #408]	; (800b53c <sendMessageVector+0x1c0>)
 800b3a4:	f006 fdf2 	bl	8011f8c <__assert_func>
    assert( pIoVec != NULL );
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <sendMessageVector+0x40>
 800b3ae:	4b64      	ldr	r3, [pc, #400]	; (800b540 <sendMessageVector+0x1c4>)
 800b3b0:	4a61      	ldr	r2, [pc, #388]	; (800b538 <sendMessageVector+0x1bc>)
 800b3b2:	f44f 7142 	mov.w	r1, #776	; 0x308
 800b3b6:	4861      	ldr	r0, [pc, #388]	; (800b53c <sendMessageVector+0x1c0>)
 800b3b8:	f006 fde8 	bl	8011f8c <__assert_func>
    assert( pContext->getTime != NULL );
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d106      	bne.n	800b3d2 <sendMessageVector+0x56>
 800b3c4:	4b5f      	ldr	r3, [pc, #380]	; (800b544 <sendMessageVector+0x1c8>)
 800b3c6:	4a5c      	ldr	r2, [pc, #368]	; (800b538 <sendMessageVector+0x1bc>)
 800b3c8:	f240 3109 	movw	r1, #777	; 0x309
 800b3cc:	485b      	ldr	r0, [pc, #364]	; (800b53c <sendMessageVector+0x1c0>)
 800b3ce:	f006 fddd 	bl	8011f8c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <sendMessageVector+0x6c>
 800b3da:	4b5b      	ldr	r3, [pc, #364]	; (800b548 <sendMessageVector+0x1cc>)
 800b3dc:	4a56      	ldr	r2, [pc, #344]	; (800b538 <sendMessageVector+0x1bc>)
 800b3de:	f240 310b 	movw	r1, #779	; 0x30b
 800b3e2:	4856      	ldr	r0, [pc, #344]	; (800b53c <sendMessageVector+0x1c0>)
 800b3e4:	f006 fdd2 	bl	8011f8c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	623b      	str	r3, [r7, #32]
 800b3ec:	e007      	b.n	800b3fe <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	623b      	str	r3, [r7, #32]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b404:	3b01      	subs	r3, #1
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	6a3a      	ldr	r2, [r7, #32]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d9ed      	bls.n	800b3ee <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	623b      	str	r3, [r7, #32]

    /* Note the start time. */
    startTime = pContext->getTime();
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4798      	blx	r3
 800b41c:	6138      	str	r0, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b41e:	e079      	b.n	800b514 <sendMessageVector+0x198>
    {
        if( pContext->transportInterface.writev != NULL )
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d008      	beq.n	800b43a <sendMessageVector+0xbe>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	69d0      	ldr	r0, [r2, #28]
 800b430:	69fa      	ldr	r2, [r7, #28]
 800b432:	6a39      	ldr	r1, [r7, #32]
 800b434:	4798      	blx	r3
 800b436:	6278      	str	r0, [r7, #36]	; 0x24
 800b438:	e009      	b.n	800b44e <sendMessageVector+0xd2>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	69d0      	ldr	r0, [r2, #28]
 800b442:	6a3a      	ldr	r2, [r7, #32]
 800b444:	6811      	ldr	r1, [r2, #0]
 800b446:	6a3a      	ldr	r2, [r7, #32]
 800b448:	6852      	ldr	r2, [r2, #4]
 800b44a:	4798      	blx	r3
 800b44c:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	2b00      	cmp	r3, #0
 800b452:	dd17      	ble.n	800b484 <sendMessageVector+0x108>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b45c:	429a      	cmp	r2, r3
 800b45e:	dd06      	ble.n	800b46e <sendMessageVector+0xf2>
 800b460:	4b3a      	ldr	r3, [pc, #232]	; (800b54c <sendMessageVector+0x1d0>)
 800b462:	4a35      	ldr	r2, [pc, #212]	; (800b538 <sendMessageVector+0x1bc>)
 800b464:	f44f 714b 	mov.w	r1, #812	; 0x32c
 800b468:	4834      	ldr	r0, [pc, #208]	; (800b53c <sendMessageVector+0x1c0>)
 800b46a:	f006 fd8f 	bl	8011f8c <__assert_func>

            bytesSentOrError += sendResult;
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	4413      	add	r3, r2
 800b474:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	4798      	blx	r3
 800b47c:	4602      	mov	r2, r0
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	635a      	str	r2, [r3, #52]	; 0x34
 800b482:	e004      	b.n	800b48e <sendMessageVector+0x112>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	2b00      	cmp	r3, #0
 800b488:	da01      	bge.n	800b48e <sendMessageVector+0x112>
        {
            bytesSentOrError = sendResult;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( calculateElapsedTime( pContext->getTime(), startTime ) > MQTT_SEND_TIMEOUT_MS )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	4798      	blx	r3
 800b494:	4603      	mov	r3, r0
 800b496:	6939      	ldr	r1, [r7, #16]
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 f8e7 	bl	800b66c <calculateElapsedTime>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d83e      	bhi.n	800b526 <sendMessageVector+0x1aa>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b4a8:	e00b      	b.n	800b4c2 <sendMessageVector+0x146>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	6a3a      	ldr	r2, [r7, #32]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d805      	bhi.n	800b4e2 <sendMessageVector+0x166>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	dae3      	bge.n	800b4aa <sendMessageVector+0x12e>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dd15      	ble.n	800b514 <sendMessageVector+0x198>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	00db      	lsls	r3, r3, #3
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b4f6:	6a3a      	ldr	r2, [r7, #32]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d80b      	bhi.n	800b514 <sendMessageVector+0x198>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	441a      	add	r2, r3
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	429a      	cmp	r2, r3
 800b51a:	da05      	bge.n	800b528 <sendMessageVector+0x1ac>
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f6bf af7e 	bge.w	800b420 <sendMessageVector+0xa4>
 800b524:	e000      	b.n	800b528 <sendMessageVector+0x1ac>
            break;
 800b526:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b528:	697b      	ldr	r3, [r7, #20]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3728      	adds	r7, #40	; 0x28
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	080175c8 	.word	0x080175c8
 800b538:	08018024 	.word	0x08018024
 800b53c:	080174ec 	.word	0x080174ec
 800b540:	080175dc 	.word	0x080175dc
 800b544:	080175ec 	.word	0x080175ec
 800b548:	08017608 	.word	0x08017608
 800b54c:	08017634 	.word	0x08017634

0800b550 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <sendBuffer+0x28>
 800b56a:	4b39      	ldr	r3, [pc, #228]	; (800b650 <sendBuffer+0x100>)
 800b56c:	4a39      	ldr	r2, [pc, #228]	; (800b654 <sendBuffer+0x104>)
 800b56e:	f44f 715a 	mov.w	r1, #872	; 0x368
 800b572:	4839      	ldr	r0, [pc, #228]	; (800b658 <sendBuffer+0x108>)
 800b574:	f006 fd0a 	bl	8011f8c <__assert_func>
    assert( pContext->getTime != NULL );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <sendBuffer+0x3e>
 800b580:	4b36      	ldr	r3, [pc, #216]	; (800b65c <sendBuffer+0x10c>)
 800b582:	4a34      	ldr	r2, [pc, #208]	; (800b654 <sendBuffer+0x104>)
 800b584:	f240 3169 	movw	r1, #873	; 0x369
 800b588:	4833      	ldr	r0, [pc, #204]	; (800b658 <sendBuffer+0x108>)
 800b58a:	f006 fcff 	bl	8011f8c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <sendBuffer+0x54>
 800b596:	4b32      	ldr	r3, [pc, #200]	; (800b660 <sendBuffer+0x110>)
 800b598:	4a2e      	ldr	r2, [pc, #184]	; (800b654 <sendBuffer+0x104>)
 800b59a:	f240 316a 	movw	r1, #874	; 0x36a
 800b59e:	482e      	ldr	r0, [pc, #184]	; (800b658 <sendBuffer+0x108>)
 800b5a0:	f006 fcf4 	bl	8011f8c <__assert_func>
    assert( pIndex != NULL );
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <sendBuffer+0x68>
 800b5aa:	4b2e      	ldr	r3, [pc, #184]	; (800b664 <sendBuffer+0x114>)
 800b5ac:	4a29      	ldr	r2, [pc, #164]	; (800b654 <sendBuffer+0x104>)
 800b5ae:	f240 316b 	movw	r1, #875	; 0x36b
 800b5b2:	4829      	ldr	r0, [pc, #164]	; (800b658 <sendBuffer+0x108>)
 800b5b4:	f006 fcea 	bl	8011f8c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b5c4:	3320      	adds	r3, #32
 800b5c6:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b5c8:	e034      	b.n	800b634 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b5d2:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	1a8a      	subs	r2, r1, r2
 800b5d8:	69b9      	ldr	r1, [r7, #24]
 800b5da:	4798      	blx	r3
 800b5dc:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dd1b      	ble.n	800b61c <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	693a      	ldr	r2, [r7, #16]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	dd06      	ble.n	800b5fe <sendBuffer+0xae>
 800b5f0:	4b1d      	ldr	r3, [pc, #116]	; (800b668 <sendBuffer+0x118>)
 800b5f2:	4a18      	ldr	r2, [pc, #96]	; (800b654 <sendBuffer+0x104>)
 800b5f4:	f240 317a 	movw	r1, #890	; 0x37a
 800b5f8:	4817      	ldr	r0, [pc, #92]	; (800b658 <sendBuffer+0x108>)
 800b5fa:	f006 fcc7 	bl	8011f8c <__assert_func>

            bytesSentOrError += sendResult;
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	4413      	add	r3, r2
 800b604:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	4413      	add	r3, r2
 800b60c:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	4798      	blx	r3
 800b614:	4602      	mov	r2, r0
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	635a      	str	r2, [r3, #52]	; 0x34
 800b61a:	e004      	b.n	800b626 <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	da01      	bge.n	800b626 <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62a:	4798      	blx	r3
 800b62c:	4602      	mov	r2, r0
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	4293      	cmp	r3, r2
 800b632:	d907      	bls.n	800b644 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	69fa      	ldr	r2, [r7, #28]
 800b638:	429a      	cmp	r2, r3
 800b63a:	da04      	bge.n	800b646 <sendBuffer+0xf6>
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	dac3      	bge.n	800b5ca <sendBuffer+0x7a>
 800b642:	e000      	b.n	800b646 <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b644:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b646:	69fb      	ldr	r3, [r7, #28]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	080175c8 	.word	0x080175c8
 800b654:	08018038 	.word	0x08018038
 800b658:	080174ec 	.word	0x080174ec
 800b65c:	080175ec 	.word	0x080175ec
 800b660:	08017608 	.word	0x08017608
 800b664:	08017674 	.word	0x08017674
 800b668:	08017634 	.word	0x08017634

0800b66c <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
    return later - start;
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	1ad3      	subs	r3, r2, r3
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	2b62      	cmp	r3, #98	; 0x62
 800b69a:	d00c      	beq.n	800b6b6 <getAckFromPacketType+0x2e>
 800b69c:	2b62      	cmp	r3, #98	; 0x62
 800b69e:	dc0d      	bgt.n	800b6bc <getAckFromPacketType+0x34>
 800b6a0:	2b40      	cmp	r3, #64	; 0x40
 800b6a2:	d002      	beq.n	800b6aa <getAckFromPacketType+0x22>
 800b6a4:	2b50      	cmp	r3, #80	; 0x50
 800b6a6:	d003      	beq.n	800b6b0 <getAckFromPacketType+0x28>
 800b6a8:	e008      	b.n	800b6bc <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
            break;
 800b6ae:	e012      	b.n	800b6d6 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	73fb      	strb	r3, [r7, #15]
            break;
 800b6b4:	e00f      	b.n	800b6d6 <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	73fb      	strb	r3, [r7, #15]
            break;
 800b6ba:	e00c      	b.n	800b6d6 <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	2b70      	cmp	r3, #112	; 0x70
 800b6c0:	d006      	beq.n	800b6d0 <getAckFromPacketType+0x48>
 800b6c2:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <getAckFromPacketType+0x58>)
 800b6c4:	4a07      	ldr	r2, [pc, #28]	; (800b6e4 <getAckFromPacketType+0x5c>)
 800b6c6:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b6ca:	4807      	ldr	r0, [pc, #28]	; (800b6e8 <getAckFromPacketType+0x60>)
 800b6cc:	f006 fc5e 	bl	8011f8c <__assert_func>
            ackType = MQTTPubcomp;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	73fb      	strb	r3, [r7, #15]
            break;
 800b6d4:	bf00      	nop
    }

    return ackType;
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	08017684 	.word	0x08017684
 800b6e4:	08018044 	.word	0x08018044
 800b6e8:	080174ec 	.word	0x080174ec

0800b6ec <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	; 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b6fe:	2300      	movs	r3, #0
 800b700:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	623b      	str	r3, [r7, #32]
 800b706:	2300      	movs	r3, #0
 800b708:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b712:	2300      	movs	r3, #0
 800b714:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <recvExact+0x3e>
 800b71c:	4b44      	ldr	r3, [pc, #272]	; (800b830 <recvExact+0x144>)
 800b71e:	4a45      	ldr	r2, [pc, #276]	; (800b834 <recvExact+0x148>)
 800b720:	f240 31d1 	movw	r1, #977	; 0x3d1
 800b724:	4844      	ldr	r0, [pc, #272]	; (800b838 <recvExact+0x14c>)
 800b726:	f006 fc31 	bl	8011f8c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d906      	bls.n	800b742 <recvExact+0x56>
 800b734:	4b41      	ldr	r3, [pc, #260]	; (800b83c <recvExact+0x150>)
 800b736:	4a3f      	ldr	r2, [pc, #252]	; (800b834 <recvExact+0x148>)
 800b738:	f240 31d2 	movw	r1, #978	; 0x3d2
 800b73c:	483e      	ldr	r0, [pc, #248]	; (800b838 <recvExact+0x14c>)
 800b73e:	f006 fc25 	bl	8011f8c <__assert_func>
    assert( pContext->getTime != NULL );
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <recvExact+0x6c>
 800b74a:	4b3d      	ldr	r3, [pc, #244]	; (800b840 <recvExact+0x154>)
 800b74c:	4a39      	ldr	r2, [pc, #228]	; (800b834 <recvExact+0x148>)
 800b74e:	f240 31d3 	movw	r1, #979	; 0x3d3
 800b752:	4839      	ldr	r0, [pc, #228]	; (800b838 <recvExact+0x14c>)
 800b754:	f006 fc1a 	bl	8011f8c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d106      	bne.n	800b76e <recvExact+0x82>
 800b760:	4b38      	ldr	r3, [pc, #224]	; (800b844 <recvExact+0x158>)
 800b762:	4a34      	ldr	r2, [pc, #208]	; (800b834 <recvExact+0x148>)
 800b764:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800b768:	4833      	ldr	r0, [pc, #204]	; (800b838 <recvExact+0x14c>)
 800b76a:	f006 fc0f 	bl	8011f8c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <recvExact+0x98>
 800b776:	4b34      	ldr	r3, [pc, #208]	; (800b848 <recvExact+0x15c>)
 800b778:	4a2e      	ldr	r2, [pc, #184]	; (800b834 <recvExact+0x148>)
 800b77a:	f240 31d5 	movw	r1, #981	; 0x3d5
 800b77e:	482e      	ldr	r0, [pc, #184]	; (800b838 <recvExact+0x14c>)
 800b780:	f006 fc04 	bl	8011f8c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	4798      	blx	r3
 800b79a:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b79c:	e039      	b.n	800b812 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	69d8      	ldr	r0, [r3, #28]
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7a8:	4798      	blx	r3
 800b7aa:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	da04      	bge.n	800b7bc <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	77fb      	strb	r3, [r7, #31]
 800b7ba:	e02a      	b.n	800b812 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dd1a      	ble.n	800b7f8 <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	4798      	blx	r3
 800b7c6:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d206      	bcs.n	800b7de <recvExact+0xf2>
 800b7d0:	4b1e      	ldr	r3, [pc, #120]	; (800b84c <recvExact+0x160>)
 800b7d2:	4a18      	ldr	r2, [pc, #96]	; (800b834 <recvExact+0x148>)
 800b7d4:	f240 31f5 	movw	r1, #1013	; 0x3f5
 800b7d8:	4817      	ldr	r0, [pc, #92]	; (800b838 <recvExact+0x14c>)
 800b7da:	f006 fbd7 	bl	8011f8c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b7e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f2:	4413      	add	r3, r2
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7f6:	e00c      	b.n	800b812 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	4798      	blx	r3
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	6a39      	ldr	r1, [r7, #32]
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff ff33 	bl	800b66c <calculateElapsedTime>
 800b806:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	2b09      	cmp	r3, #9
 800b80c:	d901      	bls.n	800b812 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b80e:	2301      	movs	r3, #1
 800b810:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <recvExact+0x138>
 800b818:	7ffb      	ldrb	r3, [r7, #31]
 800b81a:	f083 0301 	eor.w	r3, r3, #1
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1bc      	bne.n	800b79e <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b826:	4618      	mov	r0, r3
 800b828:	3730      	adds	r7, #48	; 0x30
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	080175c8 	.word	0x080175c8
 800b834:	0801805c 	.word	0x0801805c
 800b838:	080174ec 	.word	0x080174ec
 800b83c:	080176ac 	.word	0x080176ac
 800b840:	080175ec 	.word	0x080175ec
 800b844:	080176d8 	.word	0x080176d8
 800b848:	08017704 	.word	0x08017704
 800b84c:	0801772c 	.word	0x0801772c

0800b850 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08c      	sub	sp, #48	; 0x30
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b85c:	2304      	movs	r3, #4
 800b85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b86a:	2300      	movs	r3, #0
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b876:	2300      	movs	r3, #0
 800b878:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b87a:	2300      	movs	r3, #0
 800b87c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d106      	bne.n	800b894 <discardPacket+0x44>
 800b886:	4b2f      	ldr	r3, [pc, #188]	; (800b944 <discardPacket+0xf4>)
 800b888:	4a2f      	ldr	r2, [pc, #188]	; (800b948 <discardPacket+0xf8>)
 800b88a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800b88e:	482f      	ldr	r0, [pc, #188]	; (800b94c <discardPacket+0xfc>)
 800b890:	f006 fb7c 	bl	8011f8c <__assert_func>
    assert( pContext->getTime != NULL );
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <discardPacket+0x5a>
 800b89c:	4b2c      	ldr	r3, [pc, #176]	; (800b950 <discardPacket+0x100>)
 800b89e:	4a2a      	ldr	r2, [pc, #168]	; (800b948 <discardPacket+0xf8>)
 800b8a0:	f240 4121 	movw	r1, #1057	; 0x421
 800b8a4:	4829      	ldr	r0, [pc, #164]	; (800b94c <discardPacket+0xfc>)
 800b8a6:	f006 fb71 	bl	8011f8c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	4798      	blx	r3
 800b8ba:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b8bc:	e029      	b.n	800b912 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d903      	bls.n	800b8d2 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b8d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f7ff ff09 	bl	800b6ec <recvExact>
 800b8da:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d003      	beq.n	800b8ec <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b8ea:	e012      	b.n	800b912 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8f0:	4413      	add	r3, r2
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	4798      	blx	r3
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	69b9      	ldr	r1, [r7, #24]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff feb5 	bl	800b66c <calculateElapsedTime>
 800b902:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d302      	bcc.n	800b912 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	429a      	cmp	r2, r3
 800b918:	d206      	bcs.n	800b928 <discardPacket+0xd8>
 800b91a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b91e:	f083 0301 	eor.w	r3, r3, #1
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1ca      	bne.n	800b8be <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800b928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d102      	bne.n	800b936 <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b930:	2307      	movs	r3, #7
 800b932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800b936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3730      	adds	r7, #48	; 0x30
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	080175c8 	.word	0x080175c8
 800b948:	08018068 	.word	0x08018068
 800b94c:	080174ec 	.word	0x080174ec
 800b950:	080175ec 	.word	0x080175ec

0800b954 <discardStoredPacket>:

/*-----------------------------------------------------------*/

static MQTTStatus_t discardStoredPacket( MQTTContext_t * pContext,
                                         const MQTTPacketInfo_t * pPacketInfo )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08a      	sub	sp, #40	; 0x28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTRecvFailed;
 800b95e:	2304      	movs	r3, #4
 800b960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int32_t bytesReceived = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	617b      	str	r3, [r7, #20]
    size_t bytesToReceive = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	623b      	str	r3, [r7, #32]
    uint32_t totalBytesReceived = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	61fb      	str	r3, [r7, #28]
    bool receiveError = false;
 800b970:	2300      	movs	r3, #0
 800b972:	76fb      	strb	r3, [r7, #27]
    size_t mqttPacketSize = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	613b      	str	r3, [r7, #16]
    size_t remainingLength;

    assert( pContext != NULL );
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <discardStoredPacket+0x38>
 800b97e:	4b34      	ldr	r3, [pc, #208]	; (800ba50 <discardStoredPacket+0xfc>)
 800b980:	4a34      	ldr	r2, [pc, #208]	; (800ba54 <discardStoredPacket+0x100>)
 800b982:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800b986:	4834      	ldr	r0, [pc, #208]	; (800ba58 <discardStoredPacket+0x104>)
 800b988:	f006 fb00 	bl	8011f8c <__assert_func>
    assert( pPacketInfo != NULL );
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <discardStoredPacket+0x4c>
 800b992:	4b32      	ldr	r3, [pc, #200]	; (800ba5c <discardStoredPacket+0x108>)
 800b994:	4a2f      	ldr	r2, [pc, #188]	; (800ba54 <discardStoredPacket+0x100>)
 800b996:	f240 4161 	movw	r1, #1121	; 0x461
 800b99a:	482f      	ldr	r0, [pc, #188]	; (800ba58 <discardStoredPacket+0x104>)
 800b99c:	f006 faf6 	bl	8011f8c <__assert_func>

    mqttPacketSize = pPacketInfo->remainingLength + pPacketInfo->headerLength;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]

    /* Assert that the packet being discarded is bigger than the
     * receive buffer. */
    assert( mqttPacketSize > pContext->networkBuffer.size );
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d806      	bhi.n	800b9c4 <discardStoredPacket+0x70>
 800b9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ba60 <discardStoredPacket+0x10c>)
 800b9b8:	4a26      	ldr	r2, [pc, #152]	; (800ba54 <discardStoredPacket+0x100>)
 800b9ba:	f240 4167 	movw	r1, #1127	; 0x467
 800b9be:	4826      	ldr	r0, [pc, #152]	; (800ba58 <discardStoredPacket+0x104>)
 800b9c0:	f006 fae4 	bl	8011f8c <__assert_func>

    /* Discard these many bytes at a time. */
    bytesToReceive = pContext->networkBuffer.size;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	623b      	str	r3, [r7, #32]

    /* Number of bytes depicted by 'index' have already been received. */
    remainingLength = mqttPacketSize - pContext->index;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	60fb      	str	r3, [r7, #12]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b9d4:	e019      	b.n	800ba0a <discardStoredPacket+0xb6>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	6a3a      	ldr	r2, [r7, #32]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d903      	bls.n	800b9ea <discardStoredPacket+0x96>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	623b      	str	r3, [r7, #32]
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b9ea:	6a39      	ldr	r1, [r7, #32]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fe7d 	bl	800b6ec <recvExact>
 800b9f2:	6178      	str	r0, [r7, #20]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d002      	beq.n	800ba02 <discardStoredPacket+0xae>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	76fb      	strb	r3, [r7, #27]
 800ba00:	e003      	b.n	800ba0a <discardStoredPacket+0xb6>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	4413      	add	r3, r2
 800ba08:	61fb      	str	r3, [r7, #28]
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800ba0a:	69fa      	ldr	r2, [r7, #28]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d205      	bcs.n	800ba1e <discardStoredPacket+0xca>
 800ba12:	7efb      	ldrb	r3, [r7, #27]
 800ba14:	f083 0301 	eor.w	r3, r3, #1
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1db      	bne.n	800b9d6 <discardStoredPacket+0x82>
        }
    }

    if( totalBytesReceived == remainingLength )
 800ba1e:	69fa      	ldr	r2, [r7, #28]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d102      	bne.n	800ba2c <discardStoredPacket+0xd8>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800ba26:	2307      	movs	r3, #7
 800ba28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Clear the buffer */
    ( void ) memset( pContext->networkBuffer.pBuffer,
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a18      	ldr	r0, [r3, #32]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	461a      	mov	r2, r3
 800ba36:	2100      	movs	r1, #0
 800ba38:	f007 fc66 	bl	8013308 <memset>
                     0,
                     pContext->networkBuffer.size );

    /* Reset the index. */
    pContext->index = 0;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	641a      	str	r2, [r3, #64]	; 0x40

    return status;
 800ba42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3728      	adds	r7, #40	; 0x28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	080175c8 	.word	0x080175c8
 800ba54:	08018078 	.word	0x08018078
 800ba58:	080174ec 	.word	0x080174ec
 800ba5c:	08017754 	.word	0x08017754
 800ba60:	08017768 	.word	0x08017768

0800ba64 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800ba64:	b084      	sub	sp, #16
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b086      	sub	sp, #24
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800ba76:	2300      	movs	r3, #0
 800ba78:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d106      	bne.n	800ba96 <receivePacket+0x32>
 800ba88:	4b1a      	ldr	r3, [pc, #104]	; (800baf4 <receivePacket+0x90>)
 800ba8a:	4a1b      	ldr	r2, [pc, #108]	; (800baf8 <receivePacket+0x94>)
 800ba8c:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800ba90:	481a      	ldr	r0, [pc, #104]	; (800bafc <receivePacket+0x98>)
 800ba92:	f006 fa7b 	bl	8011f8c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <receivePacket+0x48>
 800ba9e:	4b18      	ldr	r3, [pc, #96]	; (800bb00 <receivePacket+0x9c>)
 800baa0:	4a15      	ldr	r2, [pc, #84]	; (800baf8 <receivePacket+0x94>)
 800baa2:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800baa6:	4815      	ldr	r0, [pc, #84]	; (800bafc <receivePacket+0x98>)
 800baa8:	f006 fa70 	bl	8011f8c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800baac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d908      	bls.n	800bac8 <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800bab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff fec7 	bl	800b850 <discardPacket>
 800bac2:	4603      	mov	r3, r0
 800bac4:	75fb      	strb	r3, [r7, #23]
 800bac6:	e00c      	b.n	800bae2 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800bacc:	68f9      	ldr	r1, [r7, #12]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff fe0c 	bl	800b6ec <recvExact>
 800bad4:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	693a      	ldr	r2, [r7, #16]
 800bada:	429a      	cmp	r2, r3
 800badc:	d001      	beq.n	800bae2 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800bade:	2304      	movs	r3, #4
 800bae0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baee:	b004      	add	sp, #16
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	080175c8 	.word	0x080175c8
 800baf8:	0801808c 	.word	0x0801808c
 800bafc:	080174ec 	.word	0x080174ec
 800bb00:	08017704 	.word	0x08017704

0800bb04 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	3b02      	subs	r3, #2
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d816      	bhi.n	800bb48 <getAckTypeToSend+0x44>
 800bb1a:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <getAckTypeToSend+0x1c>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb31 	.word	0x0800bb31
 800bb24:	0800bb37 	.word	0x0800bb37
 800bb28:	0800bb3d 	.word	0x0800bb3d
 800bb2c:	0800bb43 	.word	0x0800bb43
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800bb30:	2340      	movs	r3, #64	; 0x40
 800bb32:	73fb      	strb	r3, [r7, #15]
            break;
 800bb34:	e009      	b.n	800bb4a <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800bb36:	2350      	movs	r3, #80	; 0x50
 800bb38:	73fb      	strb	r3, [r7, #15]
            break;
 800bb3a:	e006      	b.n	800bb4a <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800bb3c:	2362      	movs	r3, #98	; 0x62
 800bb3e:	73fb      	strb	r3, [r7, #15]
            break;
 800bb40:	e003      	b.n	800bb4a <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800bb42:	2370      	movs	r3, #112	; 0x70
 800bb44:	73fb      	strb	r3, [r7, #15]
            break;
 800bb46:	e000      	b.n	800bb4a <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800bb48:	bf00      	nop
    }

    return packetTypeByte;
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08a      	sub	sp, #40	; 0x28
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	807b      	strh	r3, [r7, #2]
 800bb64:	4613      	mov	r3, r2
 800bb66:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800bb78:	f107 0308 	add.w	r3, r7, #8
 800bb7c:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800bb7e:	2304      	movs	r3, #4
 800bb80:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d106      	bne.n	800bb96 <sendPublishAcks+0x3e>
 800bb88:	4b21      	ldr	r3, [pc, #132]	; (800bc10 <sendPublishAcks+0xb8>)
 800bb8a:	4a22      	ldr	r2, [pc, #136]	; (800bc14 <sendPublishAcks+0xbc>)
 800bb8c:	f240 5101 	movw	r1, #1281	; 0x501
 800bb90:	4821      	ldr	r0, [pc, #132]	; (800bc18 <sendPublishAcks+0xc0>)
 800bb92:	f006 f9fb 	bl	8011f8c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800bb96:	787b      	ldrb	r3, [r7, #1]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7ff ffb3 	bl	800bb04 <getAckTypeToSend>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d02d      	beq.n	800bc04 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fd6c 	bl	800b688 <getAckFromPacketType>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800bbb4:	887a      	ldrh	r2, [r7, #2]
 800bbb6:	7df9      	ldrb	r1, [r7, #23]
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f002 f8e3 	bl	800dd88 <MQTT_SerializeAck>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800bbc6:	7ffb      	ldrb	r3, [r7, #31]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800bbcc:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800bbce:	2204      	movs	r2, #4
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fcbc 	bl	800b550 <sendBuffer>
 800bbd8:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d10f      	bne.n	800bc00 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800bbe8:	7dba      	ldrb	r2, [r7, #22]
 800bbea:	8879      	ldrh	r1, [r7, #2]
 800bbec:	f107 0315 	add.w	r3, r7, #21
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f002 ff93 	bl	800eb20 <MQTT_UpdateStateAck>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	77fb      	strb	r3, [r7, #31]
 800bbfe:	e001      	b.n	800bc04 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800bc00:	2303      	movs	r3, #3
 800bc02:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800bc04:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3720      	adds	r7, #32
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	080175c8 	.word	0x080175c8
 800bc14:	0801809c 	.word	0x0801809c
 800bc18:	080174ec 	.word	0x080174ec

0800bc1c <handleKeepAlive>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleKeepAlive( MQTTContext_t * pContext )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800bc24:	2300      	movs	r3, #0
 800bc26:	77fb      	strb	r3, [r7, #31]
    uint32_t now = 0U;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	617b      	str	r3, [r7, #20]
    uint32_t packetTxTimeoutMs = 0U;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61bb      	str	r3, [r7, #24]
    uint32_t lastPacketTxTime = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <handleKeepAlive+0x2c>
 800bc3a:	4b33      	ldr	r3, [pc, #204]	; (800bd08 <handleKeepAlive+0xec>)
 800bc3c:	4a33      	ldr	r2, [pc, #204]	; (800bd0c <handleKeepAlive+0xf0>)
 800bc3e:	f240 5144 	movw	r1, #1348	; 0x544
 800bc42:	4833      	ldr	r0, [pc, #204]	; (800bd10 <handleKeepAlive+0xf4>)
 800bc44:	f006 f9a2 	bl	8011f8c <__assert_func>
    assert( pContext->getTime != NULL );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d106      	bne.n	800bc5e <handleKeepAlive+0x42>
 800bc50:	4b30      	ldr	r3, [pc, #192]	; (800bd14 <handleKeepAlive+0xf8>)
 800bc52:	4a2e      	ldr	r2, [pc, #184]	; (800bd0c <handleKeepAlive+0xf0>)
 800bc54:	f240 5145 	movw	r1, #1349	; 0x545
 800bc58:	482d      	ldr	r0, [pc, #180]	; (800bd10 <handleKeepAlive+0xf4>)
 800bc5a:	f006 f997 	bl	8011f8c <__assert_func>

    now = pContext->getTime();
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc62:	4798      	blx	r3
 800bc64:	6178      	str	r0, [r7, #20]

    packetTxTimeoutMs = 1000U * ( uint32_t ) pContext->keepAliveIntervalSec;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	61bb      	str	r3, [r7, #24]

    if( PACKET_TX_TIMEOUT_MS < packetTxTimeoutMs )
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	f247 5230 	movw	r2, #30000	; 0x7530
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d902      	bls.n	800bc88 <handleKeepAlive+0x6c>
    {
        packetTxTimeoutMs = PACKET_TX_TIMEOUT_MS;
 800bc82:	f247 5330 	movw	r3, #30000	; 0x7530
 800bc86:	61bb      	str	r3, [r7, #24]
    }

    /* If keep alive interval is 0, it is disabled. */
    if( pContext->waitingForPingResp == true )
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00d      	beq.n	800bcae <handleKeepAlive+0x92>
    {
        /* Has time expired? */
        if( calculateElapsedTime( now, pContext->pingReqSendTimeMs ) >
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc96:	4619      	mov	r1, r3
 800bc98:	6978      	ldr	r0, [r7, #20]
 800bc9a:	f7ff fce7 	bl	800b66c <calculateElapsedTime>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d92a      	bls.n	800bcfe <handleKeepAlive+0xe2>
            MQTT_PINGRESP_TIMEOUT_MS )
        {
            status = MQTTKeepAliveTimeout;
 800bca8:	230a      	movs	r3, #10
 800bcaa:	77fb      	strb	r3, [r7, #31]
 800bcac:	e027      	b.n	800bcfe <handleKeepAlive+0xe2>
        }
    }
    else
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );
        lastPacketTxTime = pContext->lastPacketTxTime;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb2:	613b      	str	r3, [r7, #16]
        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( ( packetTxTimeoutMs != 0U ) && ( calculateElapsedTime( now, lastPacketTxTime ) >= packetTxTimeoutMs ) )
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00d      	beq.n	800bcd6 <handleKeepAlive+0xba>
 800bcba:	6939      	ldr	r1, [r7, #16]
 800bcbc:	6978      	ldr	r0, [r7, #20]
 800bcbe:	f7ff fcd5 	bl	800b66c <calculateElapsedTime>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d805      	bhi.n	800bcd6 <handleKeepAlive+0xba>
        {
            status = MQTT_Ping( pContext );
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 f8a2 	bl	800ce14 <MQTT_Ping>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	77fb      	strb	r3, [r7, #31]
 800bcd4:	e013      	b.n	800bcfe <handleKeepAlive+0xe2>
        }
        else
        {
            const uint32_t timeElapsed = calculateElapsedTime( now, pContext->lastPacketRxTime );
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6978      	ldr	r0, [r7, #20]
 800bcde:	f7ff fcc5 	bl	800b66c <calculateElapsedTime>
 800bce2:	60f8      	str	r0, [r7, #12]

            if( ( timeElapsed != 0U ) && ( timeElapsed >= PACKET_RX_TIMEOUT_MS ) )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <handleKeepAlive+0xe2>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d904      	bls.n	800bcfe <handleKeepAlive+0xe2>
            {
                status = MQTT_Ping( pContext );
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f001 f88d 	bl	800ce14 <MQTT_Ping>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    return status;
 800bcfe:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	080175c8 	.word	0x080175c8
 800bd0c:	080180ac 	.word	0x080180ac
 800bd10:	080174ec 	.word	0x080174ec
 800bd14:	080175ec 	.word	0x080175ec

0800bd18 <handleIncomingPublish>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingPublish( MQTTContext_t * pContext,
                                           MQTTPacketInfo_t * pIncomingPacket )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08e      	sub	sp, #56	; 0x38
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadParameter;
 800bd22:	2301      	movs	r3, #1
 800bd24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t packetIdentifier = 0U;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	857b      	strh	r3, [r7, #42]	; 0x2a
    MQTTPublishInfo_t publishInfo;
    MQTTDeserializedInfo_t deserializedInfo;
    bool duplicatePublish = false;
 800bd32:	2300      	movs	r3, #0
 800bd34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    assert( pContext != NULL );
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <handleIncomingPublish+0x34>
 800bd3e:	4b43      	ldr	r3, [pc, #268]	; (800be4c <handleIncomingPublish+0x134>)
 800bd40:	4a43      	ldr	r2, [pc, #268]	; (800be50 <handleIncomingPublish+0x138>)
 800bd42:	f240 517e 	movw	r1, #1406	; 0x57e
 800bd46:	4843      	ldr	r0, [pc, #268]	; (800be54 <handleIncomingPublish+0x13c>)
 800bd48:	f006 f920 	bl	8011f8c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <handleIncomingPublish+0x48>
 800bd52:	4b41      	ldr	r3, [pc, #260]	; (800be58 <handleIncomingPublish+0x140>)
 800bd54:	4a3e      	ldr	r2, [pc, #248]	; (800be50 <handleIncomingPublish+0x138>)
 800bd56:	f240 517f 	movw	r1, #1407	; 0x57f
 800bd5a:	483e      	ldr	r0, [pc, #248]	; (800be54 <handleIncomingPublish+0x13c>)
 800bd5c:	f006 f916 	bl	8011f8c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <handleIncomingPublish+0x5e>
 800bd68:	4b3c      	ldr	r3, [pc, #240]	; (800be5c <handleIncomingPublish+0x144>)
 800bd6a:	4a39      	ldr	r2, [pc, #228]	; (800be50 <handleIncomingPublish+0x138>)
 800bd6c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800bd70:	4838      	ldr	r0, [pc, #224]	; (800be54 <handleIncomingPublish+0x13c>)
 800bd72:	f006 f90b 	bl	8011f8c <__assert_func>

    status = MQTT_DeserializePublish( pIncomingPacket, &packetIdentifier, &publishInfo );
 800bd76:	f107 0214 	add.w	r2, r7, #20
 800bd7a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6838      	ldr	r0, [r7, #0]
 800bd82:	f002 f898 	bl	800deb6 <MQTT_DeserializePublish>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    LogInfo( ( "De-serialized incoming PUBLISH packet: DeserializerResult=%s.",
               MQTT_Status_strerror( status ) ) );

    if( ( status == MQTTSuccess ) &&
 800bd8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d109      	bne.n	800bda8 <handleIncomingPublish+0x90>
        ( pContext->incomingPublishRecords == NULL ) &&
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
    if( ( status == MQTTSuccess ) &&
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d105      	bne.n	800bda8 <handleIncomingPublish+0x90>
        ( publishInfo.qos > MQTTQoS0 ) )
 800bd9c:	7d3b      	ldrb	r3, [r7, #20]
        ( pContext->incomingPublishRecords == NULL ) &&
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <handleIncomingPublish+0x90>
    {
        LogError( ( "Incoming publish has QoS > MQTTQoS0 but incoming "
                    "publish records have not been initialized. Dropping the "
                    "incoming publish. Please call MQTT_InitStatefulQoS to enable "
                    "use of QoS1 and QoS2 publishes." ) );
        status = MQTTRecvFailed;
 800bda2:	2304      	movs	r3, #4
 800bda4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800bda8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d122      	bne.n	800bdf6 <handleIncomingPublish+0xde>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStatePublish( pContext,
 800bdb0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800bdb2:	7d3a      	ldrb	r2, [r7, #20]
 800bdb4:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f002 fe3b 	bl	800ea3a <MQTT_UpdateStatePublish>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                          publishInfo.qos,
                                          &publishRecordState );

        MQTT_POST_STATE_UPDATE_HOOK( pContext );

        if( status == MQTTSuccess )
 800bdca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d011      	beq.n	800bdf6 <handleIncomingPublish+0xde>
         *       sending out a duplicate publish with dup flag set, when a
         *       session is reestablished. It can result in a collision in
         *       state engine. This will be handled by ignoring the
         *       #MQTTStateCollision status from the state engine. The publish
         *       data is not passed to the application. */
        else if( status == MQTTStateCollision )
 800bdd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdd6:	2b09      	cmp	r3, #9
 800bdd8:	d10d      	bne.n	800bdf6 <handleIncomingPublish+0xde>
        {
            status = MQTTSuccess;
 800bdda:	2300      	movs	r3, #0
 800bddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            duplicatePublish = true;
 800bde0:	2301      	movs	r3, #1
 800bde2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            /* Calculate the state for the ack packet that needs to be sent out
             * for the duplicate incoming publish. */
            publishRecordState = MQTT_CalculateStatePublish( MQTT_RECEIVE,
 800bde6:	7d3b      	ldrb	r3, [r7, #20]
 800bde8:	4619      	mov	r1, r3
 800bdea:	2001      	movs	r0, #1
 800bdec:	f002 fdf6 	bl	800e9dc <MQTT_CalculateStatePublish>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bdf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d11f      	bne.n	800be3e <handleIncomingPublish+0x126>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bdfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be00:	813b      	strh	r3, [r7, #8]
        deserializedInfo.pPublishInfo = &publishInfo;
 800be02:	f107 0314 	add.w	r3, r7, #20
 800be06:	60fb      	str	r3, [r7, #12]
        deserializedInfo.deserializationResult = status;
 800be08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be0c:	743b      	strb	r3, [r7, #16]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks.
         * Application callback will be invoked for all publishes, except for
         * duplicate incoming publishes. */
        if( duplicatePublish == false )
 800be0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800be12:	f083 0301 	eor.w	r3, r3, #1
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d006      	beq.n	800be2a <handleIncomingPublish+0x112>
        {
            pContext->appCallback( pContext,
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be20:	f107 0208 	add.w	r2, r7, #8
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
                                   pIncomingPacket,
                                   &deserializedInfo );
        }

        /* Send PUBACK or PUBREC if necessary. */
        status = sendPublishAcks( pContext,
 800be2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be2c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fe90 	bl	800bb58 <sendPublishAcks>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800be3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be42:	4618      	mov	r0, r3
 800be44:	3730      	adds	r7, #48	; 0x30
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	080175c8 	.word	0x080175c8
 800be50:	080180bc 	.word	0x080180bc
 800be54:	080174ec 	.word	0x080174ec
 800be58:	08017798 	.word	0x08017798
 800be5c:	080177b0 	.word	0x080177b0

0800be60 <handlePublishAcks>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handlePublishAcks( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	; 0x28
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTBadResponse;
 800be6a:	2305      	movs	r3, #5
 800be6c:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t publishRecordState = MQTTStateNull;
 800be6e:	2300      	movs	r3, #0
 800be70:	75bb      	strb	r3, [r7, #22]
    uint16_t packetIdentifier;
    MQTTPubAckType_t ackType;
    MQTTEventCallback_t appCallback;
    MQTTDeserializedInfo_t deserializedInfo;

    assert( pContext != NULL );
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <handlePublishAcks+0x26>
 800be78:	4b2c      	ldr	r3, [pc, #176]	; (800bf2c <handlePublishAcks+0xcc>)
 800be7a:	4a2d      	ldr	r2, [pc, #180]	; (800bf30 <handlePublishAcks+0xd0>)
 800be7c:	f240 51ff 	movw	r1, #1535	; 0x5ff
 800be80:	482c      	ldr	r0, [pc, #176]	; (800bf34 <handlePublishAcks+0xd4>)
 800be82:	f006 f883 	bl	8011f8c <__assert_func>
    assert( pIncomingPacket != NULL );
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d106      	bne.n	800be9a <handlePublishAcks+0x3a>
 800be8c:	4b2a      	ldr	r3, [pc, #168]	; (800bf38 <handlePublishAcks+0xd8>)
 800be8e:	4a28      	ldr	r2, [pc, #160]	; (800bf30 <handlePublishAcks+0xd0>)
 800be90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800be94:	4827      	ldr	r0, [pc, #156]	; (800bf34 <handlePublishAcks+0xd4>)
 800be96:	f006 f879 	bl	8011f8c <__assert_func>
    assert( pContext->appCallback != NULL );
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <handlePublishAcks+0x50>
 800bea2:	4b26      	ldr	r3, [pc, #152]	; (800bf3c <handlePublishAcks+0xdc>)
 800bea4:	4a22      	ldr	r2, [pc, #136]	; (800bf30 <handlePublishAcks+0xd0>)
 800bea6:	f240 6101 	movw	r1, #1537	; 0x601
 800beaa:	4822      	ldr	r0, [pc, #136]	; (800bf34 <handlePublishAcks+0xd4>)
 800beac:	f006 f86e 	bl	8011f8c <__assert_func>

    appCallback = pContext->appCallback;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb4:	61bb      	str	r3, [r7, #24]

    ackType = getAckFromPacketType( pIncomingPacket->type );
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fbe4 	bl	800b688 <getAckFromPacketType>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]
    status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bec4:	f107 0314 	add.w	r3, r7, #20
 800bec8:	2200      	movs	r2, #0
 800beca:	4619      	mov	r1, r3
 800becc:	6838      	ldr	r0, [r7, #0]
 800bece:	f002 f822 	bl	800df16 <MQTT_DeserializeAck>
 800bed2:	4603      	mov	r3, r0
 800bed4:	77fb      	strb	r3, [r7, #31]
    LogInfo( ( "Ack packet deserialized with result: %s.",
               MQTT_Status_strerror( status ) ) );

    if( status == MQTTSuccess )
 800bed6:	7ffb      	ldrb	r3, [r7, #31]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <handlePublishAcks+0x92>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        status = MQTT_UpdateStateAck( pContext,
 800bedc:	8ab9      	ldrh	r1, [r7, #20]
 800bede:	7dfa      	ldrb	r2, [r7, #23]
 800bee0:	f107 0316 	add.w	r3, r7, #22
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	2301      	movs	r3, #1
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f002 fe19 	bl	800eb20 <MQTT_UpdateStateAck>
 800beee:	4603      	mov	r3, r0
 800bef0:	77fb      	strb	r3, [r7, #31]
                        ( unsigned short ) packetIdentifier,
                        MQTT_Status_strerror( status ) ) );
        }
    }

    if( status == MQTTSuccess )
 800bef2:	7ffb      	ldrb	r3, [r7, #31]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d113      	bne.n	800bf20 <handlePublishAcks+0xc0>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800bef8:	8abb      	ldrh	r3, [r7, #20]
 800befa:	813b      	strh	r3, [r7, #8]
        deserializedInfo.deserializationResult = status;
 800befc:	7ffb      	ldrb	r3, [r7, #31]
 800befe:	743b      	strb	r3, [r7, #16]
        deserializedInfo.pPublishInfo = NULL;
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]

        /* Invoke application callback to hand the buffer over to application
         * before sending acks. */
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800bf04:	f107 0208 	add.w	r2, r7, #8
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	4798      	blx	r3

        /* Send PUBREL or PUBCOMP if necessary. */
        status = sendPublishAcks( pContext,
 800bf10:	8abb      	ldrh	r3, [r7, #20]
 800bf12:	7dba      	ldrb	r2, [r7, #22]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fe1e 	bl	800bb58 <sendPublishAcks>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	77fb      	strb	r3, [r7, #31]
                                  packetIdentifier,
                                  publishRecordState );
    }

    return status;
 800bf20:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3720      	adds	r7, #32
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	080175c8 	.word	0x080175c8
 800bf30:	080180d4 	.word	0x080180d4
 800bf34:	080174ec 	.word	0x080174ec
 800bf38:	08017798 	.word	0x08017798
 800bf3c:	080177b0 	.word	0x080177b0

0800bf40 <handleIncomingAck>:
/*-----------------------------------------------------------*/

static MQTTStatus_t handleIncomingAck( MQTTContext_t * pContext,
                                       MQTTPacketInfo_t * pIncomingPacket,
                                       bool manageKeepAlive )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	; 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTBadResponse;
 800bf4e:	2305      	movs	r3, #5
 800bf50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint16_t packetIdentifier = MQTT_PACKET_ID_INVALID;
 800bf54:	2300      	movs	r3, #0
 800bf56:	83fb      	strh	r3, [r7, #30]
    /* We should always invoke the app callback unless we receive a PINGRESP
     * and are managing keep alive, or if we receive an unknown packet. We
     * initialize this to false since the callback must be invoked before
     * sending any PUBREL or PUBCOMP. However, for other cases, we invoke it
     * at the end to reduce the complexity of this function. */
    bool invokeAppCallback = false;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    MQTTEventCallback_t appCallback = NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d106      	bne.n	800bf76 <handleIncomingAck+0x36>
 800bf68:	4b54      	ldr	r3, [pc, #336]	; (800c0bc <handleIncomingAck+0x17c>)
 800bf6a:	4a55      	ldr	r2, [pc, #340]	; (800c0c0 <handleIncomingAck+0x180>)
 800bf6c:	f240 614a 	movw	r1, #1610	; 0x64a
 800bf70:	4854      	ldr	r0, [pc, #336]	; (800c0c4 <handleIncomingAck+0x184>)
 800bf72:	f006 f80b 	bl	8011f8c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d106      	bne.n	800bf8a <handleIncomingAck+0x4a>
 800bf7c:	4b52      	ldr	r3, [pc, #328]	; (800c0c8 <handleIncomingAck+0x188>)
 800bf7e:	4a50      	ldr	r2, [pc, #320]	; (800c0c0 <handleIncomingAck+0x180>)
 800bf80:	f240 614b 	movw	r1, #1611	; 0x64b
 800bf84:	484f      	ldr	r0, [pc, #316]	; (800c0c4 <handleIncomingAck+0x184>)
 800bf86:	f006 f801 	bl	8011f8c <__assert_func>
    assert( pContext->appCallback != NULL );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <handleIncomingAck+0x60>
 800bf92:	4b4e      	ldr	r3, [pc, #312]	; (800c0cc <handleIncomingAck+0x18c>)
 800bf94:	4a4a      	ldr	r2, [pc, #296]	; (800c0c0 <handleIncomingAck+0x180>)
 800bf96:	f240 614c 	movw	r1, #1612	; 0x64c
 800bf9a:	484a      	ldr	r0, [pc, #296]	; (800c0c4 <handleIncomingAck+0x184>)
 800bf9c:	f005 fff6 	bl	8011f8c <__assert_func>

    appCallback = pContext->appCallback;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa4:	623b      	str	r3, [r7, #32]

    LogDebug( ( "Received packet of type %02x.",
                ( unsigned int ) pIncomingPacket->type ) );

    switch( pIncomingPacket->type )
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2bd0      	cmp	r3, #208	; 0xd0
 800bfac:	d01d      	beq.n	800bfea <handleIncomingAck+0xaa>
 800bfae:	2bd0      	cmp	r3, #208	; 0xd0
 800bfb0:	dc64      	bgt.n	800c07c <handleIncomingAck+0x13c>
 800bfb2:	2bb0      	cmp	r3, #176	; 0xb0
 800bfb4:	d044      	beq.n	800c040 <handleIncomingAck+0x100>
 800bfb6:	2bb0      	cmp	r3, #176	; 0xb0
 800bfb8:	dc60      	bgt.n	800c07c <handleIncomingAck+0x13c>
 800bfba:	2b90      	cmp	r3, #144	; 0x90
 800bfbc:	d040      	beq.n	800c040 <handleIncomingAck+0x100>
 800bfbe:	2b90      	cmp	r3, #144	; 0x90
 800bfc0:	dc5c      	bgt.n	800c07c <handleIncomingAck+0x13c>
 800bfc2:	2b70      	cmp	r3, #112	; 0x70
 800bfc4:	d009      	beq.n	800bfda <handleIncomingAck+0x9a>
 800bfc6:	2b70      	cmp	r3, #112	; 0x70
 800bfc8:	dc58      	bgt.n	800c07c <handleIncomingAck+0x13c>
 800bfca:	2b62      	cmp	r3, #98	; 0x62
 800bfcc:	d005      	beq.n	800bfda <handleIncomingAck+0x9a>
 800bfce:	2b62      	cmp	r3, #98	; 0x62
 800bfd0:	dc54      	bgt.n	800c07c <handleIncomingAck+0x13c>
 800bfd2:	2b40      	cmp	r3, #64	; 0x40
 800bfd4:	d001      	beq.n	800bfda <handleIncomingAck+0x9a>
 800bfd6:	2b50      	cmp	r3, #80	; 0x50
 800bfd8:	d150      	bne.n	800c07c <handleIncomingAck+0x13c>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBREL:
        case MQTT_PACKET_TYPE_PUBCOMP:

            /* Handle all the publish acks. The app callback is invoked here. */
            status = handlePublishAcks( pContext, pIncomingPacket );
 800bfda:	68b9      	ldr	r1, [r7, #8]
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7ff ff3f 	bl	800be60 <handlePublishAcks>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            break;
 800bfe8:	e04d      	b.n	800c086 <handleIncomingAck+0x146>

        case MQTT_PACKET_TYPE_PINGRESP:
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800bfea:	f107 031e 	add.w	r3, r7, #30
 800bfee:	2200      	movs	r2, #0
 800bff0:	4619      	mov	r1, r3
 800bff2:	68b8      	ldr	r0, [r7, #8]
 800bff4:	f001 ff8f 	bl	800df16 <MQTT_DeserializeAck>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) && !manageKeepAlive;
 800bffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c002:	2b00      	cmp	r3, #0
 800c004:	d107      	bne.n	800c016 <handleIncomingAck+0xd6>
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	f083 0301 	eor.w	r3, r3, #1
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <handleIncomingAck+0xd6>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <handleIncomingAck+0xd8>
 800c016:	2300      	movs	r3, #0
 800c018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c01c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            if( ( status == MQTTSuccess ) && ( manageKeepAlive == true ) )
 800c028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d129      	bne.n	800c084 <handleIncomingAck+0x144>
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d026      	beq.n	800c084 <handleIncomingAck+0x144>
            {
                pContext->waitingForPingResp = false;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            }

            break;
 800c03e:	e021      	b.n	800c084 <handleIncomingAck+0x144>

        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
            /* Deserialize and give these to the app provided callback. */
            status = MQTT_DeserializeAck( pIncomingPacket, &packetIdentifier, NULL );
 800c040:	f107 031e 	add.w	r3, r7, #30
 800c044:	2200      	movs	r2, #0
 800c046:	4619      	mov	r1, r3
 800c048:	68b8      	ldr	r0, [r7, #8]
 800c04a:	f001 ff64 	bl	800df16 <MQTT_DeserializeAck>
 800c04e:	4603      	mov	r3, r0
 800c050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            invokeAppCallback = ( status == MQTTSuccess ) || ( status == MQTTServerRefused );
 800c054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d003      	beq.n	800c064 <handleIncomingAck+0x124>
 800c05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c060:	2b06      	cmp	r3, #6
 800c062:	d101      	bne.n	800c068 <handleIncomingAck+0x128>
 800c064:	2301      	movs	r3, #1
 800c066:	e000      	b.n	800c06a <handleIncomingAck+0x12a>
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c06e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            break;
 800c07a:	e004      	b.n	800c086 <handleIncomingAck+0x146>

        default:
            /* Bad response from the server. */
            LogError( ( "Unexpected packet type from server: PacketType=%02x.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800c07c:	2305      	movs	r3, #5
 800c07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c082:	e000      	b.n	800c086 <handleIncomingAck+0x146>
            break;
 800c084:	bf00      	nop
    }

    if( invokeAppCallback == true )
 800c086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00f      	beq.n	800c0ae <handleIncomingAck+0x16e>
    {
        /* Set fields of deserialized struct. */
        deserializedInfo.packetIdentifier = packetIdentifier;
 800c08e:	8bfb      	ldrh	r3, [r7, #30]
 800c090:	823b      	strh	r3, [r7, #16]
        deserializedInfo.deserializationResult = status;
 800c092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c096:	763b      	strb	r3, [r7, #24]
        deserializedInfo.pPublishInfo = NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	617b      	str	r3, [r7, #20]
        appCallback( pContext, pIncomingPacket, &deserializedInfo );
 800c09c:	f107 0210 	add.w	r2, r7, #16
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	68b9      	ldr	r1, [r7, #8]
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	4798      	blx	r3
        /* In case a SUBACK indicated refusal, reset the status to continue the loop. */
        status = MQTTSuccess;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800c0ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3728      	adds	r7, #40	; 0x28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	080175c8 	.word	0x080175c8
 800c0c0:	080180e8 	.word	0x080180e8
 800c0c4:	080174ec 	.word	0x080174ec
 800c0c8:	08017798 	.word	0x08017798
 800c0cc:	080177b0 	.word	0x080177b0

0800c0d0 <receiveSingleIteration>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receiveSingleIteration( MQTTContext_t * pContext,
                                            bool manageKeepAlive )
{
 800c0d0:	b590      	push	{r4, r7, lr}
 800c0d2:	b08b      	sub	sp, #44	; 0x2c
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c0e2:	f107 0308 	add.w	r3, r7, #8
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	605a      	str	r2, [r3, #4]
 800c0ec:	609a      	str	r2, [r3, #8]
 800c0ee:	60da      	str	r2, [r3, #12]
    int32_t recvBytes;
    size_t totalMQTTPacketLength = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	623b      	str	r3, [r7, #32]

    assert( pContext != NULL );
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <receiveSingleIteration+0x38>
 800c0fa:	4b67      	ldr	r3, [pc, #412]	; (800c298 <receiveSingleIteration+0x1c8>)
 800c0fc:	4a67      	ldr	r2, [pc, #412]	; (800c29c <receiveSingleIteration+0x1cc>)
 800c0fe:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800c102:	4867      	ldr	r0, [pc, #412]	; (800c2a0 <receiveSingleIteration+0x1d0>)
 800c104:	f005 ff42 	bl	8011f8c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d106      	bne.n	800c11e <receiveSingleIteration+0x4e>
 800c110:	4b64      	ldr	r3, [pc, #400]	; (800c2a4 <receiveSingleIteration+0x1d4>)
 800c112:	4a62      	ldr	r2, [pc, #392]	; (800c29c <receiveSingleIteration+0x1cc>)
 800c114:	f240 6191 	movw	r1, #1681	; 0x691
 800c118:	4861      	ldr	r0, [pc, #388]	; (800c2a0 <receiveSingleIteration+0x1d0>)
 800c11a:	f005 ff37 	bl	8011f8c <__assert_func>

    /* Read as many bytes as possible into the network buffer. */
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	69d0      	ldr	r0, [r2, #28]
                                                   &( pContext->networkBuffer.pBuffer[ pContext->index ] ),
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	6a11      	ldr	r1, [r2, #32]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c12e:	188c      	adds	r4, r1, r2
                                                   pContext->networkBuffer.size - pContext->index );
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	6c12      	ldr	r2, [r2, #64]	; 0x40
    recvBytes = pContext->transportInterface.recv( pContext->transportInterface.pNetworkContext,
 800c138:	1a8a      	subs	r2, r1, r2
 800c13a:	4621      	mov	r1, r4
 800c13c:	4798      	blx	r3
 800c13e:	61f8      	str	r0, [r7, #28]

    if( recvBytes < 0 )
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	2b00      	cmp	r3, #0
 800c144:	da03      	bge.n	800c14e <receiveSingleIteration+0x7e>
    {
        /* The receive function has failed. Bubble up the error up to the user. */
        status = MQTTRecvFailed;
 800c146:	2304      	movs	r3, #4
 800c148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c14c:	e020      	b.n	800c190 <receiveSingleIteration+0xc0>
    }
    else if( ( recvBytes == 0 ) && ( pContext->index == 0U ) )
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d107      	bne.n	800c164 <receiveSingleIteration+0x94>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d103      	bne.n	800c164 <receiveSingleIteration+0x94>
    {
        /* No more bytes available since the last read and neither is anything in
         * the buffer. */
        status = MQTTNoDataAvailable;
 800c15c:	2307      	movs	r3, #7
 800c15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c162:	e015      	b.n	800c190 <receiveSingleIteration+0xc0>
    /* Either something was received, or there is still data to be processed in the
     * buffer, or both. */
    else
    {
        /* Update the number of bytes in the MQTT fixed buffer. */
        pContext->index += ( size_t ) recvBytes;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	441a      	add	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	641a      	str	r2, [r3, #64]	; 0x40

        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a18      	ldr	r0, [r3, #32]
                                                          &( pContext->index ),
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	3340      	adds	r3, #64	; 0x40
        status = MQTT_ProcessIncomingPacketTypeAndLength( pContext->networkBuffer.pBuffer,
 800c178:	f107 0208 	add.w	r2, r7, #8
 800c17c:	4619      	mov	r1, r3
 800c17e:	f001 ff83 	bl	800e088 <MQTT_ProcessIncomingPacketTypeAndLength>
 800c182:	4603      	mov	r3, r0
 800c184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          &incomingPacket );

        totalMQTTPacketLength = incomingPacket.remainingLength + incomingPacket.headerLength;
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	4413      	add	r3, r2
 800c18e:	623b      	str	r3, [r7, #32]
    }

    /* No data was received, check for keep alive timeout. */
    if( recvBytes == 0 )
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d112      	bne.n	800c1bc <receiveSingleIteration+0xec>
    {
        if( manageKeepAlive == true )
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00f      	beq.n	800c1bc <receiveSingleIteration+0xec>
        {
            /* Keep the copy of the status to be reset later. */
            MQTTStatus_t statusCopy = status;
 800c19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a0:	76fb      	strb	r3, [r7, #27]

            /* Assign status so an error can be bubbled up to application,
             * but reset it on success. */
            status = handleKeepAlive( pContext );
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff fd3a 	bl	800bc1c <handleKeepAlive>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if( status == MQTTSuccess )
 800c1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <receiveSingleIteration+0xec>
            {
                /* Reset the status. */
                status = statusCopy;
 800c1b6:	7efb      	ldrb	r3, [r7, #27]
 800c1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    /* Check whether there is data available before processing the packet further. */
    if( ( status == MQTTNeedMoreBytes ) || ( status == MQTTNoDataAvailable ) )
 800c1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c0:	2b0b      	cmp	r3, #11
 800c1c2:	d01e      	beq.n	800c202 <receiveSingleIteration+0x132>
 800c1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1c8:	2b07      	cmp	r3, #7
 800c1ca:	d01a      	beq.n	800c202 <receiveSingleIteration+0x132>
    {
        /* Do nothing as there is nothing to be processed right now. The proper
         * error code will be bubbled up to the user. */
    }
    /* Any other error code. */
    else if( status != MQTTSuccess )
 800c1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d116      	bne.n	800c202 <receiveSingleIteration+0x132>
    {
        LogError( ( "Call to receiveSingleIteration failed. Status=%s",
                    MQTT_Status_strerror( status ) ) );
    }
    /* If the MQTT Packet size is bigger than the buffer itself. */
    else if( totalMQTTPacketLength > pContext->networkBuffer.size )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d8:	6a3a      	ldr	r2, [r7, #32]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d909      	bls.n	800c1f2 <receiveSingleIteration+0x122>
    {
        /* Discard the packet from the receive buffer and drain the pending
         * data from the socket buffer. */
        status = discardStoredPacket( pContext,
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff fbb5 	bl	800b954 <discardStoredPacket>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1f0:	e007      	b.n	800c202 <receiveSingleIteration+0x132>
                                      &incomingPacket );
    }
    /* If the total packet is of more length than the bytes we have available. */
    else if( totalMQTTPacketLength > pContext->index )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	6a3a      	ldr	r2, [r7, #32]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d902      	bls.n	800c202 <receiveSingleIteration+0x132>
    {
        status = MQTTNeedMoreBytes;
 800c1fc:	230b      	movs	r3, #11
 800c1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        /* MISRA else. */
    }

    /* Handle received packet. If incomplete data was read then this will not execute. */
    if( status == MQTTSuccess )
 800c202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c206:	2b00      	cmp	r3, #0
 800c208:	d138      	bne.n	800c27c <receiveSingleIteration+0x1ac>
    {
        incomingPacket.pRemainingData = &pContext->networkBuffer.pBuffer[ incomingPacket.headerLength ];
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1a      	ldr	r2, [r3, #32]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	4413      	add	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]

        /* PUBLISH packets allow flags in the lower four bits. For other
         * packet types, they are reserved. */
        if( ( incomingPacket.type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 800c214:	7a3b      	ldrb	r3, [r7, #8]
 800c216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c21a:	2b30      	cmp	r3, #48	; 0x30
 800c21c:	d109      	bne.n	800c232 <receiveSingleIteration+0x162>
        {
            status = handleIncomingPublish( pContext, &incomingPacket );
 800c21e:	f107 0308 	add.w	r3, r7, #8
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff fd77 	bl	800bd18 <handleIncomingPublish>
 800c22a:	4603      	mov	r3, r0
 800c22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c230:	e009      	b.n	800c246 <receiveSingleIteration+0x176>
        }
        else
        {
            status = handleIncomingAck( pContext, &incomingPacket, manageKeepAlive );
 800c232:	78fa      	ldrb	r2, [r7, #3]
 800c234:	f107 0308 	add.w	r3, r7, #8
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fe80 	bl	800bf40 <handleIncomingAck>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        /* Update the index to reflect the remaining bytes in the buffer.  */
        pContext->index -= totalMQTTPacketLength;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c24a:	6a3b      	ldr	r3, [r7, #32]
 800c24c:	1ad2      	subs	r2, r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Move the remaining bytes to the front of the buffer. */
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a18      	ldr	r0, [r3, #32]
                          &( pContext->networkBuffer.pBuffer[ totalMQTTPacketLength ] ),
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1a      	ldr	r2, [r3, #32]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	18d1      	adds	r1, r2, r3
        ( void ) memmove( pContext->networkBuffer.pBuffer,
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c262:	461a      	mov	r2, r3
 800c264:	f007 f836 	bl	80132d4 <memmove>
                          pContext->index );

        if( status == MQTTSuccess )
 800c268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d105      	bne.n	800c27c <receiveSingleIteration+0x1ac>
        {
            pContext->lastPacketRxTime = pContext->getTime();
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	4798      	blx	r3
 800c276:	4602      	mov	r2, r0
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }

    if( status == MQTTNoDataAvailable )
 800c27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c280:	2b07      	cmp	r3, #7
 800c282:	d102      	bne.n	800c28a <receiveSingleIteration+0x1ba>
    {
        /* No data available is not an error. Reset to MQTTSuccess so the
         * return code will indicate success. */
        status = MQTTSuccess;
 800c284:	2300      	movs	r3, #0
 800c286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return status;
 800c28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c28e:	4618      	mov	r0, r3
 800c290:	372c      	adds	r7, #44	; 0x2c
 800c292:	46bd      	mov	sp, r7
 800c294:	bd90      	pop	{r4, r7, pc}
 800c296:	bf00      	nop
 800c298:	080175c8 	.word	0x080175c8
 800c29c:	080180fc 	.word	0x080180fc
 800c2a0:	080174ec 	.word	0x080174ec
 800c2a4:	08017704 	.word	0x08017704

0800c2a8 <validateSubscribeUnsubscribeParams>:

static MQTTStatus_t validateSubscribeUnsubscribeParams( const MQTTContext_t * pContext,
                                                        const MQTTSubscribeInfo_t * pSubscriptionList,
                                                        size_t subscriptionCount,
                                                        uint16_t packetId )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
 800c2b4:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	75fb      	strb	r3, [r7, #23]
    size_t iterator;

    /* Validate all the parameters. */
    if( ( pContext == NULL ) || ( pSubscriptionList == NULL ) )
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <validateSubscribeUnsubscribeParams+0x1e>
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <validateSubscribeUnsubscribeParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pSubscriptionList=%p.",
                    ( void * ) pContext,
                    ( void * ) pSubscriptionList ) );
        status = MQTTBadParameter;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	75fb      	strb	r3, [r7, #23]
 800c2ca:	e020      	b.n	800c30e <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( subscriptionCount == 0UL )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d102      	bne.n	800c2d8 <validateSubscribeUnsubscribeParams+0x30>
    {
        LogError( ( "Subscription count is 0." ) );
        status = MQTTBadParameter;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	75fb      	strb	r3, [r7, #23]
 800c2d6:	e01a      	b.n	800c30e <validateSubscribeUnsubscribeParams+0x66>
    }
    else if( packetId == 0U )
 800c2d8:	887b      	ldrh	r3, [r7, #2]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d102      	bne.n	800c2e4 <validateSubscribeUnsubscribeParams+0x3c>
    {
        LogError( ( "Packet Id for subscription packet is 0." ) );
        status = MQTTBadParameter;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	75fb      	strb	r3, [r7, #23]
 800c2e2:	e014      	b.n	800c30e <validateSubscribeUnsubscribeParams+0x66>
    }
    else
    {
        if( pContext->incomingPublishRecords == NULL )
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d110      	bne.n	800c30e <validateSubscribeUnsubscribeParams+0x66>
        {
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	e009      	b.n	800c306 <validateSubscribeUnsubscribeParams+0x5e>
            {
                if( pSubscriptionList->qos > MQTTQoS0 )
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d002      	beq.n	800c300 <validateSubscribeUnsubscribeParams+0x58>
                {
                    LogError( ( "The incoming publish record list is not "
                                "initialised for QoS1/QoS2 records. Please call "
                                " MQTT_InitStatefulQoS to enable use of QoS1 and "
                                " QoS2 packets." ) );
                    status = MQTTBadParameter;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	75fb      	strb	r3, [r7, #23]
                    break;
 800c2fe:	e006      	b.n	800c30e <validateSubscribeUnsubscribeParams+0x66>
            for( iterator = 0; iterator < subscriptionCount; iterator++ )
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	3301      	adds	r3, #1
 800c304:	613b      	str	r3, [r7, #16]
 800c306:	693a      	ldr	r2, [r7, #16]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d3f1      	bcc.n	800c2f2 <validateSubscribeUnsubscribeParams+0x4a>
                }
            }
        }
    }

    return status;
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c310:	4618      	mov	r0, r3
 800c312:	371c      	adds	r7, #28
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serializedLength[ CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	61fb      	str	r3, [r7, #28]
    TransportOutVector_t * pLocalIterator = iterator;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	617b      	str	r3, [r7, #20]
    size_t vectorsAdded = 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) ? ( string != NULL ) : true );
 800c338:	88fb      	ldrh	r3, [r7, #6]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d009      	beq.n	800c352 <addEncodedStringToVector+0x36>
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d106      	bne.n	800c352 <addEncodedStringToVector+0x36>
 800c344:	4b1e      	ldr	r3, [pc, #120]	; (800c3c0 <addEncodedStringToVector+0xa4>)
 800c346:	4a1f      	ldr	r2, [pc, #124]	; (800c3c4 <addEncodedStringToVector+0xa8>)
 800c348:	f240 7151 	movw	r1, #1873	; 0x751
 800c34c:	481e      	ldr	r0, [pc, #120]	; (800c3c8 <addEncodedStringToVector+0xac>)
 800c34e:	f005 fe1d 	bl	8011f8c <__assert_func>

    serializedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800c352:	88fb      	ldrh	r3, [r7, #6]
 800c354:	0a1b      	lsrs	r3, r3, #8
 800c356:	b29b      	uxth	r3, r3
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	701a      	strb	r2, [r3, #0]
    serializedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	88fa      	ldrh	r2, [r7, #6]
 800c364:	b2d2      	uxtb	r2, r2
 800c366:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serializedLength;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2202      	movs	r2, #2
 800c372:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	3301      	adds	r3, #1
 800c378:	61bb      	str	r3, [r7, #24]
    packetLength = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800c37a:	2302      	movs	r3, #2
 800c37c:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d011      	beq.n	800c3a8 <addEncodedStringToVector+0x8c>
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00e      	beq.n	800c3a8 <addEncodedStringToVector+0x8c>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3308      	adds	r3, #8
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	3308      	adds	r3, #8
 800c396:	88fa      	ldrh	r2, [r7, #6]
 800c398:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	3301      	adds	r3, #1
 800c39e:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800c3a0:	88fb      	ldrh	r3, [r7, #6]
 800c3a2:	69fa      	ldr	r2, [r7, #28]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	441a      	add	r2, r3
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800c3b4:	69bb      	ldr	r3, [r7, #24]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3720      	adds	r7, #32
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	080177d0 	.word	0x080177d0
 800c3c4:	08018114 	.word	0x08018114
 800c3c8:	080174ec 	.word	0x080174ec

0800c3cc <sendSubscribeWithoutCopy>:
static MQTTStatus_t sendSubscribeWithoutCopy( MQTTContext_t * pContext,
                                              const MQTTSubscribeInfo_t * pSubscriptionList,
                                              size_t subscriptionCount,
                                              uint16_t packetId,
                                              size_t remainingLength )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b09a      	sub	sp, #104	; 0x68
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTSuccess;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint8_t * pIndex;
    TransportOutVector_t pIoVector[ MQTT_SUB_UNSUB_MAX_VECTORS ];
    TransportOutVector_t * pIterator;
    uint8_t serializedTopicFieldLength[ MQTT_SUB_UNSUB_MAX_VECTORS ][ CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES ];
    size_t totalPacketLength = 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	61bb      	str	r3, [r7, #24]
    size_t ioVectorLength = 0U;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	657b      	str	r3, [r7, #84]	; 0x54
    size_t subscriptionsSent = 0U;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	653b      	str	r3, [r7, #80]	; 0x50

    /* The vector array should be at least three element long as the topic
     * string needs these many vector elements to be stored. */
    assert( MQTT_SUB_UNSUB_MAX_VECTORS >= CORE_MQTT_SUBSCRIBE_PER_TOPIC_VECTOR_LENGTH );

    pIndex = subscribeheader;
 800c3ec:	f107 0310 	add.w	r3, r7, #16
 800c3f0:	64bb      	str	r3, [r7, #72]	; 0x48
    pIterator = pIoVector;
 800c3f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f6:	65bb      	str	r3, [r7, #88]	; 0x58

    pIndex = MQTT_SerializeSubscribeHeader( remainingLength,
 800c3f8:	887b      	ldrh	r3, [r7, #2]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c3fe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c400:	f001 fc6a 	bl	800dcd8 <MQTT_SerializeSubscribeHeader>
 800c404:	64b8      	str	r0, [r7, #72]	; 0x48
                                            pIndex,
                                            packetId );

    /* The header is to be sent first. */
    pIterator->iov_base = subscribeheader;
 800c406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c408:	f107 0210 	add.w	r2, r7, #16
 800c40c:	601a      	str	r2, [r3, #0]
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
    /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
    /* coverity[misra_c_2012_rule_18_2_violation] */
    /* coverity[misra_c_2012_rule_10_8_violation] */
    pIterator->iov_len = ( size_t ) ( pIndex - subscribeheader );
 800c40e:	f107 0310 	add.w	r3, r7, #16
 800c412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	461a      	mov	r2, r3
 800c418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c41a:	605a      	str	r2, [r3, #4]
    totalPacketLength += pIterator->iov_len;
 800c41c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	4413      	add	r3, r2
 800c424:	61bb      	str	r3, [r7, #24]
    pIterator++;
 800c426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c428:	3308      	adds	r3, #8
 800c42a:	65bb      	str	r3, [r7, #88]	; 0x58
    ioVectorLength++;
 800c42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c42e:	3301      	adds	r3, #1
 800c430:	657b      	str	r3, [r7, #84]	; 0x54

    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c432:	e062      	b.n	800c4fa <sendSubscribeWithoutCopy+0x12e>
    {
        /* Reset the index for next iteration. */
        topicFieldLengthIndex = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Check whether the subscription topic (with QoS) will fit in the
         * given vector. */
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - CORE_MQTT_SUBSCRIBE_PER_TOPIC_VECTOR_LENGTH ) ) &&
 800c438:	e043      	b.n	800c4c2 <sendSubscribeWithoutCopy+0xf6>
               ( subscriptionsSent < subscriptionCount ) )
        {
            /* The topic filter and the filter length gets sent next. */
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c43a:	f107 021c 	add.w	r2, r7, #28
 800c43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	18d0      	adds	r0, r2, r3
                                                     pSubscriptionList[ subscriptionsSent ].pTopicFilter,
 800c444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c446:	4613      	mov	r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	4413      	add	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	461a      	mov	r2, r3
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	4413      	add	r3, r2
 800c454:	6859      	ldr	r1, [r3, #4]
                                                     pSubscriptionList[ subscriptionsSent ].topicFilterLength,
 800c456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c458:	4613      	mov	r3, r2
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	461a      	mov	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4413      	add	r3, r2
 800c466:	891a      	ldrh	r2, [r3, #8]
            vectorsAdded = addEncodedStringToVector( serializedTopicFieldLength[ topicFieldLengthIndex ],
 800c468:	f107 0318 	add.w	r3, r7, #24
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c470:	f7ff ff54 	bl	800c31c <addEncodedStringToVector>
 800c474:	6478      	str	r0, [r7, #68]	; 0x44
                                                     pIterator,
                                                     &totalPacketLength );

            /* Update the pointer after the above operation. */
            pIterator = &pIterator[ vectorsAdded ];
 800c476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c47c:	4413      	add	r3, r2
 800c47e:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Lastly, the QoS gets sent. */
            pIterator->iov_base = &( pSubscriptionList[ subscriptionsSent ].qos );
 800c480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c482:	4613      	mov	r3, r2
 800c484:	005b      	lsls	r3, r3, #1
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	461a      	mov	r2, r3
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4413      	add	r3, r2
 800c490:	461a      	mov	r2, r3
 800c492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c494:	601a      	str	r2, [r3, #0]
            pIterator->iov_len = 1U;
 800c496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c498:	2201      	movs	r2, #1
 800c49a:	605a      	str	r2, [r3, #4]
            totalPacketLength += pIterator->iov_len;
 800c49c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	61bb      	str	r3, [r7, #24]

            /* Increment the pointer. */
            pIterator++;
 800c4a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Two slots get used by the topic string length and topic string.
             * One slot gets used by the quality of service. */
            ioVectorLength += vectorsAdded + 1U;
 800c4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4b0:	4413      	add	r3, r2
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	657b      	str	r3, [r7, #84]	; 0x54

            subscriptionsSent++;
 800c4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	653b      	str	r3, [r7, #80]	; 0x50

            /* The index needs to be updated for next iteration. */
            topicFieldLengthIndex++;
 800c4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4be:	3301      	adds	r3, #1
 800c4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
        while( ( ioVectorLength <= ( MQTT_SUB_UNSUB_MAX_VECTORS - CORE_MQTT_SUBSCRIBE_PER_TOPIC_VECTOR_LENGTH ) ) &&
 800c4c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d803      	bhi.n	800c4d0 <sendSubscribeWithoutCopy+0x104>
 800c4c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d3b4      	bcc.n	800c43a <sendSubscribeWithoutCopy+0x6e>
        }

        if( sendMessageVector( pContext,
 800c4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f7fe ff4f 	bl	800b37c <sendMessageVector>
 800c4de:	4603      	mov	r3, r0
                               pIoVector,
                               ioVectorLength ) != ( int32_t ) totalPacketLength )
 800c4e0:	69ba      	ldr	r2, [r7, #24]
        if( sendMessageVector( pContext,
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d002      	beq.n	800c4ec <sendSubscribeWithoutCopy+0x120>
        {
            status = MQTTSendFailed;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }

        /* Update the iterator for the next potential loop iteration. */
        pIterator = pIoVector;
 800c4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4f0:	65bb      	str	r3, [r7, #88]	; 0x58
        /* Reset the vector length for the next potential loop iteration. */
        ioVectorLength = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	657b      	str	r3, [r7, #84]	; 0x54
        /* Reset the packet length for the next potential loop iteration. */
        totalPacketLength = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	61bb      	str	r3, [r7, #24]
    while( ( status == MQTTSuccess ) && ( subscriptionsSent < subscriptionCount ) )
 800c4fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d103      	bne.n	800c50a <sendSubscribeWithoutCopy+0x13e>
 800c502:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	429a      	cmp	r2, r3
 800c508:	d394      	bcc.n	800c434 <sendSubscribeWithoutCopy+0x68>
    }

    return status;
 800c50a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3760      	adds	r7, #96	; 0x60
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b090      	sub	sp, #64	; 0x40
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	60f8      	str	r0, [r7, #12]
 800c51e:	60b9      	str	r1, [r7, #8]
 800c520:	607a      	str	r2, [r7, #4]
 800c522:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c524:	2300      	movs	r3, #0
 800c526:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     * Packet ID (only when QoS > QoS0)                    + 1 = 3
     * Payload                                             + 1 = 4  */
    TransportOutVector_t pIoVector[ 4U ];

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	613b      	str	r3, [r7, #16]
    pIoVector[ 0U ].iov_len = headerSize;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	617b      	str	r3, [r7, #20]
    totalMessageLength = headerSize;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	637b      	str	r3, [r7, #52]	; 0x34

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	61bb      	str	r3, [r7, #24]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	891b      	ldrh	r3, [r3, #8]
 800c540:	61fb      	str	r3, [r7, #28]
    totalMessageLength += pPublishInfo->topicNameLength;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	891b      	ldrh	r3, [r3, #8]
 800c546:	461a      	mov	r2, r3
 800c548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54a:	4413      	add	r3, r2
 800c54c:	637b      	str	r3, [r7, #52]	; 0x34

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800c54e:	2302      	movs	r3, #2
 800c550:	63bb      	str	r3, [r7, #56]	; 0x38

    if( pPublishInfo->qos > MQTTQoS0 )
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d020      	beq.n	800c59c <sendPublishWithoutCopy+0x86>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800c55a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c55e:	0a1b      	lsrs	r3, r3, #8
 800c560:	b29b      	uxth	r3, r3
 800c562:	b2db      	uxtb	r3, r3
 800c564:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800c568:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	3340      	adds	r3, #64	; 0x40
 800c578:	443b      	add	r3, r7
 800c57a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c57e:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = sizeof( serializedPacketID );
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	3340      	adds	r3, #64	; 0x40
 800c588:	443b      	add	r3, r7
 800c58a:	2202      	movs	r2, #2
 800c58c:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	3301      	adds	r3, #1
 800c594:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += sizeof( serializedPacketID );
 800c596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c598:	3302      	adds	r3, #2
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d017      	beq.n	800c5d4 <sendPublishWithoutCopy+0xbe>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	68da      	ldr	r2, [r3, #12]
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	3340      	adds	r3, #64	; 0x40
 800c5ae:	443b      	add	r3, r7
 800c5b0:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	691a      	ldr	r2, [r3, #16]
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	3340      	adds	r3, #64	; 0x40
 800c5be:	443b      	add	r3, r7
 800c5c0:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += pPublishInfo->payloadLength;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	691b      	ldr	r3, [r3, #16]
 800c5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5d0:	4413      	add	r3, r2
 800c5d2:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800c5d4:	f107 0310 	add.w	r3, r7, #16
 800c5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7fe fecd 	bl	800b37c <sendMessageVector>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d002      	beq.n	800c5f0 <sendPublishWithoutCopy+0xda>
    {
        status = MQTTSendFailed;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    return status;
 800c5f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3740      	adds	r7, #64	; 0x40
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b0ac      	sub	sp, #176	; 0xb0
 800c600:	af02      	add	r7, sp, #8
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c60a:	2300      	movs	r3, #0
 800c60c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800c610:	2300      	movs	r3, #0
 800c612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800c616:	2300      	movs	r3, #0
 800c618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     * Will payload        + 2 = 7
     * Username            + 2 = 9
     * Password            + 2 = 11 */
    TransportOutVector_t pIoVector[ 11U ];

    iterator = pIoVector;
 800c61c:	f107 0310 	add.w	r3, r7, #16
 800c620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    pIndex = connectPacketHeader;
 800c624:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <sendConnectWithoutCopy+0x46>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800c63a:	2301      	movs	r3, #1
 800c63c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800c640:	e0ec      	b.n	800c81c <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	68b9      	ldr	r1, [r7, #8]
 800c648:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800c64c:	f001 fa36 	bl	800dabc <MQTT_SerializeConnectFixedHeader>
 800c650:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= sizeof( connectPacketHeader ) );
 800c654:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c658:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	2b0f      	cmp	r3, #15
 800c660:	d906      	bls.n	800c670 <sendConnectWithoutCopy+0x74>
 800c662:	4b71      	ldr	r3, [pc, #452]	; (800c828 <sendConnectWithoutCopy+0x22c>)
 800c664:	4a71      	ldr	r2, [pc, #452]	; (800c82c <sendConnectWithoutCopy+0x230>)
 800c666:	f640 01ad 	movw	r1, #2221	; 0x8ad
 800c66a:	4871      	ldr	r0, [pc, #452]	; (800c830 <sendConnectWithoutCopy+0x234>)
 800c66c:	f005 fc8e 	bl	8011f8c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800c670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c674:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800c678:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800c67a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c67e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	461a      	mov	r2, r3
 800c686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c68a:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800c68c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c690:	685a      	ldr	r2, [r3, #4]
 800c692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c696:	4413      	add	r3, r2
 800c698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800c69c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800c6a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
                                                 pConnectInfo->pClientIdentifier,
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	6859      	ldr	r1, [r3, #4]
                                                 pConnectInfo->clientIdentifierLength,
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	891a      	ldrh	r2, [r3, #8]
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800c6b8:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800c6bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6c6:	f7ff fe29 	bl	800c31c <addEncodedStringToVector>
 800c6ca:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800c6ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c6d8:	4413      	add	r3, r2
 800c6da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800c6de:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c6e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d03c      	beq.n	800c76c <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
                                                     pWillInfo->pTopicName,
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6859      	ldr	r1, [r3, #4]
                                                     pWillInfo->topicNameLength,
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	891a      	ldrh	r2, [r3, #8]
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800c6fa:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800c6fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c708:	f7ff fe08 	bl	800c31c <addEncodedStringToVector>
 800c70c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c710:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c71a:	4413      	add	r3, r2
 800c71c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c720:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c728:	4413      	add	r3, r2
 800c72a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800c736:	b29a      	uxth	r2, r3
 800c738:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800c73c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c746:	f7ff fde9 	bl	800c31c <addEncodedStringToVector>
 800c74a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c74e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c758:	4413      	add	r3, r2
 800c75a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c75e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c762:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c766:	4413      	add	r3, r2
 800c768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01d      	beq.n	800c7b0 <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
                                                     pConnectInfo->pUserName,
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	68d9      	ldr	r1, [r3, #12]
                                                     pConnectInfo->userNameLength,
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	8a1a      	ldrh	r2, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800c77c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800c780:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c78a:	f7ff fdc7 	bl	800c31c <addEncodedStringToVector>
 800c78e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c79c:	4413      	add	r3, r2
 800c79e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c7a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01d      	beq.n	800c7f4 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
                                                     pConnectInfo->pPassword,
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	6959      	ldr	r1, [r3, #20]
                                                     pConnectInfo->passwordLength,
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	8b1a      	ldrh	r2, [r3, #24]
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800c7c0:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800c7c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c7ce:	f7ff fda5 	bl	800c31c <addEncodedStringToVector>
 800c7d2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800c7d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800c7e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c7ee:	4413      	add	r3, r2
 800c7f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800c7f4:	f107 0310 	add.w	r3, r7, #16
 800c7f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7fe fdbc 	bl	800b37c <sendMessageVector>
 800c804:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800c808:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c80c:	461a      	mov	r2, r3
 800c80e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c812:	4293      	cmp	r3, r2
 800c814:	d002      	beq.n	800c81c <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800c816:	2303      	movs	r3, #3
 800c818:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800c81c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800c820:	4618      	mov	r0, r3
 800c822:	37a8      	adds	r7, #168	; 0xa8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	08017800 	.word	0x08017800
 800c82c:	08018130 	.word	0x08018130
 800c830:	080174ec 	.word	0x080174ec

0800c834 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b08c      	sub	sp, #48	; 0x30
 800c838:	af02      	add	r7, sp, #8
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	4613      	mov	r3, r2
 800c842:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800c844:	2300      	movs	r3, #0
 800c846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800c84e:	2300      	movs	r3, #0
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	2300      	movs	r3, #0
 800c854:	623b      	str	r3, [r7, #32]
 800c856:	2300      	movs	r3, #0
 800c858:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800c85a:	2300      	movs	r3, #0
 800c85c:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800c85e:	2300      	movs	r3, #0
 800c860:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d106      	bne.n	800c876 <receiveConnack+0x42>
 800c868:	4b4e      	ldr	r3, [pc, #312]	; (800c9a4 <receiveConnack+0x170>)
 800c86a:	4a4f      	ldr	r2, [pc, #316]	; (800c9a8 <receiveConnack+0x174>)
 800c86c:	f640 1115 	movw	r1, #2325	; 0x915
 800c870:	484e      	ldr	r0, [pc, #312]	; (800c9ac <receiveConnack+0x178>)
 800c872:	f005 fb8b 	bl	8011f8c <__assert_func>
    assert( pIncomingPacket != NULL );
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <receiveConnack+0x56>
 800c87c:	4b4c      	ldr	r3, [pc, #304]	; (800c9b0 <receiveConnack+0x17c>)
 800c87e:	4a4a      	ldr	r2, [pc, #296]	; (800c9a8 <receiveConnack+0x174>)
 800c880:	f640 1116 	movw	r1, #2326	; 0x916
 800c884:	4849      	ldr	r0, [pc, #292]	; (800c9ac <receiveConnack+0x178>)
 800c886:	f005 fb81 	bl	8011f8c <__assert_func>
    assert( pContext->getTime != NULL );
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d106      	bne.n	800c8a0 <receiveConnack+0x6c>
 800c892:	4b48      	ldr	r3, [pc, #288]	; (800c9b4 <receiveConnack+0x180>)
 800c894:	4a44      	ldr	r2, [pc, #272]	; (800c9a8 <receiveConnack+0x174>)
 800c896:	f640 1117 	movw	r1, #2327	; 0x917
 800c89a:	4844      	ldr	r0, [pc, #272]	; (800c9ac <receiveConnack+0x178>)
 800c89c:	f005 fb76 	bl	8011f8c <__assert_func>

    getTimeStamp = pContext->getTime;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	4798      	blx	r3
 800c8aa:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6918      	ldr	r0, [r3, #16]
                                                      pContext->transportInterface.pNetworkContext,
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	69db      	ldr	r3, [r3, #28]
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	f001 fba0 	bl	800dffc <MQTT_GetIncomingPacketTypeAndLength>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00e      	beq.n	800c8e6 <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	4798      	blx	r3
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	6979      	ldr	r1, [r7, #20]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7fe fecb 	bl	800b66c <calculateElapsedTime>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	bf94      	ite	ls
 800c8de:	2301      	movls	r3, #1
 800c8e0:	2300      	movhi	r3, #0
 800c8e2:	77fb      	strb	r3, [r7, #31]
 800c8e4:	e008      	b.n	800c8f8 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800c8e6:	8bbb      	ldrh	r3, [r7, #28]
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	bf8c      	ite	hi
 800c8ec:	2301      	movhi	r3, #1
 800c8ee:	2300      	movls	r3, #0
 800c8f0:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800c8f2:	8bbb      	ldrh	r3, [r7, #28]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800c8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8fc:	2b07      	cmp	r3, #7
 800c8fe:	d105      	bne.n	800c90c <receiveConnack+0xd8>
 800c900:	7ffb      	ldrb	r3, [r7, #31]
 800c902:	f083 0301 	eor.w	r3, r3, #1
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1cf      	bne.n	800c8ac <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c910:	2b00      	cmp	r3, #0
 800c912:	d123      	bne.n	800c95c <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	4798      	blx	r3
 800c918:	4603      	mov	r3, r0
 800c91a:	6979      	ldr	r1, [r7, #20]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fea5 	bl	800b66c <calculateElapsedTime>
 800c922:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d203      	bcs.n	800c934 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b20      	cmp	r3, #32
 800c93a:	d10c      	bne.n	800c956 <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	6a3a      	ldr	r2, [r7, #32]
 800c940:	9201      	str	r2, [sp, #4]
 800c942:	68da      	ldr	r2, [r3, #12]
 800c944:	9200      	str	r2, [sp, #0]
 800c946:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff f88b 	bl	800ba64 <receivePacket>
 800c94e:	4603      	mov	r3, r0
 800c950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c954:	e002      	b.n	800c95c <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800c956:	2305      	movs	r3, #5
 800c958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800c95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10b      	bne.n	800c97c <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a1a      	ldr	r2, [r3, #32]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800c96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c96e:	2100      	movs	r1, #0
 800c970:	6838      	ldr	r0, [r7, #0]
 800c972:	f001 fad0 	bl	800df16 <MQTT_DeserializeAck>
 800c976:	4603      	mov	r3, r0
 800c978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800c97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c980:	2b00      	cmp	r3, #0
 800c982:	d109      	bne.n	800c998 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d006      	beq.n	800c998 <receiveConnack+0x164>
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800c992:	2305      	movs	r3, #5
 800c994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3728      	adds	r7, #40	; 0x28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	080175c8 	.word	0x080175c8
 800c9a8:	08018148 	.word	0x08018148
 800c9ac:	080174ec 	.word	0x080174ec
 800c9b0:	08017798 	.word	0x08017798
 800c9b4:	080175ec 	.word	0x080175ec

0800c9b8 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <handleSessionResumption+0x30>
 800c9da:	4b2c      	ldr	r3, [pc, #176]	; (800ca8c <handleSessionResumption+0xd4>)
 800c9dc:	4a2c      	ldr	r2, [pc, #176]	; (800ca90 <handleSessionResumption+0xd8>)
 800c9de:	f640 118d 	movw	r1, #2445	; 0x98d
 800c9e2:	482c      	ldr	r0, [pc, #176]	; (800ca94 <handleSessionResumption+0xdc>)
 800c9e4:	f005 fad2 	bl	8011f8c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a18      	ldr	r0, [r3, #32]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	f006 fc85 	bl	8013308 <memset>

    if( sessionPresent == true )
 800c9fe:	78fb      	ldrb	r3, [r7, #3]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d023      	beq.n	800ca4c <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800ca04:	f107 020f 	add.w	r2, r7, #15
 800ca08:	f107 0310 	add.w	r3, r7, #16
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f002 f901 	bl	800ec16 <MQTT_PubrelToResend>
 800ca14:	4603      	mov	r3, r0
 800ca16:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800ca18:	e011      	b.n	800ca3e <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800ca1a:	7bfa      	ldrb	r2, [r7, #15]
 800ca1c:	8abb      	ldrh	r3, [r7, #20]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff f899 	bl	800bb58 <sendPublishAcks>
 800ca26:	4603      	mov	r3, r0
 800ca28:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800ca2a:	f107 020f 	add.w	r2, r7, #15
 800ca2e:	f107 0310 	add.w	r3, r7, #16
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f002 f8ee 	bl	800ec16 <MQTT_PubrelToResend>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800ca3e:	8abb      	ldrh	r3, [r7, #20]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01d      	beq.n	800ca80 <handleSessionResumption+0xc8>
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0e7      	beq.n	800ca1a <handleSessionResumption+0x62>
 800ca4a:	e019      	b.n	800ca80 <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d008      	beq.n	800ca66 <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	461a      	mov	r2, r3
 800ca60:	2100      	movs	r1, #0
 800ca62:	f006 fc51 	bl	8013308 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d008      	beq.n	800ca80 <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	461a      	mov	r2, r3
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	f006 fc44 	bl	8013308 <memset>
        }
    }

    return status;
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	080175c8 	.word	0x080175c8
 800ca90:	08018158 	.word	0x08018158
 800ca94:	080174ec 	.word	0x080174ec

0800ca98 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	4613      	mov	r3, r2
 800caa4:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800caa6:	2300      	movs	r3, #0
 800caa8:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <validatePublishParams+0x1e>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d102      	bne.n	800cabc <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800cab6:	2301      	movs	r3, #1
 800cab8:	75fb      	strb	r3, [r7, #23]
 800caba:	e01e      	b.n	800cafa <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <validatePublishParams+0x38>
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800caca:	2301      	movs	r3, #1
 800cacc:	75fb      	strb	r3, [r7, #23]
 800cace:	e014      	b.n	800cafa <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d006      	beq.n	800cae6 <validatePublishParams+0x4e>
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d102      	bne.n	800cae6 <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800cae0:	2301      	movs	r3, #1
 800cae2:	75fb      	strb	r3, [r7, #23]
 800cae4:	e009      	b.n	800cafa <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d105      	bne.n	800cafa <validatePublishParams+0x62>
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800caf6:	2301      	movs	r3, #1
 800caf8:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800cb16:	2300      	movs	r3, #0
 800cb18:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d005      	beq.n	800cb2c <MQTT_Init+0x24>
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <MQTT_Init+0x24>
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d102      	bne.n	800cb32 <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	75fb      	strb	r3, [r7, #23]
 800cb30:	e03a      	b.n	800cba8 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	75fb      	strb	r3, [r7, #23]
 800cb3c:	e034      	b.n	800cba8 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d102      	bne.n	800cb4a <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800cb44:	2301      	movs	r3, #1
 800cb46:	75fb      	strb	r3, [r7, #23]
 800cb48:	e02e      	b.n	800cba8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d102      	bne.n	800cb58 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800cb52:	2301      	movs	r3, #1
 800cb54:	75fb      	strb	r3, [r7, #23]
 800cb56:	e027      	b.n	800cba8 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800cb60:	2301      	movs	r3, #1
 800cb62:	75fb      	strb	r3, [r7, #23]
 800cb64:	e020      	b.n	800cba8 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800cb66:	2250      	movs	r2, #80	; 0x50
 800cb68:	2100      	movs	r1, #0
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f006 fbcc 	bl	8013308 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	f103 0410 	add.w	r4, r3, #16
 800cb80:	4613      	mov	r3, r2
 800cb82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb98:	3320      	adds	r3, #32
 800cb9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb9e:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2201      	movs	r2, #1
 800cba6:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	371c      	adds	r7, #28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd90      	pop	{r4, r7, pc}

0800cbb2 <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b08e      	sub	sp, #56	; 0x38
 800cbb6:	af02      	add	r7, sp, #8
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
 800cbbe:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800cbce:	f107 0314 	add.w	r3, r7, #20
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	605a      	str	r2, [r3, #4]
 800cbd8:	609a      	str	r2, [r3, #8]
 800cbda:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d005      	beq.n	800cbf2 <MQTT_Connect+0x40>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <MQTT_Connect+0x40>
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d102      	bne.n	800cbf8 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800cbf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d10a      	bne.n	800cc16 <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800cc00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	68b8      	ldr	r0, [r7, #8]
 800cc0c:	f000 ffce 	bl	800dbac <MQTT_GetConnectPacketSize>
 800cc10:	4603      	mov	r3, r0
 800cc12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800cc16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d108      	bne.n	800cc30 <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff fce9 	bl	800c5fc <sendConnectWithoutCopy>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800cc30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10d      	bne.n	800cc54 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
                                 timeoutMs,
                                 pConnectInfo->cleanSession,
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	781a      	ldrb	r2, [r3, #0]
        status = receiveConnack( pContext,
 800cc3c:	f107 0114 	add.w	r1, r7, #20
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	460b      	mov	r3, r1
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f7ff fdf3 	bl	800c834 <receiveConnack>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800cc54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d108      	bne.n	800cc6e <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	4619      	mov	r1, r3
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f7ff fea8 	bl	800c9b8 <handleSessionResumption>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800cc6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10f      	bne.n	800cc96 <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	885a      	ldrh	r2, [r3, #2]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800cc96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3730      	adds	r7, #48	; 0x30
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <MQTT_Subscribe>:

MQTTStatus_t MQTT_Subscribe( MQTTContext_t * pContext,
                             const MQTTSubscribeInfo_t * pSubscriptionList,
                             size_t subscriptionCount,
                             uint16_t packetId )
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b08a      	sub	sp, #40	; 0x28
 800cca6:	af02      	add	r7, sp, #8
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	807b      	strh	r3, [r7, #2]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	617b      	str	r3, [r7, #20]

    /* Validate arguments. */
    MQTTStatus_t status = validateSubscribeUnsubscribeParams( pContext,
 800ccb8:	887b      	ldrh	r3, [r7, #2]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7ff faf2 	bl	800c2a8 <validateSubscribeUnsubscribeParams>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	77fb      	strb	r3, [r7, #31]
                                                              pSubscriptionList,
                                                              subscriptionCount,
                                                              packetId );

    if( status == MQTTSuccess )
 800ccc8:	7ffb      	ldrb	r3, [r7, #31]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d109      	bne.n	800cce2 <MQTT_Subscribe+0x40>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetSubscribePacketSize( pSubscriptionList,
 800ccce:	f107 0314 	add.w	r3, r7, #20
 800ccd2:	f107 0218 	add.w	r2, r7, #24
 800ccd6:	6879      	ldr	r1, [r7, #4]
 800ccd8:	68b8      	ldr	r0, [r7, #8]
 800ccda:	f000 ffd3 	bl	800dc84 <MQTT_GetSubscribePacketSize>
 800ccde:	4603      	mov	r3, r0
 800cce0:	77fb      	strb	r3, [r7, #31]
        LogDebug( ( "SUBSCRIBE packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800cce2:	7ffb      	ldrb	r3, [r7, #31]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10a      	bne.n	800ccfe <MQTT_Subscribe+0x5c>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        /* Send MQTT SUBSCRIBE packet. */
        status = sendSubscribeWithoutCopy( pContext,
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	887a      	ldrh	r2, [r7, #2]
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff fb69 	bl	800c3cc <sendSubscribeWithoutCopy>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	77fb      	strb	r3, [r7, #31]
                                           remainingLength );

        MQTT_POST_SEND_HOOK( pContext );
    }

    return status;
 800ccfe:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3720      	adds	r7, #32
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08c      	sub	sp, #48	; 0x30
 800cd0c:	af02      	add	r7, sp, #8
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800cd16:	2300      	movs	r3, #0
 800cd18:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800cd22:	2300      	movs	r3, #0
 800cd24:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800cd26:	2300      	movs	r3, #0
 800cd28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     * an extra call to 'send' (in case writev is not defined) to send the
     * topic length.    */
    uint8_t mqttHeader[ 7U ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800cd2c:	88fb      	ldrh	r3, [r7, #6]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	68b9      	ldr	r1, [r7, #8]
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f7ff feb0 	bl	800ca98 <validatePublishParams>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800cd3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10a      	bne.n	800cd5c <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800cd46:	f107 0218 	add.w	r2, r7, #24
 800cd4a:	f107 031c 	add.w	r3, r7, #28
 800cd4e:	4619      	mov	r1, r3
 800cd50:	68b8      	ldr	r0, [r7, #8]
 800cd52:	f000 ffe8 	bl	800dd26 <MQTT_GetPublishPacketSize>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800cd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10a      	bne.n	800cd7a <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800cd64:	69f9      	ldr	r1, [r7, #28]
 800cd66:	f107 0320 	add.w	r3, r7, #32
 800cd6a:	f107 0210 	add.w	r2, r7, #16
 800cd6e:	68b8      	ldr	r0, [r7, #8]
 800cd70:	f000 fa00 	bl	800d174 <MQTT_SerializePublishHeaderWithoutTopic>
 800cd74:	4603      	mov	r3, r0
 800cd76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800cd7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d11b      	bne.n	800cdba <MQTT_Publish+0xb2>
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d017      	beq.n	800cdba <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
                                    packetId,
                                    pPublishInfo->qos );
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_ReserveState( pContext,
 800cd94:	88fb      	ldrh	r3, [r7, #6]
 800cd96:	4619      	mov	r1, r3
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f001 fdf5 	bl	800e988 <MQTT_ReserveState>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800cda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cda8:	2b09      	cmp	r3, #9
 800cdaa:	d106      	bne.n	800cdba <MQTT_Publish+0xb2>
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	789b      	ldrb	r3, [r3, #2]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d002      	beq.n	800cdba <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800cdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10c      	bne.n	800cddc <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800cdc2:	6a39      	ldr	r1, [r7, #32]
 800cdc4:	f107 0210 	add.w	r2, r7, #16
 800cdc8:	88fb      	ldrh	r3, [r7, #6]
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	68b9      	ldr	r1, [r7, #8]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff fba0 	bl	800c516 <sendPublishWithoutCopy>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800cddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d111      	bne.n	800ce08 <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00d      	beq.n	800ce08 <MQTT_Publish+0x100>
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
                                          packetId,
                                          MQTT_SEND,
                                          pPublishInfo->qos,
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_UpdateStatePublish( pContext,
 800cdf0:	88f9      	ldrh	r1, [r7, #6]
 800cdf2:	f107 0317 	add.w	r3, r7, #23
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f001 fe1c 	bl	800ea3a <MQTT_UpdateStatePublish>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800ce08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3728      	adds	r7, #40	; 0x28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <MQTT_Ping>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Ping( MQTTContext_t * pContext )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
    int32_t sendResult = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	61bb      	str	r3, [r7, #24]
    MQTTStatus_t status = MQTTSuccess;
 800ce20:	2300      	movs	r3, #0
 800ce22:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	617b      	str	r3, [r7, #20]
    /* MQTT ping packets are of fixed length. */
    uint8_t pingreqPacket[ 2U ];
    MQTTFixedBuffer_t localBuffer;

    localBuffer.pBuffer = pingreqPacket;
 800ce28:	f107 0310 	add.w	r3, r7, #16
 800ce2c:	60bb      	str	r3, [r7, #8]
    localBuffer.size = sizeof( pingreqPacket );
 800ce2e:	2302      	movs	r3, #2
 800ce30:	60fb      	str	r3, [r7, #12]

    if( pContext == NULL )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d101      	bne.n	800ce3c <MQTT_Ping+0x28>
    {
        LogError( ( "pContext is NULL." ) );
        status = MQTTBadParameter;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800ce3c:	7ffb      	ldrb	r3, [r7, #31]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d114      	bne.n	800ce6c <MQTT_Ping+0x58>
    {
        /* Get MQTT PINGREQ packet size. */
        status = MQTT_GetPingreqPacketSize( &packetSize );
 800ce42:	f107 0314 	add.w	r3, r7, #20
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 fff1 	bl	800de2e <MQTT_GetPingreqPacketSize>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	77fb      	strb	r3, [r7, #31]

        if( status == MQTTSuccess )
 800ce50:	7ffb      	ldrb	r3, [r7, #31]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <MQTT_Ping+0x58>
        {
            assert( packetSize == localBuffer.size );
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d006      	beq.n	800ce6c <MQTT_Ping+0x58>
 800ce5e:	4b18      	ldr	r3, [pc, #96]	; (800cec0 <MQTT_Ping+0xac>)
 800ce60:	4a18      	ldr	r2, [pc, #96]	; (800cec4 <MQTT_Ping+0xb0>)
 800ce62:	f640 3184 	movw	r1, #2948	; 0xb84
 800ce66:	4818      	ldr	r0, [pc, #96]	; (800cec8 <MQTT_Ping+0xb4>)
 800ce68:	f005 f890 	bl	8011f8c <__assert_func>
        {
            LogError( ( "Failed to get the PINGREQ packet size." ) );
        }
    }

    if( status == MQTTSuccess )
 800ce6c:	7ffb      	ldrb	r3, [r7, #31]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d106      	bne.n	800ce80 <MQTT_Ping+0x6c>
    {
        /* Serialize MQTT PINGREQ. */
        status = MQTT_SerializePingreq( &localBuffer );
 800ce72:	f107 0308 	add.w	r3, r7, #8
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 ffef 	bl	800de5a <MQTT_SerializePingreq>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800ce80:	7ffb      	ldrb	r3, [r7, #31]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d116      	bne.n	800ceb4 <MQTT_Ping+0xa0>
        /* Send the serialized PINGREQ packet to transport layer.
         * Here, we do not use the vectored IO approach for efficiency as the
         * Ping packet does not have numerous fields which need to be copied
         * from the user provided buffers. Thus it can be sent directly. */
        sendResult = sendBuffer( pContext,
                                 localBuffer.pBuffer,
 800ce86:	68bb      	ldr	r3, [r7, #8]
        sendResult = sendBuffer( pContext,
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7fe fb5f 	bl	800b550 <sendBuffer>
 800ce92:	61b8      	str	r0, [r7, #24]

        /* Give the mutex away. */
        MQTT_POST_SEND_HOOK( pContext );

        /* It is an error to not send the entire PINGREQ packet. */
        if( sendResult < ( int32_t ) packetSize )
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	461a      	mov	r2, r3
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	da02      	bge.n	800cea4 <MQTT_Ping+0x90>
        {
            LogError( ( "Transport send failed for PINGREQ packet." ) );
            status = MQTTSendFailed;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	77fb      	strb	r3, [r7, #31]
 800cea2:	e007      	b.n	800ceb4 <MQTT_Ping+0xa0>
        }
        else
        {
            pContext->pingReqSendTimeMs = pContext->lastPacketTxTime;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	649a      	str	r2, [r3, #72]	; 0x48
            pContext->waitingForPingResp = true;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            LogDebug( ( "Sent %ld bytes of PINGREQ packet.",
                        ( long int ) sendResult ) );
        }
    }

    return status;
 800ceb4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3720      	adds	r7, #32
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	08017844 	.word	0x08017844
 800cec4:	08018170 	.word	0x08018170
 800cec8:	080174ec 	.word	0x080174ec

0800cecc <MQTT_ProcessLoop>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessLoop( MQTTContext_t * pContext )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTBadParameter;
 800ced4:	2301      	movs	r3, #1
 800ced6:	73fb      	strb	r3, [r7, #15]

    if( pContext == NULL )
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d011      	beq.n	800cf02 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context cannot be NULL." ) );
    }
    else if( pContext->getTime == NULL )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00d      	beq.n	800cf02 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: MQTT Context must have valid getTime." ) );
    }
    else if( pContext->networkBuffer.pBuffer == NULL )
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d009      	beq.n	800cf02 <MQTT_ProcessLoop+0x36>
    {
        LogError( ( "Invalid input parameter: The MQTT context's networkBuffer must not be NULL." ) );
    }
    else
    {
        pContext->controlPacketSent = false;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        status = receiveSingleIteration( pContext, true );
 800cef6:	2101      	movs	r1, #1
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff f8e9 	bl	800c0d0 <receiveSingleIteration>
 800cefe:	4603      	mov	r3, r0
 800cf00:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <MQTT_GetPacketId>:
}

/*-----------------------------------------------------------*/

uint16_t MQTT_GetPacketId( MQTTContext_t * pContext )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
    uint16_t packetId = 0U;
 800cf14:	2300      	movs	r3, #0
 800cf16:	81fb      	strh	r3, [r7, #14]

    if( pContext != NULL )
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d012      	beq.n	800cf44 <MQTT_GetPacketId+0x38>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        packetId = pContext->nextPacketId;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf22:	81fb      	strh	r3, [r7, #14]

        /* A packet ID of zero is not a valid packet ID. When the max ID
         * is reached the next one should start at 1. */
        if( pContext->nextPacketId == ( uint16_t ) UINT16_MAX )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d103      	bne.n	800cf38 <MQTT_GetPacketId+0x2c>
        {
            pContext->nextPacketId = 1;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	851a      	strh	r2, [r3, #40]	; 0x28
 800cf36:	e005      	b.n	800cf44 <MQTT_GetPacketId+0x38>
        }
        else
        {
            pContext->nextPacketId++;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        MQTT_POST_STATE_UPDATE_HOOK( pContext );
    }

    return packetId;
 800cf44:	89fb      	ldrh	r3, [r7, #14]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800cf52:	b480      	push	{r7}
 800cf54:	b085      	sub	sp, #20
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b7f      	cmp	r3, #127	; 0x7f
 800cf5e:	d802      	bhi.n	800cf66 <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800cf60:	2301      	movs	r3, #1
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	e00f      	b.n	800cf86 <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf6c:	d202      	bcs.n	800cf74 <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	e008      	b.n	800cf86 <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf7a:	d202      	bcs.n	800cf82 <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	e001      	b.n	800cf86 <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800cf82:	2304      	movs	r3, #4
 800cf84:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800cf86:	68fb      	ldr	r3, [r7, #12]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d106      	bne.n	800cfba <encodeRemainingLength+0x26>
 800cfac:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <encodeRemainingLength+0x64>)
 800cfae:	4a13      	ldr	r2, [pc, #76]	; (800cffc <encodeRemainingLength+0x68>)
 800cfb0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800cfb4:	4812      	ldr	r0, [pc, #72]	; (800d000 <encodeRemainingLength+0x6c>)
 800cfb6:	f004 ffe9 	bl	8011f8c <__assert_func>

    pLengthEnd = pDestination;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfc6:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	09db      	lsrs	r3, r3, #7
 800cfcc:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800cfd4:	7dfb      	ldrb	r3, [r7, #23]
 800cfd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cfda:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	7dfa      	ldrb	r2, [r7, #23]
 800cfe0:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1e7      	bne.n	800cfbe <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800cfee:	693b      	ldr	r3, [r7, #16]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3718      	adds	r7, #24
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	0801795c 	.word	0x0801795c
 800cffc:	0801817c 	.word	0x0801817c
 800d000:	08017974 	.word	0x08017974

0800d004 <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	4613      	mov	r3, r2
 800d010:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800d012:	2300      	movs	r3, #0
 800d014:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <encodeString+0x2a>
 800d020:	4b15      	ldr	r3, [pc, #84]	; (800d078 <encodeString+0x74>)
 800d022:	4a16      	ldr	r2, [pc, #88]	; (800d07c <encodeString+0x78>)
 800d024:	f44f 7105 	mov.w	r1, #532	; 0x214
 800d028:	4815      	ldr	r0, [pc, #84]	; (800d080 <encodeString+0x7c>)
 800d02a:	f004 ffaf 	bl	8011f8c <__assert_func>

    pBuffer = pDestination;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	0a1b      	lsrs	r3, r3, #8
 800d036:	b29b      	uxth	r3, r3
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	3301      	adds	r3, #1
 800d042:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800d044:	88fb      	ldrh	r3, [r7, #6]
 800d046:	b2da      	uxtb	r2, r3
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	3301      	adds	r3, #1
 800d050:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d005      	beq.n	800d064 <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	461a      	mov	r2, r3
 800d05c:	6939      	ldr	r1, [r7, #16]
 800d05e:	6978      	ldr	r0, [r7, #20]
 800d060:	f006 fa69 	bl	8013536 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800d064:	88fb      	ldrh	r3, [r7, #6]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	4413      	add	r3, r2
 800d06a:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800d06c:	697b      	ldr	r3, [r7, #20]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	0801795c 	.word	0x0801795c
 800d07c:	08018194 	.word	0x08018194
 800d080:	08017974 	.word	0x08017974

0800d084 <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b088      	sub	sp, #32
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
    bool status = true;
 800d090:	2301      	movs	r3, #1
 800d092:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	61bb      	str	r3, [r7, #24]
 800d098:	2300      	movs	r3, #0
 800d09a:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <calculatePublishPacketSize+0x2c>
 800d0a2:	4b2e      	ldr	r3, [pc, #184]	; (800d15c <calculatePublishPacketSize+0xd8>)
 800d0a4:	4a2e      	ldr	r2, [pc, #184]	; (800d160 <calculatePublishPacketSize+0xdc>)
 800d0a6:	f240 2135 	movw	r1, #565	; 0x235
 800d0aa:	482e      	ldr	r0, [pc, #184]	; (800d164 <calculatePublishPacketSize+0xe0>)
 800d0ac:	f004 ff6e 	bl	8011f8c <__assert_func>
    assert( pRemainingLength != NULL );
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d106      	bne.n	800d0c4 <calculatePublishPacketSize+0x40>
 800d0b6:	4b2c      	ldr	r3, [pc, #176]	; (800d168 <calculatePublishPacketSize+0xe4>)
 800d0b8:	4a29      	ldr	r2, [pc, #164]	; (800d160 <calculatePublishPacketSize+0xdc>)
 800d0ba:	f240 2136 	movw	r1, #566	; 0x236
 800d0be:	4829      	ldr	r0, [pc, #164]	; (800d164 <calculatePublishPacketSize+0xe0>)
 800d0c0:	f004 ff64 	bl	8011f8c <__assert_func>
    assert( pPacketSize != NULL );
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d106      	bne.n	800d0d8 <calculatePublishPacketSize+0x54>
 800d0ca:	4b28      	ldr	r3, [pc, #160]	; (800d16c <calculatePublishPacketSize+0xe8>)
 800d0cc:	4a24      	ldr	r2, [pc, #144]	; (800d160 <calculatePublishPacketSize+0xdc>)
 800d0ce:	f240 2137 	movw	r1, #567	; 0x237
 800d0d2:	4824      	ldr	r0, [pc, #144]	; (800d164 <calculatePublishPacketSize+0xe0>)
 800d0d4:	f004 ff5a 	bl	8011f8c <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	891b      	ldrh	r3, [r3, #8]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	3302      	adds	r3, #2
 800d0e4:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	3302      	adds	r3, #2
 800d0f2:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800d0f4:	69ba      	ldr	r2, [r7, #24]
 800d0f6:	4b1e      	ldr	r3, [pc, #120]	; (800d170 <calculatePublishPacketSize+0xec>)
 800d0f8:	1a9b      	subs	r3, r3, r2
 800d0fa:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	429a      	cmp	r2, r3
 800d104:	d202      	bcs.n	800d10c <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800d106:	2300      	movs	r3, #0
 800d108:	77fb      	strb	r3, [r7, #31]
 800d10a:	e021      	b.n	800d150 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	69ba      	ldr	r2, [r7, #24]
 800d112:	4413      	add	r3, r2
 800d114:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800d116:	69b8      	ldr	r0, [r7, #24]
 800d118:	f7ff ff1b 	bl	800cf52 <remainingLengthEncodedSize>
 800d11c:	4602      	mov	r2, r0
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	1a9b      	subs	r3, r3, r2
 800d122:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	697a      	ldr	r2, [r7, #20]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d202      	bcs.n	800d134 <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800d12e:	2300      	movs	r3, #0
 800d130:	77fb      	strb	r3, [r7, #31]
 800d132:	e00d      	b.n	800d150 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d13a:	69b8      	ldr	r0, [r7, #24]
 800d13c:	f7ff ff09 	bl	800cf52 <remainingLengthEncodedSize>
 800d140:	4603      	mov	r3, r0
 800d142:	3301      	adds	r3, #1
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	4413      	add	r3, r2
 800d148:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800d150:	7ffb      	ldrb	r3, [r7, #31]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3720      	adds	r7, #32
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	080179a8 	.word	0x080179a8
 800d160:	080181a4 	.word	0x080181a4
 800d164:	08017974 	.word	0x08017974
 800d168:	080179c0 	.word	0x080179c0
 800d16c:	080179dc 	.word	0x080179dc
 800d170:	0ffffffe 	.word	0x0ffffffe

0800d174 <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b088      	sub	sp, #32
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800d182:	2300      	movs	r3, #0
 800d184:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800d186:	2330      	movs	r3, #48	; 0x30
 800d188:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800d18e:	68b8      	ldr	r0, [r7, #8]
 800d190:	f7ff fedf 	bl	800cf52 <remainingLengthEncodedSize>
 800d194:	4603      	mov	r3, r0
 800d196:	3303      	adds	r3, #3
 800d198:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d104      	bne.n	800d1ac <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800d1a2:	7ffb      	ldrb	r3, [r7, #31]
 800d1a4:	f043 0302 	orr.w	r3, r3, #2
 800d1a8:	77fb      	strb	r3, [r7, #31]
 800d1aa:	e007      	b.n	800d1bc <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d103      	bne.n	800d1bc <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800d1b4:	7ffb      	ldrb	r3, [r7, #31]
 800d1b6:	f043 0304 	orr.w	r3, r3, #4
 800d1ba:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	785b      	ldrb	r3, [r3, #1]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d003      	beq.n	800d1cc <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800d1c4:	7ffb      	ldrb	r3, [r7, #31]
 800d1c6:	f043 0301 	orr.w	r3, r3, #1
 800d1ca:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	789b      	ldrb	r3, [r3, #2]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800d1d4:	7ffb      	ldrb	r3, [r7, #31]
 800d1d6:	f043 0308 	orr.w	r3, r3, #8
 800d1da:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	7ffa      	ldrb	r2, [r7, #31]
 800d1e0:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	69b8      	ldr	r0, [r7, #24]
 800d1ec:	f7ff fed2 	bl	800cf94 <encodeRemainingLength>
 800d1f0:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	891b      	ldrh	r3, [r3, #8]
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	3301      	adds	r3, #1
 800d204:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	891b      	ldrh	r3, [r3, #8]
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	3301      	adds	r3, #1
 800d214:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	601a      	str	r2, [r3, #0]

    return status;
 800d21c:	7fbb      	ldrb	r3, [r7, #30]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3720      	adds	r7, #32
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b088      	sub	sp, #32
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800d230:	2300      	movs	r3, #0
 800d232:	61fb      	str	r3, [r7, #28]
 800d234:	2301      	movs	r3, #1
 800d236:	61bb      	str	r3, [r7, #24]
 800d238:	2300      	movs	r3, #0
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	2300      	movs	r3, #0
 800d23e:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800d240:	2300      	movs	r3, #0
 800d242:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d24e:	d903      	bls.n	800d258 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d254:	61fb      	str	r3, [r7, #28]
 800d256:	e01c      	b.n	800d292 <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800d258:	f107 010b 	add.w	r1, r7, #11
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	6838      	ldr	r0, [r7, #0]
 800d262:	4798      	blx	r3
 800d264:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d10f      	bne.n	800d28c <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d26c:	7afb      	ldrb	r3, [r7, #11]
 800d26e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d272:	69ba      	ldr	r2, [r7, #24]
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	69fa      	ldr	r2, [r7, #28]
 800d27a:	4413      	add	r3, r2
 800d27c:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	01db      	lsls	r3, r3, #7
 800d282:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	3301      	adds	r3, #1
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	e002      	b.n	800d292 <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d28c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d290:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d298:	d004      	beq.n	800d2a4 <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d29a:	7afb      	ldrb	r3, [r7, #11]
 800d29c:	b25b      	sxtb	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	dbd2      	blt.n	800d248 <getRemainingLength+0x22>
 800d2a2:	e000      	b.n	800d2a6 <getRemainingLength+0x80>
            break;
 800d2a4:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2ac:	d00a      	beq.n	800d2c4 <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d2ae:	69f8      	ldr	r0, [r7, #28]
 800d2b0:	f7ff fe4f 	bl	800cf52 <remainingLengthEncodedSize>
 800d2b4:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d002      	beq.n	800d2c4 <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d2be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2c2:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800d2c4:	69fb      	ldr	r3, [r7, #28]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3720      	adds	r7, #32
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <processRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t processRemainingLength( const uint8_t * pBuffer,
                                            const size_t * pIndex,
                                            MQTTPacketInfo_t * pIncomingPacket )
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b08a      	sub	sp, #40	; 0x28
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
    size_t remainingLength = 0;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	627b      	str	r3, [r7, #36]	; 0x24
    size_t multiplier = 1;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	623b      	str	r3, [r7, #32]
    size_t bytesDecoded = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	61fb      	str	r3, [r7, #28]
    size_t expectedSize = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	617b      	str	r3, [r7, #20]
    uint8_t encodedByte = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	76fb      	strb	r3, [r7, #27]
    MQTTStatus_t status = MQTTSuccess;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	76bb      	strb	r3, [r7, #26]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2f8:	d905      	bls.n	800d306 <processRemainingLength+0x38>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800d2fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24

            LogError( ( "Invalid remaining length in the packet.\n" ) );

            status = MQTTBadResponse;
 800d300:	2305      	movs	r3, #5
 800d302:	76bb      	strb	r3, [r7, #26]
 800d304:	e01d      	b.n	800d342 <processRemainingLength+0x74>
        }
        else
        {
            if( *pIndex > ( bytesDecoded + 1U ) )
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	3301      	adds	r3, #1
 800d30e:	429a      	cmp	r2, r3
 800d310:	d915      	bls.n	800d33e <processRemainingLength+0x70>
            {
                /* Get the next byte. It is at the next position after the bytes
                 * decoded till now since the header of one byte was read before. */
                encodedByte = pBuffer[ bytesDecoded + 1U ];
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	3301      	adds	r3, #1
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	4413      	add	r3, r2
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	76fb      	strb	r3, [r7, #27]

                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800d31e:	7efb      	ldrb	r3, [r7, #27]
 800d320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d324:	6a3a      	ldr	r2, [r7, #32]
 800d326:	fb02 f303 	mul.w	r3, r2, r3
 800d32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d32c:	4413      	add	r3, r2
 800d32e:	627b      	str	r3, [r7, #36]	; 0x24
                multiplier *= 128U;
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	01db      	lsls	r3, r3, #7
 800d334:	623b      	str	r3, [r7, #32]
                bytesDecoded++;
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	3301      	adds	r3, #1
 800d33a:	61fb      	str	r3, [r7, #28]
 800d33c:	e001      	b.n	800d342 <processRemainingLength+0x74>
            }
            else
            {
                status = MQTTNeedMoreBytes;
 800d33e:	230b      	movs	r3, #11
 800d340:	76bb      	strb	r3, [r7, #26]
            }
        }

        /* If the response is incorrect, or no more data is available, then
         * break out of the loop. */
        if( ( remainingLength == MQTT_REMAINING_LENGTH_INVALID ) ||
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d348:	d006      	beq.n	800d358 <processRemainingLength+0x8a>
 800d34a:	7ebb      	ldrb	r3, [r7, #26]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d103      	bne.n	800d358 <processRemainingLength+0x8a>
            ( status != MQTTSuccess ) )
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800d350:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d354:	2b00      	cmp	r3, #0
 800d356:	dbcc      	blt.n	800d2f2 <processRemainingLength+0x24>

    if( status == MQTTSuccess )
 800d358:	7ebb      	ldrb	r3, [r7, #26]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d111      	bne.n	800d382 <processRemainingLength+0xb4>
    {
        /* Check that the decoded remaining length conforms to the MQTT specification. */
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800d35e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d360:	f7ff fdf7 	bl	800cf52 <remainingLengthEncodedSize>
 800d364:	6178      	str	r0, [r7, #20]

        if( bytesDecoded != expectedSize )
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d002      	beq.n	800d374 <processRemainingLength+0xa6>
        {
            LogError( ( "Expected and actual length of decoded bytes do not match.\n" ) );
            status = MQTTBadResponse;
 800d36e:	2305      	movs	r3, #5
 800d370:	76bb      	strb	r3, [r7, #26]
 800d372:	e006      	b.n	800d382 <processRemainingLength+0xb4>
        }
        else
        {
            pIncomingPacket->remainingLength = remainingLength;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d378:	609a      	str	r2, [r3, #8]
            pIncomingPacket->headerLength = bytesDecoded + 1U;
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	60da      	str	r2, [r3, #12]
        }
    }

    return status;
 800d382:	7ebb      	ldrb	r3, [r7, #26]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3728      	adds	r7, #40	; 0x28
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <incomingPacketValid>:

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	4603      	mov	r3, r0
 800d394:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800d39a:	79fb      	ldrb	r3, [r7, #7]
 800d39c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3a0:	2bd0      	cmp	r3, #208	; 0xd0
 800d3a2:	d01d      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3a4:	2bd0      	cmp	r3, #208	; 0xd0
 800d3a6:	d826      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3a8:	2bb0      	cmp	r3, #176	; 0xb0
 800d3aa:	d019      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3ac:	2bb0      	cmp	r3, #176	; 0xb0
 800d3ae:	d822      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3b0:	2b90      	cmp	r3, #144	; 0x90
 800d3b2:	d015      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3b4:	2b90      	cmp	r3, #144	; 0x90
 800d3b6:	d81e      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3b8:	2b70      	cmp	r3, #112	; 0x70
 800d3ba:	d011      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3bc:	2b70      	cmp	r3, #112	; 0x70
 800d3be:	d81a      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3c0:	2b60      	cmp	r3, #96	; 0x60
 800d3c2:	d010      	beq.n	800d3e6 <incomingPacketValid+0x5a>
 800d3c4:	2b60      	cmp	r3, #96	; 0x60
 800d3c6:	d816      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3c8:	2b50      	cmp	r3, #80	; 0x50
 800d3ca:	d009      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3cc:	2b50      	cmp	r3, #80	; 0x50
 800d3ce:	d812      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3d0:	2b40      	cmp	r3, #64	; 0x40
 800d3d2:	d005      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3d4:	2b40      	cmp	r3, #64	; 0x40
 800d3d6:	d80e      	bhi.n	800d3f6 <incomingPacketValid+0x6a>
 800d3d8:	2b20      	cmp	r3, #32
 800d3da:	d001      	beq.n	800d3e0 <incomingPacketValid+0x54>
 800d3dc:	2b30      	cmp	r3, #48	; 0x30
 800d3de:	d10a      	bne.n	800d3f6 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	73fb      	strb	r3, [r7, #15]
            break;
 800d3e4:	e00a      	b.n	800d3fc <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	f003 0302 	and.w	r3, r3, #2
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <incomingPacketValid+0x6e>
            {
                status = true;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800d3f4:	e001      	b.n	800d3fa <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800d3f6:	bf00      	nop
 800d3f8:	e000      	b.n	800d3fc <incomingPacketValid+0x70>
            break;
 800d3fa:	bf00      	nop
    }

    return status;
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <checkPublishRemainingLength>:
/*-----------------------------------------------------------*/

static MQTTStatus_t checkPublishRemainingLength( size_t remainingLength,
                                                 MQTTQoS_t qos,
                                                 size_t qos0Minimum )
{
 800d40a:	b480      	push	{r7}
 800d40c:	b087      	sub	sp, #28
 800d40e:	af00      	add	r7, sp, #0
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	460b      	mov	r3, r1
 800d414:	607a      	str	r2, [r7, #4]
 800d416:	72fb      	strb	r3, [r7, #11]
    MQTTStatus_t status = MQTTSuccess;
 800d418:	2300      	movs	r3, #0
 800d41a:	75fb      	strb	r3, [r7, #23]

    /* Sanity checks for "Remaining length". */
    if( qos == MQTTQoS0 )
 800d41c:	7afb      	ldrb	r3, [r7, #11]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <checkPublishRemainingLength+0x26>
    {
        /* Check that the "Remaining length" is greater than the minimum. */
        if( remainingLength < qos0Minimum )
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	429a      	cmp	r2, r3
 800d428:	d209      	bcs.n	800d43e <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 0 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) qos0Minimum ) );

            status = MQTTBadResponse;
 800d42a:	2305      	movs	r3, #5
 800d42c:	75fb      	strb	r3, [r7, #23]
 800d42e:	e006      	b.n	800d43e <checkPublishRemainingLength+0x34>
    else
    {
        /* Check that the "Remaining length" is greater than the minimum. For
         * QoS 1 or 2, this will be two bytes greater than for QoS 0 due to the
         * packet identifier. */
        if( remainingLength < ( qos0Minimum + 2U ) )
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	3302      	adds	r3, #2
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	429a      	cmp	r2, r3
 800d438:	d201      	bcs.n	800d43e <checkPublishRemainingLength+0x34>
        {
            LogError( ( "QoS 1 or 2 PUBLISH cannot have a remaining length less than %lu.",
                        ( unsigned long ) ( qos0Minimum + 2U ) ) );

            status = MQTTBadResponse;
 800d43a:	2305      	movs	r3, #5
 800d43c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d440:	4618      	mov	r0, r3
 800d442:	371c      	adds	r7, #28
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <processPublishFlags>:

/*-----------------------------------------------------------*/

static MQTTStatus_t processPublishFlags( uint8_t publishFlags,
                                         MQTTPublishInfo_t * pPublishInfo )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	6039      	str	r1, [r7, #0]
 800d456:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800d458:	2300      	movs	r3, #0
 800d45a:	73fb      	strb	r3, [r7, #15]

    assert( pPublishInfo != NULL );
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d106      	bne.n	800d470 <processPublishFlags+0x24>
 800d462:	4b20      	ldr	r3, [pc, #128]	; (800d4e4 <processPublishFlags+0x98>)
 800d464:	4a20      	ldr	r2, [pc, #128]	; (800d4e8 <processPublishFlags+0x9c>)
 800d466:	f240 31ee 	movw	r1, #1006	; 0x3ee
 800d46a:	4820      	ldr	r0, [pc, #128]	; (800d4ec <processPublishFlags+0xa0>)
 800d46c:	f004 fd8e 	bl	8011f8c <__assert_func>

    /* Check for QoS 2. */
    if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 ) )
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	f003 0304 	and.w	r3, r3, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00b      	beq.n	800d492 <processPublishFlags+0x46>
    {
        /* PUBLISH packet is invalid if both QoS 1 and QoS 2 bits are set. */
        if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	f003 0302 	and.w	r3, r3, #2
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <processPublishFlags+0x3e>
        {
            LogError( ( "Bad QoS: 3." ) );

            status = MQTTBadResponse;
 800d484:	2305      	movs	r3, #5
 800d486:	73fb      	strb	r3, [r7, #15]
 800d488:	e00f      	b.n	800d4aa <processPublishFlags+0x5e>
        }
        else
        {
            pPublishInfo->qos = MQTTQoS2;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2202      	movs	r2, #2
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	e00b      	b.n	800d4aa <processPublishFlags+0x5e>
        }
    }
    /* Check for QoS 1. */
    else if( UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 ) )
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <processPublishFlags+0x58>
    {
        pPublishInfo->qos = MQTTQoS1;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	e002      	b.n	800d4aa <processPublishFlags+0x5e>
    }
    /* If the PUBLISH isn't QoS 1 or 2, then it's QoS 0. */
    else
    {
        pPublishInfo->qos = MQTTQoS0;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d113      	bne.n	800d4d8 <processPublishFlags+0x8c>
    {
        LogDebug( ( "QoS is %d.", ( int ) pPublishInfo->qos ) );

        /* Parse the Retain bit. */
        pPublishInfo->retain = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bf14      	ite	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	2300      	moveq	r3, #0
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	705a      	strb	r2, [r3, #1]

        LogDebug( ( "Retain bit is %d.", ( int ) pPublishInfo->retain ) );

        /* Parse the DUP bit. */
        pPublishInfo->dup = UINT8_CHECK_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	f003 0308 	and.w	r3, r3, #8
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bf14      	ite	ne
 800d4ce:	2301      	movne	r3, #1
 800d4d0:	2300      	moveq	r3, #0
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	709a      	strb	r2, [r3, #2]

        LogDebug( ( "DUP bit is %d.", ( int ) pPublishInfo->dup ) );
    }

    return status;
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	080179a8 	.word	0x080179a8
 800d4e8:	080181c0 	.word	0x080181c0
 800d4ec:	08017974 	.word	0x08017974

0800d4f0 <logConnackResponse>:

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800d4f0:	b5b0      	push	{r4, r5, r7, lr}
 800d4f2:	b088      	sub	sp, #32
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800d4fa:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <logConnackResponse+0x3c>)
 800d4fc:	f107 0408 	add.w	r4, r7, #8
 800d500:	461d      	mov	r5, r3
 800d502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d506:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d50a:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800d50e:	79fb      	ldrb	r3, [r7, #7]
 800d510:	2b05      	cmp	r3, #5
 800d512:	d906      	bls.n	800d522 <logConnackResponse+0x32>
 800d514:	4b06      	ldr	r3, [pc, #24]	; (800d530 <logConnackResponse+0x40>)
 800d516:	4a07      	ldr	r2, [pc, #28]	; (800d534 <logConnackResponse+0x44>)
 800d518:	f240 412e 	movw	r1, #1070	; 0x42e
 800d51c:	4806      	ldr	r0, [pc, #24]	; (800d538 <logConnackResponse+0x48>)
 800d51e:	f004 fd35 	bl	8011f8c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800d522:	bf00      	nop
 800d524:	3720      	adds	r7, #32
 800d526:	46bd      	mov	sp, r7
 800d528:	bdb0      	pop	{r4, r5, r7, pc}
 800d52a:	bf00      	nop
 800d52c:	08017bfc 	.word	0x08017bfc
 800d530:	08017af4 	.word	0x08017af4
 800d534:	080181d4 	.word	0x080181d4
 800d538:	08017974 	.word	0x08017974

0800d53c <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d546:	2300      	movs	r3, #0
 800d548:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d106      	bne.n	800d562 <deserializeConnack+0x26>
 800d554:	4b2a      	ldr	r3, [pc, #168]	; (800d600 <deserializeConnack+0xc4>)
 800d556:	4a2b      	ldr	r2, [pc, #172]	; (800d604 <deserializeConnack+0xc8>)
 800d558:	f240 4144 	movw	r1, #1092	; 0x444
 800d55c:	482a      	ldr	r0, [pc, #168]	; (800d608 <deserializeConnack+0xcc>)
 800d55e:	f004 fd15 	bl	8011f8c <__assert_func>
    assert( pSessionPresent != NULL );
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <deserializeConnack+0x3a>
 800d568:	4b28      	ldr	r3, [pc, #160]	; (800d60c <deserializeConnack+0xd0>)
 800d56a:	4a26      	ldr	r2, [pc, #152]	; (800d604 <deserializeConnack+0xc8>)
 800d56c:	f240 4145 	movw	r1, #1093	; 0x445
 800d570:	4825      	ldr	r0, [pc, #148]	; (800d608 <deserializeConnack+0xcc>)
 800d572:	f004 fd0b 	bl	8011f8c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	2b02      	cmp	r3, #2
 800d582:	d002      	beq.n	800d58a <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800d584:	2305      	movs	r3, #5
 800d586:	73fb      	strb	r3, [r7, #15]
 800d588:	e01d      	b.n	800d5c6 <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	f043 0301 	orr.w	r3, r3, #1
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b01      	cmp	r3, #1
 800d596:	d002      	beq.n	800d59e <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800d598:	2305      	movs	r3, #5
 800d59a:	73fb      	strb	r3, [r7, #15]
 800d59c:	e013      	b.n	800d5c6 <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00a      	beq.n	800d5c0 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800d5ba:	2305      	movs	r3, #5
 800d5bc:	73fb      	strb	r3, [r7, #15]
 800d5be:	e002      	b.n	800d5c6 <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800d5c6:	7bfb      	ldrb	r3, [r7, #15]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d114      	bne.n	800d5f6 <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b05      	cmp	r3, #5
 800d5d4:	d902      	bls.n	800d5dc <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800d5d6:	2305      	movs	r3, #5
 800d5d8:	73fb      	strb	r3, [r7, #15]
 800d5da:	e00c      	b.n	800d5f6 <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff ff84 	bl	800d4f0 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d001      	beq.n	800d5f6 <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800d5f2:	2306      	movs	r3, #6
 800d5f4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	08017c14 	.word	0x08017c14
 800d604:	080181e8 	.word	0x080181e8
 800d608:	08017974 	.word	0x08017974
 800d60c:	08017c28 	.word	0x08017c28

0800d610 <calculateSubscriptionPacketSize>:
static MQTTStatus_t calculateSubscriptionPacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                                     size_t subscriptionCount,
                                                     size_t * pRemainingLength,
                                                     size_t * pPacketSize,
                                                     MQTTSubscriptionType_t subscriptionType )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d61e:	2300      	movs	r3, #0
 800d620:	77fb      	strb	r3, [r7, #31]
    size_t i = 0, packetSize = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	61bb      	str	r3, [r7, #24]
 800d626:	2300      	movs	r3, #0
 800d628:	617b      	str	r3, [r7, #20]

    assert( pSubscriptionList != NULL );
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d106      	bne.n	800d63e <calculateSubscriptionPacketSize+0x2e>
 800d630:	4b3d      	ldr	r3, [pc, #244]	; (800d728 <calculateSubscriptionPacketSize+0x118>)
 800d632:	4a3e      	ldr	r2, [pc, #248]	; (800d72c <calculateSubscriptionPacketSize+0x11c>)
 800d634:	f240 419a 	movw	r1, #1178	; 0x49a
 800d638:	483d      	ldr	r0, [pc, #244]	; (800d730 <calculateSubscriptionPacketSize+0x120>)
 800d63a:	f004 fca7 	bl	8011f8c <__assert_func>
    assert( subscriptionCount != 0U );
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d106      	bne.n	800d652 <calculateSubscriptionPacketSize+0x42>
 800d644:	4b3b      	ldr	r3, [pc, #236]	; (800d734 <calculateSubscriptionPacketSize+0x124>)
 800d646:	4a39      	ldr	r2, [pc, #228]	; (800d72c <calculateSubscriptionPacketSize+0x11c>)
 800d648:	f240 419b 	movw	r1, #1179	; 0x49b
 800d64c:	4838      	ldr	r0, [pc, #224]	; (800d730 <calculateSubscriptionPacketSize+0x120>)
 800d64e:	f004 fc9d 	bl	8011f8c <__assert_func>
    assert( pRemainingLength != NULL );
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d106      	bne.n	800d666 <calculateSubscriptionPacketSize+0x56>
 800d658:	4b37      	ldr	r3, [pc, #220]	; (800d738 <calculateSubscriptionPacketSize+0x128>)
 800d65a:	4a34      	ldr	r2, [pc, #208]	; (800d72c <calculateSubscriptionPacketSize+0x11c>)
 800d65c:	f240 419c 	movw	r1, #1180	; 0x49c
 800d660:	4833      	ldr	r0, [pc, #204]	; (800d730 <calculateSubscriptionPacketSize+0x120>)
 800d662:	f004 fc93 	bl	8011f8c <__assert_func>
    assert( pPacketSize != NULL );
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d106      	bne.n	800d67a <calculateSubscriptionPacketSize+0x6a>
 800d66c:	4b33      	ldr	r3, [pc, #204]	; (800d73c <calculateSubscriptionPacketSize+0x12c>)
 800d66e:	4a2f      	ldr	r2, [pc, #188]	; (800d72c <calculateSubscriptionPacketSize+0x11c>)
 800d670:	f240 419d 	movw	r1, #1181	; 0x49d
 800d674:	482e      	ldr	r0, [pc, #184]	; (800d730 <calculateSubscriptionPacketSize+0x120>)
 800d676:	f004 fc89 	bl	8011f8c <__assert_func>

    /* The variable header of a subscription packet consists of a 2-byte packet
     * identifier. */
    packetSize += sizeof( uint16_t );
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	3302      	adds	r3, #2
 800d67e:	617b      	str	r3, [r7, #20]

    /* Sum the lengths of all subscription topic filters; add 1 byte for each
     * subscription's QoS if type is MQTT_SUBSCRIBE. */
    for( i = 0; i < subscriptionCount; i++ )
 800d680:	2300      	movs	r3, #0
 800d682:	61bb      	str	r3, [r7, #24]
 800d684:	e02f      	b.n	800d6e6 <calculateSubscriptionPacketSize+0xd6>
    {
        /* Add the length of the topic filter. MQTT strings are prepended
         * with 2 byte string length field. Hence 2 bytes are added to size. */
        packetSize += pSubscriptionList[ i ].topicFilterLength + sizeof( uint16_t );
 800d686:	69ba      	ldr	r2, [r7, #24]
 800d688:	4613      	mov	r3, r2
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	4413      	add	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	461a      	mov	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	4413      	add	r3, r2
 800d696:	891b      	ldrh	r3, [r3, #8]
 800d698:	461a      	mov	r2, r3
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	4413      	add	r3, r2
 800d69e:	3302      	adds	r3, #2
 800d6a0:	617b      	str	r3, [r7, #20]

        /* Only SUBSCRIBE packets include the QoS. */
        if( subscriptionType == MQTT_SUBSCRIBE )
 800d6a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d102      	bne.n	800d6b0 <calculateSubscriptionPacketSize+0xa0>
        {
            packetSize += 1U;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
        }

        /* Validate each topic filter. */
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d6b0:	69ba      	ldr	r2, [r7, #24]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	4413      	add	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	891b      	ldrh	r3, [r3, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <calculateSubscriptionPacketSize+0xcc>
            ( pSubscriptionList[ i ].pTopicFilter == NULL ) )
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	005b      	lsls	r3, r3, #1
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	685b      	ldr	r3, [r3, #4]
        if( ( pSubscriptionList[ i ].topicFilterLength == 0U ) ||
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <calculateSubscriptionPacketSize+0xd0>
        {
            status = MQTTBadParameter;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	77fb      	strb	r3, [r7, #31]
    for( i = 0; i < subscriptionCount; i++ )
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	61bb      	str	r3, [r7, #24]
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d3cb      	bcc.n	800d686 <calculateSubscriptionPacketSize+0x76>
    }

    /* At this point, the "Remaining length" has been calculated. Return error
     * if the "Remaining length" exceeds what is allowed by MQTT 3.1.1. Otherwise,
     * set the output parameter.*/
    if( packetSize > MQTT_MAX_REMAINING_LENGTH )
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6f4:	d301      	bcc.n	800d6fa <calculateSubscriptionPacketSize+0xea>
    {
        LogError( ( "Subscription packet length of %lu exceeds"
                    "the MQTT 3.1.1 maximum packet length of %lu.",
                    ( unsigned long ) packetSize,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = MQTTBadParameter;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d6fa:	7ffb      	ldrb	r3, [r7, #31]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10d      	bne.n	800d71c <calculateSubscriptionPacketSize+0x10c>
    {
        *pRemainingLength = packetSize;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	697a      	ldr	r2, [r7, #20]
 800d704:	601a      	str	r2, [r3, #0]

        /* Calculate the full size of the subscription packet by adding
         * number of bytes required to encode the "Remaining length" field
         * plus 1 byte for the "Packet type" field. */
        packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800d706:	6978      	ldr	r0, [r7, #20]
 800d708:	f7ff fc23 	bl	800cf52 <remainingLengthEncodedSize>
 800d70c:	4603      	mov	r3, r0
 800d70e:	3301      	adds	r3, #1
 800d710:	697a      	ldr	r2, [r7, #20]
 800d712:	4413      	add	r3, r2
 800d714:	617b      	str	r3, [r7, #20]

        /*Set the pPacketSize output parameter. */
        *pPacketSize = packetSize;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	601a      	str	r2, [r3, #0]

    LogDebug( ( "Subscription packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );

    return status;
 800d71c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3720      	adds	r7, #32
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	08017c40 	.word	0x08017c40
 800d72c:	080181fc 	.word	0x080181fc
 800d730:	08017974 	.word	0x08017974
 800d734:	08017c5c 	.word	0x08017c5c
 800d738:	080179c0 	.word	0x080179c0
 800d73c:	080179dc 	.word	0x080179dc

0800d740 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d74a:	2300      	movs	r3, #0
 800d74c:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d106      	bne.n	800d76a <readSubackStatus+0x2a>
 800d75c:	4b17      	ldr	r3, [pc, #92]	; (800d7bc <readSubackStatus+0x7c>)
 800d75e:	4a18      	ldr	r2, [pc, #96]	; (800d7c0 <readSubackStatus+0x80>)
 800d760:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800d764:	4817      	ldr	r0, [pc, #92]	; (800d7c4 <readSubackStatus+0x84>)
 800d766:	f004 fc11 	bl	8011f8c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800d76a:	2300      	movs	r3, #0
 800d76c:	613b      	str	r3, [r7, #16]
 800d76e:	e019      	b.n	800d7a4 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	4413      	add	r3, r2
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	dc02      	bgt.n	800d786 <readSubackStatus+0x46>
 800d780:	2b00      	cmp	r3, #0
 800d782:	da08      	bge.n	800d796 <readSubackStatus+0x56>
 800d784:	e004      	b.n	800d790 <readSubackStatus+0x50>
 800d786:	2b80      	cmp	r3, #128	; 0x80
 800d788:	d102      	bne.n	800d790 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800d78a:	2306      	movs	r3, #6
 800d78c:	75fb      	strb	r3, [r7, #23]

                break;
 800d78e:	e003      	b.n	800d798 <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800d790:	2305      	movs	r3, #5
 800d792:	75fb      	strb	r3, [r7, #23]

                break;
 800d794:	e000      	b.n	800d798 <readSubackStatus+0x58>
                break;
 800d796:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800d798:	7dfb      	ldrb	r3, [r7, #23]
 800d79a:	2b05      	cmp	r3, #5
 800d79c:	d007      	beq.n	800d7ae <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	613b      	str	r3, [r7, #16]
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d3e1      	bcc.n	800d770 <readSubackStatus+0x30>
 800d7ac:	e000      	b.n	800d7b0 <readSubackStatus+0x70>
        {
            break;
 800d7ae:	bf00      	nop
        }
    }

    return status;
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3718      	adds	r7, #24
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	08017c74 	.word	0x08017c74
 800d7c0:	0801821c 	.word	0x0801821c
 800d7c4:	08017974 	.word	0x08017974

0800d7c8 <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <deserializeSuback+0x26>
 800d7e0:	4b1f      	ldr	r3, [pc, #124]	; (800d860 <deserializeSuback+0x98>)
 800d7e2:	4a20      	ldr	r2, [pc, #128]	; (800d864 <deserializeSuback+0x9c>)
 800d7e4:	f240 511f 	movw	r1, #1311	; 0x51f
 800d7e8:	481f      	ldr	r0, [pc, #124]	; (800d868 <deserializeSuback+0xa0>)
 800d7ea:	f004 fbcf 	bl	8011f8c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d106      	bne.n	800d802 <deserializeSuback+0x3a>
 800d7f4:	4b1d      	ldr	r3, [pc, #116]	; (800d86c <deserializeSuback+0xa4>)
 800d7f6:	4a1b      	ldr	r2, [pc, #108]	; (800d864 <deserializeSuback+0x9c>)
 800d7f8:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800d7fc:	481a      	ldr	r0, [pc, #104]	; (800d868 <deserializeSuback+0xa0>)
 800d7fe:	f004 fbc5 	bl	8011f8c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d802      	bhi.n	800d81a <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800d814:	2305      	movs	r3, #5
 800d816:	75fb      	strb	r3, [r7, #23]
 800d818:	e01d      	b.n	800d856 <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	021b      	lsls	r3, r3, #8
 800d820:	b21a      	sxth	r2, r3
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	3301      	adds	r3, #1
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	b21b      	sxth	r3, r3
 800d82a:	4313      	orrs	r3, r2
 800d82c:	b21b      	sxth	r3, r3
 800d82e:	b29a      	uxth	r2, r3
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d102      	bne.n	800d842 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800d83c:	2305      	movs	r3, #5
 800d83e:	75fb      	strb	r3, [r7, #23]
 800d840:	e009      	b.n	800d856 <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1e9a      	subs	r2, r3, #2
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	3302      	adds	r3, #2
 800d84a:	4619      	mov	r1, r3
 800d84c:	4610      	mov	r0, r2
 800d84e:	f7ff ff77 	bl	800d740 <readSubackStatus>
 800d852:	4603      	mov	r3, r0
 800d854:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800d856:	7dfb      	ldrb	r3, [r7, #23]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	08017c8c 	.word	0x08017c8c
 800d864:	08018230 	.word	0x08018230
 800d868:	08017974 	.word	0x08017974
 800d86c:	08017c9c 	.word	0x08017c9c

0800d870 <deserializePublish>:
/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                        uint16_t * pPacketId,
                                        MQTTPublishInfo_t * pPublishInfo )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800d87c:	2300      	movs	r3, #0
 800d87e:	77fb      	strb	r3, [r7, #31]
    const uint8_t * pVariableHeader, * pPacketIdentifierHigh = NULL;
 800d880:	2300      	movs	r3, #0
 800d882:	61bb      	str	r3, [r7, #24]

    assert( pIncomingPacket != NULL );
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d106      	bne.n	800d898 <deserializePublish+0x28>
 800d88a:	4b53      	ldr	r3, [pc, #332]	; (800d9d8 <deserializePublish+0x168>)
 800d88c:	4a53      	ldr	r2, [pc, #332]	; (800d9dc <deserializePublish+0x16c>)
 800d88e:	f240 5184 	movw	r1, #1412	; 0x584
 800d892:	4853      	ldr	r0, [pc, #332]	; (800d9e0 <deserializePublish+0x170>)
 800d894:	f004 fb7a 	bl	8011f8c <__assert_func>
    assert( pPacketId != NULL );
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d106      	bne.n	800d8ac <deserializePublish+0x3c>
 800d89e:	4b51      	ldr	r3, [pc, #324]	; (800d9e4 <deserializePublish+0x174>)
 800d8a0:	4a4e      	ldr	r2, [pc, #312]	; (800d9dc <deserializePublish+0x16c>)
 800d8a2:	f240 5185 	movw	r1, #1413	; 0x585
 800d8a6:	484e      	ldr	r0, [pc, #312]	; (800d9e0 <deserializePublish+0x170>)
 800d8a8:	f004 fb70 	bl	8011f8c <__assert_func>
    assert( pPublishInfo != NULL );
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <deserializePublish+0x50>
 800d8b2:	4b4d      	ldr	r3, [pc, #308]	; (800d9e8 <deserializePublish+0x178>)
 800d8b4:	4a49      	ldr	r2, [pc, #292]	; (800d9dc <deserializePublish+0x16c>)
 800d8b6:	f240 5186 	movw	r1, #1414	; 0x586
 800d8ba:	4849      	ldr	r0, [pc, #292]	; (800d9e0 <deserializePublish+0x170>)
 800d8bc:	f004 fb66 	bl	8011f8c <__assert_func>
    assert( pIncomingPacket->pRemainingData != NULL );
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <deserializePublish+0x66>
 800d8c8:	4b48      	ldr	r3, [pc, #288]	; (800d9ec <deserializePublish+0x17c>)
 800d8ca:	4a44      	ldr	r2, [pc, #272]	; (800d9dc <deserializePublish+0x16c>)
 800d8cc:	f240 5187 	movw	r1, #1415	; 0x587
 800d8d0:	4843      	ldr	r0, [pc, #268]	; (800d9e0 <deserializePublish+0x170>)
 800d8d2:	f004 fb5b 	bl	8011f8c <__assert_func>

    pVariableHeader = pIncomingPacket->pRemainingData;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	617b      	str	r3, [r7, #20]
    /* The flags are the lower 4 bits of the first byte in PUBLISH. */
    status = processPublishFlags( ( pIncomingPacket->type & 0x0FU ), pPublishInfo );
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	f003 030f 	and.w	r3, r3, #15
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fdaf 	bl	800d44c <processPublishFlags>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	77fb      	strb	r3, [r7, #31]

    if( status == MQTTSuccess )
 800d8f2:	7ffb      	ldrb	r3, [r7, #31]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d109      	bne.n	800d90c <deserializePublish+0x9c>
        /* Sanity checks for "Remaining length". A QoS 0 PUBLISH  must have a remaining
         * length of at least 3 to accommodate topic name length (2 bytes) and topic
         * name (at least 1 byte). A QoS 1 or 2 PUBLISH must have a remaining length of
         * at least 5 for the packet identifier in addition to the topic name length and
         * topic name. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6898      	ldr	r0, [r3, #8]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	2203      	movs	r2, #3
 800d902:	4619      	mov	r1, r3
 800d904:	f7ff fd81 	bl	800d40a <checkPublishRemainingLength>
 800d908:	4603      	mov	r3, r0
 800d90a:	77fb      	strb	r3, [r7, #31]
                                              pPublishInfo->qos,
                                              MQTT_MIN_PUBLISH_REMAINING_LENGTH_QOS0 );
    }

    if( status == MQTTSuccess )
 800d90c:	7ffb      	ldrb	r3, [r7, #31]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d118      	bne.n	800d944 <deserializePublish+0xd4>
    {
        /* Extract the topic name starting from the first byte of the variable header.
         * The topic name string starts at byte 3 in the variable header. */
        pPublishInfo->topicNameLength = UINT16_DECODE( pVariableHeader );
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	b21a      	sxth	r2, r3
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	3301      	adds	r3, #1
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	b21b      	sxth	r3, r3
 800d922:	4313      	orrs	r3, r2
 800d924:	b21b      	sxth	r3, r3
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	811a      	strh	r2, [r3, #8]

        /* Sanity checks for topic name length and "Remaining length". The remaining
         * length must be at least as large as the variable length header. */
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6898      	ldr	r0, [r3, #8]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7819      	ldrb	r1, [r3, #0]
                                              pPublishInfo->qos,
                                              pPublishInfo->topicNameLength + sizeof( uint16_t ) );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	891b      	ldrh	r3, [r3, #8]
        status = checkPublishRemainingLength( pIncomingPacket->remainingLength,
 800d938:	3302      	adds	r3, #2
 800d93a:	461a      	mov	r2, r3
 800d93c:	f7ff fd65 	bl	800d40a <checkPublishRemainingLength>
 800d940:	4603      	mov	r3, r0
 800d942:	77fb      	strb	r3, [r7, #31]
    }

    if( status == MQTTSuccess )
 800d944:	7ffb      	ldrb	r3, [r7, #31]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d123      	bne.n	800d992 <deserializePublish+0x122>
    {
        /* Parse the topic. */
        pPublishInfo->pTopicName = ( const char * ) ( &pVariableHeader[ sizeof( uint16_t ) ] );
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	1c9a      	adds	r2, r3, #2
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	605a      	str	r2, [r3, #4]
        LogDebug( ( "Topic name length: %hu.", ( unsigned short ) pPublishInfo->topicNameLength ) );

        /* Extract the packet identifier for QoS 1 or 2 PUBLISH packets. Packet
         * identifier starts immediately after the topic name. */
        pPacketIdentifierHigh = ( const uint8_t * ) ( &pPublishInfo->pTopicName[ pPublishInfo->topicNameLength ] );
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	8912      	ldrh	r2, [r2, #8]
 800d95a:	4413      	add	r3, r2
 800d95c:	61bb      	str	r3, [r7, #24]

        if( pPublishInfo->qos > MQTTQoS0 )
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d015      	beq.n	800d992 <deserializePublish+0x122>
        {
            *pPacketId = UINT16_DECODE( pPacketIdentifierHigh );
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	021b      	lsls	r3, r3, #8
 800d96c:	b21a      	sxth	r2, r3
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	3301      	adds	r3, #1
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	b21b      	sxth	r3, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	b21b      	sxth	r3, r3
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	801a      	strh	r2, [r3, #0]

            LogDebug( ( "Packet identifier %hu.",
                        ( unsigned short ) *pPacketId ) );

            /* Advance pointer two bytes to start of payload as in the QoS 0 case. */
            pPacketIdentifierHigh = &pPacketIdentifierHigh[ sizeof( uint16_t ) ];
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	3302      	adds	r3, #2
 800d984:	61bb      	str	r3, [r7, #24]

            /* Packet identifier cannot be 0. */
            if( *pPacketId == 0U )
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <deserializePublish+0x122>
            {
                LogError( ( "Packet identifier cannot be 0." ) );
                status = MQTTBadResponse;
 800d98e:	2305      	movs	r3, #5
 800d990:	77fb      	strb	r3, [r7, #31]
            }
        }
    }

    if( status == MQTTSuccess )
 800d992:	7ffb      	ldrb	r3, [r7, #31]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d119      	bne.n	800d9cc <deserializePublish+0x15c>
    {
        /* Calculate the length of the payload. QoS 1 or 2 PUBLISH packets contain
         * a packet identifier, but QoS 0 PUBLISH packets do not. */
        pPublishInfo->payloadLength = pIncomingPacket->remainingLength - pPublishInfo->topicNameLength - sizeof( uint16_t );
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	8912      	ldrh	r2, [r2, #8]
 800d9a0:	1a9b      	subs	r3, r3, r2
 800d9a2:	1e9a      	subs	r2, r3, #2
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	611a      	str	r2, [r3, #16]

        if( pPublishInfo->qos != MQTTQoS0 )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d004      	beq.n	800d9ba <deserializePublish+0x14a>
        {
            /* Two more bytes for the packet identifier. */
            pPublishInfo->payloadLength -= sizeof( uint16_t );
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	1e9a      	subs	r2, r3, #2
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	611a      	str	r2, [r3, #16]
        }

        /* Set payload if it exists. */
        pPublishInfo->pPayload = ( pPublishInfo->payloadLength != 0U ) ? pPacketIdentifierHigh : NULL;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d001      	beq.n	800d9c6 <deserializePublish+0x156>
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	e000      	b.n	800d9c8 <deserializePublish+0x158>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	60d3      	str	r3, [r2, #12]

        LogDebug( ( "Payload length %lu.",
                    ( unsigned long ) pPublishInfo->payloadLength ) );
    }

    return status;
 800d9cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3720      	adds	r7, #32
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	08017cb8 	.word	0x08017cb8
 800d9dc:	08018244 	.word	0x08018244
 800d9e0:	08017974 	.word	0x08017974
 800d9e4:	08017cd0 	.word	0x08017cd0
 800d9e8:	080179a8 	.word	0x080179a8
 800d9ec:	08017ce4 	.word	0x08017ce4

0800d9f0 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d106      	bne.n	800da12 <deserializeSimpleAck+0x22>
 800da04:	4b18      	ldr	r3, [pc, #96]	; (800da68 <deserializeSimpleAck+0x78>)
 800da06:	4a19      	ldr	r2, [pc, #100]	; (800da6c <deserializeSimpleAck+0x7c>)
 800da08:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800da0c:	4818      	ldr	r0, [pc, #96]	; (800da70 <deserializeSimpleAck+0x80>)
 800da0e:	f004 fabd 	bl	8011f8c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <deserializeSimpleAck+0x36>
 800da18:	4b16      	ldr	r3, [pc, #88]	; (800da74 <deserializeSimpleAck+0x84>)
 800da1a:	4a14      	ldr	r2, [pc, #80]	; (800da6c <deserializeSimpleAck+0x7c>)
 800da1c:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800da20:	4813      	ldr	r0, [pc, #76]	; (800da70 <deserializeSimpleAck+0x80>)
 800da22:	f004 fab3 	bl	8011f8c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d002      	beq.n	800da34 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800da2e:	2305      	movs	r3, #5
 800da30:	73fb      	strb	r3, [r7, #15]
 800da32:	e014      	b.n	800da5e <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	021b      	lsls	r3, r3, #8
 800da3c:	b21a      	sxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	3301      	adds	r3, #1
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	b21b      	sxth	r3, r3
 800da48:	4313      	orrs	r3, r2
 800da4a:	b21b      	sxth	r3, r3
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800da5a:	2305      	movs	r3, #5
 800da5c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	08017d0c 	.word	0x08017d0c
 800da6c:	08018258 	.word	0x08018258
 800da70:	08017974 	.word	0x08017974
 800da74:	08017c9c 	.word	0x08017c9c

0800da78 <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <deserializePingresp+0x20>
 800da8a:	4b09      	ldr	r3, [pc, #36]	; (800dab0 <deserializePingresp+0x38>)
 800da8c:	4a09      	ldr	r2, [pc, #36]	; (800dab4 <deserializePingresp+0x3c>)
 800da8e:	f240 6104 	movw	r1, #1540	; 0x604
 800da92:	4809      	ldr	r0, [pc, #36]	; (800dab8 <deserializePingresp+0x40>)
 800da94:	f004 fa7a 	bl	8011f8c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800daa0:	2305      	movs	r3, #5
 800daa2:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	08017d1c 	.word	0x08017d1c
 800dab4:	08018270 	.word	0x08018270
 800dab8:	08017974 	.word	0x08017974

0800dabc <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
 800dac8:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800dace:	2300      	movs	r3, #0
 800dad0:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	2210      	movs	r2, #16
 800dad6:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	3301      	adds	r3, #1
 800dadc:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800dade:	6839      	ldr	r1, [r7, #0]
 800dae0:	6938      	ldr	r0, [r7, #16]
 800dae2:	f7ff fa57 	bl	800cf94 <encodeRemainingLength>
 800dae6:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800dae8:	2204      	movs	r2, #4
 800daea:	492f      	ldr	r1, [pc, #188]	; (800dba8 <MQTT_SerializeConnectFixedHeader+0xec>)
 800daec:	6938      	ldr	r0, [r7, #16]
 800daee:	f7ff fa89 	bl	800d004 <encodeString>
 800daf2:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	2204      	movs	r2, #4
 800daf8:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	3301      	adds	r3, #1
 800dafe:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d003      	beq.n	800db10 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800db08:	7dfb      	ldrb	r3, [r7, #23]
 800db0a:	f043 0302 	orr.w	r3, r3, #2
 800db0e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800db18:	7dfb      	ldrb	r3, [r7, #23]
 800db1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db1e:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d003      	beq.n	800db30 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800db28:	7dfb      	ldrb	r3, [r7, #23]
 800db2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db2e:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d01c      	beq.n	800db70 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800db36:	7dfb      	ldrb	r3, [r7, #23]
 800db38:	f043 0304 	orr.w	r3, r3, #4
 800db3c:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d104      	bne.n	800db50 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	f043 0308 	orr.w	r3, r3, #8
 800db4c:	75fb      	strb	r3, [r7, #23]
 800db4e:	e007      	b.n	800db60 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	2b02      	cmp	r3, #2
 800db56:	d103      	bne.n	800db60 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800db58:	7dfb      	ldrb	r3, [r7, #23]
 800db5a:	f043 0310 	orr.w	r3, r3, #16
 800db5e:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	785b      	ldrb	r3, [r3, #1]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800db68:	7dfb      	ldrb	r3, [r7, #23]
 800db6a:	f043 0320 	orr.w	r3, r3, #32
 800db6e:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	7dfa      	ldrb	r2, [r7, #23]
 800db74:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	3301      	adds	r3, #1
 800db7a:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	885b      	ldrh	r3, [r3, #2]
 800db80:	0a1b      	lsrs	r3, r3, #8
 800db82:	b29b      	uxth	r3, r3
 800db84:	b2da      	uxtb	r2, r3
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	885a      	ldrh	r2, [r3, #2]
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	3301      	adds	r3, #1
 800db92:	b2d2      	uxtb	r2, r2
 800db94:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	3302      	adds	r3, #2
 800db9a:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800db9c:	693b      	ldr	r3, [r7, #16]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	08017d30 	.word	0x08017d30

0800dbac <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b088      	sub	sp, #32
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
 800dbb8:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800dbbe:	230a      	movs	r3, #10
 800dbc0:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <MQTT_GetConnectPacketSize+0x28>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d002      	beq.n	800dbd4 <MQTT_GetConnectPacketSize+0x28>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d102      	bne.n	800dbda <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	77fb      	strb	r3, [r7, #31]
 800dbd8:	e04f      	b.n	800dc7a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	891b      	ldrh	r3, [r3, #8]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <MQTT_GetConnectPacketSize+0x3e>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d102      	bne.n	800dbf0 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800dbea:	2301      	movs	r3, #1
 800dbec:	77fb      	strb	r3, [r7, #31]
 800dbee:	e044      	b.n	800dc7a <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d007      	beq.n	800dc06 <MQTT_GetConnectPacketSize+0x5a>
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbfe:	d302      	bcc.n	800dc06 <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800dc00:	2301      	movs	r3, #1
 800dc02:	77fb      	strb	r3, [r7, #31]
 800dc04:	e039      	b.n	800dc7a <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	891b      	ldrh	r3, [r3, #8]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	4413      	add	r3, r2
 800dc10:	3302      	adds	r3, #2
 800dc12:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	891b      	ldrh	r3, [r3, #8]
 800dc1e:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800dc24:	441a      	add	r2, r3
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	4413      	add	r3, r2
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	8a1b      	ldrh	r3, [r3, #16]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	4413      	add	r3, r2
 800dc40:	3302      	adds	r3, #2
 800dc42:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d006      	beq.n	800dc5a <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8b1b      	ldrh	r3, [r3, #24]
 800dc50:	461a      	mov	r2, r3
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	4413      	add	r3, r2
 800dc56:	3302      	adds	r3, #2
 800dc58:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800dc5e:	69b8      	ldr	r0, [r7, #24]
 800dc60:	f7ff f977 	bl	800cf52 <remainingLengthEncodedSize>
 800dc64:	4603      	mov	r3, r0
 800dc66:	3301      	adds	r3, #1
 800dc68:	69ba      	ldr	r2, [r7, #24]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	69ba      	ldr	r2, [r7, #24]
 800dc78:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800dc7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3720      	adds	r7, #32
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <MQTT_GetSubscribePacketSize>:

MQTTStatus_t MQTT_GetSubscribePacketSize( const MQTTSubscribeInfo_t * pSubscriptionList,
                                          size_t subscriptionCount,
                                          size_t * pRemainingLength,
                                          size_t * pPacketSize )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af02      	add	r7, sp, #8
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800dc92:	2300      	movs	r3, #0
 800dc94:	75fb      	strb	r3, [r7, #23]

    /* Validate parameters. */
    if( ( pSubscriptionList == NULL ) || ( pRemainingLength == NULL ) ||
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d005      	beq.n	800dca8 <MQTT_GetSubscribePacketSize+0x24>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <MQTT_GetSubscribePacketSize+0x24>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d102      	bne.n	800dcae <MQTT_GetSubscribePacketSize+0x2a>
        LogError( ( "Argument cannot be NULL: pSubscriptionList=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pSubscriptionList,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	75fb      	strb	r3, [r7, #23]
 800dcac:	e00f      	b.n	800dcce <MQTT_GetSubscribePacketSize+0x4a>
    }
    else if( subscriptionCount == 0U )
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d102      	bne.n	800dcba <MQTT_GetSubscribePacketSize+0x36>
    {
        LogError( ( "subscriptionCount is 0." ) );
        status = MQTTBadParameter;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	75fb      	strb	r3, [r7, #23]
 800dcb8:	e009      	b.n	800dcce <MQTT_GetSubscribePacketSize+0x4a>
    }
    else
    {
        /* Calculate the MQTT SUBSCRIBE packet size. */
        status = calculateSubscriptionPacketSize( pSubscriptionList,
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f7ff fca3 	bl	800d610 <calculateSubscriptionPacketSize>
 800dcca:	4603      	mov	r3, r0
 800dccc:	75fb      	strb	r3, [r7, #23]
                                                  pRemainingLength,
                                                  pPacketSize,
                                                  MQTT_SUBSCRIBE );
    }

    return status;
 800dcce:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <MQTT_SerializeSubscribeHeader>:
/*-----------------------------------------------------------*/

uint8_t * MQTT_SerializeSubscribeHeader( size_t remainingLength,
                                         uint8_t * pIndex,
                                         uint16_t packetId )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	4613      	mov	r3, r2
 800dce4:	80fb      	strh	r3, [r7, #6]
    uint8_t * pIterator = pIndex;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	617b      	str	r3, [r7, #20]

    /* The first byte in SUBSCRIBE is the packet type. */
    *pIterator = MQTT_PACKET_TYPE_SUBSCRIBE;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	2282      	movs	r2, #130	; 0x82
 800dcee:	701a      	strb	r2, [r3, #0]
    pIterator++;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	617b      	str	r3, [r7, #20]

    /* Encode the "Remaining length" starting from the second byte. */
    pIterator = encodeRemainingLength( pIterator, remainingLength );
 800dcf6:	68f9      	ldr	r1, [r7, #12]
 800dcf8:	6978      	ldr	r0, [r7, #20]
 800dcfa:	f7ff f94b 	bl	800cf94 <encodeRemainingLength>
 800dcfe:	6178      	str	r0, [r7, #20]

    /* Place the packet identifier into the SUBSCRIBE packet. */
    pIterator[ 0 ] = UINT16_HIGH_BYTE( packetId );
 800dd00:	88fb      	ldrh	r3, [r7, #6]
 800dd02:	0a1b      	lsrs	r3, r3, #8
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	701a      	strb	r2, [r3, #0]
    pIterator[ 1 ] = UINT16_LOW_BYTE( packetId );
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	88fa      	ldrh	r2, [r7, #6]
 800dd12:	b2d2      	uxtb	r2, r2
 800dd14:	701a      	strb	r2, [r3, #0]
    /* Advance the pointer. */
    pIterator = &pIterator[ 2 ];
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	3302      	adds	r3, #2
 800dd1a:	617b      	str	r3, [r7, #20]

    return pIterator;
 800dd1c:	697b      	ldr	r3, [r7, #20]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3718      	adds	r7, #24
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b086      	sub	sp, #24
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	60f8      	str	r0, [r7, #12]
 800dd2e:	60b9      	str	r1, [r7, #8]
 800dd30:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dd32:	2300      	movs	r3, #0
 800dd34:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d005      	beq.n	800dd48 <MQTT_GetPublishPacketSize+0x22>
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d002      	beq.n	800dd48 <MQTT_GetPublishPacketSize+0x22>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d102      	bne.n	800dd4e <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	75fb      	strb	r3, [r7, #23]
 800dd4c:	e017      	b.n	800dd7e <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d003      	beq.n	800dd5e <MQTT_GetPublishPacketSize+0x38>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	891b      	ldrh	r3, [r3, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d102      	bne.n	800dd64 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	75fb      	strb	r3, [r7, #23]
 800dd62:	e00c      	b.n	800dd7e <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	68b9      	ldr	r1, [r7, #8]
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f7ff f98b 	bl	800d084 <calculatePublishPacketSize>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	f083 0301 	eor.w	r3, r3, #1
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
 800dd94:	4613      	mov	r3, r2
 800dd96:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d102      	bne.n	800dda8 <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800dda2:	2301      	movs	r3, #1
 800dda4:	73fb      	strb	r3, [r7, #15]
 800dda6:	e03b      	b.n	800de20 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d102      	bne.n	800ddb6 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	73fb      	strb	r3, [r7, #15]
 800ddb4:	e034      	b.n	800de20 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d802      	bhi.n	800ddc4 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	73fb      	strb	r3, [r7, #15]
 800ddc2:	e02d      	b.n	800de20 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800ddc4:	883b      	ldrh	r3, [r7, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d102      	bne.n	800ddd0 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	73fb      	strb	r3, [r7, #15]
 800ddce:	e027      	b.n	800de20 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800ddd0:	78fb      	ldrb	r3, [r7, #3]
 800ddd2:	2b70      	cmp	r3, #112	; 0x70
 800ddd4:	d009      	beq.n	800ddea <MQTT_SerializeAck+0x62>
 800ddd6:	2b70      	cmp	r3, #112	; 0x70
 800ddd8:	dc1f      	bgt.n	800de1a <MQTT_SerializeAck+0x92>
 800ddda:	2b62      	cmp	r3, #98	; 0x62
 800dddc:	d005      	beq.n	800ddea <MQTT_SerializeAck+0x62>
 800ddde:	2b62      	cmp	r3, #98	; 0x62
 800dde0:	dc1b      	bgt.n	800de1a <MQTT_SerializeAck+0x92>
 800dde2:	2b40      	cmp	r3, #64	; 0x40
 800dde4:	d001      	beq.n	800ddea <MQTT_SerializeAck+0x62>
 800dde6:	2b50      	cmp	r3, #80	; 0x50
 800dde8:	d117      	bne.n	800de1a <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	78fa      	ldrb	r2, [r7, #3]
 800ddf0:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800ddfc:	883b      	ldrh	r3, [r7, #0]
 800ddfe:	0a1b      	lsrs	r3, r3, #8
 800de00:	b29a      	uxth	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3302      	adds	r3, #2
 800de08:	b2d2      	uxtb	r2, r2
 800de0a:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3303      	adds	r3, #3
 800de12:	883a      	ldrh	r2, [r7, #0]
 800de14:	b2d2      	uxtb	r2, r2
 800de16:	701a      	strb	r2, [r3, #0]
                break;
 800de18:	e002      	b.n	800de20 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800de1a:	2301      	movs	r3, #1
 800de1c:	73fb      	strb	r3, [r7, #15]
                break;
 800de1e:	bf00      	nop
        }
    }

    return status;
 800de20:	7bfb      	ldrb	r3, [r7, #15]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <MQTT_GetPingreqPacketSize>:
}

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPingreqPacketSize( size_t * pPacketSize )
{
 800de2e:	b480      	push	{r7}
 800de30:	b085      	sub	sp, #20
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800de36:	2300      	movs	r3, #0
 800de38:	73fb      	strb	r3, [r7, #15]

    if( pPacketSize == NULL )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d102      	bne.n	800de46 <MQTT_GetPingreqPacketSize+0x18>
    {
        LogError( ( "pPacketSize is NULL." ) );
        status = MQTTBadParameter;
 800de40:	2301      	movs	r3, #1
 800de42:	73fb      	strb	r3, [r7, #15]
 800de44:	e002      	b.n	800de4c <MQTT_GetPingreqPacketSize+0x1e>
    }
    else
    {
        /* MQTT PINGREQ packets always have the same size. */
        *pPacketSize = MQTT_PACKET_PINGREQ_SIZE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2202      	movs	r2, #2
 800de4a:	601a      	str	r2, [r3, #0]
    }

    return status;
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <MQTT_SerializePingreq>:

/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializePingreq( const MQTTFixedBuffer_t * pFixedBuffer )
{
 800de5a:	b480      	push	{r7}
 800de5c:	b085      	sub	sp, #20
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800de62:	2300      	movs	r3, #0
 800de64:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d102      	bne.n	800de72 <MQTT_SerializePingreq+0x18>
    {
        LogError( ( "pFixedBuffer is NULL." ) );
        status = MQTTBadParameter;
 800de6c:	2301      	movs	r3, #1
 800de6e:	73fb      	strb	r3, [r7, #15]
 800de70:	e005      	b.n	800de7e <MQTT_SerializePingreq+0x24>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d101      	bne.n	800de7e <MQTT_SerializePingreq+0x24>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800de7a:	2301      	movs	r3, #1
 800de7c:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( status == MQTTSuccess )
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d105      	bne.n	800de90 <MQTT_SerializePingreq+0x36>
    {
        if( pFixedBuffer->size < MQTT_PACKET_PINGREQ_SIZE )
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d801      	bhi.n	800de90 <MQTT_SerializePingreq+0x36>
        {
            LogError( ( "Buffer size of %lu is not sufficient to hold "
                        "serialized PINGREQ packet of size of %lu.",
                        ( unsigned long ) pFixedBuffer->size,
                        MQTT_PACKET_PINGREQ_SIZE ) );
            status = MQTTNoMemory;
 800de8c:	2302      	movs	r3, #2
 800de8e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( status == MQTTSuccess )
 800de90:	7bfb      	ldrb	r3, [r7, #15]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d108      	bne.n	800dea8 <MQTT_SerializePingreq+0x4e>
    {
        /* Ping request packets are always the same. */
        pFixedBuffer->pBuffer[ 0 ] = MQTT_PACKET_TYPE_PINGREQ;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	22c0      	movs	r2, #192	; 0xc0
 800de9c:	701a      	strb	r2, [r3, #0]
        pFixedBuffer->pBuffer[ 1 ] = 0x00;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3301      	adds	r3, #1
 800dea4:	2200      	movs	r2, #0
 800dea6:	701a      	strb	r2, [r3, #0]
    }

    return status;
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <MQTT_DeserializePublish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializePublish( const MQTTPacketInfo_t * pIncomingPacket,
                                      uint16_t * pPacketId,
                                      MQTTPublishInfo_t * pPublishInfo )
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b086      	sub	sp, #24
 800deba:	af00      	add	r7, sp, #0
 800debc:	60f8      	str	r0, [r7, #12]
 800debe:	60b9      	str	r1, [r7, #8]
 800dec0:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800dec2:	2300      	movs	r3, #0
 800dec4:	75fb      	strb	r3, [r7, #23]

    if( ( pIncomingPacket == NULL ) || ( pPacketId == NULL ) || ( pPublishInfo == NULL ) )
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d005      	beq.n	800ded8 <MQTT_DeserializePublish+0x22>
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <MQTT_DeserializePublish+0x22>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d102      	bne.n	800dede <MQTT_DeserializePublish+0x28>
        LogError( ( "Argument cannot be NULL: pIncomingPacket=%p, "
                    "pPacketId=%p, pPublishInfo=%p",
                    ( void * ) pIncomingPacket,
                    ( void * ) pPacketId,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800ded8:	2301      	movs	r3, #1
 800deda:	75fb      	strb	r3, [r7, #23]
 800dedc:	e016      	b.n	800df0c <MQTT_DeserializePublish+0x56>
    }
    else if( ( pIncomingPacket->type & 0xF0U ) != MQTT_PACKET_TYPE_PUBLISH )
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dee6:	2b30      	cmp	r3, #48	; 0x30
 800dee8:	d002      	beq.n	800def0 <MQTT_DeserializePublish+0x3a>
    {
        LogError( ( "Packet is not publish. Packet type: %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800deea:	2301      	movs	r3, #1
 800deec:	75fb      	strb	r3, [r7, #23]
 800deee:	e00d      	b.n	800df0c <MQTT_DeserializePublish+0x56>
    }
    else if( pIncomingPacket->pRemainingData == NULL )
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <MQTT_DeserializePublish+0x48>
    {
        LogError( ( "Argument cannot be NULL: "
                    "pIncomingPacket->pRemainingData is NULL." ) );
        status = MQTTBadParameter;
 800def8:	2301      	movs	r3, #1
 800defa:	75fb      	strb	r3, [r7, #23]
 800defc:	e006      	b.n	800df0c <MQTT_DeserializePublish+0x56>
    }
    else
    {
        status = deserializePublish( pIncomingPacket, pPacketId, pPublishInfo );
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	68b9      	ldr	r1, [r7, #8]
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f7ff fcb4 	bl	800d870 <deserializePublish>
 800df08:	4603      	mov	r3, r0
 800df0a:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3718      	adds	r7, #24
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b086      	sub	sp, #24
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800df22:	2300      	movs	r3, #0
 800df24:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d102      	bne.n	800df32 <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800df2c:	2301      	movs	r3, #1
 800df2e:	75fb      	strb	r3, [r7, #23]
 800df30:	e05f      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10a      	bne.n	800df4e <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800df3c:	2b20      	cmp	r3, #32
 800df3e:	d006      	beq.n	800df4e <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800df44:	2bd0      	cmp	r3, #208	; 0xd0
 800df46:	d002      	beq.n	800df4e <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800df48:	2301      	movs	r3, #1
 800df4a:	75fb      	strb	r3, [r7, #23]
 800df4c:	e051      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d106      	bne.n	800df62 <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800df58:	2b20      	cmp	r3, #32
 800df5a:	d102      	bne.n	800df62 <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800df5c:	2301      	movs	r3, #1
 800df5e:	75fb      	strb	r3, [r7, #23]
 800df60:	e047      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d106      	bne.n	800df78 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800df6e:	2bd0      	cmp	r3, #208	; 0xd0
 800df70:	d002      	beq.n	800df78 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800df72:	2301      	movs	r3, #1
 800df74:	75fb      	strb	r3, [r7, #23]
 800df76:	e03c      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	2bd0      	cmp	r3, #208	; 0xd0
 800df7e:	d028      	beq.n	800dfd2 <MQTT_DeserializeAck+0xbc>
 800df80:	2bd0      	cmp	r3, #208	; 0xd0
 800df82:	dc33      	bgt.n	800dfec <MQTT_DeserializeAck+0xd6>
 800df84:	2bb0      	cmp	r3, #176	; 0xb0
 800df86:	d02a      	beq.n	800dfde <MQTT_DeserializeAck+0xc8>
 800df88:	2bb0      	cmp	r3, #176	; 0xb0
 800df8a:	dc2f      	bgt.n	800dfec <MQTT_DeserializeAck+0xd6>
 800df8c:	2b90      	cmp	r3, #144	; 0x90
 800df8e:	d019      	beq.n	800dfc4 <MQTT_DeserializeAck+0xae>
 800df90:	2b90      	cmp	r3, #144	; 0x90
 800df92:	dc2b      	bgt.n	800dfec <MQTT_DeserializeAck+0xd6>
 800df94:	2b70      	cmp	r3, #112	; 0x70
 800df96:	d022      	beq.n	800dfde <MQTT_DeserializeAck+0xc8>
 800df98:	2b70      	cmp	r3, #112	; 0x70
 800df9a:	dc27      	bgt.n	800dfec <MQTT_DeserializeAck+0xd6>
 800df9c:	2b62      	cmp	r3, #98	; 0x62
 800df9e:	d01e      	beq.n	800dfde <MQTT_DeserializeAck+0xc8>
 800dfa0:	2b62      	cmp	r3, #98	; 0x62
 800dfa2:	dc23      	bgt.n	800dfec <MQTT_DeserializeAck+0xd6>
 800dfa4:	2b50      	cmp	r3, #80	; 0x50
 800dfa6:	d01a      	beq.n	800dfde <MQTT_DeserializeAck+0xc8>
 800dfa8:	2b50      	cmp	r3, #80	; 0x50
 800dfaa:	dc1f      	bgt.n	800dfec <MQTT_DeserializeAck+0xd6>
 800dfac:	2b20      	cmp	r3, #32
 800dfae:	d002      	beq.n	800dfb6 <MQTT_DeserializeAck+0xa0>
 800dfb0:	2b40      	cmp	r3, #64	; 0x40
 800dfb2:	d014      	beq.n	800dfde <MQTT_DeserializeAck+0xc8>
 800dfb4:	e01a      	b.n	800dfec <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7ff fabf 	bl	800d53c <deserializeConnack>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	75fb      	strb	r3, [r7, #23]
                break;
 800dfc2:	e016      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f7ff fbfe 	bl	800d7c8 <deserializeSuback>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	75fb      	strb	r3, [r7, #23]
                break;
 800dfd0:	e00f      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7ff fd50 	bl	800da78 <deserializePingresp>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	75fb      	strb	r3, [r7, #23]
                break;
 800dfdc:	e009      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800dfde:	68b9      	ldr	r1, [r7, #8]
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f7ff fd05 	bl	800d9f0 <deserializeSimpleAck>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	75fb      	strb	r3, [r7, #23]
                break;
 800dfea:	e002      	b.n	800dff2 <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800dfec:	2305      	movs	r3, #5
 800dfee:	75fb      	strb	r3, [r7, #23]
                break;
 800dff0:	bf00      	nop
        }
    }

    return status;
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e008:	2300      	movs	r3, #0
 800e00a:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d102      	bne.n	800e01c <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800e016:	2301      	movs	r3, #1
 800e018:	75fb      	strb	r3, [r7, #23]
 800e01a:	e005      	b.n	800e028 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800e01c:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2201      	movs	r2, #1
 800e022:	68b8      	ldr	r0, [r7, #8]
 800e024:	4798      	blx	r3
 800e026:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d119      	bne.n	800e062 <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff f9aa 	bl	800d38c <incomingPacketValid>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00e      	beq.n	800e05c <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800e03e:	68b9      	ldr	r1, [r7, #8]
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f7ff f8f0 	bl	800d226 <getRemainingLength>
 800e046:	4602      	mov	r2, r0
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e054:	d113      	bne.n	800e07e <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800e056:	2305      	movs	r3, #5
 800e058:	75fb      	strb	r3, [r7, #23]
 800e05a:	e010      	b.n	800e07e <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800e05c:	2305      	movs	r3, #5
 800e05e:	75fb      	strb	r3, [r7, #23]
 800e060:	e00d      	b.n	800e07e <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800e062:	7dfb      	ldrb	r3, [r7, #23]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d005      	beq.n	800e074 <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d102      	bne.n	800e074 <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800e06e:	2307      	movs	r3, #7
 800e070:	75fb      	strb	r3, [r7, #23]
 800e072:	e004      	b.n	800e07e <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d001      	beq.n	800e07e <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800e07a:	2304      	movs	r3, #4
 800e07c:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <MQTT_ProcessIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ProcessIncomingPacketTypeAndLength( const uint8_t * pBuffer,
                                                      const size_t * pIndex,
                                                      MQTTPacketInfo_t * pIncomingPacket )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800e094:	2300      	movs	r3, #0
 800e096:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d102      	bne.n	800e0a4 <MQTT_ProcessIncomingPacketTypeAndLength+0x1c>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	75fb      	strb	r3, [r7, #23]
 800e0a2:	e016      	b.n	800e0d2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pIndex == NULL )
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <MQTT_ProcessIncomingPacketTypeAndLength+0x28>
    {
        LogError( ( "Invalid parameter: pIndex is NULL." ) );
        status = MQTTBadParameter;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	75fb      	strb	r3, [r7, #23]
 800e0ae:	e010      	b.n	800e0d2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else if( pBuffer == NULL )
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d102      	bne.n	800e0bc <MQTT_ProcessIncomingPacketTypeAndLength+0x34>
    {
        LogError( ( "Invalid parameter: pBuffer is NULL." ) );
        status = MQTTBadParameter;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75fb      	strb	r3, [r7, #23]
 800e0ba:	e00a      	b.n	800e0d2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    /* There should be at least one byte in the buffer */
    else if( *pIndex < 1U )
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <MQTT_ProcessIncomingPacketTypeAndLength+0x42>
    {
        /* No data is available. There are 0 bytes received from the network
         * receive function. */
        status = MQTTNoDataAvailable;
 800e0c4:	2307      	movs	r3, #7
 800e0c6:	75fb      	strb	r3, [r7, #23]
 800e0c8:	e003      	b.n	800e0d2 <MQTT_ProcessIncomingPacketTypeAndLength+0x4a>
    }
    else
    {
        /* At least one byte is present which should be deciphered. */
        pIncomingPacket->type = pBuffer[ 0 ];
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	781a      	ldrb	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	701a      	strb	r2, [r3, #0]
    }

    if( status == MQTTSuccess )
 800e0d2:	7dfb      	ldrb	r3, [r7, #23]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d111      	bne.n	800e0fc <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff f955 	bl	800d38c <incomingPacketValid>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d007      	beq.n	800e0f8 <MQTT_ProcessIncomingPacketTypeAndLength+0x70>
        {
            status = processRemainingLength( pBuffer,
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f7ff f8ee 	bl	800d2ce <processRemainingLength>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	75fb      	strb	r3, [r7, #23]
 800e0f6:	e001      	b.n	800e0fc <MQTT_ProcessIncomingPacketTypeAndLength+0x74>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800e0f8:	2305      	movs	r3, #5
 800e0fa:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800e108:	b490      	push	{r4, r7}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	4604      	mov	r4, r0
 800e110:	4608      	mov	r0, r1
 800e112:	4611      	mov	r1, r2
 800e114:	461a      	mov	r2, r3
 800e116:	4623      	mov	r3, r4
 800e118:	71fb      	strb	r3, [r7, #7]
 800e11a:	4603      	mov	r3, r0
 800e11c:	71bb      	strb	r3, [r7, #6]
 800e11e:	460b      	mov	r3, r1
 800e120:	717b      	strb	r3, [r7, #5]
 800e122:	4613      	mov	r3, r2
 800e124:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800e126:	2300      	movs	r3, #0
 800e128:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	2b07      	cmp	r3, #7
 800e12e:	d848      	bhi.n	800e1c2 <validateTransitionPublish+0xba>
 800e130:	a201      	add	r2, pc, #4	; (adr r2, 800e138 <validateTransitionPublish+0x30>)
 800e132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e136:	bf00      	nop
 800e138:	0800e159 	.word	0x0800e159
 800e13c:	0800e17d 	.word	0x0800e17d
 800e140:	0800e1c3 	.word	0x0800e1c3
 800e144:	0800e1c3 	.word	0x0800e1c3
 800e148:	0800e1c3 	.word	0x0800e1c3
 800e14c:	0800e1c3 	.word	0x0800e1c3
 800e150:	0800e1a7 	.word	0x0800e1a7
 800e154:	0800e1b5 	.word	0x0800e1b5
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800e158:	797b      	ldrb	r3, [r7, #5]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d133      	bne.n	800e1c6 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800e15e:	79bb      	ldrb	r3, [r7, #6]
 800e160:	2b02      	cmp	r3, #2
 800e162:	d002      	beq.n	800e16a <validateTransitionPublish+0x62>
 800e164:	79bb      	ldrb	r3, [r7, #6]
 800e166:	2b03      	cmp	r3, #3
 800e168:	d101      	bne.n	800e16e <validateTransitionPublish+0x66>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e000      	b.n	800e170 <validateTransitionPublish+0x68>
 800e16e:	2300      	movs	r3, #0
 800e170:	73fb      	strb	r3, [r7, #15]
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	f003 0301 	and.w	r3, r3, #1
 800e178:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800e17a:	e024      	b.n	800e1c6 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800e17c:	793b      	ldrb	r3, [r7, #4]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d002      	beq.n	800e188 <validateTransitionPublish+0x80>
 800e182:	2b02      	cmp	r3, #2
 800e184:	d007      	beq.n	800e196 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800e186:	e00d      	b.n	800e1a4 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800e188:	79bb      	ldrb	r3, [r7, #6]
 800e18a:	2b06      	cmp	r3, #6
 800e18c:	bf0c      	ite	eq
 800e18e:	2301      	moveq	r3, #1
 800e190:	2300      	movne	r3, #0
 800e192:	73fb      	strb	r3, [r7, #15]
                    break;
 800e194:	e006      	b.n	800e1a4 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800e196:	79bb      	ldrb	r3, [r7, #6]
 800e198:	2b07      	cmp	r3, #7
 800e19a:	bf0c      	ite	eq
 800e19c:	2301      	moveq	r3, #1
 800e19e:	2300      	movne	r3, #0
 800e1a0:	73fb      	strb	r3, [r7, #15]
                    break;
 800e1a2:	bf00      	nop
            }

            break;
 800e1a4:	e010      	b.n	800e1c8 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800e1a6:	79bb      	ldrb	r3, [r7, #6]
 800e1a8:	2b06      	cmp	r3, #6
 800e1aa:	bf0c      	ite	eq
 800e1ac:	2301      	moveq	r3, #1
 800e1ae:	2300      	movne	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]

            break;
 800e1b2:	e009      	b.n	800e1c8 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800e1b4:	79bb      	ldrb	r3, [r7, #6]
 800e1b6:	2b07      	cmp	r3, #7
 800e1b8:	bf0c      	ite	eq
 800e1ba:	2301      	moveq	r3, #1
 800e1bc:	2300      	movne	r3, #0
 800e1be:	73fb      	strb	r3, [r7, #15]

            break;
 800e1c0:	e002      	b.n	800e1c8 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800e1c2:	bf00      	nop
 800e1c4:	e000      	b.n	800e1c8 <validateTransitionPublish+0xc0>
            break;
 800e1c6:	bf00      	nop
    }

    return isValid;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bc90      	pop	{r4, r7}
 800e1d2:	4770      	bx	lr

0800e1d4 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	460a      	mov	r2, r1
 800e1de:	71fb      	strb	r3, [r7, #7]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	3b02      	subs	r3, #2
 800e1ec:	2b07      	cmp	r3, #7
 800e1ee:	d85c      	bhi.n	800e2aa <validateTransitionAck+0xd6>
 800e1f0:	a201      	add	r2, pc, #4	; (adr r2, 800e1f8 <validateTransitionAck+0x24>)
 800e1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f6:	bf00      	nop
 800e1f8:	0800e219 	.word	0x0800e219
 800e1fc:	0800e227 	.word	0x0800e227
 800e200:	0800e27f 	.word	0x0800e27f
 800e204:	0800e253 	.word	0x0800e253
 800e208:	0800e219 	.word	0x0800e219
 800e20c:	0800e271 	.word	0x0800e271
 800e210:	0800e235 	.word	0x0800e235
 800e214:	0800e28d 	.word	0x0800e28d
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800e218:	79bb      	ldrb	r3, [r7, #6]
 800e21a:	2b0a      	cmp	r3, #10
 800e21c:	bf0c      	ite	eq
 800e21e:	2301      	moveq	r3, #1
 800e220:	2300      	movne	r3, #0
 800e222:	73fb      	strb	r3, [r7, #15]
            break;
 800e224:	e042      	b.n	800e2ac <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800e226:	79bb      	ldrb	r3, [r7, #6]
 800e228:	2b08      	cmp	r3, #8
 800e22a:	bf0c      	ite	eq
 800e22c:	2301      	moveq	r3, #1
 800e22e:	2300      	movne	r3, #0
 800e230:	73fb      	strb	r3, [r7, #15]
            break;
 800e232:	e03b      	b.n	800e2ac <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800e234:	79bb      	ldrb	r3, [r7, #6]
 800e236:	2b05      	cmp	r3, #5
 800e238:	d002      	beq.n	800e240 <validateTransitionAck+0x6c>
 800e23a:	79bb      	ldrb	r3, [r7, #6]
 800e23c:	2b08      	cmp	r3, #8
 800e23e:	d101      	bne.n	800e244 <validateTransitionAck+0x70>
 800e240:	2301      	movs	r3, #1
 800e242:	e000      	b.n	800e246 <validateTransitionAck+0x72>
 800e244:	2300      	movs	r3, #0
 800e246:	73fb      	strb	r3, [r7, #15]
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800e250:	e02c      	b.n	800e2ac <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e252:	79bb      	ldrb	r3, [r7, #6]
 800e254:	2b0a      	cmp	r3, #10
 800e256:	d002      	beq.n	800e25e <validateTransitionAck+0x8a>
 800e258:	79bb      	ldrb	r3, [r7, #6]
 800e25a:	2b05      	cmp	r3, #5
 800e25c:	d101      	bne.n	800e262 <validateTransitionAck+0x8e>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <validateTransitionAck+0x90>
 800e262:	2300      	movs	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	f003 0301 	and.w	r3, r3, #1
 800e26c:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800e26e:	e01d      	b.n	800e2ac <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800e270:	79bb      	ldrb	r3, [r7, #6]
 800e272:	2b04      	cmp	r3, #4
 800e274:	bf0c      	ite	eq
 800e276:	2301      	moveq	r3, #1
 800e278:	2300      	movne	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
            break;
 800e27c:	e016      	b.n	800e2ac <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800e27e:	79bb      	ldrb	r3, [r7, #6]
 800e280:	2b09      	cmp	r3, #9
 800e282:	bf0c      	ite	eq
 800e284:	2301      	moveq	r3, #1
 800e286:	2300      	movne	r3, #0
 800e288:	73fb      	strb	r3, [r7, #15]
            break;
 800e28a:	e00f      	b.n	800e2ac <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800e28c:	79bb      	ldrb	r3, [r7, #6]
 800e28e:	2b0a      	cmp	r3, #10
 800e290:	d002      	beq.n	800e298 <validateTransitionAck+0xc4>
 800e292:	79bb      	ldrb	r3, [r7, #6]
 800e294:	2b09      	cmp	r3, #9
 800e296:	d101      	bne.n	800e29c <validateTransitionAck+0xc8>
 800e298:	2301      	movs	r3, #1
 800e29a:	e000      	b.n	800e29e <validateTransitionAck+0xca>
 800e29c:	2300      	movs	r3, #0
 800e29e:	73fb      	strb	r3, [r7, #15]
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	f003 0301 	and.w	r3, r3, #1
 800e2a6:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800e2a8:	e000      	b.n	800e2ac <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800e2aa:	bf00      	nop
    }

    return isValid;
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop

0800e2bc <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	460a      	mov	r2, r1
 800e2c6:	71fb      	strb	r3, [r7, #7]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800e2d0:	79fb      	ldrb	r3, [r7, #7]
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d009      	beq.n	800e2ea <isPublishOutgoing+0x2e>
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	dc15      	bgt.n	800e306 <isPublishOutgoing+0x4a>
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	dc02      	bgt.n	800e2e4 <isPublishOutgoing+0x28>
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	da03      	bge.n	800e2ea <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800e2e2:	e010      	b.n	800e306 <isPublishOutgoing+0x4a>
    switch( packetType )
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d007      	beq.n	800e2f8 <isPublishOutgoing+0x3c>
            break;
 800e2e8:	e00d      	b.n	800e306 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800e2ea:	79bb      	ldrb	r3, [r7, #6]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	bf0c      	ite	eq
 800e2f0:	2301      	moveq	r3, #1
 800e2f2:	2300      	movne	r3, #0
 800e2f4:	73fb      	strb	r3, [r7, #15]
            break;
 800e2f6:	e007      	b.n	800e308 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800e2f8:	79bb      	ldrb	r3, [r7, #6]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	bf0c      	ite	eq
 800e2fe:	2301      	moveq	r3, #1
 800e300:	2300      	movne	r3, #0
 800e302:	73fb      	strb	r3, [r7, #15]
            break;
 800e304:	e000      	b.n	800e308 <isPublishOutgoing+0x4c>
            break;
 800e306:	bf00      	nop
    }

    return isOutgoing;
 800e308:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
	...

0800e318 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	603b      	str	r3, [r7, #0]
 800e324:	4613      	mov	r3, r2
 800e326:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e32c:	88fb      	ldrh	r3, [r7, #6]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <findInRecord+0x28>
 800e332:	4b1b      	ldr	r3, [pc, #108]	; (800e3a0 <findInRecord+0x88>)
 800e334:	4a1b      	ldr	r2, [pc, #108]	; (800e3a4 <findInRecord+0x8c>)
 800e336:	f240 11c7 	movw	r1, #455	; 0x1c7
 800e33a:	481b      	ldr	r0, [pc, #108]	; (800e3a8 <findInRecord+0x90>)
 800e33c:	f003 fe26 	bl	8011f8c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	2200      	movs	r2, #0
 800e344:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800e346:	2300      	movs	r3, #0
 800e348:	617b      	str	r3, [r7, #20]
 800e34a:	e019      	b.n	800e380 <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4413      	add	r3, r2
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	88fa      	ldrh	r2, [r7, #6]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d10e      	bne.n	800e37a <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	4413      	add	r3, r2
 800e364:	789a      	ldrb	r2, [r3, #2]
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	4413      	add	r3, r2
 800e372:	78da      	ldrb	r2, [r3, #3]
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	701a      	strb	r2, [r3, #0]
            break;
 800e378:	e006      	b.n	800e388 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	3301      	adds	r3, #1
 800e37e:	617b      	str	r3, [r7, #20]
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	429a      	cmp	r2, r3
 800e386:	d3e1      	bcc.n	800e34c <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d102      	bne.n	800e396 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800e390:	2300      	movs	r3, #0
 800e392:	43db      	mvns	r3, r3
 800e394:	617b      	str	r3, [r7, #20]
    }

    return index;
 800e396:	697b      	ldr	r3, [r7, #20]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	08017d50 	.word	0x08017d50
 800e3a4:	08018284 	.word	0x08018284
 800e3a8:	08017d74 	.word	0x08017d74

0800e3ac <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	43db      	mvns	r3, r3
 800e3be:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d150      	bne.n	800e468 <compactRecords+0xbc>
 800e3c6:	4b2d      	ldr	r3, [pc, #180]	; (800e47c <compactRecords+0xd0>)
 800e3c8:	4a2d      	ldr	r2, [pc, #180]	; (800e480 <compactRecords+0xd4>)
 800e3ca:	f240 11e5 	movw	r1, #485	; 0x1e5
 800e3ce:	482d      	ldr	r0, [pc, #180]	; (800e484 <compactRecords+0xd8>)
 800e3d0:	f003 fddc 	bl	8011f8c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	4413      	add	r3, r2
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d107      	bne.n	800e3f2 <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	43db      	mvns	r3, r3
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d13a      	bne.n	800e462 <compactRecords+0xb6>
            {
                emptyIndex = index;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	60bb      	str	r3, [r7, #8]
 800e3f0:	e037      	b.n	800e462 <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	43db      	mvns	r3, r3
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d032      	beq.n	800e462 <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	441a      	add	r2, r3
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	6879      	ldr	r1, [r7, #4]
 800e40a:	440b      	add	r3, r1
 800e40c:	8812      	ldrh	r2, [r2, #0]
 800e40e:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	441a      	add	r2, r3
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	440b      	add	r3, r1
 800e420:	7892      	ldrb	r2, [r2, #2]
 800e422:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	441a      	add	r2, r3
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	6879      	ldr	r1, [r7, #4]
 800e432:	440b      	add	r3, r1
 800e434:	78d2      	ldrb	r2, [r2, #3]
 800e436:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	4413      	add	r3, r2
 800e440:	2200      	movs	r2, #0
 800e442:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	4413      	add	r3, r2
 800e44c:	2200      	movs	r2, #0
 800e44e:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	4413      	add	r3, r2
 800e458:	2200      	movs	r2, #0
 800e45a:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	3301      	adds	r3, #1
 800e460:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3301      	adds	r3, #1
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d3b1      	bcc.n	800e3d4 <compactRecords+0x28>
            }
        }
    }
}
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	08017da4 	.word	0x08017da4
 800e480:	08018294 	.word	0x08018294
 800e484:	08017d74 	.word	0x08017d74

0800e488 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b088      	sub	sp, #32
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4611      	mov	r1, r2
 800e494:	461a      	mov	r2, r3
 800e496:	460b      	mov	r3, r1
 800e498:	80fb      	strh	r3, [r7, #6]
 800e49a:	4613      	mov	r3, r2
 800e49c:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800e49e:	2302      	movs	r3, #2
 800e4a0:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e4ae:	88fb      	ldrh	r3, [r7, #6]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d106      	bne.n	800e4c2 <addRecord+0x3a>
 800e4b4:	4b32      	ldr	r3, [pc, #200]	; (800e580 <addRecord+0xf8>)
 800e4b6:	4a33      	ldr	r2, [pc, #204]	; (800e584 <addRecord+0xfc>)
 800e4b8:	f44f 7105 	mov.w	r1, #532	; 0x214
 800e4bc:	4832      	ldr	r0, [pc, #200]	; (800e588 <addRecord+0x100>)
 800e4be:	f003 fd65 	bl	8011f8c <__assert_func>
    assert( qos != MQTTQoS0 );
 800e4c2:	797b      	ldrb	r3, [r7, #5]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d106      	bne.n	800e4d6 <addRecord+0x4e>
 800e4c8:	4b30      	ldr	r3, [pc, #192]	; (800e58c <addRecord+0x104>)
 800e4ca:	4a2e      	ldr	r2, [pc, #184]	; (800e584 <addRecord+0xfc>)
 800e4cc:	f240 2115 	movw	r1, #533	; 0x215
 800e4d0:	482d      	ldr	r0, [pc, #180]	; (800e588 <addRecord+0x100>)
 800e4d2:	f003 fd5b 	bl	8011f8c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d003      	beq.n	800e4f2 <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800e4ea:	68b9      	ldr	r1, [r7, #8]
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7ff ff5d 	bl	800e3ac <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	61bb      	str	r3, [r7, #24]
 800e4f8:	e021      	b.n	800e53e <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	4413      	add	r3, r2
 800e502:	881b      	ldrh	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d108      	bne.n	800e51a <addRecord+0x92>
        {
            if( validEntryFound == false )
 800e508:	7cfb      	ldrb	r3, [r7, #19]
 800e50a:	f083 0301 	eor.w	r3, r3, #1
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	2b00      	cmp	r3, #0
 800e512:	d011      	beq.n	800e538 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	617b      	str	r3, [r7, #20]
 800e518:	e00e      	b.n	800e538 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800e51a:	2301      	movs	r3, #1
 800e51c:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	4413      	add	r3, r2
 800e526:	881b      	ldrh	r3, [r3, #0]
 800e528:	88fa      	ldrh	r2, [r7, #6]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d104      	bne.n	800e538 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800e52e:	2309      	movs	r3, #9
 800e530:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	617b      	str	r3, [r7, #20]
                break;
 800e536:	e005      	b.n	800e544 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	61bb      	str	r3, [r7, #24]
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	2b00      	cmp	r3, #0
 800e542:	dada      	bge.n	800e4fa <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d214      	bcs.n	800e576 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	4413      	add	r3, r2
 800e554:	88fa      	ldrh	r2, [r7, #6]
 800e556:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	4413      	add	r3, r2
 800e560:	797a      	ldrb	r2, [r7, #5]
 800e562:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	4413      	add	r3, r2
 800e56c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e570:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800e572:	2300      	movs	r3, #0
 800e574:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800e576:	7ffb      	ldrb	r3, [r7, #31]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	08017d50 	.word	0x08017d50
 800e584:	080182a4 	.word	0x080182a4
 800e588:	08017d74 	.word	0x08017d74
 800e58c:	08017db4 	.word	0x08017db4

0800e590 <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	4611      	mov	r1, r2
 800e59c:	461a      	mov	r2, r3
 800e59e:	460b      	mov	r3, r1
 800e5a0:	71fb      	strb	r3, [r7, #7]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d106      	bne.n	800e5ba <updateRecord+0x2a>
 800e5ac:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <updateRecord+0x6c>)
 800e5ae:	4a14      	ldr	r2, [pc, #80]	; (800e600 <updateRecord+0x70>)
 800e5b0:	f240 2151 	movw	r1, #593	; 0x251
 800e5b4:	4813      	ldr	r0, [pc, #76]	; (800e604 <updateRecord+0x74>)
 800e5b6:	f003 fce9 	bl	8011f8c <__assert_func>

    if( shouldDelete == true )
 800e5ba:	79bb      	ldrb	r3, [r7, #6]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d012      	beq.n	800e5e6 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	4413      	add	r3, r2
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800e5e4:	e005      	b.n	800e5f2 <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	79fa      	ldrb	r2, [r7, #7]
 800e5f0:	70da      	strb	r2, [r3, #3]
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	08017da4 	.word	0x08017da4
 800e600:	080182b0 	.word	0x080182b0
 800e604:	08017d74 	.word	0x08017d74

0800e608 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b088      	sub	sp, #32
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	460b      	mov	r3, r1
 800e612:	607a      	str	r2, [r7, #4]
 800e614:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800e616:	2300      	movs	r3, #0
 800e618:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800e61a:	2300      	movs	r3, #0
 800e61c:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800e622:	2300      	movs	r3, #0
 800e624:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d106      	bne.n	800e63a <stateSelect+0x32>
 800e62c:	4b43      	ldr	r3, [pc, #268]	; (800e73c <stateSelect+0x134>)
 800e62e:	4a44      	ldr	r2, [pc, #272]	; (800e740 <stateSelect+0x138>)
 800e630:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800e634:	4843      	ldr	r0, [pc, #268]	; (800e744 <stateSelect+0x13c>)
 800e636:	f003 fca9 	bl	8011f8c <__assert_func>
    assert( searchStates != 0U );
 800e63a:	897b      	ldrh	r3, [r7, #10]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d106      	bne.n	800e64e <stateSelect+0x46>
 800e640:	4b41      	ldr	r3, [pc, #260]	; (800e748 <stateSelect+0x140>)
 800e642:	4a3f      	ldr	r2, [pc, #252]	; (800e740 <stateSelect+0x138>)
 800e644:	f240 216d 	movw	r1, #621	; 0x26d
 800e648:	483e      	ldr	r0, [pc, #248]	; (800e744 <stateSelect+0x13c>)
 800e64a:	f003 fc9f 	bl	8011f8c <__assert_func>
    assert( pCursor != NULL );
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d106      	bne.n	800e662 <stateSelect+0x5a>
 800e654:	4b3d      	ldr	r3, [pc, #244]	; (800e74c <stateSelect+0x144>)
 800e656:	4a3a      	ldr	r2, [pc, #232]	; (800e740 <stateSelect+0x138>)
 800e658:	f240 216e 	movw	r1, #622	; 0x26e
 800e65c:	4839      	ldr	r0, [pc, #228]	; (800e744 <stateSelect+0x13c>)
 800e65e:	f003 fc95 	bl	8011f8c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800e662:	8bbb      	ldrh	r3, [r7, #28]
 800e664:	f043 0302 	orr.w	r3, r3, #2
 800e668:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800e66a:	8bbb      	ldrh	r3, [r7, #28]
 800e66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e670:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800e672:	8bbb      	ldrh	r3, [r7, #28]
 800e674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e678:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800e67a:	8bbb      	ldrh	r3, [r7, #28]
 800e67c:	f043 0310 	orr.w	r3, r3, #16
 800e680:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800e682:	8bbb      	ldrh	r3, [r7, #28]
 800e684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e688:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800e68a:	8bba      	ldrh	r2, [r7, #28]
 800e68c:	897b      	ldrh	r3, [r7, #10]
 800e68e:	4013      	ands	r3, r2
 800e690:	b29b      	uxth	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <stateSelect+0x9c>
 800e696:	4b2e      	ldr	r3, [pc, #184]	; (800e750 <stateSelect+0x148>)
 800e698:	4a29      	ldr	r2, [pc, #164]	; (800e740 <stateSelect+0x138>)
 800e69a:	f44f 711e 	mov.w	r1, #632	; 0x278
 800e69e:	4829      	ldr	r0, [pc, #164]	; (800e744 <stateSelect+0x13c>)
 800e6a0:	f003 fc74 	bl	8011f8c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800e6a4:	8bbb      	ldrh	r3, [r7, #28]
 800e6a6:	43da      	mvns	r2, r3
 800e6a8:	897b      	ldrh	r3, [r7, #10]
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d006      	beq.n	800e6be <stateSelect+0xb6>
 800e6b0:	4b28      	ldr	r3, [pc, #160]	; (800e754 <stateSelect+0x14c>)
 800e6b2:	4a23      	ldr	r2, [pc, #140]	; (800e740 <stateSelect+0x138>)
 800e6b4:	f240 2179 	movw	r1, #633	; 0x279
 800e6b8:	4822      	ldr	r0, [pc, #136]	; (800e744 <stateSelect+0x13c>)
 800e6ba:	f003 fc67 	bl	8011f8c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	689b      	ldr	r3, [r3, #8]
 800e6c8:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800e6ca:	e02d      	b.n	800e728 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800e6cc:	897a      	ldrh	r2, [r7, #10]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	69b9      	ldr	r1, [r7, #24]
 800e6d6:	440b      	add	r3, r1
 800e6d8:	78db      	ldrb	r3, [r3, #3]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	2301      	movs	r3, #1
 800e6de:	408b      	lsls	r3, r1
 800e6e0:	401a      	ands	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	69b9      	ldr	r1, [r7, #24]
 800e6ea:	440b      	add	r3, r1
 800e6ec:	78db      	ldrb	r3, [r3, #3]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	408b      	lsls	r3, r1
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	bf0c      	ite	eq
 800e6f8:	2301      	moveq	r3, #1
 800e6fa:	2300      	movne	r3, #0
 800e6fc:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800e6fe:	7dfb      	ldrb	r3, [r7, #23]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00c      	beq.n	800e71e <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	4413      	add	r3, r2
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	601a      	str	r2, [r3, #0]
            break;
 800e71c:	e009      	b.n	800e732 <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	693a      	ldr	r2, [r7, #16]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d8cc      	bhi.n	800e6cc <stateSelect+0xc4>
    }

    return packetId;
 800e732:	8bfb      	ldrh	r3, [r7, #30]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3720      	adds	r7, #32
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	08017dc4 	.word	0x08017dc4
 800e740:	080182c0 	.word	0x080182c0
 800e744:	08017d74 	.word	0x08017d74
 800e748:	08017ddc 	.word	0x08017ddc
 800e74c:	08017df0 	.word	0x08017df0
 800e750:	08017e00 	.word	0x08017e00
 800e754:	08017e28 	.word	0x08017e28

0800e758 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	4603      	mov	r3, r0
 800e760:	71fb      	strb	r3, [r7, #7]
 800e762:	460b      	mov	r3, r1
 800e764:	71bb      	strb	r3, [r7, #6]
 800e766:	4613      	mov	r3, r2
 800e768:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800e76e:	797b      	ldrb	r3, [r7, #5]
 800e770:	2b02      	cmp	r3, #2
 800e772:	bf0c      	ite	eq
 800e774:	2301      	moveq	r3, #1
 800e776:	2300      	movne	r3, #0
 800e778:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800e77a:	79fb      	ldrb	r3, [r7, #7]
 800e77c:	2b03      	cmp	r3, #3
 800e77e:	d827      	bhi.n	800e7d0 <MQTT_CalculateStateAck+0x78>
 800e780:	a201      	add	r2, pc, #4	; (adr r2, 800e788 <MQTT_CalculateStateAck+0x30>)
 800e782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e786:	bf00      	nop
 800e788:	0800e799 	.word	0x0800e799
 800e78c:	0800e7ab 	.word	0x0800e7ab
 800e790:	0800e7bb 	.word	0x0800e7bb
 800e794:	0800e7cb 	.word	0x0800e7cb
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800e798:	797b      	ldrb	r3, [r7, #5]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	bf0c      	ite	eq
 800e79e:	2301      	moveq	r3, #1
 800e7a0:	2300      	movne	r3, #0
 800e7a2:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800e7a4:	230a      	movs	r3, #10
 800e7a6:	73fb      	strb	r3, [r7, #15]
            break;
 800e7a8:	e013      	b.n	800e7d2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800e7aa:	79bb      	ldrb	r3, [r7, #6]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <MQTT_CalculateStateAck+0x5c>
 800e7b0:	2308      	movs	r3, #8
 800e7b2:	e000      	b.n	800e7b6 <MQTT_CalculateStateAck+0x5e>
 800e7b4:	2304      	movs	r3, #4
 800e7b6:	73fb      	strb	r3, [r7, #15]
            break;
 800e7b8:	e00b      	b.n	800e7d2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800e7ba:	79bb      	ldrb	r3, [r7, #6]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <MQTT_CalculateStateAck+0x6c>
 800e7c0:	2309      	movs	r3, #9
 800e7c2:	e000      	b.n	800e7c6 <MQTT_CalculateStateAck+0x6e>
 800e7c4:	2305      	movs	r3, #5
 800e7c6:	73fb      	strb	r3, [r7, #15]
            break;
 800e7c8:	e003      	b.n	800e7d2 <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800e7ca:	230a      	movs	r3, #10
 800e7cc:	73fb      	strb	r3, [r7, #15]
            break;
 800e7ce:	e000      	b.n	800e7d2 <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800e7d0:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800e7d2:	7bbb      	ldrb	r3, [r7, #14]
 800e7d4:	f083 0301 	eor.w	r3, r3, #1
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b088      	sub	sp, #32
 800e7f4:	af02      	add	r7, sp, #8
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
 800e7fc:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800e7fe:	2308      	movs	r3, #8
 800e800:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800e802:	2300      	movs	r3, #0
 800e804:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800e806:	2300      	movs	r3, #0
 800e808:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d106      	bne.n	800e81e <updateStateAck+0x2e>
 800e810:	4b22      	ldr	r3, [pc, #136]	; (800e89c <updateStateAck+0xac>)
 800e812:	4a23      	ldr	r2, [pc, #140]	; (800e8a0 <updateStateAck+0xb0>)
 800e814:	f240 21ce 	movw	r1, #718	; 0x2ce
 800e818:	4822      	ldr	r0, [pc, #136]	; (800e8a4 <updateStateAck+0xb4>)
 800e81a:	f003 fbb7 	bl	8011f8c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800e81e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e822:	2b0a      	cmp	r3, #10
 800e824:	d003      	beq.n	800e82e <updateStateAck+0x3e>
 800e826:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e82a:	2b04      	cmp	r3, #4
 800e82c:	d101      	bne.n	800e832 <updateStateAck+0x42>
 800e82e:	2301      	movs	r3, #1
 800e830:	e000      	b.n	800e834 <updateStateAck+0x44>
 800e832:	2300      	movs	r3, #0
 800e834:	75bb      	strb	r3, [r7, #22]
 800e836:	7dbb      	ldrb	r3, [r7, #22]
 800e838:	f003 0301 	and.w	r3, r3, #1
 800e83c:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800e83e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e842:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e846:	4611      	mov	r1, r2
 800e848:	4618      	mov	r0, r3
 800e84a:	f7ff fcc3 	bl	800e1d4 <validateTransitionAck>
 800e84e:	4603      	mov	r3, r0
 800e850:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800e852:	7d7b      	ldrb	r3, [r7, #21]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d01c      	beq.n	800e892 <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800e858:	2300      	movs	r3, #0
 800e85a:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800e85c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e864:	429a      	cmp	r2, r3
 800e866:	d014      	beq.n	800e892 <updateStateAck+0xa2>
        {
            updateRecord( records,
 800e868:	7dbb      	ldrb	r3, [r7, #22]
 800e86a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f7ff fe8d 	bl	800e590 <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800e876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e87a:	2b04      	cmp	r3, #4
 800e87c:	d109      	bne.n	800e892 <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800e87e:	887a      	ldrh	r2, [r7, #2]
 800e880:	2304      	movs	r3, #4
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	2302      	movs	r3, #2
 800e886:	68b9      	ldr	r1, [r7, #8]
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7ff fdfd 	bl	800e488 <addRecord>
 800e88e:	4603      	mov	r3, r0
 800e890:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e892:	7dfb      	ldrb	r3, [r7, #23]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3718      	adds	r7, #24
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	08017da4 	.word	0x08017da4
 800e8a0:	080182cc 	.word	0x080182cc
 800e8a4:	08017d74 	.word	0x08017d74

0800e8a8 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800e8a8:	b590      	push	{r4, r7, lr}
 800e8aa:	b089      	sub	sp, #36	; 0x24
 800e8ac:	af02      	add	r7, sp, #8
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	80fb      	strh	r3, [r7, #6]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <updateStatePublish+0x32>
 800e8cc:	4b29      	ldr	r3, [pc, #164]	; (800e974 <updateStatePublish+0xcc>)
 800e8ce:	4a2a      	ldr	r2, [pc, #168]	; (800e978 <updateStatePublish+0xd0>)
 800e8d0:	f240 310b 	movw	r1, #779	; 0x30b
 800e8d4:	4829      	ldr	r0, [pc, #164]	; (800e97c <updateStatePublish+0xd4>)
 800e8d6:	f003 fb59 	bl	8011f8c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800e8da:	88fb      	ldrh	r3, [r7, #6]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d106      	bne.n	800e8ee <updateStatePublish+0x46>
 800e8e0:	4b27      	ldr	r3, [pc, #156]	; (800e980 <updateStatePublish+0xd8>)
 800e8e2:	4a25      	ldr	r2, [pc, #148]	; (800e978 <updateStatePublish+0xd0>)
 800e8e4:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800e8e8:	4824      	ldr	r0, [pc, #144]	; (800e97c <updateStatePublish+0xd4>)
 800e8ea:	f003 fb4f 	bl	8011f8c <__assert_func>
    assert( qos != MQTTQoS0 );
 800e8ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <updateStatePublish+0x5c>
 800e8f6:	4b23      	ldr	r3, [pc, #140]	; (800e984 <updateStatePublish+0xdc>)
 800e8f8:	4a1f      	ldr	r2, [pc, #124]	; (800e978 <updateStatePublish+0xd0>)
 800e8fa:	f240 310d 	movw	r1, #781	; 0x30d
 800e8fe:	481f      	ldr	r0, [pc, #124]	; (800e97c <updateStatePublish+0xd4>)
 800e900:	f003 fb44 	bl	8011f8c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800e904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e908:	797a      	ldrb	r2, [r7, #5]
 800e90a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800e90e:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800e912:	f7ff fbf9 	bl	800e108 <validateTransitionPublish>
 800e916:	4603      	mov	r3, r0
 800e918:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800e91a:	7dbb      	ldrb	r3, [r7, #22]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d021      	beq.n	800e964 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800e920:	797b      	ldrb	r3, [r7, #5]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d10f      	bne.n	800e946 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6858      	ldr	r0, [r3, #4]
                                pMqttContext->incomingPublishRecordMaxCount,
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	68d9      	ldr	r1, [r3, #12]
            status = addRecord( pMqttContext->incomingPublishRecords,
 800e92e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800e932:	88fa      	ldrh	r2, [r7, #6]
 800e934:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4623      	mov	r3, r4
 800e93c:	f7ff fda4 	bl	800e488 <addRecord>
 800e940:	4603      	mov	r3, r0
 800e942:	75fb      	strb	r3, [r7, #23]
 800e944:	e010      	b.n	800e968 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800e946:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e94a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e94e:	429a      	cmp	r2, r3
 800e950:	d00a      	beq.n	800e968 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e95a:	2300      	movs	r3, #0
 800e95c:	68b9      	ldr	r1, [r7, #8]
 800e95e:	f7ff fe17 	bl	800e590 <updateRecord>
 800e962:	e001      	b.n	800e968 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800e964:	2308      	movs	r3, #8
 800e966:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800e968:	7dfb      	ldrb	r3, [r7, #23]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	371c      	adds	r7, #28
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd90      	pop	{r4, r7, pc}
 800e972:	bf00      	nop
 800e974:	08017dc4 	.word	0x08017dc4
 800e978:	080182dc 	.word	0x080182dc
 800e97c:	08017d74 	.word	0x08017d74
 800e980:	08017d50 	.word	0x08017d50
 800e984:	08017db4 	.word	0x08017db4

0800e988 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800e988:	b590      	push	{r4, r7, lr}
 800e98a:	b087      	sub	sp, #28
 800e98c:	af02      	add	r7, sp, #8
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	460b      	mov	r3, r1
 800e992:	807b      	strh	r3, [r7, #2]
 800e994:	4613      	mov	r3, r2
 800e996:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800e998:	2300      	movs	r3, #0
 800e99a:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800e99c:	787b      	ldrb	r3, [r7, #1]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d102      	bne.n	800e9a8 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	73fb      	strb	r3, [r7, #15]
 800e9a6:	e014      	b.n	800e9d2 <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800e9a8:	887b      	ldrh	r3, [r7, #2]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <MQTT_ReserveState+0x2c>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d102      	bne.n	800e9ba <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	73fb      	strb	r3, [r7, #15]
 800e9b8:	e00b      	b.n	800e9d2 <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6818      	ldr	r0, [r3, #0]
                            pMqttContext->outgoingPublishRecordMaxCount,
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6899      	ldr	r1, [r3, #8]
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800e9c2:	787b      	ldrb	r3, [r7, #1]
 800e9c4:	887a      	ldrh	r2, [r7, #2]
 800e9c6:	2401      	movs	r4, #1
 800e9c8:	9400      	str	r4, [sp, #0]
 800e9ca:	f7ff fd5d 	bl	800e488 <addRecord>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800e9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd90      	pop	{r4, r7, pc}

0800e9dc <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	460a      	mov	r2, r1
 800e9e6:	71fb      	strb	r3, [r7, #7]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800e9f0:	79bb      	ldrb	r3, [r7, #6]
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d011      	beq.n	800ea1a <MQTT_CalculateStatePublish+0x3e>
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	dc17      	bgt.n	800ea2a <MQTT_CalculateStatePublish+0x4e>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d002      	beq.n	800ea04 <MQTT_CalculateStatePublish+0x28>
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d003      	beq.n	800ea0a <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800ea02:	e012      	b.n	800ea2a <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800ea04:	230a      	movs	r3, #10
 800ea06:	73fb      	strb	r3, [r7, #15]
            break;
 800ea08:	e010      	b.n	800ea2c <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <MQTT_CalculateStatePublish+0x38>
 800ea10:	2306      	movs	r3, #6
 800ea12:	e000      	b.n	800ea16 <MQTT_CalculateStatePublish+0x3a>
 800ea14:	2302      	movs	r3, #2
 800ea16:	73fb      	strb	r3, [r7, #15]
            break;
 800ea18:	e008      	b.n	800ea2c <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800ea1a:	79fb      	ldrb	r3, [r7, #7]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <MQTT_CalculateStatePublish+0x48>
 800ea20:	2307      	movs	r3, #7
 800ea22:	e000      	b.n	800ea26 <MQTT_CalculateStatePublish+0x4a>
 800ea24:	2303      	movs	r3, #3
 800ea26:	73fb      	strb	r3, [r7, #15]
            break;
 800ea28:	e000      	b.n	800ea2c <MQTT_CalculateStatePublish+0x50>
            break;
 800ea2a:	bf00      	nop
    }

    return calculatedState;
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3714      	adds	r7, #20
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800ea3a:	b590      	push	{r4, r7, lr}
 800ea3c:	b08b      	sub	sp, #44	; 0x2c
 800ea3e:	af04      	add	r7, sp, #16
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	4608      	mov	r0, r1
 800ea44:	4611      	mov	r1, r2
 800ea46:	461a      	mov	r2, r3
 800ea48:	4603      	mov	r3, r0
 800ea4a:	807b      	strh	r3, [r7, #2]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	707b      	strb	r3, [r7, #1]
 800ea50:	4613      	mov	r3, r2
 800ea52:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800ea54:	2300      	movs	r3, #0
 800ea56:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800ea60:	2300      	movs	r3, #0
 800ea62:	43db      	mvns	r3, r3
 800ea64:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d002      	beq.n	800ea76 <MQTT_UpdateStatePublish+0x3c>
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d102      	bne.n	800ea7c <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800ea76:	2301      	movs	r3, #1
 800ea78:	75fb      	strb	r3, [r7, #23]
 800ea7a:	e028      	b.n	800eace <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800ea7c:	783b      	ldrb	r3, [r7, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d103      	bne.n	800ea8a <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800ea82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea84:	220a      	movs	r2, #10
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	e021      	b.n	800eace <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800ea8a:	887b      	ldrh	r3, [r7, #2]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d102      	bne.n	800ea96 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800ea90:	2301      	movs	r3, #1
 800ea92:	75fb      	strb	r3, [r7, #23]
 800ea94:	e01b      	b.n	800eace <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800ea96:	787b      	ldrb	r3, [r7, #1]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d118      	bne.n	800eace <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6818      	ldr	r0, [r3, #0]
                                    pMqttContext->outgoingPublishRecordMaxCount,
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6899      	ldr	r1, [r3, #8]
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800eaa4:	f107 040d 	add.w	r4, r7, #13
 800eaa8:	887a      	ldrh	r2, [r7, #2]
 800eaaa:	f107 030e 	add.w	r3, r7, #14
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	4623      	mov	r3, r4
 800eab2:	f7ff fc31 	bl	800e318 <findInRecord>
 800eab6:	6138      	str	r0, [r7, #16]
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800eab8:	2300      	movs	r3, #0
 800eaba:	43db      	mvns	r3, r3
 800eabc:	693a      	ldr	r2, [r7, #16]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d003      	beq.n	800eaca <MQTT_UpdateStatePublish+0x90>
 800eac2:	7b7b      	ldrb	r3, [r7, #13]
 800eac4:	783a      	ldrb	r2, [r7, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d001      	beq.n	800eace <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800eaca:	2301      	movs	r3, #1
 800eacc:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800eace:	783b      	ldrb	r3, [r7, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d020      	beq.n	800eb16 <MQTT_UpdateStatePublish+0xdc>
 800ead4:	7dfb      	ldrb	r3, [r7, #23]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d11d      	bne.n	800eb16 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800eada:	783a      	ldrb	r2, [r7, #0]
 800eadc:	787b      	ldrb	r3, [r7, #1]
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7ff ff7b 	bl	800e9dc <MQTT_CalculateStatePublish>
 800eae6:	4603      	mov	r3, r0
 800eae8:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800eaea:	7bbb      	ldrb	r3, [r7, #14]
 800eaec:	7878      	ldrb	r0, [r7, #1]
 800eaee:	8879      	ldrh	r1, [r7, #2]
 800eaf0:	7bfa      	ldrb	r2, [r7, #15]
 800eaf2:	9202      	str	r2, [sp, #8]
 800eaf4:	9301      	str	r3, [sp, #4]
 800eaf6:	783b      	ldrb	r3, [r7, #0]
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4603      	mov	r3, r0
 800eafc:	460a      	mov	r2, r1
 800eafe:	6939      	ldr	r1, [r7, #16]
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7ff fed1 	bl	800e8a8 <updateStatePublish>
 800eb06:	4603      	mov	r3, r0
 800eb08:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800eb0a:	7dfb      	ldrb	r3, [r7, #23]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	7bfa      	ldrb	r2, [r7, #15]
 800eb14:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800eb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	371c      	adds	r7, #28
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd90      	pop	{r4, r7, pc}

0800eb20 <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	; 0x28
 800eb24:	af02      	add	r7, sp, #8
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	4608      	mov	r0, r1
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	4603      	mov	r3, r0
 800eb30:	807b      	strh	r3, [r7, #2]
 800eb32:	460b      	mov	r3, r1
 800eb34:	707b      	strb	r3, [r7, #1]
 800eb36:	4613      	mov	r3, r2
 800eb38:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800eb42:	783a      	ldrb	r2, [r7, #0]
 800eb44:	787b      	ldrb	r3, [r7, #1]
 800eb46:	4611      	mov	r1, r2
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7ff fbb7 	bl	800e2bc <isPublishOutgoing>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800eb56:	2300      	movs	r3, #0
 800eb58:	43db      	mvns	r3, r3
 800eb5a:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	43db      	mvns	r3, r3
 800eb60:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800eb62:	2300      	movs	r3, #0
 800eb64:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800eb66:	2305      	movs	r3, #5
 800eb68:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d002      	beq.n	800eb76 <MQTT_UpdateStateAck+0x56>
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d102      	bne.n	800eb7c <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800eb76:	2301      	movs	r3, #1
 800eb78:	74fb      	strb	r3, [r7, #19]
 800eb7a:	e027      	b.n	800ebcc <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800eb7c:	887b      	ldrh	r3, [r7, #2]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d102      	bne.n	800eb88 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800eb82:	2301      	movs	r3, #1
 800eb84:	74fb      	strb	r3, [r7, #19]
 800eb86:	e021      	b.n	800ebcc <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800eb88:	787b      	ldrb	r3, [r7, #1]
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	d902      	bls.n	800eb94 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	74fb      	strb	r3, [r7, #19]
 800eb92:	e01b      	b.n	800ebcc <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800eb94:	7c7b      	ldrb	r3, [r7, #17]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d006      	beq.n	800eba8 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	61fb      	str	r3, [r7, #28]
 800eba6:	e005      	b.n	800ebb4 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800ebb4:	f107 010f 	add.w	r1, r7, #15
 800ebb8:	887a      	ldrh	r2, [r7, #2]
 800ebba:	f107 0310 	add.w	r3, r7, #16
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	69f9      	ldr	r1, [r7, #28]
 800ebc4:	6978      	ldr	r0, [r7, #20]
 800ebc6:	f7ff fba7 	bl	800e318 <findInRecord>
 800ebca:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800ebcc:	2300      	movs	r3, #0
 800ebce:	43db      	mvns	r3, r3
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d01a      	beq.n	800ec0c <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800ebd6:	7bfa      	ldrb	r2, [r7, #15]
 800ebd8:	7839      	ldrb	r1, [r7, #0]
 800ebda:	787b      	ldrb	r3, [r7, #1]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fdbb 	bl	800e758 <MQTT_CalculateStateAck>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800ebe6:	7c3b      	ldrb	r3, [r7, #16]
 800ebe8:	8879      	ldrh	r1, [r7, #2]
 800ebea:	7cba      	ldrb	r2, [r7, #18]
 800ebec:	9201      	str	r2, [sp, #4]
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	69ba      	ldr	r2, [r7, #24]
 800ebf4:	69f9      	ldr	r1, [r7, #28]
 800ebf6:	6978      	ldr	r0, [r7, #20]
 800ebf8:	f7ff fdfa 	bl	800e7f0 <updateStateAck>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800ec00:	7cfb      	ldrb	r3, [r7, #19]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d102      	bne.n	800ec0c <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	7cba      	ldrb	r2, [r7, #18]
 800ec0a:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800ec0c:	7cfb      	ldrb	r3, [r7, #19]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3720      	adds	r7, #32
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b086      	sub	sp, #24
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	60f8      	str	r0, [r7, #12]
 800ec1e:	60b9      	str	r1, [r7, #8]
 800ec20:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800ec22:	2300      	movs	r3, #0
 800ec24:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800ec26:	2300      	movs	r3, #0
 800ec28:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d01b      	beq.n	800ec68 <MQTT_PubrelToResend+0x52>
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d018      	beq.n	800ec68 <MQTT_PubrelToResend+0x52>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d015      	beq.n	800ec68 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800ec3c:	8abb      	ldrh	r3, [r7, #20]
 800ec3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec42:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800ec44:	8abb      	ldrh	r3, [r7, #20]
 800ec46:	f043 0310 	orr.w	r3, r3, #16
 800ec4a:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800ec4c:	8abb      	ldrh	r3, [r7, #20]
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	4619      	mov	r1, r3
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f7ff fcd8 	bl	800e608 <stateSelect>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800ec5c:	8afb      	ldrh	r3, [r7, #22]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2204      	movs	r2, #4
 800ec66:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800ec68:	8afb      	ldrh	r3, [r7, #22]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800ec7a:	af02      	add	r7, sp, #8
 800ec7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ec80:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ec84:	6018      	str	r0, [r3, #0]
 800ec86:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ec8a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800ec8e:	6019      	str	r1, [r3, #0]
 800ec90:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ec94:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ec98:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800eca0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eca4:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecb0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ecb4:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800ecb6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecba:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	88da      	ldrh	r2, [r3, #6]
 800ecc2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecc6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ecca:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800eccc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecd0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ecd8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecdc:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ece0:	2200      	movs	r2, #0
 800ece2:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800ece4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ece8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	789a      	ldrb	r2, [r3, #2]
 800ecf0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecf4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ecf8:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ecfa:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ecfe:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	78da      	ldrb	r2, [r3, #3]
 800ed06:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed0a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ed0e:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ed10:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed14:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	791a      	ldrb	r2, [r3, #4]
 800ed1c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed20:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ed24:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ed26:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed2a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	795a      	ldrb	r2, [r3, #5]
 800ed32:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed36:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800ed3a:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800ed3c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed40:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	785b      	ldrb	r3, [r3, #1]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d115      	bne.n	800ed78 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	4619      	mov	r1, r3
 800ed52:	482a      	ldr	r0, [pc, #168]	; (800edfc <transport_recv+0x188>)
 800ed54:	f7fb fc5e 	bl	800a614 <ES_WIFI_StartClientConnection>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800ed5e:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <transport_recv+0xf6>
			return 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	e042      	b.n	800edf0 <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800ed6a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed6e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2201      	movs	r2, #1
 800ed76:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800ed78:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed7c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	7819      	ldrb	r1, [r3, #0]
 800ed84:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed88:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	b298      	uxth	r0, r3
 800ed90:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800ed94:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800ed98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed9c:	9301      	str	r3, [sp, #4]
 800ed9e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	4603      	mov	r3, r0
 800eda6:	6812      	ldr	r2, [r2, #0]
 800eda8:	4814      	ldr	r0, [pc, #80]	; (800edfc <transport_recv+0x188>)
 800edaa:	f7fb fdd9 	bl	800a960 <ES_WIFI_ReceiveData>
 800edae:	4603      	mov	r3, r0
 800edb0:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800edb4:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <transport_recv+0x15e>
		socketStatus=0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800edc2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800edc6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2200      	movs	r2, #0
 800edce:	705a      	strb	r2, [r3, #1]
 800edd0:	e00c      	b.n	800edec <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800edd2:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800edd6:	461a      	mov	r2, r3
 800edd8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eddc:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800ede0:	2100      	movs	r1, #0
 800ede2:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800ede4:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800ede8:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800edec:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	200010c8 	.word	0x200010c8

0800ee00 <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08e      	sub	sp, #56	; 0x38
 800ee04:	af02      	add	r7, sp, #8
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	88db      	ldrh	r3, [r3, #6]
 800ee1a:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800ee20:	2300      	movs	r3, #0
 800ee22:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	789b      	ldrb	r3, [r3, #2]
 800ee28:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	78db      	ldrb	r3, [r3, #3]
 800ee2e:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	791b      	ldrb	r3, [r3, #4]
 800ee34:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	795b      	ldrb	r3, [r3, #5]
 800ee3a:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	785b      	ldrb	r3, [r3, #1]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d111      	bne.n	800ee68 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800ee44:	f107 0314 	add.w	r3, r7, #20
 800ee48:	4619      	mov	r1, r3
 800ee4a:	481c      	ldr	r0, [pc, #112]	; (800eebc <transport_send+0xbc>)
 800ee4c:	f7fb fbe2 	bl	800a614 <ES_WIFI_StartClientConnection>
 800ee50:	4603      	mov	r3, r0
 800ee52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800ee56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <transport_send+0x62>
			return 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	e027      	b.n	800eeb2 <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2201      	movs	r2, #1
 800ee66:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	7819      	ldrb	r1, [r3, #0]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee74:	9301      	str	r3, [sp, #4]
 800ee76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	480e      	ldr	r0, [pc, #56]	; (800eebc <transport_send+0xbc>)
 800ee82:	f7fb fcb1 	bl	800a7e8 <ES_WIFI_SendData>
 800ee86:	4603      	mov	r3, r0
 800ee88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800ee8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800ee9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee9e:	4619      	mov	r1, r3
 800eea0:	4807      	ldr	r0, [pc, #28]	; (800eec0 <transport_send+0xc0>)
 800eea2:	f004 f86d 	bl	8012f80 <iprintf>
		return 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	e003      	b.n	800eeb2 <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800eeaa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800eeae:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3730      	adds	r7, #48	; 0x30
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	200010c8 	.word	0x200010c8
 800eec0:	08017f28 	.word	0x08017f28

0800eec4 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60ba      	str	r2, [r7, #8]
 800eecc:	607b      	str	r3, [r7, #4]
 800eece:	4603      	mov	r3, r0
 800eed0:	73fb      	strb	r3, [r7, #15]
 800eed2:	460b      	mov	r3, r1
 800eed4:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	7bfa      	ldrb	r2, [r7, #15]
 800eeda:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	7bba      	ldrb	r2, [r7, #14]
 800eee0:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4a08      	ldr	r2, [pc, #32]	; (800ef08 <init_transport_from_socket+0x44>)
 800eee6:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a08      	ldr	r2, [pc, #32]	; (800ef0c <init_transport_from_socket+0x48>)
 800eeec:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68ba      	ldr	r2, [r7, #8]
 800eef8:	60da      	str	r2, [r3, #12]
}
 800eefa:	bf00      	nop
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	0800ec75 	.word	0x0800ec75
 800ef0c:	0800ee01 	.word	0x0800ee01

0800ef10 <__NVIC_SetPriority>:
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	6039      	str	r1, [r7, #0]
 800ef1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ef1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	db0a      	blt.n	800ef3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	490c      	ldr	r1, [pc, #48]	; (800ef5c <__NVIC_SetPriority+0x4c>)
 800ef2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef2e:	0112      	lsls	r2, r2, #4
 800ef30:	b2d2      	uxtb	r2, r2
 800ef32:	440b      	add	r3, r1
 800ef34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ef38:	e00a      	b.n	800ef50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	4908      	ldr	r1, [pc, #32]	; (800ef60 <__NVIC_SetPriority+0x50>)
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	f003 030f 	and.w	r3, r3, #15
 800ef46:	3b04      	subs	r3, #4
 800ef48:	0112      	lsls	r2, r2, #4
 800ef4a:	b2d2      	uxtb	r2, r2
 800ef4c:	440b      	add	r3, r1
 800ef4e:	761a      	strb	r2, [r3, #24]
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr
 800ef5c:	e000e100 	.word	0xe000e100
 800ef60:	e000ed00 	.word	0xe000ed00

0800ef64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ef68:	2100      	movs	r1, #0
 800ef6a:	f06f 0004 	mvn.w	r0, #4
 800ef6e:	f7ff ffcf 	bl	800ef10 <__NVIC_SetPriority>
#endif
}
 800ef72:	bf00      	nop
 800ef74:	bd80      	pop	{r7, pc}
	...

0800ef78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef7e:	f3ef 8305 	mrs	r3, IPSR
 800ef82:	603b      	str	r3, [r7, #0]
  return(result);
 800ef84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d003      	beq.n	800ef92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ef8a:	f06f 0305 	mvn.w	r3, #5
 800ef8e:	607b      	str	r3, [r7, #4]
 800ef90:	e00c      	b.n	800efac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ef92:	4b0a      	ldr	r3, [pc, #40]	; (800efbc <osKernelInitialize+0x44>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d105      	bne.n	800efa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ef9a:	4b08      	ldr	r3, [pc, #32]	; (800efbc <osKernelInitialize+0x44>)
 800ef9c:	2201      	movs	r2, #1
 800ef9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800efa0:	2300      	movs	r3, #0
 800efa2:	607b      	str	r3, [r7, #4]
 800efa4:	e002      	b.n	800efac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800efa6:	f04f 33ff 	mov.w	r3, #4294967295
 800efaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800efac:	687b      	ldr	r3, [r7, #4]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	370c      	adds	r7, #12
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	200019c8 	.word	0x200019c8

0800efc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efc6:	f3ef 8305 	mrs	r3, IPSR
 800efca:	603b      	str	r3, [r7, #0]
  return(result);
 800efcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d003      	beq.n	800efda <osKernelStart+0x1a>
    stat = osErrorISR;
 800efd2:	f06f 0305 	mvn.w	r3, #5
 800efd6:	607b      	str	r3, [r7, #4]
 800efd8:	e010      	b.n	800effc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800efda:	4b0b      	ldr	r3, [pc, #44]	; (800f008 <osKernelStart+0x48>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d109      	bne.n	800eff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800efe2:	f7ff ffbf 	bl	800ef64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800efe6:	4b08      	ldr	r3, [pc, #32]	; (800f008 <osKernelStart+0x48>)
 800efe8:	2202      	movs	r2, #2
 800efea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800efec:	f001 f934 	bl	8010258 <vTaskStartScheduler>
      stat = osOK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	607b      	str	r3, [r7, #4]
 800eff4:	e002      	b.n	800effc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eff6:	f04f 33ff 	mov.w	r3, #4294967295
 800effa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800effc:	687b      	ldr	r3, [r7, #4]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	200019c8 	.word	0x200019c8

0800f00c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b08e      	sub	sp, #56	; 0x38
 800f010:	af04      	add	r7, sp, #16
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f018:	2300      	movs	r3, #0
 800f01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f01c:	f3ef 8305 	mrs	r3, IPSR
 800f020:	617b      	str	r3, [r7, #20]
  return(result);
 800f022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f024:	2b00      	cmp	r3, #0
 800f026:	d17e      	bne.n	800f126 <osThreadNew+0x11a>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d07b      	beq.n	800f126 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f02e:	2380      	movs	r3, #128	; 0x80
 800f030:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f032:	2318      	movs	r3, #24
 800f034:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f036:	2300      	movs	r3, #0
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f03a:	f04f 33ff 	mov.w	r3, #4294967295
 800f03e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d045      	beq.n	800f0d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <osThreadNew+0x48>
        name = attr->name;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	699b      	ldr	r3, [r3, #24]
 800f060:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d008      	beq.n	800f07a <osThreadNew+0x6e>
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b38      	cmp	r3, #56	; 0x38
 800f06c:	d805      	bhi.n	800f07a <osThreadNew+0x6e>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <osThreadNew+0x72>
        return (NULL);
 800f07a:	2300      	movs	r3, #0
 800f07c:	e054      	b.n	800f128 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	695b      	ldr	r3, [r3, #20]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	695b      	ldr	r3, [r3, #20]
 800f08a:	089b      	lsrs	r3, r3, #2
 800f08c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00e      	beq.n	800f0b4 <osThreadNew+0xa8>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	2b5b      	cmp	r3, #91	; 0x5b
 800f09c:	d90a      	bls.n	800f0b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d006      	beq.n	800f0b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d002      	beq.n	800f0b4 <osThreadNew+0xa8>
        mem = 1;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	61bb      	str	r3, [r7, #24]
 800f0b2:	e010      	b.n	800f0d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10c      	bne.n	800f0d6 <osThreadNew+0xca>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d108      	bne.n	800f0d6 <osThreadNew+0xca>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d104      	bne.n	800f0d6 <osThreadNew+0xca>
          mem = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	61bb      	str	r3, [r7, #24]
 800f0d0:	e001      	b.n	800f0d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d110      	bne.n	800f0fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f0e4:	9202      	str	r2, [sp, #8]
 800f0e6:	9301      	str	r3, [sp, #4]
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	6a3a      	ldr	r2, [r7, #32]
 800f0f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f000 feda 	bl	800feac <xTaskCreateStatic>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	613b      	str	r3, [r7, #16]
 800f0fc:	e013      	b.n	800f126 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d110      	bne.n	800f126 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	b29a      	uxth	r2, r3
 800f108:	f107 0310 	add.w	r3, r7, #16
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f000 ff25 	bl	800ff66 <xTaskCreate>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d001      	beq.n	800f126 <osThreadNew+0x11a>
            hTask = NULL;
 800f122:	2300      	movs	r3, #0
 800f124:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f126:	693b      	ldr	r3, [r7, #16]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3728      	adds	r7, #40	; 0x28
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800f130:	b580      	push	{r7, lr}
 800f132:	b088      	sub	sp, #32
 800f134:	af02      	add	r7, sp, #8
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <osThreadFlagsSet+0x1a>
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	da03      	bge.n	800f152 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800f14a:	f06f 0303 	mvn.w	r3, #3
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	e035      	b.n	800f1be <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800f152:	f04f 33ff 	mov.w	r3, #4294967295
 800f156:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f158:	f3ef 8305 	mrs	r3, IPSR
 800f15c:	613b      	str	r3, [r7, #16]
  return(result);
 800f15e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800f160:	2b00      	cmp	r3, #0
 800f162:	d01f      	beq.n	800f1a4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800f164:	2300      	movs	r3, #0
 800f166:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800f168:	f107 0308 	add.w	r3, r7, #8
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	2300      	movs	r3, #0
 800f170:	2201      	movs	r2, #1
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6978      	ldr	r0, [r7, #20]
 800f176:	f001 fe55 	bl	8010e24 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800f17a:	f107 030c 	add.w	r3, r7, #12
 800f17e:	2200      	movs	r2, #0
 800f180:	9200      	str	r2, [sp, #0]
 800f182:	2200      	movs	r2, #0
 800f184:	2100      	movs	r1, #0
 800f186:	6978      	ldr	r0, [r7, #20]
 800f188:	f001 fe4c 	bl	8010e24 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d015      	beq.n	800f1be <osThreadFlagsSet+0x8e>
 800f192:	4b0d      	ldr	r3, [pc, #52]	; (800f1c8 <osThreadFlagsSet+0x98>)
 800f194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f198:	601a      	str	r2, [r3, #0]
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	e00c      	b.n	800f1be <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	6978      	ldr	r0, [r7, #20]
 800f1ac:	f001 fd82 	bl	8010cb4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f1b0:	f107 030c 	add.w	r3, r7, #12
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	6978      	ldr	r0, [r7, #20]
 800f1ba:	f001 fd7b 	bl	8010cb4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f1be:	68fb      	ldr	r3, [r7, #12]
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3718      	adds	r7, #24
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08c      	sub	sp, #48	; 0x30
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1d8:	f3ef 8305 	mrs	r3, IPSR
 800f1dc:	617b      	str	r3, [r7, #20]
  return(result);
 800f1de:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d003      	beq.n	800f1ec <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800f1e4:	f06f 0305 	mvn.w	r3, #5
 800f1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1ea:	e06b      	b.n	800f2c4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	da03      	bge.n	800f1fa <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800f1f2:	f06f 0303 	mvn.w	r3, #3
 800f1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1f8:	e064      	b.n	800f2c4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f003 0302 	and.w	r3, r3, #2
 800f200:	2b00      	cmp	r3, #0
 800f202:	d002      	beq.n	800f20a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800f204:	2300      	movs	r3, #0
 800f206:	62bb      	str	r3, [r7, #40]	; 0x28
 800f208:	e001      	b.n	800f20e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800f20e:	2300      	movs	r3, #0
 800f210:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800f216:	f001 f931 	bl	801047c <xTaskGetTickCount>
 800f21a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f21c:	f107 0210 	add.w	r2, r7, #16
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f224:	2000      	movs	r0, #0
 800f226:	f001 fceb 	bl	8010c00 <xTaskNotifyWait>
 800f22a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d137      	bne.n	800f2a2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	4013      	ands	r3, r2
 800f238:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f23e:	4313      	orrs	r3, r2
 800f240:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f003 0301 	and.w	r3, r3, #1
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00c      	beq.n	800f266 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	4013      	ands	r3, r2
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	429a      	cmp	r2, r3
 800f256:	d032      	beq.n	800f2be <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10f      	bne.n	800f27e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f25e:	f06f 0302 	mvn.w	r3, #2
 800f262:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f264:	e02e      	b.n	800f2c4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	4013      	ands	r3, r2
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d128      	bne.n	800f2c2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d103      	bne.n	800f27e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f276:	f06f 0302 	mvn.w	r3, #2
 800f27a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f27c:	e022      	b.n	800f2c4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f27e:	f001 f8fd 	bl	801047c <xTaskGetTickCount>
 800f282:	4602      	mov	r2, r0
 800f284:	6a3b      	ldr	r3, [r7, #32]
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f28a:	69ba      	ldr	r2, [r7, #24]
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	429a      	cmp	r2, r3
 800f290:	d902      	bls.n	800f298 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f292:	2300      	movs	r3, #0
 800f294:	627b      	str	r3, [r7, #36]	; 0x24
 800f296:	e00e      	b.n	800f2b6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	627b      	str	r3, [r7, #36]	; 0x24
 800f2a0:	e009      	b.n	800f2b6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d103      	bne.n	800f2b0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f2a8:	f06f 0302 	mvn.w	r3, #2
 800f2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2ae:	e002      	b.n	800f2b6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f2b0:	f06f 0301 	mvn.w	r3, #1
 800f2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1af      	bne.n	800f21c <osThreadFlagsWait+0x50>
 800f2bc:	e002      	b.n	800f2c4 <osThreadFlagsWait+0xf8>
            break;
 800f2be:	bf00      	nop
 800f2c0:	e000      	b.n	800f2c4 <osThreadFlagsWait+0xf8>
            break;
 800f2c2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3730      	adds	r7, #48	; 0x30
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f2ce:	b580      	push	{r7, lr}
 800f2d0:	b084      	sub	sp, #16
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2d6:	f3ef 8305 	mrs	r3, IPSR
 800f2da:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d003      	beq.n	800f2ea <osDelay+0x1c>
    stat = osErrorISR;
 800f2e2:	f06f 0305 	mvn.w	r3, #5
 800f2e6:	60fb      	str	r3, [r7, #12]
 800f2e8:	e007      	b.n	800f2fa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <osDelay+0x2c>
      vTaskDelay(ticks);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 ff7b 	bl	80101f0 <vTaskDelay>
    }
  }

  return (stat);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	4a07      	ldr	r2, [pc, #28]	; (800f330 <vApplicationGetIdleTaskMemory+0x2c>)
 800f314:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	4a06      	ldr	r2, [pc, #24]	; (800f334 <vApplicationGetIdleTaskMemory+0x30>)
 800f31a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2280      	movs	r2, #128	; 0x80
 800f320:	601a      	str	r2, [r3, #0]
}
 800f322:	bf00      	nop
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	200019cc 	.word	0x200019cc
 800f334:	20001a28 	.word	0x20001a28

0800f338 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	4a07      	ldr	r2, [pc, #28]	; (800f364 <vApplicationGetTimerTaskMemory+0x2c>)
 800f348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	4a06      	ldr	r2, [pc, #24]	; (800f368 <vApplicationGetTimerTaskMemory+0x30>)
 800f34e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f356:	601a      	str	r2, [r3, #0]
}
 800f358:	bf00      	nop
 800f35a:	3714      	adds	r7, #20
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	20001c28 	.word	0x20001c28
 800f368:	20001c84 	.word	0x20001c84

0800f36c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f103 0208 	add.w	r2, r3, #8
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f04f 32ff 	mov.w	r2, #4294967295
 800f384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f103 0208 	add.w	r2, r3, #8
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f103 0208 	add.w	r2, r3, #8
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3a0:	bf00      	nop
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3ba:	bf00      	nop
 800f3bc:	370c      	adds	r7, #12
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b085      	sub	sp, #20
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	689a      	ldr	r2, [r3, #8]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	683a      	ldr	r2, [r7, #0]
 800f3ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	1c5a      	adds	r2, r3, #1
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	601a      	str	r2, [r3, #0]
}
 800f402:	bf00      	nop
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f40e:	b480      	push	{r7}
 800f410:	b085      	sub	sp, #20
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f424:	d103      	bne.n	800f42e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	e00c      	b.n	800f448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	3308      	adds	r3, #8
 800f432:	60fb      	str	r3, [r7, #12]
 800f434:	e002      	b.n	800f43c <vListInsert+0x2e>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	429a      	cmp	r2, r3
 800f446:	d2f6      	bcs.n	800f436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	685a      	ldr	r2, [r3, #4]
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	683a      	ldr	r2, [r7, #0]
 800f456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	601a      	str	r2, [r3, #0]
}
 800f474:	bf00      	nop
 800f476:	3714      	adds	r7, #20
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr

0800f480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	6892      	ldr	r2, [r2, #8]
 800f496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	6852      	ldr	r2, [r2, #4]
 800f4a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d103      	bne.n	800f4b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	689a      	ldr	r2, [r3, #8]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	1e5a      	subs	r2, r3, #1
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3714      	adds	r7, #20
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10a      	bne.n	800f4fe <xQueueGenericReset+0x2a>
	__asm volatile
 800f4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	60bb      	str	r3, [r7, #8]
}
 800f4fa:	bf00      	nop
 800f4fc:	e7fe      	b.n	800f4fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f4fe:	f002 fa39 	bl	8011974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f50a:	68f9      	ldr	r1, [r7, #12]
 800f50c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f50e:	fb01 f303 	mul.w	r3, r1, r3
 800f512:	441a      	add	r2, r3
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f52e:	3b01      	subs	r3, #1
 800f530:	68f9      	ldr	r1, [r7, #12]
 800f532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f534:	fb01 f303 	mul.w	r3, r1, r3
 800f538:	441a      	add	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	22ff      	movs	r2, #255	; 0xff
 800f542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	22ff      	movs	r2, #255	; 0xff
 800f54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d114      	bne.n	800f57e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d01a      	beq.n	800f592 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	3310      	adds	r3, #16
 800f560:	4618      	mov	r0, r3
 800f562:	f001 f903 	bl	801076c <xTaskRemoveFromEventList>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d012      	beq.n	800f592 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f56c:	4b0c      	ldr	r3, [pc, #48]	; (800f5a0 <xQueueGenericReset+0xcc>)
 800f56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	e009      	b.n	800f592 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	3310      	adds	r3, #16
 800f582:	4618      	mov	r0, r3
 800f584:	f7ff fef2 	bl	800f36c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	3324      	adds	r3, #36	; 0x24
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff feed 	bl	800f36c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f592:	f002 fa1f 	bl	80119d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f596:	2301      	movs	r3, #1
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	e000ed04 	.word	0xe000ed04

0800f5a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08e      	sub	sp, #56	; 0x38
 800f5a8:	af02      	add	r7, sp, #8
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
 800f5b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10a      	bne.n	800f5ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f5ca:	bf00      	nop
 800f5cc:	e7fe      	b.n	800f5cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10a      	bne.n	800f5ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5e6:	bf00      	nop
 800f5e8:	e7fe      	b.n	800f5e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <xQueueGenericCreateStatic+0x52>
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <xQueueGenericCreateStatic+0x56>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e000      	b.n	800f5fc <xQueueGenericCreateStatic+0x58>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d10a      	bne.n	800f616 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	623b      	str	r3, [r7, #32]
}
 800f612:	bf00      	nop
 800f614:	e7fe      	b.n	800f614 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <xQueueGenericCreateStatic+0x7e>
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d101      	bne.n	800f626 <xQueueGenericCreateStatic+0x82>
 800f622:	2301      	movs	r3, #1
 800f624:	e000      	b.n	800f628 <xQueueGenericCreateStatic+0x84>
 800f626:	2300      	movs	r3, #0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10a      	bne.n	800f642 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	61fb      	str	r3, [r7, #28]
}
 800f63e:	bf00      	nop
 800f640:	e7fe      	b.n	800f640 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f642:	2350      	movs	r3, #80	; 0x50
 800f644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	2b50      	cmp	r3, #80	; 0x50
 800f64a:	d00a      	beq.n	800f662 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	61bb      	str	r3, [r7, #24]
}
 800f65e:	bf00      	nop
 800f660:	e7fe      	b.n	800f660 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f662:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00d      	beq.n	800f68a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	2201      	movs	r2, #1
 800f672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f676:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	4613      	mov	r3, r2
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f805 	bl	800f694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3730      	adds	r7, #48	; 0x30
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d103      	bne.n	800f6b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	69ba      	ldr	r2, [r7, #24]
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	e002      	b.n	800f6b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6c2:	2101      	movs	r1, #1
 800f6c4:	69b8      	ldr	r0, [r7, #24]
 800f6c6:	f7ff ff05 	bl	800f4d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	78fa      	ldrb	r2, [r7, #3]
 800f6ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6d2:	bf00      	nop
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
	...

0800f6dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08e      	sub	sp, #56	; 0x38
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d10a      	bne.n	800f70e <xQueueGenericSend+0x32>
	__asm volatile
 800f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fc:	f383 8811 	msr	BASEPRI, r3
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f70a:	bf00      	nop
 800f70c:	e7fe      	b.n	800f70c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d103      	bne.n	800f71c <xQueueGenericSend+0x40>
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <xQueueGenericSend+0x44>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e000      	b.n	800f722 <xQueueGenericSend+0x46>
 800f720:	2300      	movs	r3, #0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10a      	bne.n	800f73c <xQueueGenericSend+0x60>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f738:	bf00      	nop
 800f73a:	e7fe      	b.n	800f73a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	2b02      	cmp	r3, #2
 800f740:	d103      	bne.n	800f74a <xQueueGenericSend+0x6e>
 800f742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f746:	2b01      	cmp	r3, #1
 800f748:	d101      	bne.n	800f74e <xQueueGenericSend+0x72>
 800f74a:	2301      	movs	r3, #1
 800f74c:	e000      	b.n	800f750 <xQueueGenericSend+0x74>
 800f74e:	2300      	movs	r3, #0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d10a      	bne.n	800f76a <xQueueGenericSend+0x8e>
	__asm volatile
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	f383 8811 	msr	BASEPRI, r3
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	623b      	str	r3, [r7, #32]
}
 800f766:	bf00      	nop
 800f768:	e7fe      	b.n	800f768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f76a:	f001 f9bd 	bl	8010ae8 <xTaskGetSchedulerState>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d102      	bne.n	800f77a <xQueueGenericSend+0x9e>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <xQueueGenericSend+0xa2>
 800f77a:	2301      	movs	r3, #1
 800f77c:	e000      	b.n	800f780 <xQueueGenericSend+0xa4>
 800f77e:	2300      	movs	r3, #0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10a      	bne.n	800f79a <xQueueGenericSend+0xbe>
	__asm volatile
 800f784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	61fb      	str	r3, [r7, #28]
}
 800f796:	bf00      	nop
 800f798:	e7fe      	b.n	800f798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f79a:	f002 f8eb 	bl	8011974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d302      	bcc.n	800f7b0 <xQueueGenericSend+0xd4>
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	2b02      	cmp	r3, #2
 800f7ae:	d129      	bne.n	800f804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f7b0:	683a      	ldr	r2, [r7, #0]
 800f7b2:	68b9      	ldr	r1, [r7, #8]
 800f7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7b6:	f000 fa0b 	bl	800fbd0 <prvCopyDataToQueue>
 800f7ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d010      	beq.n	800f7e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c6:	3324      	adds	r3, #36	; 0x24
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 ffcf 	bl	801076c <xTaskRemoveFromEventList>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d013      	beq.n	800f7fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f7d4:	4b3f      	ldr	r3, [pc, #252]	; (800f8d4 <xQueueGenericSend+0x1f8>)
 800f7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7da:	601a      	str	r2, [r3, #0]
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	e00a      	b.n	800f7fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d007      	beq.n	800f7fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f7ec:	4b39      	ldr	r3, [pc, #228]	; (800f8d4 <xQueueGenericSend+0x1f8>)
 800f7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7f2:	601a      	str	r2, [r3, #0]
 800f7f4:	f3bf 8f4f 	dsb	sy
 800f7f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f7fc:	f002 f8ea 	bl	80119d4 <vPortExitCritical>
				return pdPASS;
 800f800:	2301      	movs	r3, #1
 800f802:	e063      	b.n	800f8cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d103      	bne.n	800f812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f80a:	f002 f8e3 	bl	80119d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f80e:	2300      	movs	r3, #0
 800f810:	e05c      	b.n	800f8cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f814:	2b00      	cmp	r3, #0
 800f816:	d106      	bne.n	800f826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f818:	f107 0314 	add.w	r3, r7, #20
 800f81c:	4618      	mov	r0, r3
 800f81e:	f001 f809 	bl	8010834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f822:	2301      	movs	r3, #1
 800f824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f826:	f002 f8d5 	bl	80119d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f82a:	f000 fd7b 	bl	8010324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f82e:	f002 f8a1 	bl	8011974 <vPortEnterCritical>
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f838:	b25b      	sxtb	r3, r3
 800f83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f83e:	d103      	bne.n	800f848 <xQueueGenericSend+0x16c>
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	2200      	movs	r2, #0
 800f844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f84e:	b25b      	sxtb	r3, r3
 800f850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f854:	d103      	bne.n	800f85e <xQueueGenericSend+0x182>
 800f856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f858:	2200      	movs	r2, #0
 800f85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f85e:	f002 f8b9 	bl	80119d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f862:	1d3a      	adds	r2, r7, #4
 800f864:	f107 0314 	add.w	r3, r7, #20
 800f868:	4611      	mov	r1, r2
 800f86a:	4618      	mov	r0, r3
 800f86c:	f000 fff8 	bl	8010860 <xTaskCheckForTimeOut>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d124      	bne.n	800f8c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f878:	f000 faa2 	bl	800fdc0 <prvIsQueueFull>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d018      	beq.n	800f8b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	3310      	adds	r3, #16
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	4611      	mov	r1, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 ff1e 	bl	80106cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f892:	f000 fa2d 	bl	800fcf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f896:	f000 fd53 	bl	8010340 <xTaskResumeAll>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f47f af7c 	bne.w	800f79a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f8a2:	4b0c      	ldr	r3, [pc, #48]	; (800f8d4 <xQueueGenericSend+0x1f8>)
 800f8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	e772      	b.n	800f79a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8b6:	f000 fa1b 	bl	800fcf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f8ba:	f000 fd41 	bl	8010340 <xTaskResumeAll>
 800f8be:	e76c      	b.n	800f79a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8c2:	f000 fa15 	bl	800fcf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8c6:	f000 fd3b 	bl	8010340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f8ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3738      	adds	r7, #56	; 0x38
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	e000ed04 	.word	0xe000ed04

0800f8d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b090      	sub	sp, #64	; 0x40
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d10a      	bne.n	800f906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f4:	f383 8811 	msr	BASEPRI, r3
 800f8f8:	f3bf 8f6f 	isb	sy
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f902:	bf00      	nop
 800f904:	e7fe      	b.n	800f904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d103      	bne.n	800f914 <xQueueGenericSendFromISR+0x3c>
 800f90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f910:	2b00      	cmp	r3, #0
 800f912:	d101      	bne.n	800f918 <xQueueGenericSendFromISR+0x40>
 800f914:	2301      	movs	r3, #1
 800f916:	e000      	b.n	800f91a <xQueueGenericSendFromISR+0x42>
 800f918:	2300      	movs	r3, #0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10a      	bne.n	800f934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f930:	bf00      	nop
 800f932:	e7fe      	b.n	800f932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	2b02      	cmp	r3, #2
 800f938:	d103      	bne.n	800f942 <xQueueGenericSendFromISR+0x6a>
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d101      	bne.n	800f946 <xQueueGenericSendFromISR+0x6e>
 800f942:	2301      	movs	r3, #1
 800f944:	e000      	b.n	800f948 <xQueueGenericSendFromISR+0x70>
 800f946:	2300      	movs	r3, #0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d10a      	bne.n	800f962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	623b      	str	r3, [r7, #32]
}
 800f95e:	bf00      	nop
 800f960:	e7fe      	b.n	800f960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f962:	f002 f8e9 	bl	8011b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f966:	f3ef 8211 	mrs	r2, BASEPRI
 800f96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96e:	f383 8811 	msr	BASEPRI, r3
 800f972:	f3bf 8f6f 	isb	sy
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	61fa      	str	r2, [r7, #28]
 800f97c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f97e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d302      	bcc.n	800f994 <xQueueGenericSendFromISR+0xbc>
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	2b02      	cmp	r3, #2
 800f992:	d12f      	bne.n	800f9f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	68b9      	ldr	r1, [r7, #8]
 800f9a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9aa:	f000 f911 	bl	800fbd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f9ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b6:	d112      	bne.n	800f9de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d016      	beq.n	800f9ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	3324      	adds	r3, #36	; 0x24
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 fed1 	bl	801076c <xTaskRemoveFromEventList>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00e      	beq.n	800f9ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00b      	beq.n	800f9ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	601a      	str	r2, [r3, #0]
 800f9dc:	e007      	b.n	800f9ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f9de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	b25a      	sxtb	r2, r3
 800f9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f9f2:	e001      	b.n	800f9f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fa02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3740      	adds	r7, #64	; 0x40
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b08c      	sub	sp, #48	; 0x30
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d10a      	bne.n	800fa40 <xQueueReceive+0x30>
	__asm volatile
 800fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2e:	f383 8811 	msr	BASEPRI, r3
 800fa32:	f3bf 8f6f 	isb	sy
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	623b      	str	r3, [r7, #32]
}
 800fa3c:	bf00      	nop
 800fa3e:	e7fe      	b.n	800fa3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d103      	bne.n	800fa4e <xQueueReceive+0x3e>
 800fa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d101      	bne.n	800fa52 <xQueueReceive+0x42>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	e000      	b.n	800fa54 <xQueueReceive+0x44>
 800fa52:	2300      	movs	r3, #0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d10a      	bne.n	800fa6e <xQueueReceive+0x5e>
	__asm volatile
 800fa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5c:	f383 8811 	msr	BASEPRI, r3
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	61fb      	str	r3, [r7, #28]
}
 800fa6a:	bf00      	nop
 800fa6c:	e7fe      	b.n	800fa6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa6e:	f001 f83b 	bl	8010ae8 <xTaskGetSchedulerState>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d102      	bne.n	800fa7e <xQueueReceive+0x6e>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <xQueueReceive+0x72>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e000      	b.n	800fa84 <xQueueReceive+0x74>
 800fa82:	2300      	movs	r3, #0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d10a      	bne.n	800fa9e <xQueueReceive+0x8e>
	__asm volatile
 800fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	61bb      	str	r3, [r7, #24]
}
 800fa9a:	bf00      	nop
 800fa9c:	e7fe      	b.n	800fa9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa9e:	f001 ff69 	bl	8011974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d01f      	beq.n	800faee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800faae:	68b9      	ldr	r1, [r7, #8]
 800fab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fab2:	f000 f8f7 	bl	800fca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	1e5a      	subs	r2, r3, #1
 800faba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00f      	beq.n	800fae6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac8:	3310      	adds	r3, #16
 800faca:	4618      	mov	r0, r3
 800facc:	f000 fe4e 	bl	801076c <xTaskRemoveFromEventList>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d007      	beq.n	800fae6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fad6:	4b3d      	ldr	r3, [pc, #244]	; (800fbcc <xQueueReceive+0x1bc>)
 800fad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fadc:	601a      	str	r2, [r3, #0]
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fae6:	f001 ff75 	bl	80119d4 <vPortExitCritical>
				return pdPASS;
 800faea:	2301      	movs	r3, #1
 800faec:	e069      	b.n	800fbc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d103      	bne.n	800fafc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800faf4:	f001 ff6e 	bl	80119d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800faf8:	2300      	movs	r3, #0
 800fafa:	e062      	b.n	800fbc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d106      	bne.n	800fb10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb02:	f107 0310 	add.w	r3, r7, #16
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 fe94 	bl	8010834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb10:	f001 ff60 	bl	80119d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb14:	f000 fc06 	bl	8010324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb18:	f001 ff2c 	bl	8011974 <vPortEnterCritical>
 800fb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb22:	b25b      	sxtb	r3, r3
 800fb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb28:	d103      	bne.n	800fb32 <xQueueReceive+0x122>
 800fb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb38:	b25b      	sxtb	r3, r3
 800fb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3e:	d103      	bne.n	800fb48 <xQueueReceive+0x138>
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	2200      	movs	r2, #0
 800fb44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb48:	f001 ff44 	bl	80119d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb4c:	1d3a      	adds	r2, r7, #4
 800fb4e:	f107 0310 	add.w	r3, r7, #16
 800fb52:	4611      	mov	r1, r2
 800fb54:	4618      	mov	r0, r3
 800fb56:	f000 fe83 	bl	8010860 <xTaskCheckForTimeOut>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d123      	bne.n	800fba8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb62:	f000 f917 	bl	800fd94 <prvIsQueueEmpty>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d017      	beq.n	800fb9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6e:	3324      	adds	r3, #36	; 0x24
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	4611      	mov	r1, r2
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 fda9 	bl	80106cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb7c:	f000 f8b8 	bl	800fcf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb80:	f000 fbde 	bl	8010340 <xTaskResumeAll>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d189      	bne.n	800fa9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fb8a:	4b10      	ldr	r3, [pc, #64]	; (800fbcc <xQueueReceive+0x1bc>)
 800fb8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	e780      	b.n	800fa9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb9e:	f000 f8a7 	bl	800fcf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fba2:	f000 fbcd 	bl	8010340 <xTaskResumeAll>
 800fba6:	e77a      	b.n	800fa9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbaa:	f000 f8a1 	bl	800fcf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbae:	f000 fbc7 	bl	8010340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbb4:	f000 f8ee 	bl	800fd94 <prvIsQueueEmpty>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f43f af6f 	beq.w	800fa9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fbc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3730      	adds	r7, #48	; 0x30
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	e000ed04 	.word	0xe000ed04

0800fbd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d10d      	bne.n	800fc0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d14d      	bne.n	800fc92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	689b      	ldr	r3, [r3, #8]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f000 ff92 	bl	8010b24 <xTaskPriorityDisinherit>
 800fc00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	609a      	str	r2, [r3, #8]
 800fc08:	e043      	b.n	800fc92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d119      	bne.n	800fc44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6858      	ldr	r0, [r3, #4]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc18:	461a      	mov	r2, r3
 800fc1a:	68b9      	ldr	r1, [r7, #8]
 800fc1c:	f003 fc8b 	bl	8013536 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	685a      	ldr	r2, [r3, #4]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc28:	441a      	add	r2, r3
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d32b      	bcc.n	800fc92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	605a      	str	r2, [r3, #4]
 800fc42:	e026      	b.n	800fc92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	68d8      	ldr	r0, [r3, #12]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	68b9      	ldr	r1, [r7, #8]
 800fc50:	f003 fc71 	bl	8013536 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	68da      	ldr	r2, [r3, #12]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5c:	425b      	negs	r3, r3
 800fc5e:	441a      	add	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	68da      	ldr	r2, [r3, #12]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d207      	bcs.n	800fc80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	689a      	ldr	r2, [r3, #8]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc78:	425b      	negs	r3, r3
 800fc7a:	441a      	add	r2, r3
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b02      	cmp	r3, #2
 800fc84:	d105      	bne.n	800fc92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	3b01      	subs	r3, #1
 800fc90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	1c5a      	adds	r2, r3, #1
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fc9a:	697b      	ldr	r3, [r7, #20]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d018      	beq.n	800fce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	68da      	ldr	r2, [r3, #12]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcbe:	441a      	add	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	68da      	ldr	r2, [r3, #12]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d303      	bcc.n	800fcd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	68d9      	ldr	r1, [r3, #12]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fce0:	461a      	mov	r2, r3
 800fce2:	6838      	ldr	r0, [r7, #0]
 800fce4:	f003 fc27 	bl	8013536 <memcpy>
	}
}
 800fce8:	bf00      	nop
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fcf8:	f001 fe3c 	bl	8011974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd04:	e011      	b.n	800fd2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d012      	beq.n	800fd34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	3324      	adds	r3, #36	; 0x24
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 fd2a 	bl	801076c <xTaskRemoveFromEventList>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d001      	beq.n	800fd22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fd1e:	f000 fe01 	bl	8010924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fd22:	7bfb      	ldrb	r3, [r7, #15]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	dce9      	bgt.n	800fd06 <prvUnlockQueue+0x16>
 800fd32:	e000      	b.n	800fd36 <prvUnlockQueue+0x46>
					break;
 800fd34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	22ff      	movs	r2, #255	; 0xff
 800fd3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd3e:	f001 fe49 	bl	80119d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd42:	f001 fe17 	bl	8011974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd4e:	e011      	b.n	800fd74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	691b      	ldr	r3, [r3, #16]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d012      	beq.n	800fd7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	3310      	adds	r3, #16
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f000 fd05 	bl	801076c <xTaskRemoveFromEventList>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd68:	f000 fddc 	bl	8010924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd6c:	7bbb      	ldrb	r3, [r7, #14]
 800fd6e:	3b01      	subs	r3, #1
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	dce9      	bgt.n	800fd50 <prvUnlockQueue+0x60>
 800fd7c:	e000      	b.n	800fd80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	22ff      	movs	r2, #255	; 0xff
 800fd84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fd88:	f001 fe24 	bl	80119d4 <vPortExitCritical>
}
 800fd8c:	bf00      	nop
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd9c:	f001 fdea 	bl	8011974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d102      	bne.n	800fdae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	60fb      	str	r3, [r7, #12]
 800fdac:	e001      	b.n	800fdb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdb2:	f001 fe0f 	bl	80119d4 <vPortExitCritical>

	return xReturn;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fdc8:	f001 fdd4 	bl	8011974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d102      	bne.n	800fdde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	e001      	b.n	800fde2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fdde:	2300      	movs	r3, #0
 800fde0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fde2:	f001 fdf7 	bl	80119d4 <vPortExitCritical>

	return xReturn;
 800fde6:	68fb      	ldr	r3, [r7, #12]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3710      	adds	r7, #16
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	60fb      	str	r3, [r7, #12]
 800fdfe:	e014      	b.n	800fe2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fe00:	4a0f      	ldr	r2, [pc, #60]	; (800fe40 <vQueueAddToRegistry+0x50>)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10b      	bne.n	800fe24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fe0c:	490c      	ldr	r1, [pc, #48]	; (800fe40 <vQueueAddToRegistry+0x50>)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fe16:	4a0a      	ldr	r2, [pc, #40]	; (800fe40 <vQueueAddToRegistry+0x50>)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	00db      	lsls	r3, r3, #3
 800fe1c:	4413      	add	r3, r2
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fe22:	e006      	b.n	800fe32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	3301      	adds	r3, #1
 800fe28:	60fb      	str	r3, [r7, #12]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2b07      	cmp	r3, #7
 800fe2e:	d9e7      	bls.n	800fe00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fe30:	bf00      	nop
 800fe32:	bf00      	nop
 800fe34:	3714      	adds	r7, #20
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20002084 	.word	0x20002084

0800fe44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b086      	sub	sp, #24
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fe54:	f001 fd8e 	bl	8011974 <vPortEnterCritical>
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe5e:	b25b      	sxtb	r3, r3
 800fe60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe64:	d103      	bne.n	800fe6e <vQueueWaitForMessageRestricted+0x2a>
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe74:	b25b      	sxtb	r3, r3
 800fe76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe7a:	d103      	bne.n	800fe84 <vQueueWaitForMessageRestricted+0x40>
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe84:	f001 fda6 	bl	80119d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d106      	bne.n	800fe9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	3324      	adds	r3, #36	; 0x24
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	68b9      	ldr	r1, [r7, #8]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f000 fc3b 	bl	8010714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fe9e:	6978      	ldr	r0, [r7, #20]
 800fea0:	f7ff ff26 	bl	800fcf0 <prvUnlockQueue>
	}
 800fea4:	bf00      	nop
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800feac:	b580      	push	{r7, lr}
 800feae:	b08e      	sub	sp, #56	; 0x38
 800feb0:	af04      	add	r7, sp, #16
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
 800feb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800feba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800febc:	2b00      	cmp	r3, #0
 800febe:	d10a      	bne.n	800fed6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	623b      	str	r3, [r7, #32]
}
 800fed2:	bf00      	nop
 800fed4:	e7fe      	b.n	800fed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d10a      	bne.n	800fef2 <xTaskCreateStatic+0x46>
	__asm volatile
 800fedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee0:	f383 8811 	msr	BASEPRI, r3
 800fee4:	f3bf 8f6f 	isb	sy
 800fee8:	f3bf 8f4f 	dsb	sy
 800feec:	61fb      	str	r3, [r7, #28]
}
 800feee:	bf00      	nop
 800fef0:	e7fe      	b.n	800fef0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fef2:	235c      	movs	r3, #92	; 0x5c
 800fef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b5c      	cmp	r3, #92	; 0x5c
 800fefa:	d00a      	beq.n	800ff12 <xTaskCreateStatic+0x66>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	61bb      	str	r3, [r7, #24]
}
 800ff0e:	bf00      	nop
 800ff10:	e7fe      	b.n	800ff10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ff12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d01e      	beq.n	800ff58 <xTaskCreateStatic+0xac>
 800ff1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d01b      	beq.n	800ff58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2c:	2202      	movs	r2, #2
 800ff2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ff32:	2300      	movs	r3, #0
 800ff34:	9303      	str	r3, [sp, #12]
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	9302      	str	r3, [sp, #8]
 800ff3a:	f107 0314 	add.w	r3, r7, #20
 800ff3e:	9301      	str	r3, [sp, #4]
 800ff40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	68b9      	ldr	r1, [r7, #8]
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f000 f850 	bl	800fff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ff50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff52:	f000 f8dd 	bl	8010110 <prvAddNewTaskToReadyList>
 800ff56:	e001      	b.n	800ff5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ff5c:	697b      	ldr	r3, [r7, #20]
	}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3728      	adds	r7, #40	; 0x28
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b08c      	sub	sp, #48	; 0x30
 800ff6a:	af04      	add	r7, sp, #16
 800ff6c:	60f8      	str	r0, [r7, #12]
 800ff6e:	60b9      	str	r1, [r7, #8]
 800ff70:	603b      	str	r3, [r7, #0]
 800ff72:	4613      	mov	r3, r2
 800ff74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ff76:	88fb      	ldrh	r3, [r7, #6]
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f001 fe1c 	bl	8011bb8 <pvPortMalloc>
 800ff80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00e      	beq.n	800ffa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ff88:	205c      	movs	r0, #92	; 0x5c
 800ff8a:	f001 fe15 	bl	8011bb8 <pvPortMalloc>
 800ff8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	697a      	ldr	r2, [r7, #20]
 800ff9a:	631a      	str	r2, [r3, #48]	; 0x30
 800ff9c:	e005      	b.n	800ffaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ff9e:	6978      	ldr	r0, [r7, #20]
 800ffa0:	f001 fed6 	bl	8011d50 <vPortFree>
 800ffa4:	e001      	b.n	800ffaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d017      	beq.n	800ffe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ffb8:	88fa      	ldrh	r2, [r7, #6]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9303      	str	r3, [sp, #12]
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	9302      	str	r3, [sp, #8]
 800ffc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc4:	9301      	str	r3, [sp, #4]
 800ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	68b9      	ldr	r1, [r7, #8]
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f000 f80e 	bl	800fff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ffd4:	69f8      	ldr	r0, [r7, #28]
 800ffd6:	f000 f89b 	bl	8010110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	61bb      	str	r3, [r7, #24]
 800ffde:	e002      	b.n	800ffe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ffe6:	69bb      	ldr	r3, [r7, #24]
	}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3720      	adds	r7, #32
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
 800fffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	461a      	mov	r2, r3
 8010008:	21a5      	movs	r1, #165	; 0xa5
 801000a:	f003 f97d 	bl	8013308 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801000e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010018:	3b01      	subs	r3, #1
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	f023 0307 	bic.w	r3, r3, #7
 8010026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	f003 0307 	and.w	r3, r3, #7
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00a      	beq.n	8010048 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010036:	f383 8811 	msr	BASEPRI, r3
 801003a:	f3bf 8f6f 	isb	sy
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	617b      	str	r3, [r7, #20]
}
 8010044:	bf00      	nop
 8010046:	e7fe      	b.n	8010046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d01f      	beq.n	801008e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801004e:	2300      	movs	r3, #0
 8010050:	61fb      	str	r3, [r7, #28]
 8010052:	e012      	b.n	801007a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	4413      	add	r3, r2
 801005a:	7819      	ldrb	r1, [r3, #0]
 801005c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	4413      	add	r3, r2
 8010062:	3334      	adds	r3, #52	; 0x34
 8010064:	460a      	mov	r2, r1
 8010066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	4413      	add	r3, r2
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d006      	beq.n	8010082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	3301      	adds	r3, #1
 8010078:	61fb      	str	r3, [r7, #28]
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	2b0f      	cmp	r3, #15
 801007e:	d9e9      	bls.n	8010054 <prvInitialiseNewTask+0x64>
 8010080:	e000      	b.n	8010084 <prvInitialiseNewTask+0x94>
			{
				break;
 8010082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010086:	2200      	movs	r2, #0
 8010088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801008c:	e003      	b.n	8010096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010090:	2200      	movs	r2, #0
 8010092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010098:	2b37      	cmp	r3, #55	; 0x37
 801009a:	d901      	bls.n	80100a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801009c:	2337      	movs	r3, #55	; 0x37
 801009e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80100a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80100ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ae:	2200      	movs	r2, #0
 80100b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	3304      	adds	r3, #4
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff f978 	bl	800f3ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80100bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100be:	3318      	adds	r3, #24
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff f973 	bl	800f3ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	2200      	movs	r2, #0
 80100e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80100e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e4:	2200      	movs	r2, #0
 80100e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	68f9      	ldr	r1, [r7, #12]
 80100ee:	69b8      	ldr	r0, [r7, #24]
 80100f0:	f001 fb16 	bl	8011720 <pxPortInitialiseStack>
 80100f4:	4602      	mov	r2, r0
 80100f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80100fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010106:	bf00      	nop
 8010108:	3720      	adds	r7, #32
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
	...

08010110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010118:	f001 fc2c 	bl	8011974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801011c:	4b2d      	ldr	r3, [pc, #180]	; (80101d4 <prvAddNewTaskToReadyList+0xc4>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3301      	adds	r3, #1
 8010122:	4a2c      	ldr	r2, [pc, #176]	; (80101d4 <prvAddNewTaskToReadyList+0xc4>)
 8010124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010126:	4b2c      	ldr	r3, [pc, #176]	; (80101d8 <prvAddNewTaskToReadyList+0xc8>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d109      	bne.n	8010142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801012e:	4a2a      	ldr	r2, [pc, #168]	; (80101d8 <prvAddNewTaskToReadyList+0xc8>)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010134:	4b27      	ldr	r3, [pc, #156]	; (80101d4 <prvAddNewTaskToReadyList+0xc4>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d110      	bne.n	801015e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801013c:	f000 fc16 	bl	801096c <prvInitialiseTaskLists>
 8010140:	e00d      	b.n	801015e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010142:	4b26      	ldr	r3, [pc, #152]	; (80101dc <prvAddNewTaskToReadyList+0xcc>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d109      	bne.n	801015e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801014a:	4b23      	ldr	r3, [pc, #140]	; (80101d8 <prvAddNewTaskToReadyList+0xc8>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010154:	429a      	cmp	r2, r3
 8010156:	d802      	bhi.n	801015e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010158:	4a1f      	ldr	r2, [pc, #124]	; (80101d8 <prvAddNewTaskToReadyList+0xc8>)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801015e:	4b20      	ldr	r3, [pc, #128]	; (80101e0 <prvAddNewTaskToReadyList+0xd0>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	3301      	adds	r3, #1
 8010164:	4a1e      	ldr	r2, [pc, #120]	; (80101e0 <prvAddNewTaskToReadyList+0xd0>)
 8010166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010168:	4b1d      	ldr	r3, [pc, #116]	; (80101e0 <prvAddNewTaskToReadyList+0xd0>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010174:	4b1b      	ldr	r3, [pc, #108]	; (80101e4 <prvAddNewTaskToReadyList+0xd4>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	429a      	cmp	r2, r3
 801017a:	d903      	bls.n	8010184 <prvAddNewTaskToReadyList+0x74>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010180:	4a18      	ldr	r2, [pc, #96]	; (80101e4 <prvAddNewTaskToReadyList+0xd4>)
 8010182:	6013      	str	r3, [r2, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010188:	4613      	mov	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	4a15      	ldr	r2, [pc, #84]	; (80101e8 <prvAddNewTaskToReadyList+0xd8>)
 8010192:	441a      	add	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	3304      	adds	r3, #4
 8010198:	4619      	mov	r1, r3
 801019a:	4610      	mov	r0, r2
 801019c:	f7ff f913 	bl	800f3c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80101a0:	f001 fc18 	bl	80119d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80101a4:	4b0d      	ldr	r3, [pc, #52]	; (80101dc <prvAddNewTaskToReadyList+0xcc>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00e      	beq.n	80101ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80101ac:	4b0a      	ldr	r3, [pc, #40]	; (80101d8 <prvAddNewTaskToReadyList+0xc8>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d207      	bcs.n	80101ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80101ba:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <prvAddNewTaskToReadyList+0xdc>)
 80101bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c0:	601a      	str	r2, [r3, #0]
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101ca:	bf00      	nop
 80101cc:	3708      	adds	r7, #8
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	20002598 	.word	0x20002598
 80101d8:	200020c4 	.word	0x200020c4
 80101dc:	200025a4 	.word	0x200025a4
 80101e0:	200025b4 	.word	0x200025b4
 80101e4:	200025a0 	.word	0x200025a0
 80101e8:	200020c8 	.word	0x200020c8
 80101ec:	e000ed04 	.word	0xe000ed04

080101f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80101f8:	2300      	movs	r3, #0
 80101fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d017      	beq.n	8010232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010202:	4b13      	ldr	r3, [pc, #76]	; (8010250 <vTaskDelay+0x60>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d00a      	beq.n	8010220 <vTaskDelay+0x30>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	60bb      	str	r3, [r7, #8]
}
 801021c:	bf00      	nop
 801021e:	e7fe      	b.n	801021e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010220:	f000 f880 	bl	8010324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010224:	2100      	movs	r1, #0
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fed8 	bl	8010fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801022c:	f000 f888 	bl	8010340 <xTaskResumeAll>
 8010230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d107      	bne.n	8010248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010238:	4b06      	ldr	r3, [pc, #24]	; (8010254 <vTaskDelay+0x64>)
 801023a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801023e:	601a      	str	r2, [r3, #0]
 8010240:	f3bf 8f4f 	dsb	sy
 8010244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010248:	bf00      	nop
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	200025c0 	.word	0x200025c0
 8010254:	e000ed04 	.word	0xe000ed04

08010258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08a      	sub	sp, #40	; 0x28
 801025c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801025e:	2300      	movs	r3, #0
 8010260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010262:	2300      	movs	r3, #0
 8010264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010266:	463a      	mov	r2, r7
 8010268:	1d39      	adds	r1, r7, #4
 801026a:	f107 0308 	add.w	r3, r7, #8
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff f848 	bl	800f304 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010274:	6839      	ldr	r1, [r7, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	9202      	str	r2, [sp, #8]
 801027c:	9301      	str	r3, [sp, #4]
 801027e:	2300      	movs	r3, #0
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	2300      	movs	r3, #0
 8010284:	460a      	mov	r2, r1
 8010286:	4921      	ldr	r1, [pc, #132]	; (801030c <vTaskStartScheduler+0xb4>)
 8010288:	4821      	ldr	r0, [pc, #132]	; (8010310 <vTaskStartScheduler+0xb8>)
 801028a:	f7ff fe0f 	bl	800feac <xTaskCreateStatic>
 801028e:	4603      	mov	r3, r0
 8010290:	4a20      	ldr	r2, [pc, #128]	; (8010314 <vTaskStartScheduler+0xbc>)
 8010292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010294:	4b1f      	ldr	r3, [pc, #124]	; (8010314 <vTaskStartScheduler+0xbc>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d002      	beq.n	80102a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801029c:	2301      	movs	r3, #1
 801029e:	617b      	str	r3, [r7, #20]
 80102a0:	e001      	b.n	80102a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80102a2:	2300      	movs	r3, #0
 80102a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d102      	bne.n	80102b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80102ac:	f000 feea 	bl	8011084 <xTimerCreateTimerTask>
 80102b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d116      	bne.n	80102e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80102b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102bc:	f383 8811 	msr	BASEPRI, r3
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	613b      	str	r3, [r7, #16]
}
 80102ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80102cc:	4b12      	ldr	r3, [pc, #72]	; (8010318 <vTaskStartScheduler+0xc0>)
 80102ce:	f04f 32ff 	mov.w	r2, #4294967295
 80102d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80102d4:	4b11      	ldr	r3, [pc, #68]	; (801031c <vTaskStartScheduler+0xc4>)
 80102d6:	2201      	movs	r2, #1
 80102d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80102da:	4b11      	ldr	r3, [pc, #68]	; (8010320 <vTaskStartScheduler+0xc8>)
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80102e0:	f001 faa6 	bl	8011830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80102e4:	e00e      	b.n	8010304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ec:	d10a      	bne.n	8010304 <vTaskStartScheduler+0xac>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	60fb      	str	r3, [r7, #12]
}
 8010300:	bf00      	nop
 8010302:	e7fe      	b.n	8010302 <vTaskStartScheduler+0xaa>
}
 8010304:	bf00      	nop
 8010306:	3718      	adds	r7, #24
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	08017f58 	.word	0x08017f58
 8010310:	0801093d 	.word	0x0801093d
 8010314:	200025bc 	.word	0x200025bc
 8010318:	200025b8 	.word	0x200025b8
 801031c:	200025a4 	.word	0x200025a4
 8010320:	2000259c 	.word	0x2000259c

08010324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010324:	b480      	push	{r7}
 8010326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010328:	4b04      	ldr	r3, [pc, #16]	; (801033c <vTaskSuspendAll+0x18>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	3301      	adds	r3, #1
 801032e:	4a03      	ldr	r2, [pc, #12]	; (801033c <vTaskSuspendAll+0x18>)
 8010330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010332:	bf00      	nop
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	200025c0 	.word	0x200025c0

08010340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801034a:	2300      	movs	r3, #0
 801034c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801034e:	4b42      	ldr	r3, [pc, #264]	; (8010458 <xTaskResumeAll+0x118>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d10a      	bne.n	801036c <xTaskResumeAll+0x2c>
	__asm volatile
 8010356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035a:	f383 8811 	msr	BASEPRI, r3
 801035e:	f3bf 8f6f 	isb	sy
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	603b      	str	r3, [r7, #0]
}
 8010368:	bf00      	nop
 801036a:	e7fe      	b.n	801036a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801036c:	f001 fb02 	bl	8011974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010370:	4b39      	ldr	r3, [pc, #228]	; (8010458 <xTaskResumeAll+0x118>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	3b01      	subs	r3, #1
 8010376:	4a38      	ldr	r2, [pc, #224]	; (8010458 <xTaskResumeAll+0x118>)
 8010378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801037a:	4b37      	ldr	r3, [pc, #220]	; (8010458 <xTaskResumeAll+0x118>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d162      	bne.n	8010448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010382:	4b36      	ldr	r3, [pc, #216]	; (801045c <xTaskResumeAll+0x11c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d05e      	beq.n	8010448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801038a:	e02f      	b.n	80103ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801038c:	4b34      	ldr	r3, [pc, #208]	; (8010460 <xTaskResumeAll+0x120>)
 801038e:	68db      	ldr	r3, [r3, #12]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	3318      	adds	r3, #24
 8010398:	4618      	mov	r0, r3
 801039a:	f7ff f871 	bl	800f480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3304      	adds	r3, #4
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7ff f86c 	bl	800f480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ac:	4b2d      	ldr	r3, [pc, #180]	; (8010464 <xTaskResumeAll+0x124>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d903      	bls.n	80103bc <xTaskResumeAll+0x7c>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b8:	4a2a      	ldr	r2, [pc, #168]	; (8010464 <xTaskResumeAll+0x124>)
 80103ba:	6013      	str	r3, [r2, #0]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103c0:	4613      	mov	r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	4413      	add	r3, r2
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4a27      	ldr	r2, [pc, #156]	; (8010468 <xTaskResumeAll+0x128>)
 80103ca:	441a      	add	r2, r3
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	3304      	adds	r3, #4
 80103d0:	4619      	mov	r1, r3
 80103d2:	4610      	mov	r0, r2
 80103d4:	f7fe fff7 	bl	800f3c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103dc:	4b23      	ldr	r3, [pc, #140]	; (801046c <xTaskResumeAll+0x12c>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d302      	bcc.n	80103ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80103e6:	4b22      	ldr	r3, [pc, #136]	; (8010470 <xTaskResumeAll+0x130>)
 80103e8:	2201      	movs	r2, #1
 80103ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103ec:	4b1c      	ldr	r3, [pc, #112]	; (8010460 <xTaskResumeAll+0x120>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d1cb      	bne.n	801038c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80103fa:	f000 fb55 	bl	8010aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80103fe:	4b1d      	ldr	r3, [pc, #116]	; (8010474 <xTaskResumeAll+0x134>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d010      	beq.n	801042c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801040a:	f000 f847 	bl	801049c <xTaskIncrementTick>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010414:	4b16      	ldr	r3, [pc, #88]	; (8010470 <xTaskResumeAll+0x130>)
 8010416:	2201      	movs	r2, #1
 8010418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	3b01      	subs	r3, #1
 801041e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1f1      	bne.n	801040a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010426:	4b13      	ldr	r3, [pc, #76]	; (8010474 <xTaskResumeAll+0x134>)
 8010428:	2200      	movs	r2, #0
 801042a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801042c:	4b10      	ldr	r3, [pc, #64]	; (8010470 <xTaskResumeAll+0x130>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d009      	beq.n	8010448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010434:	2301      	movs	r3, #1
 8010436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010438:	4b0f      	ldr	r3, [pc, #60]	; (8010478 <xTaskResumeAll+0x138>)
 801043a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801043e:	601a      	str	r2, [r3, #0]
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010448:	f001 fac4 	bl	80119d4 <vPortExitCritical>

	return xAlreadyYielded;
 801044c:	68bb      	ldr	r3, [r7, #8]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3710      	adds	r7, #16
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	200025c0 	.word	0x200025c0
 801045c:	20002598 	.word	0x20002598
 8010460:	20002558 	.word	0x20002558
 8010464:	200025a0 	.word	0x200025a0
 8010468:	200020c8 	.word	0x200020c8
 801046c:	200020c4 	.word	0x200020c4
 8010470:	200025ac 	.word	0x200025ac
 8010474:	200025a8 	.word	0x200025a8
 8010478:	e000ed04 	.word	0xe000ed04

0801047c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010482:	4b05      	ldr	r3, [pc, #20]	; (8010498 <xTaskGetTickCount+0x1c>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010488:	687b      	ldr	r3, [r7, #4]
}
 801048a:	4618      	mov	r0, r3
 801048c:	370c      	adds	r7, #12
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	2000259c 	.word	0x2000259c

0801049c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b086      	sub	sp, #24
 80104a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104a6:	4b4f      	ldr	r3, [pc, #316]	; (80105e4 <xTaskIncrementTick+0x148>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	f040 808f 	bne.w	80105ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80104b0:	4b4d      	ldr	r3, [pc, #308]	; (80105e8 <xTaskIncrementTick+0x14c>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	3301      	adds	r3, #1
 80104b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80104b8:	4a4b      	ldr	r2, [pc, #300]	; (80105e8 <xTaskIncrementTick+0x14c>)
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d120      	bne.n	8010506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80104c4:	4b49      	ldr	r3, [pc, #292]	; (80105ec <xTaskIncrementTick+0x150>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	603b      	str	r3, [r7, #0]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <xTaskIncrementTick+0x46>
 80104e4:	4b41      	ldr	r3, [pc, #260]	; (80105ec <xTaskIncrementTick+0x150>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	60fb      	str	r3, [r7, #12]
 80104ea:	4b41      	ldr	r3, [pc, #260]	; (80105f0 <xTaskIncrementTick+0x154>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a3f      	ldr	r2, [pc, #252]	; (80105ec <xTaskIncrementTick+0x150>)
 80104f0:	6013      	str	r3, [r2, #0]
 80104f2:	4a3f      	ldr	r2, [pc, #252]	; (80105f0 <xTaskIncrementTick+0x154>)
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6013      	str	r3, [r2, #0]
 80104f8:	4b3e      	ldr	r3, [pc, #248]	; (80105f4 <xTaskIncrementTick+0x158>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	3301      	adds	r3, #1
 80104fe:	4a3d      	ldr	r2, [pc, #244]	; (80105f4 <xTaskIncrementTick+0x158>)
 8010500:	6013      	str	r3, [r2, #0]
 8010502:	f000 fad1 	bl	8010aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010506:	4b3c      	ldr	r3, [pc, #240]	; (80105f8 <xTaskIncrementTick+0x15c>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	693a      	ldr	r2, [r7, #16]
 801050c:	429a      	cmp	r2, r3
 801050e:	d349      	bcc.n	80105a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010510:	4b36      	ldr	r3, [pc, #216]	; (80105ec <xTaskIncrementTick+0x150>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d104      	bne.n	8010524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801051a:	4b37      	ldr	r3, [pc, #220]	; (80105f8 <xTaskIncrementTick+0x15c>)
 801051c:	f04f 32ff 	mov.w	r2, #4294967295
 8010520:	601a      	str	r2, [r3, #0]
					break;
 8010522:	e03f      	b.n	80105a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010524:	4b31      	ldr	r3, [pc, #196]	; (80105ec <xTaskIncrementTick+0x150>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010534:	693a      	ldr	r2, [r7, #16]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	429a      	cmp	r2, r3
 801053a:	d203      	bcs.n	8010544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801053c:	4a2e      	ldr	r2, [pc, #184]	; (80105f8 <xTaskIncrementTick+0x15c>)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010542:	e02f      	b.n	80105a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	3304      	adds	r3, #4
 8010548:	4618      	mov	r0, r3
 801054a:	f7fe ff99 	bl	800f480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010552:	2b00      	cmp	r3, #0
 8010554:	d004      	beq.n	8010560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	3318      	adds	r3, #24
 801055a:	4618      	mov	r0, r3
 801055c:	f7fe ff90 	bl	800f480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010564:	4b25      	ldr	r3, [pc, #148]	; (80105fc <xTaskIncrementTick+0x160>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	429a      	cmp	r2, r3
 801056a:	d903      	bls.n	8010574 <xTaskIncrementTick+0xd8>
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010570:	4a22      	ldr	r2, [pc, #136]	; (80105fc <xTaskIncrementTick+0x160>)
 8010572:	6013      	str	r3, [r2, #0]
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010578:	4613      	mov	r3, r2
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	4413      	add	r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	4a1f      	ldr	r2, [pc, #124]	; (8010600 <xTaskIncrementTick+0x164>)
 8010582:	441a      	add	r2, r3
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	3304      	adds	r3, #4
 8010588:	4619      	mov	r1, r3
 801058a:	4610      	mov	r0, r2
 801058c:	f7fe ff1b 	bl	800f3c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010594:	4b1b      	ldr	r3, [pc, #108]	; (8010604 <xTaskIncrementTick+0x168>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801059a:	429a      	cmp	r2, r3
 801059c:	d3b8      	bcc.n	8010510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801059e:	2301      	movs	r3, #1
 80105a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105a2:	e7b5      	b.n	8010510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80105a4:	4b17      	ldr	r3, [pc, #92]	; (8010604 <xTaskIncrementTick+0x168>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	4915      	ldr	r1, [pc, #84]	; (8010600 <xTaskIncrementTick+0x164>)
 80105ac:	4613      	mov	r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4413      	add	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	440b      	add	r3, r1
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d901      	bls.n	80105c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80105bc:	2301      	movs	r3, #1
 80105be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80105c0:	4b11      	ldr	r3, [pc, #68]	; (8010608 <xTaskIncrementTick+0x16c>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d007      	beq.n	80105d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80105c8:	2301      	movs	r3, #1
 80105ca:	617b      	str	r3, [r7, #20]
 80105cc:	e004      	b.n	80105d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80105ce:	4b0f      	ldr	r3, [pc, #60]	; (801060c <xTaskIncrementTick+0x170>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	3301      	adds	r3, #1
 80105d4:	4a0d      	ldr	r2, [pc, #52]	; (801060c <xTaskIncrementTick+0x170>)
 80105d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80105d8:	697b      	ldr	r3, [r7, #20]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3718      	adds	r7, #24
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	200025c0 	.word	0x200025c0
 80105e8:	2000259c 	.word	0x2000259c
 80105ec:	20002550 	.word	0x20002550
 80105f0:	20002554 	.word	0x20002554
 80105f4:	200025b0 	.word	0x200025b0
 80105f8:	200025b8 	.word	0x200025b8
 80105fc:	200025a0 	.word	0x200025a0
 8010600:	200020c8 	.word	0x200020c8
 8010604:	200020c4 	.word	0x200020c4
 8010608:	200025ac 	.word	0x200025ac
 801060c:	200025a8 	.word	0x200025a8

08010610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010616:	4b28      	ldr	r3, [pc, #160]	; (80106b8 <vTaskSwitchContext+0xa8>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d003      	beq.n	8010626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801061e:	4b27      	ldr	r3, [pc, #156]	; (80106bc <vTaskSwitchContext+0xac>)
 8010620:	2201      	movs	r2, #1
 8010622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010624:	e041      	b.n	80106aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8010626:	4b25      	ldr	r3, [pc, #148]	; (80106bc <vTaskSwitchContext+0xac>)
 8010628:	2200      	movs	r2, #0
 801062a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801062c:	4b24      	ldr	r3, [pc, #144]	; (80106c0 <vTaskSwitchContext+0xb0>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	60fb      	str	r3, [r7, #12]
 8010632:	e010      	b.n	8010656 <vTaskSwitchContext+0x46>
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d10a      	bne.n	8010650 <vTaskSwitchContext+0x40>
	__asm volatile
 801063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	607b      	str	r3, [r7, #4]
}
 801064c:	bf00      	nop
 801064e:	e7fe      	b.n	801064e <vTaskSwitchContext+0x3e>
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	3b01      	subs	r3, #1
 8010654:	60fb      	str	r3, [r7, #12]
 8010656:	491b      	ldr	r1, [pc, #108]	; (80106c4 <vTaskSwitchContext+0xb4>)
 8010658:	68fa      	ldr	r2, [r7, #12]
 801065a:	4613      	mov	r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	4413      	add	r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	440b      	add	r3, r1
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0e4      	beq.n	8010634 <vTaskSwitchContext+0x24>
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	4613      	mov	r3, r2
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	4413      	add	r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	4a13      	ldr	r2, [pc, #76]	; (80106c4 <vTaskSwitchContext+0xb4>)
 8010676:	4413      	add	r3, r2
 8010678:	60bb      	str	r3, [r7, #8]
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	685a      	ldr	r2, [r3, #4]
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	605a      	str	r2, [r3, #4]
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	3308      	adds	r3, #8
 801068c:	429a      	cmp	r2, r3
 801068e:	d104      	bne.n	801069a <vTaskSwitchContext+0x8a>
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	685a      	ldr	r2, [r3, #4]
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	605a      	str	r2, [r3, #4]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	4a09      	ldr	r2, [pc, #36]	; (80106c8 <vTaskSwitchContext+0xb8>)
 80106a2:	6013      	str	r3, [r2, #0]
 80106a4:	4a06      	ldr	r2, [pc, #24]	; (80106c0 <vTaskSwitchContext+0xb0>)
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6013      	str	r3, [r2, #0]
}
 80106aa:	bf00      	nop
 80106ac:	3714      	adds	r7, #20
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop
 80106b8:	200025c0 	.word	0x200025c0
 80106bc:	200025ac 	.word	0x200025ac
 80106c0:	200025a0 	.word	0x200025a0
 80106c4:	200020c8 	.word	0x200020c8
 80106c8:	200020c4 	.word	0x200020c4

080106cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10a      	bne.n	80106f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	60fb      	str	r3, [r7, #12]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80106f2:	4b07      	ldr	r3, [pc, #28]	; (8010710 <vTaskPlaceOnEventList+0x44>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3318      	adds	r3, #24
 80106f8:	4619      	mov	r1, r3
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f7fe fe87 	bl	800f40e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010700:	2101      	movs	r1, #1
 8010702:	6838      	ldr	r0, [r7, #0]
 8010704:	f000 fc6a 	bl	8010fdc <prvAddCurrentTaskToDelayedList>
}
 8010708:	bf00      	nop
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	200020c4 	.word	0x200020c4

08010714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010714:	b580      	push	{r7, lr}
 8010716:	b086      	sub	sp, #24
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10a      	bne.n	801073c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	617b      	str	r3, [r7, #20]
}
 8010738:	bf00      	nop
 801073a:	e7fe      	b.n	801073a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801073c:	4b0a      	ldr	r3, [pc, #40]	; (8010768 <vTaskPlaceOnEventListRestricted+0x54>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	3318      	adds	r3, #24
 8010742:	4619      	mov	r1, r3
 8010744:	68f8      	ldr	r0, [r7, #12]
 8010746:	f7fe fe3e 	bl	800f3c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010750:	f04f 33ff 	mov.w	r3, #4294967295
 8010754:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010756:	6879      	ldr	r1, [r7, #4]
 8010758:	68b8      	ldr	r0, [r7, #8]
 801075a:	f000 fc3f 	bl	8010fdc <prvAddCurrentTaskToDelayedList>
	}
 801075e:	bf00      	nop
 8010760:	3718      	adds	r7, #24
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	200020c4 	.word	0x200020c4

0801076c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d10a      	bne.n	8010798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	60fb      	str	r3, [r7, #12]
}
 8010794:	bf00      	nop
 8010796:	e7fe      	b.n	8010796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	3318      	adds	r3, #24
 801079c:	4618      	mov	r0, r3
 801079e:	f7fe fe6f 	bl	800f480 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107a2:	4b1e      	ldr	r3, [pc, #120]	; (801081c <xTaskRemoveFromEventList+0xb0>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d11d      	bne.n	80107e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	3304      	adds	r3, #4
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe fe66 	bl	800f480 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b8:	4b19      	ldr	r3, [pc, #100]	; (8010820 <xTaskRemoveFromEventList+0xb4>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d903      	bls.n	80107c8 <xTaskRemoveFromEventList+0x5c>
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c4:	4a16      	ldr	r2, [pc, #88]	; (8010820 <xTaskRemoveFromEventList+0xb4>)
 80107c6:	6013      	str	r3, [r2, #0]
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107cc:	4613      	mov	r3, r2
 80107ce:	009b      	lsls	r3, r3, #2
 80107d0:	4413      	add	r3, r2
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	4a13      	ldr	r2, [pc, #76]	; (8010824 <xTaskRemoveFromEventList+0xb8>)
 80107d6:	441a      	add	r2, r3
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	3304      	adds	r3, #4
 80107dc:	4619      	mov	r1, r3
 80107de:	4610      	mov	r0, r2
 80107e0:	f7fe fdf1 	bl	800f3c6 <vListInsertEnd>
 80107e4:	e005      	b.n	80107f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	3318      	adds	r3, #24
 80107ea:	4619      	mov	r1, r3
 80107ec:	480e      	ldr	r0, [pc, #56]	; (8010828 <xTaskRemoveFromEventList+0xbc>)
 80107ee:	f7fe fdea 	bl	800f3c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f6:	4b0d      	ldr	r3, [pc, #52]	; (801082c <xTaskRemoveFromEventList+0xc0>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d905      	bls.n	801080c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010800:	2301      	movs	r3, #1
 8010802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010804:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <xTaskRemoveFromEventList+0xc4>)
 8010806:	2201      	movs	r2, #1
 8010808:	601a      	str	r2, [r3, #0]
 801080a:	e001      	b.n	8010810 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801080c:	2300      	movs	r3, #0
 801080e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010810:	697b      	ldr	r3, [r7, #20]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3718      	adds	r7, #24
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	200025c0 	.word	0x200025c0
 8010820:	200025a0 	.word	0x200025a0
 8010824:	200020c8 	.word	0x200020c8
 8010828:	20002558 	.word	0x20002558
 801082c:	200020c4 	.word	0x200020c4
 8010830:	200025ac 	.word	0x200025ac

08010834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801083c:	4b06      	ldr	r3, [pc, #24]	; (8010858 <vTaskInternalSetTimeOutState+0x24>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <vTaskInternalSetTimeOutState+0x28>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	605a      	str	r2, [r3, #4]
}
 801084c:	bf00      	nop
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	200025b0 	.word	0x200025b0
 801085c:	2000259c 	.word	0x2000259c

08010860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b088      	sub	sp, #32
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10a      	bne.n	8010886 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	613b      	str	r3, [r7, #16]
}
 8010882:	bf00      	nop
 8010884:	e7fe      	b.n	8010884 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d10a      	bne.n	80108a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010890:	f383 8811 	msr	BASEPRI, r3
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	60fb      	str	r3, [r7, #12]
}
 801089e:	bf00      	nop
 80108a0:	e7fe      	b.n	80108a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80108a2:	f001 f867 	bl	8011974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108a6:	4b1d      	ldr	r3, [pc, #116]	; (801091c <xTaskCheckForTimeOut+0xbc>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	69ba      	ldr	r2, [r7, #24]
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108be:	d102      	bne.n	80108c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108c0:	2300      	movs	r3, #0
 80108c2:	61fb      	str	r3, [r7, #28]
 80108c4:	e023      	b.n	801090e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	4b15      	ldr	r3, [pc, #84]	; (8010920 <xTaskCheckForTimeOut+0xc0>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d007      	beq.n	80108e2 <xTaskCheckForTimeOut+0x82>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	69ba      	ldr	r2, [r7, #24]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d302      	bcc.n	80108e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108dc:	2301      	movs	r3, #1
 80108de:	61fb      	str	r3, [r7, #28]
 80108e0:	e015      	b.n	801090e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d20b      	bcs.n	8010904 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	681a      	ldr	r2, [r3, #0]
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	1ad2      	subs	r2, r2, r3
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff ff9b 	bl	8010834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80108fe:	2300      	movs	r3, #0
 8010900:	61fb      	str	r3, [r7, #28]
 8010902:	e004      	b.n	801090e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2200      	movs	r2, #0
 8010908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801090a:	2301      	movs	r3, #1
 801090c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801090e:	f001 f861 	bl	80119d4 <vPortExitCritical>

	return xReturn;
 8010912:	69fb      	ldr	r3, [r7, #28]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3720      	adds	r7, #32
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	2000259c 	.word	0x2000259c
 8010920:	200025b0 	.word	0x200025b0

08010924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010924:	b480      	push	{r7}
 8010926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010928:	4b03      	ldr	r3, [pc, #12]	; (8010938 <vTaskMissedYield+0x14>)
 801092a:	2201      	movs	r2, #1
 801092c:	601a      	str	r2, [r3, #0]
}
 801092e:	bf00      	nop
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr
 8010938:	200025ac 	.word	0x200025ac

0801093c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010944:	f000 f852 	bl	80109ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010948:	4b06      	ldr	r3, [pc, #24]	; (8010964 <prvIdleTask+0x28>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b01      	cmp	r3, #1
 801094e:	d9f9      	bls.n	8010944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010950:	4b05      	ldr	r3, [pc, #20]	; (8010968 <prvIdleTask+0x2c>)
 8010952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	f3bf 8f4f 	dsb	sy
 801095c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010960:	e7f0      	b.n	8010944 <prvIdleTask+0x8>
 8010962:	bf00      	nop
 8010964:	200020c8 	.word	0x200020c8
 8010968:	e000ed04 	.word	0xe000ed04

0801096c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010972:	2300      	movs	r3, #0
 8010974:	607b      	str	r3, [r7, #4]
 8010976:	e00c      	b.n	8010992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	4613      	mov	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4413      	add	r3, r2
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	4a12      	ldr	r2, [pc, #72]	; (80109cc <prvInitialiseTaskLists+0x60>)
 8010984:	4413      	add	r3, r2
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe fcf0 	bl	800f36c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	3301      	adds	r3, #1
 8010990:	607b      	str	r3, [r7, #4]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2b37      	cmp	r3, #55	; 0x37
 8010996:	d9ef      	bls.n	8010978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010998:	480d      	ldr	r0, [pc, #52]	; (80109d0 <prvInitialiseTaskLists+0x64>)
 801099a:	f7fe fce7 	bl	800f36c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801099e:	480d      	ldr	r0, [pc, #52]	; (80109d4 <prvInitialiseTaskLists+0x68>)
 80109a0:	f7fe fce4 	bl	800f36c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109a4:	480c      	ldr	r0, [pc, #48]	; (80109d8 <prvInitialiseTaskLists+0x6c>)
 80109a6:	f7fe fce1 	bl	800f36c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109aa:	480c      	ldr	r0, [pc, #48]	; (80109dc <prvInitialiseTaskLists+0x70>)
 80109ac:	f7fe fcde 	bl	800f36c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109b0:	480b      	ldr	r0, [pc, #44]	; (80109e0 <prvInitialiseTaskLists+0x74>)
 80109b2:	f7fe fcdb 	bl	800f36c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109b6:	4b0b      	ldr	r3, [pc, #44]	; (80109e4 <prvInitialiseTaskLists+0x78>)
 80109b8:	4a05      	ldr	r2, [pc, #20]	; (80109d0 <prvInitialiseTaskLists+0x64>)
 80109ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109bc:	4b0a      	ldr	r3, [pc, #40]	; (80109e8 <prvInitialiseTaskLists+0x7c>)
 80109be:	4a05      	ldr	r2, [pc, #20]	; (80109d4 <prvInitialiseTaskLists+0x68>)
 80109c0:	601a      	str	r2, [r3, #0]
}
 80109c2:	bf00      	nop
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	200020c8 	.word	0x200020c8
 80109d0:	20002528 	.word	0x20002528
 80109d4:	2000253c 	.word	0x2000253c
 80109d8:	20002558 	.word	0x20002558
 80109dc:	2000256c 	.word	0x2000256c
 80109e0:	20002584 	.word	0x20002584
 80109e4:	20002550 	.word	0x20002550
 80109e8:	20002554 	.word	0x20002554

080109ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109f2:	e019      	b.n	8010a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109f4:	f000 ffbe 	bl	8011974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109f8:	4b10      	ldr	r3, [pc, #64]	; (8010a3c <prvCheckTasksWaitingTermination+0x50>)
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3304      	adds	r3, #4
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fe fd3b 	bl	800f480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a0a:	4b0d      	ldr	r3, [pc, #52]	; (8010a40 <prvCheckTasksWaitingTermination+0x54>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	4a0b      	ldr	r2, [pc, #44]	; (8010a40 <prvCheckTasksWaitingTermination+0x54>)
 8010a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a14:	4b0b      	ldr	r3, [pc, #44]	; (8010a44 <prvCheckTasksWaitingTermination+0x58>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	4a0a      	ldr	r2, [pc, #40]	; (8010a44 <prvCheckTasksWaitingTermination+0x58>)
 8010a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a1e:	f000 ffd9 	bl	80119d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 f810 	bl	8010a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a28:	4b06      	ldr	r3, [pc, #24]	; (8010a44 <prvCheckTasksWaitingTermination+0x58>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1e1      	bne.n	80109f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a30:	bf00      	nop
 8010a32:	bf00      	nop
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	2000256c 	.word	0x2000256c
 8010a40:	20002598 	.word	0x20002598
 8010a44:	20002580 	.word	0x20002580

08010a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b084      	sub	sp, #16
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d108      	bne.n	8010a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f001 f976 	bl	8011d50 <vPortFree>
				vPortFree( pxTCB );
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f001 f973 	bl	8011d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a6a:	e018      	b.n	8010a9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d103      	bne.n	8010a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f001 f96a 	bl	8011d50 <vPortFree>
	}
 8010a7c:	e00f      	b.n	8010a9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	d00a      	beq.n	8010a9e <prvDeleteTCB+0x56>
	__asm volatile
 8010a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a8c:	f383 8811 	msr	BASEPRI, r3
 8010a90:	f3bf 8f6f 	isb	sy
 8010a94:	f3bf 8f4f 	dsb	sy
 8010a98:	60fb      	str	r3, [r7, #12]
}
 8010a9a:	bf00      	nop
 8010a9c:	e7fe      	b.n	8010a9c <prvDeleteTCB+0x54>
	}
 8010a9e:	bf00      	nop
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
	...

08010aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010aae:	4b0c      	ldr	r3, [pc, #48]	; (8010ae0 <prvResetNextTaskUnblockTime+0x38>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d104      	bne.n	8010ac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ab8:	4b0a      	ldr	r3, [pc, #40]	; (8010ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8010aba:	f04f 32ff 	mov.w	r2, #4294967295
 8010abe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ac0:	e008      	b.n	8010ad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ac2:	4b07      	ldr	r3, [pc, #28]	; (8010ae0 <prvResetNextTaskUnblockTime+0x38>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	4a04      	ldr	r2, [pc, #16]	; (8010ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8010ad2:	6013      	str	r3, [r2, #0]
}
 8010ad4:	bf00      	nop
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	20002550 	.word	0x20002550
 8010ae4:	200025b8 	.word	0x200025b8

08010ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010aee:	4b0b      	ldr	r3, [pc, #44]	; (8010b1c <xTaskGetSchedulerState+0x34>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d102      	bne.n	8010afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010af6:	2301      	movs	r3, #1
 8010af8:	607b      	str	r3, [r7, #4]
 8010afa:	e008      	b.n	8010b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010afc:	4b08      	ldr	r3, [pc, #32]	; (8010b20 <xTaskGetSchedulerState+0x38>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d102      	bne.n	8010b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b04:	2302      	movs	r3, #2
 8010b06:	607b      	str	r3, [r7, #4]
 8010b08:	e001      	b.n	8010b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b0e:	687b      	ldr	r3, [r7, #4]
	}
 8010b10:	4618      	mov	r0, r3
 8010b12:	370c      	adds	r7, #12
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr
 8010b1c:	200025a4 	.word	0x200025a4
 8010b20:	200025c0 	.word	0x200025c0

08010b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010b30:	2300      	movs	r3, #0
 8010b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d056      	beq.n	8010be8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010b3a:	4b2e      	ldr	r3, [pc, #184]	; (8010bf4 <xTaskPriorityDisinherit+0xd0>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d00a      	beq.n	8010b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	60fb      	str	r3, [r7, #12]
}
 8010b56:	bf00      	nop
 8010b58:	e7fe      	b.n	8010b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10a      	bne.n	8010b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b66:	f383 8811 	msr	BASEPRI, r3
 8010b6a:	f3bf 8f6f 	isb	sy
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	60bb      	str	r3, [r7, #8]
}
 8010b74:	bf00      	nop
 8010b76:	e7fe      	b.n	8010b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b7c:	1e5a      	subs	r2, r3, #1
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d02c      	beq.n	8010be8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d128      	bne.n	8010be8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	3304      	adds	r3, #4
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe fc70 	bl	800f480 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bb8:	4b0f      	ldr	r3, [pc, #60]	; (8010bf8 <xTaskPriorityDisinherit+0xd4>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d903      	bls.n	8010bc8 <xTaskPriorityDisinherit+0xa4>
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bc4:	4a0c      	ldr	r2, [pc, #48]	; (8010bf8 <xTaskPriorityDisinherit+0xd4>)
 8010bc6:	6013      	str	r3, [r2, #0]
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bcc:	4613      	mov	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	009b      	lsls	r3, r3, #2
 8010bd4:	4a09      	ldr	r2, [pc, #36]	; (8010bfc <xTaskPriorityDisinherit+0xd8>)
 8010bd6:	441a      	add	r2, r3
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	3304      	adds	r3, #4
 8010bdc:	4619      	mov	r1, r3
 8010bde:	4610      	mov	r0, r2
 8010be0:	f7fe fbf1 	bl	800f3c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010be4:	2301      	movs	r3, #1
 8010be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010be8:	697b      	ldr	r3, [r7, #20]
	}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3718      	adds	r7, #24
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	200020c4 	.word	0x200020c4
 8010bf8:	200025a0 	.word	0x200025a0
 8010bfc:	200020c8 	.word	0x200020c8

08010c00 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
 8010c0c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010c0e:	f000 feb1 	bl	8011974 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010c12:	4b26      	ldr	r3, [pc, #152]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b02      	cmp	r3, #2
 8010c1e:	d01a      	beq.n	8010c56 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010c20:	4b22      	ldr	r3, [pc, #136]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	43d2      	mvns	r2, r2
 8010c2a:	400a      	ands	r2, r1
 8010c2c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010c2e:	4b1f      	ldr	r3, [pc, #124]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00b      	beq.n	8010c56 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010c3e:	2101      	movs	r1, #1
 8010c40:	6838      	ldr	r0, [r7, #0]
 8010c42:	f000 f9cb 	bl	8010fdc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010c46:	4b1a      	ldr	r3, [pc, #104]	; (8010cb0 <xTaskNotifyWait+0xb0>)
 8010c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c4c:	601a      	str	r2, [r3, #0]
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010c56:	f000 febd 	bl	80119d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010c5a:	f000 fe8b 	bl	8011974 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d004      	beq.n	8010c6e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010c64:	4b11      	ldr	r3, [pc, #68]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010c6e:	4b0f      	ldr	r3, [pc, #60]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b02      	cmp	r3, #2
 8010c7a:	d002      	beq.n	8010c82 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	617b      	str	r3, [r7, #20]
 8010c80:	e008      	b.n	8010c94 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010c82:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	43d2      	mvns	r2, r2
 8010c8c:	400a      	ands	r2, r1
 8010c8e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8010c90:	2301      	movs	r3, #1
 8010c92:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c94:	4b05      	ldr	r3, [pc, #20]	; (8010cac <xTaskNotifyWait+0xac>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8010c9e:	f000 fe99 	bl	80119d4 <vPortExitCritical>

		return xReturn;
 8010ca2:	697b      	ldr	r3, [r7, #20]
	}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3718      	adds	r7, #24
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	200020c4 	.word	0x200020c4
 8010cb0:	e000ed04 	.word	0xe000ed04

08010cb4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b08a      	sub	sp, #40	; 0x28
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	603b      	str	r3, [r7, #0]
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d10a      	bne.n	8010ce4 <xTaskGenericNotify+0x30>
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	61bb      	str	r3, [r7, #24]
}
 8010ce0:	bf00      	nop
 8010ce2:	e7fe      	b.n	8010ce2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010ce8:	f000 fe44 	bl	8011974 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d003      	beq.n	8010cfa <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010d00:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010d02:	6a3b      	ldr	r3, [r7, #32]
 8010d04:	2202      	movs	r2, #2
 8010d06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010d0a:	79fb      	ldrb	r3, [r7, #7]
 8010d0c:	2b04      	cmp	r3, #4
 8010d0e:	d828      	bhi.n	8010d62 <xTaskGenericNotify+0xae>
 8010d10:	a201      	add	r2, pc, #4	; (adr r2, 8010d18 <xTaskGenericNotify+0x64>)
 8010d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d16:	bf00      	nop
 8010d18:	08010d83 	.word	0x08010d83
 8010d1c:	08010d2d 	.word	0x08010d2d
 8010d20:	08010d3b 	.word	0x08010d3b
 8010d24:	08010d47 	.word	0x08010d47
 8010d28:	08010d4f 	.word	0x08010d4f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	431a      	orrs	r2, r3
 8010d34:	6a3b      	ldr	r3, [r7, #32]
 8010d36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010d38:	e026      	b.n	8010d88 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	6a3b      	ldr	r3, [r7, #32]
 8010d42:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010d44:	e020      	b.n	8010d88 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010d46:	6a3b      	ldr	r3, [r7, #32]
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010d4c:	e01c      	b.n	8010d88 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010d4e:	7ffb      	ldrb	r3, [r7, #31]
 8010d50:	2b02      	cmp	r3, #2
 8010d52:	d003      	beq.n	8010d5c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010d5a:	e015      	b.n	8010d88 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010d60:	e012      	b.n	8010d88 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010d62:	6a3b      	ldr	r3, [r7, #32]
 8010d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6a:	d00c      	beq.n	8010d86 <xTaskGenericNotify+0xd2>
	__asm volatile
 8010d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d70:	f383 8811 	msr	BASEPRI, r3
 8010d74:	f3bf 8f6f 	isb	sy
 8010d78:	f3bf 8f4f 	dsb	sy
 8010d7c:	617b      	str	r3, [r7, #20]
}
 8010d7e:	bf00      	nop
 8010d80:	e7fe      	b.n	8010d80 <xTaskGenericNotify+0xcc>
					break;
 8010d82:	bf00      	nop
 8010d84:	e000      	b.n	8010d88 <xTaskGenericNotify+0xd4>

					break;
 8010d86:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010d88:	7ffb      	ldrb	r3, [r7, #31]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d13a      	bne.n	8010e04 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	3304      	adds	r3, #4
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe fb74 	bl	800f480 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d9c:	4b1d      	ldr	r3, [pc, #116]	; (8010e14 <xTaskGenericNotify+0x160>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d903      	bls.n	8010dac <xTaskGenericNotify+0xf8>
 8010da4:	6a3b      	ldr	r3, [r7, #32]
 8010da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da8:	4a1a      	ldr	r2, [pc, #104]	; (8010e14 <xTaskGenericNotify+0x160>)
 8010daa:	6013      	str	r3, [r2, #0]
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010db0:	4613      	mov	r3, r2
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	4413      	add	r3, r2
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	4a17      	ldr	r2, [pc, #92]	; (8010e18 <xTaskGenericNotify+0x164>)
 8010dba:	441a      	add	r2, r3
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	3304      	adds	r3, #4
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	4610      	mov	r0, r2
 8010dc4:	f7fe faff 	bl	800f3c6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00a      	beq.n	8010de6 <xTaskGenericNotify+0x132>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	613b      	str	r3, [r7, #16]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010de6:	6a3b      	ldr	r3, [r7, #32]
 8010de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dea:	4b0c      	ldr	r3, [pc, #48]	; (8010e1c <xTaskGenericNotify+0x168>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d907      	bls.n	8010e04 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010df4:	4b0a      	ldr	r3, [pc, #40]	; (8010e20 <xTaskGenericNotify+0x16c>)
 8010df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dfa:	601a      	str	r2, [r3, #0]
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010e04:	f000 fde6 	bl	80119d4 <vPortExitCritical>

		return xReturn;
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3728      	adds	r7, #40	; 0x28
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	200025a0 	.word	0x200025a0
 8010e18:	200020c8 	.word	0x200020c8
 8010e1c:	200020c4 	.word	0x200020c4
 8010e20:	e000ed04 	.word	0xe000ed04

08010e24 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b08e      	sub	sp, #56	; 0x38
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	603b      	str	r3, [r7, #0]
 8010e30:	4613      	mov	r3, r2
 8010e32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010e34:	2301      	movs	r3, #1
 8010e36:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d10a      	bne.n	8010e54 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8010e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e42:	f383 8811 	msr	BASEPRI, r3
 8010e46:	f3bf 8f6f 	isb	sy
 8010e4a:	f3bf 8f4f 	dsb	sy
 8010e4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010e50:	bf00      	nop
 8010e52:	e7fe      	b.n	8010e52 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e54:	f000 fe70 	bl	8011b38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8010e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	623a      	str	r2, [r7, #32]
 8010e72:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010e74:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e76:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d003      	beq.n	8010e86 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e92:	2202      	movs	r2, #2
 8010e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010e98:	79fb      	ldrb	r3, [r7, #7]
 8010e9a:	2b04      	cmp	r3, #4
 8010e9c:	d828      	bhi.n	8010ef0 <xTaskGenericNotifyFromISR+0xcc>
 8010e9e:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <xTaskGenericNotifyFromISR+0x80>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010f11 	.word	0x08010f11
 8010ea8:	08010eb9 	.word	0x08010eb9
 8010eac:	08010ec7 	.word	0x08010ec7
 8010eb0:	08010ed3 	.word	0x08010ed3
 8010eb4:	08010edb 	.word	0x08010edb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	431a      	orrs	r2, r3
 8010ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010ec4:	e027      	b.n	8010f16 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010ed0:	e021      	b.n	8010f16 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010ed8:	e01d      	b.n	8010f16 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d003      	beq.n	8010eea <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010ee8:	e015      	b.n	8010f16 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8010eea:	2300      	movs	r3, #0
 8010eec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010eee:	e012      	b.n	8010f16 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ef8:	d00c      	beq.n	8010f14 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8010efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efe:	f383 8811 	msr	BASEPRI, r3
 8010f02:	f3bf 8f6f 	isb	sy
 8010f06:	f3bf 8f4f 	dsb	sy
 8010f0a:	61bb      	str	r3, [r7, #24]
}
 8010f0c:	bf00      	nop
 8010f0e:	e7fe      	b.n	8010f0e <xTaskGenericNotifyFromISR+0xea>
					break;
 8010f10:	bf00      	nop
 8010f12:	e000      	b.n	8010f16 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8010f14:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010f16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d146      	bne.n	8010fac <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00a      	beq.n	8010f3c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8010f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2a:	f383 8811 	msr	BASEPRI, r3
 8010f2e:	f3bf 8f6f 	isb	sy
 8010f32:	f3bf 8f4f 	dsb	sy
 8010f36:	617b      	str	r3, [r7, #20]
}
 8010f38:	bf00      	nop
 8010f3a:	e7fe      	b.n	8010f3a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f3c:	4b21      	ldr	r3, [pc, #132]	; (8010fc4 <xTaskGenericNotifyFromISR+0x1a0>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d11d      	bne.n	8010f80 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f46:	3304      	adds	r3, #4
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fe fa99 	bl	800f480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f52:	4b1d      	ldr	r3, [pc, #116]	; (8010fc8 <xTaskGenericNotifyFromISR+0x1a4>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d903      	bls.n	8010f62 <xTaskGenericNotifyFromISR+0x13e>
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5e:	4a1a      	ldr	r2, [pc, #104]	; (8010fc8 <xTaskGenericNotifyFromISR+0x1a4>)
 8010f60:	6013      	str	r3, [r2, #0]
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f66:	4613      	mov	r3, r2
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	4a17      	ldr	r2, [pc, #92]	; (8010fcc <xTaskGenericNotifyFromISR+0x1a8>)
 8010f70:	441a      	add	r2, r3
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	3304      	adds	r3, #4
 8010f76:	4619      	mov	r1, r3
 8010f78:	4610      	mov	r0, r2
 8010f7a:	f7fe fa24 	bl	800f3c6 <vListInsertEnd>
 8010f7e:	e005      	b.n	8010f8c <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f82:	3318      	adds	r3, #24
 8010f84:	4619      	mov	r1, r3
 8010f86:	4812      	ldr	r0, [pc, #72]	; (8010fd0 <xTaskGenericNotifyFromISR+0x1ac>)
 8010f88:	f7fe fa1d 	bl	800f3c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f90:	4b10      	ldr	r3, [pc, #64]	; (8010fd4 <xTaskGenericNotifyFromISR+0x1b0>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d908      	bls.n	8010fac <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010fa6:	4b0c      	ldr	r3, [pc, #48]	; (8010fd8 <xTaskGenericNotifyFromISR+0x1b4>)
 8010fa8:	2201      	movs	r2, #1
 8010faa:	601a      	str	r2, [r3, #0]
 8010fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fae:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	f383 8811 	msr	BASEPRI, r3
}
 8010fb6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3738      	adds	r7, #56	; 0x38
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	200025c0 	.word	0x200025c0
 8010fc8:	200025a0 	.word	0x200025a0
 8010fcc:	200020c8 	.word	0x200020c8
 8010fd0:	20002558 	.word	0x20002558
 8010fd4:	200020c4 	.word	0x200020c4
 8010fd8:	200025ac 	.word	0x200025ac

08010fdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010fe6:	4b21      	ldr	r3, [pc, #132]	; (801106c <prvAddCurrentTaskToDelayedList+0x90>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fec:	4b20      	ldr	r3, [pc, #128]	; (8011070 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fe fa44 	bl	800f480 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffe:	d10a      	bne.n	8011016 <prvAddCurrentTaskToDelayedList+0x3a>
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d007      	beq.n	8011016 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011006:	4b1a      	ldr	r3, [pc, #104]	; (8011070 <prvAddCurrentTaskToDelayedList+0x94>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3304      	adds	r3, #4
 801100c:	4619      	mov	r1, r3
 801100e:	4819      	ldr	r0, [pc, #100]	; (8011074 <prvAddCurrentTaskToDelayedList+0x98>)
 8011010:	f7fe f9d9 	bl	800f3c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011014:	e026      	b.n	8011064 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	4413      	add	r3, r2
 801101c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801101e:	4b14      	ldr	r3, [pc, #80]	; (8011070 <prvAddCurrentTaskToDelayedList+0x94>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011026:	68ba      	ldr	r2, [r7, #8]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	429a      	cmp	r2, r3
 801102c:	d209      	bcs.n	8011042 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801102e:	4b12      	ldr	r3, [pc, #72]	; (8011078 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	4b0f      	ldr	r3, [pc, #60]	; (8011070 <prvAddCurrentTaskToDelayedList+0x94>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	3304      	adds	r3, #4
 8011038:	4619      	mov	r1, r3
 801103a:	4610      	mov	r0, r2
 801103c:	f7fe f9e7 	bl	800f40e <vListInsert>
}
 8011040:	e010      	b.n	8011064 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011042:	4b0e      	ldr	r3, [pc, #56]	; (801107c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <prvAddCurrentTaskToDelayedList+0x94>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	3304      	adds	r3, #4
 801104c:	4619      	mov	r1, r3
 801104e:	4610      	mov	r0, r2
 8011050:	f7fe f9dd 	bl	800f40e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011054:	4b0a      	ldr	r3, [pc, #40]	; (8011080 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	429a      	cmp	r2, r3
 801105c:	d202      	bcs.n	8011064 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801105e:	4a08      	ldr	r2, [pc, #32]	; (8011080 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	6013      	str	r3, [r2, #0]
}
 8011064:	bf00      	nop
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	2000259c 	.word	0x2000259c
 8011070:	200020c4 	.word	0x200020c4
 8011074:	20002584 	.word	0x20002584
 8011078:	20002554 	.word	0x20002554
 801107c:	20002550 	.word	0x20002550
 8011080:	200025b8 	.word	0x200025b8

08011084 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b08a      	sub	sp, #40	; 0x28
 8011088:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801108a:	2300      	movs	r3, #0
 801108c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801108e:	f000 fb07 	bl	80116a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011092:	4b1c      	ldr	r3, [pc, #112]	; (8011104 <xTimerCreateTimerTask+0x80>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d021      	beq.n	80110de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801109a:	2300      	movs	r3, #0
 801109c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801109e:	2300      	movs	r3, #0
 80110a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80110a2:	1d3a      	adds	r2, r7, #4
 80110a4:	f107 0108 	add.w	r1, r7, #8
 80110a8:	f107 030c 	add.w	r3, r7, #12
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fe f943 	bl	800f338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80110b2:	6879      	ldr	r1, [r7, #4]
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	9202      	str	r2, [sp, #8]
 80110ba:	9301      	str	r3, [sp, #4]
 80110bc:	2302      	movs	r3, #2
 80110be:	9300      	str	r3, [sp, #0]
 80110c0:	2300      	movs	r3, #0
 80110c2:	460a      	mov	r2, r1
 80110c4:	4910      	ldr	r1, [pc, #64]	; (8011108 <xTimerCreateTimerTask+0x84>)
 80110c6:	4811      	ldr	r0, [pc, #68]	; (801110c <xTimerCreateTimerTask+0x88>)
 80110c8:	f7fe fef0 	bl	800feac <xTaskCreateStatic>
 80110cc:	4603      	mov	r3, r0
 80110ce:	4a10      	ldr	r2, [pc, #64]	; (8011110 <xTimerCreateTimerTask+0x8c>)
 80110d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80110d2:	4b0f      	ldr	r3, [pc, #60]	; (8011110 <xTimerCreateTimerTask+0x8c>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80110da:	2301      	movs	r3, #1
 80110dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d10a      	bne.n	80110fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80110e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	613b      	str	r3, [r7, #16]
}
 80110f6:	bf00      	nop
 80110f8:	e7fe      	b.n	80110f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80110fa:	697b      	ldr	r3, [r7, #20]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3718      	adds	r7, #24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	200025f4 	.word	0x200025f4
 8011108:	08017f60 	.word	0x08017f60
 801110c:	08011249 	.word	0x08011249
 8011110:	200025f8 	.word	0x200025f8

08011114 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b08a      	sub	sp, #40	; 0x28
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
 8011120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011122:	2300      	movs	r3, #0
 8011124:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d10a      	bne.n	8011142 <xTimerGenericCommand+0x2e>
	__asm volatile
 801112c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011130:	f383 8811 	msr	BASEPRI, r3
 8011134:	f3bf 8f6f 	isb	sy
 8011138:	f3bf 8f4f 	dsb	sy
 801113c:	623b      	str	r3, [r7, #32]
}
 801113e:	bf00      	nop
 8011140:	e7fe      	b.n	8011140 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011142:	4b1a      	ldr	r3, [pc, #104]	; (80111ac <xTimerGenericCommand+0x98>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d02a      	beq.n	80111a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	2b05      	cmp	r3, #5
 801115a:	dc18      	bgt.n	801118e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801115c:	f7ff fcc4 	bl	8010ae8 <xTaskGetSchedulerState>
 8011160:	4603      	mov	r3, r0
 8011162:	2b02      	cmp	r3, #2
 8011164:	d109      	bne.n	801117a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011166:	4b11      	ldr	r3, [pc, #68]	; (80111ac <xTimerGenericCommand+0x98>)
 8011168:	6818      	ldr	r0, [r3, #0]
 801116a:	f107 0110 	add.w	r1, r7, #16
 801116e:	2300      	movs	r3, #0
 8011170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011172:	f7fe fab3 	bl	800f6dc <xQueueGenericSend>
 8011176:	6278      	str	r0, [r7, #36]	; 0x24
 8011178:	e012      	b.n	80111a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801117a:	4b0c      	ldr	r3, [pc, #48]	; (80111ac <xTimerGenericCommand+0x98>)
 801117c:	6818      	ldr	r0, [r3, #0]
 801117e:	f107 0110 	add.w	r1, r7, #16
 8011182:	2300      	movs	r3, #0
 8011184:	2200      	movs	r2, #0
 8011186:	f7fe faa9 	bl	800f6dc <xQueueGenericSend>
 801118a:	6278      	str	r0, [r7, #36]	; 0x24
 801118c:	e008      	b.n	80111a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801118e:	4b07      	ldr	r3, [pc, #28]	; (80111ac <xTimerGenericCommand+0x98>)
 8011190:	6818      	ldr	r0, [r3, #0]
 8011192:	f107 0110 	add.w	r1, r7, #16
 8011196:	2300      	movs	r3, #0
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	f7fe fb9d 	bl	800f8d8 <xQueueGenericSendFromISR>
 801119e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3728      	adds	r7, #40	; 0x28
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	200025f4 	.word	0x200025f4

080111b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b088      	sub	sp, #32
 80111b4:	af02      	add	r7, sp, #8
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ba:	4b22      	ldr	r3, [pc, #136]	; (8011244 <prvProcessExpiredTimer+0x94>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	3304      	adds	r3, #4
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fe f959 	bl	800f480 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111d4:	f003 0304 	and.w	r3, r3, #4
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d022      	beq.n	8011222 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	699a      	ldr	r2, [r3, #24]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	18d1      	adds	r1, r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	6978      	ldr	r0, [r7, #20]
 80111ea:	f000 f8d1 	bl	8011390 <prvInsertTimerInActiveList>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d01f      	beq.n	8011234 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80111f4:	2300      	movs	r3, #0
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	2300      	movs	r3, #0
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	2100      	movs	r1, #0
 80111fe:	6978      	ldr	r0, [r7, #20]
 8011200:	f7ff ff88 	bl	8011114 <xTimerGenericCommand>
 8011204:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d113      	bne.n	8011234 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801120c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011210:	f383 8811 	msr	BASEPRI, r3
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	60fb      	str	r3, [r7, #12]
}
 801121e:	bf00      	nop
 8011220:	e7fe      	b.n	8011220 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011228:	f023 0301 	bic.w	r3, r3, #1
 801122c:	b2da      	uxtb	r2, r3
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	6a1b      	ldr	r3, [r3, #32]
 8011238:	6978      	ldr	r0, [r7, #20]
 801123a:	4798      	blx	r3
}
 801123c:	bf00      	nop
 801123e:	3718      	adds	r7, #24
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	200025ec 	.word	0x200025ec

08011248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011250:	f107 0308 	add.w	r3, r7, #8
 8011254:	4618      	mov	r0, r3
 8011256:	f000 f857 	bl	8011308 <prvGetNextExpireTime>
 801125a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	4619      	mov	r1, r3
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f000 f803 	bl	801126c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011266:	f000 f8d5 	bl	8011414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801126a:	e7f1      	b.n	8011250 <prvTimerTask+0x8>

0801126c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011276:	f7ff f855 	bl	8010324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801127a:	f107 0308 	add.w	r3, r7, #8
 801127e:	4618      	mov	r0, r3
 8011280:	f000 f866 	bl	8011350 <prvSampleTimeNow>
 8011284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d130      	bne.n	80112ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10a      	bne.n	80112a8 <prvProcessTimerOrBlockTask+0x3c>
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	429a      	cmp	r2, r3
 8011298:	d806      	bhi.n	80112a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801129a:	f7ff f851 	bl	8010340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801129e:	68f9      	ldr	r1, [r7, #12]
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f7ff ff85 	bl	80111b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80112a6:	e024      	b.n	80112f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d008      	beq.n	80112c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80112ae:	4b13      	ldr	r3, [pc, #76]	; (80112fc <prvProcessTimerOrBlockTask+0x90>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d101      	bne.n	80112bc <prvProcessTimerOrBlockTask+0x50>
 80112b8:	2301      	movs	r3, #1
 80112ba:	e000      	b.n	80112be <prvProcessTimerOrBlockTask+0x52>
 80112bc:	2300      	movs	r3, #0
 80112be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80112c0:	4b0f      	ldr	r3, [pc, #60]	; (8011300 <prvProcessTimerOrBlockTask+0x94>)
 80112c2:	6818      	ldr	r0, [r3, #0]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	4619      	mov	r1, r3
 80112ce:	f7fe fdb9 	bl	800fe44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80112d2:	f7ff f835 	bl	8010340 <xTaskResumeAll>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10a      	bne.n	80112f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80112dc:	4b09      	ldr	r3, [pc, #36]	; (8011304 <prvProcessTimerOrBlockTask+0x98>)
 80112de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112e2:	601a      	str	r2, [r3, #0]
 80112e4:	f3bf 8f4f 	dsb	sy
 80112e8:	f3bf 8f6f 	isb	sy
}
 80112ec:	e001      	b.n	80112f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80112ee:	f7ff f827 	bl	8010340 <xTaskResumeAll>
}
 80112f2:	bf00      	nop
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	200025f0 	.word	0x200025f0
 8011300:	200025f4 	.word	0x200025f4
 8011304:	e000ed04 	.word	0xe000ed04

08011308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011310:	4b0e      	ldr	r3, [pc, #56]	; (801134c <prvGetNextExpireTime+0x44>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d101      	bne.n	801131e <prvGetNextExpireTime+0x16>
 801131a:	2201      	movs	r2, #1
 801131c:	e000      	b.n	8011320 <prvGetNextExpireTime+0x18>
 801131e:	2200      	movs	r2, #0
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d105      	bne.n	8011338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801132c:	4b07      	ldr	r3, [pc, #28]	; (801134c <prvGetNextExpireTime+0x44>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	60fb      	str	r3, [r7, #12]
 8011336:	e001      	b.n	801133c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011338:	2300      	movs	r3, #0
 801133a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801133c:	68fb      	ldr	r3, [r7, #12]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3714      	adds	r7, #20
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop
 801134c:	200025ec 	.word	0x200025ec

08011350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011358:	f7ff f890 	bl	801047c <xTaskGetTickCount>
 801135c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801135e:	4b0b      	ldr	r3, [pc, #44]	; (801138c <prvSampleTimeNow+0x3c>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	429a      	cmp	r2, r3
 8011366:	d205      	bcs.n	8011374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011368:	f000 f936 	bl	80115d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2201      	movs	r2, #1
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	e002      	b.n	801137a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2200      	movs	r2, #0
 8011378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801137a:	4a04      	ldr	r2, [pc, #16]	; (801138c <prvSampleTimeNow+0x3c>)
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011380:	68fb      	ldr	r3, [r7, #12]
}
 8011382:	4618      	mov	r0, r3
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	200025fc 	.word	0x200025fc

08011390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b086      	sub	sp, #24
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	607a      	str	r2, [r7, #4]
 801139c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801139e:	2300      	movs	r3, #0
 80113a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	68ba      	ldr	r2, [r7, #8]
 80113a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80113ae:	68ba      	ldr	r2, [r7, #8]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d812      	bhi.n	80113dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	1ad2      	subs	r2, r2, r3
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	699b      	ldr	r3, [r3, #24]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d302      	bcc.n	80113ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80113c4:	2301      	movs	r3, #1
 80113c6:	617b      	str	r3, [r7, #20]
 80113c8:	e01b      	b.n	8011402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80113ca:	4b10      	ldr	r3, [pc, #64]	; (801140c <prvInsertTimerInActiveList+0x7c>)
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	3304      	adds	r3, #4
 80113d2:	4619      	mov	r1, r3
 80113d4:	4610      	mov	r0, r2
 80113d6:	f7fe f81a 	bl	800f40e <vListInsert>
 80113da:	e012      	b.n	8011402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d206      	bcs.n	80113f2 <prvInsertTimerInActiveList+0x62>
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d302      	bcc.n	80113f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80113ec:	2301      	movs	r3, #1
 80113ee:	617b      	str	r3, [r7, #20]
 80113f0:	e007      	b.n	8011402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80113f2:	4b07      	ldr	r3, [pc, #28]	; (8011410 <prvInsertTimerInActiveList+0x80>)
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	3304      	adds	r3, #4
 80113fa:	4619      	mov	r1, r3
 80113fc:	4610      	mov	r0, r2
 80113fe:	f7fe f806 	bl	800f40e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011402:	697b      	ldr	r3, [r7, #20]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3718      	adds	r7, #24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	200025f0 	.word	0x200025f0
 8011410:	200025ec 	.word	0x200025ec

08011414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b08e      	sub	sp, #56	; 0x38
 8011418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801141a:	e0ca      	b.n	80115b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	da18      	bge.n	8011454 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011422:	1d3b      	adds	r3, r7, #4
 8011424:	3304      	adds	r3, #4
 8011426:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10a      	bne.n	8011444 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	61fb      	str	r3, [r7, #28]
}
 8011440:	bf00      	nop
 8011442:	e7fe      	b.n	8011442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801144a:	6850      	ldr	r0, [r2, #4]
 801144c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801144e:	6892      	ldr	r2, [r2, #8]
 8011450:	4611      	mov	r1, r2
 8011452:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	f2c0 80ab 	blt.w	80115b2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011462:	695b      	ldr	r3, [r3, #20]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d004      	beq.n	8011472 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146a:	3304      	adds	r3, #4
 801146c:	4618      	mov	r0, r3
 801146e:	f7fe f807 	bl	800f480 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011472:	463b      	mov	r3, r7
 8011474:	4618      	mov	r0, r3
 8011476:	f7ff ff6b 	bl	8011350 <prvSampleTimeNow>
 801147a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b09      	cmp	r3, #9
 8011480:	f200 8096 	bhi.w	80115b0 <prvProcessReceivedCommands+0x19c>
 8011484:	a201      	add	r2, pc, #4	; (adr r2, 801148c <prvProcessReceivedCommands+0x78>)
 8011486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148a:	bf00      	nop
 801148c:	080114b5 	.word	0x080114b5
 8011490:	080114b5 	.word	0x080114b5
 8011494:	080114b5 	.word	0x080114b5
 8011498:	08011529 	.word	0x08011529
 801149c:	0801153d 	.word	0x0801153d
 80114a0:	08011587 	.word	0x08011587
 80114a4:	080114b5 	.word	0x080114b5
 80114a8:	080114b5 	.word	0x080114b5
 80114ac:	08011529 	.word	0x08011529
 80114b0:	0801153d 	.word	0x0801153d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114ba:	f043 0301 	orr.w	r3, r3, #1
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ca:	699b      	ldr	r3, [r3, #24]
 80114cc:	18d1      	adds	r1, r2, r3
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114d4:	f7ff ff5c 	bl	8011390 <prvInsertTimerInActiveList>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d069      	beq.n	80115b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e0:	6a1b      	ldr	r3, [r3, #32]
 80114e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80114e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114ec:	f003 0304 	and.w	r3, r3, #4
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d05e      	beq.n	80115b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f8:	699b      	ldr	r3, [r3, #24]
 80114fa:	441a      	add	r2, r3
 80114fc:	2300      	movs	r3, #0
 80114fe:	9300      	str	r3, [sp, #0]
 8011500:	2300      	movs	r3, #0
 8011502:	2100      	movs	r1, #0
 8011504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011506:	f7ff fe05 	bl	8011114 <xTimerGenericCommand>
 801150a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801150c:	6a3b      	ldr	r3, [r7, #32]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d14f      	bne.n	80115b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011516:	f383 8811 	msr	BASEPRI, r3
 801151a:	f3bf 8f6f 	isb	sy
 801151e:	f3bf 8f4f 	dsb	sy
 8011522:	61bb      	str	r3, [r7, #24]
}
 8011524:	bf00      	nop
 8011526:	e7fe      	b.n	8011526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801152e:	f023 0301 	bic.w	r3, r3, #1
 8011532:	b2da      	uxtb	r2, r3
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801153a:	e03a      	b.n	80115b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011542:	f043 0301 	orr.w	r3, r3, #1
 8011546:	b2da      	uxtb	r2, r3
 8011548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	699b      	ldr	r3, [r3, #24]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10a      	bne.n	8011572 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011560:	f383 8811 	msr	BASEPRI, r3
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	f3bf 8f4f 	dsb	sy
 801156c:	617b      	str	r3, [r7, #20]
}
 801156e:	bf00      	nop
 8011570:	e7fe      	b.n	8011570 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011574:	699a      	ldr	r2, [r3, #24]
 8011576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011578:	18d1      	adds	r1, r2, r3
 801157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801157e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011580:	f7ff ff06 	bl	8011390 <prvInsertTimerInActiveList>
					break;
 8011584:	e015      	b.n	80115b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801158c:	f003 0302 	and.w	r3, r3, #2
 8011590:	2b00      	cmp	r3, #0
 8011592:	d103      	bne.n	801159c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011596:	f000 fbdb 	bl	8011d50 <vPortFree>
 801159a:	e00a      	b.n	80115b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115a2:	f023 0301 	bic.w	r3, r3, #1
 80115a6:	b2da      	uxtb	r2, r3
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80115ae:	e000      	b.n	80115b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80115b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80115b2:	4b08      	ldr	r3, [pc, #32]	; (80115d4 <prvProcessReceivedCommands+0x1c0>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	1d39      	adds	r1, r7, #4
 80115b8:	2200      	movs	r2, #0
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fe fa28 	bl	800fa10 <xQueueReceive>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f47f af2a 	bne.w	801141c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80115c8:	bf00      	nop
 80115ca:	bf00      	nop
 80115cc:	3730      	adds	r7, #48	; 0x30
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	200025f4 	.word	0x200025f4

080115d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b088      	sub	sp, #32
 80115dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80115de:	e048      	b.n	8011672 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115e0:	4b2d      	ldr	r3, [pc, #180]	; (8011698 <prvSwitchTimerLists+0xc0>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115ea:	4b2b      	ldr	r3, [pc, #172]	; (8011698 <prvSwitchTimerLists+0xc0>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	3304      	adds	r3, #4
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fd ff41 	bl	800f480 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6a1b      	ldr	r3, [r3, #32]
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801160c:	f003 0304 	and.w	r3, r3, #4
 8011610:	2b00      	cmp	r3, #0
 8011612:	d02e      	beq.n	8011672 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	693a      	ldr	r2, [r7, #16]
 801161a:	4413      	add	r3, r2
 801161c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801161e:	68ba      	ldr	r2, [r7, #8]
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	429a      	cmp	r2, r3
 8011624:	d90e      	bls.n	8011644 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011632:	4b19      	ldr	r3, [pc, #100]	; (8011698 <prvSwitchTimerLists+0xc0>)
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	3304      	adds	r3, #4
 801163a:	4619      	mov	r1, r3
 801163c:	4610      	mov	r0, r2
 801163e:	f7fd fee6 	bl	800f40e <vListInsert>
 8011642:	e016      	b.n	8011672 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011644:	2300      	movs	r3, #0
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	2300      	movs	r3, #0
 801164a:	693a      	ldr	r2, [r7, #16]
 801164c:	2100      	movs	r1, #0
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f7ff fd60 	bl	8011114 <xTimerGenericCommand>
 8011654:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10a      	bne.n	8011672 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	f383 8811 	msr	BASEPRI, r3
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	603b      	str	r3, [r7, #0]
}
 801166e:	bf00      	nop
 8011670:	e7fe      	b.n	8011670 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011672:	4b09      	ldr	r3, [pc, #36]	; (8011698 <prvSwitchTimerLists+0xc0>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1b1      	bne.n	80115e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801167c:	4b06      	ldr	r3, [pc, #24]	; (8011698 <prvSwitchTimerLists+0xc0>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011682:	4b06      	ldr	r3, [pc, #24]	; (801169c <prvSwitchTimerLists+0xc4>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4a04      	ldr	r2, [pc, #16]	; (8011698 <prvSwitchTimerLists+0xc0>)
 8011688:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801168a:	4a04      	ldr	r2, [pc, #16]	; (801169c <prvSwitchTimerLists+0xc4>)
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	6013      	str	r3, [r2, #0]
}
 8011690:	bf00      	nop
 8011692:	3718      	adds	r7, #24
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	200025ec 	.word	0x200025ec
 801169c:	200025f0 	.word	0x200025f0

080116a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b082      	sub	sp, #8
 80116a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80116a6:	f000 f965 	bl	8011974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80116aa:	4b15      	ldr	r3, [pc, #84]	; (8011700 <prvCheckForValidListAndQueue+0x60>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d120      	bne.n	80116f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80116b2:	4814      	ldr	r0, [pc, #80]	; (8011704 <prvCheckForValidListAndQueue+0x64>)
 80116b4:	f7fd fe5a 	bl	800f36c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80116b8:	4813      	ldr	r0, [pc, #76]	; (8011708 <prvCheckForValidListAndQueue+0x68>)
 80116ba:	f7fd fe57 	bl	800f36c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80116be:	4b13      	ldr	r3, [pc, #76]	; (801170c <prvCheckForValidListAndQueue+0x6c>)
 80116c0:	4a10      	ldr	r2, [pc, #64]	; (8011704 <prvCheckForValidListAndQueue+0x64>)
 80116c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80116c4:	4b12      	ldr	r3, [pc, #72]	; (8011710 <prvCheckForValidListAndQueue+0x70>)
 80116c6:	4a10      	ldr	r2, [pc, #64]	; (8011708 <prvCheckForValidListAndQueue+0x68>)
 80116c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80116ca:	2300      	movs	r3, #0
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	4b11      	ldr	r3, [pc, #68]	; (8011714 <prvCheckForValidListAndQueue+0x74>)
 80116d0:	4a11      	ldr	r2, [pc, #68]	; (8011718 <prvCheckForValidListAndQueue+0x78>)
 80116d2:	2110      	movs	r1, #16
 80116d4:	200a      	movs	r0, #10
 80116d6:	f7fd ff65 	bl	800f5a4 <xQueueGenericCreateStatic>
 80116da:	4603      	mov	r3, r0
 80116dc:	4a08      	ldr	r2, [pc, #32]	; (8011700 <prvCheckForValidListAndQueue+0x60>)
 80116de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80116e0:	4b07      	ldr	r3, [pc, #28]	; (8011700 <prvCheckForValidListAndQueue+0x60>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80116e8:	4b05      	ldr	r3, [pc, #20]	; (8011700 <prvCheckForValidListAndQueue+0x60>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	490b      	ldr	r1, [pc, #44]	; (801171c <prvCheckForValidListAndQueue+0x7c>)
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fe fb7e 	bl	800fdf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116f4:	f000 f96e 	bl	80119d4 <vPortExitCritical>
}
 80116f8:	bf00      	nop
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	200025f4 	.word	0x200025f4
 8011704:	200025c4 	.word	0x200025c4
 8011708:	200025d8 	.word	0x200025d8
 801170c:	200025ec 	.word	0x200025ec
 8011710:	200025f0 	.word	0x200025f0
 8011714:	200026a0 	.word	0x200026a0
 8011718:	20002600 	.word	0x20002600
 801171c:	08017f68 	.word	0x08017f68

08011720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011720:	b480      	push	{r7}
 8011722:	b085      	sub	sp, #20
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	3b04      	subs	r3, #4
 8011730:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3b04      	subs	r3, #4
 801173e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	f023 0201 	bic.w	r2, r3, #1
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3b04      	subs	r3, #4
 801174e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011750:	4a0c      	ldr	r2, [pc, #48]	; (8011784 <pxPortInitialiseStack+0x64>)
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	3b14      	subs	r3, #20
 801175a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	3b04      	subs	r3, #4
 8011766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f06f 0202 	mvn.w	r2, #2
 801176e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	3b20      	subs	r3, #32
 8011774:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011776:	68fb      	ldr	r3, [r7, #12]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3714      	adds	r7, #20
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	08011789 	.word	0x08011789

08011788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801178e:	2300      	movs	r3, #0
 8011790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011792:	4b12      	ldr	r3, [pc, #72]	; (80117dc <prvTaskExitError+0x54>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801179a:	d00a      	beq.n	80117b2 <prvTaskExitError+0x2a>
	__asm volatile
 801179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	60fb      	str	r3, [r7, #12]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <prvTaskExitError+0x28>
	__asm volatile
 80117b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	60bb      	str	r3, [r7, #8]
}
 80117c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80117c6:	bf00      	nop
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d0fc      	beq.n	80117c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80117ce:	bf00      	nop
 80117d0:	bf00      	nop
 80117d2:	3714      	adds	r7, #20
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	20000114 	.word	0x20000114

080117e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80117e0:	4b07      	ldr	r3, [pc, #28]	; (8011800 <pxCurrentTCBConst2>)
 80117e2:	6819      	ldr	r1, [r3, #0]
 80117e4:	6808      	ldr	r0, [r1, #0]
 80117e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ea:	f380 8809 	msr	PSP, r0
 80117ee:	f3bf 8f6f 	isb	sy
 80117f2:	f04f 0000 	mov.w	r0, #0
 80117f6:	f380 8811 	msr	BASEPRI, r0
 80117fa:	4770      	bx	lr
 80117fc:	f3af 8000 	nop.w

08011800 <pxCurrentTCBConst2>:
 8011800:	200020c4 	.word	0x200020c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011804:	bf00      	nop
 8011806:	bf00      	nop

08011808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011808:	4808      	ldr	r0, [pc, #32]	; (801182c <prvPortStartFirstTask+0x24>)
 801180a:	6800      	ldr	r0, [r0, #0]
 801180c:	6800      	ldr	r0, [r0, #0]
 801180e:	f380 8808 	msr	MSP, r0
 8011812:	f04f 0000 	mov.w	r0, #0
 8011816:	f380 8814 	msr	CONTROL, r0
 801181a:	b662      	cpsie	i
 801181c:	b661      	cpsie	f
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	f3bf 8f6f 	isb	sy
 8011826:	df00      	svc	0
 8011828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801182a:	bf00      	nop
 801182c:	e000ed08 	.word	0xe000ed08

08011830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b086      	sub	sp, #24
 8011834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011836:	4b46      	ldr	r3, [pc, #280]	; (8011950 <xPortStartScheduler+0x120>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a46      	ldr	r2, [pc, #280]	; (8011954 <xPortStartScheduler+0x124>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d10a      	bne.n	8011856 <xPortStartScheduler+0x26>
	__asm volatile
 8011840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	613b      	str	r3, [r7, #16]
}
 8011852:	bf00      	nop
 8011854:	e7fe      	b.n	8011854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011856:	4b3e      	ldr	r3, [pc, #248]	; (8011950 <xPortStartScheduler+0x120>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	4a3f      	ldr	r2, [pc, #252]	; (8011958 <xPortStartScheduler+0x128>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d10a      	bne.n	8011876 <xPortStartScheduler+0x46>
	__asm volatile
 8011860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011864:	f383 8811 	msr	BASEPRI, r3
 8011868:	f3bf 8f6f 	isb	sy
 801186c:	f3bf 8f4f 	dsb	sy
 8011870:	60fb      	str	r3, [r7, #12]
}
 8011872:	bf00      	nop
 8011874:	e7fe      	b.n	8011874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011876:	4b39      	ldr	r3, [pc, #228]	; (801195c <xPortStartScheduler+0x12c>)
 8011878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	b2db      	uxtb	r3, r3
 8011880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	22ff      	movs	r2, #255	; 0xff
 8011886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	b2db      	uxtb	r3, r3
 801188e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011890:	78fb      	ldrb	r3, [r7, #3]
 8011892:	b2db      	uxtb	r3, r3
 8011894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011898:	b2da      	uxtb	r2, r3
 801189a:	4b31      	ldr	r3, [pc, #196]	; (8011960 <xPortStartScheduler+0x130>)
 801189c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801189e:	4b31      	ldr	r3, [pc, #196]	; (8011964 <xPortStartScheduler+0x134>)
 80118a0:	2207      	movs	r2, #7
 80118a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118a4:	e009      	b.n	80118ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80118a6:	4b2f      	ldr	r3, [pc, #188]	; (8011964 <xPortStartScheduler+0x134>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3b01      	subs	r3, #1
 80118ac:	4a2d      	ldr	r2, [pc, #180]	; (8011964 <xPortStartScheduler+0x134>)
 80118ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118ba:	78fb      	ldrb	r3, [r7, #3]
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118c2:	2b80      	cmp	r3, #128	; 0x80
 80118c4:	d0ef      	beq.n	80118a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80118c6:	4b27      	ldr	r3, [pc, #156]	; (8011964 <xPortStartScheduler+0x134>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f1c3 0307 	rsb	r3, r3, #7
 80118ce:	2b04      	cmp	r3, #4
 80118d0:	d00a      	beq.n	80118e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80118d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	60bb      	str	r3, [r7, #8]
}
 80118e4:	bf00      	nop
 80118e6:	e7fe      	b.n	80118e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80118e8:	4b1e      	ldr	r3, [pc, #120]	; (8011964 <xPortStartScheduler+0x134>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	021b      	lsls	r3, r3, #8
 80118ee:	4a1d      	ldr	r2, [pc, #116]	; (8011964 <xPortStartScheduler+0x134>)
 80118f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80118f2:	4b1c      	ldr	r3, [pc, #112]	; (8011964 <xPortStartScheduler+0x134>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80118fa:	4a1a      	ldr	r2, [pc, #104]	; (8011964 <xPortStartScheduler+0x134>)
 80118fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	b2da      	uxtb	r2, r3
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011906:	4b18      	ldr	r3, [pc, #96]	; (8011968 <xPortStartScheduler+0x138>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	4a17      	ldr	r2, [pc, #92]	; (8011968 <xPortStartScheduler+0x138>)
 801190c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011912:	4b15      	ldr	r3, [pc, #84]	; (8011968 <xPortStartScheduler+0x138>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a14      	ldr	r2, [pc, #80]	; (8011968 <xPortStartScheduler+0x138>)
 8011918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801191c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801191e:	f000 f8dd 	bl	8011adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011922:	4b12      	ldr	r3, [pc, #72]	; (801196c <xPortStartScheduler+0x13c>)
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011928:	f000 f8fc 	bl	8011b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801192c:	4b10      	ldr	r3, [pc, #64]	; (8011970 <xPortStartScheduler+0x140>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a0f      	ldr	r2, [pc, #60]	; (8011970 <xPortStartScheduler+0x140>)
 8011932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011938:	f7ff ff66 	bl	8011808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801193c:	f7fe fe68 	bl	8010610 <vTaskSwitchContext>
	prvTaskExitError();
 8011940:	f7ff ff22 	bl	8011788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011944:	2300      	movs	r3, #0
}
 8011946:	4618      	mov	r0, r3
 8011948:	3718      	adds	r7, #24
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	e000ed00 	.word	0xe000ed00
 8011954:	410fc271 	.word	0x410fc271
 8011958:	410fc270 	.word	0x410fc270
 801195c:	e000e400 	.word	0xe000e400
 8011960:	200026f0 	.word	0x200026f0
 8011964:	200026f4 	.word	0x200026f4
 8011968:	e000ed20 	.word	0xe000ed20
 801196c:	20000114 	.word	0x20000114
 8011970:	e000ef34 	.word	0xe000ef34

08011974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
	__asm volatile
 801197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	607b      	str	r3, [r7, #4]
}
 801198c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801198e:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <vPortEnterCritical+0x58>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	3301      	adds	r3, #1
 8011994:	4a0d      	ldr	r2, [pc, #52]	; (80119cc <vPortEnterCritical+0x58>)
 8011996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011998:	4b0c      	ldr	r3, [pc, #48]	; (80119cc <vPortEnterCritical+0x58>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d10f      	bne.n	80119c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80119a0:	4b0b      	ldr	r3, [pc, #44]	; (80119d0 <vPortEnterCritical+0x5c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00a      	beq.n	80119c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80119aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ae:	f383 8811 	msr	BASEPRI, r3
 80119b2:	f3bf 8f6f 	isb	sy
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	603b      	str	r3, [r7, #0]
}
 80119bc:	bf00      	nop
 80119be:	e7fe      	b.n	80119be <vPortEnterCritical+0x4a>
	}
}
 80119c0:	bf00      	nop
 80119c2:	370c      	adds	r7, #12
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr
 80119cc:	20000114 	.word	0x20000114
 80119d0:	e000ed04 	.word	0xe000ed04

080119d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80119da:	4b12      	ldr	r3, [pc, #72]	; (8011a24 <vPortExitCritical+0x50>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d10a      	bne.n	80119f8 <vPortExitCritical+0x24>
	__asm volatile
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	607b      	str	r3, [r7, #4]
}
 80119f4:	bf00      	nop
 80119f6:	e7fe      	b.n	80119f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80119f8:	4b0a      	ldr	r3, [pc, #40]	; (8011a24 <vPortExitCritical+0x50>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	3b01      	subs	r3, #1
 80119fe:	4a09      	ldr	r2, [pc, #36]	; (8011a24 <vPortExitCritical+0x50>)
 8011a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a02:	4b08      	ldr	r3, [pc, #32]	; (8011a24 <vPortExitCritical+0x50>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d105      	bne.n	8011a16 <vPortExitCritical+0x42>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	f383 8811 	msr	BASEPRI, r3
}
 8011a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011a16:	bf00      	nop
 8011a18:	370c      	adds	r7, #12
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	20000114 	.word	0x20000114
	...

08011a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011a30:	f3ef 8009 	mrs	r0, PSP
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	4b15      	ldr	r3, [pc, #84]	; (8011a90 <pxCurrentTCBConst>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	f01e 0f10 	tst.w	lr, #16
 8011a40:	bf08      	it	eq
 8011a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4a:	6010      	str	r0, [r2, #0]
 8011a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011a54:	f380 8811 	msr	BASEPRI, r0
 8011a58:	f3bf 8f4f 	dsb	sy
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f7fe fdd6 	bl	8010610 <vTaskSwitchContext>
 8011a64:	f04f 0000 	mov.w	r0, #0
 8011a68:	f380 8811 	msr	BASEPRI, r0
 8011a6c:	bc09      	pop	{r0, r3}
 8011a6e:	6819      	ldr	r1, [r3, #0]
 8011a70:	6808      	ldr	r0, [r1, #0]
 8011a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a76:	f01e 0f10 	tst.w	lr, #16
 8011a7a:	bf08      	it	eq
 8011a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a80:	f380 8809 	msr	PSP, r0
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop
 8011a8c:	f3af 8000 	nop.w

08011a90 <pxCurrentTCBConst>:
 8011a90:	200020c4 	.word	0x200020c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop

08011a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa2:	f383 8811 	msr	BASEPRI, r3
 8011aa6:	f3bf 8f6f 	isb	sy
 8011aaa:	f3bf 8f4f 	dsb	sy
 8011aae:	607b      	str	r3, [r7, #4]
}
 8011ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011ab2:	f7fe fcf3 	bl	801049c <xTaskIncrementTick>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d003      	beq.n	8011ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011abc:	4b06      	ldr	r3, [pc, #24]	; (8011ad8 <xPortSysTickHandler+0x40>)
 8011abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ac2:	601a      	str	r2, [r3, #0]
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	f383 8811 	msr	BASEPRI, r3
}
 8011ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011ad0:	bf00      	nop
 8011ad2:	3708      	adds	r7, #8
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	e000ed04 	.word	0xe000ed04

08011adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011adc:	b480      	push	{r7}
 8011ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011ae0:	4b0b      	ldr	r3, [pc, #44]	; (8011b10 <vPortSetupTimerInterrupt+0x34>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011ae6:	4b0b      	ldr	r3, [pc, #44]	; (8011b14 <vPortSetupTimerInterrupt+0x38>)
 8011ae8:	2200      	movs	r2, #0
 8011aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011aec:	4b0a      	ldr	r3, [pc, #40]	; (8011b18 <vPortSetupTimerInterrupt+0x3c>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	4a0a      	ldr	r2, [pc, #40]	; (8011b1c <vPortSetupTimerInterrupt+0x40>)
 8011af2:	fba2 2303 	umull	r2, r3, r2, r3
 8011af6:	099b      	lsrs	r3, r3, #6
 8011af8:	4a09      	ldr	r2, [pc, #36]	; (8011b20 <vPortSetupTimerInterrupt+0x44>)
 8011afa:	3b01      	subs	r3, #1
 8011afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011afe:	4b04      	ldr	r3, [pc, #16]	; (8011b10 <vPortSetupTimerInterrupt+0x34>)
 8011b00:	2207      	movs	r2, #7
 8011b02:	601a      	str	r2, [r3, #0]
}
 8011b04:	bf00      	nop
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	e000e010 	.word	0xe000e010
 8011b14:	e000e018 	.word	0xe000e018
 8011b18:	200000ac 	.word	0x200000ac
 8011b1c:	10624dd3 	.word	0x10624dd3
 8011b20:	e000e014 	.word	0xe000e014

08011b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011b34 <vPortEnableVFP+0x10>
 8011b28:	6801      	ldr	r1, [r0, #0]
 8011b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011b2e:	6001      	str	r1, [r0, #0]
 8011b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011b32:	bf00      	nop
 8011b34:	e000ed88 	.word	0xe000ed88

08011b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011b3e:	f3ef 8305 	mrs	r3, IPSR
 8011b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2b0f      	cmp	r3, #15
 8011b48:	d914      	bls.n	8011b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011b4a:	4a17      	ldr	r2, [pc, #92]	; (8011ba8 <vPortValidateInterruptPriority+0x70>)
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	4413      	add	r3, r2
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b54:	4b15      	ldr	r3, [pc, #84]	; (8011bac <vPortValidateInterruptPriority+0x74>)
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	7afa      	ldrb	r2, [r7, #11]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d20a      	bcs.n	8011b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b62:	f383 8811 	msr	BASEPRI, r3
 8011b66:	f3bf 8f6f 	isb	sy
 8011b6a:	f3bf 8f4f 	dsb	sy
 8011b6e:	607b      	str	r3, [r7, #4]
}
 8011b70:	bf00      	nop
 8011b72:	e7fe      	b.n	8011b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011b74:	4b0e      	ldr	r3, [pc, #56]	; (8011bb0 <vPortValidateInterruptPriority+0x78>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011b7c:	4b0d      	ldr	r3, [pc, #52]	; (8011bb4 <vPortValidateInterruptPriority+0x7c>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d90a      	bls.n	8011b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
 8011b94:	603b      	str	r3, [r7, #0]
}
 8011b96:	bf00      	nop
 8011b98:	e7fe      	b.n	8011b98 <vPortValidateInterruptPriority+0x60>
	}
 8011b9a:	bf00      	nop
 8011b9c:	3714      	adds	r7, #20
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop
 8011ba8:	e000e3f0 	.word	0xe000e3f0
 8011bac:	200026f0 	.word	0x200026f0
 8011bb0:	e000ed0c 	.word	0xe000ed0c
 8011bb4:	200026f4 	.word	0x200026f4

08011bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b08a      	sub	sp, #40	; 0x28
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011bc4:	f7fe fbae 	bl	8010324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011bc8:	4b5b      	ldr	r3, [pc, #364]	; (8011d38 <pvPortMalloc+0x180>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d101      	bne.n	8011bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011bd0:	f000 f920 	bl	8011e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011bd4:	4b59      	ldr	r3, [pc, #356]	; (8011d3c <pvPortMalloc+0x184>)
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4013      	ands	r3, r2
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f040 8093 	bne.w	8011d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d01d      	beq.n	8011c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011be8:	2208      	movs	r2, #8
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4413      	add	r3, r2
 8011bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f003 0307 	and.w	r3, r3, #7
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d014      	beq.n	8011c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f023 0307 	bic.w	r3, r3, #7
 8011c00:	3308      	adds	r3, #8
 8011c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f003 0307 	and.w	r3, r3, #7
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d00a      	beq.n	8011c24 <pvPortMalloc+0x6c>
	__asm volatile
 8011c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	617b      	str	r3, [r7, #20]
}
 8011c20:	bf00      	nop
 8011c22:	e7fe      	b.n	8011c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d06e      	beq.n	8011d08 <pvPortMalloc+0x150>
 8011c2a:	4b45      	ldr	r3, [pc, #276]	; (8011d40 <pvPortMalloc+0x188>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d869      	bhi.n	8011d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011c34:	4b43      	ldr	r3, [pc, #268]	; (8011d44 <pvPortMalloc+0x18c>)
 8011c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011c38:	4b42      	ldr	r3, [pc, #264]	; (8011d44 <pvPortMalloc+0x18c>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c3e:	e004      	b.n	8011c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	687a      	ldr	r2, [r7, #4]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d903      	bls.n	8011c5c <pvPortMalloc+0xa4>
 8011c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d1f1      	bne.n	8011c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011c5c:	4b36      	ldr	r3, [pc, #216]	; (8011d38 <pvPortMalloc+0x180>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d050      	beq.n	8011d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011c66:	6a3b      	ldr	r3, [r7, #32]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	2208      	movs	r2, #8
 8011c6c:	4413      	add	r3, r2
 8011c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	6a3b      	ldr	r3, [r7, #32]
 8011c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	1ad2      	subs	r2, r2, r3
 8011c80:	2308      	movs	r3, #8
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d91f      	bls.n	8011cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c90:	69bb      	ldr	r3, [r7, #24]
 8011c92:	f003 0307 	and.w	r3, r3, #7
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d00a      	beq.n	8011cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8011c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9e:	f383 8811 	msr	BASEPRI, r3
 8011ca2:	f3bf 8f6f 	isb	sy
 8011ca6:	f3bf 8f4f 	dsb	sy
 8011caa:	613b      	str	r3, [r7, #16]
}
 8011cac:	bf00      	nop
 8011cae:	e7fe      	b.n	8011cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	685a      	ldr	r2, [r3, #4]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	1ad2      	subs	r2, r2, r3
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011cc2:	69b8      	ldr	r0, [r7, #24]
 8011cc4:	f000 f908 	bl	8011ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011cc8:	4b1d      	ldr	r3, [pc, #116]	; (8011d40 <pvPortMalloc+0x188>)
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	4a1b      	ldr	r2, [pc, #108]	; (8011d40 <pvPortMalloc+0x188>)
 8011cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011cd6:	4b1a      	ldr	r3, [pc, #104]	; (8011d40 <pvPortMalloc+0x188>)
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	4b1b      	ldr	r3, [pc, #108]	; (8011d48 <pvPortMalloc+0x190>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d203      	bcs.n	8011cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011ce2:	4b17      	ldr	r3, [pc, #92]	; (8011d40 <pvPortMalloc+0x188>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a18      	ldr	r2, [pc, #96]	; (8011d48 <pvPortMalloc+0x190>)
 8011ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cec:	685a      	ldr	r2, [r3, #4]
 8011cee:	4b13      	ldr	r3, [pc, #76]	; (8011d3c <pvPortMalloc+0x184>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	431a      	orrs	r2, r3
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011cfe:	4b13      	ldr	r3, [pc, #76]	; (8011d4c <pvPortMalloc+0x194>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3301      	adds	r3, #1
 8011d04:	4a11      	ldr	r2, [pc, #68]	; (8011d4c <pvPortMalloc+0x194>)
 8011d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d08:	f7fe fb1a 	bl	8010340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	f003 0307 	and.w	r3, r3, #7
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d00a      	beq.n	8011d2c <pvPortMalloc+0x174>
	__asm volatile
 8011d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1a:	f383 8811 	msr	BASEPRI, r3
 8011d1e:	f3bf 8f6f 	isb	sy
 8011d22:	f3bf 8f4f 	dsb	sy
 8011d26:	60fb      	str	r3, [r7, #12]
}
 8011d28:	bf00      	nop
 8011d2a:	e7fe      	b.n	8011d2a <pvPortMalloc+0x172>
	return pvReturn;
 8011d2c:	69fb      	ldr	r3, [r7, #28]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3728      	adds	r7, #40	; 0x28
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	20003a88 	.word	0x20003a88
 8011d3c:	20003a9c 	.word	0x20003a9c
 8011d40:	20003a8c 	.word	0x20003a8c
 8011d44:	20003a80 	.word	0x20003a80
 8011d48:	20003a90 	.word	0x20003a90
 8011d4c:	20003a94 	.word	0x20003a94

08011d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b086      	sub	sp, #24
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d04d      	beq.n	8011dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011d62:	2308      	movs	r3, #8
 8011d64:	425b      	negs	r3, r3
 8011d66:	697a      	ldr	r2, [r7, #20]
 8011d68:	4413      	add	r3, r2
 8011d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	685a      	ldr	r2, [r3, #4]
 8011d74:	4b24      	ldr	r3, [pc, #144]	; (8011e08 <vPortFree+0xb8>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4013      	ands	r3, r2
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10a      	bne.n	8011d94 <vPortFree+0x44>
	__asm volatile
 8011d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d82:	f383 8811 	msr	BASEPRI, r3
 8011d86:	f3bf 8f6f 	isb	sy
 8011d8a:	f3bf 8f4f 	dsb	sy
 8011d8e:	60fb      	str	r3, [r7, #12]
}
 8011d90:	bf00      	nop
 8011d92:	e7fe      	b.n	8011d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00a      	beq.n	8011db2 <vPortFree+0x62>
	__asm volatile
 8011d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da0:	f383 8811 	msr	BASEPRI, r3
 8011da4:	f3bf 8f6f 	isb	sy
 8011da8:	f3bf 8f4f 	dsb	sy
 8011dac:	60bb      	str	r3, [r7, #8]
}
 8011dae:	bf00      	nop
 8011db0:	e7fe      	b.n	8011db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	685a      	ldr	r2, [r3, #4]
 8011db6:	4b14      	ldr	r3, [pc, #80]	; (8011e08 <vPortFree+0xb8>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4013      	ands	r3, r2
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d01e      	beq.n	8011dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d11a      	bne.n	8011dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	4b0e      	ldr	r3, [pc, #56]	; (8011e08 <vPortFree+0xb8>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	43db      	mvns	r3, r3
 8011dd2:	401a      	ands	r2, r3
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011dd8:	f7fe faa4 	bl	8010324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	685a      	ldr	r2, [r3, #4]
 8011de0:	4b0a      	ldr	r3, [pc, #40]	; (8011e0c <vPortFree+0xbc>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	4413      	add	r3, r2
 8011de6:	4a09      	ldr	r2, [pc, #36]	; (8011e0c <vPortFree+0xbc>)
 8011de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011dea:	6938      	ldr	r0, [r7, #16]
 8011dec:	f000 f874 	bl	8011ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011df0:	4b07      	ldr	r3, [pc, #28]	; (8011e10 <vPortFree+0xc0>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	3301      	adds	r3, #1
 8011df6:	4a06      	ldr	r2, [pc, #24]	; (8011e10 <vPortFree+0xc0>)
 8011df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011dfa:	f7fe faa1 	bl	8010340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011dfe:	bf00      	nop
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	20003a9c 	.word	0x20003a9c
 8011e0c:	20003a8c 	.word	0x20003a8c
 8011e10:	20003a98 	.word	0x20003a98

08011e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e14:	b480      	push	{r7}
 8011e16:	b085      	sub	sp, #20
 8011e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e20:	4b27      	ldr	r3, [pc, #156]	; (8011ec0 <prvHeapInit+0xac>)
 8011e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	f003 0307 	and.w	r3, r3, #7
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00c      	beq.n	8011e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	3307      	adds	r3, #7
 8011e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f023 0307 	bic.w	r3, r3, #7
 8011e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	4a1f      	ldr	r2, [pc, #124]	; (8011ec0 <prvHeapInit+0xac>)
 8011e44:	4413      	add	r3, r2
 8011e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011e4c:	4a1d      	ldr	r2, [pc, #116]	; (8011ec4 <prvHeapInit+0xb0>)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011e52:	4b1c      	ldr	r3, [pc, #112]	; (8011ec4 <prvHeapInit+0xb0>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	68ba      	ldr	r2, [r7, #8]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011e60:	2208      	movs	r2, #8
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	1a9b      	subs	r3, r3, r2
 8011e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f023 0307 	bic.w	r3, r3, #7
 8011e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	4a15      	ldr	r2, [pc, #84]	; (8011ec8 <prvHeapInit+0xb4>)
 8011e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011e76:	4b14      	ldr	r3, [pc, #80]	; (8011ec8 <prvHeapInit+0xb4>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011e7e:	4b12      	ldr	r3, [pc, #72]	; (8011ec8 <prvHeapInit+0xb4>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	2200      	movs	r2, #0
 8011e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	68fa      	ldr	r2, [r7, #12]
 8011e8e:	1ad2      	subs	r2, r2, r3
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011e94:	4b0c      	ldr	r3, [pc, #48]	; (8011ec8 <prvHeapInit+0xb4>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	4a0a      	ldr	r2, [pc, #40]	; (8011ecc <prvHeapInit+0xb8>)
 8011ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	4a09      	ldr	r2, [pc, #36]	; (8011ed0 <prvHeapInit+0xbc>)
 8011eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011eac:	4b09      	ldr	r3, [pc, #36]	; (8011ed4 <prvHeapInit+0xc0>)
 8011eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011eb2:	601a      	str	r2, [r3, #0]
}
 8011eb4:	bf00      	nop
 8011eb6:	3714      	adds	r7, #20
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr
 8011ec0:	200026f8 	.word	0x200026f8
 8011ec4:	20003a80 	.word	0x20003a80
 8011ec8:	20003a88 	.word	0x20003a88
 8011ecc:	20003a90 	.word	0x20003a90
 8011ed0:	20003a8c 	.word	0x20003a8c
 8011ed4:	20003a9c 	.word	0x20003a9c

08011ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ee0:	4b28      	ldr	r3, [pc, #160]	; (8011f84 <prvInsertBlockIntoFreeList+0xac>)
 8011ee2:	60fb      	str	r3, [r7, #12]
 8011ee4:	e002      	b.n	8011eec <prvInsertBlockIntoFreeList+0x14>
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d8f7      	bhi.n	8011ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	4413      	add	r3, r2
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d108      	bne.n	8011f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	441a      	add	r2, r3
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	68ba      	ldr	r2, [r7, #8]
 8011f24:	441a      	add	r2, r3
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d118      	bne.n	8011f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	4b15      	ldr	r3, [pc, #84]	; (8011f88 <prvInsertBlockIntoFreeList+0xb0>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d00d      	beq.n	8011f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	685a      	ldr	r2, [r3, #4]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	441a      	add	r2, r3
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	601a      	str	r2, [r3, #0]
 8011f54:	e008      	b.n	8011f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011f56:	4b0c      	ldr	r3, [pc, #48]	; (8011f88 <prvInsertBlockIntoFreeList+0xb0>)
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	601a      	str	r2, [r3, #0]
 8011f5e:	e003      	b.n	8011f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011f68:	68fa      	ldr	r2, [r7, #12]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d002      	beq.n	8011f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f76:	bf00      	nop
 8011f78:	3714      	adds	r7, #20
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	20003a80 	.word	0x20003a80
 8011f88:	20003a88 	.word	0x20003a88

08011f8c <__assert_func>:
 8011f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f8e:	4614      	mov	r4, r2
 8011f90:	461a      	mov	r2, r3
 8011f92:	4b09      	ldr	r3, [pc, #36]	; (8011fb8 <__assert_func+0x2c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	4605      	mov	r5, r0
 8011f98:	68d8      	ldr	r0, [r3, #12]
 8011f9a:	b14c      	cbz	r4, 8011fb0 <__assert_func+0x24>
 8011f9c:	4b07      	ldr	r3, [pc, #28]	; (8011fbc <__assert_func+0x30>)
 8011f9e:	9100      	str	r1, [sp, #0]
 8011fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fa4:	4906      	ldr	r1, [pc, #24]	; (8011fc0 <__assert_func+0x34>)
 8011fa6:	462b      	mov	r3, r5
 8011fa8:	f000 ffba 	bl	8012f20 <fiprintf>
 8011fac:	f001 fad8 	bl	8013560 <abort>
 8011fb0:	4b04      	ldr	r3, [pc, #16]	; (8011fc4 <__assert_func+0x38>)
 8011fb2:	461c      	mov	r4, r3
 8011fb4:	e7f3      	b.n	8011f9e <__assert_func+0x12>
 8011fb6:	bf00      	nop
 8011fb8:	20000170 	.word	0x20000170
 8011fbc:	080182ef 	.word	0x080182ef
 8011fc0:	080182fc 	.word	0x080182fc
 8011fc4:	0801832a 	.word	0x0801832a

08011fc8 <atoi>:
 8011fc8:	220a      	movs	r2, #10
 8011fca:	2100      	movs	r1, #0
 8011fcc:	f000 b884 	b.w	80120d8 <strtol>

08011fd0 <_strtol_l.constprop.0>:
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd6:	d001      	beq.n	8011fdc <_strtol_l.constprop.0+0xc>
 8011fd8:	2b24      	cmp	r3, #36	; 0x24
 8011fda:	d906      	bls.n	8011fea <_strtol_l.constprop.0+0x1a>
 8011fdc:	f001 fa7e 	bl	80134dc <__errno>
 8011fe0:	2316      	movs	r3, #22
 8011fe2:	6003      	str	r3, [r0, #0]
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80120d0 <_strtol_l.constprop.0+0x100>
 8011fee:	460d      	mov	r5, r1
 8011ff0:	462e      	mov	r6, r5
 8011ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ff6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011ffa:	f017 0708 	ands.w	r7, r7, #8
 8011ffe:	d1f7      	bne.n	8011ff0 <_strtol_l.constprop.0+0x20>
 8012000:	2c2d      	cmp	r4, #45	; 0x2d
 8012002:	d132      	bne.n	801206a <_strtol_l.constprop.0+0x9a>
 8012004:	782c      	ldrb	r4, [r5, #0]
 8012006:	2701      	movs	r7, #1
 8012008:	1cb5      	adds	r5, r6, #2
 801200a:	2b00      	cmp	r3, #0
 801200c:	d05b      	beq.n	80120c6 <_strtol_l.constprop.0+0xf6>
 801200e:	2b10      	cmp	r3, #16
 8012010:	d109      	bne.n	8012026 <_strtol_l.constprop.0+0x56>
 8012012:	2c30      	cmp	r4, #48	; 0x30
 8012014:	d107      	bne.n	8012026 <_strtol_l.constprop.0+0x56>
 8012016:	782c      	ldrb	r4, [r5, #0]
 8012018:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801201c:	2c58      	cmp	r4, #88	; 0x58
 801201e:	d14d      	bne.n	80120bc <_strtol_l.constprop.0+0xec>
 8012020:	786c      	ldrb	r4, [r5, #1]
 8012022:	2310      	movs	r3, #16
 8012024:	3502      	adds	r5, #2
 8012026:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801202a:	f108 38ff 	add.w	r8, r8, #4294967295
 801202e:	f04f 0e00 	mov.w	lr, #0
 8012032:	fbb8 f9f3 	udiv	r9, r8, r3
 8012036:	4676      	mov	r6, lr
 8012038:	fb03 8a19 	mls	sl, r3, r9, r8
 801203c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012040:	f1bc 0f09 	cmp.w	ip, #9
 8012044:	d816      	bhi.n	8012074 <_strtol_l.constprop.0+0xa4>
 8012046:	4664      	mov	r4, ip
 8012048:	42a3      	cmp	r3, r4
 801204a:	dd24      	ble.n	8012096 <_strtol_l.constprop.0+0xc6>
 801204c:	f1be 3fff 	cmp.w	lr, #4294967295
 8012050:	d008      	beq.n	8012064 <_strtol_l.constprop.0+0x94>
 8012052:	45b1      	cmp	r9, r6
 8012054:	d31c      	bcc.n	8012090 <_strtol_l.constprop.0+0xc0>
 8012056:	d101      	bne.n	801205c <_strtol_l.constprop.0+0x8c>
 8012058:	45a2      	cmp	sl, r4
 801205a:	db19      	blt.n	8012090 <_strtol_l.constprop.0+0xc0>
 801205c:	fb06 4603 	mla	r6, r6, r3, r4
 8012060:	f04f 0e01 	mov.w	lr, #1
 8012064:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012068:	e7e8      	b.n	801203c <_strtol_l.constprop.0+0x6c>
 801206a:	2c2b      	cmp	r4, #43	; 0x2b
 801206c:	bf04      	itt	eq
 801206e:	782c      	ldrbeq	r4, [r5, #0]
 8012070:	1cb5      	addeq	r5, r6, #2
 8012072:	e7ca      	b.n	801200a <_strtol_l.constprop.0+0x3a>
 8012074:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012078:	f1bc 0f19 	cmp.w	ip, #25
 801207c:	d801      	bhi.n	8012082 <_strtol_l.constprop.0+0xb2>
 801207e:	3c37      	subs	r4, #55	; 0x37
 8012080:	e7e2      	b.n	8012048 <_strtol_l.constprop.0+0x78>
 8012082:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012086:	f1bc 0f19 	cmp.w	ip, #25
 801208a:	d804      	bhi.n	8012096 <_strtol_l.constprop.0+0xc6>
 801208c:	3c57      	subs	r4, #87	; 0x57
 801208e:	e7db      	b.n	8012048 <_strtol_l.constprop.0+0x78>
 8012090:	f04f 3eff 	mov.w	lr, #4294967295
 8012094:	e7e6      	b.n	8012064 <_strtol_l.constprop.0+0x94>
 8012096:	f1be 3fff 	cmp.w	lr, #4294967295
 801209a:	d105      	bne.n	80120a8 <_strtol_l.constprop.0+0xd8>
 801209c:	2322      	movs	r3, #34	; 0x22
 801209e:	6003      	str	r3, [r0, #0]
 80120a0:	4646      	mov	r6, r8
 80120a2:	b942      	cbnz	r2, 80120b6 <_strtol_l.constprop.0+0xe6>
 80120a4:	4630      	mov	r0, r6
 80120a6:	e79e      	b.n	8011fe6 <_strtol_l.constprop.0+0x16>
 80120a8:	b107      	cbz	r7, 80120ac <_strtol_l.constprop.0+0xdc>
 80120aa:	4276      	negs	r6, r6
 80120ac:	2a00      	cmp	r2, #0
 80120ae:	d0f9      	beq.n	80120a4 <_strtol_l.constprop.0+0xd4>
 80120b0:	f1be 0f00 	cmp.w	lr, #0
 80120b4:	d000      	beq.n	80120b8 <_strtol_l.constprop.0+0xe8>
 80120b6:	1e69      	subs	r1, r5, #1
 80120b8:	6011      	str	r1, [r2, #0]
 80120ba:	e7f3      	b.n	80120a4 <_strtol_l.constprop.0+0xd4>
 80120bc:	2430      	movs	r4, #48	; 0x30
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1b1      	bne.n	8012026 <_strtol_l.constprop.0+0x56>
 80120c2:	2308      	movs	r3, #8
 80120c4:	e7af      	b.n	8012026 <_strtol_l.constprop.0+0x56>
 80120c6:	2c30      	cmp	r4, #48	; 0x30
 80120c8:	d0a5      	beq.n	8012016 <_strtol_l.constprop.0+0x46>
 80120ca:	230a      	movs	r3, #10
 80120cc:	e7ab      	b.n	8012026 <_strtol_l.constprop.0+0x56>
 80120ce:	bf00      	nop
 80120d0:	0801832c 	.word	0x0801832c

080120d4 <_strtol_r>:
 80120d4:	f7ff bf7c 	b.w	8011fd0 <_strtol_l.constprop.0>

080120d8 <strtol>:
 80120d8:	4613      	mov	r3, r2
 80120da:	460a      	mov	r2, r1
 80120dc:	4601      	mov	r1, r0
 80120de:	4802      	ldr	r0, [pc, #8]	; (80120e8 <strtol+0x10>)
 80120e0:	6800      	ldr	r0, [r0, #0]
 80120e2:	f7ff bf75 	b.w	8011fd0 <_strtol_l.constprop.0>
 80120e6:	bf00      	nop
 80120e8:	20000170 	.word	0x20000170

080120ec <__cvt>:
 80120ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120f0:	ec55 4b10 	vmov	r4, r5, d0
 80120f4:	2d00      	cmp	r5, #0
 80120f6:	460e      	mov	r6, r1
 80120f8:	4619      	mov	r1, r3
 80120fa:	462b      	mov	r3, r5
 80120fc:	bfbb      	ittet	lt
 80120fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012102:	461d      	movlt	r5, r3
 8012104:	2300      	movge	r3, #0
 8012106:	232d      	movlt	r3, #45	; 0x2d
 8012108:	700b      	strb	r3, [r1, #0]
 801210a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801210c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012110:	4691      	mov	r9, r2
 8012112:	f023 0820 	bic.w	r8, r3, #32
 8012116:	bfbc      	itt	lt
 8012118:	4622      	movlt	r2, r4
 801211a:	4614      	movlt	r4, r2
 801211c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012120:	d005      	beq.n	801212e <__cvt+0x42>
 8012122:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012126:	d100      	bne.n	801212a <__cvt+0x3e>
 8012128:	3601      	adds	r6, #1
 801212a:	2102      	movs	r1, #2
 801212c:	e000      	b.n	8012130 <__cvt+0x44>
 801212e:	2103      	movs	r1, #3
 8012130:	ab03      	add	r3, sp, #12
 8012132:	9301      	str	r3, [sp, #4]
 8012134:	ab02      	add	r3, sp, #8
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	ec45 4b10 	vmov	d0, r4, r5
 801213c:	4653      	mov	r3, sl
 801213e:	4632      	mov	r2, r6
 8012140:	f001 fa9e 	bl	8013680 <_dtoa_r>
 8012144:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012148:	4607      	mov	r7, r0
 801214a:	d102      	bne.n	8012152 <__cvt+0x66>
 801214c:	f019 0f01 	tst.w	r9, #1
 8012150:	d022      	beq.n	8012198 <__cvt+0xac>
 8012152:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012156:	eb07 0906 	add.w	r9, r7, r6
 801215a:	d110      	bne.n	801217e <__cvt+0x92>
 801215c:	783b      	ldrb	r3, [r7, #0]
 801215e:	2b30      	cmp	r3, #48	; 0x30
 8012160:	d10a      	bne.n	8012178 <__cvt+0x8c>
 8012162:	2200      	movs	r2, #0
 8012164:	2300      	movs	r3, #0
 8012166:	4620      	mov	r0, r4
 8012168:	4629      	mov	r1, r5
 801216a:	f7ee fcad 	bl	8000ac8 <__aeabi_dcmpeq>
 801216e:	b918      	cbnz	r0, 8012178 <__cvt+0x8c>
 8012170:	f1c6 0601 	rsb	r6, r6, #1
 8012174:	f8ca 6000 	str.w	r6, [sl]
 8012178:	f8da 3000 	ldr.w	r3, [sl]
 801217c:	4499      	add	r9, r3
 801217e:	2200      	movs	r2, #0
 8012180:	2300      	movs	r3, #0
 8012182:	4620      	mov	r0, r4
 8012184:	4629      	mov	r1, r5
 8012186:	f7ee fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 801218a:	b108      	cbz	r0, 8012190 <__cvt+0xa4>
 801218c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012190:	2230      	movs	r2, #48	; 0x30
 8012192:	9b03      	ldr	r3, [sp, #12]
 8012194:	454b      	cmp	r3, r9
 8012196:	d307      	bcc.n	80121a8 <__cvt+0xbc>
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801219c:	1bdb      	subs	r3, r3, r7
 801219e:	4638      	mov	r0, r7
 80121a0:	6013      	str	r3, [r2, #0]
 80121a2:	b004      	add	sp, #16
 80121a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121a8:	1c59      	adds	r1, r3, #1
 80121aa:	9103      	str	r1, [sp, #12]
 80121ac:	701a      	strb	r2, [r3, #0]
 80121ae:	e7f0      	b.n	8012192 <__cvt+0xa6>

080121b0 <__exponent>:
 80121b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121b2:	4603      	mov	r3, r0
 80121b4:	2900      	cmp	r1, #0
 80121b6:	bfb8      	it	lt
 80121b8:	4249      	neglt	r1, r1
 80121ba:	f803 2b02 	strb.w	r2, [r3], #2
 80121be:	bfb4      	ite	lt
 80121c0:	222d      	movlt	r2, #45	; 0x2d
 80121c2:	222b      	movge	r2, #43	; 0x2b
 80121c4:	2909      	cmp	r1, #9
 80121c6:	7042      	strb	r2, [r0, #1]
 80121c8:	dd2a      	ble.n	8012220 <__exponent+0x70>
 80121ca:	f10d 0207 	add.w	r2, sp, #7
 80121ce:	4617      	mov	r7, r2
 80121d0:	260a      	movs	r6, #10
 80121d2:	4694      	mov	ip, r2
 80121d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80121d8:	fb06 1415 	mls	r4, r6, r5, r1
 80121dc:	3430      	adds	r4, #48	; 0x30
 80121de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80121e2:	460c      	mov	r4, r1
 80121e4:	2c63      	cmp	r4, #99	; 0x63
 80121e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80121ea:	4629      	mov	r1, r5
 80121ec:	dcf1      	bgt.n	80121d2 <__exponent+0x22>
 80121ee:	3130      	adds	r1, #48	; 0x30
 80121f0:	f1ac 0402 	sub.w	r4, ip, #2
 80121f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80121f8:	1c41      	adds	r1, r0, #1
 80121fa:	4622      	mov	r2, r4
 80121fc:	42ba      	cmp	r2, r7
 80121fe:	d30a      	bcc.n	8012216 <__exponent+0x66>
 8012200:	f10d 0209 	add.w	r2, sp, #9
 8012204:	eba2 020c 	sub.w	r2, r2, ip
 8012208:	42bc      	cmp	r4, r7
 801220a:	bf88      	it	hi
 801220c:	2200      	movhi	r2, #0
 801220e:	4413      	add	r3, r2
 8012210:	1a18      	subs	r0, r3, r0
 8012212:	b003      	add	sp, #12
 8012214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012216:	f812 5b01 	ldrb.w	r5, [r2], #1
 801221a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801221e:	e7ed      	b.n	80121fc <__exponent+0x4c>
 8012220:	2330      	movs	r3, #48	; 0x30
 8012222:	3130      	adds	r1, #48	; 0x30
 8012224:	7083      	strb	r3, [r0, #2]
 8012226:	70c1      	strb	r1, [r0, #3]
 8012228:	1d03      	adds	r3, r0, #4
 801222a:	e7f1      	b.n	8012210 <__exponent+0x60>

0801222c <_printf_float>:
 801222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012230:	ed2d 8b02 	vpush	{d8}
 8012234:	b08d      	sub	sp, #52	; 0x34
 8012236:	460c      	mov	r4, r1
 8012238:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801223c:	4616      	mov	r6, r2
 801223e:	461f      	mov	r7, r3
 8012240:	4605      	mov	r5, r0
 8012242:	f001 f901 	bl	8013448 <_localeconv_r>
 8012246:	f8d0 a000 	ldr.w	sl, [r0]
 801224a:	4650      	mov	r0, sl
 801224c:	f7ee f810 	bl	8000270 <strlen>
 8012250:	2300      	movs	r3, #0
 8012252:	930a      	str	r3, [sp, #40]	; 0x28
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	9305      	str	r3, [sp, #20]
 8012258:	f8d8 3000 	ldr.w	r3, [r8]
 801225c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012260:	3307      	adds	r3, #7
 8012262:	f023 0307 	bic.w	r3, r3, #7
 8012266:	f103 0208 	add.w	r2, r3, #8
 801226a:	f8c8 2000 	str.w	r2, [r8]
 801226e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012276:	9307      	str	r3, [sp, #28]
 8012278:	f8cd 8018 	str.w	r8, [sp, #24]
 801227c:	ee08 0a10 	vmov	s16, r0
 8012280:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012288:	4b9e      	ldr	r3, [pc, #632]	; (8012504 <_printf_float+0x2d8>)
 801228a:	f04f 32ff 	mov.w	r2, #4294967295
 801228e:	f7ee fc4d 	bl	8000b2c <__aeabi_dcmpun>
 8012292:	bb88      	cbnz	r0, 80122f8 <_printf_float+0xcc>
 8012294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012298:	4b9a      	ldr	r3, [pc, #616]	; (8012504 <_printf_float+0x2d8>)
 801229a:	f04f 32ff 	mov.w	r2, #4294967295
 801229e:	f7ee fc27 	bl	8000af0 <__aeabi_dcmple>
 80122a2:	bb48      	cbnz	r0, 80122f8 <_printf_float+0xcc>
 80122a4:	2200      	movs	r2, #0
 80122a6:	2300      	movs	r3, #0
 80122a8:	4640      	mov	r0, r8
 80122aa:	4649      	mov	r1, r9
 80122ac:	f7ee fc16 	bl	8000adc <__aeabi_dcmplt>
 80122b0:	b110      	cbz	r0, 80122b8 <_printf_float+0x8c>
 80122b2:	232d      	movs	r3, #45	; 0x2d
 80122b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122b8:	4a93      	ldr	r2, [pc, #588]	; (8012508 <_printf_float+0x2dc>)
 80122ba:	4b94      	ldr	r3, [pc, #592]	; (801250c <_printf_float+0x2e0>)
 80122bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80122c0:	bf94      	ite	ls
 80122c2:	4690      	movls	r8, r2
 80122c4:	4698      	movhi	r8, r3
 80122c6:	2303      	movs	r3, #3
 80122c8:	6123      	str	r3, [r4, #16]
 80122ca:	9b05      	ldr	r3, [sp, #20]
 80122cc:	f023 0304 	bic.w	r3, r3, #4
 80122d0:	6023      	str	r3, [r4, #0]
 80122d2:	f04f 0900 	mov.w	r9, #0
 80122d6:	9700      	str	r7, [sp, #0]
 80122d8:	4633      	mov	r3, r6
 80122da:	aa0b      	add	r2, sp, #44	; 0x2c
 80122dc:	4621      	mov	r1, r4
 80122de:	4628      	mov	r0, r5
 80122e0:	f000 f9da 	bl	8012698 <_printf_common>
 80122e4:	3001      	adds	r0, #1
 80122e6:	f040 8090 	bne.w	801240a <_printf_float+0x1de>
 80122ea:	f04f 30ff 	mov.w	r0, #4294967295
 80122ee:	b00d      	add	sp, #52	; 0x34
 80122f0:	ecbd 8b02 	vpop	{d8}
 80122f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f8:	4642      	mov	r2, r8
 80122fa:	464b      	mov	r3, r9
 80122fc:	4640      	mov	r0, r8
 80122fe:	4649      	mov	r1, r9
 8012300:	f7ee fc14 	bl	8000b2c <__aeabi_dcmpun>
 8012304:	b140      	cbz	r0, 8012318 <_printf_float+0xec>
 8012306:	464b      	mov	r3, r9
 8012308:	2b00      	cmp	r3, #0
 801230a:	bfbc      	itt	lt
 801230c:	232d      	movlt	r3, #45	; 0x2d
 801230e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012312:	4a7f      	ldr	r2, [pc, #508]	; (8012510 <_printf_float+0x2e4>)
 8012314:	4b7f      	ldr	r3, [pc, #508]	; (8012514 <_printf_float+0x2e8>)
 8012316:	e7d1      	b.n	80122bc <_printf_float+0x90>
 8012318:	6863      	ldr	r3, [r4, #4]
 801231a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801231e:	9206      	str	r2, [sp, #24]
 8012320:	1c5a      	adds	r2, r3, #1
 8012322:	d13f      	bne.n	80123a4 <_printf_float+0x178>
 8012324:	2306      	movs	r3, #6
 8012326:	6063      	str	r3, [r4, #4]
 8012328:	9b05      	ldr	r3, [sp, #20]
 801232a:	6861      	ldr	r1, [r4, #4]
 801232c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012330:	2300      	movs	r3, #0
 8012332:	9303      	str	r3, [sp, #12]
 8012334:	ab0a      	add	r3, sp, #40	; 0x28
 8012336:	e9cd b301 	strd	fp, r3, [sp, #4]
 801233a:	ab09      	add	r3, sp, #36	; 0x24
 801233c:	ec49 8b10 	vmov	d0, r8, r9
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	6022      	str	r2, [r4, #0]
 8012344:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012348:	4628      	mov	r0, r5
 801234a:	f7ff fecf 	bl	80120ec <__cvt>
 801234e:	9b06      	ldr	r3, [sp, #24]
 8012350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012352:	2b47      	cmp	r3, #71	; 0x47
 8012354:	4680      	mov	r8, r0
 8012356:	d108      	bne.n	801236a <_printf_float+0x13e>
 8012358:	1cc8      	adds	r0, r1, #3
 801235a:	db02      	blt.n	8012362 <_printf_float+0x136>
 801235c:	6863      	ldr	r3, [r4, #4]
 801235e:	4299      	cmp	r1, r3
 8012360:	dd41      	ble.n	80123e6 <_printf_float+0x1ba>
 8012362:	f1ab 0302 	sub.w	r3, fp, #2
 8012366:	fa5f fb83 	uxtb.w	fp, r3
 801236a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801236e:	d820      	bhi.n	80123b2 <_printf_float+0x186>
 8012370:	3901      	subs	r1, #1
 8012372:	465a      	mov	r2, fp
 8012374:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012378:	9109      	str	r1, [sp, #36]	; 0x24
 801237a:	f7ff ff19 	bl	80121b0 <__exponent>
 801237e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012380:	1813      	adds	r3, r2, r0
 8012382:	2a01      	cmp	r2, #1
 8012384:	4681      	mov	r9, r0
 8012386:	6123      	str	r3, [r4, #16]
 8012388:	dc02      	bgt.n	8012390 <_printf_float+0x164>
 801238a:	6822      	ldr	r2, [r4, #0]
 801238c:	07d2      	lsls	r2, r2, #31
 801238e:	d501      	bpl.n	8012394 <_printf_float+0x168>
 8012390:	3301      	adds	r3, #1
 8012392:	6123      	str	r3, [r4, #16]
 8012394:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012398:	2b00      	cmp	r3, #0
 801239a:	d09c      	beq.n	80122d6 <_printf_float+0xaa>
 801239c:	232d      	movs	r3, #45	; 0x2d
 801239e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123a2:	e798      	b.n	80122d6 <_printf_float+0xaa>
 80123a4:	9a06      	ldr	r2, [sp, #24]
 80123a6:	2a47      	cmp	r2, #71	; 0x47
 80123a8:	d1be      	bne.n	8012328 <_printf_float+0xfc>
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1bc      	bne.n	8012328 <_printf_float+0xfc>
 80123ae:	2301      	movs	r3, #1
 80123b0:	e7b9      	b.n	8012326 <_printf_float+0xfa>
 80123b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80123b6:	d118      	bne.n	80123ea <_printf_float+0x1be>
 80123b8:	2900      	cmp	r1, #0
 80123ba:	6863      	ldr	r3, [r4, #4]
 80123bc:	dd0b      	ble.n	80123d6 <_printf_float+0x1aa>
 80123be:	6121      	str	r1, [r4, #16]
 80123c0:	b913      	cbnz	r3, 80123c8 <_printf_float+0x19c>
 80123c2:	6822      	ldr	r2, [r4, #0]
 80123c4:	07d0      	lsls	r0, r2, #31
 80123c6:	d502      	bpl.n	80123ce <_printf_float+0x1a2>
 80123c8:	3301      	adds	r3, #1
 80123ca:	440b      	add	r3, r1
 80123cc:	6123      	str	r3, [r4, #16]
 80123ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80123d0:	f04f 0900 	mov.w	r9, #0
 80123d4:	e7de      	b.n	8012394 <_printf_float+0x168>
 80123d6:	b913      	cbnz	r3, 80123de <_printf_float+0x1b2>
 80123d8:	6822      	ldr	r2, [r4, #0]
 80123da:	07d2      	lsls	r2, r2, #31
 80123dc:	d501      	bpl.n	80123e2 <_printf_float+0x1b6>
 80123de:	3302      	adds	r3, #2
 80123e0:	e7f4      	b.n	80123cc <_printf_float+0x1a0>
 80123e2:	2301      	movs	r3, #1
 80123e4:	e7f2      	b.n	80123cc <_printf_float+0x1a0>
 80123e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80123ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ec:	4299      	cmp	r1, r3
 80123ee:	db05      	blt.n	80123fc <_printf_float+0x1d0>
 80123f0:	6823      	ldr	r3, [r4, #0]
 80123f2:	6121      	str	r1, [r4, #16]
 80123f4:	07d8      	lsls	r0, r3, #31
 80123f6:	d5ea      	bpl.n	80123ce <_printf_float+0x1a2>
 80123f8:	1c4b      	adds	r3, r1, #1
 80123fa:	e7e7      	b.n	80123cc <_printf_float+0x1a0>
 80123fc:	2900      	cmp	r1, #0
 80123fe:	bfd4      	ite	le
 8012400:	f1c1 0202 	rsble	r2, r1, #2
 8012404:	2201      	movgt	r2, #1
 8012406:	4413      	add	r3, r2
 8012408:	e7e0      	b.n	80123cc <_printf_float+0x1a0>
 801240a:	6823      	ldr	r3, [r4, #0]
 801240c:	055a      	lsls	r2, r3, #21
 801240e:	d407      	bmi.n	8012420 <_printf_float+0x1f4>
 8012410:	6923      	ldr	r3, [r4, #16]
 8012412:	4642      	mov	r2, r8
 8012414:	4631      	mov	r1, r6
 8012416:	4628      	mov	r0, r5
 8012418:	47b8      	blx	r7
 801241a:	3001      	adds	r0, #1
 801241c:	d12c      	bne.n	8012478 <_printf_float+0x24c>
 801241e:	e764      	b.n	80122ea <_printf_float+0xbe>
 8012420:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012424:	f240 80e0 	bls.w	80125e8 <_printf_float+0x3bc>
 8012428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801242c:	2200      	movs	r2, #0
 801242e:	2300      	movs	r3, #0
 8012430:	f7ee fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012434:	2800      	cmp	r0, #0
 8012436:	d034      	beq.n	80124a2 <_printf_float+0x276>
 8012438:	4a37      	ldr	r2, [pc, #220]	; (8012518 <_printf_float+0x2ec>)
 801243a:	2301      	movs	r3, #1
 801243c:	4631      	mov	r1, r6
 801243e:	4628      	mov	r0, r5
 8012440:	47b8      	blx	r7
 8012442:	3001      	adds	r0, #1
 8012444:	f43f af51 	beq.w	80122ea <_printf_float+0xbe>
 8012448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801244c:	429a      	cmp	r2, r3
 801244e:	db02      	blt.n	8012456 <_printf_float+0x22a>
 8012450:	6823      	ldr	r3, [r4, #0]
 8012452:	07d8      	lsls	r0, r3, #31
 8012454:	d510      	bpl.n	8012478 <_printf_float+0x24c>
 8012456:	ee18 3a10 	vmov	r3, s16
 801245a:	4652      	mov	r2, sl
 801245c:	4631      	mov	r1, r6
 801245e:	4628      	mov	r0, r5
 8012460:	47b8      	blx	r7
 8012462:	3001      	adds	r0, #1
 8012464:	f43f af41 	beq.w	80122ea <_printf_float+0xbe>
 8012468:	f04f 0800 	mov.w	r8, #0
 801246c:	f104 091a 	add.w	r9, r4, #26
 8012470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012472:	3b01      	subs	r3, #1
 8012474:	4543      	cmp	r3, r8
 8012476:	dc09      	bgt.n	801248c <_printf_float+0x260>
 8012478:	6823      	ldr	r3, [r4, #0]
 801247a:	079b      	lsls	r3, r3, #30
 801247c:	f100 8107 	bmi.w	801268e <_printf_float+0x462>
 8012480:	68e0      	ldr	r0, [r4, #12]
 8012482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012484:	4298      	cmp	r0, r3
 8012486:	bfb8      	it	lt
 8012488:	4618      	movlt	r0, r3
 801248a:	e730      	b.n	80122ee <_printf_float+0xc2>
 801248c:	2301      	movs	r3, #1
 801248e:	464a      	mov	r2, r9
 8012490:	4631      	mov	r1, r6
 8012492:	4628      	mov	r0, r5
 8012494:	47b8      	blx	r7
 8012496:	3001      	adds	r0, #1
 8012498:	f43f af27 	beq.w	80122ea <_printf_float+0xbe>
 801249c:	f108 0801 	add.w	r8, r8, #1
 80124a0:	e7e6      	b.n	8012470 <_printf_float+0x244>
 80124a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	dc39      	bgt.n	801251c <_printf_float+0x2f0>
 80124a8:	4a1b      	ldr	r2, [pc, #108]	; (8012518 <_printf_float+0x2ec>)
 80124aa:	2301      	movs	r3, #1
 80124ac:	4631      	mov	r1, r6
 80124ae:	4628      	mov	r0, r5
 80124b0:	47b8      	blx	r7
 80124b2:	3001      	adds	r0, #1
 80124b4:	f43f af19 	beq.w	80122ea <_printf_float+0xbe>
 80124b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80124bc:	4313      	orrs	r3, r2
 80124be:	d102      	bne.n	80124c6 <_printf_float+0x29a>
 80124c0:	6823      	ldr	r3, [r4, #0]
 80124c2:	07d9      	lsls	r1, r3, #31
 80124c4:	d5d8      	bpl.n	8012478 <_printf_float+0x24c>
 80124c6:	ee18 3a10 	vmov	r3, s16
 80124ca:	4652      	mov	r2, sl
 80124cc:	4631      	mov	r1, r6
 80124ce:	4628      	mov	r0, r5
 80124d0:	47b8      	blx	r7
 80124d2:	3001      	adds	r0, #1
 80124d4:	f43f af09 	beq.w	80122ea <_printf_float+0xbe>
 80124d8:	f04f 0900 	mov.w	r9, #0
 80124dc:	f104 0a1a 	add.w	sl, r4, #26
 80124e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124e2:	425b      	negs	r3, r3
 80124e4:	454b      	cmp	r3, r9
 80124e6:	dc01      	bgt.n	80124ec <_printf_float+0x2c0>
 80124e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124ea:	e792      	b.n	8012412 <_printf_float+0x1e6>
 80124ec:	2301      	movs	r3, #1
 80124ee:	4652      	mov	r2, sl
 80124f0:	4631      	mov	r1, r6
 80124f2:	4628      	mov	r0, r5
 80124f4:	47b8      	blx	r7
 80124f6:	3001      	adds	r0, #1
 80124f8:	f43f aef7 	beq.w	80122ea <_printf_float+0xbe>
 80124fc:	f109 0901 	add.w	r9, r9, #1
 8012500:	e7ee      	b.n	80124e0 <_printf_float+0x2b4>
 8012502:	bf00      	nop
 8012504:	7fefffff 	.word	0x7fefffff
 8012508:	0801842c 	.word	0x0801842c
 801250c:	08018430 	.word	0x08018430
 8012510:	08018434 	.word	0x08018434
 8012514:	08018438 	.word	0x08018438
 8012518:	0801843c 	.word	0x0801843c
 801251c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801251e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012520:	429a      	cmp	r2, r3
 8012522:	bfa8      	it	ge
 8012524:	461a      	movge	r2, r3
 8012526:	2a00      	cmp	r2, #0
 8012528:	4691      	mov	r9, r2
 801252a:	dc37      	bgt.n	801259c <_printf_float+0x370>
 801252c:	f04f 0b00 	mov.w	fp, #0
 8012530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012534:	f104 021a 	add.w	r2, r4, #26
 8012538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801253a:	9305      	str	r3, [sp, #20]
 801253c:	eba3 0309 	sub.w	r3, r3, r9
 8012540:	455b      	cmp	r3, fp
 8012542:	dc33      	bgt.n	80125ac <_printf_float+0x380>
 8012544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012548:	429a      	cmp	r2, r3
 801254a:	db3b      	blt.n	80125c4 <_printf_float+0x398>
 801254c:	6823      	ldr	r3, [r4, #0]
 801254e:	07da      	lsls	r2, r3, #31
 8012550:	d438      	bmi.n	80125c4 <_printf_float+0x398>
 8012552:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012556:	eba2 0903 	sub.w	r9, r2, r3
 801255a:	9b05      	ldr	r3, [sp, #20]
 801255c:	1ad2      	subs	r2, r2, r3
 801255e:	4591      	cmp	r9, r2
 8012560:	bfa8      	it	ge
 8012562:	4691      	movge	r9, r2
 8012564:	f1b9 0f00 	cmp.w	r9, #0
 8012568:	dc35      	bgt.n	80125d6 <_printf_float+0x3aa>
 801256a:	f04f 0800 	mov.w	r8, #0
 801256e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012572:	f104 0a1a 	add.w	sl, r4, #26
 8012576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801257a:	1a9b      	subs	r3, r3, r2
 801257c:	eba3 0309 	sub.w	r3, r3, r9
 8012580:	4543      	cmp	r3, r8
 8012582:	f77f af79 	ble.w	8012478 <_printf_float+0x24c>
 8012586:	2301      	movs	r3, #1
 8012588:	4652      	mov	r2, sl
 801258a:	4631      	mov	r1, r6
 801258c:	4628      	mov	r0, r5
 801258e:	47b8      	blx	r7
 8012590:	3001      	adds	r0, #1
 8012592:	f43f aeaa 	beq.w	80122ea <_printf_float+0xbe>
 8012596:	f108 0801 	add.w	r8, r8, #1
 801259a:	e7ec      	b.n	8012576 <_printf_float+0x34a>
 801259c:	4613      	mov	r3, r2
 801259e:	4631      	mov	r1, r6
 80125a0:	4642      	mov	r2, r8
 80125a2:	4628      	mov	r0, r5
 80125a4:	47b8      	blx	r7
 80125a6:	3001      	adds	r0, #1
 80125a8:	d1c0      	bne.n	801252c <_printf_float+0x300>
 80125aa:	e69e      	b.n	80122ea <_printf_float+0xbe>
 80125ac:	2301      	movs	r3, #1
 80125ae:	4631      	mov	r1, r6
 80125b0:	4628      	mov	r0, r5
 80125b2:	9205      	str	r2, [sp, #20]
 80125b4:	47b8      	blx	r7
 80125b6:	3001      	adds	r0, #1
 80125b8:	f43f ae97 	beq.w	80122ea <_printf_float+0xbe>
 80125bc:	9a05      	ldr	r2, [sp, #20]
 80125be:	f10b 0b01 	add.w	fp, fp, #1
 80125c2:	e7b9      	b.n	8012538 <_printf_float+0x30c>
 80125c4:	ee18 3a10 	vmov	r3, s16
 80125c8:	4652      	mov	r2, sl
 80125ca:	4631      	mov	r1, r6
 80125cc:	4628      	mov	r0, r5
 80125ce:	47b8      	blx	r7
 80125d0:	3001      	adds	r0, #1
 80125d2:	d1be      	bne.n	8012552 <_printf_float+0x326>
 80125d4:	e689      	b.n	80122ea <_printf_float+0xbe>
 80125d6:	9a05      	ldr	r2, [sp, #20]
 80125d8:	464b      	mov	r3, r9
 80125da:	4442      	add	r2, r8
 80125dc:	4631      	mov	r1, r6
 80125de:	4628      	mov	r0, r5
 80125e0:	47b8      	blx	r7
 80125e2:	3001      	adds	r0, #1
 80125e4:	d1c1      	bne.n	801256a <_printf_float+0x33e>
 80125e6:	e680      	b.n	80122ea <_printf_float+0xbe>
 80125e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125ea:	2a01      	cmp	r2, #1
 80125ec:	dc01      	bgt.n	80125f2 <_printf_float+0x3c6>
 80125ee:	07db      	lsls	r3, r3, #31
 80125f0:	d53a      	bpl.n	8012668 <_printf_float+0x43c>
 80125f2:	2301      	movs	r3, #1
 80125f4:	4642      	mov	r2, r8
 80125f6:	4631      	mov	r1, r6
 80125f8:	4628      	mov	r0, r5
 80125fa:	47b8      	blx	r7
 80125fc:	3001      	adds	r0, #1
 80125fe:	f43f ae74 	beq.w	80122ea <_printf_float+0xbe>
 8012602:	ee18 3a10 	vmov	r3, s16
 8012606:	4652      	mov	r2, sl
 8012608:	4631      	mov	r1, r6
 801260a:	4628      	mov	r0, r5
 801260c:	47b8      	blx	r7
 801260e:	3001      	adds	r0, #1
 8012610:	f43f ae6b 	beq.w	80122ea <_printf_float+0xbe>
 8012614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012618:	2200      	movs	r2, #0
 801261a:	2300      	movs	r3, #0
 801261c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012620:	f7ee fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8012624:	b9d8      	cbnz	r0, 801265e <_printf_float+0x432>
 8012626:	f10a 33ff 	add.w	r3, sl, #4294967295
 801262a:	f108 0201 	add.w	r2, r8, #1
 801262e:	4631      	mov	r1, r6
 8012630:	4628      	mov	r0, r5
 8012632:	47b8      	blx	r7
 8012634:	3001      	adds	r0, #1
 8012636:	d10e      	bne.n	8012656 <_printf_float+0x42a>
 8012638:	e657      	b.n	80122ea <_printf_float+0xbe>
 801263a:	2301      	movs	r3, #1
 801263c:	4652      	mov	r2, sl
 801263e:	4631      	mov	r1, r6
 8012640:	4628      	mov	r0, r5
 8012642:	47b8      	blx	r7
 8012644:	3001      	adds	r0, #1
 8012646:	f43f ae50 	beq.w	80122ea <_printf_float+0xbe>
 801264a:	f108 0801 	add.w	r8, r8, #1
 801264e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012650:	3b01      	subs	r3, #1
 8012652:	4543      	cmp	r3, r8
 8012654:	dcf1      	bgt.n	801263a <_printf_float+0x40e>
 8012656:	464b      	mov	r3, r9
 8012658:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801265c:	e6da      	b.n	8012414 <_printf_float+0x1e8>
 801265e:	f04f 0800 	mov.w	r8, #0
 8012662:	f104 0a1a 	add.w	sl, r4, #26
 8012666:	e7f2      	b.n	801264e <_printf_float+0x422>
 8012668:	2301      	movs	r3, #1
 801266a:	4642      	mov	r2, r8
 801266c:	e7df      	b.n	801262e <_printf_float+0x402>
 801266e:	2301      	movs	r3, #1
 8012670:	464a      	mov	r2, r9
 8012672:	4631      	mov	r1, r6
 8012674:	4628      	mov	r0, r5
 8012676:	47b8      	blx	r7
 8012678:	3001      	adds	r0, #1
 801267a:	f43f ae36 	beq.w	80122ea <_printf_float+0xbe>
 801267e:	f108 0801 	add.w	r8, r8, #1
 8012682:	68e3      	ldr	r3, [r4, #12]
 8012684:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012686:	1a5b      	subs	r3, r3, r1
 8012688:	4543      	cmp	r3, r8
 801268a:	dcf0      	bgt.n	801266e <_printf_float+0x442>
 801268c:	e6f8      	b.n	8012480 <_printf_float+0x254>
 801268e:	f04f 0800 	mov.w	r8, #0
 8012692:	f104 0919 	add.w	r9, r4, #25
 8012696:	e7f4      	b.n	8012682 <_printf_float+0x456>

08012698 <_printf_common>:
 8012698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801269c:	4616      	mov	r6, r2
 801269e:	4699      	mov	r9, r3
 80126a0:	688a      	ldr	r2, [r1, #8]
 80126a2:	690b      	ldr	r3, [r1, #16]
 80126a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80126a8:	4293      	cmp	r3, r2
 80126aa:	bfb8      	it	lt
 80126ac:	4613      	movlt	r3, r2
 80126ae:	6033      	str	r3, [r6, #0]
 80126b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80126b4:	4607      	mov	r7, r0
 80126b6:	460c      	mov	r4, r1
 80126b8:	b10a      	cbz	r2, 80126be <_printf_common+0x26>
 80126ba:	3301      	adds	r3, #1
 80126bc:	6033      	str	r3, [r6, #0]
 80126be:	6823      	ldr	r3, [r4, #0]
 80126c0:	0699      	lsls	r1, r3, #26
 80126c2:	bf42      	ittt	mi
 80126c4:	6833      	ldrmi	r3, [r6, #0]
 80126c6:	3302      	addmi	r3, #2
 80126c8:	6033      	strmi	r3, [r6, #0]
 80126ca:	6825      	ldr	r5, [r4, #0]
 80126cc:	f015 0506 	ands.w	r5, r5, #6
 80126d0:	d106      	bne.n	80126e0 <_printf_common+0x48>
 80126d2:	f104 0a19 	add.w	sl, r4, #25
 80126d6:	68e3      	ldr	r3, [r4, #12]
 80126d8:	6832      	ldr	r2, [r6, #0]
 80126da:	1a9b      	subs	r3, r3, r2
 80126dc:	42ab      	cmp	r3, r5
 80126de:	dc26      	bgt.n	801272e <_printf_common+0x96>
 80126e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80126e4:	1e13      	subs	r3, r2, #0
 80126e6:	6822      	ldr	r2, [r4, #0]
 80126e8:	bf18      	it	ne
 80126ea:	2301      	movne	r3, #1
 80126ec:	0692      	lsls	r2, r2, #26
 80126ee:	d42b      	bmi.n	8012748 <_printf_common+0xb0>
 80126f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80126f4:	4649      	mov	r1, r9
 80126f6:	4638      	mov	r0, r7
 80126f8:	47c0      	blx	r8
 80126fa:	3001      	adds	r0, #1
 80126fc:	d01e      	beq.n	801273c <_printf_common+0xa4>
 80126fe:	6823      	ldr	r3, [r4, #0]
 8012700:	6922      	ldr	r2, [r4, #16]
 8012702:	f003 0306 	and.w	r3, r3, #6
 8012706:	2b04      	cmp	r3, #4
 8012708:	bf02      	ittt	eq
 801270a:	68e5      	ldreq	r5, [r4, #12]
 801270c:	6833      	ldreq	r3, [r6, #0]
 801270e:	1aed      	subeq	r5, r5, r3
 8012710:	68a3      	ldr	r3, [r4, #8]
 8012712:	bf0c      	ite	eq
 8012714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012718:	2500      	movne	r5, #0
 801271a:	4293      	cmp	r3, r2
 801271c:	bfc4      	itt	gt
 801271e:	1a9b      	subgt	r3, r3, r2
 8012720:	18ed      	addgt	r5, r5, r3
 8012722:	2600      	movs	r6, #0
 8012724:	341a      	adds	r4, #26
 8012726:	42b5      	cmp	r5, r6
 8012728:	d11a      	bne.n	8012760 <_printf_common+0xc8>
 801272a:	2000      	movs	r0, #0
 801272c:	e008      	b.n	8012740 <_printf_common+0xa8>
 801272e:	2301      	movs	r3, #1
 8012730:	4652      	mov	r2, sl
 8012732:	4649      	mov	r1, r9
 8012734:	4638      	mov	r0, r7
 8012736:	47c0      	blx	r8
 8012738:	3001      	adds	r0, #1
 801273a:	d103      	bne.n	8012744 <_printf_common+0xac>
 801273c:	f04f 30ff 	mov.w	r0, #4294967295
 8012740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012744:	3501      	adds	r5, #1
 8012746:	e7c6      	b.n	80126d6 <_printf_common+0x3e>
 8012748:	18e1      	adds	r1, r4, r3
 801274a:	1c5a      	adds	r2, r3, #1
 801274c:	2030      	movs	r0, #48	; 0x30
 801274e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012752:	4422      	add	r2, r4
 8012754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801275c:	3302      	adds	r3, #2
 801275e:	e7c7      	b.n	80126f0 <_printf_common+0x58>
 8012760:	2301      	movs	r3, #1
 8012762:	4622      	mov	r2, r4
 8012764:	4649      	mov	r1, r9
 8012766:	4638      	mov	r0, r7
 8012768:	47c0      	blx	r8
 801276a:	3001      	adds	r0, #1
 801276c:	d0e6      	beq.n	801273c <_printf_common+0xa4>
 801276e:	3601      	adds	r6, #1
 8012770:	e7d9      	b.n	8012726 <_printf_common+0x8e>
	...

08012774 <_printf_i>:
 8012774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012778:	7e0f      	ldrb	r7, [r1, #24]
 801277a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801277c:	2f78      	cmp	r7, #120	; 0x78
 801277e:	4691      	mov	r9, r2
 8012780:	4680      	mov	r8, r0
 8012782:	460c      	mov	r4, r1
 8012784:	469a      	mov	sl, r3
 8012786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801278a:	d807      	bhi.n	801279c <_printf_i+0x28>
 801278c:	2f62      	cmp	r7, #98	; 0x62
 801278e:	d80a      	bhi.n	80127a6 <_printf_i+0x32>
 8012790:	2f00      	cmp	r7, #0
 8012792:	f000 80d4 	beq.w	801293e <_printf_i+0x1ca>
 8012796:	2f58      	cmp	r7, #88	; 0x58
 8012798:	f000 80c0 	beq.w	801291c <_printf_i+0x1a8>
 801279c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80127a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80127a4:	e03a      	b.n	801281c <_printf_i+0xa8>
 80127a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80127aa:	2b15      	cmp	r3, #21
 80127ac:	d8f6      	bhi.n	801279c <_printf_i+0x28>
 80127ae:	a101      	add	r1, pc, #4	; (adr r1, 80127b4 <_printf_i+0x40>)
 80127b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127b4:	0801280d 	.word	0x0801280d
 80127b8:	08012821 	.word	0x08012821
 80127bc:	0801279d 	.word	0x0801279d
 80127c0:	0801279d 	.word	0x0801279d
 80127c4:	0801279d 	.word	0x0801279d
 80127c8:	0801279d 	.word	0x0801279d
 80127cc:	08012821 	.word	0x08012821
 80127d0:	0801279d 	.word	0x0801279d
 80127d4:	0801279d 	.word	0x0801279d
 80127d8:	0801279d 	.word	0x0801279d
 80127dc:	0801279d 	.word	0x0801279d
 80127e0:	08012925 	.word	0x08012925
 80127e4:	0801284d 	.word	0x0801284d
 80127e8:	080128df 	.word	0x080128df
 80127ec:	0801279d 	.word	0x0801279d
 80127f0:	0801279d 	.word	0x0801279d
 80127f4:	08012947 	.word	0x08012947
 80127f8:	0801279d 	.word	0x0801279d
 80127fc:	0801284d 	.word	0x0801284d
 8012800:	0801279d 	.word	0x0801279d
 8012804:	0801279d 	.word	0x0801279d
 8012808:	080128e7 	.word	0x080128e7
 801280c:	682b      	ldr	r3, [r5, #0]
 801280e:	1d1a      	adds	r2, r3, #4
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	602a      	str	r2, [r5, #0]
 8012814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801281c:	2301      	movs	r3, #1
 801281e:	e09f      	b.n	8012960 <_printf_i+0x1ec>
 8012820:	6820      	ldr	r0, [r4, #0]
 8012822:	682b      	ldr	r3, [r5, #0]
 8012824:	0607      	lsls	r7, r0, #24
 8012826:	f103 0104 	add.w	r1, r3, #4
 801282a:	6029      	str	r1, [r5, #0]
 801282c:	d501      	bpl.n	8012832 <_printf_i+0xbe>
 801282e:	681e      	ldr	r6, [r3, #0]
 8012830:	e003      	b.n	801283a <_printf_i+0xc6>
 8012832:	0646      	lsls	r6, r0, #25
 8012834:	d5fb      	bpl.n	801282e <_printf_i+0xba>
 8012836:	f9b3 6000 	ldrsh.w	r6, [r3]
 801283a:	2e00      	cmp	r6, #0
 801283c:	da03      	bge.n	8012846 <_printf_i+0xd2>
 801283e:	232d      	movs	r3, #45	; 0x2d
 8012840:	4276      	negs	r6, r6
 8012842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012846:	485a      	ldr	r0, [pc, #360]	; (80129b0 <_printf_i+0x23c>)
 8012848:	230a      	movs	r3, #10
 801284a:	e012      	b.n	8012872 <_printf_i+0xfe>
 801284c:	682b      	ldr	r3, [r5, #0]
 801284e:	6820      	ldr	r0, [r4, #0]
 8012850:	1d19      	adds	r1, r3, #4
 8012852:	6029      	str	r1, [r5, #0]
 8012854:	0605      	lsls	r5, r0, #24
 8012856:	d501      	bpl.n	801285c <_printf_i+0xe8>
 8012858:	681e      	ldr	r6, [r3, #0]
 801285a:	e002      	b.n	8012862 <_printf_i+0xee>
 801285c:	0641      	lsls	r1, r0, #25
 801285e:	d5fb      	bpl.n	8012858 <_printf_i+0xe4>
 8012860:	881e      	ldrh	r6, [r3, #0]
 8012862:	4853      	ldr	r0, [pc, #332]	; (80129b0 <_printf_i+0x23c>)
 8012864:	2f6f      	cmp	r7, #111	; 0x6f
 8012866:	bf0c      	ite	eq
 8012868:	2308      	moveq	r3, #8
 801286a:	230a      	movne	r3, #10
 801286c:	2100      	movs	r1, #0
 801286e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012872:	6865      	ldr	r5, [r4, #4]
 8012874:	60a5      	str	r5, [r4, #8]
 8012876:	2d00      	cmp	r5, #0
 8012878:	bfa2      	ittt	ge
 801287a:	6821      	ldrge	r1, [r4, #0]
 801287c:	f021 0104 	bicge.w	r1, r1, #4
 8012880:	6021      	strge	r1, [r4, #0]
 8012882:	b90e      	cbnz	r6, 8012888 <_printf_i+0x114>
 8012884:	2d00      	cmp	r5, #0
 8012886:	d04b      	beq.n	8012920 <_printf_i+0x1ac>
 8012888:	4615      	mov	r5, r2
 801288a:	fbb6 f1f3 	udiv	r1, r6, r3
 801288e:	fb03 6711 	mls	r7, r3, r1, r6
 8012892:	5dc7      	ldrb	r7, [r0, r7]
 8012894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012898:	4637      	mov	r7, r6
 801289a:	42bb      	cmp	r3, r7
 801289c:	460e      	mov	r6, r1
 801289e:	d9f4      	bls.n	801288a <_printf_i+0x116>
 80128a0:	2b08      	cmp	r3, #8
 80128a2:	d10b      	bne.n	80128bc <_printf_i+0x148>
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	07de      	lsls	r6, r3, #31
 80128a8:	d508      	bpl.n	80128bc <_printf_i+0x148>
 80128aa:	6923      	ldr	r3, [r4, #16]
 80128ac:	6861      	ldr	r1, [r4, #4]
 80128ae:	4299      	cmp	r1, r3
 80128b0:	bfde      	ittt	le
 80128b2:	2330      	movle	r3, #48	; 0x30
 80128b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80128b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80128bc:	1b52      	subs	r2, r2, r5
 80128be:	6122      	str	r2, [r4, #16]
 80128c0:	f8cd a000 	str.w	sl, [sp]
 80128c4:	464b      	mov	r3, r9
 80128c6:	aa03      	add	r2, sp, #12
 80128c8:	4621      	mov	r1, r4
 80128ca:	4640      	mov	r0, r8
 80128cc:	f7ff fee4 	bl	8012698 <_printf_common>
 80128d0:	3001      	adds	r0, #1
 80128d2:	d14a      	bne.n	801296a <_printf_i+0x1f6>
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295
 80128d8:	b004      	add	sp, #16
 80128da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	f043 0320 	orr.w	r3, r3, #32
 80128e4:	6023      	str	r3, [r4, #0]
 80128e6:	4833      	ldr	r0, [pc, #204]	; (80129b4 <_printf_i+0x240>)
 80128e8:	2778      	movs	r7, #120	; 0x78
 80128ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80128ee:	6823      	ldr	r3, [r4, #0]
 80128f0:	6829      	ldr	r1, [r5, #0]
 80128f2:	061f      	lsls	r7, r3, #24
 80128f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80128f8:	d402      	bmi.n	8012900 <_printf_i+0x18c>
 80128fa:	065f      	lsls	r7, r3, #25
 80128fc:	bf48      	it	mi
 80128fe:	b2b6      	uxthmi	r6, r6
 8012900:	07df      	lsls	r7, r3, #31
 8012902:	bf48      	it	mi
 8012904:	f043 0320 	orrmi.w	r3, r3, #32
 8012908:	6029      	str	r1, [r5, #0]
 801290a:	bf48      	it	mi
 801290c:	6023      	strmi	r3, [r4, #0]
 801290e:	b91e      	cbnz	r6, 8012918 <_printf_i+0x1a4>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	f023 0320 	bic.w	r3, r3, #32
 8012916:	6023      	str	r3, [r4, #0]
 8012918:	2310      	movs	r3, #16
 801291a:	e7a7      	b.n	801286c <_printf_i+0xf8>
 801291c:	4824      	ldr	r0, [pc, #144]	; (80129b0 <_printf_i+0x23c>)
 801291e:	e7e4      	b.n	80128ea <_printf_i+0x176>
 8012920:	4615      	mov	r5, r2
 8012922:	e7bd      	b.n	80128a0 <_printf_i+0x12c>
 8012924:	682b      	ldr	r3, [r5, #0]
 8012926:	6826      	ldr	r6, [r4, #0]
 8012928:	6961      	ldr	r1, [r4, #20]
 801292a:	1d18      	adds	r0, r3, #4
 801292c:	6028      	str	r0, [r5, #0]
 801292e:	0635      	lsls	r5, r6, #24
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	d501      	bpl.n	8012938 <_printf_i+0x1c4>
 8012934:	6019      	str	r1, [r3, #0]
 8012936:	e002      	b.n	801293e <_printf_i+0x1ca>
 8012938:	0670      	lsls	r0, r6, #25
 801293a:	d5fb      	bpl.n	8012934 <_printf_i+0x1c0>
 801293c:	8019      	strh	r1, [r3, #0]
 801293e:	2300      	movs	r3, #0
 8012940:	6123      	str	r3, [r4, #16]
 8012942:	4615      	mov	r5, r2
 8012944:	e7bc      	b.n	80128c0 <_printf_i+0x14c>
 8012946:	682b      	ldr	r3, [r5, #0]
 8012948:	1d1a      	adds	r2, r3, #4
 801294a:	602a      	str	r2, [r5, #0]
 801294c:	681d      	ldr	r5, [r3, #0]
 801294e:	6862      	ldr	r2, [r4, #4]
 8012950:	2100      	movs	r1, #0
 8012952:	4628      	mov	r0, r5
 8012954:	f7ed fc3c 	bl	80001d0 <memchr>
 8012958:	b108      	cbz	r0, 801295e <_printf_i+0x1ea>
 801295a:	1b40      	subs	r0, r0, r5
 801295c:	6060      	str	r0, [r4, #4]
 801295e:	6863      	ldr	r3, [r4, #4]
 8012960:	6123      	str	r3, [r4, #16]
 8012962:	2300      	movs	r3, #0
 8012964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012968:	e7aa      	b.n	80128c0 <_printf_i+0x14c>
 801296a:	6923      	ldr	r3, [r4, #16]
 801296c:	462a      	mov	r2, r5
 801296e:	4649      	mov	r1, r9
 8012970:	4640      	mov	r0, r8
 8012972:	47d0      	blx	sl
 8012974:	3001      	adds	r0, #1
 8012976:	d0ad      	beq.n	80128d4 <_printf_i+0x160>
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	079b      	lsls	r3, r3, #30
 801297c:	d413      	bmi.n	80129a6 <_printf_i+0x232>
 801297e:	68e0      	ldr	r0, [r4, #12]
 8012980:	9b03      	ldr	r3, [sp, #12]
 8012982:	4298      	cmp	r0, r3
 8012984:	bfb8      	it	lt
 8012986:	4618      	movlt	r0, r3
 8012988:	e7a6      	b.n	80128d8 <_printf_i+0x164>
 801298a:	2301      	movs	r3, #1
 801298c:	4632      	mov	r2, r6
 801298e:	4649      	mov	r1, r9
 8012990:	4640      	mov	r0, r8
 8012992:	47d0      	blx	sl
 8012994:	3001      	adds	r0, #1
 8012996:	d09d      	beq.n	80128d4 <_printf_i+0x160>
 8012998:	3501      	adds	r5, #1
 801299a:	68e3      	ldr	r3, [r4, #12]
 801299c:	9903      	ldr	r1, [sp, #12]
 801299e:	1a5b      	subs	r3, r3, r1
 80129a0:	42ab      	cmp	r3, r5
 80129a2:	dcf2      	bgt.n	801298a <_printf_i+0x216>
 80129a4:	e7eb      	b.n	801297e <_printf_i+0x20a>
 80129a6:	2500      	movs	r5, #0
 80129a8:	f104 0619 	add.w	r6, r4, #25
 80129ac:	e7f5      	b.n	801299a <_printf_i+0x226>
 80129ae:	bf00      	nop
 80129b0:	0801843e 	.word	0x0801843e
 80129b4:	0801844f 	.word	0x0801844f

080129b8 <_scanf_float>:
 80129b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129bc:	b087      	sub	sp, #28
 80129be:	4617      	mov	r7, r2
 80129c0:	9303      	str	r3, [sp, #12]
 80129c2:	688b      	ldr	r3, [r1, #8]
 80129c4:	1e5a      	subs	r2, r3, #1
 80129c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80129ca:	bf83      	ittte	hi
 80129cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80129d0:	195b      	addhi	r3, r3, r5
 80129d2:	9302      	strhi	r3, [sp, #8]
 80129d4:	2300      	movls	r3, #0
 80129d6:	bf86      	itte	hi
 80129d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80129dc:	608b      	strhi	r3, [r1, #8]
 80129de:	9302      	strls	r3, [sp, #8]
 80129e0:	680b      	ldr	r3, [r1, #0]
 80129e2:	468b      	mov	fp, r1
 80129e4:	2500      	movs	r5, #0
 80129e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80129ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80129ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80129f2:	4680      	mov	r8, r0
 80129f4:	460c      	mov	r4, r1
 80129f6:	465e      	mov	r6, fp
 80129f8:	46aa      	mov	sl, r5
 80129fa:	46a9      	mov	r9, r5
 80129fc:	9501      	str	r5, [sp, #4]
 80129fe:	68a2      	ldr	r2, [r4, #8]
 8012a00:	b152      	cbz	r2, 8012a18 <_scanf_float+0x60>
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	2b4e      	cmp	r3, #78	; 0x4e
 8012a08:	d864      	bhi.n	8012ad4 <_scanf_float+0x11c>
 8012a0a:	2b40      	cmp	r3, #64	; 0x40
 8012a0c:	d83c      	bhi.n	8012a88 <_scanf_float+0xd0>
 8012a0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012a12:	b2c8      	uxtb	r0, r1
 8012a14:	280e      	cmp	r0, #14
 8012a16:	d93a      	bls.n	8012a8e <_scanf_float+0xd6>
 8012a18:	f1b9 0f00 	cmp.w	r9, #0
 8012a1c:	d003      	beq.n	8012a26 <_scanf_float+0x6e>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a24:	6023      	str	r3, [r4, #0]
 8012a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a2a:	f1ba 0f01 	cmp.w	sl, #1
 8012a2e:	f200 8113 	bhi.w	8012c58 <_scanf_float+0x2a0>
 8012a32:	455e      	cmp	r6, fp
 8012a34:	f200 8105 	bhi.w	8012c42 <_scanf_float+0x28a>
 8012a38:	2501      	movs	r5, #1
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	b007      	add	sp, #28
 8012a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012a46:	2a0d      	cmp	r2, #13
 8012a48:	d8e6      	bhi.n	8012a18 <_scanf_float+0x60>
 8012a4a:	a101      	add	r1, pc, #4	; (adr r1, 8012a50 <_scanf_float+0x98>)
 8012a4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012a50:	08012b8f 	.word	0x08012b8f
 8012a54:	08012a19 	.word	0x08012a19
 8012a58:	08012a19 	.word	0x08012a19
 8012a5c:	08012a19 	.word	0x08012a19
 8012a60:	08012bef 	.word	0x08012bef
 8012a64:	08012bc7 	.word	0x08012bc7
 8012a68:	08012a19 	.word	0x08012a19
 8012a6c:	08012a19 	.word	0x08012a19
 8012a70:	08012b9d 	.word	0x08012b9d
 8012a74:	08012a19 	.word	0x08012a19
 8012a78:	08012a19 	.word	0x08012a19
 8012a7c:	08012a19 	.word	0x08012a19
 8012a80:	08012a19 	.word	0x08012a19
 8012a84:	08012b55 	.word	0x08012b55
 8012a88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012a8c:	e7db      	b.n	8012a46 <_scanf_float+0x8e>
 8012a8e:	290e      	cmp	r1, #14
 8012a90:	d8c2      	bhi.n	8012a18 <_scanf_float+0x60>
 8012a92:	a001      	add	r0, pc, #4	; (adr r0, 8012a98 <_scanf_float+0xe0>)
 8012a94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012a98:	08012b47 	.word	0x08012b47
 8012a9c:	08012a19 	.word	0x08012a19
 8012aa0:	08012b47 	.word	0x08012b47
 8012aa4:	08012bdb 	.word	0x08012bdb
 8012aa8:	08012a19 	.word	0x08012a19
 8012aac:	08012af5 	.word	0x08012af5
 8012ab0:	08012b31 	.word	0x08012b31
 8012ab4:	08012b31 	.word	0x08012b31
 8012ab8:	08012b31 	.word	0x08012b31
 8012abc:	08012b31 	.word	0x08012b31
 8012ac0:	08012b31 	.word	0x08012b31
 8012ac4:	08012b31 	.word	0x08012b31
 8012ac8:	08012b31 	.word	0x08012b31
 8012acc:	08012b31 	.word	0x08012b31
 8012ad0:	08012b31 	.word	0x08012b31
 8012ad4:	2b6e      	cmp	r3, #110	; 0x6e
 8012ad6:	d809      	bhi.n	8012aec <_scanf_float+0x134>
 8012ad8:	2b60      	cmp	r3, #96	; 0x60
 8012ada:	d8b2      	bhi.n	8012a42 <_scanf_float+0x8a>
 8012adc:	2b54      	cmp	r3, #84	; 0x54
 8012ade:	d077      	beq.n	8012bd0 <_scanf_float+0x218>
 8012ae0:	2b59      	cmp	r3, #89	; 0x59
 8012ae2:	d199      	bne.n	8012a18 <_scanf_float+0x60>
 8012ae4:	2d07      	cmp	r5, #7
 8012ae6:	d197      	bne.n	8012a18 <_scanf_float+0x60>
 8012ae8:	2508      	movs	r5, #8
 8012aea:	e029      	b.n	8012b40 <_scanf_float+0x188>
 8012aec:	2b74      	cmp	r3, #116	; 0x74
 8012aee:	d06f      	beq.n	8012bd0 <_scanf_float+0x218>
 8012af0:	2b79      	cmp	r3, #121	; 0x79
 8012af2:	e7f6      	b.n	8012ae2 <_scanf_float+0x12a>
 8012af4:	6821      	ldr	r1, [r4, #0]
 8012af6:	05c8      	lsls	r0, r1, #23
 8012af8:	d51a      	bpl.n	8012b30 <_scanf_float+0x178>
 8012afa:	9b02      	ldr	r3, [sp, #8]
 8012afc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012b00:	6021      	str	r1, [r4, #0]
 8012b02:	f109 0901 	add.w	r9, r9, #1
 8012b06:	b11b      	cbz	r3, 8012b10 <_scanf_float+0x158>
 8012b08:	3b01      	subs	r3, #1
 8012b0a:	3201      	adds	r2, #1
 8012b0c:	9302      	str	r3, [sp, #8]
 8012b0e:	60a2      	str	r2, [r4, #8]
 8012b10:	68a3      	ldr	r3, [r4, #8]
 8012b12:	3b01      	subs	r3, #1
 8012b14:	60a3      	str	r3, [r4, #8]
 8012b16:	6923      	ldr	r3, [r4, #16]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	6123      	str	r3, [r4, #16]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	3b01      	subs	r3, #1
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	607b      	str	r3, [r7, #4]
 8012b24:	f340 8084 	ble.w	8012c30 <_scanf_float+0x278>
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	603b      	str	r3, [r7, #0]
 8012b2e:	e766      	b.n	80129fe <_scanf_float+0x46>
 8012b30:	eb1a 0f05 	cmn.w	sl, r5
 8012b34:	f47f af70 	bne.w	8012a18 <_scanf_float+0x60>
 8012b38:	6822      	ldr	r2, [r4, #0]
 8012b3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012b3e:	6022      	str	r2, [r4, #0]
 8012b40:	f806 3b01 	strb.w	r3, [r6], #1
 8012b44:	e7e4      	b.n	8012b10 <_scanf_float+0x158>
 8012b46:	6822      	ldr	r2, [r4, #0]
 8012b48:	0610      	lsls	r0, r2, #24
 8012b4a:	f57f af65 	bpl.w	8012a18 <_scanf_float+0x60>
 8012b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012b52:	e7f4      	b.n	8012b3e <_scanf_float+0x186>
 8012b54:	f1ba 0f00 	cmp.w	sl, #0
 8012b58:	d10e      	bne.n	8012b78 <_scanf_float+0x1c0>
 8012b5a:	f1b9 0f00 	cmp.w	r9, #0
 8012b5e:	d10e      	bne.n	8012b7e <_scanf_float+0x1c6>
 8012b60:	6822      	ldr	r2, [r4, #0]
 8012b62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012b66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012b6a:	d108      	bne.n	8012b7e <_scanf_float+0x1c6>
 8012b6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012b70:	6022      	str	r2, [r4, #0]
 8012b72:	f04f 0a01 	mov.w	sl, #1
 8012b76:	e7e3      	b.n	8012b40 <_scanf_float+0x188>
 8012b78:	f1ba 0f02 	cmp.w	sl, #2
 8012b7c:	d055      	beq.n	8012c2a <_scanf_float+0x272>
 8012b7e:	2d01      	cmp	r5, #1
 8012b80:	d002      	beq.n	8012b88 <_scanf_float+0x1d0>
 8012b82:	2d04      	cmp	r5, #4
 8012b84:	f47f af48 	bne.w	8012a18 <_scanf_float+0x60>
 8012b88:	3501      	adds	r5, #1
 8012b8a:	b2ed      	uxtb	r5, r5
 8012b8c:	e7d8      	b.n	8012b40 <_scanf_float+0x188>
 8012b8e:	f1ba 0f01 	cmp.w	sl, #1
 8012b92:	f47f af41 	bne.w	8012a18 <_scanf_float+0x60>
 8012b96:	f04f 0a02 	mov.w	sl, #2
 8012b9a:	e7d1      	b.n	8012b40 <_scanf_float+0x188>
 8012b9c:	b97d      	cbnz	r5, 8012bbe <_scanf_float+0x206>
 8012b9e:	f1b9 0f00 	cmp.w	r9, #0
 8012ba2:	f47f af3c 	bne.w	8012a1e <_scanf_float+0x66>
 8012ba6:	6822      	ldr	r2, [r4, #0]
 8012ba8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012bac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012bb0:	f47f af39 	bne.w	8012a26 <_scanf_float+0x6e>
 8012bb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012bb8:	6022      	str	r2, [r4, #0]
 8012bba:	2501      	movs	r5, #1
 8012bbc:	e7c0      	b.n	8012b40 <_scanf_float+0x188>
 8012bbe:	2d03      	cmp	r5, #3
 8012bc0:	d0e2      	beq.n	8012b88 <_scanf_float+0x1d0>
 8012bc2:	2d05      	cmp	r5, #5
 8012bc4:	e7de      	b.n	8012b84 <_scanf_float+0x1cc>
 8012bc6:	2d02      	cmp	r5, #2
 8012bc8:	f47f af26 	bne.w	8012a18 <_scanf_float+0x60>
 8012bcc:	2503      	movs	r5, #3
 8012bce:	e7b7      	b.n	8012b40 <_scanf_float+0x188>
 8012bd0:	2d06      	cmp	r5, #6
 8012bd2:	f47f af21 	bne.w	8012a18 <_scanf_float+0x60>
 8012bd6:	2507      	movs	r5, #7
 8012bd8:	e7b2      	b.n	8012b40 <_scanf_float+0x188>
 8012bda:	6822      	ldr	r2, [r4, #0]
 8012bdc:	0591      	lsls	r1, r2, #22
 8012bde:	f57f af1b 	bpl.w	8012a18 <_scanf_float+0x60>
 8012be2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012be6:	6022      	str	r2, [r4, #0]
 8012be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8012bec:	e7a8      	b.n	8012b40 <_scanf_float+0x188>
 8012bee:	6822      	ldr	r2, [r4, #0]
 8012bf0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012bf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012bf8:	d006      	beq.n	8012c08 <_scanf_float+0x250>
 8012bfa:	0550      	lsls	r0, r2, #21
 8012bfc:	f57f af0c 	bpl.w	8012a18 <_scanf_float+0x60>
 8012c00:	f1b9 0f00 	cmp.w	r9, #0
 8012c04:	f43f af0f 	beq.w	8012a26 <_scanf_float+0x6e>
 8012c08:	0591      	lsls	r1, r2, #22
 8012c0a:	bf58      	it	pl
 8012c0c:	9901      	ldrpl	r1, [sp, #4]
 8012c0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012c12:	bf58      	it	pl
 8012c14:	eba9 0101 	subpl.w	r1, r9, r1
 8012c18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012c1c:	bf58      	it	pl
 8012c1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012c22:	6022      	str	r2, [r4, #0]
 8012c24:	f04f 0900 	mov.w	r9, #0
 8012c28:	e78a      	b.n	8012b40 <_scanf_float+0x188>
 8012c2a:	f04f 0a03 	mov.w	sl, #3
 8012c2e:	e787      	b.n	8012b40 <_scanf_float+0x188>
 8012c30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012c34:	4639      	mov	r1, r7
 8012c36:	4640      	mov	r0, r8
 8012c38:	4798      	blx	r3
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	f43f aedf 	beq.w	80129fe <_scanf_float+0x46>
 8012c40:	e6ea      	b.n	8012a18 <_scanf_float+0x60>
 8012c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012c46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012c4a:	463a      	mov	r2, r7
 8012c4c:	4640      	mov	r0, r8
 8012c4e:	4798      	blx	r3
 8012c50:	6923      	ldr	r3, [r4, #16]
 8012c52:	3b01      	subs	r3, #1
 8012c54:	6123      	str	r3, [r4, #16]
 8012c56:	e6ec      	b.n	8012a32 <_scanf_float+0x7a>
 8012c58:	1e6b      	subs	r3, r5, #1
 8012c5a:	2b06      	cmp	r3, #6
 8012c5c:	d825      	bhi.n	8012caa <_scanf_float+0x2f2>
 8012c5e:	2d02      	cmp	r5, #2
 8012c60:	d836      	bhi.n	8012cd0 <_scanf_float+0x318>
 8012c62:	455e      	cmp	r6, fp
 8012c64:	f67f aee8 	bls.w	8012a38 <_scanf_float+0x80>
 8012c68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012c6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012c70:	463a      	mov	r2, r7
 8012c72:	4640      	mov	r0, r8
 8012c74:	4798      	blx	r3
 8012c76:	6923      	ldr	r3, [r4, #16]
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	6123      	str	r3, [r4, #16]
 8012c7c:	e7f1      	b.n	8012c62 <_scanf_float+0x2aa>
 8012c7e:	9802      	ldr	r0, [sp, #8]
 8012c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012c84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012c88:	9002      	str	r0, [sp, #8]
 8012c8a:	463a      	mov	r2, r7
 8012c8c:	4640      	mov	r0, r8
 8012c8e:	4798      	blx	r3
 8012c90:	6923      	ldr	r3, [r4, #16]
 8012c92:	3b01      	subs	r3, #1
 8012c94:	6123      	str	r3, [r4, #16]
 8012c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c9a:	fa5f fa8a 	uxtb.w	sl, sl
 8012c9e:	f1ba 0f02 	cmp.w	sl, #2
 8012ca2:	d1ec      	bne.n	8012c7e <_scanf_float+0x2c6>
 8012ca4:	3d03      	subs	r5, #3
 8012ca6:	b2ed      	uxtb	r5, r5
 8012ca8:	1b76      	subs	r6, r6, r5
 8012caa:	6823      	ldr	r3, [r4, #0]
 8012cac:	05da      	lsls	r2, r3, #23
 8012cae:	d52f      	bpl.n	8012d10 <_scanf_float+0x358>
 8012cb0:	055b      	lsls	r3, r3, #21
 8012cb2:	d510      	bpl.n	8012cd6 <_scanf_float+0x31e>
 8012cb4:	455e      	cmp	r6, fp
 8012cb6:	f67f aebf 	bls.w	8012a38 <_scanf_float+0x80>
 8012cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012cbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012cc2:	463a      	mov	r2, r7
 8012cc4:	4640      	mov	r0, r8
 8012cc6:	4798      	blx	r3
 8012cc8:	6923      	ldr	r3, [r4, #16]
 8012cca:	3b01      	subs	r3, #1
 8012ccc:	6123      	str	r3, [r4, #16]
 8012cce:	e7f1      	b.n	8012cb4 <_scanf_float+0x2fc>
 8012cd0:	46aa      	mov	sl, r5
 8012cd2:	9602      	str	r6, [sp, #8]
 8012cd4:	e7df      	b.n	8012c96 <_scanf_float+0x2de>
 8012cd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012cda:	6923      	ldr	r3, [r4, #16]
 8012cdc:	2965      	cmp	r1, #101	; 0x65
 8012cde:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ce2:	f106 35ff 	add.w	r5, r6, #4294967295
 8012ce6:	6123      	str	r3, [r4, #16]
 8012ce8:	d00c      	beq.n	8012d04 <_scanf_float+0x34c>
 8012cea:	2945      	cmp	r1, #69	; 0x45
 8012cec:	d00a      	beq.n	8012d04 <_scanf_float+0x34c>
 8012cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012cf2:	463a      	mov	r2, r7
 8012cf4:	4640      	mov	r0, r8
 8012cf6:	4798      	blx	r3
 8012cf8:	6923      	ldr	r3, [r4, #16]
 8012cfa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012cfe:	3b01      	subs	r3, #1
 8012d00:	1eb5      	subs	r5, r6, #2
 8012d02:	6123      	str	r3, [r4, #16]
 8012d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d08:	463a      	mov	r2, r7
 8012d0a:	4640      	mov	r0, r8
 8012d0c:	4798      	blx	r3
 8012d0e:	462e      	mov	r6, r5
 8012d10:	6825      	ldr	r5, [r4, #0]
 8012d12:	f015 0510 	ands.w	r5, r5, #16
 8012d16:	d158      	bne.n	8012dca <_scanf_float+0x412>
 8012d18:	7035      	strb	r5, [r6, #0]
 8012d1a:	6823      	ldr	r3, [r4, #0]
 8012d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d24:	d11c      	bne.n	8012d60 <_scanf_float+0x3a8>
 8012d26:	9b01      	ldr	r3, [sp, #4]
 8012d28:	454b      	cmp	r3, r9
 8012d2a:	eba3 0209 	sub.w	r2, r3, r9
 8012d2e:	d124      	bne.n	8012d7a <_scanf_float+0x3c2>
 8012d30:	2200      	movs	r2, #0
 8012d32:	4659      	mov	r1, fp
 8012d34:	4640      	mov	r0, r8
 8012d36:	f002 fe4f 	bl	80159d8 <_strtod_r>
 8012d3a:	9b03      	ldr	r3, [sp, #12]
 8012d3c:	6821      	ldr	r1, [r4, #0]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f011 0f02 	tst.w	r1, #2
 8012d44:	ec57 6b10 	vmov	r6, r7, d0
 8012d48:	f103 0204 	add.w	r2, r3, #4
 8012d4c:	d020      	beq.n	8012d90 <_scanf_float+0x3d8>
 8012d4e:	9903      	ldr	r1, [sp, #12]
 8012d50:	600a      	str	r2, [r1, #0]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	e9c3 6700 	strd	r6, r7, [r3]
 8012d58:	68e3      	ldr	r3, [r4, #12]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	60e3      	str	r3, [r4, #12]
 8012d5e:	e66c      	b.n	8012a3a <_scanf_float+0x82>
 8012d60:	9b04      	ldr	r3, [sp, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d0e4      	beq.n	8012d30 <_scanf_float+0x378>
 8012d66:	9905      	ldr	r1, [sp, #20]
 8012d68:	230a      	movs	r3, #10
 8012d6a:	462a      	mov	r2, r5
 8012d6c:	3101      	adds	r1, #1
 8012d6e:	4640      	mov	r0, r8
 8012d70:	f7ff f9b0 	bl	80120d4 <_strtol_r>
 8012d74:	9b04      	ldr	r3, [sp, #16]
 8012d76:	9e05      	ldr	r6, [sp, #20]
 8012d78:	1ac2      	subs	r2, r0, r3
 8012d7a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012d7e:	429e      	cmp	r6, r3
 8012d80:	bf28      	it	cs
 8012d82:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012d86:	4912      	ldr	r1, [pc, #72]	; (8012dd0 <_scanf_float+0x418>)
 8012d88:	4630      	mov	r0, r6
 8012d8a:	f000 f99b 	bl	80130c4 <siprintf>
 8012d8e:	e7cf      	b.n	8012d30 <_scanf_float+0x378>
 8012d90:	f011 0f04 	tst.w	r1, #4
 8012d94:	9903      	ldr	r1, [sp, #12]
 8012d96:	600a      	str	r2, [r1, #0]
 8012d98:	d1db      	bne.n	8012d52 <_scanf_float+0x39a>
 8012d9a:	f8d3 8000 	ldr.w	r8, [r3]
 8012d9e:	ee10 2a10 	vmov	r2, s0
 8012da2:	ee10 0a10 	vmov	r0, s0
 8012da6:	463b      	mov	r3, r7
 8012da8:	4639      	mov	r1, r7
 8012daa:	f7ed febf 	bl	8000b2c <__aeabi_dcmpun>
 8012dae:	b128      	cbz	r0, 8012dbc <_scanf_float+0x404>
 8012db0:	4808      	ldr	r0, [pc, #32]	; (8012dd4 <_scanf_float+0x41c>)
 8012db2:	f000 fbcf 	bl	8013554 <nanf>
 8012db6:	ed88 0a00 	vstr	s0, [r8]
 8012dba:	e7cd      	b.n	8012d58 <_scanf_float+0x3a0>
 8012dbc:	4630      	mov	r0, r6
 8012dbe:	4639      	mov	r1, r7
 8012dc0:	f7ed ff12 	bl	8000be8 <__aeabi_d2f>
 8012dc4:	f8c8 0000 	str.w	r0, [r8]
 8012dc8:	e7c6      	b.n	8012d58 <_scanf_float+0x3a0>
 8012dca:	2500      	movs	r5, #0
 8012dcc:	e635      	b.n	8012a3a <_scanf_float+0x82>
 8012dce:	bf00      	nop
 8012dd0:	08018460 	.word	0x08018460
 8012dd4:	0801832a 	.word	0x0801832a

08012dd8 <std>:
 8012dd8:	2300      	movs	r3, #0
 8012dda:	b510      	push	{r4, lr}
 8012ddc:	4604      	mov	r4, r0
 8012dde:	e9c0 3300 	strd	r3, r3, [r0]
 8012de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012de6:	6083      	str	r3, [r0, #8]
 8012de8:	8181      	strh	r1, [r0, #12]
 8012dea:	6643      	str	r3, [r0, #100]	; 0x64
 8012dec:	81c2      	strh	r2, [r0, #14]
 8012dee:	6183      	str	r3, [r0, #24]
 8012df0:	4619      	mov	r1, r3
 8012df2:	2208      	movs	r2, #8
 8012df4:	305c      	adds	r0, #92	; 0x5c
 8012df6:	f000 fa87 	bl	8013308 <memset>
 8012dfa:	4b0d      	ldr	r3, [pc, #52]	; (8012e30 <std+0x58>)
 8012dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8012dfe:	4b0d      	ldr	r3, [pc, #52]	; (8012e34 <std+0x5c>)
 8012e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e02:	4b0d      	ldr	r3, [pc, #52]	; (8012e38 <std+0x60>)
 8012e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e06:	4b0d      	ldr	r3, [pc, #52]	; (8012e3c <std+0x64>)
 8012e08:	6323      	str	r3, [r4, #48]	; 0x30
 8012e0a:	4b0d      	ldr	r3, [pc, #52]	; (8012e40 <std+0x68>)
 8012e0c:	6224      	str	r4, [r4, #32]
 8012e0e:	429c      	cmp	r4, r3
 8012e10:	d006      	beq.n	8012e20 <std+0x48>
 8012e12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012e16:	4294      	cmp	r4, r2
 8012e18:	d002      	beq.n	8012e20 <std+0x48>
 8012e1a:	33d0      	adds	r3, #208	; 0xd0
 8012e1c:	429c      	cmp	r4, r3
 8012e1e:	d105      	bne.n	8012e2c <std+0x54>
 8012e20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e28:	f000 bb82 	b.w	8013530 <__retarget_lock_init_recursive>
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	08013105 	.word	0x08013105
 8012e34:	08013127 	.word	0x08013127
 8012e38:	0801315f 	.word	0x0801315f
 8012e3c:	08013183 	.word	0x08013183
 8012e40:	20003aa0 	.word	0x20003aa0

08012e44 <stdio_exit_handler>:
 8012e44:	4a02      	ldr	r2, [pc, #8]	; (8012e50 <stdio_exit_handler+0xc>)
 8012e46:	4903      	ldr	r1, [pc, #12]	; (8012e54 <stdio_exit_handler+0x10>)
 8012e48:	4803      	ldr	r0, [pc, #12]	; (8012e58 <stdio_exit_handler+0x14>)
 8012e4a:	f000 b87b 	b.w	8012f44 <_fwalk_sglue>
 8012e4e:	bf00      	nop
 8012e50:	20000118 	.word	0x20000118
 8012e54:	08016029 	.word	0x08016029
 8012e58:	20000124 	.word	0x20000124

08012e5c <cleanup_stdio>:
 8012e5c:	6841      	ldr	r1, [r0, #4]
 8012e5e:	4b0c      	ldr	r3, [pc, #48]	; (8012e90 <cleanup_stdio+0x34>)
 8012e60:	4299      	cmp	r1, r3
 8012e62:	b510      	push	{r4, lr}
 8012e64:	4604      	mov	r4, r0
 8012e66:	d001      	beq.n	8012e6c <cleanup_stdio+0x10>
 8012e68:	f003 f8de 	bl	8016028 <_fflush_r>
 8012e6c:	68a1      	ldr	r1, [r4, #8]
 8012e6e:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <cleanup_stdio+0x38>)
 8012e70:	4299      	cmp	r1, r3
 8012e72:	d002      	beq.n	8012e7a <cleanup_stdio+0x1e>
 8012e74:	4620      	mov	r0, r4
 8012e76:	f003 f8d7 	bl	8016028 <_fflush_r>
 8012e7a:	68e1      	ldr	r1, [r4, #12]
 8012e7c:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <cleanup_stdio+0x3c>)
 8012e7e:	4299      	cmp	r1, r3
 8012e80:	d004      	beq.n	8012e8c <cleanup_stdio+0x30>
 8012e82:	4620      	mov	r0, r4
 8012e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e88:	f003 b8ce 	b.w	8016028 <_fflush_r>
 8012e8c:	bd10      	pop	{r4, pc}
 8012e8e:	bf00      	nop
 8012e90:	20003aa0 	.word	0x20003aa0
 8012e94:	20003b08 	.word	0x20003b08
 8012e98:	20003b70 	.word	0x20003b70

08012e9c <global_stdio_init.part.0>:
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	4b0b      	ldr	r3, [pc, #44]	; (8012ecc <global_stdio_init.part.0+0x30>)
 8012ea0:	4c0b      	ldr	r4, [pc, #44]	; (8012ed0 <global_stdio_init.part.0+0x34>)
 8012ea2:	4a0c      	ldr	r2, [pc, #48]	; (8012ed4 <global_stdio_init.part.0+0x38>)
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2104      	movs	r1, #4
 8012eac:	f7ff ff94 	bl	8012dd8 <std>
 8012eb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	2109      	movs	r1, #9
 8012eb8:	f7ff ff8e 	bl	8012dd8 <std>
 8012ebc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012ec0:	2202      	movs	r2, #2
 8012ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec6:	2112      	movs	r1, #18
 8012ec8:	f7ff bf86 	b.w	8012dd8 <std>
 8012ecc:	20003bd8 	.word	0x20003bd8
 8012ed0:	20003aa0 	.word	0x20003aa0
 8012ed4:	08012e45 	.word	0x08012e45

08012ed8 <__sfp_lock_acquire>:
 8012ed8:	4801      	ldr	r0, [pc, #4]	; (8012ee0 <__sfp_lock_acquire+0x8>)
 8012eda:	f000 bb2a 	b.w	8013532 <__retarget_lock_acquire_recursive>
 8012ede:	bf00      	nop
 8012ee0:	20003be1 	.word	0x20003be1

08012ee4 <__sfp_lock_release>:
 8012ee4:	4801      	ldr	r0, [pc, #4]	; (8012eec <__sfp_lock_release+0x8>)
 8012ee6:	f000 bb25 	b.w	8013534 <__retarget_lock_release_recursive>
 8012eea:	bf00      	nop
 8012eec:	20003be1 	.word	0x20003be1

08012ef0 <__sinit>:
 8012ef0:	b510      	push	{r4, lr}
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	f7ff fff0 	bl	8012ed8 <__sfp_lock_acquire>
 8012ef8:	6a23      	ldr	r3, [r4, #32]
 8012efa:	b11b      	cbz	r3, 8012f04 <__sinit+0x14>
 8012efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f00:	f7ff bff0 	b.w	8012ee4 <__sfp_lock_release>
 8012f04:	4b04      	ldr	r3, [pc, #16]	; (8012f18 <__sinit+0x28>)
 8012f06:	6223      	str	r3, [r4, #32]
 8012f08:	4b04      	ldr	r3, [pc, #16]	; (8012f1c <__sinit+0x2c>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d1f5      	bne.n	8012efc <__sinit+0xc>
 8012f10:	f7ff ffc4 	bl	8012e9c <global_stdio_init.part.0>
 8012f14:	e7f2      	b.n	8012efc <__sinit+0xc>
 8012f16:	bf00      	nop
 8012f18:	08012e5d 	.word	0x08012e5d
 8012f1c:	20003bd8 	.word	0x20003bd8

08012f20 <fiprintf>:
 8012f20:	b40e      	push	{r1, r2, r3}
 8012f22:	b503      	push	{r0, r1, lr}
 8012f24:	4601      	mov	r1, r0
 8012f26:	ab03      	add	r3, sp, #12
 8012f28:	4805      	ldr	r0, [pc, #20]	; (8012f40 <fiprintf+0x20>)
 8012f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f2e:	6800      	ldr	r0, [r0, #0]
 8012f30:	9301      	str	r3, [sp, #4]
 8012f32:	f002 fed9 	bl	8015ce8 <_vfiprintf_r>
 8012f36:	b002      	add	sp, #8
 8012f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f3c:	b003      	add	sp, #12
 8012f3e:	4770      	bx	lr
 8012f40:	20000170 	.word	0x20000170

08012f44 <_fwalk_sglue>:
 8012f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f48:	4607      	mov	r7, r0
 8012f4a:	4688      	mov	r8, r1
 8012f4c:	4614      	mov	r4, r2
 8012f4e:	2600      	movs	r6, #0
 8012f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f54:	f1b9 0901 	subs.w	r9, r9, #1
 8012f58:	d505      	bpl.n	8012f66 <_fwalk_sglue+0x22>
 8012f5a:	6824      	ldr	r4, [r4, #0]
 8012f5c:	2c00      	cmp	r4, #0
 8012f5e:	d1f7      	bne.n	8012f50 <_fwalk_sglue+0xc>
 8012f60:	4630      	mov	r0, r6
 8012f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f66:	89ab      	ldrh	r3, [r5, #12]
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d907      	bls.n	8012f7c <_fwalk_sglue+0x38>
 8012f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f70:	3301      	adds	r3, #1
 8012f72:	d003      	beq.n	8012f7c <_fwalk_sglue+0x38>
 8012f74:	4629      	mov	r1, r5
 8012f76:	4638      	mov	r0, r7
 8012f78:	47c0      	blx	r8
 8012f7a:	4306      	orrs	r6, r0
 8012f7c:	3568      	adds	r5, #104	; 0x68
 8012f7e:	e7e9      	b.n	8012f54 <_fwalk_sglue+0x10>

08012f80 <iprintf>:
 8012f80:	b40f      	push	{r0, r1, r2, r3}
 8012f82:	b507      	push	{r0, r1, r2, lr}
 8012f84:	4906      	ldr	r1, [pc, #24]	; (8012fa0 <iprintf+0x20>)
 8012f86:	ab04      	add	r3, sp, #16
 8012f88:	6808      	ldr	r0, [r1, #0]
 8012f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f8e:	6881      	ldr	r1, [r0, #8]
 8012f90:	9301      	str	r3, [sp, #4]
 8012f92:	f002 fea9 	bl	8015ce8 <_vfiprintf_r>
 8012f96:	b003      	add	sp, #12
 8012f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f9c:	b004      	add	sp, #16
 8012f9e:	4770      	bx	lr
 8012fa0:	20000170 	.word	0x20000170

08012fa4 <_puts_r>:
 8012fa4:	6a03      	ldr	r3, [r0, #32]
 8012fa6:	b570      	push	{r4, r5, r6, lr}
 8012fa8:	6884      	ldr	r4, [r0, #8]
 8012faa:	4605      	mov	r5, r0
 8012fac:	460e      	mov	r6, r1
 8012fae:	b90b      	cbnz	r3, 8012fb4 <_puts_r+0x10>
 8012fb0:	f7ff ff9e 	bl	8012ef0 <__sinit>
 8012fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fb6:	07db      	lsls	r3, r3, #31
 8012fb8:	d405      	bmi.n	8012fc6 <_puts_r+0x22>
 8012fba:	89a3      	ldrh	r3, [r4, #12]
 8012fbc:	0598      	lsls	r0, r3, #22
 8012fbe:	d402      	bmi.n	8012fc6 <_puts_r+0x22>
 8012fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fc2:	f000 fab6 	bl	8013532 <__retarget_lock_acquire_recursive>
 8012fc6:	89a3      	ldrh	r3, [r4, #12]
 8012fc8:	0719      	lsls	r1, r3, #28
 8012fca:	d513      	bpl.n	8012ff4 <_puts_r+0x50>
 8012fcc:	6923      	ldr	r3, [r4, #16]
 8012fce:	b18b      	cbz	r3, 8012ff4 <_puts_r+0x50>
 8012fd0:	3e01      	subs	r6, #1
 8012fd2:	68a3      	ldr	r3, [r4, #8]
 8012fd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	60a3      	str	r3, [r4, #8]
 8012fdc:	b9e9      	cbnz	r1, 801301a <_puts_r+0x76>
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	da2e      	bge.n	8013040 <_puts_r+0x9c>
 8012fe2:	4622      	mov	r2, r4
 8012fe4:	210a      	movs	r1, #10
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f000 f8cf 	bl	801318a <__swbuf_r>
 8012fec:	3001      	adds	r0, #1
 8012fee:	d007      	beq.n	8013000 <_puts_r+0x5c>
 8012ff0:	250a      	movs	r5, #10
 8012ff2:	e007      	b.n	8013004 <_puts_r+0x60>
 8012ff4:	4621      	mov	r1, r4
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	f000 f904 	bl	8013204 <__swsetup_r>
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d0e7      	beq.n	8012fd0 <_puts_r+0x2c>
 8013000:	f04f 35ff 	mov.w	r5, #4294967295
 8013004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013006:	07da      	lsls	r2, r3, #31
 8013008:	d405      	bmi.n	8013016 <_puts_r+0x72>
 801300a:	89a3      	ldrh	r3, [r4, #12]
 801300c:	059b      	lsls	r3, r3, #22
 801300e:	d402      	bmi.n	8013016 <_puts_r+0x72>
 8013010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013012:	f000 fa8f 	bl	8013534 <__retarget_lock_release_recursive>
 8013016:	4628      	mov	r0, r5
 8013018:	bd70      	pop	{r4, r5, r6, pc}
 801301a:	2b00      	cmp	r3, #0
 801301c:	da04      	bge.n	8013028 <_puts_r+0x84>
 801301e:	69a2      	ldr	r2, [r4, #24]
 8013020:	429a      	cmp	r2, r3
 8013022:	dc06      	bgt.n	8013032 <_puts_r+0x8e>
 8013024:	290a      	cmp	r1, #10
 8013026:	d004      	beq.n	8013032 <_puts_r+0x8e>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	1c5a      	adds	r2, r3, #1
 801302c:	6022      	str	r2, [r4, #0]
 801302e:	7019      	strb	r1, [r3, #0]
 8013030:	e7cf      	b.n	8012fd2 <_puts_r+0x2e>
 8013032:	4622      	mov	r2, r4
 8013034:	4628      	mov	r0, r5
 8013036:	f000 f8a8 	bl	801318a <__swbuf_r>
 801303a:	3001      	adds	r0, #1
 801303c:	d1c9      	bne.n	8012fd2 <_puts_r+0x2e>
 801303e:	e7df      	b.n	8013000 <_puts_r+0x5c>
 8013040:	6823      	ldr	r3, [r4, #0]
 8013042:	250a      	movs	r5, #10
 8013044:	1c5a      	adds	r2, r3, #1
 8013046:	6022      	str	r2, [r4, #0]
 8013048:	701d      	strb	r5, [r3, #0]
 801304a:	e7db      	b.n	8013004 <_puts_r+0x60>

0801304c <puts>:
 801304c:	4b02      	ldr	r3, [pc, #8]	; (8013058 <puts+0xc>)
 801304e:	4601      	mov	r1, r0
 8013050:	6818      	ldr	r0, [r3, #0]
 8013052:	f7ff bfa7 	b.w	8012fa4 <_puts_r>
 8013056:	bf00      	nop
 8013058:	20000170 	.word	0x20000170

0801305c <sniprintf>:
 801305c:	b40c      	push	{r2, r3}
 801305e:	b530      	push	{r4, r5, lr}
 8013060:	4b17      	ldr	r3, [pc, #92]	; (80130c0 <sniprintf+0x64>)
 8013062:	1e0c      	subs	r4, r1, #0
 8013064:	681d      	ldr	r5, [r3, #0]
 8013066:	b09d      	sub	sp, #116	; 0x74
 8013068:	da08      	bge.n	801307c <sniprintf+0x20>
 801306a:	238b      	movs	r3, #139	; 0x8b
 801306c:	602b      	str	r3, [r5, #0]
 801306e:	f04f 30ff 	mov.w	r0, #4294967295
 8013072:	b01d      	add	sp, #116	; 0x74
 8013074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013078:	b002      	add	sp, #8
 801307a:	4770      	bx	lr
 801307c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013080:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013084:	bf14      	ite	ne
 8013086:	f104 33ff 	addne.w	r3, r4, #4294967295
 801308a:	4623      	moveq	r3, r4
 801308c:	9304      	str	r3, [sp, #16]
 801308e:	9307      	str	r3, [sp, #28]
 8013090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013094:	9002      	str	r0, [sp, #8]
 8013096:	9006      	str	r0, [sp, #24]
 8013098:	f8ad 3016 	strh.w	r3, [sp, #22]
 801309c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801309e:	ab21      	add	r3, sp, #132	; 0x84
 80130a0:	a902      	add	r1, sp, #8
 80130a2:	4628      	mov	r0, r5
 80130a4:	9301      	str	r3, [sp, #4]
 80130a6:	f002 fcf7 	bl	8015a98 <_svfiprintf_r>
 80130aa:	1c43      	adds	r3, r0, #1
 80130ac:	bfbc      	itt	lt
 80130ae:	238b      	movlt	r3, #139	; 0x8b
 80130b0:	602b      	strlt	r3, [r5, #0]
 80130b2:	2c00      	cmp	r4, #0
 80130b4:	d0dd      	beq.n	8013072 <sniprintf+0x16>
 80130b6:	9b02      	ldr	r3, [sp, #8]
 80130b8:	2200      	movs	r2, #0
 80130ba:	701a      	strb	r2, [r3, #0]
 80130bc:	e7d9      	b.n	8013072 <sniprintf+0x16>
 80130be:	bf00      	nop
 80130c0:	20000170 	.word	0x20000170

080130c4 <siprintf>:
 80130c4:	b40e      	push	{r1, r2, r3}
 80130c6:	b500      	push	{lr}
 80130c8:	b09c      	sub	sp, #112	; 0x70
 80130ca:	ab1d      	add	r3, sp, #116	; 0x74
 80130cc:	9002      	str	r0, [sp, #8]
 80130ce:	9006      	str	r0, [sp, #24]
 80130d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130d4:	4809      	ldr	r0, [pc, #36]	; (80130fc <siprintf+0x38>)
 80130d6:	9107      	str	r1, [sp, #28]
 80130d8:	9104      	str	r1, [sp, #16]
 80130da:	4909      	ldr	r1, [pc, #36]	; (8013100 <siprintf+0x3c>)
 80130dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80130e0:	9105      	str	r1, [sp, #20]
 80130e2:	6800      	ldr	r0, [r0, #0]
 80130e4:	9301      	str	r3, [sp, #4]
 80130e6:	a902      	add	r1, sp, #8
 80130e8:	f002 fcd6 	bl	8015a98 <_svfiprintf_r>
 80130ec:	9b02      	ldr	r3, [sp, #8]
 80130ee:	2200      	movs	r2, #0
 80130f0:	701a      	strb	r2, [r3, #0]
 80130f2:	b01c      	add	sp, #112	; 0x70
 80130f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80130f8:	b003      	add	sp, #12
 80130fa:	4770      	bx	lr
 80130fc:	20000170 	.word	0x20000170
 8013100:	ffff0208 	.word	0xffff0208

08013104 <__sread>:
 8013104:	b510      	push	{r4, lr}
 8013106:	460c      	mov	r4, r1
 8013108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801310c:	f000 f9c2 	bl	8013494 <_read_r>
 8013110:	2800      	cmp	r0, #0
 8013112:	bfab      	itete	ge
 8013114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013116:	89a3      	ldrhlt	r3, [r4, #12]
 8013118:	181b      	addge	r3, r3, r0
 801311a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801311e:	bfac      	ite	ge
 8013120:	6563      	strge	r3, [r4, #84]	; 0x54
 8013122:	81a3      	strhlt	r3, [r4, #12]
 8013124:	bd10      	pop	{r4, pc}

08013126 <__swrite>:
 8013126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801312a:	461f      	mov	r7, r3
 801312c:	898b      	ldrh	r3, [r1, #12]
 801312e:	05db      	lsls	r3, r3, #23
 8013130:	4605      	mov	r5, r0
 8013132:	460c      	mov	r4, r1
 8013134:	4616      	mov	r6, r2
 8013136:	d505      	bpl.n	8013144 <__swrite+0x1e>
 8013138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801313c:	2302      	movs	r3, #2
 801313e:	2200      	movs	r2, #0
 8013140:	f000 f996 	bl	8013470 <_lseek_r>
 8013144:	89a3      	ldrh	r3, [r4, #12]
 8013146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801314a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801314e:	81a3      	strh	r3, [r4, #12]
 8013150:	4632      	mov	r2, r6
 8013152:	463b      	mov	r3, r7
 8013154:	4628      	mov	r0, r5
 8013156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801315a:	f000 b9ad 	b.w	80134b8 <_write_r>

0801315e <__sseek>:
 801315e:	b510      	push	{r4, lr}
 8013160:	460c      	mov	r4, r1
 8013162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013166:	f000 f983 	bl	8013470 <_lseek_r>
 801316a:	1c43      	adds	r3, r0, #1
 801316c:	89a3      	ldrh	r3, [r4, #12]
 801316e:	bf15      	itete	ne
 8013170:	6560      	strne	r0, [r4, #84]	; 0x54
 8013172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801317a:	81a3      	strheq	r3, [r4, #12]
 801317c:	bf18      	it	ne
 801317e:	81a3      	strhne	r3, [r4, #12]
 8013180:	bd10      	pop	{r4, pc}

08013182 <__sclose>:
 8013182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013186:	f000 b963 	b.w	8013450 <_close_r>

0801318a <__swbuf_r>:
 801318a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318c:	460e      	mov	r6, r1
 801318e:	4614      	mov	r4, r2
 8013190:	4605      	mov	r5, r0
 8013192:	b118      	cbz	r0, 801319c <__swbuf_r+0x12>
 8013194:	6a03      	ldr	r3, [r0, #32]
 8013196:	b90b      	cbnz	r3, 801319c <__swbuf_r+0x12>
 8013198:	f7ff feaa 	bl	8012ef0 <__sinit>
 801319c:	69a3      	ldr	r3, [r4, #24]
 801319e:	60a3      	str	r3, [r4, #8]
 80131a0:	89a3      	ldrh	r3, [r4, #12]
 80131a2:	071a      	lsls	r2, r3, #28
 80131a4:	d525      	bpl.n	80131f2 <__swbuf_r+0x68>
 80131a6:	6923      	ldr	r3, [r4, #16]
 80131a8:	b31b      	cbz	r3, 80131f2 <__swbuf_r+0x68>
 80131aa:	6823      	ldr	r3, [r4, #0]
 80131ac:	6922      	ldr	r2, [r4, #16]
 80131ae:	1a98      	subs	r0, r3, r2
 80131b0:	6963      	ldr	r3, [r4, #20]
 80131b2:	b2f6      	uxtb	r6, r6
 80131b4:	4283      	cmp	r3, r0
 80131b6:	4637      	mov	r7, r6
 80131b8:	dc04      	bgt.n	80131c4 <__swbuf_r+0x3a>
 80131ba:	4621      	mov	r1, r4
 80131bc:	4628      	mov	r0, r5
 80131be:	f002 ff33 	bl	8016028 <_fflush_r>
 80131c2:	b9e0      	cbnz	r0, 80131fe <__swbuf_r+0x74>
 80131c4:	68a3      	ldr	r3, [r4, #8]
 80131c6:	3b01      	subs	r3, #1
 80131c8:	60a3      	str	r3, [r4, #8]
 80131ca:	6823      	ldr	r3, [r4, #0]
 80131cc:	1c5a      	adds	r2, r3, #1
 80131ce:	6022      	str	r2, [r4, #0]
 80131d0:	701e      	strb	r6, [r3, #0]
 80131d2:	6962      	ldr	r2, [r4, #20]
 80131d4:	1c43      	adds	r3, r0, #1
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d004      	beq.n	80131e4 <__swbuf_r+0x5a>
 80131da:	89a3      	ldrh	r3, [r4, #12]
 80131dc:	07db      	lsls	r3, r3, #31
 80131de:	d506      	bpl.n	80131ee <__swbuf_r+0x64>
 80131e0:	2e0a      	cmp	r6, #10
 80131e2:	d104      	bne.n	80131ee <__swbuf_r+0x64>
 80131e4:	4621      	mov	r1, r4
 80131e6:	4628      	mov	r0, r5
 80131e8:	f002 ff1e 	bl	8016028 <_fflush_r>
 80131ec:	b938      	cbnz	r0, 80131fe <__swbuf_r+0x74>
 80131ee:	4638      	mov	r0, r7
 80131f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131f2:	4621      	mov	r1, r4
 80131f4:	4628      	mov	r0, r5
 80131f6:	f000 f805 	bl	8013204 <__swsetup_r>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d0d5      	beq.n	80131aa <__swbuf_r+0x20>
 80131fe:	f04f 37ff 	mov.w	r7, #4294967295
 8013202:	e7f4      	b.n	80131ee <__swbuf_r+0x64>

08013204 <__swsetup_r>:
 8013204:	b538      	push	{r3, r4, r5, lr}
 8013206:	4b2a      	ldr	r3, [pc, #168]	; (80132b0 <__swsetup_r+0xac>)
 8013208:	4605      	mov	r5, r0
 801320a:	6818      	ldr	r0, [r3, #0]
 801320c:	460c      	mov	r4, r1
 801320e:	b118      	cbz	r0, 8013218 <__swsetup_r+0x14>
 8013210:	6a03      	ldr	r3, [r0, #32]
 8013212:	b90b      	cbnz	r3, 8013218 <__swsetup_r+0x14>
 8013214:	f7ff fe6c 	bl	8012ef0 <__sinit>
 8013218:	89a3      	ldrh	r3, [r4, #12]
 801321a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801321e:	0718      	lsls	r0, r3, #28
 8013220:	d422      	bmi.n	8013268 <__swsetup_r+0x64>
 8013222:	06d9      	lsls	r1, r3, #27
 8013224:	d407      	bmi.n	8013236 <__swsetup_r+0x32>
 8013226:	2309      	movs	r3, #9
 8013228:	602b      	str	r3, [r5, #0]
 801322a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801322e:	81a3      	strh	r3, [r4, #12]
 8013230:	f04f 30ff 	mov.w	r0, #4294967295
 8013234:	e034      	b.n	80132a0 <__swsetup_r+0x9c>
 8013236:	0758      	lsls	r0, r3, #29
 8013238:	d512      	bpl.n	8013260 <__swsetup_r+0x5c>
 801323a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801323c:	b141      	cbz	r1, 8013250 <__swsetup_r+0x4c>
 801323e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013242:	4299      	cmp	r1, r3
 8013244:	d002      	beq.n	801324c <__swsetup_r+0x48>
 8013246:	4628      	mov	r0, r5
 8013248:	f001 f80c 	bl	8014264 <_free_r>
 801324c:	2300      	movs	r3, #0
 801324e:	6363      	str	r3, [r4, #52]	; 0x34
 8013250:	89a3      	ldrh	r3, [r4, #12]
 8013252:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013256:	81a3      	strh	r3, [r4, #12]
 8013258:	2300      	movs	r3, #0
 801325a:	6063      	str	r3, [r4, #4]
 801325c:	6923      	ldr	r3, [r4, #16]
 801325e:	6023      	str	r3, [r4, #0]
 8013260:	89a3      	ldrh	r3, [r4, #12]
 8013262:	f043 0308 	orr.w	r3, r3, #8
 8013266:	81a3      	strh	r3, [r4, #12]
 8013268:	6923      	ldr	r3, [r4, #16]
 801326a:	b94b      	cbnz	r3, 8013280 <__swsetup_r+0x7c>
 801326c:	89a3      	ldrh	r3, [r4, #12]
 801326e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013276:	d003      	beq.n	8013280 <__swsetup_r+0x7c>
 8013278:	4621      	mov	r1, r4
 801327a:	4628      	mov	r0, r5
 801327c:	f002 ff22 	bl	80160c4 <__smakebuf_r>
 8013280:	89a0      	ldrh	r0, [r4, #12]
 8013282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013286:	f010 0301 	ands.w	r3, r0, #1
 801328a:	d00a      	beq.n	80132a2 <__swsetup_r+0x9e>
 801328c:	2300      	movs	r3, #0
 801328e:	60a3      	str	r3, [r4, #8]
 8013290:	6963      	ldr	r3, [r4, #20]
 8013292:	425b      	negs	r3, r3
 8013294:	61a3      	str	r3, [r4, #24]
 8013296:	6923      	ldr	r3, [r4, #16]
 8013298:	b943      	cbnz	r3, 80132ac <__swsetup_r+0xa8>
 801329a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801329e:	d1c4      	bne.n	801322a <__swsetup_r+0x26>
 80132a0:	bd38      	pop	{r3, r4, r5, pc}
 80132a2:	0781      	lsls	r1, r0, #30
 80132a4:	bf58      	it	pl
 80132a6:	6963      	ldrpl	r3, [r4, #20]
 80132a8:	60a3      	str	r3, [r4, #8]
 80132aa:	e7f4      	b.n	8013296 <__swsetup_r+0x92>
 80132ac:	2000      	movs	r0, #0
 80132ae:	e7f7      	b.n	80132a0 <__swsetup_r+0x9c>
 80132b0:	20000170 	.word	0x20000170

080132b4 <memcmp>:
 80132b4:	b510      	push	{r4, lr}
 80132b6:	3901      	subs	r1, #1
 80132b8:	4402      	add	r2, r0
 80132ba:	4290      	cmp	r0, r2
 80132bc:	d101      	bne.n	80132c2 <memcmp+0xe>
 80132be:	2000      	movs	r0, #0
 80132c0:	e005      	b.n	80132ce <memcmp+0x1a>
 80132c2:	7803      	ldrb	r3, [r0, #0]
 80132c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80132c8:	42a3      	cmp	r3, r4
 80132ca:	d001      	beq.n	80132d0 <memcmp+0x1c>
 80132cc:	1b18      	subs	r0, r3, r4
 80132ce:	bd10      	pop	{r4, pc}
 80132d0:	3001      	adds	r0, #1
 80132d2:	e7f2      	b.n	80132ba <memcmp+0x6>

080132d4 <memmove>:
 80132d4:	4288      	cmp	r0, r1
 80132d6:	b510      	push	{r4, lr}
 80132d8:	eb01 0402 	add.w	r4, r1, r2
 80132dc:	d902      	bls.n	80132e4 <memmove+0x10>
 80132de:	4284      	cmp	r4, r0
 80132e0:	4623      	mov	r3, r4
 80132e2:	d807      	bhi.n	80132f4 <memmove+0x20>
 80132e4:	1e43      	subs	r3, r0, #1
 80132e6:	42a1      	cmp	r1, r4
 80132e8:	d008      	beq.n	80132fc <memmove+0x28>
 80132ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132f2:	e7f8      	b.n	80132e6 <memmove+0x12>
 80132f4:	4402      	add	r2, r0
 80132f6:	4601      	mov	r1, r0
 80132f8:	428a      	cmp	r2, r1
 80132fa:	d100      	bne.n	80132fe <memmove+0x2a>
 80132fc:	bd10      	pop	{r4, pc}
 80132fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013306:	e7f7      	b.n	80132f8 <memmove+0x24>

08013308 <memset>:
 8013308:	4402      	add	r2, r0
 801330a:	4603      	mov	r3, r0
 801330c:	4293      	cmp	r3, r2
 801330e:	d100      	bne.n	8013312 <memset+0xa>
 8013310:	4770      	bx	lr
 8013312:	f803 1b01 	strb.w	r1, [r3], #1
 8013316:	e7f9      	b.n	801330c <memset+0x4>

08013318 <strncmp>:
 8013318:	b510      	push	{r4, lr}
 801331a:	b16a      	cbz	r2, 8013338 <strncmp+0x20>
 801331c:	3901      	subs	r1, #1
 801331e:	1884      	adds	r4, r0, r2
 8013320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013324:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013328:	429a      	cmp	r2, r3
 801332a:	d103      	bne.n	8013334 <strncmp+0x1c>
 801332c:	42a0      	cmp	r0, r4
 801332e:	d001      	beq.n	8013334 <strncmp+0x1c>
 8013330:	2a00      	cmp	r2, #0
 8013332:	d1f5      	bne.n	8013320 <strncmp+0x8>
 8013334:	1ad0      	subs	r0, r2, r3
 8013336:	bd10      	pop	{r4, pc}
 8013338:	4610      	mov	r0, r2
 801333a:	e7fc      	b.n	8013336 <strncmp+0x1e>

0801333c <strncpy>:
 801333c:	b510      	push	{r4, lr}
 801333e:	3901      	subs	r1, #1
 8013340:	4603      	mov	r3, r0
 8013342:	b132      	cbz	r2, 8013352 <strncpy+0x16>
 8013344:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013348:	f803 4b01 	strb.w	r4, [r3], #1
 801334c:	3a01      	subs	r2, #1
 801334e:	2c00      	cmp	r4, #0
 8013350:	d1f7      	bne.n	8013342 <strncpy+0x6>
 8013352:	441a      	add	r2, r3
 8013354:	2100      	movs	r1, #0
 8013356:	4293      	cmp	r3, r2
 8013358:	d100      	bne.n	801335c <strncpy+0x20>
 801335a:	bd10      	pop	{r4, pc}
 801335c:	f803 1b01 	strb.w	r1, [r3], #1
 8013360:	e7f9      	b.n	8013356 <strncpy+0x1a>
	...

08013364 <strtok>:
 8013364:	4b16      	ldr	r3, [pc, #88]	; (80133c0 <strtok+0x5c>)
 8013366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013368:	681e      	ldr	r6, [r3, #0]
 801336a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801336c:	4605      	mov	r5, r0
 801336e:	b9fc      	cbnz	r4, 80133b0 <strtok+0x4c>
 8013370:	2050      	movs	r0, #80	; 0x50
 8013372:	9101      	str	r1, [sp, #4]
 8013374:	f000 ffc2 	bl	80142fc <malloc>
 8013378:	9901      	ldr	r1, [sp, #4]
 801337a:	6470      	str	r0, [r6, #68]	; 0x44
 801337c:	4602      	mov	r2, r0
 801337e:	b920      	cbnz	r0, 801338a <strtok+0x26>
 8013380:	4b10      	ldr	r3, [pc, #64]	; (80133c4 <strtok+0x60>)
 8013382:	4811      	ldr	r0, [pc, #68]	; (80133c8 <strtok+0x64>)
 8013384:	215b      	movs	r1, #91	; 0x5b
 8013386:	f7fe fe01 	bl	8011f8c <__assert_func>
 801338a:	e9c0 4400 	strd	r4, r4, [r0]
 801338e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013392:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013396:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801339a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801339e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80133a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80133a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80133aa:	6184      	str	r4, [r0, #24]
 80133ac:	7704      	strb	r4, [r0, #28]
 80133ae:	6244      	str	r4, [r0, #36]	; 0x24
 80133b0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80133b2:	2301      	movs	r3, #1
 80133b4:	4628      	mov	r0, r5
 80133b6:	b002      	add	sp, #8
 80133b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133bc:	f000 b806 	b.w	80133cc <__strtok_r>
 80133c0:	20000170 	.word	0x20000170
 80133c4:	08018465 	.word	0x08018465
 80133c8:	0801847c 	.word	0x0801847c

080133cc <__strtok_r>:
 80133cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ce:	b908      	cbnz	r0, 80133d4 <__strtok_r+0x8>
 80133d0:	6810      	ldr	r0, [r2, #0]
 80133d2:	b188      	cbz	r0, 80133f8 <__strtok_r+0x2c>
 80133d4:	4604      	mov	r4, r0
 80133d6:	4620      	mov	r0, r4
 80133d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80133dc:	460f      	mov	r7, r1
 80133de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80133e2:	b91e      	cbnz	r6, 80133ec <__strtok_r+0x20>
 80133e4:	b965      	cbnz	r5, 8013400 <__strtok_r+0x34>
 80133e6:	6015      	str	r5, [r2, #0]
 80133e8:	4628      	mov	r0, r5
 80133ea:	e005      	b.n	80133f8 <__strtok_r+0x2c>
 80133ec:	42b5      	cmp	r5, r6
 80133ee:	d1f6      	bne.n	80133de <__strtok_r+0x12>
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d1f0      	bne.n	80133d6 <__strtok_r+0xa>
 80133f4:	6014      	str	r4, [r2, #0]
 80133f6:	7003      	strb	r3, [r0, #0]
 80133f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133fa:	461c      	mov	r4, r3
 80133fc:	e00c      	b.n	8013418 <__strtok_r+0x4c>
 80133fe:	b915      	cbnz	r5, 8013406 <__strtok_r+0x3a>
 8013400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013404:	460e      	mov	r6, r1
 8013406:	f816 5b01 	ldrb.w	r5, [r6], #1
 801340a:	42ab      	cmp	r3, r5
 801340c:	d1f7      	bne.n	80133fe <__strtok_r+0x32>
 801340e:	2b00      	cmp	r3, #0
 8013410:	d0f3      	beq.n	80133fa <__strtok_r+0x2e>
 8013412:	2300      	movs	r3, #0
 8013414:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013418:	6014      	str	r4, [r2, #0]
 801341a:	e7ed      	b.n	80133f8 <__strtok_r+0x2c>

0801341c <strstr>:
 801341c:	780a      	ldrb	r2, [r1, #0]
 801341e:	b570      	push	{r4, r5, r6, lr}
 8013420:	b96a      	cbnz	r2, 801343e <strstr+0x22>
 8013422:	bd70      	pop	{r4, r5, r6, pc}
 8013424:	429a      	cmp	r2, r3
 8013426:	d109      	bne.n	801343c <strstr+0x20>
 8013428:	460c      	mov	r4, r1
 801342a:	4605      	mov	r5, r0
 801342c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013430:	2b00      	cmp	r3, #0
 8013432:	d0f6      	beq.n	8013422 <strstr+0x6>
 8013434:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013438:	429e      	cmp	r6, r3
 801343a:	d0f7      	beq.n	801342c <strstr+0x10>
 801343c:	3001      	adds	r0, #1
 801343e:	7803      	ldrb	r3, [r0, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d1ef      	bne.n	8013424 <strstr+0x8>
 8013444:	4618      	mov	r0, r3
 8013446:	e7ec      	b.n	8013422 <strstr+0x6>

08013448 <_localeconv_r>:
 8013448:	4800      	ldr	r0, [pc, #0]	; (801344c <_localeconv_r+0x4>)
 801344a:	4770      	bx	lr
 801344c:	20000264 	.word	0x20000264

08013450 <_close_r>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	4d06      	ldr	r5, [pc, #24]	; (801346c <_close_r+0x1c>)
 8013454:	2300      	movs	r3, #0
 8013456:	4604      	mov	r4, r0
 8013458:	4608      	mov	r0, r1
 801345a:	602b      	str	r3, [r5, #0]
 801345c:	f7ef fd9a 	bl	8002f94 <_close>
 8013460:	1c43      	adds	r3, r0, #1
 8013462:	d102      	bne.n	801346a <_close_r+0x1a>
 8013464:	682b      	ldr	r3, [r5, #0]
 8013466:	b103      	cbz	r3, 801346a <_close_r+0x1a>
 8013468:	6023      	str	r3, [r4, #0]
 801346a:	bd38      	pop	{r3, r4, r5, pc}
 801346c:	20003bdc 	.word	0x20003bdc

08013470 <_lseek_r>:
 8013470:	b538      	push	{r3, r4, r5, lr}
 8013472:	4d07      	ldr	r5, [pc, #28]	; (8013490 <_lseek_r+0x20>)
 8013474:	4604      	mov	r4, r0
 8013476:	4608      	mov	r0, r1
 8013478:	4611      	mov	r1, r2
 801347a:	2200      	movs	r2, #0
 801347c:	602a      	str	r2, [r5, #0]
 801347e:	461a      	mov	r2, r3
 8013480:	f7ef fdaf 	bl	8002fe2 <_lseek>
 8013484:	1c43      	adds	r3, r0, #1
 8013486:	d102      	bne.n	801348e <_lseek_r+0x1e>
 8013488:	682b      	ldr	r3, [r5, #0]
 801348a:	b103      	cbz	r3, 801348e <_lseek_r+0x1e>
 801348c:	6023      	str	r3, [r4, #0]
 801348e:	bd38      	pop	{r3, r4, r5, pc}
 8013490:	20003bdc 	.word	0x20003bdc

08013494 <_read_r>:
 8013494:	b538      	push	{r3, r4, r5, lr}
 8013496:	4d07      	ldr	r5, [pc, #28]	; (80134b4 <_read_r+0x20>)
 8013498:	4604      	mov	r4, r0
 801349a:	4608      	mov	r0, r1
 801349c:	4611      	mov	r1, r2
 801349e:	2200      	movs	r2, #0
 80134a0:	602a      	str	r2, [r5, #0]
 80134a2:	461a      	mov	r2, r3
 80134a4:	f7ef fd59 	bl	8002f5a <_read>
 80134a8:	1c43      	adds	r3, r0, #1
 80134aa:	d102      	bne.n	80134b2 <_read_r+0x1e>
 80134ac:	682b      	ldr	r3, [r5, #0]
 80134ae:	b103      	cbz	r3, 80134b2 <_read_r+0x1e>
 80134b0:	6023      	str	r3, [r4, #0]
 80134b2:	bd38      	pop	{r3, r4, r5, pc}
 80134b4:	20003bdc 	.word	0x20003bdc

080134b8 <_write_r>:
 80134b8:	b538      	push	{r3, r4, r5, lr}
 80134ba:	4d07      	ldr	r5, [pc, #28]	; (80134d8 <_write_r+0x20>)
 80134bc:	4604      	mov	r4, r0
 80134be:	4608      	mov	r0, r1
 80134c0:	4611      	mov	r1, r2
 80134c2:	2200      	movs	r2, #0
 80134c4:	602a      	str	r2, [r5, #0]
 80134c6:	461a      	mov	r2, r3
 80134c8:	f7ed fdb9 	bl	800103e <_write>
 80134cc:	1c43      	adds	r3, r0, #1
 80134ce:	d102      	bne.n	80134d6 <_write_r+0x1e>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	b103      	cbz	r3, 80134d6 <_write_r+0x1e>
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	bd38      	pop	{r3, r4, r5, pc}
 80134d8:	20003bdc 	.word	0x20003bdc

080134dc <__errno>:
 80134dc:	4b01      	ldr	r3, [pc, #4]	; (80134e4 <__errno+0x8>)
 80134de:	6818      	ldr	r0, [r3, #0]
 80134e0:	4770      	bx	lr
 80134e2:	bf00      	nop
 80134e4:	20000170 	.word	0x20000170

080134e8 <__libc_init_array>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	4d0d      	ldr	r5, [pc, #52]	; (8013520 <__libc_init_array+0x38>)
 80134ec:	4c0d      	ldr	r4, [pc, #52]	; (8013524 <__libc_init_array+0x3c>)
 80134ee:	1b64      	subs	r4, r4, r5
 80134f0:	10a4      	asrs	r4, r4, #2
 80134f2:	2600      	movs	r6, #0
 80134f4:	42a6      	cmp	r6, r4
 80134f6:	d109      	bne.n	801350c <__libc_init_array+0x24>
 80134f8:	4d0b      	ldr	r5, [pc, #44]	; (8013528 <__libc_init_array+0x40>)
 80134fa:	4c0c      	ldr	r4, [pc, #48]	; (801352c <__libc_init_array+0x44>)
 80134fc:	f003 fa60 	bl	80169c0 <_init>
 8013500:	1b64      	subs	r4, r4, r5
 8013502:	10a4      	asrs	r4, r4, #2
 8013504:	2600      	movs	r6, #0
 8013506:	42a6      	cmp	r6, r4
 8013508:	d105      	bne.n	8013516 <__libc_init_array+0x2e>
 801350a:	bd70      	pop	{r4, r5, r6, pc}
 801350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013510:	4798      	blx	r3
 8013512:	3601      	adds	r6, #1
 8013514:	e7ee      	b.n	80134f4 <__libc_init_array+0xc>
 8013516:	f855 3b04 	ldr.w	r3, [r5], #4
 801351a:	4798      	blx	r3
 801351c:	3601      	adds	r6, #1
 801351e:	e7f2      	b.n	8013506 <__libc_init_array+0x1e>
 8013520:	0801877c 	.word	0x0801877c
 8013524:	0801877c 	.word	0x0801877c
 8013528:	0801877c 	.word	0x0801877c
 801352c:	08018780 	.word	0x08018780

08013530 <__retarget_lock_init_recursive>:
 8013530:	4770      	bx	lr

08013532 <__retarget_lock_acquire_recursive>:
 8013532:	4770      	bx	lr

08013534 <__retarget_lock_release_recursive>:
 8013534:	4770      	bx	lr

08013536 <memcpy>:
 8013536:	440a      	add	r2, r1
 8013538:	4291      	cmp	r1, r2
 801353a:	f100 33ff 	add.w	r3, r0, #4294967295
 801353e:	d100      	bne.n	8013542 <memcpy+0xc>
 8013540:	4770      	bx	lr
 8013542:	b510      	push	{r4, lr}
 8013544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013548:	f803 4f01 	strb.w	r4, [r3, #1]!
 801354c:	4291      	cmp	r1, r2
 801354e:	d1f9      	bne.n	8013544 <memcpy+0xe>
 8013550:	bd10      	pop	{r4, pc}
	...

08013554 <nanf>:
 8013554:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801355c <nanf+0x8>
 8013558:	4770      	bx	lr
 801355a:	bf00      	nop
 801355c:	7fc00000 	.word	0x7fc00000

08013560 <abort>:
 8013560:	b508      	push	{r3, lr}
 8013562:	2006      	movs	r0, #6
 8013564:	f002 fe12 	bl	801618c <raise>
 8013568:	2001      	movs	r0, #1
 801356a:	f7ef fcec 	bl	8002f46 <_exit>

0801356e <quorem>:
 801356e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013572:	6903      	ldr	r3, [r0, #16]
 8013574:	690c      	ldr	r4, [r1, #16]
 8013576:	42a3      	cmp	r3, r4
 8013578:	4607      	mov	r7, r0
 801357a:	db7e      	blt.n	801367a <quorem+0x10c>
 801357c:	3c01      	subs	r4, #1
 801357e:	f101 0814 	add.w	r8, r1, #20
 8013582:	f100 0514 	add.w	r5, r0, #20
 8013586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801358a:	9301      	str	r3, [sp, #4]
 801358c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013594:	3301      	adds	r3, #1
 8013596:	429a      	cmp	r2, r3
 8013598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801359c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80135a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80135a4:	d331      	bcc.n	801360a <quorem+0x9c>
 80135a6:	f04f 0e00 	mov.w	lr, #0
 80135aa:	4640      	mov	r0, r8
 80135ac:	46ac      	mov	ip, r5
 80135ae:	46f2      	mov	sl, lr
 80135b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80135b4:	b293      	uxth	r3, r2
 80135b6:	fb06 e303 	mla	r3, r6, r3, lr
 80135ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80135be:	0c1a      	lsrs	r2, r3, #16
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	ebaa 0303 	sub.w	r3, sl, r3
 80135c6:	f8dc a000 	ldr.w	sl, [ip]
 80135ca:	fa13 f38a 	uxtah	r3, r3, sl
 80135ce:	fb06 220e 	mla	r2, r6, lr, r2
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	9b00      	ldr	r3, [sp, #0]
 80135d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80135da:	b292      	uxth	r2, r2
 80135dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80135e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80135e8:	4581      	cmp	r9, r0
 80135ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135ee:	f84c 3b04 	str.w	r3, [ip], #4
 80135f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80135f6:	d2db      	bcs.n	80135b0 <quorem+0x42>
 80135f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80135fc:	b92b      	cbnz	r3, 801360a <quorem+0x9c>
 80135fe:	9b01      	ldr	r3, [sp, #4]
 8013600:	3b04      	subs	r3, #4
 8013602:	429d      	cmp	r5, r3
 8013604:	461a      	mov	r2, r3
 8013606:	d32c      	bcc.n	8013662 <quorem+0xf4>
 8013608:	613c      	str	r4, [r7, #16]
 801360a:	4638      	mov	r0, r7
 801360c:	f001 f9f0 	bl	80149f0 <__mcmp>
 8013610:	2800      	cmp	r0, #0
 8013612:	db22      	blt.n	801365a <quorem+0xec>
 8013614:	3601      	adds	r6, #1
 8013616:	4629      	mov	r1, r5
 8013618:	2000      	movs	r0, #0
 801361a:	f858 2b04 	ldr.w	r2, [r8], #4
 801361e:	f8d1 c000 	ldr.w	ip, [r1]
 8013622:	b293      	uxth	r3, r2
 8013624:	1ac3      	subs	r3, r0, r3
 8013626:	0c12      	lsrs	r2, r2, #16
 8013628:	fa13 f38c 	uxtah	r3, r3, ip
 801362c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013634:	b29b      	uxth	r3, r3
 8013636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801363a:	45c1      	cmp	r9, r8
 801363c:	f841 3b04 	str.w	r3, [r1], #4
 8013640:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013644:	d2e9      	bcs.n	801361a <quorem+0xac>
 8013646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801364a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801364e:	b922      	cbnz	r2, 801365a <quorem+0xec>
 8013650:	3b04      	subs	r3, #4
 8013652:	429d      	cmp	r5, r3
 8013654:	461a      	mov	r2, r3
 8013656:	d30a      	bcc.n	801366e <quorem+0x100>
 8013658:	613c      	str	r4, [r7, #16]
 801365a:	4630      	mov	r0, r6
 801365c:	b003      	add	sp, #12
 801365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013662:	6812      	ldr	r2, [r2, #0]
 8013664:	3b04      	subs	r3, #4
 8013666:	2a00      	cmp	r2, #0
 8013668:	d1ce      	bne.n	8013608 <quorem+0x9a>
 801366a:	3c01      	subs	r4, #1
 801366c:	e7c9      	b.n	8013602 <quorem+0x94>
 801366e:	6812      	ldr	r2, [r2, #0]
 8013670:	3b04      	subs	r3, #4
 8013672:	2a00      	cmp	r2, #0
 8013674:	d1f0      	bne.n	8013658 <quorem+0xea>
 8013676:	3c01      	subs	r4, #1
 8013678:	e7eb      	b.n	8013652 <quorem+0xe4>
 801367a:	2000      	movs	r0, #0
 801367c:	e7ee      	b.n	801365c <quorem+0xee>
	...

08013680 <_dtoa_r>:
 8013680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	ed2d 8b04 	vpush	{d8-d9}
 8013688:	69c5      	ldr	r5, [r0, #28]
 801368a:	b093      	sub	sp, #76	; 0x4c
 801368c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013690:	ec57 6b10 	vmov	r6, r7, d0
 8013694:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013698:	9107      	str	r1, [sp, #28]
 801369a:	4604      	mov	r4, r0
 801369c:	920a      	str	r2, [sp, #40]	; 0x28
 801369e:	930d      	str	r3, [sp, #52]	; 0x34
 80136a0:	b975      	cbnz	r5, 80136c0 <_dtoa_r+0x40>
 80136a2:	2010      	movs	r0, #16
 80136a4:	f000 fe2a 	bl	80142fc <malloc>
 80136a8:	4602      	mov	r2, r0
 80136aa:	61e0      	str	r0, [r4, #28]
 80136ac:	b920      	cbnz	r0, 80136b8 <_dtoa_r+0x38>
 80136ae:	4bae      	ldr	r3, [pc, #696]	; (8013968 <_dtoa_r+0x2e8>)
 80136b0:	21ef      	movs	r1, #239	; 0xef
 80136b2:	48ae      	ldr	r0, [pc, #696]	; (801396c <_dtoa_r+0x2ec>)
 80136b4:	f7fe fc6a 	bl	8011f8c <__assert_func>
 80136b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80136bc:	6005      	str	r5, [r0, #0]
 80136be:	60c5      	str	r5, [r0, #12]
 80136c0:	69e3      	ldr	r3, [r4, #28]
 80136c2:	6819      	ldr	r1, [r3, #0]
 80136c4:	b151      	cbz	r1, 80136dc <_dtoa_r+0x5c>
 80136c6:	685a      	ldr	r2, [r3, #4]
 80136c8:	604a      	str	r2, [r1, #4]
 80136ca:	2301      	movs	r3, #1
 80136cc:	4093      	lsls	r3, r2
 80136ce:	608b      	str	r3, [r1, #8]
 80136d0:	4620      	mov	r0, r4
 80136d2:	f000 ff07 	bl	80144e4 <_Bfree>
 80136d6:	69e3      	ldr	r3, [r4, #28]
 80136d8:	2200      	movs	r2, #0
 80136da:	601a      	str	r2, [r3, #0]
 80136dc:	1e3b      	subs	r3, r7, #0
 80136de:	bfbb      	ittet	lt
 80136e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80136e4:	9303      	strlt	r3, [sp, #12]
 80136e6:	2300      	movge	r3, #0
 80136e8:	2201      	movlt	r2, #1
 80136ea:	bfac      	ite	ge
 80136ec:	f8c8 3000 	strge.w	r3, [r8]
 80136f0:	f8c8 2000 	strlt.w	r2, [r8]
 80136f4:	4b9e      	ldr	r3, [pc, #632]	; (8013970 <_dtoa_r+0x2f0>)
 80136f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80136fa:	ea33 0308 	bics.w	r3, r3, r8
 80136fe:	d11b      	bne.n	8013738 <_dtoa_r+0xb8>
 8013700:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013702:	f242 730f 	movw	r3, #9999	; 0x270f
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801370c:	4333      	orrs	r3, r6
 801370e:	f000 8593 	beq.w	8014238 <_dtoa_r+0xbb8>
 8013712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013714:	b963      	cbnz	r3, 8013730 <_dtoa_r+0xb0>
 8013716:	4b97      	ldr	r3, [pc, #604]	; (8013974 <_dtoa_r+0x2f4>)
 8013718:	e027      	b.n	801376a <_dtoa_r+0xea>
 801371a:	4b97      	ldr	r3, [pc, #604]	; (8013978 <_dtoa_r+0x2f8>)
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	3308      	adds	r3, #8
 8013720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013722:	6013      	str	r3, [r2, #0]
 8013724:	9800      	ldr	r0, [sp, #0]
 8013726:	b013      	add	sp, #76	; 0x4c
 8013728:	ecbd 8b04 	vpop	{d8-d9}
 801372c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013730:	4b90      	ldr	r3, [pc, #576]	; (8013974 <_dtoa_r+0x2f4>)
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	3303      	adds	r3, #3
 8013736:	e7f3      	b.n	8013720 <_dtoa_r+0xa0>
 8013738:	ed9d 7b02 	vldr	d7, [sp, #8]
 801373c:	2200      	movs	r2, #0
 801373e:	ec51 0b17 	vmov	r0, r1, d7
 8013742:	eeb0 8a47 	vmov.f32	s16, s14
 8013746:	eef0 8a67 	vmov.f32	s17, s15
 801374a:	2300      	movs	r3, #0
 801374c:	f7ed f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8013750:	4681      	mov	r9, r0
 8013752:	b160      	cbz	r0, 801376e <_dtoa_r+0xee>
 8013754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013756:	2301      	movs	r3, #1
 8013758:	6013      	str	r3, [r2, #0]
 801375a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801375c:	2b00      	cmp	r3, #0
 801375e:	f000 8568 	beq.w	8014232 <_dtoa_r+0xbb2>
 8013762:	4b86      	ldr	r3, [pc, #536]	; (801397c <_dtoa_r+0x2fc>)
 8013764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	3b01      	subs	r3, #1
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	e7da      	b.n	8013724 <_dtoa_r+0xa4>
 801376e:	aa10      	add	r2, sp, #64	; 0x40
 8013770:	a911      	add	r1, sp, #68	; 0x44
 8013772:	4620      	mov	r0, r4
 8013774:	eeb0 0a48 	vmov.f32	s0, s16
 8013778:	eef0 0a68 	vmov.f32	s1, s17
 801377c:	f001 fa4e 	bl	8014c1c <__d2b>
 8013780:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013784:	4682      	mov	sl, r0
 8013786:	2d00      	cmp	r5, #0
 8013788:	d07f      	beq.n	801388a <_dtoa_r+0x20a>
 801378a:	ee18 3a90 	vmov	r3, s17
 801378e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013792:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013796:	ec51 0b18 	vmov	r0, r1, d8
 801379a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801379e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80137a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80137a6:	4619      	mov	r1, r3
 80137a8:	2200      	movs	r2, #0
 80137aa:	4b75      	ldr	r3, [pc, #468]	; (8013980 <_dtoa_r+0x300>)
 80137ac:	f7ec fd6c 	bl	8000288 <__aeabi_dsub>
 80137b0:	a367      	add	r3, pc, #412	; (adr r3, 8013950 <_dtoa_r+0x2d0>)
 80137b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b6:	f7ec ff1f 	bl	80005f8 <__aeabi_dmul>
 80137ba:	a367      	add	r3, pc, #412	; (adr r3, 8013958 <_dtoa_r+0x2d8>)
 80137bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c0:	f7ec fd64 	bl	800028c <__adddf3>
 80137c4:	4606      	mov	r6, r0
 80137c6:	4628      	mov	r0, r5
 80137c8:	460f      	mov	r7, r1
 80137ca:	f7ec feab 	bl	8000524 <__aeabi_i2d>
 80137ce:	a364      	add	r3, pc, #400	; (adr r3, 8013960 <_dtoa_r+0x2e0>)
 80137d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d4:	f7ec ff10 	bl	80005f8 <__aeabi_dmul>
 80137d8:	4602      	mov	r2, r0
 80137da:	460b      	mov	r3, r1
 80137dc:	4630      	mov	r0, r6
 80137de:	4639      	mov	r1, r7
 80137e0:	f7ec fd54 	bl	800028c <__adddf3>
 80137e4:	4606      	mov	r6, r0
 80137e6:	460f      	mov	r7, r1
 80137e8:	f7ed f9b6 	bl	8000b58 <__aeabi_d2iz>
 80137ec:	2200      	movs	r2, #0
 80137ee:	4683      	mov	fp, r0
 80137f0:	2300      	movs	r3, #0
 80137f2:	4630      	mov	r0, r6
 80137f4:	4639      	mov	r1, r7
 80137f6:	f7ed f971 	bl	8000adc <__aeabi_dcmplt>
 80137fa:	b148      	cbz	r0, 8013810 <_dtoa_r+0x190>
 80137fc:	4658      	mov	r0, fp
 80137fe:	f7ec fe91 	bl	8000524 <__aeabi_i2d>
 8013802:	4632      	mov	r2, r6
 8013804:	463b      	mov	r3, r7
 8013806:	f7ed f95f 	bl	8000ac8 <__aeabi_dcmpeq>
 801380a:	b908      	cbnz	r0, 8013810 <_dtoa_r+0x190>
 801380c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013810:	f1bb 0f16 	cmp.w	fp, #22
 8013814:	d857      	bhi.n	80138c6 <_dtoa_r+0x246>
 8013816:	4b5b      	ldr	r3, [pc, #364]	; (8013984 <_dtoa_r+0x304>)
 8013818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013820:	ec51 0b18 	vmov	r0, r1, d8
 8013824:	f7ed f95a 	bl	8000adc <__aeabi_dcmplt>
 8013828:	2800      	cmp	r0, #0
 801382a:	d04e      	beq.n	80138ca <_dtoa_r+0x24a>
 801382c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013830:	2300      	movs	r3, #0
 8013832:	930c      	str	r3, [sp, #48]	; 0x30
 8013834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013836:	1b5b      	subs	r3, r3, r5
 8013838:	1e5a      	subs	r2, r3, #1
 801383a:	bf45      	ittet	mi
 801383c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013840:	9305      	strmi	r3, [sp, #20]
 8013842:	2300      	movpl	r3, #0
 8013844:	2300      	movmi	r3, #0
 8013846:	9206      	str	r2, [sp, #24]
 8013848:	bf54      	ite	pl
 801384a:	9305      	strpl	r3, [sp, #20]
 801384c:	9306      	strmi	r3, [sp, #24]
 801384e:	f1bb 0f00 	cmp.w	fp, #0
 8013852:	db3c      	blt.n	80138ce <_dtoa_r+0x24e>
 8013854:	9b06      	ldr	r3, [sp, #24]
 8013856:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801385a:	445b      	add	r3, fp
 801385c:	9306      	str	r3, [sp, #24]
 801385e:	2300      	movs	r3, #0
 8013860:	9308      	str	r3, [sp, #32]
 8013862:	9b07      	ldr	r3, [sp, #28]
 8013864:	2b09      	cmp	r3, #9
 8013866:	d868      	bhi.n	801393a <_dtoa_r+0x2ba>
 8013868:	2b05      	cmp	r3, #5
 801386a:	bfc4      	itt	gt
 801386c:	3b04      	subgt	r3, #4
 801386e:	9307      	strgt	r3, [sp, #28]
 8013870:	9b07      	ldr	r3, [sp, #28]
 8013872:	f1a3 0302 	sub.w	r3, r3, #2
 8013876:	bfcc      	ite	gt
 8013878:	2500      	movgt	r5, #0
 801387a:	2501      	movle	r5, #1
 801387c:	2b03      	cmp	r3, #3
 801387e:	f200 8085 	bhi.w	801398c <_dtoa_r+0x30c>
 8013882:	e8df f003 	tbb	[pc, r3]
 8013886:	3b2e      	.short	0x3b2e
 8013888:	5839      	.short	0x5839
 801388a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801388e:	441d      	add	r5, r3
 8013890:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013894:	2b20      	cmp	r3, #32
 8013896:	bfc1      	itttt	gt
 8013898:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801389c:	fa08 f803 	lslgt.w	r8, r8, r3
 80138a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80138a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80138a8:	bfd6      	itet	le
 80138aa:	f1c3 0320 	rsble	r3, r3, #32
 80138ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80138b2:	fa06 f003 	lslle.w	r0, r6, r3
 80138b6:	f7ec fe25 	bl	8000504 <__aeabi_ui2d>
 80138ba:	2201      	movs	r2, #1
 80138bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80138c0:	3d01      	subs	r5, #1
 80138c2:	920e      	str	r2, [sp, #56]	; 0x38
 80138c4:	e76f      	b.n	80137a6 <_dtoa_r+0x126>
 80138c6:	2301      	movs	r3, #1
 80138c8:	e7b3      	b.n	8013832 <_dtoa_r+0x1b2>
 80138ca:	900c      	str	r0, [sp, #48]	; 0x30
 80138cc:	e7b2      	b.n	8013834 <_dtoa_r+0x1b4>
 80138ce:	9b05      	ldr	r3, [sp, #20]
 80138d0:	eba3 030b 	sub.w	r3, r3, fp
 80138d4:	9305      	str	r3, [sp, #20]
 80138d6:	f1cb 0300 	rsb	r3, fp, #0
 80138da:	9308      	str	r3, [sp, #32]
 80138dc:	2300      	movs	r3, #0
 80138de:	930b      	str	r3, [sp, #44]	; 0x2c
 80138e0:	e7bf      	b.n	8013862 <_dtoa_r+0x1e2>
 80138e2:	2300      	movs	r3, #0
 80138e4:	9309      	str	r3, [sp, #36]	; 0x24
 80138e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	dc52      	bgt.n	8013992 <_dtoa_r+0x312>
 80138ec:	2301      	movs	r3, #1
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	9304      	str	r3, [sp, #16]
 80138f2:	461a      	mov	r2, r3
 80138f4:	920a      	str	r2, [sp, #40]	; 0x28
 80138f6:	e00b      	b.n	8013910 <_dtoa_r+0x290>
 80138f8:	2301      	movs	r3, #1
 80138fa:	e7f3      	b.n	80138e4 <_dtoa_r+0x264>
 80138fc:	2300      	movs	r3, #0
 80138fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013902:	445b      	add	r3, fp
 8013904:	9301      	str	r3, [sp, #4]
 8013906:	3301      	adds	r3, #1
 8013908:	2b01      	cmp	r3, #1
 801390a:	9304      	str	r3, [sp, #16]
 801390c:	bfb8      	it	lt
 801390e:	2301      	movlt	r3, #1
 8013910:	69e0      	ldr	r0, [r4, #28]
 8013912:	2100      	movs	r1, #0
 8013914:	2204      	movs	r2, #4
 8013916:	f102 0614 	add.w	r6, r2, #20
 801391a:	429e      	cmp	r6, r3
 801391c:	d93d      	bls.n	801399a <_dtoa_r+0x31a>
 801391e:	6041      	str	r1, [r0, #4]
 8013920:	4620      	mov	r0, r4
 8013922:	f000 fd9f 	bl	8014464 <_Balloc>
 8013926:	9000      	str	r0, [sp, #0]
 8013928:	2800      	cmp	r0, #0
 801392a:	d139      	bne.n	80139a0 <_dtoa_r+0x320>
 801392c:	4b16      	ldr	r3, [pc, #88]	; (8013988 <_dtoa_r+0x308>)
 801392e:	4602      	mov	r2, r0
 8013930:	f240 11af 	movw	r1, #431	; 0x1af
 8013934:	e6bd      	b.n	80136b2 <_dtoa_r+0x32>
 8013936:	2301      	movs	r3, #1
 8013938:	e7e1      	b.n	80138fe <_dtoa_r+0x27e>
 801393a:	2501      	movs	r5, #1
 801393c:	2300      	movs	r3, #0
 801393e:	9307      	str	r3, [sp, #28]
 8013940:	9509      	str	r5, [sp, #36]	; 0x24
 8013942:	f04f 33ff 	mov.w	r3, #4294967295
 8013946:	9301      	str	r3, [sp, #4]
 8013948:	9304      	str	r3, [sp, #16]
 801394a:	2200      	movs	r2, #0
 801394c:	2312      	movs	r3, #18
 801394e:	e7d1      	b.n	80138f4 <_dtoa_r+0x274>
 8013950:	636f4361 	.word	0x636f4361
 8013954:	3fd287a7 	.word	0x3fd287a7
 8013958:	8b60c8b3 	.word	0x8b60c8b3
 801395c:	3fc68a28 	.word	0x3fc68a28
 8013960:	509f79fb 	.word	0x509f79fb
 8013964:	3fd34413 	.word	0x3fd34413
 8013968:	08018465 	.word	0x08018465
 801396c:	080184e3 	.word	0x080184e3
 8013970:	7ff00000 	.word	0x7ff00000
 8013974:	080184df 	.word	0x080184df
 8013978:	080184d6 	.word	0x080184d6
 801397c:	0801843d 	.word	0x0801843d
 8013980:	3ff80000 	.word	0x3ff80000
 8013984:	080185d0 	.word	0x080185d0
 8013988:	0801853b 	.word	0x0801853b
 801398c:	2301      	movs	r3, #1
 801398e:	9309      	str	r3, [sp, #36]	; 0x24
 8013990:	e7d7      	b.n	8013942 <_dtoa_r+0x2c2>
 8013992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013994:	9301      	str	r3, [sp, #4]
 8013996:	9304      	str	r3, [sp, #16]
 8013998:	e7ba      	b.n	8013910 <_dtoa_r+0x290>
 801399a:	3101      	adds	r1, #1
 801399c:	0052      	lsls	r2, r2, #1
 801399e:	e7ba      	b.n	8013916 <_dtoa_r+0x296>
 80139a0:	69e3      	ldr	r3, [r4, #28]
 80139a2:	9a00      	ldr	r2, [sp, #0]
 80139a4:	601a      	str	r2, [r3, #0]
 80139a6:	9b04      	ldr	r3, [sp, #16]
 80139a8:	2b0e      	cmp	r3, #14
 80139aa:	f200 80a8 	bhi.w	8013afe <_dtoa_r+0x47e>
 80139ae:	2d00      	cmp	r5, #0
 80139b0:	f000 80a5 	beq.w	8013afe <_dtoa_r+0x47e>
 80139b4:	f1bb 0f00 	cmp.w	fp, #0
 80139b8:	dd38      	ble.n	8013a2c <_dtoa_r+0x3ac>
 80139ba:	4bc0      	ldr	r3, [pc, #768]	; (8013cbc <_dtoa_r+0x63c>)
 80139bc:	f00b 020f 	and.w	r2, fp, #15
 80139c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80139c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80139cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80139d0:	d019      	beq.n	8013a06 <_dtoa_r+0x386>
 80139d2:	4bbb      	ldr	r3, [pc, #748]	; (8013cc0 <_dtoa_r+0x640>)
 80139d4:	ec51 0b18 	vmov	r0, r1, d8
 80139d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80139dc:	f7ec ff36 	bl	800084c <__aeabi_ddiv>
 80139e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139e4:	f008 080f 	and.w	r8, r8, #15
 80139e8:	2503      	movs	r5, #3
 80139ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013cc0 <_dtoa_r+0x640>
 80139ee:	f1b8 0f00 	cmp.w	r8, #0
 80139f2:	d10a      	bne.n	8013a0a <_dtoa_r+0x38a>
 80139f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139f8:	4632      	mov	r2, r6
 80139fa:	463b      	mov	r3, r7
 80139fc:	f7ec ff26 	bl	800084c <__aeabi_ddiv>
 8013a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a04:	e02b      	b.n	8013a5e <_dtoa_r+0x3de>
 8013a06:	2502      	movs	r5, #2
 8013a08:	e7ef      	b.n	80139ea <_dtoa_r+0x36a>
 8013a0a:	f018 0f01 	tst.w	r8, #1
 8013a0e:	d008      	beq.n	8013a22 <_dtoa_r+0x3a2>
 8013a10:	4630      	mov	r0, r6
 8013a12:	4639      	mov	r1, r7
 8013a14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013a18:	f7ec fdee 	bl	80005f8 <__aeabi_dmul>
 8013a1c:	3501      	adds	r5, #1
 8013a1e:	4606      	mov	r6, r0
 8013a20:	460f      	mov	r7, r1
 8013a22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013a26:	f109 0908 	add.w	r9, r9, #8
 8013a2a:	e7e0      	b.n	80139ee <_dtoa_r+0x36e>
 8013a2c:	f000 809f 	beq.w	8013b6e <_dtoa_r+0x4ee>
 8013a30:	f1cb 0600 	rsb	r6, fp, #0
 8013a34:	4ba1      	ldr	r3, [pc, #644]	; (8013cbc <_dtoa_r+0x63c>)
 8013a36:	4fa2      	ldr	r7, [pc, #648]	; (8013cc0 <_dtoa_r+0x640>)
 8013a38:	f006 020f 	and.w	r2, r6, #15
 8013a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a44:	ec51 0b18 	vmov	r0, r1, d8
 8013a48:	f7ec fdd6 	bl	80005f8 <__aeabi_dmul>
 8013a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a50:	1136      	asrs	r6, r6, #4
 8013a52:	2300      	movs	r3, #0
 8013a54:	2502      	movs	r5, #2
 8013a56:	2e00      	cmp	r6, #0
 8013a58:	d17e      	bne.n	8013b58 <_dtoa_r+0x4d8>
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d1d0      	bne.n	8013a00 <_dtoa_r+0x380>
 8013a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f000 8084 	beq.w	8013b72 <_dtoa_r+0x4f2>
 8013a6a:	4b96      	ldr	r3, [pc, #600]	; (8013cc4 <_dtoa_r+0x644>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	4640      	mov	r0, r8
 8013a70:	4649      	mov	r1, r9
 8013a72:	f7ed f833 	bl	8000adc <__aeabi_dcmplt>
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d07b      	beq.n	8013b72 <_dtoa_r+0x4f2>
 8013a7a:	9b04      	ldr	r3, [sp, #16]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d078      	beq.n	8013b72 <_dtoa_r+0x4f2>
 8013a80:	9b01      	ldr	r3, [sp, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	dd39      	ble.n	8013afa <_dtoa_r+0x47a>
 8013a86:	4b90      	ldr	r3, [pc, #576]	; (8013cc8 <_dtoa_r+0x648>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	4640      	mov	r0, r8
 8013a8c:	4649      	mov	r1, r9
 8013a8e:	f7ec fdb3 	bl	80005f8 <__aeabi_dmul>
 8013a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a96:	9e01      	ldr	r6, [sp, #4]
 8013a98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013a9c:	3501      	adds	r5, #1
 8013a9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013aa2:	4628      	mov	r0, r5
 8013aa4:	f7ec fd3e 	bl	8000524 <__aeabi_i2d>
 8013aa8:	4642      	mov	r2, r8
 8013aaa:	464b      	mov	r3, r9
 8013aac:	f7ec fda4 	bl	80005f8 <__aeabi_dmul>
 8013ab0:	4b86      	ldr	r3, [pc, #536]	; (8013ccc <_dtoa_r+0x64c>)
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	f7ec fbea 	bl	800028c <__adddf3>
 8013ab8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ac0:	9303      	str	r3, [sp, #12]
 8013ac2:	2e00      	cmp	r6, #0
 8013ac4:	d158      	bne.n	8013b78 <_dtoa_r+0x4f8>
 8013ac6:	4b82      	ldr	r3, [pc, #520]	; (8013cd0 <_dtoa_r+0x650>)
 8013ac8:	2200      	movs	r2, #0
 8013aca:	4640      	mov	r0, r8
 8013acc:	4649      	mov	r1, r9
 8013ace:	f7ec fbdb 	bl	8000288 <__aeabi_dsub>
 8013ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ad6:	4680      	mov	r8, r0
 8013ad8:	4689      	mov	r9, r1
 8013ada:	f7ed f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	f040 8296 	bne.w	8014010 <_dtoa_r+0x990>
 8013ae4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013ae8:	4640      	mov	r0, r8
 8013aea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013aee:	4649      	mov	r1, r9
 8013af0:	f7ec fff4 	bl	8000adc <__aeabi_dcmplt>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	f040 8289 	bne.w	801400c <_dtoa_r+0x98c>
 8013afa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f2c0 814e 	blt.w	8013da2 <_dtoa_r+0x722>
 8013b06:	f1bb 0f0e 	cmp.w	fp, #14
 8013b0a:	f300 814a 	bgt.w	8013da2 <_dtoa_r+0x722>
 8013b0e:	4b6b      	ldr	r3, [pc, #428]	; (8013cbc <_dtoa_r+0x63c>)
 8013b10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013b14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f280 80dc 	bge.w	8013cd8 <_dtoa_r+0x658>
 8013b20:	9b04      	ldr	r3, [sp, #16]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	f300 80d8 	bgt.w	8013cd8 <_dtoa_r+0x658>
 8013b28:	f040 826f 	bne.w	801400a <_dtoa_r+0x98a>
 8013b2c:	4b68      	ldr	r3, [pc, #416]	; (8013cd0 <_dtoa_r+0x650>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	4640      	mov	r0, r8
 8013b32:	4649      	mov	r1, r9
 8013b34:	f7ec fd60 	bl	80005f8 <__aeabi_dmul>
 8013b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b3c:	f7ec ffe2 	bl	8000b04 <__aeabi_dcmpge>
 8013b40:	9e04      	ldr	r6, [sp, #16]
 8013b42:	4637      	mov	r7, r6
 8013b44:	2800      	cmp	r0, #0
 8013b46:	f040 8245 	bne.w	8013fd4 <_dtoa_r+0x954>
 8013b4a:	9d00      	ldr	r5, [sp, #0]
 8013b4c:	2331      	movs	r3, #49	; 0x31
 8013b4e:	f805 3b01 	strb.w	r3, [r5], #1
 8013b52:	f10b 0b01 	add.w	fp, fp, #1
 8013b56:	e241      	b.n	8013fdc <_dtoa_r+0x95c>
 8013b58:	07f2      	lsls	r2, r6, #31
 8013b5a:	d505      	bpl.n	8013b68 <_dtoa_r+0x4e8>
 8013b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b60:	f7ec fd4a 	bl	80005f8 <__aeabi_dmul>
 8013b64:	3501      	adds	r5, #1
 8013b66:	2301      	movs	r3, #1
 8013b68:	1076      	asrs	r6, r6, #1
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	e773      	b.n	8013a56 <_dtoa_r+0x3d6>
 8013b6e:	2502      	movs	r5, #2
 8013b70:	e775      	b.n	8013a5e <_dtoa_r+0x3de>
 8013b72:	9e04      	ldr	r6, [sp, #16]
 8013b74:	465f      	mov	r7, fp
 8013b76:	e792      	b.n	8013a9e <_dtoa_r+0x41e>
 8013b78:	9900      	ldr	r1, [sp, #0]
 8013b7a:	4b50      	ldr	r3, [pc, #320]	; (8013cbc <_dtoa_r+0x63c>)
 8013b7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b80:	4431      	add	r1, r6
 8013b82:	9102      	str	r1, [sp, #8]
 8013b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b86:	eeb0 9a47 	vmov.f32	s18, s14
 8013b8a:	eef0 9a67 	vmov.f32	s19, s15
 8013b8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013b96:	2900      	cmp	r1, #0
 8013b98:	d044      	beq.n	8013c24 <_dtoa_r+0x5a4>
 8013b9a:	494e      	ldr	r1, [pc, #312]	; (8013cd4 <_dtoa_r+0x654>)
 8013b9c:	2000      	movs	r0, #0
 8013b9e:	f7ec fe55 	bl	800084c <__aeabi_ddiv>
 8013ba2:	ec53 2b19 	vmov	r2, r3, d9
 8013ba6:	f7ec fb6f 	bl	8000288 <__aeabi_dsub>
 8013baa:	9d00      	ldr	r5, [sp, #0]
 8013bac:	ec41 0b19 	vmov	d9, r0, r1
 8013bb0:	4649      	mov	r1, r9
 8013bb2:	4640      	mov	r0, r8
 8013bb4:	f7ec ffd0 	bl	8000b58 <__aeabi_d2iz>
 8013bb8:	4606      	mov	r6, r0
 8013bba:	f7ec fcb3 	bl	8000524 <__aeabi_i2d>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	4640      	mov	r0, r8
 8013bc4:	4649      	mov	r1, r9
 8013bc6:	f7ec fb5f 	bl	8000288 <__aeabi_dsub>
 8013bca:	3630      	adds	r6, #48	; 0x30
 8013bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8013bd0:	ec53 2b19 	vmov	r2, r3, d9
 8013bd4:	4680      	mov	r8, r0
 8013bd6:	4689      	mov	r9, r1
 8013bd8:	f7ec ff80 	bl	8000adc <__aeabi_dcmplt>
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d164      	bne.n	8013caa <_dtoa_r+0x62a>
 8013be0:	4642      	mov	r2, r8
 8013be2:	464b      	mov	r3, r9
 8013be4:	4937      	ldr	r1, [pc, #220]	; (8013cc4 <_dtoa_r+0x644>)
 8013be6:	2000      	movs	r0, #0
 8013be8:	f7ec fb4e 	bl	8000288 <__aeabi_dsub>
 8013bec:	ec53 2b19 	vmov	r2, r3, d9
 8013bf0:	f7ec ff74 	bl	8000adc <__aeabi_dcmplt>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	f040 80b6 	bne.w	8013d66 <_dtoa_r+0x6e6>
 8013bfa:	9b02      	ldr	r3, [sp, #8]
 8013bfc:	429d      	cmp	r5, r3
 8013bfe:	f43f af7c 	beq.w	8013afa <_dtoa_r+0x47a>
 8013c02:	4b31      	ldr	r3, [pc, #196]	; (8013cc8 <_dtoa_r+0x648>)
 8013c04:	ec51 0b19 	vmov	r0, r1, d9
 8013c08:	2200      	movs	r2, #0
 8013c0a:	f7ec fcf5 	bl	80005f8 <__aeabi_dmul>
 8013c0e:	4b2e      	ldr	r3, [pc, #184]	; (8013cc8 <_dtoa_r+0x648>)
 8013c10:	ec41 0b19 	vmov	d9, r0, r1
 8013c14:	2200      	movs	r2, #0
 8013c16:	4640      	mov	r0, r8
 8013c18:	4649      	mov	r1, r9
 8013c1a:	f7ec fced 	bl	80005f8 <__aeabi_dmul>
 8013c1e:	4680      	mov	r8, r0
 8013c20:	4689      	mov	r9, r1
 8013c22:	e7c5      	b.n	8013bb0 <_dtoa_r+0x530>
 8013c24:	ec51 0b17 	vmov	r0, r1, d7
 8013c28:	f7ec fce6 	bl	80005f8 <__aeabi_dmul>
 8013c2c:	9b02      	ldr	r3, [sp, #8]
 8013c2e:	9d00      	ldr	r5, [sp, #0]
 8013c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c32:	ec41 0b19 	vmov	d9, r0, r1
 8013c36:	4649      	mov	r1, r9
 8013c38:	4640      	mov	r0, r8
 8013c3a:	f7ec ff8d 	bl	8000b58 <__aeabi_d2iz>
 8013c3e:	4606      	mov	r6, r0
 8013c40:	f7ec fc70 	bl	8000524 <__aeabi_i2d>
 8013c44:	3630      	adds	r6, #48	; 0x30
 8013c46:	4602      	mov	r2, r0
 8013c48:	460b      	mov	r3, r1
 8013c4a:	4640      	mov	r0, r8
 8013c4c:	4649      	mov	r1, r9
 8013c4e:	f7ec fb1b 	bl	8000288 <__aeabi_dsub>
 8013c52:	f805 6b01 	strb.w	r6, [r5], #1
 8013c56:	9b02      	ldr	r3, [sp, #8]
 8013c58:	429d      	cmp	r5, r3
 8013c5a:	4680      	mov	r8, r0
 8013c5c:	4689      	mov	r9, r1
 8013c5e:	f04f 0200 	mov.w	r2, #0
 8013c62:	d124      	bne.n	8013cae <_dtoa_r+0x62e>
 8013c64:	4b1b      	ldr	r3, [pc, #108]	; (8013cd4 <_dtoa_r+0x654>)
 8013c66:	ec51 0b19 	vmov	r0, r1, d9
 8013c6a:	f7ec fb0f 	bl	800028c <__adddf3>
 8013c6e:	4602      	mov	r2, r0
 8013c70:	460b      	mov	r3, r1
 8013c72:	4640      	mov	r0, r8
 8013c74:	4649      	mov	r1, r9
 8013c76:	f7ec ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d173      	bne.n	8013d66 <_dtoa_r+0x6e6>
 8013c7e:	ec53 2b19 	vmov	r2, r3, d9
 8013c82:	4914      	ldr	r1, [pc, #80]	; (8013cd4 <_dtoa_r+0x654>)
 8013c84:	2000      	movs	r0, #0
 8013c86:	f7ec faff 	bl	8000288 <__aeabi_dsub>
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	4640      	mov	r0, r8
 8013c90:	4649      	mov	r1, r9
 8013c92:	f7ec ff23 	bl	8000adc <__aeabi_dcmplt>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	f43f af2f 	beq.w	8013afa <_dtoa_r+0x47a>
 8013c9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013c9e:	1e6b      	subs	r3, r5, #1
 8013ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ca2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013ca6:	2b30      	cmp	r3, #48	; 0x30
 8013ca8:	d0f8      	beq.n	8013c9c <_dtoa_r+0x61c>
 8013caa:	46bb      	mov	fp, r7
 8013cac:	e04a      	b.n	8013d44 <_dtoa_r+0x6c4>
 8013cae:	4b06      	ldr	r3, [pc, #24]	; (8013cc8 <_dtoa_r+0x648>)
 8013cb0:	f7ec fca2 	bl	80005f8 <__aeabi_dmul>
 8013cb4:	4680      	mov	r8, r0
 8013cb6:	4689      	mov	r9, r1
 8013cb8:	e7bd      	b.n	8013c36 <_dtoa_r+0x5b6>
 8013cba:	bf00      	nop
 8013cbc:	080185d0 	.word	0x080185d0
 8013cc0:	080185a8 	.word	0x080185a8
 8013cc4:	3ff00000 	.word	0x3ff00000
 8013cc8:	40240000 	.word	0x40240000
 8013ccc:	401c0000 	.word	0x401c0000
 8013cd0:	40140000 	.word	0x40140000
 8013cd4:	3fe00000 	.word	0x3fe00000
 8013cd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013cdc:	9d00      	ldr	r5, [sp, #0]
 8013cde:	4642      	mov	r2, r8
 8013ce0:	464b      	mov	r3, r9
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	4639      	mov	r1, r7
 8013ce6:	f7ec fdb1 	bl	800084c <__aeabi_ddiv>
 8013cea:	f7ec ff35 	bl	8000b58 <__aeabi_d2iz>
 8013cee:	9001      	str	r0, [sp, #4]
 8013cf0:	f7ec fc18 	bl	8000524 <__aeabi_i2d>
 8013cf4:	4642      	mov	r2, r8
 8013cf6:	464b      	mov	r3, r9
 8013cf8:	f7ec fc7e 	bl	80005f8 <__aeabi_dmul>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	460b      	mov	r3, r1
 8013d00:	4630      	mov	r0, r6
 8013d02:	4639      	mov	r1, r7
 8013d04:	f7ec fac0 	bl	8000288 <__aeabi_dsub>
 8013d08:	9e01      	ldr	r6, [sp, #4]
 8013d0a:	9f04      	ldr	r7, [sp, #16]
 8013d0c:	3630      	adds	r6, #48	; 0x30
 8013d0e:	f805 6b01 	strb.w	r6, [r5], #1
 8013d12:	9e00      	ldr	r6, [sp, #0]
 8013d14:	1bae      	subs	r6, r5, r6
 8013d16:	42b7      	cmp	r7, r6
 8013d18:	4602      	mov	r2, r0
 8013d1a:	460b      	mov	r3, r1
 8013d1c:	d134      	bne.n	8013d88 <_dtoa_r+0x708>
 8013d1e:	f7ec fab5 	bl	800028c <__adddf3>
 8013d22:	4642      	mov	r2, r8
 8013d24:	464b      	mov	r3, r9
 8013d26:	4606      	mov	r6, r0
 8013d28:	460f      	mov	r7, r1
 8013d2a:	f7ec fef5 	bl	8000b18 <__aeabi_dcmpgt>
 8013d2e:	b9c8      	cbnz	r0, 8013d64 <_dtoa_r+0x6e4>
 8013d30:	4642      	mov	r2, r8
 8013d32:	464b      	mov	r3, r9
 8013d34:	4630      	mov	r0, r6
 8013d36:	4639      	mov	r1, r7
 8013d38:	f7ec fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d3c:	b110      	cbz	r0, 8013d44 <_dtoa_r+0x6c4>
 8013d3e:	9b01      	ldr	r3, [sp, #4]
 8013d40:	07db      	lsls	r3, r3, #31
 8013d42:	d40f      	bmi.n	8013d64 <_dtoa_r+0x6e4>
 8013d44:	4651      	mov	r1, sl
 8013d46:	4620      	mov	r0, r4
 8013d48:	f000 fbcc 	bl	80144e4 <_Bfree>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d50:	702b      	strb	r3, [r5, #0]
 8013d52:	f10b 0301 	add.w	r3, fp, #1
 8013d56:	6013      	str	r3, [r2, #0]
 8013d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	f43f ace2 	beq.w	8013724 <_dtoa_r+0xa4>
 8013d60:	601d      	str	r5, [r3, #0]
 8013d62:	e4df      	b.n	8013724 <_dtoa_r+0xa4>
 8013d64:	465f      	mov	r7, fp
 8013d66:	462b      	mov	r3, r5
 8013d68:	461d      	mov	r5, r3
 8013d6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d6e:	2a39      	cmp	r2, #57	; 0x39
 8013d70:	d106      	bne.n	8013d80 <_dtoa_r+0x700>
 8013d72:	9a00      	ldr	r2, [sp, #0]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d1f7      	bne.n	8013d68 <_dtoa_r+0x6e8>
 8013d78:	9900      	ldr	r1, [sp, #0]
 8013d7a:	2230      	movs	r2, #48	; 0x30
 8013d7c:	3701      	adds	r7, #1
 8013d7e:	700a      	strb	r2, [r1, #0]
 8013d80:	781a      	ldrb	r2, [r3, #0]
 8013d82:	3201      	adds	r2, #1
 8013d84:	701a      	strb	r2, [r3, #0]
 8013d86:	e790      	b.n	8013caa <_dtoa_r+0x62a>
 8013d88:	4ba3      	ldr	r3, [pc, #652]	; (8014018 <_dtoa_r+0x998>)
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f7ec fc34 	bl	80005f8 <__aeabi_dmul>
 8013d90:	2200      	movs	r2, #0
 8013d92:	2300      	movs	r3, #0
 8013d94:	4606      	mov	r6, r0
 8013d96:	460f      	mov	r7, r1
 8013d98:	f7ec fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d9c:	2800      	cmp	r0, #0
 8013d9e:	d09e      	beq.n	8013cde <_dtoa_r+0x65e>
 8013da0:	e7d0      	b.n	8013d44 <_dtoa_r+0x6c4>
 8013da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013da4:	2a00      	cmp	r2, #0
 8013da6:	f000 80ca 	beq.w	8013f3e <_dtoa_r+0x8be>
 8013daa:	9a07      	ldr	r2, [sp, #28]
 8013dac:	2a01      	cmp	r2, #1
 8013dae:	f300 80ad 	bgt.w	8013f0c <_dtoa_r+0x88c>
 8013db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013db4:	2a00      	cmp	r2, #0
 8013db6:	f000 80a5 	beq.w	8013f04 <_dtoa_r+0x884>
 8013dba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013dbe:	9e08      	ldr	r6, [sp, #32]
 8013dc0:	9d05      	ldr	r5, [sp, #20]
 8013dc2:	9a05      	ldr	r2, [sp, #20]
 8013dc4:	441a      	add	r2, r3
 8013dc6:	9205      	str	r2, [sp, #20]
 8013dc8:	9a06      	ldr	r2, [sp, #24]
 8013dca:	2101      	movs	r1, #1
 8013dcc:	441a      	add	r2, r3
 8013dce:	4620      	mov	r0, r4
 8013dd0:	9206      	str	r2, [sp, #24]
 8013dd2:	f000 fc87 	bl	80146e4 <__i2b>
 8013dd6:	4607      	mov	r7, r0
 8013dd8:	b165      	cbz	r5, 8013df4 <_dtoa_r+0x774>
 8013dda:	9b06      	ldr	r3, [sp, #24]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	dd09      	ble.n	8013df4 <_dtoa_r+0x774>
 8013de0:	42ab      	cmp	r3, r5
 8013de2:	9a05      	ldr	r2, [sp, #20]
 8013de4:	bfa8      	it	ge
 8013de6:	462b      	movge	r3, r5
 8013de8:	1ad2      	subs	r2, r2, r3
 8013dea:	9205      	str	r2, [sp, #20]
 8013dec:	9a06      	ldr	r2, [sp, #24]
 8013dee:	1aed      	subs	r5, r5, r3
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	9306      	str	r3, [sp, #24]
 8013df4:	9b08      	ldr	r3, [sp, #32]
 8013df6:	b1f3      	cbz	r3, 8013e36 <_dtoa_r+0x7b6>
 8013df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	f000 80a3 	beq.w	8013f46 <_dtoa_r+0x8c6>
 8013e00:	2e00      	cmp	r6, #0
 8013e02:	dd10      	ble.n	8013e26 <_dtoa_r+0x7a6>
 8013e04:	4639      	mov	r1, r7
 8013e06:	4632      	mov	r2, r6
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f000 fd2b 	bl	8014864 <__pow5mult>
 8013e0e:	4652      	mov	r2, sl
 8013e10:	4601      	mov	r1, r0
 8013e12:	4607      	mov	r7, r0
 8013e14:	4620      	mov	r0, r4
 8013e16:	f000 fc7b 	bl	8014710 <__multiply>
 8013e1a:	4651      	mov	r1, sl
 8013e1c:	4680      	mov	r8, r0
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f000 fb60 	bl	80144e4 <_Bfree>
 8013e24:	46c2      	mov	sl, r8
 8013e26:	9b08      	ldr	r3, [sp, #32]
 8013e28:	1b9a      	subs	r2, r3, r6
 8013e2a:	d004      	beq.n	8013e36 <_dtoa_r+0x7b6>
 8013e2c:	4651      	mov	r1, sl
 8013e2e:	4620      	mov	r0, r4
 8013e30:	f000 fd18 	bl	8014864 <__pow5mult>
 8013e34:	4682      	mov	sl, r0
 8013e36:	2101      	movs	r1, #1
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f000 fc53 	bl	80146e4 <__i2b>
 8013e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	4606      	mov	r6, r0
 8013e44:	f340 8081 	ble.w	8013f4a <_dtoa_r+0x8ca>
 8013e48:	461a      	mov	r2, r3
 8013e4a:	4601      	mov	r1, r0
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	f000 fd09 	bl	8014864 <__pow5mult>
 8013e52:	9b07      	ldr	r3, [sp, #28]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	4606      	mov	r6, r0
 8013e58:	dd7a      	ble.n	8013f50 <_dtoa_r+0x8d0>
 8013e5a:	f04f 0800 	mov.w	r8, #0
 8013e5e:	6933      	ldr	r3, [r6, #16]
 8013e60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013e64:	6918      	ldr	r0, [r3, #16]
 8013e66:	f000 fbef 	bl	8014648 <__hi0bits>
 8013e6a:	f1c0 0020 	rsb	r0, r0, #32
 8013e6e:	9b06      	ldr	r3, [sp, #24]
 8013e70:	4418      	add	r0, r3
 8013e72:	f010 001f 	ands.w	r0, r0, #31
 8013e76:	f000 8094 	beq.w	8013fa2 <_dtoa_r+0x922>
 8013e7a:	f1c0 0320 	rsb	r3, r0, #32
 8013e7e:	2b04      	cmp	r3, #4
 8013e80:	f340 8085 	ble.w	8013f8e <_dtoa_r+0x90e>
 8013e84:	9b05      	ldr	r3, [sp, #20]
 8013e86:	f1c0 001c 	rsb	r0, r0, #28
 8013e8a:	4403      	add	r3, r0
 8013e8c:	9305      	str	r3, [sp, #20]
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	4403      	add	r3, r0
 8013e92:	4405      	add	r5, r0
 8013e94:	9306      	str	r3, [sp, #24]
 8013e96:	9b05      	ldr	r3, [sp, #20]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	dd05      	ble.n	8013ea8 <_dtoa_r+0x828>
 8013e9c:	4651      	mov	r1, sl
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f000 fd39 	bl	8014918 <__lshift>
 8013ea6:	4682      	mov	sl, r0
 8013ea8:	9b06      	ldr	r3, [sp, #24]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	dd05      	ble.n	8013eba <_dtoa_r+0x83a>
 8013eae:	4631      	mov	r1, r6
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	f000 fd30 	bl	8014918 <__lshift>
 8013eb8:	4606      	mov	r6, r0
 8013eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d072      	beq.n	8013fa6 <_dtoa_r+0x926>
 8013ec0:	4631      	mov	r1, r6
 8013ec2:	4650      	mov	r0, sl
 8013ec4:	f000 fd94 	bl	80149f0 <__mcmp>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	da6c      	bge.n	8013fa6 <_dtoa_r+0x926>
 8013ecc:	2300      	movs	r3, #0
 8013ece:	4651      	mov	r1, sl
 8013ed0:	220a      	movs	r2, #10
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f000 fb28 	bl	8014528 <__multadd>
 8013ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ede:	4682      	mov	sl, r0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f000 81b0 	beq.w	8014246 <_dtoa_r+0xbc6>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	4639      	mov	r1, r7
 8013eea:	220a      	movs	r2, #10
 8013eec:	4620      	mov	r0, r4
 8013eee:	f000 fb1b 	bl	8014528 <__multadd>
 8013ef2:	9b01      	ldr	r3, [sp, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	4607      	mov	r7, r0
 8013ef8:	f300 8096 	bgt.w	8014028 <_dtoa_r+0x9a8>
 8013efc:	9b07      	ldr	r3, [sp, #28]
 8013efe:	2b02      	cmp	r3, #2
 8013f00:	dc59      	bgt.n	8013fb6 <_dtoa_r+0x936>
 8013f02:	e091      	b.n	8014028 <_dtoa_r+0x9a8>
 8013f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013f0a:	e758      	b.n	8013dbe <_dtoa_r+0x73e>
 8013f0c:	9b04      	ldr	r3, [sp, #16]
 8013f0e:	1e5e      	subs	r6, r3, #1
 8013f10:	9b08      	ldr	r3, [sp, #32]
 8013f12:	42b3      	cmp	r3, r6
 8013f14:	bfbf      	itttt	lt
 8013f16:	9b08      	ldrlt	r3, [sp, #32]
 8013f18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013f1a:	9608      	strlt	r6, [sp, #32]
 8013f1c:	1af3      	sublt	r3, r6, r3
 8013f1e:	bfb4      	ite	lt
 8013f20:	18d2      	addlt	r2, r2, r3
 8013f22:	1b9e      	subge	r6, r3, r6
 8013f24:	9b04      	ldr	r3, [sp, #16]
 8013f26:	bfbc      	itt	lt
 8013f28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013f2a:	2600      	movlt	r6, #0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	bfb7      	itett	lt
 8013f30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013f34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013f38:	1a9d      	sublt	r5, r3, r2
 8013f3a:	2300      	movlt	r3, #0
 8013f3c:	e741      	b.n	8013dc2 <_dtoa_r+0x742>
 8013f3e:	9e08      	ldr	r6, [sp, #32]
 8013f40:	9d05      	ldr	r5, [sp, #20]
 8013f42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013f44:	e748      	b.n	8013dd8 <_dtoa_r+0x758>
 8013f46:	9a08      	ldr	r2, [sp, #32]
 8013f48:	e770      	b.n	8013e2c <_dtoa_r+0x7ac>
 8013f4a:	9b07      	ldr	r3, [sp, #28]
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	dc19      	bgt.n	8013f84 <_dtoa_r+0x904>
 8013f50:	9b02      	ldr	r3, [sp, #8]
 8013f52:	b9bb      	cbnz	r3, 8013f84 <_dtoa_r+0x904>
 8013f54:	9b03      	ldr	r3, [sp, #12]
 8013f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f5a:	b99b      	cbnz	r3, 8013f84 <_dtoa_r+0x904>
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f62:	0d1b      	lsrs	r3, r3, #20
 8013f64:	051b      	lsls	r3, r3, #20
 8013f66:	b183      	cbz	r3, 8013f8a <_dtoa_r+0x90a>
 8013f68:	9b05      	ldr	r3, [sp, #20]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	9305      	str	r3, [sp, #20]
 8013f6e:	9b06      	ldr	r3, [sp, #24]
 8013f70:	3301      	adds	r3, #1
 8013f72:	9306      	str	r3, [sp, #24]
 8013f74:	f04f 0801 	mov.w	r8, #1
 8013f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	f47f af6f 	bne.w	8013e5e <_dtoa_r+0x7de>
 8013f80:	2001      	movs	r0, #1
 8013f82:	e774      	b.n	8013e6e <_dtoa_r+0x7ee>
 8013f84:	f04f 0800 	mov.w	r8, #0
 8013f88:	e7f6      	b.n	8013f78 <_dtoa_r+0x8f8>
 8013f8a:	4698      	mov	r8, r3
 8013f8c:	e7f4      	b.n	8013f78 <_dtoa_r+0x8f8>
 8013f8e:	d082      	beq.n	8013e96 <_dtoa_r+0x816>
 8013f90:	9a05      	ldr	r2, [sp, #20]
 8013f92:	331c      	adds	r3, #28
 8013f94:	441a      	add	r2, r3
 8013f96:	9205      	str	r2, [sp, #20]
 8013f98:	9a06      	ldr	r2, [sp, #24]
 8013f9a:	441a      	add	r2, r3
 8013f9c:	441d      	add	r5, r3
 8013f9e:	9206      	str	r2, [sp, #24]
 8013fa0:	e779      	b.n	8013e96 <_dtoa_r+0x816>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	e7f4      	b.n	8013f90 <_dtoa_r+0x910>
 8013fa6:	9b04      	ldr	r3, [sp, #16]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	dc37      	bgt.n	801401c <_dtoa_r+0x99c>
 8013fac:	9b07      	ldr	r3, [sp, #28]
 8013fae:	2b02      	cmp	r3, #2
 8013fb0:	dd34      	ble.n	801401c <_dtoa_r+0x99c>
 8013fb2:	9b04      	ldr	r3, [sp, #16]
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	9b01      	ldr	r3, [sp, #4]
 8013fb8:	b963      	cbnz	r3, 8013fd4 <_dtoa_r+0x954>
 8013fba:	4631      	mov	r1, r6
 8013fbc:	2205      	movs	r2, #5
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f000 fab2 	bl	8014528 <__multadd>
 8013fc4:	4601      	mov	r1, r0
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	4650      	mov	r0, sl
 8013fca:	f000 fd11 	bl	80149f0 <__mcmp>
 8013fce:	2800      	cmp	r0, #0
 8013fd0:	f73f adbb 	bgt.w	8013b4a <_dtoa_r+0x4ca>
 8013fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fd6:	9d00      	ldr	r5, [sp, #0]
 8013fd8:	ea6f 0b03 	mvn.w	fp, r3
 8013fdc:	f04f 0800 	mov.w	r8, #0
 8013fe0:	4631      	mov	r1, r6
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	f000 fa7e 	bl	80144e4 <_Bfree>
 8013fe8:	2f00      	cmp	r7, #0
 8013fea:	f43f aeab 	beq.w	8013d44 <_dtoa_r+0x6c4>
 8013fee:	f1b8 0f00 	cmp.w	r8, #0
 8013ff2:	d005      	beq.n	8014000 <_dtoa_r+0x980>
 8013ff4:	45b8      	cmp	r8, r7
 8013ff6:	d003      	beq.n	8014000 <_dtoa_r+0x980>
 8013ff8:	4641      	mov	r1, r8
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f000 fa72 	bl	80144e4 <_Bfree>
 8014000:	4639      	mov	r1, r7
 8014002:	4620      	mov	r0, r4
 8014004:	f000 fa6e 	bl	80144e4 <_Bfree>
 8014008:	e69c      	b.n	8013d44 <_dtoa_r+0x6c4>
 801400a:	2600      	movs	r6, #0
 801400c:	4637      	mov	r7, r6
 801400e:	e7e1      	b.n	8013fd4 <_dtoa_r+0x954>
 8014010:	46bb      	mov	fp, r7
 8014012:	4637      	mov	r7, r6
 8014014:	e599      	b.n	8013b4a <_dtoa_r+0x4ca>
 8014016:	bf00      	nop
 8014018:	40240000 	.word	0x40240000
 801401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801401e:	2b00      	cmp	r3, #0
 8014020:	f000 80c8 	beq.w	80141b4 <_dtoa_r+0xb34>
 8014024:	9b04      	ldr	r3, [sp, #16]
 8014026:	9301      	str	r3, [sp, #4]
 8014028:	2d00      	cmp	r5, #0
 801402a:	dd05      	ble.n	8014038 <_dtoa_r+0x9b8>
 801402c:	4639      	mov	r1, r7
 801402e:	462a      	mov	r2, r5
 8014030:	4620      	mov	r0, r4
 8014032:	f000 fc71 	bl	8014918 <__lshift>
 8014036:	4607      	mov	r7, r0
 8014038:	f1b8 0f00 	cmp.w	r8, #0
 801403c:	d05b      	beq.n	80140f6 <_dtoa_r+0xa76>
 801403e:	6879      	ldr	r1, [r7, #4]
 8014040:	4620      	mov	r0, r4
 8014042:	f000 fa0f 	bl	8014464 <_Balloc>
 8014046:	4605      	mov	r5, r0
 8014048:	b928      	cbnz	r0, 8014056 <_dtoa_r+0x9d6>
 801404a:	4b83      	ldr	r3, [pc, #524]	; (8014258 <_dtoa_r+0xbd8>)
 801404c:	4602      	mov	r2, r0
 801404e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014052:	f7ff bb2e 	b.w	80136b2 <_dtoa_r+0x32>
 8014056:	693a      	ldr	r2, [r7, #16]
 8014058:	3202      	adds	r2, #2
 801405a:	0092      	lsls	r2, r2, #2
 801405c:	f107 010c 	add.w	r1, r7, #12
 8014060:	300c      	adds	r0, #12
 8014062:	f7ff fa68 	bl	8013536 <memcpy>
 8014066:	2201      	movs	r2, #1
 8014068:	4629      	mov	r1, r5
 801406a:	4620      	mov	r0, r4
 801406c:	f000 fc54 	bl	8014918 <__lshift>
 8014070:	9b00      	ldr	r3, [sp, #0]
 8014072:	3301      	adds	r3, #1
 8014074:	9304      	str	r3, [sp, #16]
 8014076:	e9dd 2300 	ldrd	r2, r3, [sp]
 801407a:	4413      	add	r3, r2
 801407c:	9308      	str	r3, [sp, #32]
 801407e:	9b02      	ldr	r3, [sp, #8]
 8014080:	f003 0301 	and.w	r3, r3, #1
 8014084:	46b8      	mov	r8, r7
 8014086:	9306      	str	r3, [sp, #24]
 8014088:	4607      	mov	r7, r0
 801408a:	9b04      	ldr	r3, [sp, #16]
 801408c:	4631      	mov	r1, r6
 801408e:	3b01      	subs	r3, #1
 8014090:	4650      	mov	r0, sl
 8014092:	9301      	str	r3, [sp, #4]
 8014094:	f7ff fa6b 	bl	801356e <quorem>
 8014098:	4641      	mov	r1, r8
 801409a:	9002      	str	r0, [sp, #8]
 801409c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80140a0:	4650      	mov	r0, sl
 80140a2:	f000 fca5 	bl	80149f0 <__mcmp>
 80140a6:	463a      	mov	r2, r7
 80140a8:	9005      	str	r0, [sp, #20]
 80140aa:	4631      	mov	r1, r6
 80140ac:	4620      	mov	r0, r4
 80140ae:	f000 fcbb 	bl	8014a28 <__mdiff>
 80140b2:	68c2      	ldr	r2, [r0, #12]
 80140b4:	4605      	mov	r5, r0
 80140b6:	bb02      	cbnz	r2, 80140fa <_dtoa_r+0xa7a>
 80140b8:	4601      	mov	r1, r0
 80140ba:	4650      	mov	r0, sl
 80140bc:	f000 fc98 	bl	80149f0 <__mcmp>
 80140c0:	4602      	mov	r2, r0
 80140c2:	4629      	mov	r1, r5
 80140c4:	4620      	mov	r0, r4
 80140c6:	9209      	str	r2, [sp, #36]	; 0x24
 80140c8:	f000 fa0c 	bl	80144e4 <_Bfree>
 80140cc:	9b07      	ldr	r3, [sp, #28]
 80140ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140d0:	9d04      	ldr	r5, [sp, #16]
 80140d2:	ea43 0102 	orr.w	r1, r3, r2
 80140d6:	9b06      	ldr	r3, [sp, #24]
 80140d8:	4319      	orrs	r1, r3
 80140da:	d110      	bne.n	80140fe <_dtoa_r+0xa7e>
 80140dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80140e0:	d029      	beq.n	8014136 <_dtoa_r+0xab6>
 80140e2:	9b05      	ldr	r3, [sp, #20]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	dd02      	ble.n	80140ee <_dtoa_r+0xa6e>
 80140e8:	9b02      	ldr	r3, [sp, #8]
 80140ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80140ee:	9b01      	ldr	r3, [sp, #4]
 80140f0:	f883 9000 	strb.w	r9, [r3]
 80140f4:	e774      	b.n	8013fe0 <_dtoa_r+0x960>
 80140f6:	4638      	mov	r0, r7
 80140f8:	e7ba      	b.n	8014070 <_dtoa_r+0x9f0>
 80140fa:	2201      	movs	r2, #1
 80140fc:	e7e1      	b.n	80140c2 <_dtoa_r+0xa42>
 80140fe:	9b05      	ldr	r3, [sp, #20]
 8014100:	2b00      	cmp	r3, #0
 8014102:	db04      	blt.n	801410e <_dtoa_r+0xa8e>
 8014104:	9907      	ldr	r1, [sp, #28]
 8014106:	430b      	orrs	r3, r1
 8014108:	9906      	ldr	r1, [sp, #24]
 801410a:	430b      	orrs	r3, r1
 801410c:	d120      	bne.n	8014150 <_dtoa_r+0xad0>
 801410e:	2a00      	cmp	r2, #0
 8014110:	dded      	ble.n	80140ee <_dtoa_r+0xa6e>
 8014112:	4651      	mov	r1, sl
 8014114:	2201      	movs	r2, #1
 8014116:	4620      	mov	r0, r4
 8014118:	f000 fbfe 	bl	8014918 <__lshift>
 801411c:	4631      	mov	r1, r6
 801411e:	4682      	mov	sl, r0
 8014120:	f000 fc66 	bl	80149f0 <__mcmp>
 8014124:	2800      	cmp	r0, #0
 8014126:	dc03      	bgt.n	8014130 <_dtoa_r+0xab0>
 8014128:	d1e1      	bne.n	80140ee <_dtoa_r+0xa6e>
 801412a:	f019 0f01 	tst.w	r9, #1
 801412e:	d0de      	beq.n	80140ee <_dtoa_r+0xa6e>
 8014130:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014134:	d1d8      	bne.n	80140e8 <_dtoa_r+0xa68>
 8014136:	9a01      	ldr	r2, [sp, #4]
 8014138:	2339      	movs	r3, #57	; 0x39
 801413a:	7013      	strb	r3, [r2, #0]
 801413c:	462b      	mov	r3, r5
 801413e:	461d      	mov	r5, r3
 8014140:	3b01      	subs	r3, #1
 8014142:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014146:	2a39      	cmp	r2, #57	; 0x39
 8014148:	d06c      	beq.n	8014224 <_dtoa_r+0xba4>
 801414a:	3201      	adds	r2, #1
 801414c:	701a      	strb	r2, [r3, #0]
 801414e:	e747      	b.n	8013fe0 <_dtoa_r+0x960>
 8014150:	2a00      	cmp	r2, #0
 8014152:	dd07      	ble.n	8014164 <_dtoa_r+0xae4>
 8014154:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014158:	d0ed      	beq.n	8014136 <_dtoa_r+0xab6>
 801415a:	9a01      	ldr	r2, [sp, #4]
 801415c:	f109 0301 	add.w	r3, r9, #1
 8014160:	7013      	strb	r3, [r2, #0]
 8014162:	e73d      	b.n	8013fe0 <_dtoa_r+0x960>
 8014164:	9b04      	ldr	r3, [sp, #16]
 8014166:	9a08      	ldr	r2, [sp, #32]
 8014168:	f803 9c01 	strb.w	r9, [r3, #-1]
 801416c:	4293      	cmp	r3, r2
 801416e:	d043      	beq.n	80141f8 <_dtoa_r+0xb78>
 8014170:	4651      	mov	r1, sl
 8014172:	2300      	movs	r3, #0
 8014174:	220a      	movs	r2, #10
 8014176:	4620      	mov	r0, r4
 8014178:	f000 f9d6 	bl	8014528 <__multadd>
 801417c:	45b8      	cmp	r8, r7
 801417e:	4682      	mov	sl, r0
 8014180:	f04f 0300 	mov.w	r3, #0
 8014184:	f04f 020a 	mov.w	r2, #10
 8014188:	4641      	mov	r1, r8
 801418a:	4620      	mov	r0, r4
 801418c:	d107      	bne.n	801419e <_dtoa_r+0xb1e>
 801418e:	f000 f9cb 	bl	8014528 <__multadd>
 8014192:	4680      	mov	r8, r0
 8014194:	4607      	mov	r7, r0
 8014196:	9b04      	ldr	r3, [sp, #16]
 8014198:	3301      	adds	r3, #1
 801419a:	9304      	str	r3, [sp, #16]
 801419c:	e775      	b.n	801408a <_dtoa_r+0xa0a>
 801419e:	f000 f9c3 	bl	8014528 <__multadd>
 80141a2:	4639      	mov	r1, r7
 80141a4:	4680      	mov	r8, r0
 80141a6:	2300      	movs	r3, #0
 80141a8:	220a      	movs	r2, #10
 80141aa:	4620      	mov	r0, r4
 80141ac:	f000 f9bc 	bl	8014528 <__multadd>
 80141b0:	4607      	mov	r7, r0
 80141b2:	e7f0      	b.n	8014196 <_dtoa_r+0xb16>
 80141b4:	9b04      	ldr	r3, [sp, #16]
 80141b6:	9301      	str	r3, [sp, #4]
 80141b8:	9d00      	ldr	r5, [sp, #0]
 80141ba:	4631      	mov	r1, r6
 80141bc:	4650      	mov	r0, sl
 80141be:	f7ff f9d6 	bl	801356e <quorem>
 80141c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80141c6:	9b00      	ldr	r3, [sp, #0]
 80141c8:	f805 9b01 	strb.w	r9, [r5], #1
 80141cc:	1aea      	subs	r2, r5, r3
 80141ce:	9b01      	ldr	r3, [sp, #4]
 80141d0:	4293      	cmp	r3, r2
 80141d2:	dd07      	ble.n	80141e4 <_dtoa_r+0xb64>
 80141d4:	4651      	mov	r1, sl
 80141d6:	2300      	movs	r3, #0
 80141d8:	220a      	movs	r2, #10
 80141da:	4620      	mov	r0, r4
 80141dc:	f000 f9a4 	bl	8014528 <__multadd>
 80141e0:	4682      	mov	sl, r0
 80141e2:	e7ea      	b.n	80141ba <_dtoa_r+0xb3a>
 80141e4:	9b01      	ldr	r3, [sp, #4]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	bfc8      	it	gt
 80141ea:	461d      	movgt	r5, r3
 80141ec:	9b00      	ldr	r3, [sp, #0]
 80141ee:	bfd8      	it	le
 80141f0:	2501      	movle	r5, #1
 80141f2:	441d      	add	r5, r3
 80141f4:	f04f 0800 	mov.w	r8, #0
 80141f8:	4651      	mov	r1, sl
 80141fa:	2201      	movs	r2, #1
 80141fc:	4620      	mov	r0, r4
 80141fe:	f000 fb8b 	bl	8014918 <__lshift>
 8014202:	4631      	mov	r1, r6
 8014204:	4682      	mov	sl, r0
 8014206:	f000 fbf3 	bl	80149f0 <__mcmp>
 801420a:	2800      	cmp	r0, #0
 801420c:	dc96      	bgt.n	801413c <_dtoa_r+0xabc>
 801420e:	d102      	bne.n	8014216 <_dtoa_r+0xb96>
 8014210:	f019 0f01 	tst.w	r9, #1
 8014214:	d192      	bne.n	801413c <_dtoa_r+0xabc>
 8014216:	462b      	mov	r3, r5
 8014218:	461d      	mov	r5, r3
 801421a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801421e:	2a30      	cmp	r2, #48	; 0x30
 8014220:	d0fa      	beq.n	8014218 <_dtoa_r+0xb98>
 8014222:	e6dd      	b.n	8013fe0 <_dtoa_r+0x960>
 8014224:	9a00      	ldr	r2, [sp, #0]
 8014226:	429a      	cmp	r2, r3
 8014228:	d189      	bne.n	801413e <_dtoa_r+0xabe>
 801422a:	f10b 0b01 	add.w	fp, fp, #1
 801422e:	2331      	movs	r3, #49	; 0x31
 8014230:	e796      	b.n	8014160 <_dtoa_r+0xae0>
 8014232:	4b0a      	ldr	r3, [pc, #40]	; (801425c <_dtoa_r+0xbdc>)
 8014234:	f7ff ba99 	b.w	801376a <_dtoa_r+0xea>
 8014238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801423a:	2b00      	cmp	r3, #0
 801423c:	f47f aa6d 	bne.w	801371a <_dtoa_r+0x9a>
 8014240:	4b07      	ldr	r3, [pc, #28]	; (8014260 <_dtoa_r+0xbe0>)
 8014242:	f7ff ba92 	b.w	801376a <_dtoa_r+0xea>
 8014246:	9b01      	ldr	r3, [sp, #4]
 8014248:	2b00      	cmp	r3, #0
 801424a:	dcb5      	bgt.n	80141b8 <_dtoa_r+0xb38>
 801424c:	9b07      	ldr	r3, [sp, #28]
 801424e:	2b02      	cmp	r3, #2
 8014250:	f73f aeb1 	bgt.w	8013fb6 <_dtoa_r+0x936>
 8014254:	e7b0      	b.n	80141b8 <_dtoa_r+0xb38>
 8014256:	bf00      	nop
 8014258:	0801853b 	.word	0x0801853b
 801425c:	0801843c 	.word	0x0801843c
 8014260:	080184d6 	.word	0x080184d6

08014264 <_free_r>:
 8014264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014266:	2900      	cmp	r1, #0
 8014268:	d044      	beq.n	80142f4 <_free_r+0x90>
 801426a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801426e:	9001      	str	r0, [sp, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	f1a1 0404 	sub.w	r4, r1, #4
 8014276:	bfb8      	it	lt
 8014278:	18e4      	addlt	r4, r4, r3
 801427a:	f000 f8e7 	bl	801444c <__malloc_lock>
 801427e:	4a1e      	ldr	r2, [pc, #120]	; (80142f8 <_free_r+0x94>)
 8014280:	9801      	ldr	r0, [sp, #4]
 8014282:	6813      	ldr	r3, [r2, #0]
 8014284:	b933      	cbnz	r3, 8014294 <_free_r+0x30>
 8014286:	6063      	str	r3, [r4, #4]
 8014288:	6014      	str	r4, [r2, #0]
 801428a:	b003      	add	sp, #12
 801428c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014290:	f000 b8e2 	b.w	8014458 <__malloc_unlock>
 8014294:	42a3      	cmp	r3, r4
 8014296:	d908      	bls.n	80142aa <_free_r+0x46>
 8014298:	6825      	ldr	r5, [r4, #0]
 801429a:	1961      	adds	r1, r4, r5
 801429c:	428b      	cmp	r3, r1
 801429e:	bf01      	itttt	eq
 80142a0:	6819      	ldreq	r1, [r3, #0]
 80142a2:	685b      	ldreq	r3, [r3, #4]
 80142a4:	1949      	addeq	r1, r1, r5
 80142a6:	6021      	streq	r1, [r4, #0]
 80142a8:	e7ed      	b.n	8014286 <_free_r+0x22>
 80142aa:	461a      	mov	r2, r3
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	b10b      	cbz	r3, 80142b4 <_free_r+0x50>
 80142b0:	42a3      	cmp	r3, r4
 80142b2:	d9fa      	bls.n	80142aa <_free_r+0x46>
 80142b4:	6811      	ldr	r1, [r2, #0]
 80142b6:	1855      	adds	r5, r2, r1
 80142b8:	42a5      	cmp	r5, r4
 80142ba:	d10b      	bne.n	80142d4 <_free_r+0x70>
 80142bc:	6824      	ldr	r4, [r4, #0]
 80142be:	4421      	add	r1, r4
 80142c0:	1854      	adds	r4, r2, r1
 80142c2:	42a3      	cmp	r3, r4
 80142c4:	6011      	str	r1, [r2, #0]
 80142c6:	d1e0      	bne.n	801428a <_free_r+0x26>
 80142c8:	681c      	ldr	r4, [r3, #0]
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	6053      	str	r3, [r2, #4]
 80142ce:	440c      	add	r4, r1
 80142d0:	6014      	str	r4, [r2, #0]
 80142d2:	e7da      	b.n	801428a <_free_r+0x26>
 80142d4:	d902      	bls.n	80142dc <_free_r+0x78>
 80142d6:	230c      	movs	r3, #12
 80142d8:	6003      	str	r3, [r0, #0]
 80142da:	e7d6      	b.n	801428a <_free_r+0x26>
 80142dc:	6825      	ldr	r5, [r4, #0]
 80142de:	1961      	adds	r1, r4, r5
 80142e0:	428b      	cmp	r3, r1
 80142e2:	bf04      	itt	eq
 80142e4:	6819      	ldreq	r1, [r3, #0]
 80142e6:	685b      	ldreq	r3, [r3, #4]
 80142e8:	6063      	str	r3, [r4, #4]
 80142ea:	bf04      	itt	eq
 80142ec:	1949      	addeq	r1, r1, r5
 80142ee:	6021      	streq	r1, [r4, #0]
 80142f0:	6054      	str	r4, [r2, #4]
 80142f2:	e7ca      	b.n	801428a <_free_r+0x26>
 80142f4:	b003      	add	sp, #12
 80142f6:	bd30      	pop	{r4, r5, pc}
 80142f8:	20003be4 	.word	0x20003be4

080142fc <malloc>:
 80142fc:	4b02      	ldr	r3, [pc, #8]	; (8014308 <malloc+0xc>)
 80142fe:	4601      	mov	r1, r0
 8014300:	6818      	ldr	r0, [r3, #0]
 8014302:	f000 b823 	b.w	801434c <_malloc_r>
 8014306:	bf00      	nop
 8014308:	20000170 	.word	0x20000170

0801430c <sbrk_aligned>:
 801430c:	b570      	push	{r4, r5, r6, lr}
 801430e:	4e0e      	ldr	r6, [pc, #56]	; (8014348 <sbrk_aligned+0x3c>)
 8014310:	460c      	mov	r4, r1
 8014312:	6831      	ldr	r1, [r6, #0]
 8014314:	4605      	mov	r5, r0
 8014316:	b911      	cbnz	r1, 801431e <sbrk_aligned+0x12>
 8014318:	f001 ff76 	bl	8016208 <_sbrk_r>
 801431c:	6030      	str	r0, [r6, #0]
 801431e:	4621      	mov	r1, r4
 8014320:	4628      	mov	r0, r5
 8014322:	f001 ff71 	bl	8016208 <_sbrk_r>
 8014326:	1c43      	adds	r3, r0, #1
 8014328:	d00a      	beq.n	8014340 <sbrk_aligned+0x34>
 801432a:	1cc4      	adds	r4, r0, #3
 801432c:	f024 0403 	bic.w	r4, r4, #3
 8014330:	42a0      	cmp	r0, r4
 8014332:	d007      	beq.n	8014344 <sbrk_aligned+0x38>
 8014334:	1a21      	subs	r1, r4, r0
 8014336:	4628      	mov	r0, r5
 8014338:	f001 ff66 	bl	8016208 <_sbrk_r>
 801433c:	3001      	adds	r0, #1
 801433e:	d101      	bne.n	8014344 <sbrk_aligned+0x38>
 8014340:	f04f 34ff 	mov.w	r4, #4294967295
 8014344:	4620      	mov	r0, r4
 8014346:	bd70      	pop	{r4, r5, r6, pc}
 8014348:	20003be8 	.word	0x20003be8

0801434c <_malloc_r>:
 801434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014350:	1ccd      	adds	r5, r1, #3
 8014352:	f025 0503 	bic.w	r5, r5, #3
 8014356:	3508      	adds	r5, #8
 8014358:	2d0c      	cmp	r5, #12
 801435a:	bf38      	it	cc
 801435c:	250c      	movcc	r5, #12
 801435e:	2d00      	cmp	r5, #0
 8014360:	4607      	mov	r7, r0
 8014362:	db01      	blt.n	8014368 <_malloc_r+0x1c>
 8014364:	42a9      	cmp	r1, r5
 8014366:	d905      	bls.n	8014374 <_malloc_r+0x28>
 8014368:	230c      	movs	r3, #12
 801436a:	603b      	str	r3, [r7, #0]
 801436c:	2600      	movs	r6, #0
 801436e:	4630      	mov	r0, r6
 8014370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014374:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014448 <_malloc_r+0xfc>
 8014378:	f000 f868 	bl	801444c <__malloc_lock>
 801437c:	f8d8 3000 	ldr.w	r3, [r8]
 8014380:	461c      	mov	r4, r3
 8014382:	bb5c      	cbnz	r4, 80143dc <_malloc_r+0x90>
 8014384:	4629      	mov	r1, r5
 8014386:	4638      	mov	r0, r7
 8014388:	f7ff ffc0 	bl	801430c <sbrk_aligned>
 801438c:	1c43      	adds	r3, r0, #1
 801438e:	4604      	mov	r4, r0
 8014390:	d155      	bne.n	801443e <_malloc_r+0xf2>
 8014392:	f8d8 4000 	ldr.w	r4, [r8]
 8014396:	4626      	mov	r6, r4
 8014398:	2e00      	cmp	r6, #0
 801439a:	d145      	bne.n	8014428 <_malloc_r+0xdc>
 801439c:	2c00      	cmp	r4, #0
 801439e:	d048      	beq.n	8014432 <_malloc_r+0xe6>
 80143a0:	6823      	ldr	r3, [r4, #0]
 80143a2:	4631      	mov	r1, r6
 80143a4:	4638      	mov	r0, r7
 80143a6:	eb04 0903 	add.w	r9, r4, r3
 80143aa:	f001 ff2d 	bl	8016208 <_sbrk_r>
 80143ae:	4581      	cmp	r9, r0
 80143b0:	d13f      	bne.n	8014432 <_malloc_r+0xe6>
 80143b2:	6821      	ldr	r1, [r4, #0]
 80143b4:	1a6d      	subs	r5, r5, r1
 80143b6:	4629      	mov	r1, r5
 80143b8:	4638      	mov	r0, r7
 80143ba:	f7ff ffa7 	bl	801430c <sbrk_aligned>
 80143be:	3001      	adds	r0, #1
 80143c0:	d037      	beq.n	8014432 <_malloc_r+0xe6>
 80143c2:	6823      	ldr	r3, [r4, #0]
 80143c4:	442b      	add	r3, r5
 80143c6:	6023      	str	r3, [r4, #0]
 80143c8:	f8d8 3000 	ldr.w	r3, [r8]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d038      	beq.n	8014442 <_malloc_r+0xf6>
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	42a2      	cmp	r2, r4
 80143d4:	d12b      	bne.n	801442e <_malloc_r+0xe2>
 80143d6:	2200      	movs	r2, #0
 80143d8:	605a      	str	r2, [r3, #4]
 80143da:	e00f      	b.n	80143fc <_malloc_r+0xb0>
 80143dc:	6822      	ldr	r2, [r4, #0]
 80143de:	1b52      	subs	r2, r2, r5
 80143e0:	d41f      	bmi.n	8014422 <_malloc_r+0xd6>
 80143e2:	2a0b      	cmp	r2, #11
 80143e4:	d917      	bls.n	8014416 <_malloc_r+0xca>
 80143e6:	1961      	adds	r1, r4, r5
 80143e8:	42a3      	cmp	r3, r4
 80143ea:	6025      	str	r5, [r4, #0]
 80143ec:	bf18      	it	ne
 80143ee:	6059      	strne	r1, [r3, #4]
 80143f0:	6863      	ldr	r3, [r4, #4]
 80143f2:	bf08      	it	eq
 80143f4:	f8c8 1000 	streq.w	r1, [r8]
 80143f8:	5162      	str	r2, [r4, r5]
 80143fa:	604b      	str	r3, [r1, #4]
 80143fc:	4638      	mov	r0, r7
 80143fe:	f104 060b 	add.w	r6, r4, #11
 8014402:	f000 f829 	bl	8014458 <__malloc_unlock>
 8014406:	f026 0607 	bic.w	r6, r6, #7
 801440a:	1d23      	adds	r3, r4, #4
 801440c:	1af2      	subs	r2, r6, r3
 801440e:	d0ae      	beq.n	801436e <_malloc_r+0x22>
 8014410:	1b9b      	subs	r3, r3, r6
 8014412:	50a3      	str	r3, [r4, r2]
 8014414:	e7ab      	b.n	801436e <_malloc_r+0x22>
 8014416:	42a3      	cmp	r3, r4
 8014418:	6862      	ldr	r2, [r4, #4]
 801441a:	d1dd      	bne.n	80143d8 <_malloc_r+0x8c>
 801441c:	f8c8 2000 	str.w	r2, [r8]
 8014420:	e7ec      	b.n	80143fc <_malloc_r+0xb0>
 8014422:	4623      	mov	r3, r4
 8014424:	6864      	ldr	r4, [r4, #4]
 8014426:	e7ac      	b.n	8014382 <_malloc_r+0x36>
 8014428:	4634      	mov	r4, r6
 801442a:	6876      	ldr	r6, [r6, #4]
 801442c:	e7b4      	b.n	8014398 <_malloc_r+0x4c>
 801442e:	4613      	mov	r3, r2
 8014430:	e7cc      	b.n	80143cc <_malloc_r+0x80>
 8014432:	230c      	movs	r3, #12
 8014434:	603b      	str	r3, [r7, #0]
 8014436:	4638      	mov	r0, r7
 8014438:	f000 f80e 	bl	8014458 <__malloc_unlock>
 801443c:	e797      	b.n	801436e <_malloc_r+0x22>
 801443e:	6025      	str	r5, [r4, #0]
 8014440:	e7dc      	b.n	80143fc <_malloc_r+0xb0>
 8014442:	605b      	str	r3, [r3, #4]
 8014444:	deff      	udf	#255	; 0xff
 8014446:	bf00      	nop
 8014448:	20003be4 	.word	0x20003be4

0801444c <__malloc_lock>:
 801444c:	4801      	ldr	r0, [pc, #4]	; (8014454 <__malloc_lock+0x8>)
 801444e:	f7ff b870 	b.w	8013532 <__retarget_lock_acquire_recursive>
 8014452:	bf00      	nop
 8014454:	20003be0 	.word	0x20003be0

08014458 <__malloc_unlock>:
 8014458:	4801      	ldr	r0, [pc, #4]	; (8014460 <__malloc_unlock+0x8>)
 801445a:	f7ff b86b 	b.w	8013534 <__retarget_lock_release_recursive>
 801445e:	bf00      	nop
 8014460:	20003be0 	.word	0x20003be0

08014464 <_Balloc>:
 8014464:	b570      	push	{r4, r5, r6, lr}
 8014466:	69c6      	ldr	r6, [r0, #28]
 8014468:	4604      	mov	r4, r0
 801446a:	460d      	mov	r5, r1
 801446c:	b976      	cbnz	r6, 801448c <_Balloc+0x28>
 801446e:	2010      	movs	r0, #16
 8014470:	f7ff ff44 	bl	80142fc <malloc>
 8014474:	4602      	mov	r2, r0
 8014476:	61e0      	str	r0, [r4, #28]
 8014478:	b920      	cbnz	r0, 8014484 <_Balloc+0x20>
 801447a:	4b18      	ldr	r3, [pc, #96]	; (80144dc <_Balloc+0x78>)
 801447c:	4818      	ldr	r0, [pc, #96]	; (80144e0 <_Balloc+0x7c>)
 801447e:	216b      	movs	r1, #107	; 0x6b
 8014480:	f7fd fd84 	bl	8011f8c <__assert_func>
 8014484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014488:	6006      	str	r6, [r0, #0]
 801448a:	60c6      	str	r6, [r0, #12]
 801448c:	69e6      	ldr	r6, [r4, #28]
 801448e:	68f3      	ldr	r3, [r6, #12]
 8014490:	b183      	cbz	r3, 80144b4 <_Balloc+0x50>
 8014492:	69e3      	ldr	r3, [r4, #28]
 8014494:	68db      	ldr	r3, [r3, #12]
 8014496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801449a:	b9b8      	cbnz	r0, 80144cc <_Balloc+0x68>
 801449c:	2101      	movs	r1, #1
 801449e:	fa01 f605 	lsl.w	r6, r1, r5
 80144a2:	1d72      	adds	r2, r6, #5
 80144a4:	0092      	lsls	r2, r2, #2
 80144a6:	4620      	mov	r0, r4
 80144a8:	f001 fec6 	bl	8016238 <_calloc_r>
 80144ac:	b160      	cbz	r0, 80144c8 <_Balloc+0x64>
 80144ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80144b2:	e00e      	b.n	80144d2 <_Balloc+0x6e>
 80144b4:	2221      	movs	r2, #33	; 0x21
 80144b6:	2104      	movs	r1, #4
 80144b8:	4620      	mov	r0, r4
 80144ba:	f001 febd 	bl	8016238 <_calloc_r>
 80144be:	69e3      	ldr	r3, [r4, #28]
 80144c0:	60f0      	str	r0, [r6, #12]
 80144c2:	68db      	ldr	r3, [r3, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1e4      	bne.n	8014492 <_Balloc+0x2e>
 80144c8:	2000      	movs	r0, #0
 80144ca:	bd70      	pop	{r4, r5, r6, pc}
 80144cc:	6802      	ldr	r2, [r0, #0]
 80144ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80144d2:	2300      	movs	r3, #0
 80144d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80144d8:	e7f7      	b.n	80144ca <_Balloc+0x66>
 80144da:	bf00      	nop
 80144dc:	08018465 	.word	0x08018465
 80144e0:	0801854c 	.word	0x0801854c

080144e4 <_Bfree>:
 80144e4:	b570      	push	{r4, r5, r6, lr}
 80144e6:	69c6      	ldr	r6, [r0, #28]
 80144e8:	4605      	mov	r5, r0
 80144ea:	460c      	mov	r4, r1
 80144ec:	b976      	cbnz	r6, 801450c <_Bfree+0x28>
 80144ee:	2010      	movs	r0, #16
 80144f0:	f7ff ff04 	bl	80142fc <malloc>
 80144f4:	4602      	mov	r2, r0
 80144f6:	61e8      	str	r0, [r5, #28]
 80144f8:	b920      	cbnz	r0, 8014504 <_Bfree+0x20>
 80144fa:	4b09      	ldr	r3, [pc, #36]	; (8014520 <_Bfree+0x3c>)
 80144fc:	4809      	ldr	r0, [pc, #36]	; (8014524 <_Bfree+0x40>)
 80144fe:	218f      	movs	r1, #143	; 0x8f
 8014500:	f7fd fd44 	bl	8011f8c <__assert_func>
 8014504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014508:	6006      	str	r6, [r0, #0]
 801450a:	60c6      	str	r6, [r0, #12]
 801450c:	b13c      	cbz	r4, 801451e <_Bfree+0x3a>
 801450e:	69eb      	ldr	r3, [r5, #28]
 8014510:	6862      	ldr	r2, [r4, #4]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014518:	6021      	str	r1, [r4, #0]
 801451a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801451e:	bd70      	pop	{r4, r5, r6, pc}
 8014520:	08018465 	.word	0x08018465
 8014524:	0801854c 	.word	0x0801854c

08014528 <__multadd>:
 8014528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801452c:	690d      	ldr	r5, [r1, #16]
 801452e:	4607      	mov	r7, r0
 8014530:	460c      	mov	r4, r1
 8014532:	461e      	mov	r6, r3
 8014534:	f101 0c14 	add.w	ip, r1, #20
 8014538:	2000      	movs	r0, #0
 801453a:	f8dc 3000 	ldr.w	r3, [ip]
 801453e:	b299      	uxth	r1, r3
 8014540:	fb02 6101 	mla	r1, r2, r1, r6
 8014544:	0c1e      	lsrs	r6, r3, #16
 8014546:	0c0b      	lsrs	r3, r1, #16
 8014548:	fb02 3306 	mla	r3, r2, r6, r3
 801454c:	b289      	uxth	r1, r1
 801454e:	3001      	adds	r0, #1
 8014550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014554:	4285      	cmp	r5, r0
 8014556:	f84c 1b04 	str.w	r1, [ip], #4
 801455a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801455e:	dcec      	bgt.n	801453a <__multadd+0x12>
 8014560:	b30e      	cbz	r6, 80145a6 <__multadd+0x7e>
 8014562:	68a3      	ldr	r3, [r4, #8]
 8014564:	42ab      	cmp	r3, r5
 8014566:	dc19      	bgt.n	801459c <__multadd+0x74>
 8014568:	6861      	ldr	r1, [r4, #4]
 801456a:	4638      	mov	r0, r7
 801456c:	3101      	adds	r1, #1
 801456e:	f7ff ff79 	bl	8014464 <_Balloc>
 8014572:	4680      	mov	r8, r0
 8014574:	b928      	cbnz	r0, 8014582 <__multadd+0x5a>
 8014576:	4602      	mov	r2, r0
 8014578:	4b0c      	ldr	r3, [pc, #48]	; (80145ac <__multadd+0x84>)
 801457a:	480d      	ldr	r0, [pc, #52]	; (80145b0 <__multadd+0x88>)
 801457c:	21ba      	movs	r1, #186	; 0xba
 801457e:	f7fd fd05 	bl	8011f8c <__assert_func>
 8014582:	6922      	ldr	r2, [r4, #16]
 8014584:	3202      	adds	r2, #2
 8014586:	f104 010c 	add.w	r1, r4, #12
 801458a:	0092      	lsls	r2, r2, #2
 801458c:	300c      	adds	r0, #12
 801458e:	f7fe ffd2 	bl	8013536 <memcpy>
 8014592:	4621      	mov	r1, r4
 8014594:	4638      	mov	r0, r7
 8014596:	f7ff ffa5 	bl	80144e4 <_Bfree>
 801459a:	4644      	mov	r4, r8
 801459c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80145a0:	3501      	adds	r5, #1
 80145a2:	615e      	str	r6, [r3, #20]
 80145a4:	6125      	str	r5, [r4, #16]
 80145a6:	4620      	mov	r0, r4
 80145a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ac:	0801853b 	.word	0x0801853b
 80145b0:	0801854c 	.word	0x0801854c

080145b4 <__s2b>:
 80145b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145b8:	460c      	mov	r4, r1
 80145ba:	4615      	mov	r5, r2
 80145bc:	461f      	mov	r7, r3
 80145be:	2209      	movs	r2, #9
 80145c0:	3308      	adds	r3, #8
 80145c2:	4606      	mov	r6, r0
 80145c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80145c8:	2100      	movs	r1, #0
 80145ca:	2201      	movs	r2, #1
 80145cc:	429a      	cmp	r2, r3
 80145ce:	db09      	blt.n	80145e4 <__s2b+0x30>
 80145d0:	4630      	mov	r0, r6
 80145d2:	f7ff ff47 	bl	8014464 <_Balloc>
 80145d6:	b940      	cbnz	r0, 80145ea <__s2b+0x36>
 80145d8:	4602      	mov	r2, r0
 80145da:	4b19      	ldr	r3, [pc, #100]	; (8014640 <__s2b+0x8c>)
 80145dc:	4819      	ldr	r0, [pc, #100]	; (8014644 <__s2b+0x90>)
 80145de:	21d3      	movs	r1, #211	; 0xd3
 80145e0:	f7fd fcd4 	bl	8011f8c <__assert_func>
 80145e4:	0052      	lsls	r2, r2, #1
 80145e6:	3101      	adds	r1, #1
 80145e8:	e7f0      	b.n	80145cc <__s2b+0x18>
 80145ea:	9b08      	ldr	r3, [sp, #32]
 80145ec:	6143      	str	r3, [r0, #20]
 80145ee:	2d09      	cmp	r5, #9
 80145f0:	f04f 0301 	mov.w	r3, #1
 80145f4:	6103      	str	r3, [r0, #16]
 80145f6:	dd16      	ble.n	8014626 <__s2b+0x72>
 80145f8:	f104 0909 	add.w	r9, r4, #9
 80145fc:	46c8      	mov	r8, r9
 80145fe:	442c      	add	r4, r5
 8014600:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014604:	4601      	mov	r1, r0
 8014606:	3b30      	subs	r3, #48	; 0x30
 8014608:	220a      	movs	r2, #10
 801460a:	4630      	mov	r0, r6
 801460c:	f7ff ff8c 	bl	8014528 <__multadd>
 8014610:	45a0      	cmp	r8, r4
 8014612:	d1f5      	bne.n	8014600 <__s2b+0x4c>
 8014614:	f1a5 0408 	sub.w	r4, r5, #8
 8014618:	444c      	add	r4, r9
 801461a:	1b2d      	subs	r5, r5, r4
 801461c:	1963      	adds	r3, r4, r5
 801461e:	42bb      	cmp	r3, r7
 8014620:	db04      	blt.n	801462c <__s2b+0x78>
 8014622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014626:	340a      	adds	r4, #10
 8014628:	2509      	movs	r5, #9
 801462a:	e7f6      	b.n	801461a <__s2b+0x66>
 801462c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014630:	4601      	mov	r1, r0
 8014632:	3b30      	subs	r3, #48	; 0x30
 8014634:	220a      	movs	r2, #10
 8014636:	4630      	mov	r0, r6
 8014638:	f7ff ff76 	bl	8014528 <__multadd>
 801463c:	e7ee      	b.n	801461c <__s2b+0x68>
 801463e:	bf00      	nop
 8014640:	0801853b 	.word	0x0801853b
 8014644:	0801854c 	.word	0x0801854c

08014648 <__hi0bits>:
 8014648:	0c03      	lsrs	r3, r0, #16
 801464a:	041b      	lsls	r3, r3, #16
 801464c:	b9d3      	cbnz	r3, 8014684 <__hi0bits+0x3c>
 801464e:	0400      	lsls	r0, r0, #16
 8014650:	2310      	movs	r3, #16
 8014652:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014656:	bf04      	itt	eq
 8014658:	0200      	lsleq	r0, r0, #8
 801465a:	3308      	addeq	r3, #8
 801465c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014660:	bf04      	itt	eq
 8014662:	0100      	lsleq	r0, r0, #4
 8014664:	3304      	addeq	r3, #4
 8014666:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801466a:	bf04      	itt	eq
 801466c:	0080      	lsleq	r0, r0, #2
 801466e:	3302      	addeq	r3, #2
 8014670:	2800      	cmp	r0, #0
 8014672:	db05      	blt.n	8014680 <__hi0bits+0x38>
 8014674:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014678:	f103 0301 	add.w	r3, r3, #1
 801467c:	bf08      	it	eq
 801467e:	2320      	moveq	r3, #32
 8014680:	4618      	mov	r0, r3
 8014682:	4770      	bx	lr
 8014684:	2300      	movs	r3, #0
 8014686:	e7e4      	b.n	8014652 <__hi0bits+0xa>

08014688 <__lo0bits>:
 8014688:	6803      	ldr	r3, [r0, #0]
 801468a:	f013 0207 	ands.w	r2, r3, #7
 801468e:	d00c      	beq.n	80146aa <__lo0bits+0x22>
 8014690:	07d9      	lsls	r1, r3, #31
 8014692:	d422      	bmi.n	80146da <__lo0bits+0x52>
 8014694:	079a      	lsls	r2, r3, #30
 8014696:	bf49      	itett	mi
 8014698:	085b      	lsrmi	r3, r3, #1
 801469a:	089b      	lsrpl	r3, r3, #2
 801469c:	6003      	strmi	r3, [r0, #0]
 801469e:	2201      	movmi	r2, #1
 80146a0:	bf5c      	itt	pl
 80146a2:	6003      	strpl	r3, [r0, #0]
 80146a4:	2202      	movpl	r2, #2
 80146a6:	4610      	mov	r0, r2
 80146a8:	4770      	bx	lr
 80146aa:	b299      	uxth	r1, r3
 80146ac:	b909      	cbnz	r1, 80146b2 <__lo0bits+0x2a>
 80146ae:	0c1b      	lsrs	r3, r3, #16
 80146b0:	2210      	movs	r2, #16
 80146b2:	b2d9      	uxtb	r1, r3
 80146b4:	b909      	cbnz	r1, 80146ba <__lo0bits+0x32>
 80146b6:	3208      	adds	r2, #8
 80146b8:	0a1b      	lsrs	r3, r3, #8
 80146ba:	0719      	lsls	r1, r3, #28
 80146bc:	bf04      	itt	eq
 80146be:	091b      	lsreq	r3, r3, #4
 80146c0:	3204      	addeq	r2, #4
 80146c2:	0799      	lsls	r1, r3, #30
 80146c4:	bf04      	itt	eq
 80146c6:	089b      	lsreq	r3, r3, #2
 80146c8:	3202      	addeq	r2, #2
 80146ca:	07d9      	lsls	r1, r3, #31
 80146cc:	d403      	bmi.n	80146d6 <__lo0bits+0x4e>
 80146ce:	085b      	lsrs	r3, r3, #1
 80146d0:	f102 0201 	add.w	r2, r2, #1
 80146d4:	d003      	beq.n	80146de <__lo0bits+0x56>
 80146d6:	6003      	str	r3, [r0, #0]
 80146d8:	e7e5      	b.n	80146a6 <__lo0bits+0x1e>
 80146da:	2200      	movs	r2, #0
 80146dc:	e7e3      	b.n	80146a6 <__lo0bits+0x1e>
 80146de:	2220      	movs	r2, #32
 80146e0:	e7e1      	b.n	80146a6 <__lo0bits+0x1e>
	...

080146e4 <__i2b>:
 80146e4:	b510      	push	{r4, lr}
 80146e6:	460c      	mov	r4, r1
 80146e8:	2101      	movs	r1, #1
 80146ea:	f7ff febb 	bl	8014464 <_Balloc>
 80146ee:	4602      	mov	r2, r0
 80146f0:	b928      	cbnz	r0, 80146fe <__i2b+0x1a>
 80146f2:	4b05      	ldr	r3, [pc, #20]	; (8014708 <__i2b+0x24>)
 80146f4:	4805      	ldr	r0, [pc, #20]	; (801470c <__i2b+0x28>)
 80146f6:	f240 1145 	movw	r1, #325	; 0x145
 80146fa:	f7fd fc47 	bl	8011f8c <__assert_func>
 80146fe:	2301      	movs	r3, #1
 8014700:	6144      	str	r4, [r0, #20]
 8014702:	6103      	str	r3, [r0, #16]
 8014704:	bd10      	pop	{r4, pc}
 8014706:	bf00      	nop
 8014708:	0801853b 	.word	0x0801853b
 801470c:	0801854c 	.word	0x0801854c

08014710 <__multiply>:
 8014710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014714:	4691      	mov	r9, r2
 8014716:	690a      	ldr	r2, [r1, #16]
 8014718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801471c:	429a      	cmp	r2, r3
 801471e:	bfb8      	it	lt
 8014720:	460b      	movlt	r3, r1
 8014722:	460c      	mov	r4, r1
 8014724:	bfbc      	itt	lt
 8014726:	464c      	movlt	r4, r9
 8014728:	4699      	movlt	r9, r3
 801472a:	6927      	ldr	r7, [r4, #16]
 801472c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014730:	68a3      	ldr	r3, [r4, #8]
 8014732:	6861      	ldr	r1, [r4, #4]
 8014734:	eb07 060a 	add.w	r6, r7, sl
 8014738:	42b3      	cmp	r3, r6
 801473a:	b085      	sub	sp, #20
 801473c:	bfb8      	it	lt
 801473e:	3101      	addlt	r1, #1
 8014740:	f7ff fe90 	bl	8014464 <_Balloc>
 8014744:	b930      	cbnz	r0, 8014754 <__multiply+0x44>
 8014746:	4602      	mov	r2, r0
 8014748:	4b44      	ldr	r3, [pc, #272]	; (801485c <__multiply+0x14c>)
 801474a:	4845      	ldr	r0, [pc, #276]	; (8014860 <__multiply+0x150>)
 801474c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014750:	f7fd fc1c 	bl	8011f8c <__assert_func>
 8014754:	f100 0514 	add.w	r5, r0, #20
 8014758:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801475c:	462b      	mov	r3, r5
 801475e:	2200      	movs	r2, #0
 8014760:	4543      	cmp	r3, r8
 8014762:	d321      	bcc.n	80147a8 <__multiply+0x98>
 8014764:	f104 0314 	add.w	r3, r4, #20
 8014768:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801476c:	f109 0314 	add.w	r3, r9, #20
 8014770:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014774:	9202      	str	r2, [sp, #8]
 8014776:	1b3a      	subs	r2, r7, r4
 8014778:	3a15      	subs	r2, #21
 801477a:	f022 0203 	bic.w	r2, r2, #3
 801477e:	3204      	adds	r2, #4
 8014780:	f104 0115 	add.w	r1, r4, #21
 8014784:	428f      	cmp	r7, r1
 8014786:	bf38      	it	cc
 8014788:	2204      	movcc	r2, #4
 801478a:	9201      	str	r2, [sp, #4]
 801478c:	9a02      	ldr	r2, [sp, #8]
 801478e:	9303      	str	r3, [sp, #12]
 8014790:	429a      	cmp	r2, r3
 8014792:	d80c      	bhi.n	80147ae <__multiply+0x9e>
 8014794:	2e00      	cmp	r6, #0
 8014796:	dd03      	ble.n	80147a0 <__multiply+0x90>
 8014798:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801479c:	2b00      	cmp	r3, #0
 801479e:	d05b      	beq.n	8014858 <__multiply+0x148>
 80147a0:	6106      	str	r6, [r0, #16]
 80147a2:	b005      	add	sp, #20
 80147a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a8:	f843 2b04 	str.w	r2, [r3], #4
 80147ac:	e7d8      	b.n	8014760 <__multiply+0x50>
 80147ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80147b2:	f1ba 0f00 	cmp.w	sl, #0
 80147b6:	d024      	beq.n	8014802 <__multiply+0xf2>
 80147b8:	f104 0e14 	add.w	lr, r4, #20
 80147bc:	46a9      	mov	r9, r5
 80147be:	f04f 0c00 	mov.w	ip, #0
 80147c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80147c6:	f8d9 1000 	ldr.w	r1, [r9]
 80147ca:	fa1f fb82 	uxth.w	fp, r2
 80147ce:	b289      	uxth	r1, r1
 80147d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80147d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80147d8:	f8d9 2000 	ldr.w	r2, [r9]
 80147dc:	4461      	add	r1, ip
 80147de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80147e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80147e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80147ea:	b289      	uxth	r1, r1
 80147ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80147f0:	4577      	cmp	r7, lr
 80147f2:	f849 1b04 	str.w	r1, [r9], #4
 80147f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80147fa:	d8e2      	bhi.n	80147c2 <__multiply+0xb2>
 80147fc:	9a01      	ldr	r2, [sp, #4]
 80147fe:	f845 c002 	str.w	ip, [r5, r2]
 8014802:	9a03      	ldr	r2, [sp, #12]
 8014804:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014808:	3304      	adds	r3, #4
 801480a:	f1b9 0f00 	cmp.w	r9, #0
 801480e:	d021      	beq.n	8014854 <__multiply+0x144>
 8014810:	6829      	ldr	r1, [r5, #0]
 8014812:	f104 0c14 	add.w	ip, r4, #20
 8014816:	46ae      	mov	lr, r5
 8014818:	f04f 0a00 	mov.w	sl, #0
 801481c:	f8bc b000 	ldrh.w	fp, [ip]
 8014820:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014824:	fb09 220b 	mla	r2, r9, fp, r2
 8014828:	4452      	add	r2, sl
 801482a:	b289      	uxth	r1, r1
 801482c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014830:	f84e 1b04 	str.w	r1, [lr], #4
 8014834:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014838:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801483c:	f8be 1000 	ldrh.w	r1, [lr]
 8014840:	fb09 110a 	mla	r1, r9, sl, r1
 8014844:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014848:	4567      	cmp	r7, ip
 801484a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801484e:	d8e5      	bhi.n	801481c <__multiply+0x10c>
 8014850:	9a01      	ldr	r2, [sp, #4]
 8014852:	50a9      	str	r1, [r5, r2]
 8014854:	3504      	adds	r5, #4
 8014856:	e799      	b.n	801478c <__multiply+0x7c>
 8014858:	3e01      	subs	r6, #1
 801485a:	e79b      	b.n	8014794 <__multiply+0x84>
 801485c:	0801853b 	.word	0x0801853b
 8014860:	0801854c 	.word	0x0801854c

08014864 <__pow5mult>:
 8014864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014868:	4615      	mov	r5, r2
 801486a:	f012 0203 	ands.w	r2, r2, #3
 801486e:	4606      	mov	r6, r0
 8014870:	460f      	mov	r7, r1
 8014872:	d007      	beq.n	8014884 <__pow5mult+0x20>
 8014874:	4c25      	ldr	r4, [pc, #148]	; (801490c <__pow5mult+0xa8>)
 8014876:	3a01      	subs	r2, #1
 8014878:	2300      	movs	r3, #0
 801487a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801487e:	f7ff fe53 	bl	8014528 <__multadd>
 8014882:	4607      	mov	r7, r0
 8014884:	10ad      	asrs	r5, r5, #2
 8014886:	d03d      	beq.n	8014904 <__pow5mult+0xa0>
 8014888:	69f4      	ldr	r4, [r6, #28]
 801488a:	b97c      	cbnz	r4, 80148ac <__pow5mult+0x48>
 801488c:	2010      	movs	r0, #16
 801488e:	f7ff fd35 	bl	80142fc <malloc>
 8014892:	4602      	mov	r2, r0
 8014894:	61f0      	str	r0, [r6, #28]
 8014896:	b928      	cbnz	r0, 80148a4 <__pow5mult+0x40>
 8014898:	4b1d      	ldr	r3, [pc, #116]	; (8014910 <__pow5mult+0xac>)
 801489a:	481e      	ldr	r0, [pc, #120]	; (8014914 <__pow5mult+0xb0>)
 801489c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80148a0:	f7fd fb74 	bl	8011f8c <__assert_func>
 80148a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80148a8:	6004      	str	r4, [r0, #0]
 80148aa:	60c4      	str	r4, [r0, #12]
 80148ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80148b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80148b4:	b94c      	cbnz	r4, 80148ca <__pow5mult+0x66>
 80148b6:	f240 2171 	movw	r1, #625	; 0x271
 80148ba:	4630      	mov	r0, r6
 80148bc:	f7ff ff12 	bl	80146e4 <__i2b>
 80148c0:	2300      	movs	r3, #0
 80148c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80148c6:	4604      	mov	r4, r0
 80148c8:	6003      	str	r3, [r0, #0]
 80148ca:	f04f 0900 	mov.w	r9, #0
 80148ce:	07eb      	lsls	r3, r5, #31
 80148d0:	d50a      	bpl.n	80148e8 <__pow5mult+0x84>
 80148d2:	4639      	mov	r1, r7
 80148d4:	4622      	mov	r2, r4
 80148d6:	4630      	mov	r0, r6
 80148d8:	f7ff ff1a 	bl	8014710 <__multiply>
 80148dc:	4639      	mov	r1, r7
 80148de:	4680      	mov	r8, r0
 80148e0:	4630      	mov	r0, r6
 80148e2:	f7ff fdff 	bl	80144e4 <_Bfree>
 80148e6:	4647      	mov	r7, r8
 80148e8:	106d      	asrs	r5, r5, #1
 80148ea:	d00b      	beq.n	8014904 <__pow5mult+0xa0>
 80148ec:	6820      	ldr	r0, [r4, #0]
 80148ee:	b938      	cbnz	r0, 8014900 <__pow5mult+0x9c>
 80148f0:	4622      	mov	r2, r4
 80148f2:	4621      	mov	r1, r4
 80148f4:	4630      	mov	r0, r6
 80148f6:	f7ff ff0b 	bl	8014710 <__multiply>
 80148fa:	6020      	str	r0, [r4, #0]
 80148fc:	f8c0 9000 	str.w	r9, [r0]
 8014900:	4604      	mov	r4, r0
 8014902:	e7e4      	b.n	80148ce <__pow5mult+0x6a>
 8014904:	4638      	mov	r0, r7
 8014906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801490a:	bf00      	nop
 801490c:	08018698 	.word	0x08018698
 8014910:	08018465 	.word	0x08018465
 8014914:	0801854c 	.word	0x0801854c

08014918 <__lshift>:
 8014918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801491c:	460c      	mov	r4, r1
 801491e:	6849      	ldr	r1, [r1, #4]
 8014920:	6923      	ldr	r3, [r4, #16]
 8014922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014926:	68a3      	ldr	r3, [r4, #8]
 8014928:	4607      	mov	r7, r0
 801492a:	4691      	mov	r9, r2
 801492c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014930:	f108 0601 	add.w	r6, r8, #1
 8014934:	42b3      	cmp	r3, r6
 8014936:	db0b      	blt.n	8014950 <__lshift+0x38>
 8014938:	4638      	mov	r0, r7
 801493a:	f7ff fd93 	bl	8014464 <_Balloc>
 801493e:	4605      	mov	r5, r0
 8014940:	b948      	cbnz	r0, 8014956 <__lshift+0x3e>
 8014942:	4602      	mov	r2, r0
 8014944:	4b28      	ldr	r3, [pc, #160]	; (80149e8 <__lshift+0xd0>)
 8014946:	4829      	ldr	r0, [pc, #164]	; (80149ec <__lshift+0xd4>)
 8014948:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801494c:	f7fd fb1e 	bl	8011f8c <__assert_func>
 8014950:	3101      	adds	r1, #1
 8014952:	005b      	lsls	r3, r3, #1
 8014954:	e7ee      	b.n	8014934 <__lshift+0x1c>
 8014956:	2300      	movs	r3, #0
 8014958:	f100 0114 	add.w	r1, r0, #20
 801495c:	f100 0210 	add.w	r2, r0, #16
 8014960:	4618      	mov	r0, r3
 8014962:	4553      	cmp	r3, sl
 8014964:	db33      	blt.n	80149ce <__lshift+0xb6>
 8014966:	6920      	ldr	r0, [r4, #16]
 8014968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801496c:	f104 0314 	add.w	r3, r4, #20
 8014970:	f019 091f 	ands.w	r9, r9, #31
 8014974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014978:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801497c:	d02b      	beq.n	80149d6 <__lshift+0xbe>
 801497e:	f1c9 0e20 	rsb	lr, r9, #32
 8014982:	468a      	mov	sl, r1
 8014984:	2200      	movs	r2, #0
 8014986:	6818      	ldr	r0, [r3, #0]
 8014988:	fa00 f009 	lsl.w	r0, r0, r9
 801498c:	4310      	orrs	r0, r2
 801498e:	f84a 0b04 	str.w	r0, [sl], #4
 8014992:	f853 2b04 	ldr.w	r2, [r3], #4
 8014996:	459c      	cmp	ip, r3
 8014998:	fa22 f20e 	lsr.w	r2, r2, lr
 801499c:	d8f3      	bhi.n	8014986 <__lshift+0x6e>
 801499e:	ebac 0304 	sub.w	r3, ip, r4
 80149a2:	3b15      	subs	r3, #21
 80149a4:	f023 0303 	bic.w	r3, r3, #3
 80149a8:	3304      	adds	r3, #4
 80149aa:	f104 0015 	add.w	r0, r4, #21
 80149ae:	4584      	cmp	ip, r0
 80149b0:	bf38      	it	cc
 80149b2:	2304      	movcc	r3, #4
 80149b4:	50ca      	str	r2, [r1, r3]
 80149b6:	b10a      	cbz	r2, 80149bc <__lshift+0xa4>
 80149b8:	f108 0602 	add.w	r6, r8, #2
 80149bc:	3e01      	subs	r6, #1
 80149be:	4638      	mov	r0, r7
 80149c0:	612e      	str	r6, [r5, #16]
 80149c2:	4621      	mov	r1, r4
 80149c4:	f7ff fd8e 	bl	80144e4 <_Bfree>
 80149c8:	4628      	mov	r0, r5
 80149ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80149d2:	3301      	adds	r3, #1
 80149d4:	e7c5      	b.n	8014962 <__lshift+0x4a>
 80149d6:	3904      	subs	r1, #4
 80149d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80149dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80149e0:	459c      	cmp	ip, r3
 80149e2:	d8f9      	bhi.n	80149d8 <__lshift+0xc0>
 80149e4:	e7ea      	b.n	80149bc <__lshift+0xa4>
 80149e6:	bf00      	nop
 80149e8:	0801853b 	.word	0x0801853b
 80149ec:	0801854c 	.word	0x0801854c

080149f0 <__mcmp>:
 80149f0:	b530      	push	{r4, r5, lr}
 80149f2:	6902      	ldr	r2, [r0, #16]
 80149f4:	690c      	ldr	r4, [r1, #16]
 80149f6:	1b12      	subs	r2, r2, r4
 80149f8:	d10e      	bne.n	8014a18 <__mcmp+0x28>
 80149fa:	f100 0314 	add.w	r3, r0, #20
 80149fe:	3114      	adds	r1, #20
 8014a00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014a04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014a08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014a0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014a10:	42a5      	cmp	r5, r4
 8014a12:	d003      	beq.n	8014a1c <__mcmp+0x2c>
 8014a14:	d305      	bcc.n	8014a22 <__mcmp+0x32>
 8014a16:	2201      	movs	r2, #1
 8014a18:	4610      	mov	r0, r2
 8014a1a:	bd30      	pop	{r4, r5, pc}
 8014a1c:	4283      	cmp	r3, r0
 8014a1e:	d3f3      	bcc.n	8014a08 <__mcmp+0x18>
 8014a20:	e7fa      	b.n	8014a18 <__mcmp+0x28>
 8014a22:	f04f 32ff 	mov.w	r2, #4294967295
 8014a26:	e7f7      	b.n	8014a18 <__mcmp+0x28>

08014a28 <__mdiff>:
 8014a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	460c      	mov	r4, r1
 8014a2e:	4606      	mov	r6, r0
 8014a30:	4611      	mov	r1, r2
 8014a32:	4620      	mov	r0, r4
 8014a34:	4690      	mov	r8, r2
 8014a36:	f7ff ffdb 	bl	80149f0 <__mcmp>
 8014a3a:	1e05      	subs	r5, r0, #0
 8014a3c:	d110      	bne.n	8014a60 <__mdiff+0x38>
 8014a3e:	4629      	mov	r1, r5
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7ff fd0f 	bl	8014464 <_Balloc>
 8014a46:	b930      	cbnz	r0, 8014a56 <__mdiff+0x2e>
 8014a48:	4b3a      	ldr	r3, [pc, #232]	; (8014b34 <__mdiff+0x10c>)
 8014a4a:	4602      	mov	r2, r0
 8014a4c:	f240 2137 	movw	r1, #567	; 0x237
 8014a50:	4839      	ldr	r0, [pc, #228]	; (8014b38 <__mdiff+0x110>)
 8014a52:	f7fd fa9b 	bl	8011f8c <__assert_func>
 8014a56:	2301      	movs	r3, #1
 8014a58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a60:	bfa4      	itt	ge
 8014a62:	4643      	movge	r3, r8
 8014a64:	46a0      	movge	r8, r4
 8014a66:	4630      	mov	r0, r6
 8014a68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014a6c:	bfa6      	itte	ge
 8014a6e:	461c      	movge	r4, r3
 8014a70:	2500      	movge	r5, #0
 8014a72:	2501      	movlt	r5, #1
 8014a74:	f7ff fcf6 	bl	8014464 <_Balloc>
 8014a78:	b920      	cbnz	r0, 8014a84 <__mdiff+0x5c>
 8014a7a:	4b2e      	ldr	r3, [pc, #184]	; (8014b34 <__mdiff+0x10c>)
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	f240 2145 	movw	r1, #581	; 0x245
 8014a82:	e7e5      	b.n	8014a50 <__mdiff+0x28>
 8014a84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014a88:	6926      	ldr	r6, [r4, #16]
 8014a8a:	60c5      	str	r5, [r0, #12]
 8014a8c:	f104 0914 	add.w	r9, r4, #20
 8014a90:	f108 0514 	add.w	r5, r8, #20
 8014a94:	f100 0e14 	add.w	lr, r0, #20
 8014a98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014aa0:	f108 0210 	add.w	r2, r8, #16
 8014aa4:	46f2      	mov	sl, lr
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014aac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014ab0:	fa11 f88b 	uxtah	r8, r1, fp
 8014ab4:	b299      	uxth	r1, r3
 8014ab6:	0c1b      	lsrs	r3, r3, #16
 8014ab8:	eba8 0801 	sub.w	r8, r8, r1
 8014abc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014ac0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014ac4:	fa1f f888 	uxth.w	r8, r8
 8014ac8:	1419      	asrs	r1, r3, #16
 8014aca:	454e      	cmp	r6, r9
 8014acc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014ad0:	f84a 3b04 	str.w	r3, [sl], #4
 8014ad4:	d8e8      	bhi.n	8014aa8 <__mdiff+0x80>
 8014ad6:	1b33      	subs	r3, r6, r4
 8014ad8:	3b15      	subs	r3, #21
 8014ada:	f023 0303 	bic.w	r3, r3, #3
 8014ade:	3304      	adds	r3, #4
 8014ae0:	3415      	adds	r4, #21
 8014ae2:	42a6      	cmp	r6, r4
 8014ae4:	bf38      	it	cc
 8014ae6:	2304      	movcc	r3, #4
 8014ae8:	441d      	add	r5, r3
 8014aea:	4473      	add	r3, lr
 8014aec:	469e      	mov	lr, r3
 8014aee:	462e      	mov	r6, r5
 8014af0:	4566      	cmp	r6, ip
 8014af2:	d30e      	bcc.n	8014b12 <__mdiff+0xea>
 8014af4:	f10c 0203 	add.w	r2, ip, #3
 8014af8:	1b52      	subs	r2, r2, r5
 8014afa:	f022 0203 	bic.w	r2, r2, #3
 8014afe:	3d03      	subs	r5, #3
 8014b00:	45ac      	cmp	ip, r5
 8014b02:	bf38      	it	cc
 8014b04:	2200      	movcc	r2, #0
 8014b06:	4413      	add	r3, r2
 8014b08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014b0c:	b17a      	cbz	r2, 8014b2e <__mdiff+0x106>
 8014b0e:	6107      	str	r7, [r0, #16]
 8014b10:	e7a4      	b.n	8014a5c <__mdiff+0x34>
 8014b12:	f856 8b04 	ldr.w	r8, [r6], #4
 8014b16:	fa11 f288 	uxtah	r2, r1, r8
 8014b1a:	1414      	asrs	r4, r2, #16
 8014b1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014b20:	b292      	uxth	r2, r2
 8014b22:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014b26:	f84e 2b04 	str.w	r2, [lr], #4
 8014b2a:	1421      	asrs	r1, r4, #16
 8014b2c:	e7e0      	b.n	8014af0 <__mdiff+0xc8>
 8014b2e:	3f01      	subs	r7, #1
 8014b30:	e7ea      	b.n	8014b08 <__mdiff+0xe0>
 8014b32:	bf00      	nop
 8014b34:	0801853b 	.word	0x0801853b
 8014b38:	0801854c 	.word	0x0801854c

08014b3c <__ulp>:
 8014b3c:	b082      	sub	sp, #8
 8014b3e:	ed8d 0b00 	vstr	d0, [sp]
 8014b42:	9a01      	ldr	r2, [sp, #4]
 8014b44:	4b0f      	ldr	r3, [pc, #60]	; (8014b84 <__ulp+0x48>)
 8014b46:	4013      	ands	r3, r2
 8014b48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	dc08      	bgt.n	8014b62 <__ulp+0x26>
 8014b50:	425b      	negs	r3, r3
 8014b52:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014b56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014b5a:	da04      	bge.n	8014b66 <__ulp+0x2a>
 8014b5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014b60:	4113      	asrs	r3, r2
 8014b62:	2200      	movs	r2, #0
 8014b64:	e008      	b.n	8014b78 <__ulp+0x3c>
 8014b66:	f1a2 0314 	sub.w	r3, r2, #20
 8014b6a:	2b1e      	cmp	r3, #30
 8014b6c:	bfda      	itte	le
 8014b6e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014b72:	40da      	lsrle	r2, r3
 8014b74:	2201      	movgt	r2, #1
 8014b76:	2300      	movs	r3, #0
 8014b78:	4619      	mov	r1, r3
 8014b7a:	4610      	mov	r0, r2
 8014b7c:	ec41 0b10 	vmov	d0, r0, r1
 8014b80:	b002      	add	sp, #8
 8014b82:	4770      	bx	lr
 8014b84:	7ff00000 	.word	0x7ff00000

08014b88 <__b2d>:
 8014b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b8c:	6906      	ldr	r6, [r0, #16]
 8014b8e:	f100 0814 	add.w	r8, r0, #20
 8014b92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014b96:	1f37      	subs	r7, r6, #4
 8014b98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014b9c:	4610      	mov	r0, r2
 8014b9e:	f7ff fd53 	bl	8014648 <__hi0bits>
 8014ba2:	f1c0 0320 	rsb	r3, r0, #32
 8014ba6:	280a      	cmp	r0, #10
 8014ba8:	600b      	str	r3, [r1, #0]
 8014baa:	491b      	ldr	r1, [pc, #108]	; (8014c18 <__b2d+0x90>)
 8014bac:	dc15      	bgt.n	8014bda <__b2d+0x52>
 8014bae:	f1c0 0c0b 	rsb	ip, r0, #11
 8014bb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8014bb6:	45b8      	cmp	r8, r7
 8014bb8:	ea43 0501 	orr.w	r5, r3, r1
 8014bbc:	bf34      	ite	cc
 8014bbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014bc2:	2300      	movcs	r3, #0
 8014bc4:	3015      	adds	r0, #21
 8014bc6:	fa02 f000 	lsl.w	r0, r2, r0
 8014bca:	fa23 f30c 	lsr.w	r3, r3, ip
 8014bce:	4303      	orrs	r3, r0
 8014bd0:	461c      	mov	r4, r3
 8014bd2:	ec45 4b10 	vmov	d0, r4, r5
 8014bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bda:	45b8      	cmp	r8, r7
 8014bdc:	bf3a      	itte	cc
 8014bde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014be2:	f1a6 0708 	subcc.w	r7, r6, #8
 8014be6:	2300      	movcs	r3, #0
 8014be8:	380b      	subs	r0, #11
 8014bea:	d012      	beq.n	8014c12 <__b2d+0x8a>
 8014bec:	f1c0 0120 	rsb	r1, r0, #32
 8014bf0:	fa23 f401 	lsr.w	r4, r3, r1
 8014bf4:	4082      	lsls	r2, r0
 8014bf6:	4322      	orrs	r2, r4
 8014bf8:	4547      	cmp	r7, r8
 8014bfa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014bfe:	bf8c      	ite	hi
 8014c00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014c04:	2200      	movls	r2, #0
 8014c06:	4083      	lsls	r3, r0
 8014c08:	40ca      	lsrs	r2, r1
 8014c0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014c0e:	4313      	orrs	r3, r2
 8014c10:	e7de      	b.n	8014bd0 <__b2d+0x48>
 8014c12:	ea42 0501 	orr.w	r5, r2, r1
 8014c16:	e7db      	b.n	8014bd0 <__b2d+0x48>
 8014c18:	3ff00000 	.word	0x3ff00000

08014c1c <__d2b>:
 8014c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c20:	460f      	mov	r7, r1
 8014c22:	2101      	movs	r1, #1
 8014c24:	ec59 8b10 	vmov	r8, r9, d0
 8014c28:	4616      	mov	r6, r2
 8014c2a:	f7ff fc1b 	bl	8014464 <_Balloc>
 8014c2e:	4604      	mov	r4, r0
 8014c30:	b930      	cbnz	r0, 8014c40 <__d2b+0x24>
 8014c32:	4602      	mov	r2, r0
 8014c34:	4b24      	ldr	r3, [pc, #144]	; (8014cc8 <__d2b+0xac>)
 8014c36:	4825      	ldr	r0, [pc, #148]	; (8014ccc <__d2b+0xb0>)
 8014c38:	f240 310f 	movw	r1, #783	; 0x30f
 8014c3c:	f7fd f9a6 	bl	8011f8c <__assert_func>
 8014c40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c48:	bb2d      	cbnz	r5, 8014c96 <__d2b+0x7a>
 8014c4a:	9301      	str	r3, [sp, #4]
 8014c4c:	f1b8 0300 	subs.w	r3, r8, #0
 8014c50:	d026      	beq.n	8014ca0 <__d2b+0x84>
 8014c52:	4668      	mov	r0, sp
 8014c54:	9300      	str	r3, [sp, #0]
 8014c56:	f7ff fd17 	bl	8014688 <__lo0bits>
 8014c5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014c5e:	b1e8      	cbz	r0, 8014c9c <__d2b+0x80>
 8014c60:	f1c0 0320 	rsb	r3, r0, #32
 8014c64:	fa02 f303 	lsl.w	r3, r2, r3
 8014c68:	430b      	orrs	r3, r1
 8014c6a:	40c2      	lsrs	r2, r0
 8014c6c:	6163      	str	r3, [r4, #20]
 8014c6e:	9201      	str	r2, [sp, #4]
 8014c70:	9b01      	ldr	r3, [sp, #4]
 8014c72:	61a3      	str	r3, [r4, #24]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	bf14      	ite	ne
 8014c78:	2202      	movne	r2, #2
 8014c7a:	2201      	moveq	r2, #1
 8014c7c:	6122      	str	r2, [r4, #16]
 8014c7e:	b1bd      	cbz	r5, 8014cb0 <__d2b+0x94>
 8014c80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014c84:	4405      	add	r5, r0
 8014c86:	603d      	str	r5, [r7, #0]
 8014c88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014c8c:	6030      	str	r0, [r6, #0]
 8014c8e:	4620      	mov	r0, r4
 8014c90:	b003      	add	sp, #12
 8014c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014c9a:	e7d6      	b.n	8014c4a <__d2b+0x2e>
 8014c9c:	6161      	str	r1, [r4, #20]
 8014c9e:	e7e7      	b.n	8014c70 <__d2b+0x54>
 8014ca0:	a801      	add	r0, sp, #4
 8014ca2:	f7ff fcf1 	bl	8014688 <__lo0bits>
 8014ca6:	9b01      	ldr	r3, [sp, #4]
 8014ca8:	6163      	str	r3, [r4, #20]
 8014caa:	3020      	adds	r0, #32
 8014cac:	2201      	movs	r2, #1
 8014cae:	e7e5      	b.n	8014c7c <__d2b+0x60>
 8014cb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014cb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014cb8:	6038      	str	r0, [r7, #0]
 8014cba:	6918      	ldr	r0, [r3, #16]
 8014cbc:	f7ff fcc4 	bl	8014648 <__hi0bits>
 8014cc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014cc4:	e7e2      	b.n	8014c8c <__d2b+0x70>
 8014cc6:	bf00      	nop
 8014cc8:	0801853b 	.word	0x0801853b
 8014ccc:	0801854c 	.word	0x0801854c

08014cd0 <__ratio>:
 8014cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd4:	4688      	mov	r8, r1
 8014cd6:	4669      	mov	r1, sp
 8014cd8:	4681      	mov	r9, r0
 8014cda:	f7ff ff55 	bl	8014b88 <__b2d>
 8014cde:	a901      	add	r1, sp, #4
 8014ce0:	4640      	mov	r0, r8
 8014ce2:	ec55 4b10 	vmov	r4, r5, d0
 8014ce6:	f7ff ff4f 	bl	8014b88 <__b2d>
 8014cea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014cee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014cf2:	eba3 0c02 	sub.w	ip, r3, r2
 8014cf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014cfa:	1a9b      	subs	r3, r3, r2
 8014cfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014d00:	ec51 0b10 	vmov	r0, r1, d0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	bfd6      	itet	le
 8014d08:	460a      	movle	r2, r1
 8014d0a:	462a      	movgt	r2, r5
 8014d0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014d10:	468b      	mov	fp, r1
 8014d12:	462f      	mov	r7, r5
 8014d14:	bfd4      	ite	le
 8014d16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014d1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014d1e:	4620      	mov	r0, r4
 8014d20:	ee10 2a10 	vmov	r2, s0
 8014d24:	465b      	mov	r3, fp
 8014d26:	4639      	mov	r1, r7
 8014d28:	f7eb fd90 	bl	800084c <__aeabi_ddiv>
 8014d2c:	ec41 0b10 	vmov	d0, r0, r1
 8014d30:	b003      	add	sp, #12
 8014d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d36 <__copybits>:
 8014d36:	3901      	subs	r1, #1
 8014d38:	b570      	push	{r4, r5, r6, lr}
 8014d3a:	1149      	asrs	r1, r1, #5
 8014d3c:	6914      	ldr	r4, [r2, #16]
 8014d3e:	3101      	adds	r1, #1
 8014d40:	f102 0314 	add.w	r3, r2, #20
 8014d44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014d48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014d4c:	1f05      	subs	r5, r0, #4
 8014d4e:	42a3      	cmp	r3, r4
 8014d50:	d30c      	bcc.n	8014d6c <__copybits+0x36>
 8014d52:	1aa3      	subs	r3, r4, r2
 8014d54:	3b11      	subs	r3, #17
 8014d56:	f023 0303 	bic.w	r3, r3, #3
 8014d5a:	3211      	adds	r2, #17
 8014d5c:	42a2      	cmp	r2, r4
 8014d5e:	bf88      	it	hi
 8014d60:	2300      	movhi	r3, #0
 8014d62:	4418      	add	r0, r3
 8014d64:	2300      	movs	r3, #0
 8014d66:	4288      	cmp	r0, r1
 8014d68:	d305      	bcc.n	8014d76 <__copybits+0x40>
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}
 8014d6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014d70:	f845 6f04 	str.w	r6, [r5, #4]!
 8014d74:	e7eb      	b.n	8014d4e <__copybits+0x18>
 8014d76:	f840 3b04 	str.w	r3, [r0], #4
 8014d7a:	e7f4      	b.n	8014d66 <__copybits+0x30>

08014d7c <__any_on>:
 8014d7c:	f100 0214 	add.w	r2, r0, #20
 8014d80:	6900      	ldr	r0, [r0, #16]
 8014d82:	114b      	asrs	r3, r1, #5
 8014d84:	4298      	cmp	r0, r3
 8014d86:	b510      	push	{r4, lr}
 8014d88:	db11      	blt.n	8014dae <__any_on+0x32>
 8014d8a:	dd0a      	ble.n	8014da2 <__any_on+0x26>
 8014d8c:	f011 011f 	ands.w	r1, r1, #31
 8014d90:	d007      	beq.n	8014da2 <__any_on+0x26>
 8014d92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014d96:	fa24 f001 	lsr.w	r0, r4, r1
 8014d9a:	fa00 f101 	lsl.w	r1, r0, r1
 8014d9e:	428c      	cmp	r4, r1
 8014da0:	d10b      	bne.n	8014dba <__any_on+0x3e>
 8014da2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d803      	bhi.n	8014db2 <__any_on+0x36>
 8014daa:	2000      	movs	r0, #0
 8014dac:	bd10      	pop	{r4, pc}
 8014dae:	4603      	mov	r3, r0
 8014db0:	e7f7      	b.n	8014da2 <__any_on+0x26>
 8014db2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014db6:	2900      	cmp	r1, #0
 8014db8:	d0f5      	beq.n	8014da6 <__any_on+0x2a>
 8014dba:	2001      	movs	r0, #1
 8014dbc:	e7f6      	b.n	8014dac <__any_on+0x30>

08014dbe <sulp>:
 8014dbe:	b570      	push	{r4, r5, r6, lr}
 8014dc0:	4604      	mov	r4, r0
 8014dc2:	460d      	mov	r5, r1
 8014dc4:	ec45 4b10 	vmov	d0, r4, r5
 8014dc8:	4616      	mov	r6, r2
 8014dca:	f7ff feb7 	bl	8014b3c <__ulp>
 8014dce:	ec51 0b10 	vmov	r0, r1, d0
 8014dd2:	b17e      	cbz	r6, 8014df4 <sulp+0x36>
 8014dd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014dd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	dd09      	ble.n	8014df4 <sulp+0x36>
 8014de0:	051b      	lsls	r3, r3, #20
 8014de2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014de6:	2400      	movs	r4, #0
 8014de8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014dec:	4622      	mov	r2, r4
 8014dee:	462b      	mov	r3, r5
 8014df0:	f7eb fc02 	bl	80005f8 <__aeabi_dmul>
 8014df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014df8 <_strtod_l>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	ed2d 8b02 	vpush	{d8}
 8014e00:	b09b      	sub	sp, #108	; 0x6c
 8014e02:	4604      	mov	r4, r0
 8014e04:	9213      	str	r2, [sp, #76]	; 0x4c
 8014e06:	2200      	movs	r2, #0
 8014e08:	9216      	str	r2, [sp, #88]	; 0x58
 8014e0a:	460d      	mov	r5, r1
 8014e0c:	f04f 0800 	mov.w	r8, #0
 8014e10:	f04f 0900 	mov.w	r9, #0
 8014e14:	460a      	mov	r2, r1
 8014e16:	9215      	str	r2, [sp, #84]	; 0x54
 8014e18:	7811      	ldrb	r1, [r2, #0]
 8014e1a:	292b      	cmp	r1, #43	; 0x2b
 8014e1c:	d04c      	beq.n	8014eb8 <_strtod_l+0xc0>
 8014e1e:	d83a      	bhi.n	8014e96 <_strtod_l+0x9e>
 8014e20:	290d      	cmp	r1, #13
 8014e22:	d834      	bhi.n	8014e8e <_strtod_l+0x96>
 8014e24:	2908      	cmp	r1, #8
 8014e26:	d834      	bhi.n	8014e92 <_strtod_l+0x9a>
 8014e28:	2900      	cmp	r1, #0
 8014e2a:	d03d      	beq.n	8014ea8 <_strtod_l+0xb0>
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	920a      	str	r2, [sp, #40]	; 0x28
 8014e30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014e32:	7832      	ldrb	r2, [r6, #0]
 8014e34:	2a30      	cmp	r2, #48	; 0x30
 8014e36:	f040 80b4 	bne.w	8014fa2 <_strtod_l+0x1aa>
 8014e3a:	7872      	ldrb	r2, [r6, #1]
 8014e3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014e40:	2a58      	cmp	r2, #88	; 0x58
 8014e42:	d170      	bne.n	8014f26 <_strtod_l+0x12e>
 8014e44:	9302      	str	r3, [sp, #8]
 8014e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e48:	9301      	str	r3, [sp, #4]
 8014e4a:	ab16      	add	r3, sp, #88	; 0x58
 8014e4c:	9300      	str	r3, [sp, #0]
 8014e4e:	4a8e      	ldr	r2, [pc, #568]	; (8015088 <_strtod_l+0x290>)
 8014e50:	ab17      	add	r3, sp, #92	; 0x5c
 8014e52:	a915      	add	r1, sp, #84	; 0x54
 8014e54:	4620      	mov	r0, r4
 8014e56:	f001 fa6d 	bl	8016334 <__gethex>
 8014e5a:	f010 070f 	ands.w	r7, r0, #15
 8014e5e:	4605      	mov	r5, r0
 8014e60:	d005      	beq.n	8014e6e <_strtod_l+0x76>
 8014e62:	2f06      	cmp	r7, #6
 8014e64:	d12a      	bne.n	8014ebc <_strtod_l+0xc4>
 8014e66:	3601      	adds	r6, #1
 8014e68:	2300      	movs	r3, #0
 8014e6a:	9615      	str	r6, [sp, #84]	; 0x54
 8014e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8014e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	f040 857f 	bne.w	8015974 <_strtod_l+0xb7c>
 8014e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e78:	b1db      	cbz	r3, 8014eb2 <_strtod_l+0xba>
 8014e7a:	4642      	mov	r2, r8
 8014e7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014e80:	ec43 2b10 	vmov	d0, r2, r3
 8014e84:	b01b      	add	sp, #108	; 0x6c
 8014e86:	ecbd 8b02 	vpop	{d8}
 8014e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8e:	2920      	cmp	r1, #32
 8014e90:	d1cc      	bne.n	8014e2c <_strtod_l+0x34>
 8014e92:	3201      	adds	r2, #1
 8014e94:	e7bf      	b.n	8014e16 <_strtod_l+0x1e>
 8014e96:	292d      	cmp	r1, #45	; 0x2d
 8014e98:	d1c8      	bne.n	8014e2c <_strtod_l+0x34>
 8014e9a:	2101      	movs	r1, #1
 8014e9c:	910a      	str	r1, [sp, #40]	; 0x28
 8014e9e:	1c51      	adds	r1, r2, #1
 8014ea0:	9115      	str	r1, [sp, #84]	; 0x54
 8014ea2:	7852      	ldrb	r2, [r2, #1]
 8014ea4:	2a00      	cmp	r2, #0
 8014ea6:	d1c3      	bne.n	8014e30 <_strtod_l+0x38>
 8014ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014eaa:	9515      	str	r5, [sp, #84]	; 0x54
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	f040 855f 	bne.w	8015970 <_strtod_l+0xb78>
 8014eb2:	4642      	mov	r2, r8
 8014eb4:	464b      	mov	r3, r9
 8014eb6:	e7e3      	b.n	8014e80 <_strtod_l+0x88>
 8014eb8:	2100      	movs	r1, #0
 8014eba:	e7ef      	b.n	8014e9c <_strtod_l+0xa4>
 8014ebc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ebe:	b13a      	cbz	r2, 8014ed0 <_strtod_l+0xd8>
 8014ec0:	2135      	movs	r1, #53	; 0x35
 8014ec2:	a818      	add	r0, sp, #96	; 0x60
 8014ec4:	f7ff ff37 	bl	8014d36 <__copybits>
 8014ec8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f7ff fb0a 	bl	80144e4 <_Bfree>
 8014ed0:	3f01      	subs	r7, #1
 8014ed2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ed4:	2f04      	cmp	r7, #4
 8014ed6:	d806      	bhi.n	8014ee6 <_strtod_l+0xee>
 8014ed8:	e8df f007 	tbb	[pc, r7]
 8014edc:	201d0314 	.word	0x201d0314
 8014ee0:	14          	.byte	0x14
 8014ee1:	00          	.byte	0x00
 8014ee2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014ee6:	05e9      	lsls	r1, r5, #23
 8014ee8:	bf48      	it	mi
 8014eea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014eee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ef2:	0d1b      	lsrs	r3, r3, #20
 8014ef4:	051b      	lsls	r3, r3, #20
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d1b9      	bne.n	8014e6e <_strtod_l+0x76>
 8014efa:	f7fe faef 	bl	80134dc <__errno>
 8014efe:	2322      	movs	r3, #34	; 0x22
 8014f00:	6003      	str	r3, [r0, #0]
 8014f02:	e7b4      	b.n	8014e6e <_strtod_l+0x76>
 8014f04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014f08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014f0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014f10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014f14:	e7e7      	b.n	8014ee6 <_strtod_l+0xee>
 8014f16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015090 <_strtod_l+0x298>
 8014f1a:	e7e4      	b.n	8014ee6 <_strtod_l+0xee>
 8014f1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014f20:	f04f 38ff 	mov.w	r8, #4294967295
 8014f24:	e7df      	b.n	8014ee6 <_strtod_l+0xee>
 8014f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f28:	1c5a      	adds	r2, r3, #1
 8014f2a:	9215      	str	r2, [sp, #84]	; 0x54
 8014f2c:	785b      	ldrb	r3, [r3, #1]
 8014f2e:	2b30      	cmp	r3, #48	; 0x30
 8014f30:	d0f9      	beq.n	8014f26 <_strtod_l+0x12e>
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d09b      	beq.n	8014e6e <_strtod_l+0x76>
 8014f36:	2301      	movs	r3, #1
 8014f38:	f04f 0a00 	mov.w	sl, #0
 8014f3c:	9304      	str	r3, [sp, #16]
 8014f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014f46:	46d3      	mov	fp, sl
 8014f48:	220a      	movs	r2, #10
 8014f4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014f4c:	7806      	ldrb	r6, [r0, #0]
 8014f4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014f52:	b2d9      	uxtb	r1, r3
 8014f54:	2909      	cmp	r1, #9
 8014f56:	d926      	bls.n	8014fa6 <_strtod_l+0x1ae>
 8014f58:	494c      	ldr	r1, [pc, #304]	; (801508c <_strtod_l+0x294>)
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	f7fe f9dc 	bl	8013318 <strncmp>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	d030      	beq.n	8014fc6 <_strtod_l+0x1ce>
 8014f64:	2000      	movs	r0, #0
 8014f66:	4632      	mov	r2, r6
 8014f68:	9005      	str	r0, [sp, #20]
 8014f6a:	465e      	mov	r6, fp
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2a65      	cmp	r2, #101	; 0x65
 8014f70:	d001      	beq.n	8014f76 <_strtod_l+0x17e>
 8014f72:	2a45      	cmp	r2, #69	; 0x45
 8014f74:	d113      	bne.n	8014f9e <_strtod_l+0x1a6>
 8014f76:	b91e      	cbnz	r6, 8014f80 <_strtod_l+0x188>
 8014f78:	9a04      	ldr	r2, [sp, #16]
 8014f7a:	4302      	orrs	r2, r0
 8014f7c:	d094      	beq.n	8014ea8 <_strtod_l+0xb0>
 8014f7e:	2600      	movs	r6, #0
 8014f80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014f82:	1c6a      	adds	r2, r5, #1
 8014f84:	9215      	str	r2, [sp, #84]	; 0x54
 8014f86:	786a      	ldrb	r2, [r5, #1]
 8014f88:	2a2b      	cmp	r2, #43	; 0x2b
 8014f8a:	d074      	beq.n	8015076 <_strtod_l+0x27e>
 8014f8c:	2a2d      	cmp	r2, #45	; 0x2d
 8014f8e:	d078      	beq.n	8015082 <_strtod_l+0x28a>
 8014f90:	f04f 0c00 	mov.w	ip, #0
 8014f94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014f98:	2909      	cmp	r1, #9
 8014f9a:	d97f      	bls.n	801509c <_strtod_l+0x2a4>
 8014f9c:	9515      	str	r5, [sp, #84]	; 0x54
 8014f9e:	2700      	movs	r7, #0
 8014fa0:	e09e      	b.n	80150e0 <_strtod_l+0x2e8>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	e7c8      	b.n	8014f38 <_strtod_l+0x140>
 8014fa6:	f1bb 0f08 	cmp.w	fp, #8
 8014faa:	bfd8      	it	le
 8014fac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014fae:	f100 0001 	add.w	r0, r0, #1
 8014fb2:	bfda      	itte	le
 8014fb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8014fb8:	9309      	strle	r3, [sp, #36]	; 0x24
 8014fba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014fbe:	f10b 0b01 	add.w	fp, fp, #1
 8014fc2:	9015      	str	r0, [sp, #84]	; 0x54
 8014fc4:	e7c1      	b.n	8014f4a <_strtod_l+0x152>
 8014fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fc8:	1c5a      	adds	r2, r3, #1
 8014fca:	9215      	str	r2, [sp, #84]	; 0x54
 8014fcc:	785a      	ldrb	r2, [r3, #1]
 8014fce:	f1bb 0f00 	cmp.w	fp, #0
 8014fd2:	d037      	beq.n	8015044 <_strtod_l+0x24c>
 8014fd4:	9005      	str	r0, [sp, #20]
 8014fd6:	465e      	mov	r6, fp
 8014fd8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014fdc:	2b09      	cmp	r3, #9
 8014fde:	d912      	bls.n	8015006 <_strtod_l+0x20e>
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	e7c4      	b.n	8014f6e <_strtod_l+0x176>
 8014fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fe6:	1c5a      	adds	r2, r3, #1
 8014fe8:	9215      	str	r2, [sp, #84]	; 0x54
 8014fea:	785a      	ldrb	r2, [r3, #1]
 8014fec:	3001      	adds	r0, #1
 8014fee:	2a30      	cmp	r2, #48	; 0x30
 8014ff0:	d0f8      	beq.n	8014fe4 <_strtod_l+0x1ec>
 8014ff2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014ff6:	2b08      	cmp	r3, #8
 8014ff8:	f200 84c1 	bhi.w	801597e <_strtod_l+0xb86>
 8014ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ffe:	9005      	str	r0, [sp, #20]
 8015000:	2000      	movs	r0, #0
 8015002:	930b      	str	r3, [sp, #44]	; 0x2c
 8015004:	4606      	mov	r6, r0
 8015006:	3a30      	subs	r2, #48	; 0x30
 8015008:	f100 0301 	add.w	r3, r0, #1
 801500c:	d014      	beq.n	8015038 <_strtod_l+0x240>
 801500e:	9905      	ldr	r1, [sp, #20]
 8015010:	4419      	add	r1, r3
 8015012:	9105      	str	r1, [sp, #20]
 8015014:	4633      	mov	r3, r6
 8015016:	eb00 0c06 	add.w	ip, r0, r6
 801501a:	210a      	movs	r1, #10
 801501c:	4563      	cmp	r3, ip
 801501e:	d113      	bne.n	8015048 <_strtod_l+0x250>
 8015020:	1833      	adds	r3, r6, r0
 8015022:	2b08      	cmp	r3, #8
 8015024:	f106 0601 	add.w	r6, r6, #1
 8015028:	4406      	add	r6, r0
 801502a:	dc1a      	bgt.n	8015062 <_strtod_l+0x26a>
 801502c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801502e:	230a      	movs	r3, #10
 8015030:	fb03 2301 	mla	r3, r3, r1, r2
 8015034:	9309      	str	r3, [sp, #36]	; 0x24
 8015036:	2300      	movs	r3, #0
 8015038:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801503a:	1c51      	adds	r1, r2, #1
 801503c:	9115      	str	r1, [sp, #84]	; 0x54
 801503e:	7852      	ldrb	r2, [r2, #1]
 8015040:	4618      	mov	r0, r3
 8015042:	e7c9      	b.n	8014fd8 <_strtod_l+0x1e0>
 8015044:	4658      	mov	r0, fp
 8015046:	e7d2      	b.n	8014fee <_strtod_l+0x1f6>
 8015048:	2b08      	cmp	r3, #8
 801504a:	f103 0301 	add.w	r3, r3, #1
 801504e:	dc03      	bgt.n	8015058 <_strtod_l+0x260>
 8015050:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015052:	434f      	muls	r7, r1
 8015054:	9709      	str	r7, [sp, #36]	; 0x24
 8015056:	e7e1      	b.n	801501c <_strtod_l+0x224>
 8015058:	2b10      	cmp	r3, #16
 801505a:	bfd8      	it	le
 801505c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015060:	e7dc      	b.n	801501c <_strtod_l+0x224>
 8015062:	2e10      	cmp	r6, #16
 8015064:	bfdc      	itt	le
 8015066:	230a      	movle	r3, #10
 8015068:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801506c:	e7e3      	b.n	8015036 <_strtod_l+0x23e>
 801506e:	2300      	movs	r3, #0
 8015070:	9305      	str	r3, [sp, #20]
 8015072:	2301      	movs	r3, #1
 8015074:	e780      	b.n	8014f78 <_strtod_l+0x180>
 8015076:	f04f 0c00 	mov.w	ip, #0
 801507a:	1caa      	adds	r2, r5, #2
 801507c:	9215      	str	r2, [sp, #84]	; 0x54
 801507e:	78aa      	ldrb	r2, [r5, #2]
 8015080:	e788      	b.n	8014f94 <_strtod_l+0x19c>
 8015082:	f04f 0c01 	mov.w	ip, #1
 8015086:	e7f8      	b.n	801507a <_strtod_l+0x282>
 8015088:	080186a8 	.word	0x080186a8
 801508c:	080186a4 	.word	0x080186a4
 8015090:	7ff00000 	.word	0x7ff00000
 8015094:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015096:	1c51      	adds	r1, r2, #1
 8015098:	9115      	str	r1, [sp, #84]	; 0x54
 801509a:	7852      	ldrb	r2, [r2, #1]
 801509c:	2a30      	cmp	r2, #48	; 0x30
 801509e:	d0f9      	beq.n	8015094 <_strtod_l+0x29c>
 80150a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80150a4:	2908      	cmp	r1, #8
 80150a6:	f63f af7a 	bhi.w	8014f9e <_strtod_l+0x1a6>
 80150aa:	3a30      	subs	r2, #48	; 0x30
 80150ac:	9208      	str	r2, [sp, #32]
 80150ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150b0:	920c      	str	r2, [sp, #48]	; 0x30
 80150b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150b4:	1c57      	adds	r7, r2, #1
 80150b6:	9715      	str	r7, [sp, #84]	; 0x54
 80150b8:	7852      	ldrb	r2, [r2, #1]
 80150ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80150be:	f1be 0f09 	cmp.w	lr, #9
 80150c2:	d938      	bls.n	8015136 <_strtod_l+0x33e>
 80150c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80150c6:	1a7f      	subs	r7, r7, r1
 80150c8:	2f08      	cmp	r7, #8
 80150ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80150ce:	dc03      	bgt.n	80150d8 <_strtod_l+0x2e0>
 80150d0:	9908      	ldr	r1, [sp, #32]
 80150d2:	428f      	cmp	r7, r1
 80150d4:	bfa8      	it	ge
 80150d6:	460f      	movge	r7, r1
 80150d8:	f1bc 0f00 	cmp.w	ip, #0
 80150dc:	d000      	beq.n	80150e0 <_strtod_l+0x2e8>
 80150de:	427f      	negs	r7, r7
 80150e0:	2e00      	cmp	r6, #0
 80150e2:	d14f      	bne.n	8015184 <_strtod_l+0x38c>
 80150e4:	9904      	ldr	r1, [sp, #16]
 80150e6:	4301      	orrs	r1, r0
 80150e8:	f47f aec1 	bne.w	8014e6e <_strtod_l+0x76>
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	f47f aedb 	bne.w	8014ea8 <_strtod_l+0xb0>
 80150f2:	2a69      	cmp	r2, #105	; 0x69
 80150f4:	d029      	beq.n	801514a <_strtod_l+0x352>
 80150f6:	dc26      	bgt.n	8015146 <_strtod_l+0x34e>
 80150f8:	2a49      	cmp	r2, #73	; 0x49
 80150fa:	d026      	beq.n	801514a <_strtod_l+0x352>
 80150fc:	2a4e      	cmp	r2, #78	; 0x4e
 80150fe:	f47f aed3 	bne.w	8014ea8 <_strtod_l+0xb0>
 8015102:	499b      	ldr	r1, [pc, #620]	; (8015370 <_strtod_l+0x578>)
 8015104:	a815      	add	r0, sp, #84	; 0x54
 8015106:	f001 fb55 	bl	80167b4 <__match>
 801510a:	2800      	cmp	r0, #0
 801510c:	f43f aecc 	beq.w	8014ea8 <_strtod_l+0xb0>
 8015110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	2b28      	cmp	r3, #40	; 0x28
 8015116:	d12f      	bne.n	8015178 <_strtod_l+0x380>
 8015118:	4996      	ldr	r1, [pc, #600]	; (8015374 <_strtod_l+0x57c>)
 801511a:	aa18      	add	r2, sp, #96	; 0x60
 801511c:	a815      	add	r0, sp, #84	; 0x54
 801511e:	f001 fb5d 	bl	80167dc <__hexnan>
 8015122:	2805      	cmp	r0, #5
 8015124:	d128      	bne.n	8015178 <_strtod_l+0x380>
 8015126:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801512c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015130:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015134:	e69b      	b.n	8014e6e <_strtod_l+0x76>
 8015136:	9f08      	ldr	r7, [sp, #32]
 8015138:	210a      	movs	r1, #10
 801513a:	fb01 2107 	mla	r1, r1, r7, r2
 801513e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015142:	9208      	str	r2, [sp, #32]
 8015144:	e7b5      	b.n	80150b2 <_strtod_l+0x2ba>
 8015146:	2a6e      	cmp	r2, #110	; 0x6e
 8015148:	e7d9      	b.n	80150fe <_strtod_l+0x306>
 801514a:	498b      	ldr	r1, [pc, #556]	; (8015378 <_strtod_l+0x580>)
 801514c:	a815      	add	r0, sp, #84	; 0x54
 801514e:	f001 fb31 	bl	80167b4 <__match>
 8015152:	2800      	cmp	r0, #0
 8015154:	f43f aea8 	beq.w	8014ea8 <_strtod_l+0xb0>
 8015158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801515a:	4988      	ldr	r1, [pc, #544]	; (801537c <_strtod_l+0x584>)
 801515c:	3b01      	subs	r3, #1
 801515e:	a815      	add	r0, sp, #84	; 0x54
 8015160:	9315      	str	r3, [sp, #84]	; 0x54
 8015162:	f001 fb27 	bl	80167b4 <__match>
 8015166:	b910      	cbnz	r0, 801516e <_strtod_l+0x376>
 8015168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801516a:	3301      	adds	r3, #1
 801516c:	9315      	str	r3, [sp, #84]	; 0x54
 801516e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801538c <_strtod_l+0x594>
 8015172:	f04f 0800 	mov.w	r8, #0
 8015176:	e67a      	b.n	8014e6e <_strtod_l+0x76>
 8015178:	4881      	ldr	r0, [pc, #516]	; (8015380 <_strtod_l+0x588>)
 801517a:	f001 f855 	bl	8016228 <nan>
 801517e:	ec59 8b10 	vmov	r8, r9, d0
 8015182:	e674      	b.n	8014e6e <_strtod_l+0x76>
 8015184:	9b05      	ldr	r3, [sp, #20]
 8015186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015188:	1afb      	subs	r3, r7, r3
 801518a:	f1bb 0f00 	cmp.w	fp, #0
 801518e:	bf08      	it	eq
 8015190:	46b3      	moveq	fp, r6
 8015192:	2e10      	cmp	r6, #16
 8015194:	9308      	str	r3, [sp, #32]
 8015196:	4635      	mov	r5, r6
 8015198:	bfa8      	it	ge
 801519a:	2510      	movge	r5, #16
 801519c:	f7eb f9b2 	bl	8000504 <__aeabi_ui2d>
 80151a0:	2e09      	cmp	r6, #9
 80151a2:	4680      	mov	r8, r0
 80151a4:	4689      	mov	r9, r1
 80151a6:	dd13      	ble.n	80151d0 <_strtod_l+0x3d8>
 80151a8:	4b76      	ldr	r3, [pc, #472]	; (8015384 <_strtod_l+0x58c>)
 80151aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80151ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80151b2:	f7eb fa21 	bl	80005f8 <__aeabi_dmul>
 80151b6:	4680      	mov	r8, r0
 80151b8:	4650      	mov	r0, sl
 80151ba:	4689      	mov	r9, r1
 80151bc:	f7eb f9a2 	bl	8000504 <__aeabi_ui2d>
 80151c0:	4602      	mov	r2, r0
 80151c2:	460b      	mov	r3, r1
 80151c4:	4640      	mov	r0, r8
 80151c6:	4649      	mov	r1, r9
 80151c8:	f7eb f860 	bl	800028c <__adddf3>
 80151cc:	4680      	mov	r8, r0
 80151ce:	4689      	mov	r9, r1
 80151d0:	2e0f      	cmp	r6, #15
 80151d2:	dc38      	bgt.n	8015246 <_strtod_l+0x44e>
 80151d4:	9b08      	ldr	r3, [sp, #32]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f43f ae49 	beq.w	8014e6e <_strtod_l+0x76>
 80151dc:	dd24      	ble.n	8015228 <_strtod_l+0x430>
 80151de:	2b16      	cmp	r3, #22
 80151e0:	dc0b      	bgt.n	80151fa <_strtod_l+0x402>
 80151e2:	4968      	ldr	r1, [pc, #416]	; (8015384 <_strtod_l+0x58c>)
 80151e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80151e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151ec:	4642      	mov	r2, r8
 80151ee:	464b      	mov	r3, r9
 80151f0:	f7eb fa02 	bl	80005f8 <__aeabi_dmul>
 80151f4:	4680      	mov	r8, r0
 80151f6:	4689      	mov	r9, r1
 80151f8:	e639      	b.n	8014e6e <_strtod_l+0x76>
 80151fa:	9a08      	ldr	r2, [sp, #32]
 80151fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015200:	4293      	cmp	r3, r2
 8015202:	db20      	blt.n	8015246 <_strtod_l+0x44e>
 8015204:	4c5f      	ldr	r4, [pc, #380]	; (8015384 <_strtod_l+0x58c>)
 8015206:	f1c6 060f 	rsb	r6, r6, #15
 801520a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801520e:	4642      	mov	r2, r8
 8015210:	464b      	mov	r3, r9
 8015212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015216:	f7eb f9ef 	bl	80005f8 <__aeabi_dmul>
 801521a:	9b08      	ldr	r3, [sp, #32]
 801521c:	1b9e      	subs	r6, r3, r6
 801521e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015222:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015226:	e7e3      	b.n	80151f0 <_strtod_l+0x3f8>
 8015228:	9b08      	ldr	r3, [sp, #32]
 801522a:	3316      	adds	r3, #22
 801522c:	db0b      	blt.n	8015246 <_strtod_l+0x44e>
 801522e:	9b05      	ldr	r3, [sp, #20]
 8015230:	1bdf      	subs	r7, r3, r7
 8015232:	4b54      	ldr	r3, [pc, #336]	; (8015384 <_strtod_l+0x58c>)
 8015234:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015238:	e9d7 2300 	ldrd	r2, r3, [r7]
 801523c:	4640      	mov	r0, r8
 801523e:	4649      	mov	r1, r9
 8015240:	f7eb fb04 	bl	800084c <__aeabi_ddiv>
 8015244:	e7d6      	b.n	80151f4 <_strtod_l+0x3fc>
 8015246:	9b08      	ldr	r3, [sp, #32]
 8015248:	1b75      	subs	r5, r6, r5
 801524a:	441d      	add	r5, r3
 801524c:	2d00      	cmp	r5, #0
 801524e:	dd70      	ble.n	8015332 <_strtod_l+0x53a>
 8015250:	f015 030f 	ands.w	r3, r5, #15
 8015254:	d00a      	beq.n	801526c <_strtod_l+0x474>
 8015256:	494b      	ldr	r1, [pc, #300]	; (8015384 <_strtod_l+0x58c>)
 8015258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801525c:	4642      	mov	r2, r8
 801525e:	464b      	mov	r3, r9
 8015260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015264:	f7eb f9c8 	bl	80005f8 <__aeabi_dmul>
 8015268:	4680      	mov	r8, r0
 801526a:	4689      	mov	r9, r1
 801526c:	f035 050f 	bics.w	r5, r5, #15
 8015270:	d04d      	beq.n	801530e <_strtod_l+0x516>
 8015272:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015276:	dd22      	ble.n	80152be <_strtod_l+0x4c6>
 8015278:	2500      	movs	r5, #0
 801527a:	46ab      	mov	fp, r5
 801527c:	9509      	str	r5, [sp, #36]	; 0x24
 801527e:	9505      	str	r5, [sp, #20]
 8015280:	2322      	movs	r3, #34	; 0x22
 8015282:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801538c <_strtod_l+0x594>
 8015286:	6023      	str	r3, [r4, #0]
 8015288:	f04f 0800 	mov.w	r8, #0
 801528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801528e:	2b00      	cmp	r3, #0
 8015290:	f43f aded 	beq.w	8014e6e <_strtod_l+0x76>
 8015294:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015296:	4620      	mov	r0, r4
 8015298:	f7ff f924 	bl	80144e4 <_Bfree>
 801529c:	9905      	ldr	r1, [sp, #20]
 801529e:	4620      	mov	r0, r4
 80152a0:	f7ff f920 	bl	80144e4 <_Bfree>
 80152a4:	4659      	mov	r1, fp
 80152a6:	4620      	mov	r0, r4
 80152a8:	f7ff f91c 	bl	80144e4 <_Bfree>
 80152ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152ae:	4620      	mov	r0, r4
 80152b0:	f7ff f918 	bl	80144e4 <_Bfree>
 80152b4:	4629      	mov	r1, r5
 80152b6:	4620      	mov	r0, r4
 80152b8:	f7ff f914 	bl	80144e4 <_Bfree>
 80152bc:	e5d7      	b.n	8014e6e <_strtod_l+0x76>
 80152be:	4b32      	ldr	r3, [pc, #200]	; (8015388 <_strtod_l+0x590>)
 80152c0:	9304      	str	r3, [sp, #16]
 80152c2:	2300      	movs	r3, #0
 80152c4:	112d      	asrs	r5, r5, #4
 80152c6:	4640      	mov	r0, r8
 80152c8:	4649      	mov	r1, r9
 80152ca:	469a      	mov	sl, r3
 80152cc:	2d01      	cmp	r5, #1
 80152ce:	dc21      	bgt.n	8015314 <_strtod_l+0x51c>
 80152d0:	b10b      	cbz	r3, 80152d6 <_strtod_l+0x4de>
 80152d2:	4680      	mov	r8, r0
 80152d4:	4689      	mov	r9, r1
 80152d6:	492c      	ldr	r1, [pc, #176]	; (8015388 <_strtod_l+0x590>)
 80152d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80152dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80152e0:	4642      	mov	r2, r8
 80152e2:	464b      	mov	r3, r9
 80152e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152e8:	f7eb f986 	bl	80005f8 <__aeabi_dmul>
 80152ec:	4b27      	ldr	r3, [pc, #156]	; (801538c <_strtod_l+0x594>)
 80152ee:	460a      	mov	r2, r1
 80152f0:	400b      	ands	r3, r1
 80152f2:	4927      	ldr	r1, [pc, #156]	; (8015390 <_strtod_l+0x598>)
 80152f4:	428b      	cmp	r3, r1
 80152f6:	4680      	mov	r8, r0
 80152f8:	d8be      	bhi.n	8015278 <_strtod_l+0x480>
 80152fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80152fe:	428b      	cmp	r3, r1
 8015300:	bf86      	itte	hi
 8015302:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015394 <_strtod_l+0x59c>
 8015306:	f04f 38ff 	movhi.w	r8, #4294967295
 801530a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801530e:	2300      	movs	r3, #0
 8015310:	9304      	str	r3, [sp, #16]
 8015312:	e07b      	b.n	801540c <_strtod_l+0x614>
 8015314:	07ea      	lsls	r2, r5, #31
 8015316:	d505      	bpl.n	8015324 <_strtod_l+0x52c>
 8015318:	9b04      	ldr	r3, [sp, #16]
 801531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531e:	f7eb f96b 	bl	80005f8 <__aeabi_dmul>
 8015322:	2301      	movs	r3, #1
 8015324:	9a04      	ldr	r2, [sp, #16]
 8015326:	3208      	adds	r2, #8
 8015328:	f10a 0a01 	add.w	sl, sl, #1
 801532c:	106d      	asrs	r5, r5, #1
 801532e:	9204      	str	r2, [sp, #16]
 8015330:	e7cc      	b.n	80152cc <_strtod_l+0x4d4>
 8015332:	d0ec      	beq.n	801530e <_strtod_l+0x516>
 8015334:	426d      	negs	r5, r5
 8015336:	f015 020f 	ands.w	r2, r5, #15
 801533a:	d00a      	beq.n	8015352 <_strtod_l+0x55a>
 801533c:	4b11      	ldr	r3, [pc, #68]	; (8015384 <_strtod_l+0x58c>)
 801533e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015342:	4640      	mov	r0, r8
 8015344:	4649      	mov	r1, r9
 8015346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801534a:	f7eb fa7f 	bl	800084c <__aeabi_ddiv>
 801534e:	4680      	mov	r8, r0
 8015350:	4689      	mov	r9, r1
 8015352:	112d      	asrs	r5, r5, #4
 8015354:	d0db      	beq.n	801530e <_strtod_l+0x516>
 8015356:	2d1f      	cmp	r5, #31
 8015358:	dd1e      	ble.n	8015398 <_strtod_l+0x5a0>
 801535a:	2500      	movs	r5, #0
 801535c:	46ab      	mov	fp, r5
 801535e:	9509      	str	r5, [sp, #36]	; 0x24
 8015360:	9505      	str	r5, [sp, #20]
 8015362:	2322      	movs	r3, #34	; 0x22
 8015364:	f04f 0800 	mov.w	r8, #0
 8015368:	f04f 0900 	mov.w	r9, #0
 801536c:	6023      	str	r3, [r4, #0]
 801536e:	e78d      	b.n	801528c <_strtod_l+0x494>
 8015370:	08018439 	.word	0x08018439
 8015374:	080186bc 	.word	0x080186bc
 8015378:	08018431 	.word	0x08018431
 801537c:	080184d9 	.word	0x080184d9
 8015380:	0801832a 	.word	0x0801832a
 8015384:	080185d0 	.word	0x080185d0
 8015388:	080185a8 	.word	0x080185a8
 801538c:	7ff00000 	.word	0x7ff00000
 8015390:	7ca00000 	.word	0x7ca00000
 8015394:	7fefffff 	.word	0x7fefffff
 8015398:	f015 0310 	ands.w	r3, r5, #16
 801539c:	bf18      	it	ne
 801539e:	236a      	movne	r3, #106	; 0x6a
 80153a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015744 <_strtod_l+0x94c>
 80153a4:	9304      	str	r3, [sp, #16]
 80153a6:	4640      	mov	r0, r8
 80153a8:	4649      	mov	r1, r9
 80153aa:	2300      	movs	r3, #0
 80153ac:	07ea      	lsls	r2, r5, #31
 80153ae:	d504      	bpl.n	80153ba <_strtod_l+0x5c2>
 80153b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80153b4:	f7eb f920 	bl	80005f8 <__aeabi_dmul>
 80153b8:	2301      	movs	r3, #1
 80153ba:	106d      	asrs	r5, r5, #1
 80153bc:	f10a 0a08 	add.w	sl, sl, #8
 80153c0:	d1f4      	bne.n	80153ac <_strtod_l+0x5b4>
 80153c2:	b10b      	cbz	r3, 80153c8 <_strtod_l+0x5d0>
 80153c4:	4680      	mov	r8, r0
 80153c6:	4689      	mov	r9, r1
 80153c8:	9b04      	ldr	r3, [sp, #16]
 80153ca:	b1bb      	cbz	r3, 80153fc <_strtod_l+0x604>
 80153cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80153d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	4649      	mov	r1, r9
 80153d8:	dd10      	ble.n	80153fc <_strtod_l+0x604>
 80153da:	2b1f      	cmp	r3, #31
 80153dc:	f340 811e 	ble.w	801561c <_strtod_l+0x824>
 80153e0:	2b34      	cmp	r3, #52	; 0x34
 80153e2:	bfde      	ittt	le
 80153e4:	f04f 33ff 	movle.w	r3, #4294967295
 80153e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80153ec:	4093      	lslle	r3, r2
 80153ee:	f04f 0800 	mov.w	r8, #0
 80153f2:	bfcc      	ite	gt
 80153f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80153f8:	ea03 0901 	andle.w	r9, r3, r1
 80153fc:	2200      	movs	r2, #0
 80153fe:	2300      	movs	r3, #0
 8015400:	4640      	mov	r0, r8
 8015402:	4649      	mov	r1, r9
 8015404:	f7eb fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8015408:	2800      	cmp	r0, #0
 801540a:	d1a6      	bne.n	801535a <_strtod_l+0x562>
 801540c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015412:	4633      	mov	r3, r6
 8015414:	465a      	mov	r2, fp
 8015416:	4620      	mov	r0, r4
 8015418:	f7ff f8cc 	bl	80145b4 <__s2b>
 801541c:	9009      	str	r0, [sp, #36]	; 0x24
 801541e:	2800      	cmp	r0, #0
 8015420:	f43f af2a 	beq.w	8015278 <_strtod_l+0x480>
 8015424:	9a08      	ldr	r2, [sp, #32]
 8015426:	9b05      	ldr	r3, [sp, #20]
 8015428:	2a00      	cmp	r2, #0
 801542a:	eba3 0307 	sub.w	r3, r3, r7
 801542e:	bfa8      	it	ge
 8015430:	2300      	movge	r3, #0
 8015432:	930c      	str	r3, [sp, #48]	; 0x30
 8015434:	2500      	movs	r5, #0
 8015436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801543a:	9312      	str	r3, [sp, #72]	; 0x48
 801543c:	46ab      	mov	fp, r5
 801543e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015440:	4620      	mov	r0, r4
 8015442:	6859      	ldr	r1, [r3, #4]
 8015444:	f7ff f80e 	bl	8014464 <_Balloc>
 8015448:	9005      	str	r0, [sp, #20]
 801544a:	2800      	cmp	r0, #0
 801544c:	f43f af18 	beq.w	8015280 <_strtod_l+0x488>
 8015450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015452:	691a      	ldr	r2, [r3, #16]
 8015454:	3202      	adds	r2, #2
 8015456:	f103 010c 	add.w	r1, r3, #12
 801545a:	0092      	lsls	r2, r2, #2
 801545c:	300c      	adds	r0, #12
 801545e:	f7fe f86a 	bl	8013536 <memcpy>
 8015462:	ec49 8b10 	vmov	d0, r8, r9
 8015466:	aa18      	add	r2, sp, #96	; 0x60
 8015468:	a917      	add	r1, sp, #92	; 0x5c
 801546a:	4620      	mov	r0, r4
 801546c:	f7ff fbd6 	bl	8014c1c <__d2b>
 8015470:	ec49 8b18 	vmov	d8, r8, r9
 8015474:	9016      	str	r0, [sp, #88]	; 0x58
 8015476:	2800      	cmp	r0, #0
 8015478:	f43f af02 	beq.w	8015280 <_strtod_l+0x488>
 801547c:	2101      	movs	r1, #1
 801547e:	4620      	mov	r0, r4
 8015480:	f7ff f930 	bl	80146e4 <__i2b>
 8015484:	4683      	mov	fp, r0
 8015486:	2800      	cmp	r0, #0
 8015488:	f43f aefa 	beq.w	8015280 <_strtod_l+0x488>
 801548c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801548e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015490:	2e00      	cmp	r6, #0
 8015492:	bfab      	itete	ge
 8015494:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015496:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015498:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801549a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801549e:	bfac      	ite	ge
 80154a0:	eb06 0a03 	addge.w	sl, r6, r3
 80154a4:	1b9f      	sublt	r7, r3, r6
 80154a6:	9b04      	ldr	r3, [sp, #16]
 80154a8:	1af6      	subs	r6, r6, r3
 80154aa:	4416      	add	r6, r2
 80154ac:	4ba0      	ldr	r3, [pc, #640]	; (8015730 <_strtod_l+0x938>)
 80154ae:	3e01      	subs	r6, #1
 80154b0:	429e      	cmp	r6, r3
 80154b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80154b6:	f280 80c4 	bge.w	8015642 <_strtod_l+0x84a>
 80154ba:	1b9b      	subs	r3, r3, r6
 80154bc:	2b1f      	cmp	r3, #31
 80154be:	eba2 0203 	sub.w	r2, r2, r3
 80154c2:	f04f 0101 	mov.w	r1, #1
 80154c6:	f300 80b0 	bgt.w	801562a <_strtod_l+0x832>
 80154ca:	fa01 f303 	lsl.w	r3, r1, r3
 80154ce:	930e      	str	r3, [sp, #56]	; 0x38
 80154d0:	2300      	movs	r3, #0
 80154d2:	930d      	str	r3, [sp, #52]	; 0x34
 80154d4:	eb0a 0602 	add.w	r6, sl, r2
 80154d8:	9b04      	ldr	r3, [sp, #16]
 80154da:	45b2      	cmp	sl, r6
 80154dc:	4417      	add	r7, r2
 80154de:	441f      	add	r7, r3
 80154e0:	4653      	mov	r3, sl
 80154e2:	bfa8      	it	ge
 80154e4:	4633      	movge	r3, r6
 80154e6:	42bb      	cmp	r3, r7
 80154e8:	bfa8      	it	ge
 80154ea:	463b      	movge	r3, r7
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	bfc2      	ittt	gt
 80154f0:	1af6      	subgt	r6, r6, r3
 80154f2:	1aff      	subgt	r7, r7, r3
 80154f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80154f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	dd17      	ble.n	801552e <_strtod_l+0x736>
 80154fe:	4659      	mov	r1, fp
 8015500:	461a      	mov	r2, r3
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff f9ae 	bl	8014864 <__pow5mult>
 8015508:	4683      	mov	fp, r0
 801550a:	2800      	cmp	r0, #0
 801550c:	f43f aeb8 	beq.w	8015280 <_strtod_l+0x488>
 8015510:	4601      	mov	r1, r0
 8015512:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015514:	4620      	mov	r0, r4
 8015516:	f7ff f8fb 	bl	8014710 <__multiply>
 801551a:	900b      	str	r0, [sp, #44]	; 0x2c
 801551c:	2800      	cmp	r0, #0
 801551e:	f43f aeaf 	beq.w	8015280 <_strtod_l+0x488>
 8015522:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015524:	4620      	mov	r0, r4
 8015526:	f7fe ffdd 	bl	80144e4 <_Bfree>
 801552a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801552c:	9316      	str	r3, [sp, #88]	; 0x58
 801552e:	2e00      	cmp	r6, #0
 8015530:	f300 808c 	bgt.w	801564c <_strtod_l+0x854>
 8015534:	9b08      	ldr	r3, [sp, #32]
 8015536:	2b00      	cmp	r3, #0
 8015538:	dd08      	ble.n	801554c <_strtod_l+0x754>
 801553a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801553c:	9905      	ldr	r1, [sp, #20]
 801553e:	4620      	mov	r0, r4
 8015540:	f7ff f990 	bl	8014864 <__pow5mult>
 8015544:	9005      	str	r0, [sp, #20]
 8015546:	2800      	cmp	r0, #0
 8015548:	f43f ae9a 	beq.w	8015280 <_strtod_l+0x488>
 801554c:	2f00      	cmp	r7, #0
 801554e:	dd08      	ble.n	8015562 <_strtod_l+0x76a>
 8015550:	9905      	ldr	r1, [sp, #20]
 8015552:	463a      	mov	r2, r7
 8015554:	4620      	mov	r0, r4
 8015556:	f7ff f9df 	bl	8014918 <__lshift>
 801555a:	9005      	str	r0, [sp, #20]
 801555c:	2800      	cmp	r0, #0
 801555e:	f43f ae8f 	beq.w	8015280 <_strtod_l+0x488>
 8015562:	f1ba 0f00 	cmp.w	sl, #0
 8015566:	dd08      	ble.n	801557a <_strtod_l+0x782>
 8015568:	4659      	mov	r1, fp
 801556a:	4652      	mov	r2, sl
 801556c:	4620      	mov	r0, r4
 801556e:	f7ff f9d3 	bl	8014918 <__lshift>
 8015572:	4683      	mov	fp, r0
 8015574:	2800      	cmp	r0, #0
 8015576:	f43f ae83 	beq.w	8015280 <_strtod_l+0x488>
 801557a:	9a05      	ldr	r2, [sp, #20]
 801557c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801557e:	4620      	mov	r0, r4
 8015580:	f7ff fa52 	bl	8014a28 <__mdiff>
 8015584:	4605      	mov	r5, r0
 8015586:	2800      	cmp	r0, #0
 8015588:	f43f ae7a 	beq.w	8015280 <_strtod_l+0x488>
 801558c:	68c3      	ldr	r3, [r0, #12]
 801558e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015590:	2300      	movs	r3, #0
 8015592:	60c3      	str	r3, [r0, #12]
 8015594:	4659      	mov	r1, fp
 8015596:	f7ff fa2b 	bl	80149f0 <__mcmp>
 801559a:	2800      	cmp	r0, #0
 801559c:	da60      	bge.n	8015660 <_strtod_l+0x868>
 801559e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155a0:	ea53 0308 	orrs.w	r3, r3, r8
 80155a4:	f040 8084 	bne.w	80156b0 <_strtod_l+0x8b8>
 80155a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d17f      	bne.n	80156b0 <_strtod_l+0x8b8>
 80155b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80155b4:	0d1b      	lsrs	r3, r3, #20
 80155b6:	051b      	lsls	r3, r3, #20
 80155b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80155bc:	d978      	bls.n	80156b0 <_strtod_l+0x8b8>
 80155be:	696b      	ldr	r3, [r5, #20]
 80155c0:	b913      	cbnz	r3, 80155c8 <_strtod_l+0x7d0>
 80155c2:	692b      	ldr	r3, [r5, #16]
 80155c4:	2b01      	cmp	r3, #1
 80155c6:	dd73      	ble.n	80156b0 <_strtod_l+0x8b8>
 80155c8:	4629      	mov	r1, r5
 80155ca:	2201      	movs	r2, #1
 80155cc:	4620      	mov	r0, r4
 80155ce:	f7ff f9a3 	bl	8014918 <__lshift>
 80155d2:	4659      	mov	r1, fp
 80155d4:	4605      	mov	r5, r0
 80155d6:	f7ff fa0b 	bl	80149f0 <__mcmp>
 80155da:	2800      	cmp	r0, #0
 80155dc:	dd68      	ble.n	80156b0 <_strtod_l+0x8b8>
 80155de:	9904      	ldr	r1, [sp, #16]
 80155e0:	4a54      	ldr	r2, [pc, #336]	; (8015734 <_strtod_l+0x93c>)
 80155e2:	464b      	mov	r3, r9
 80155e4:	2900      	cmp	r1, #0
 80155e6:	f000 8084 	beq.w	80156f2 <_strtod_l+0x8fa>
 80155ea:	ea02 0109 	and.w	r1, r2, r9
 80155ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80155f2:	dc7e      	bgt.n	80156f2 <_strtod_l+0x8fa>
 80155f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80155f8:	f77f aeb3 	ble.w	8015362 <_strtod_l+0x56a>
 80155fc:	4b4e      	ldr	r3, [pc, #312]	; (8015738 <_strtod_l+0x940>)
 80155fe:	4640      	mov	r0, r8
 8015600:	4649      	mov	r1, r9
 8015602:	2200      	movs	r2, #0
 8015604:	f7ea fff8 	bl	80005f8 <__aeabi_dmul>
 8015608:	4b4a      	ldr	r3, [pc, #296]	; (8015734 <_strtod_l+0x93c>)
 801560a:	400b      	ands	r3, r1
 801560c:	4680      	mov	r8, r0
 801560e:	4689      	mov	r9, r1
 8015610:	2b00      	cmp	r3, #0
 8015612:	f47f ae3f 	bne.w	8015294 <_strtod_l+0x49c>
 8015616:	2322      	movs	r3, #34	; 0x22
 8015618:	6023      	str	r3, [r4, #0]
 801561a:	e63b      	b.n	8015294 <_strtod_l+0x49c>
 801561c:	f04f 32ff 	mov.w	r2, #4294967295
 8015620:	fa02 f303 	lsl.w	r3, r2, r3
 8015624:	ea03 0808 	and.w	r8, r3, r8
 8015628:	e6e8      	b.n	80153fc <_strtod_l+0x604>
 801562a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801562e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015632:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015636:	36e2      	adds	r6, #226	; 0xe2
 8015638:	fa01 f306 	lsl.w	r3, r1, r6
 801563c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015640:	e748      	b.n	80154d4 <_strtod_l+0x6dc>
 8015642:	2100      	movs	r1, #0
 8015644:	2301      	movs	r3, #1
 8015646:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801564a:	e743      	b.n	80154d4 <_strtod_l+0x6dc>
 801564c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801564e:	4632      	mov	r2, r6
 8015650:	4620      	mov	r0, r4
 8015652:	f7ff f961 	bl	8014918 <__lshift>
 8015656:	9016      	str	r0, [sp, #88]	; 0x58
 8015658:	2800      	cmp	r0, #0
 801565a:	f47f af6b 	bne.w	8015534 <_strtod_l+0x73c>
 801565e:	e60f      	b.n	8015280 <_strtod_l+0x488>
 8015660:	46ca      	mov	sl, r9
 8015662:	d171      	bne.n	8015748 <_strtod_l+0x950>
 8015664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015666:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801566a:	b352      	cbz	r2, 80156c2 <_strtod_l+0x8ca>
 801566c:	4a33      	ldr	r2, [pc, #204]	; (801573c <_strtod_l+0x944>)
 801566e:	4293      	cmp	r3, r2
 8015670:	d12a      	bne.n	80156c8 <_strtod_l+0x8d0>
 8015672:	9b04      	ldr	r3, [sp, #16]
 8015674:	4641      	mov	r1, r8
 8015676:	b1fb      	cbz	r3, 80156b8 <_strtod_l+0x8c0>
 8015678:	4b2e      	ldr	r3, [pc, #184]	; (8015734 <_strtod_l+0x93c>)
 801567a:	ea09 0303 	and.w	r3, r9, r3
 801567e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015682:	f04f 32ff 	mov.w	r2, #4294967295
 8015686:	d81a      	bhi.n	80156be <_strtod_l+0x8c6>
 8015688:	0d1b      	lsrs	r3, r3, #20
 801568a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801568e:	fa02 f303 	lsl.w	r3, r2, r3
 8015692:	4299      	cmp	r1, r3
 8015694:	d118      	bne.n	80156c8 <_strtod_l+0x8d0>
 8015696:	4b2a      	ldr	r3, [pc, #168]	; (8015740 <_strtod_l+0x948>)
 8015698:	459a      	cmp	sl, r3
 801569a:	d102      	bne.n	80156a2 <_strtod_l+0x8aa>
 801569c:	3101      	adds	r1, #1
 801569e:	f43f adef 	beq.w	8015280 <_strtod_l+0x488>
 80156a2:	4b24      	ldr	r3, [pc, #144]	; (8015734 <_strtod_l+0x93c>)
 80156a4:	ea0a 0303 	and.w	r3, sl, r3
 80156a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80156ac:	f04f 0800 	mov.w	r8, #0
 80156b0:	9b04      	ldr	r3, [sp, #16]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1a2      	bne.n	80155fc <_strtod_l+0x804>
 80156b6:	e5ed      	b.n	8015294 <_strtod_l+0x49c>
 80156b8:	f04f 33ff 	mov.w	r3, #4294967295
 80156bc:	e7e9      	b.n	8015692 <_strtod_l+0x89a>
 80156be:	4613      	mov	r3, r2
 80156c0:	e7e7      	b.n	8015692 <_strtod_l+0x89a>
 80156c2:	ea53 0308 	orrs.w	r3, r3, r8
 80156c6:	d08a      	beq.n	80155de <_strtod_l+0x7e6>
 80156c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156ca:	b1e3      	cbz	r3, 8015706 <_strtod_l+0x90e>
 80156cc:	ea13 0f0a 	tst.w	r3, sl
 80156d0:	d0ee      	beq.n	80156b0 <_strtod_l+0x8b8>
 80156d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156d4:	9a04      	ldr	r2, [sp, #16]
 80156d6:	4640      	mov	r0, r8
 80156d8:	4649      	mov	r1, r9
 80156da:	b1c3      	cbz	r3, 801570e <_strtod_l+0x916>
 80156dc:	f7ff fb6f 	bl	8014dbe <sulp>
 80156e0:	4602      	mov	r2, r0
 80156e2:	460b      	mov	r3, r1
 80156e4:	ec51 0b18 	vmov	r0, r1, d8
 80156e8:	f7ea fdd0 	bl	800028c <__adddf3>
 80156ec:	4680      	mov	r8, r0
 80156ee:	4689      	mov	r9, r1
 80156f0:	e7de      	b.n	80156b0 <_strtod_l+0x8b8>
 80156f2:	4013      	ands	r3, r2
 80156f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80156f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80156fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015700:	f04f 38ff 	mov.w	r8, #4294967295
 8015704:	e7d4      	b.n	80156b0 <_strtod_l+0x8b8>
 8015706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015708:	ea13 0f08 	tst.w	r3, r8
 801570c:	e7e0      	b.n	80156d0 <_strtod_l+0x8d8>
 801570e:	f7ff fb56 	bl	8014dbe <sulp>
 8015712:	4602      	mov	r2, r0
 8015714:	460b      	mov	r3, r1
 8015716:	ec51 0b18 	vmov	r0, r1, d8
 801571a:	f7ea fdb5 	bl	8000288 <__aeabi_dsub>
 801571e:	2200      	movs	r2, #0
 8015720:	2300      	movs	r3, #0
 8015722:	4680      	mov	r8, r0
 8015724:	4689      	mov	r9, r1
 8015726:	f7eb f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 801572a:	2800      	cmp	r0, #0
 801572c:	d0c0      	beq.n	80156b0 <_strtod_l+0x8b8>
 801572e:	e618      	b.n	8015362 <_strtod_l+0x56a>
 8015730:	fffffc02 	.word	0xfffffc02
 8015734:	7ff00000 	.word	0x7ff00000
 8015738:	39500000 	.word	0x39500000
 801573c:	000fffff 	.word	0x000fffff
 8015740:	7fefffff 	.word	0x7fefffff
 8015744:	080186d0 	.word	0x080186d0
 8015748:	4659      	mov	r1, fp
 801574a:	4628      	mov	r0, r5
 801574c:	f7ff fac0 	bl	8014cd0 <__ratio>
 8015750:	ec57 6b10 	vmov	r6, r7, d0
 8015754:	ee10 0a10 	vmov	r0, s0
 8015758:	2200      	movs	r2, #0
 801575a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801575e:	4639      	mov	r1, r7
 8015760:	f7eb f9c6 	bl	8000af0 <__aeabi_dcmple>
 8015764:	2800      	cmp	r0, #0
 8015766:	d071      	beq.n	801584c <_strtod_l+0xa54>
 8015768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801576a:	2b00      	cmp	r3, #0
 801576c:	d17c      	bne.n	8015868 <_strtod_l+0xa70>
 801576e:	f1b8 0f00 	cmp.w	r8, #0
 8015772:	d15a      	bne.n	801582a <_strtod_l+0xa32>
 8015774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015778:	2b00      	cmp	r3, #0
 801577a:	d15d      	bne.n	8015838 <_strtod_l+0xa40>
 801577c:	4b90      	ldr	r3, [pc, #576]	; (80159c0 <_strtod_l+0xbc8>)
 801577e:	2200      	movs	r2, #0
 8015780:	4630      	mov	r0, r6
 8015782:	4639      	mov	r1, r7
 8015784:	f7eb f9aa 	bl	8000adc <__aeabi_dcmplt>
 8015788:	2800      	cmp	r0, #0
 801578a:	d15c      	bne.n	8015846 <_strtod_l+0xa4e>
 801578c:	4630      	mov	r0, r6
 801578e:	4639      	mov	r1, r7
 8015790:	4b8c      	ldr	r3, [pc, #560]	; (80159c4 <_strtod_l+0xbcc>)
 8015792:	2200      	movs	r2, #0
 8015794:	f7ea ff30 	bl	80005f8 <__aeabi_dmul>
 8015798:	4606      	mov	r6, r0
 801579a:	460f      	mov	r7, r1
 801579c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80157a0:	9606      	str	r6, [sp, #24]
 80157a2:	9307      	str	r3, [sp, #28]
 80157a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80157ac:	4b86      	ldr	r3, [pc, #536]	; (80159c8 <_strtod_l+0xbd0>)
 80157ae:	ea0a 0303 	and.w	r3, sl, r3
 80157b2:	930d      	str	r3, [sp, #52]	; 0x34
 80157b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80157b6:	4b85      	ldr	r3, [pc, #532]	; (80159cc <_strtod_l+0xbd4>)
 80157b8:	429a      	cmp	r2, r3
 80157ba:	f040 8090 	bne.w	80158de <_strtod_l+0xae6>
 80157be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80157c2:	ec49 8b10 	vmov	d0, r8, r9
 80157c6:	f7ff f9b9 	bl	8014b3c <__ulp>
 80157ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157ce:	ec51 0b10 	vmov	r0, r1, d0
 80157d2:	f7ea ff11 	bl	80005f8 <__aeabi_dmul>
 80157d6:	4642      	mov	r2, r8
 80157d8:	464b      	mov	r3, r9
 80157da:	f7ea fd57 	bl	800028c <__adddf3>
 80157de:	460b      	mov	r3, r1
 80157e0:	4979      	ldr	r1, [pc, #484]	; (80159c8 <_strtod_l+0xbd0>)
 80157e2:	4a7b      	ldr	r2, [pc, #492]	; (80159d0 <_strtod_l+0xbd8>)
 80157e4:	4019      	ands	r1, r3
 80157e6:	4291      	cmp	r1, r2
 80157e8:	4680      	mov	r8, r0
 80157ea:	d944      	bls.n	8015876 <_strtod_l+0xa7e>
 80157ec:	ee18 2a90 	vmov	r2, s17
 80157f0:	4b78      	ldr	r3, [pc, #480]	; (80159d4 <_strtod_l+0xbdc>)
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d104      	bne.n	8015800 <_strtod_l+0xa08>
 80157f6:	ee18 3a10 	vmov	r3, s16
 80157fa:	3301      	adds	r3, #1
 80157fc:	f43f ad40 	beq.w	8015280 <_strtod_l+0x488>
 8015800:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80159d4 <_strtod_l+0xbdc>
 8015804:	f04f 38ff 	mov.w	r8, #4294967295
 8015808:	9916      	ldr	r1, [sp, #88]	; 0x58
 801580a:	4620      	mov	r0, r4
 801580c:	f7fe fe6a 	bl	80144e4 <_Bfree>
 8015810:	9905      	ldr	r1, [sp, #20]
 8015812:	4620      	mov	r0, r4
 8015814:	f7fe fe66 	bl	80144e4 <_Bfree>
 8015818:	4659      	mov	r1, fp
 801581a:	4620      	mov	r0, r4
 801581c:	f7fe fe62 	bl	80144e4 <_Bfree>
 8015820:	4629      	mov	r1, r5
 8015822:	4620      	mov	r0, r4
 8015824:	f7fe fe5e 	bl	80144e4 <_Bfree>
 8015828:	e609      	b.n	801543e <_strtod_l+0x646>
 801582a:	f1b8 0f01 	cmp.w	r8, #1
 801582e:	d103      	bne.n	8015838 <_strtod_l+0xa40>
 8015830:	f1b9 0f00 	cmp.w	r9, #0
 8015834:	f43f ad95 	beq.w	8015362 <_strtod_l+0x56a>
 8015838:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015990 <_strtod_l+0xb98>
 801583c:	4f60      	ldr	r7, [pc, #384]	; (80159c0 <_strtod_l+0xbc8>)
 801583e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015842:	2600      	movs	r6, #0
 8015844:	e7ae      	b.n	80157a4 <_strtod_l+0x9ac>
 8015846:	4f5f      	ldr	r7, [pc, #380]	; (80159c4 <_strtod_l+0xbcc>)
 8015848:	2600      	movs	r6, #0
 801584a:	e7a7      	b.n	801579c <_strtod_l+0x9a4>
 801584c:	4b5d      	ldr	r3, [pc, #372]	; (80159c4 <_strtod_l+0xbcc>)
 801584e:	4630      	mov	r0, r6
 8015850:	4639      	mov	r1, r7
 8015852:	2200      	movs	r2, #0
 8015854:	f7ea fed0 	bl	80005f8 <__aeabi_dmul>
 8015858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801585a:	4606      	mov	r6, r0
 801585c:	460f      	mov	r7, r1
 801585e:	2b00      	cmp	r3, #0
 8015860:	d09c      	beq.n	801579c <_strtod_l+0x9a4>
 8015862:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015866:	e79d      	b.n	80157a4 <_strtod_l+0x9ac>
 8015868:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015998 <_strtod_l+0xba0>
 801586c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015870:	ec57 6b17 	vmov	r6, r7, d7
 8015874:	e796      	b.n	80157a4 <_strtod_l+0x9ac>
 8015876:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801587a:	9b04      	ldr	r3, [sp, #16]
 801587c:	46ca      	mov	sl, r9
 801587e:	2b00      	cmp	r3, #0
 8015880:	d1c2      	bne.n	8015808 <_strtod_l+0xa10>
 8015882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015888:	0d1b      	lsrs	r3, r3, #20
 801588a:	051b      	lsls	r3, r3, #20
 801588c:	429a      	cmp	r2, r3
 801588e:	d1bb      	bne.n	8015808 <_strtod_l+0xa10>
 8015890:	4630      	mov	r0, r6
 8015892:	4639      	mov	r1, r7
 8015894:	f7eb fa10 	bl	8000cb8 <__aeabi_d2lz>
 8015898:	f7ea fe80 	bl	800059c <__aeabi_l2d>
 801589c:	4602      	mov	r2, r0
 801589e:	460b      	mov	r3, r1
 80158a0:	4630      	mov	r0, r6
 80158a2:	4639      	mov	r1, r7
 80158a4:	f7ea fcf0 	bl	8000288 <__aeabi_dsub>
 80158a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80158ae:	ea43 0308 	orr.w	r3, r3, r8
 80158b2:	4313      	orrs	r3, r2
 80158b4:	4606      	mov	r6, r0
 80158b6:	460f      	mov	r7, r1
 80158b8:	d054      	beq.n	8015964 <_strtod_l+0xb6c>
 80158ba:	a339      	add	r3, pc, #228	; (adr r3, 80159a0 <_strtod_l+0xba8>)
 80158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c0:	f7eb f90c 	bl	8000adc <__aeabi_dcmplt>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	f47f ace5 	bne.w	8015294 <_strtod_l+0x49c>
 80158ca:	a337      	add	r3, pc, #220	; (adr r3, 80159a8 <_strtod_l+0xbb0>)
 80158cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158d0:	4630      	mov	r0, r6
 80158d2:	4639      	mov	r1, r7
 80158d4:	f7eb f920 	bl	8000b18 <__aeabi_dcmpgt>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d095      	beq.n	8015808 <_strtod_l+0xa10>
 80158dc:	e4da      	b.n	8015294 <_strtod_l+0x49c>
 80158de:	9b04      	ldr	r3, [sp, #16]
 80158e0:	b333      	cbz	r3, 8015930 <_strtod_l+0xb38>
 80158e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80158e8:	d822      	bhi.n	8015930 <_strtod_l+0xb38>
 80158ea:	a331      	add	r3, pc, #196	; (adr r3, 80159b0 <_strtod_l+0xbb8>)
 80158ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f0:	4630      	mov	r0, r6
 80158f2:	4639      	mov	r1, r7
 80158f4:	f7eb f8fc 	bl	8000af0 <__aeabi_dcmple>
 80158f8:	b1a0      	cbz	r0, 8015924 <_strtod_l+0xb2c>
 80158fa:	4639      	mov	r1, r7
 80158fc:	4630      	mov	r0, r6
 80158fe:	f7eb f953 	bl	8000ba8 <__aeabi_d2uiz>
 8015902:	2801      	cmp	r0, #1
 8015904:	bf38      	it	cc
 8015906:	2001      	movcc	r0, #1
 8015908:	f7ea fdfc 	bl	8000504 <__aeabi_ui2d>
 801590c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801590e:	4606      	mov	r6, r0
 8015910:	460f      	mov	r7, r1
 8015912:	bb23      	cbnz	r3, 801595e <_strtod_l+0xb66>
 8015914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015918:	9010      	str	r0, [sp, #64]	; 0x40
 801591a:	9311      	str	r3, [sp, #68]	; 0x44
 801591c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015920:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015928:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801592c:	1a9b      	subs	r3, r3, r2
 801592e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015930:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015934:	eeb0 0a48 	vmov.f32	s0, s16
 8015938:	eef0 0a68 	vmov.f32	s1, s17
 801593c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015940:	f7ff f8fc 	bl	8014b3c <__ulp>
 8015944:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015948:	ec53 2b10 	vmov	r2, r3, d0
 801594c:	f7ea fe54 	bl	80005f8 <__aeabi_dmul>
 8015950:	ec53 2b18 	vmov	r2, r3, d8
 8015954:	f7ea fc9a 	bl	800028c <__adddf3>
 8015958:	4680      	mov	r8, r0
 801595a:	4689      	mov	r9, r1
 801595c:	e78d      	b.n	801587a <_strtod_l+0xa82>
 801595e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015962:	e7db      	b.n	801591c <_strtod_l+0xb24>
 8015964:	a314      	add	r3, pc, #80	; (adr r3, 80159b8 <_strtod_l+0xbc0>)
 8015966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596a:	f7eb f8b7 	bl	8000adc <__aeabi_dcmplt>
 801596e:	e7b3      	b.n	80158d8 <_strtod_l+0xae0>
 8015970:	2300      	movs	r3, #0
 8015972:	930a      	str	r3, [sp, #40]	; 0x28
 8015974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015978:	6013      	str	r3, [r2, #0]
 801597a:	f7ff ba7c 	b.w	8014e76 <_strtod_l+0x7e>
 801597e:	2a65      	cmp	r2, #101	; 0x65
 8015980:	f43f ab75 	beq.w	801506e <_strtod_l+0x276>
 8015984:	2a45      	cmp	r2, #69	; 0x45
 8015986:	f43f ab72 	beq.w	801506e <_strtod_l+0x276>
 801598a:	2301      	movs	r3, #1
 801598c:	f7ff bbaa 	b.w	80150e4 <_strtod_l+0x2ec>
 8015990:	00000000 	.word	0x00000000
 8015994:	bff00000 	.word	0xbff00000
 8015998:	00000000 	.word	0x00000000
 801599c:	3ff00000 	.word	0x3ff00000
 80159a0:	94a03595 	.word	0x94a03595
 80159a4:	3fdfffff 	.word	0x3fdfffff
 80159a8:	35afe535 	.word	0x35afe535
 80159ac:	3fe00000 	.word	0x3fe00000
 80159b0:	ffc00000 	.word	0xffc00000
 80159b4:	41dfffff 	.word	0x41dfffff
 80159b8:	94a03595 	.word	0x94a03595
 80159bc:	3fcfffff 	.word	0x3fcfffff
 80159c0:	3ff00000 	.word	0x3ff00000
 80159c4:	3fe00000 	.word	0x3fe00000
 80159c8:	7ff00000 	.word	0x7ff00000
 80159cc:	7fe00000 	.word	0x7fe00000
 80159d0:	7c9fffff 	.word	0x7c9fffff
 80159d4:	7fefffff 	.word	0x7fefffff

080159d8 <_strtod_r>:
 80159d8:	4b01      	ldr	r3, [pc, #4]	; (80159e0 <_strtod_r+0x8>)
 80159da:	f7ff ba0d 	b.w	8014df8 <_strtod_l>
 80159de:	bf00      	nop
 80159e0:	20000174 	.word	0x20000174

080159e4 <__ssputs_r>:
 80159e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159e8:	688e      	ldr	r6, [r1, #8]
 80159ea:	461f      	mov	r7, r3
 80159ec:	42be      	cmp	r6, r7
 80159ee:	680b      	ldr	r3, [r1, #0]
 80159f0:	4682      	mov	sl, r0
 80159f2:	460c      	mov	r4, r1
 80159f4:	4690      	mov	r8, r2
 80159f6:	d82c      	bhi.n	8015a52 <__ssputs_r+0x6e>
 80159f8:	898a      	ldrh	r2, [r1, #12]
 80159fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80159fe:	d026      	beq.n	8015a4e <__ssputs_r+0x6a>
 8015a00:	6965      	ldr	r5, [r4, #20]
 8015a02:	6909      	ldr	r1, [r1, #16]
 8015a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a08:	eba3 0901 	sub.w	r9, r3, r1
 8015a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a10:	1c7b      	adds	r3, r7, #1
 8015a12:	444b      	add	r3, r9
 8015a14:	106d      	asrs	r5, r5, #1
 8015a16:	429d      	cmp	r5, r3
 8015a18:	bf38      	it	cc
 8015a1a:	461d      	movcc	r5, r3
 8015a1c:	0553      	lsls	r3, r2, #21
 8015a1e:	d527      	bpl.n	8015a70 <__ssputs_r+0x8c>
 8015a20:	4629      	mov	r1, r5
 8015a22:	f7fe fc93 	bl	801434c <_malloc_r>
 8015a26:	4606      	mov	r6, r0
 8015a28:	b360      	cbz	r0, 8015a84 <__ssputs_r+0xa0>
 8015a2a:	6921      	ldr	r1, [r4, #16]
 8015a2c:	464a      	mov	r2, r9
 8015a2e:	f7fd fd82 	bl	8013536 <memcpy>
 8015a32:	89a3      	ldrh	r3, [r4, #12]
 8015a34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a3c:	81a3      	strh	r3, [r4, #12]
 8015a3e:	6126      	str	r6, [r4, #16]
 8015a40:	6165      	str	r5, [r4, #20]
 8015a42:	444e      	add	r6, r9
 8015a44:	eba5 0509 	sub.w	r5, r5, r9
 8015a48:	6026      	str	r6, [r4, #0]
 8015a4a:	60a5      	str	r5, [r4, #8]
 8015a4c:	463e      	mov	r6, r7
 8015a4e:	42be      	cmp	r6, r7
 8015a50:	d900      	bls.n	8015a54 <__ssputs_r+0x70>
 8015a52:	463e      	mov	r6, r7
 8015a54:	6820      	ldr	r0, [r4, #0]
 8015a56:	4632      	mov	r2, r6
 8015a58:	4641      	mov	r1, r8
 8015a5a:	f7fd fc3b 	bl	80132d4 <memmove>
 8015a5e:	68a3      	ldr	r3, [r4, #8]
 8015a60:	1b9b      	subs	r3, r3, r6
 8015a62:	60a3      	str	r3, [r4, #8]
 8015a64:	6823      	ldr	r3, [r4, #0]
 8015a66:	4433      	add	r3, r6
 8015a68:	6023      	str	r3, [r4, #0]
 8015a6a:	2000      	movs	r0, #0
 8015a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a70:	462a      	mov	r2, r5
 8015a72:	f000 ff60 	bl	8016936 <_realloc_r>
 8015a76:	4606      	mov	r6, r0
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	d1e0      	bne.n	8015a3e <__ssputs_r+0x5a>
 8015a7c:	6921      	ldr	r1, [r4, #16]
 8015a7e:	4650      	mov	r0, sl
 8015a80:	f7fe fbf0 	bl	8014264 <_free_r>
 8015a84:	230c      	movs	r3, #12
 8015a86:	f8ca 3000 	str.w	r3, [sl]
 8015a8a:	89a3      	ldrh	r3, [r4, #12]
 8015a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a90:	81a3      	strh	r3, [r4, #12]
 8015a92:	f04f 30ff 	mov.w	r0, #4294967295
 8015a96:	e7e9      	b.n	8015a6c <__ssputs_r+0x88>

08015a98 <_svfiprintf_r>:
 8015a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a9c:	4698      	mov	r8, r3
 8015a9e:	898b      	ldrh	r3, [r1, #12]
 8015aa0:	061b      	lsls	r3, r3, #24
 8015aa2:	b09d      	sub	sp, #116	; 0x74
 8015aa4:	4607      	mov	r7, r0
 8015aa6:	460d      	mov	r5, r1
 8015aa8:	4614      	mov	r4, r2
 8015aaa:	d50e      	bpl.n	8015aca <_svfiprintf_r+0x32>
 8015aac:	690b      	ldr	r3, [r1, #16]
 8015aae:	b963      	cbnz	r3, 8015aca <_svfiprintf_r+0x32>
 8015ab0:	2140      	movs	r1, #64	; 0x40
 8015ab2:	f7fe fc4b 	bl	801434c <_malloc_r>
 8015ab6:	6028      	str	r0, [r5, #0]
 8015ab8:	6128      	str	r0, [r5, #16]
 8015aba:	b920      	cbnz	r0, 8015ac6 <_svfiprintf_r+0x2e>
 8015abc:	230c      	movs	r3, #12
 8015abe:	603b      	str	r3, [r7, #0]
 8015ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ac4:	e0d0      	b.n	8015c68 <_svfiprintf_r+0x1d0>
 8015ac6:	2340      	movs	r3, #64	; 0x40
 8015ac8:	616b      	str	r3, [r5, #20]
 8015aca:	2300      	movs	r3, #0
 8015acc:	9309      	str	r3, [sp, #36]	; 0x24
 8015ace:	2320      	movs	r3, #32
 8015ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ad8:	2330      	movs	r3, #48	; 0x30
 8015ada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015c80 <_svfiprintf_r+0x1e8>
 8015ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ae2:	f04f 0901 	mov.w	r9, #1
 8015ae6:	4623      	mov	r3, r4
 8015ae8:	469a      	mov	sl, r3
 8015aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015aee:	b10a      	cbz	r2, 8015af4 <_svfiprintf_r+0x5c>
 8015af0:	2a25      	cmp	r2, #37	; 0x25
 8015af2:	d1f9      	bne.n	8015ae8 <_svfiprintf_r+0x50>
 8015af4:	ebba 0b04 	subs.w	fp, sl, r4
 8015af8:	d00b      	beq.n	8015b12 <_svfiprintf_r+0x7a>
 8015afa:	465b      	mov	r3, fp
 8015afc:	4622      	mov	r2, r4
 8015afe:	4629      	mov	r1, r5
 8015b00:	4638      	mov	r0, r7
 8015b02:	f7ff ff6f 	bl	80159e4 <__ssputs_r>
 8015b06:	3001      	adds	r0, #1
 8015b08:	f000 80a9 	beq.w	8015c5e <_svfiprintf_r+0x1c6>
 8015b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b0e:	445a      	add	r2, fp
 8015b10:	9209      	str	r2, [sp, #36]	; 0x24
 8015b12:	f89a 3000 	ldrb.w	r3, [sl]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	f000 80a1 	beq.w	8015c5e <_svfiprintf_r+0x1c6>
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b26:	f10a 0a01 	add.w	sl, sl, #1
 8015b2a:	9304      	str	r3, [sp, #16]
 8015b2c:	9307      	str	r3, [sp, #28]
 8015b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b32:	931a      	str	r3, [sp, #104]	; 0x68
 8015b34:	4654      	mov	r4, sl
 8015b36:	2205      	movs	r2, #5
 8015b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b3c:	4850      	ldr	r0, [pc, #320]	; (8015c80 <_svfiprintf_r+0x1e8>)
 8015b3e:	f7ea fb47 	bl	80001d0 <memchr>
 8015b42:	9a04      	ldr	r2, [sp, #16]
 8015b44:	b9d8      	cbnz	r0, 8015b7e <_svfiprintf_r+0xe6>
 8015b46:	06d0      	lsls	r0, r2, #27
 8015b48:	bf44      	itt	mi
 8015b4a:	2320      	movmi	r3, #32
 8015b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b50:	0711      	lsls	r1, r2, #28
 8015b52:	bf44      	itt	mi
 8015b54:	232b      	movmi	r3, #43	; 0x2b
 8015b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8015b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8015b60:	d015      	beq.n	8015b8e <_svfiprintf_r+0xf6>
 8015b62:	9a07      	ldr	r2, [sp, #28]
 8015b64:	4654      	mov	r4, sl
 8015b66:	2000      	movs	r0, #0
 8015b68:	f04f 0c0a 	mov.w	ip, #10
 8015b6c:	4621      	mov	r1, r4
 8015b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b72:	3b30      	subs	r3, #48	; 0x30
 8015b74:	2b09      	cmp	r3, #9
 8015b76:	d94d      	bls.n	8015c14 <_svfiprintf_r+0x17c>
 8015b78:	b1b0      	cbz	r0, 8015ba8 <_svfiprintf_r+0x110>
 8015b7a:	9207      	str	r2, [sp, #28]
 8015b7c:	e014      	b.n	8015ba8 <_svfiprintf_r+0x110>
 8015b7e:	eba0 0308 	sub.w	r3, r0, r8
 8015b82:	fa09 f303 	lsl.w	r3, r9, r3
 8015b86:	4313      	orrs	r3, r2
 8015b88:	9304      	str	r3, [sp, #16]
 8015b8a:	46a2      	mov	sl, r4
 8015b8c:	e7d2      	b.n	8015b34 <_svfiprintf_r+0x9c>
 8015b8e:	9b03      	ldr	r3, [sp, #12]
 8015b90:	1d19      	adds	r1, r3, #4
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	9103      	str	r1, [sp, #12]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	bfbb      	ittet	lt
 8015b9a:	425b      	neglt	r3, r3
 8015b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8015ba0:	9307      	strge	r3, [sp, #28]
 8015ba2:	9307      	strlt	r3, [sp, #28]
 8015ba4:	bfb8      	it	lt
 8015ba6:	9204      	strlt	r2, [sp, #16]
 8015ba8:	7823      	ldrb	r3, [r4, #0]
 8015baa:	2b2e      	cmp	r3, #46	; 0x2e
 8015bac:	d10c      	bne.n	8015bc8 <_svfiprintf_r+0x130>
 8015bae:	7863      	ldrb	r3, [r4, #1]
 8015bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8015bb2:	d134      	bne.n	8015c1e <_svfiprintf_r+0x186>
 8015bb4:	9b03      	ldr	r3, [sp, #12]
 8015bb6:	1d1a      	adds	r2, r3, #4
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	9203      	str	r2, [sp, #12]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	bfb8      	it	lt
 8015bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8015bc4:	3402      	adds	r4, #2
 8015bc6:	9305      	str	r3, [sp, #20]
 8015bc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015c90 <_svfiprintf_r+0x1f8>
 8015bcc:	7821      	ldrb	r1, [r4, #0]
 8015bce:	2203      	movs	r2, #3
 8015bd0:	4650      	mov	r0, sl
 8015bd2:	f7ea fafd 	bl	80001d0 <memchr>
 8015bd6:	b138      	cbz	r0, 8015be8 <_svfiprintf_r+0x150>
 8015bd8:	9b04      	ldr	r3, [sp, #16]
 8015bda:	eba0 000a 	sub.w	r0, r0, sl
 8015bde:	2240      	movs	r2, #64	; 0x40
 8015be0:	4082      	lsls	r2, r0
 8015be2:	4313      	orrs	r3, r2
 8015be4:	3401      	adds	r4, #1
 8015be6:	9304      	str	r3, [sp, #16]
 8015be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bec:	4825      	ldr	r0, [pc, #148]	; (8015c84 <_svfiprintf_r+0x1ec>)
 8015bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bf2:	2206      	movs	r2, #6
 8015bf4:	f7ea faec 	bl	80001d0 <memchr>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d038      	beq.n	8015c6e <_svfiprintf_r+0x1d6>
 8015bfc:	4b22      	ldr	r3, [pc, #136]	; (8015c88 <_svfiprintf_r+0x1f0>)
 8015bfe:	bb1b      	cbnz	r3, 8015c48 <_svfiprintf_r+0x1b0>
 8015c00:	9b03      	ldr	r3, [sp, #12]
 8015c02:	3307      	adds	r3, #7
 8015c04:	f023 0307 	bic.w	r3, r3, #7
 8015c08:	3308      	adds	r3, #8
 8015c0a:	9303      	str	r3, [sp, #12]
 8015c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c0e:	4433      	add	r3, r6
 8015c10:	9309      	str	r3, [sp, #36]	; 0x24
 8015c12:	e768      	b.n	8015ae6 <_svfiprintf_r+0x4e>
 8015c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c18:	460c      	mov	r4, r1
 8015c1a:	2001      	movs	r0, #1
 8015c1c:	e7a6      	b.n	8015b6c <_svfiprintf_r+0xd4>
 8015c1e:	2300      	movs	r3, #0
 8015c20:	3401      	adds	r4, #1
 8015c22:	9305      	str	r3, [sp, #20]
 8015c24:	4619      	mov	r1, r3
 8015c26:	f04f 0c0a 	mov.w	ip, #10
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c30:	3a30      	subs	r2, #48	; 0x30
 8015c32:	2a09      	cmp	r2, #9
 8015c34:	d903      	bls.n	8015c3e <_svfiprintf_r+0x1a6>
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d0c6      	beq.n	8015bc8 <_svfiprintf_r+0x130>
 8015c3a:	9105      	str	r1, [sp, #20]
 8015c3c:	e7c4      	b.n	8015bc8 <_svfiprintf_r+0x130>
 8015c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c42:	4604      	mov	r4, r0
 8015c44:	2301      	movs	r3, #1
 8015c46:	e7f0      	b.n	8015c2a <_svfiprintf_r+0x192>
 8015c48:	ab03      	add	r3, sp, #12
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	462a      	mov	r2, r5
 8015c4e:	4b0f      	ldr	r3, [pc, #60]	; (8015c8c <_svfiprintf_r+0x1f4>)
 8015c50:	a904      	add	r1, sp, #16
 8015c52:	4638      	mov	r0, r7
 8015c54:	f7fc faea 	bl	801222c <_printf_float>
 8015c58:	1c42      	adds	r2, r0, #1
 8015c5a:	4606      	mov	r6, r0
 8015c5c:	d1d6      	bne.n	8015c0c <_svfiprintf_r+0x174>
 8015c5e:	89ab      	ldrh	r3, [r5, #12]
 8015c60:	065b      	lsls	r3, r3, #25
 8015c62:	f53f af2d 	bmi.w	8015ac0 <_svfiprintf_r+0x28>
 8015c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c68:	b01d      	add	sp, #116	; 0x74
 8015c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c6e:	ab03      	add	r3, sp, #12
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	462a      	mov	r2, r5
 8015c74:	4b05      	ldr	r3, [pc, #20]	; (8015c8c <_svfiprintf_r+0x1f4>)
 8015c76:	a904      	add	r1, sp, #16
 8015c78:	4638      	mov	r0, r7
 8015c7a:	f7fc fd7b 	bl	8012774 <_printf_i>
 8015c7e:	e7eb      	b.n	8015c58 <_svfiprintf_r+0x1c0>
 8015c80:	080186f8 	.word	0x080186f8
 8015c84:	08018702 	.word	0x08018702
 8015c88:	0801222d 	.word	0x0801222d
 8015c8c:	080159e5 	.word	0x080159e5
 8015c90:	080186fe 	.word	0x080186fe

08015c94 <__sfputc_r>:
 8015c94:	6893      	ldr	r3, [r2, #8]
 8015c96:	3b01      	subs	r3, #1
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	b410      	push	{r4}
 8015c9c:	6093      	str	r3, [r2, #8]
 8015c9e:	da08      	bge.n	8015cb2 <__sfputc_r+0x1e>
 8015ca0:	6994      	ldr	r4, [r2, #24]
 8015ca2:	42a3      	cmp	r3, r4
 8015ca4:	db01      	blt.n	8015caa <__sfputc_r+0x16>
 8015ca6:	290a      	cmp	r1, #10
 8015ca8:	d103      	bne.n	8015cb2 <__sfputc_r+0x1e>
 8015caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cae:	f7fd ba6c 	b.w	801318a <__swbuf_r>
 8015cb2:	6813      	ldr	r3, [r2, #0]
 8015cb4:	1c58      	adds	r0, r3, #1
 8015cb6:	6010      	str	r0, [r2, #0]
 8015cb8:	7019      	strb	r1, [r3, #0]
 8015cba:	4608      	mov	r0, r1
 8015cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cc0:	4770      	bx	lr

08015cc2 <__sfputs_r>:
 8015cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cc4:	4606      	mov	r6, r0
 8015cc6:	460f      	mov	r7, r1
 8015cc8:	4614      	mov	r4, r2
 8015cca:	18d5      	adds	r5, r2, r3
 8015ccc:	42ac      	cmp	r4, r5
 8015cce:	d101      	bne.n	8015cd4 <__sfputs_r+0x12>
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	e007      	b.n	8015ce4 <__sfputs_r+0x22>
 8015cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cd8:	463a      	mov	r2, r7
 8015cda:	4630      	mov	r0, r6
 8015cdc:	f7ff ffda 	bl	8015c94 <__sfputc_r>
 8015ce0:	1c43      	adds	r3, r0, #1
 8015ce2:	d1f3      	bne.n	8015ccc <__sfputs_r+0xa>
 8015ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ce8 <_vfiprintf_r>:
 8015ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cec:	460d      	mov	r5, r1
 8015cee:	b09d      	sub	sp, #116	; 0x74
 8015cf0:	4614      	mov	r4, r2
 8015cf2:	4698      	mov	r8, r3
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	b118      	cbz	r0, 8015d00 <_vfiprintf_r+0x18>
 8015cf8:	6a03      	ldr	r3, [r0, #32]
 8015cfa:	b90b      	cbnz	r3, 8015d00 <_vfiprintf_r+0x18>
 8015cfc:	f7fd f8f8 	bl	8012ef0 <__sinit>
 8015d00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d02:	07d9      	lsls	r1, r3, #31
 8015d04:	d405      	bmi.n	8015d12 <_vfiprintf_r+0x2a>
 8015d06:	89ab      	ldrh	r3, [r5, #12]
 8015d08:	059a      	lsls	r2, r3, #22
 8015d0a:	d402      	bmi.n	8015d12 <_vfiprintf_r+0x2a>
 8015d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d0e:	f7fd fc10 	bl	8013532 <__retarget_lock_acquire_recursive>
 8015d12:	89ab      	ldrh	r3, [r5, #12]
 8015d14:	071b      	lsls	r3, r3, #28
 8015d16:	d501      	bpl.n	8015d1c <_vfiprintf_r+0x34>
 8015d18:	692b      	ldr	r3, [r5, #16]
 8015d1a:	b99b      	cbnz	r3, 8015d44 <_vfiprintf_r+0x5c>
 8015d1c:	4629      	mov	r1, r5
 8015d1e:	4630      	mov	r0, r6
 8015d20:	f7fd fa70 	bl	8013204 <__swsetup_r>
 8015d24:	b170      	cbz	r0, 8015d44 <_vfiprintf_r+0x5c>
 8015d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d28:	07dc      	lsls	r4, r3, #31
 8015d2a:	d504      	bpl.n	8015d36 <_vfiprintf_r+0x4e>
 8015d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d30:	b01d      	add	sp, #116	; 0x74
 8015d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d36:	89ab      	ldrh	r3, [r5, #12]
 8015d38:	0598      	lsls	r0, r3, #22
 8015d3a:	d4f7      	bmi.n	8015d2c <_vfiprintf_r+0x44>
 8015d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d3e:	f7fd fbf9 	bl	8013534 <__retarget_lock_release_recursive>
 8015d42:	e7f3      	b.n	8015d2c <_vfiprintf_r+0x44>
 8015d44:	2300      	movs	r3, #0
 8015d46:	9309      	str	r3, [sp, #36]	; 0x24
 8015d48:	2320      	movs	r3, #32
 8015d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d52:	2330      	movs	r3, #48	; 0x30
 8015d54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015f08 <_vfiprintf_r+0x220>
 8015d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d5c:	f04f 0901 	mov.w	r9, #1
 8015d60:	4623      	mov	r3, r4
 8015d62:	469a      	mov	sl, r3
 8015d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d68:	b10a      	cbz	r2, 8015d6e <_vfiprintf_r+0x86>
 8015d6a:	2a25      	cmp	r2, #37	; 0x25
 8015d6c:	d1f9      	bne.n	8015d62 <_vfiprintf_r+0x7a>
 8015d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8015d72:	d00b      	beq.n	8015d8c <_vfiprintf_r+0xa4>
 8015d74:	465b      	mov	r3, fp
 8015d76:	4622      	mov	r2, r4
 8015d78:	4629      	mov	r1, r5
 8015d7a:	4630      	mov	r0, r6
 8015d7c:	f7ff ffa1 	bl	8015cc2 <__sfputs_r>
 8015d80:	3001      	adds	r0, #1
 8015d82:	f000 80a9 	beq.w	8015ed8 <_vfiprintf_r+0x1f0>
 8015d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d88:	445a      	add	r2, fp
 8015d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8015d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f000 80a1 	beq.w	8015ed8 <_vfiprintf_r+0x1f0>
 8015d96:	2300      	movs	r3, #0
 8015d98:	f04f 32ff 	mov.w	r2, #4294967295
 8015d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015da0:	f10a 0a01 	add.w	sl, sl, #1
 8015da4:	9304      	str	r3, [sp, #16]
 8015da6:	9307      	str	r3, [sp, #28]
 8015da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015dac:	931a      	str	r3, [sp, #104]	; 0x68
 8015dae:	4654      	mov	r4, sl
 8015db0:	2205      	movs	r2, #5
 8015db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015db6:	4854      	ldr	r0, [pc, #336]	; (8015f08 <_vfiprintf_r+0x220>)
 8015db8:	f7ea fa0a 	bl	80001d0 <memchr>
 8015dbc:	9a04      	ldr	r2, [sp, #16]
 8015dbe:	b9d8      	cbnz	r0, 8015df8 <_vfiprintf_r+0x110>
 8015dc0:	06d1      	lsls	r1, r2, #27
 8015dc2:	bf44      	itt	mi
 8015dc4:	2320      	movmi	r3, #32
 8015dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015dca:	0713      	lsls	r3, r2, #28
 8015dcc:	bf44      	itt	mi
 8015dce:	232b      	movmi	r3, #43	; 0x2b
 8015dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8015dda:	d015      	beq.n	8015e08 <_vfiprintf_r+0x120>
 8015ddc:	9a07      	ldr	r2, [sp, #28]
 8015dde:	4654      	mov	r4, sl
 8015de0:	2000      	movs	r0, #0
 8015de2:	f04f 0c0a 	mov.w	ip, #10
 8015de6:	4621      	mov	r1, r4
 8015de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dec:	3b30      	subs	r3, #48	; 0x30
 8015dee:	2b09      	cmp	r3, #9
 8015df0:	d94d      	bls.n	8015e8e <_vfiprintf_r+0x1a6>
 8015df2:	b1b0      	cbz	r0, 8015e22 <_vfiprintf_r+0x13a>
 8015df4:	9207      	str	r2, [sp, #28]
 8015df6:	e014      	b.n	8015e22 <_vfiprintf_r+0x13a>
 8015df8:	eba0 0308 	sub.w	r3, r0, r8
 8015dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8015e00:	4313      	orrs	r3, r2
 8015e02:	9304      	str	r3, [sp, #16]
 8015e04:	46a2      	mov	sl, r4
 8015e06:	e7d2      	b.n	8015dae <_vfiprintf_r+0xc6>
 8015e08:	9b03      	ldr	r3, [sp, #12]
 8015e0a:	1d19      	adds	r1, r3, #4
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	9103      	str	r1, [sp, #12]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	bfbb      	ittet	lt
 8015e14:	425b      	neglt	r3, r3
 8015e16:	f042 0202 	orrlt.w	r2, r2, #2
 8015e1a:	9307      	strge	r3, [sp, #28]
 8015e1c:	9307      	strlt	r3, [sp, #28]
 8015e1e:	bfb8      	it	lt
 8015e20:	9204      	strlt	r2, [sp, #16]
 8015e22:	7823      	ldrb	r3, [r4, #0]
 8015e24:	2b2e      	cmp	r3, #46	; 0x2e
 8015e26:	d10c      	bne.n	8015e42 <_vfiprintf_r+0x15a>
 8015e28:	7863      	ldrb	r3, [r4, #1]
 8015e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8015e2c:	d134      	bne.n	8015e98 <_vfiprintf_r+0x1b0>
 8015e2e:	9b03      	ldr	r3, [sp, #12]
 8015e30:	1d1a      	adds	r2, r3, #4
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	9203      	str	r2, [sp, #12]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	bfb8      	it	lt
 8015e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e3e:	3402      	adds	r4, #2
 8015e40:	9305      	str	r3, [sp, #20]
 8015e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015f18 <_vfiprintf_r+0x230>
 8015e46:	7821      	ldrb	r1, [r4, #0]
 8015e48:	2203      	movs	r2, #3
 8015e4a:	4650      	mov	r0, sl
 8015e4c:	f7ea f9c0 	bl	80001d0 <memchr>
 8015e50:	b138      	cbz	r0, 8015e62 <_vfiprintf_r+0x17a>
 8015e52:	9b04      	ldr	r3, [sp, #16]
 8015e54:	eba0 000a 	sub.w	r0, r0, sl
 8015e58:	2240      	movs	r2, #64	; 0x40
 8015e5a:	4082      	lsls	r2, r0
 8015e5c:	4313      	orrs	r3, r2
 8015e5e:	3401      	adds	r4, #1
 8015e60:	9304      	str	r3, [sp, #16]
 8015e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e66:	4829      	ldr	r0, [pc, #164]	; (8015f0c <_vfiprintf_r+0x224>)
 8015e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e6c:	2206      	movs	r2, #6
 8015e6e:	f7ea f9af 	bl	80001d0 <memchr>
 8015e72:	2800      	cmp	r0, #0
 8015e74:	d03f      	beq.n	8015ef6 <_vfiprintf_r+0x20e>
 8015e76:	4b26      	ldr	r3, [pc, #152]	; (8015f10 <_vfiprintf_r+0x228>)
 8015e78:	bb1b      	cbnz	r3, 8015ec2 <_vfiprintf_r+0x1da>
 8015e7a:	9b03      	ldr	r3, [sp, #12]
 8015e7c:	3307      	adds	r3, #7
 8015e7e:	f023 0307 	bic.w	r3, r3, #7
 8015e82:	3308      	adds	r3, #8
 8015e84:	9303      	str	r3, [sp, #12]
 8015e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e88:	443b      	add	r3, r7
 8015e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8015e8c:	e768      	b.n	8015d60 <_vfiprintf_r+0x78>
 8015e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e92:	460c      	mov	r4, r1
 8015e94:	2001      	movs	r0, #1
 8015e96:	e7a6      	b.n	8015de6 <_vfiprintf_r+0xfe>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	3401      	adds	r4, #1
 8015e9c:	9305      	str	r3, [sp, #20]
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	f04f 0c0a 	mov.w	ip, #10
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015eaa:	3a30      	subs	r2, #48	; 0x30
 8015eac:	2a09      	cmp	r2, #9
 8015eae:	d903      	bls.n	8015eb8 <_vfiprintf_r+0x1d0>
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d0c6      	beq.n	8015e42 <_vfiprintf_r+0x15a>
 8015eb4:	9105      	str	r1, [sp, #20]
 8015eb6:	e7c4      	b.n	8015e42 <_vfiprintf_r+0x15a>
 8015eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	e7f0      	b.n	8015ea4 <_vfiprintf_r+0x1bc>
 8015ec2:	ab03      	add	r3, sp, #12
 8015ec4:	9300      	str	r3, [sp, #0]
 8015ec6:	462a      	mov	r2, r5
 8015ec8:	4b12      	ldr	r3, [pc, #72]	; (8015f14 <_vfiprintf_r+0x22c>)
 8015eca:	a904      	add	r1, sp, #16
 8015ecc:	4630      	mov	r0, r6
 8015ece:	f7fc f9ad 	bl	801222c <_printf_float>
 8015ed2:	4607      	mov	r7, r0
 8015ed4:	1c78      	adds	r0, r7, #1
 8015ed6:	d1d6      	bne.n	8015e86 <_vfiprintf_r+0x19e>
 8015ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015eda:	07d9      	lsls	r1, r3, #31
 8015edc:	d405      	bmi.n	8015eea <_vfiprintf_r+0x202>
 8015ede:	89ab      	ldrh	r3, [r5, #12]
 8015ee0:	059a      	lsls	r2, r3, #22
 8015ee2:	d402      	bmi.n	8015eea <_vfiprintf_r+0x202>
 8015ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ee6:	f7fd fb25 	bl	8013534 <__retarget_lock_release_recursive>
 8015eea:	89ab      	ldrh	r3, [r5, #12]
 8015eec:	065b      	lsls	r3, r3, #25
 8015eee:	f53f af1d 	bmi.w	8015d2c <_vfiprintf_r+0x44>
 8015ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ef4:	e71c      	b.n	8015d30 <_vfiprintf_r+0x48>
 8015ef6:	ab03      	add	r3, sp, #12
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	462a      	mov	r2, r5
 8015efc:	4b05      	ldr	r3, [pc, #20]	; (8015f14 <_vfiprintf_r+0x22c>)
 8015efe:	a904      	add	r1, sp, #16
 8015f00:	4630      	mov	r0, r6
 8015f02:	f7fc fc37 	bl	8012774 <_printf_i>
 8015f06:	e7e4      	b.n	8015ed2 <_vfiprintf_r+0x1ea>
 8015f08:	080186f8 	.word	0x080186f8
 8015f0c:	08018702 	.word	0x08018702
 8015f10:	0801222d 	.word	0x0801222d
 8015f14:	08015cc3 	.word	0x08015cc3
 8015f18:	080186fe 	.word	0x080186fe

08015f1c <__sflush_r>:
 8015f1c:	898a      	ldrh	r2, [r1, #12]
 8015f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f22:	4605      	mov	r5, r0
 8015f24:	0710      	lsls	r0, r2, #28
 8015f26:	460c      	mov	r4, r1
 8015f28:	d458      	bmi.n	8015fdc <__sflush_r+0xc0>
 8015f2a:	684b      	ldr	r3, [r1, #4]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	dc05      	bgt.n	8015f3c <__sflush_r+0x20>
 8015f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	dc02      	bgt.n	8015f3c <__sflush_r+0x20>
 8015f36:	2000      	movs	r0, #0
 8015f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f3e:	2e00      	cmp	r6, #0
 8015f40:	d0f9      	beq.n	8015f36 <__sflush_r+0x1a>
 8015f42:	2300      	movs	r3, #0
 8015f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f48:	682f      	ldr	r7, [r5, #0]
 8015f4a:	6a21      	ldr	r1, [r4, #32]
 8015f4c:	602b      	str	r3, [r5, #0]
 8015f4e:	d032      	beq.n	8015fb6 <__sflush_r+0x9a>
 8015f50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f52:	89a3      	ldrh	r3, [r4, #12]
 8015f54:	075a      	lsls	r2, r3, #29
 8015f56:	d505      	bpl.n	8015f64 <__sflush_r+0x48>
 8015f58:	6863      	ldr	r3, [r4, #4]
 8015f5a:	1ac0      	subs	r0, r0, r3
 8015f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f5e:	b10b      	cbz	r3, 8015f64 <__sflush_r+0x48>
 8015f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f62:	1ac0      	subs	r0, r0, r3
 8015f64:	2300      	movs	r3, #0
 8015f66:	4602      	mov	r2, r0
 8015f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f6a:	6a21      	ldr	r1, [r4, #32]
 8015f6c:	4628      	mov	r0, r5
 8015f6e:	47b0      	blx	r6
 8015f70:	1c43      	adds	r3, r0, #1
 8015f72:	89a3      	ldrh	r3, [r4, #12]
 8015f74:	d106      	bne.n	8015f84 <__sflush_r+0x68>
 8015f76:	6829      	ldr	r1, [r5, #0]
 8015f78:	291d      	cmp	r1, #29
 8015f7a:	d82b      	bhi.n	8015fd4 <__sflush_r+0xb8>
 8015f7c:	4a29      	ldr	r2, [pc, #164]	; (8016024 <__sflush_r+0x108>)
 8015f7e:	410a      	asrs	r2, r1
 8015f80:	07d6      	lsls	r6, r2, #31
 8015f82:	d427      	bmi.n	8015fd4 <__sflush_r+0xb8>
 8015f84:	2200      	movs	r2, #0
 8015f86:	6062      	str	r2, [r4, #4]
 8015f88:	04d9      	lsls	r1, r3, #19
 8015f8a:	6922      	ldr	r2, [r4, #16]
 8015f8c:	6022      	str	r2, [r4, #0]
 8015f8e:	d504      	bpl.n	8015f9a <__sflush_r+0x7e>
 8015f90:	1c42      	adds	r2, r0, #1
 8015f92:	d101      	bne.n	8015f98 <__sflush_r+0x7c>
 8015f94:	682b      	ldr	r3, [r5, #0]
 8015f96:	b903      	cbnz	r3, 8015f9a <__sflush_r+0x7e>
 8015f98:	6560      	str	r0, [r4, #84]	; 0x54
 8015f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f9c:	602f      	str	r7, [r5, #0]
 8015f9e:	2900      	cmp	r1, #0
 8015fa0:	d0c9      	beq.n	8015f36 <__sflush_r+0x1a>
 8015fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fa6:	4299      	cmp	r1, r3
 8015fa8:	d002      	beq.n	8015fb0 <__sflush_r+0x94>
 8015faa:	4628      	mov	r0, r5
 8015fac:	f7fe f95a 	bl	8014264 <_free_r>
 8015fb0:	2000      	movs	r0, #0
 8015fb2:	6360      	str	r0, [r4, #52]	; 0x34
 8015fb4:	e7c0      	b.n	8015f38 <__sflush_r+0x1c>
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	4628      	mov	r0, r5
 8015fba:	47b0      	blx	r6
 8015fbc:	1c41      	adds	r1, r0, #1
 8015fbe:	d1c8      	bne.n	8015f52 <__sflush_r+0x36>
 8015fc0:	682b      	ldr	r3, [r5, #0]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d0c5      	beq.n	8015f52 <__sflush_r+0x36>
 8015fc6:	2b1d      	cmp	r3, #29
 8015fc8:	d001      	beq.n	8015fce <__sflush_r+0xb2>
 8015fca:	2b16      	cmp	r3, #22
 8015fcc:	d101      	bne.n	8015fd2 <__sflush_r+0xb6>
 8015fce:	602f      	str	r7, [r5, #0]
 8015fd0:	e7b1      	b.n	8015f36 <__sflush_r+0x1a>
 8015fd2:	89a3      	ldrh	r3, [r4, #12]
 8015fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fd8:	81a3      	strh	r3, [r4, #12]
 8015fda:	e7ad      	b.n	8015f38 <__sflush_r+0x1c>
 8015fdc:	690f      	ldr	r7, [r1, #16]
 8015fde:	2f00      	cmp	r7, #0
 8015fe0:	d0a9      	beq.n	8015f36 <__sflush_r+0x1a>
 8015fe2:	0793      	lsls	r3, r2, #30
 8015fe4:	680e      	ldr	r6, [r1, #0]
 8015fe6:	bf08      	it	eq
 8015fe8:	694b      	ldreq	r3, [r1, #20]
 8015fea:	600f      	str	r7, [r1, #0]
 8015fec:	bf18      	it	ne
 8015fee:	2300      	movne	r3, #0
 8015ff0:	eba6 0807 	sub.w	r8, r6, r7
 8015ff4:	608b      	str	r3, [r1, #8]
 8015ff6:	f1b8 0f00 	cmp.w	r8, #0
 8015ffa:	dd9c      	ble.n	8015f36 <__sflush_r+0x1a>
 8015ffc:	6a21      	ldr	r1, [r4, #32]
 8015ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016000:	4643      	mov	r3, r8
 8016002:	463a      	mov	r2, r7
 8016004:	4628      	mov	r0, r5
 8016006:	47b0      	blx	r6
 8016008:	2800      	cmp	r0, #0
 801600a:	dc06      	bgt.n	801601a <__sflush_r+0xfe>
 801600c:	89a3      	ldrh	r3, [r4, #12]
 801600e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016012:	81a3      	strh	r3, [r4, #12]
 8016014:	f04f 30ff 	mov.w	r0, #4294967295
 8016018:	e78e      	b.n	8015f38 <__sflush_r+0x1c>
 801601a:	4407      	add	r7, r0
 801601c:	eba8 0800 	sub.w	r8, r8, r0
 8016020:	e7e9      	b.n	8015ff6 <__sflush_r+0xda>
 8016022:	bf00      	nop
 8016024:	dfbffffe 	.word	0xdfbffffe

08016028 <_fflush_r>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	690b      	ldr	r3, [r1, #16]
 801602c:	4605      	mov	r5, r0
 801602e:	460c      	mov	r4, r1
 8016030:	b913      	cbnz	r3, 8016038 <_fflush_r+0x10>
 8016032:	2500      	movs	r5, #0
 8016034:	4628      	mov	r0, r5
 8016036:	bd38      	pop	{r3, r4, r5, pc}
 8016038:	b118      	cbz	r0, 8016042 <_fflush_r+0x1a>
 801603a:	6a03      	ldr	r3, [r0, #32]
 801603c:	b90b      	cbnz	r3, 8016042 <_fflush_r+0x1a>
 801603e:	f7fc ff57 	bl	8012ef0 <__sinit>
 8016042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d0f3      	beq.n	8016032 <_fflush_r+0xa>
 801604a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801604c:	07d0      	lsls	r0, r2, #31
 801604e:	d404      	bmi.n	801605a <_fflush_r+0x32>
 8016050:	0599      	lsls	r1, r3, #22
 8016052:	d402      	bmi.n	801605a <_fflush_r+0x32>
 8016054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016056:	f7fd fa6c 	bl	8013532 <__retarget_lock_acquire_recursive>
 801605a:	4628      	mov	r0, r5
 801605c:	4621      	mov	r1, r4
 801605e:	f7ff ff5d 	bl	8015f1c <__sflush_r>
 8016062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016064:	07da      	lsls	r2, r3, #31
 8016066:	4605      	mov	r5, r0
 8016068:	d4e4      	bmi.n	8016034 <_fflush_r+0xc>
 801606a:	89a3      	ldrh	r3, [r4, #12]
 801606c:	059b      	lsls	r3, r3, #22
 801606e:	d4e1      	bmi.n	8016034 <_fflush_r+0xc>
 8016070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016072:	f7fd fa5f 	bl	8013534 <__retarget_lock_release_recursive>
 8016076:	e7dd      	b.n	8016034 <_fflush_r+0xc>

08016078 <__swhatbuf_r>:
 8016078:	b570      	push	{r4, r5, r6, lr}
 801607a:	460c      	mov	r4, r1
 801607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016080:	2900      	cmp	r1, #0
 8016082:	b096      	sub	sp, #88	; 0x58
 8016084:	4615      	mov	r5, r2
 8016086:	461e      	mov	r6, r3
 8016088:	da0d      	bge.n	80160a6 <__swhatbuf_r+0x2e>
 801608a:	89a3      	ldrh	r3, [r4, #12]
 801608c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016090:	f04f 0100 	mov.w	r1, #0
 8016094:	bf0c      	ite	eq
 8016096:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801609a:	2340      	movne	r3, #64	; 0x40
 801609c:	2000      	movs	r0, #0
 801609e:	6031      	str	r1, [r6, #0]
 80160a0:	602b      	str	r3, [r5, #0]
 80160a2:	b016      	add	sp, #88	; 0x58
 80160a4:	bd70      	pop	{r4, r5, r6, pc}
 80160a6:	466a      	mov	r2, sp
 80160a8:	f000 f878 	bl	801619c <_fstat_r>
 80160ac:	2800      	cmp	r0, #0
 80160ae:	dbec      	blt.n	801608a <__swhatbuf_r+0x12>
 80160b0:	9901      	ldr	r1, [sp, #4]
 80160b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80160b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80160ba:	4259      	negs	r1, r3
 80160bc:	4159      	adcs	r1, r3
 80160be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80160c2:	e7eb      	b.n	801609c <__swhatbuf_r+0x24>

080160c4 <__smakebuf_r>:
 80160c4:	898b      	ldrh	r3, [r1, #12]
 80160c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160c8:	079d      	lsls	r5, r3, #30
 80160ca:	4606      	mov	r6, r0
 80160cc:	460c      	mov	r4, r1
 80160ce:	d507      	bpl.n	80160e0 <__smakebuf_r+0x1c>
 80160d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80160d4:	6023      	str	r3, [r4, #0]
 80160d6:	6123      	str	r3, [r4, #16]
 80160d8:	2301      	movs	r3, #1
 80160da:	6163      	str	r3, [r4, #20]
 80160dc:	b002      	add	sp, #8
 80160de:	bd70      	pop	{r4, r5, r6, pc}
 80160e0:	ab01      	add	r3, sp, #4
 80160e2:	466a      	mov	r2, sp
 80160e4:	f7ff ffc8 	bl	8016078 <__swhatbuf_r>
 80160e8:	9900      	ldr	r1, [sp, #0]
 80160ea:	4605      	mov	r5, r0
 80160ec:	4630      	mov	r0, r6
 80160ee:	f7fe f92d 	bl	801434c <_malloc_r>
 80160f2:	b948      	cbnz	r0, 8016108 <__smakebuf_r+0x44>
 80160f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160f8:	059a      	lsls	r2, r3, #22
 80160fa:	d4ef      	bmi.n	80160dc <__smakebuf_r+0x18>
 80160fc:	f023 0303 	bic.w	r3, r3, #3
 8016100:	f043 0302 	orr.w	r3, r3, #2
 8016104:	81a3      	strh	r3, [r4, #12]
 8016106:	e7e3      	b.n	80160d0 <__smakebuf_r+0xc>
 8016108:	89a3      	ldrh	r3, [r4, #12]
 801610a:	6020      	str	r0, [r4, #0]
 801610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016110:	81a3      	strh	r3, [r4, #12]
 8016112:	9b00      	ldr	r3, [sp, #0]
 8016114:	6163      	str	r3, [r4, #20]
 8016116:	9b01      	ldr	r3, [sp, #4]
 8016118:	6120      	str	r0, [r4, #16]
 801611a:	b15b      	cbz	r3, 8016134 <__smakebuf_r+0x70>
 801611c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016120:	4630      	mov	r0, r6
 8016122:	f000 f84d 	bl	80161c0 <_isatty_r>
 8016126:	b128      	cbz	r0, 8016134 <__smakebuf_r+0x70>
 8016128:	89a3      	ldrh	r3, [r4, #12]
 801612a:	f023 0303 	bic.w	r3, r3, #3
 801612e:	f043 0301 	orr.w	r3, r3, #1
 8016132:	81a3      	strh	r3, [r4, #12]
 8016134:	89a3      	ldrh	r3, [r4, #12]
 8016136:	431d      	orrs	r5, r3
 8016138:	81a5      	strh	r5, [r4, #12]
 801613a:	e7cf      	b.n	80160dc <__smakebuf_r+0x18>

0801613c <_raise_r>:
 801613c:	291f      	cmp	r1, #31
 801613e:	b538      	push	{r3, r4, r5, lr}
 8016140:	4604      	mov	r4, r0
 8016142:	460d      	mov	r5, r1
 8016144:	d904      	bls.n	8016150 <_raise_r+0x14>
 8016146:	2316      	movs	r3, #22
 8016148:	6003      	str	r3, [r0, #0]
 801614a:	f04f 30ff 	mov.w	r0, #4294967295
 801614e:	bd38      	pop	{r3, r4, r5, pc}
 8016150:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016152:	b112      	cbz	r2, 801615a <_raise_r+0x1e>
 8016154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016158:	b94b      	cbnz	r3, 801616e <_raise_r+0x32>
 801615a:	4620      	mov	r0, r4
 801615c:	f000 f852 	bl	8016204 <_getpid_r>
 8016160:	462a      	mov	r2, r5
 8016162:	4601      	mov	r1, r0
 8016164:	4620      	mov	r0, r4
 8016166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801616a:	f000 b839 	b.w	80161e0 <_kill_r>
 801616e:	2b01      	cmp	r3, #1
 8016170:	d00a      	beq.n	8016188 <_raise_r+0x4c>
 8016172:	1c59      	adds	r1, r3, #1
 8016174:	d103      	bne.n	801617e <_raise_r+0x42>
 8016176:	2316      	movs	r3, #22
 8016178:	6003      	str	r3, [r0, #0]
 801617a:	2001      	movs	r0, #1
 801617c:	e7e7      	b.n	801614e <_raise_r+0x12>
 801617e:	2400      	movs	r4, #0
 8016180:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016184:	4628      	mov	r0, r5
 8016186:	4798      	blx	r3
 8016188:	2000      	movs	r0, #0
 801618a:	e7e0      	b.n	801614e <_raise_r+0x12>

0801618c <raise>:
 801618c:	4b02      	ldr	r3, [pc, #8]	; (8016198 <raise+0xc>)
 801618e:	4601      	mov	r1, r0
 8016190:	6818      	ldr	r0, [r3, #0]
 8016192:	f7ff bfd3 	b.w	801613c <_raise_r>
 8016196:	bf00      	nop
 8016198:	20000170 	.word	0x20000170

0801619c <_fstat_r>:
 801619c:	b538      	push	{r3, r4, r5, lr}
 801619e:	4d07      	ldr	r5, [pc, #28]	; (80161bc <_fstat_r+0x20>)
 80161a0:	2300      	movs	r3, #0
 80161a2:	4604      	mov	r4, r0
 80161a4:	4608      	mov	r0, r1
 80161a6:	4611      	mov	r1, r2
 80161a8:	602b      	str	r3, [r5, #0]
 80161aa:	f7ec feff 	bl	8002fac <_fstat>
 80161ae:	1c43      	adds	r3, r0, #1
 80161b0:	d102      	bne.n	80161b8 <_fstat_r+0x1c>
 80161b2:	682b      	ldr	r3, [r5, #0]
 80161b4:	b103      	cbz	r3, 80161b8 <_fstat_r+0x1c>
 80161b6:	6023      	str	r3, [r4, #0]
 80161b8:	bd38      	pop	{r3, r4, r5, pc}
 80161ba:	bf00      	nop
 80161bc:	20003bdc 	.word	0x20003bdc

080161c0 <_isatty_r>:
 80161c0:	b538      	push	{r3, r4, r5, lr}
 80161c2:	4d06      	ldr	r5, [pc, #24]	; (80161dc <_isatty_r+0x1c>)
 80161c4:	2300      	movs	r3, #0
 80161c6:	4604      	mov	r4, r0
 80161c8:	4608      	mov	r0, r1
 80161ca:	602b      	str	r3, [r5, #0]
 80161cc:	f7ec fefe 	bl	8002fcc <_isatty>
 80161d0:	1c43      	adds	r3, r0, #1
 80161d2:	d102      	bne.n	80161da <_isatty_r+0x1a>
 80161d4:	682b      	ldr	r3, [r5, #0]
 80161d6:	b103      	cbz	r3, 80161da <_isatty_r+0x1a>
 80161d8:	6023      	str	r3, [r4, #0]
 80161da:	bd38      	pop	{r3, r4, r5, pc}
 80161dc:	20003bdc 	.word	0x20003bdc

080161e0 <_kill_r>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4d07      	ldr	r5, [pc, #28]	; (8016200 <_kill_r+0x20>)
 80161e4:	2300      	movs	r3, #0
 80161e6:	4604      	mov	r4, r0
 80161e8:	4608      	mov	r0, r1
 80161ea:	4611      	mov	r1, r2
 80161ec:	602b      	str	r3, [r5, #0]
 80161ee:	f7ec fe9a 	bl	8002f26 <_kill>
 80161f2:	1c43      	adds	r3, r0, #1
 80161f4:	d102      	bne.n	80161fc <_kill_r+0x1c>
 80161f6:	682b      	ldr	r3, [r5, #0]
 80161f8:	b103      	cbz	r3, 80161fc <_kill_r+0x1c>
 80161fa:	6023      	str	r3, [r4, #0]
 80161fc:	bd38      	pop	{r3, r4, r5, pc}
 80161fe:	bf00      	nop
 8016200:	20003bdc 	.word	0x20003bdc

08016204 <_getpid_r>:
 8016204:	f7ec be87 	b.w	8002f16 <_getpid>

08016208 <_sbrk_r>:
 8016208:	b538      	push	{r3, r4, r5, lr}
 801620a:	4d06      	ldr	r5, [pc, #24]	; (8016224 <_sbrk_r+0x1c>)
 801620c:	2300      	movs	r3, #0
 801620e:	4604      	mov	r4, r0
 8016210:	4608      	mov	r0, r1
 8016212:	602b      	str	r3, [r5, #0]
 8016214:	f7ec fef2 	bl	8002ffc <_sbrk>
 8016218:	1c43      	adds	r3, r0, #1
 801621a:	d102      	bne.n	8016222 <_sbrk_r+0x1a>
 801621c:	682b      	ldr	r3, [r5, #0]
 801621e:	b103      	cbz	r3, 8016222 <_sbrk_r+0x1a>
 8016220:	6023      	str	r3, [r4, #0]
 8016222:	bd38      	pop	{r3, r4, r5, pc}
 8016224:	20003bdc 	.word	0x20003bdc

08016228 <nan>:
 8016228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016230 <nan+0x8>
 801622c:	4770      	bx	lr
 801622e:	bf00      	nop
 8016230:	00000000 	.word	0x00000000
 8016234:	7ff80000 	.word	0x7ff80000

08016238 <_calloc_r>:
 8016238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801623a:	fba1 2402 	umull	r2, r4, r1, r2
 801623e:	b94c      	cbnz	r4, 8016254 <_calloc_r+0x1c>
 8016240:	4611      	mov	r1, r2
 8016242:	9201      	str	r2, [sp, #4]
 8016244:	f7fe f882 	bl	801434c <_malloc_r>
 8016248:	9a01      	ldr	r2, [sp, #4]
 801624a:	4605      	mov	r5, r0
 801624c:	b930      	cbnz	r0, 801625c <_calloc_r+0x24>
 801624e:	4628      	mov	r0, r5
 8016250:	b003      	add	sp, #12
 8016252:	bd30      	pop	{r4, r5, pc}
 8016254:	220c      	movs	r2, #12
 8016256:	6002      	str	r2, [r0, #0]
 8016258:	2500      	movs	r5, #0
 801625a:	e7f8      	b.n	801624e <_calloc_r+0x16>
 801625c:	4621      	mov	r1, r4
 801625e:	f7fd f853 	bl	8013308 <memset>
 8016262:	e7f4      	b.n	801624e <_calloc_r+0x16>

08016264 <rshift>:
 8016264:	6903      	ldr	r3, [r0, #16]
 8016266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801626a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801626e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016272:	f100 0414 	add.w	r4, r0, #20
 8016276:	dd45      	ble.n	8016304 <rshift+0xa0>
 8016278:	f011 011f 	ands.w	r1, r1, #31
 801627c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016280:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016284:	d10c      	bne.n	80162a0 <rshift+0x3c>
 8016286:	f100 0710 	add.w	r7, r0, #16
 801628a:	4629      	mov	r1, r5
 801628c:	42b1      	cmp	r1, r6
 801628e:	d334      	bcc.n	80162fa <rshift+0x96>
 8016290:	1a9b      	subs	r3, r3, r2
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	1eea      	subs	r2, r5, #3
 8016296:	4296      	cmp	r6, r2
 8016298:	bf38      	it	cc
 801629a:	2300      	movcc	r3, #0
 801629c:	4423      	add	r3, r4
 801629e:	e015      	b.n	80162cc <rshift+0x68>
 80162a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80162a4:	f1c1 0820 	rsb	r8, r1, #32
 80162a8:	40cf      	lsrs	r7, r1
 80162aa:	f105 0e04 	add.w	lr, r5, #4
 80162ae:	46a1      	mov	r9, r4
 80162b0:	4576      	cmp	r6, lr
 80162b2:	46f4      	mov	ip, lr
 80162b4:	d815      	bhi.n	80162e2 <rshift+0x7e>
 80162b6:	1a9a      	subs	r2, r3, r2
 80162b8:	0092      	lsls	r2, r2, #2
 80162ba:	3a04      	subs	r2, #4
 80162bc:	3501      	adds	r5, #1
 80162be:	42ae      	cmp	r6, r5
 80162c0:	bf38      	it	cc
 80162c2:	2200      	movcc	r2, #0
 80162c4:	18a3      	adds	r3, r4, r2
 80162c6:	50a7      	str	r7, [r4, r2]
 80162c8:	b107      	cbz	r7, 80162cc <rshift+0x68>
 80162ca:	3304      	adds	r3, #4
 80162cc:	1b1a      	subs	r2, r3, r4
 80162ce:	42a3      	cmp	r3, r4
 80162d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80162d4:	bf08      	it	eq
 80162d6:	2300      	moveq	r3, #0
 80162d8:	6102      	str	r2, [r0, #16]
 80162da:	bf08      	it	eq
 80162dc:	6143      	streq	r3, [r0, #20]
 80162de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162e2:	f8dc c000 	ldr.w	ip, [ip]
 80162e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80162ea:	ea4c 0707 	orr.w	r7, ip, r7
 80162ee:	f849 7b04 	str.w	r7, [r9], #4
 80162f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80162f6:	40cf      	lsrs	r7, r1
 80162f8:	e7da      	b.n	80162b0 <rshift+0x4c>
 80162fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80162fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8016302:	e7c3      	b.n	801628c <rshift+0x28>
 8016304:	4623      	mov	r3, r4
 8016306:	e7e1      	b.n	80162cc <rshift+0x68>

08016308 <__hexdig_fun>:
 8016308:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801630c:	2b09      	cmp	r3, #9
 801630e:	d802      	bhi.n	8016316 <__hexdig_fun+0xe>
 8016310:	3820      	subs	r0, #32
 8016312:	b2c0      	uxtb	r0, r0
 8016314:	4770      	bx	lr
 8016316:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801631a:	2b05      	cmp	r3, #5
 801631c:	d801      	bhi.n	8016322 <__hexdig_fun+0x1a>
 801631e:	3847      	subs	r0, #71	; 0x47
 8016320:	e7f7      	b.n	8016312 <__hexdig_fun+0xa>
 8016322:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016326:	2b05      	cmp	r3, #5
 8016328:	d801      	bhi.n	801632e <__hexdig_fun+0x26>
 801632a:	3827      	subs	r0, #39	; 0x27
 801632c:	e7f1      	b.n	8016312 <__hexdig_fun+0xa>
 801632e:	2000      	movs	r0, #0
 8016330:	4770      	bx	lr
	...

08016334 <__gethex>:
 8016334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016338:	4617      	mov	r7, r2
 801633a:	680a      	ldr	r2, [r1, #0]
 801633c:	b085      	sub	sp, #20
 801633e:	f102 0b02 	add.w	fp, r2, #2
 8016342:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016346:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801634a:	4681      	mov	r9, r0
 801634c:	468a      	mov	sl, r1
 801634e:	9302      	str	r3, [sp, #8]
 8016350:	32fe      	adds	r2, #254	; 0xfe
 8016352:	eb02 030b 	add.w	r3, r2, fp
 8016356:	46d8      	mov	r8, fp
 8016358:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801635c:	9301      	str	r3, [sp, #4]
 801635e:	2830      	cmp	r0, #48	; 0x30
 8016360:	d0f7      	beq.n	8016352 <__gethex+0x1e>
 8016362:	f7ff ffd1 	bl	8016308 <__hexdig_fun>
 8016366:	4604      	mov	r4, r0
 8016368:	2800      	cmp	r0, #0
 801636a:	d138      	bne.n	80163de <__gethex+0xaa>
 801636c:	49a7      	ldr	r1, [pc, #668]	; (801660c <__gethex+0x2d8>)
 801636e:	2201      	movs	r2, #1
 8016370:	4640      	mov	r0, r8
 8016372:	f7fc ffd1 	bl	8013318 <strncmp>
 8016376:	4606      	mov	r6, r0
 8016378:	2800      	cmp	r0, #0
 801637a:	d169      	bne.n	8016450 <__gethex+0x11c>
 801637c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016380:	465d      	mov	r5, fp
 8016382:	f7ff ffc1 	bl	8016308 <__hexdig_fun>
 8016386:	2800      	cmp	r0, #0
 8016388:	d064      	beq.n	8016454 <__gethex+0x120>
 801638a:	465a      	mov	r2, fp
 801638c:	7810      	ldrb	r0, [r2, #0]
 801638e:	2830      	cmp	r0, #48	; 0x30
 8016390:	4690      	mov	r8, r2
 8016392:	f102 0201 	add.w	r2, r2, #1
 8016396:	d0f9      	beq.n	801638c <__gethex+0x58>
 8016398:	f7ff ffb6 	bl	8016308 <__hexdig_fun>
 801639c:	2301      	movs	r3, #1
 801639e:	fab0 f480 	clz	r4, r0
 80163a2:	0964      	lsrs	r4, r4, #5
 80163a4:	465e      	mov	r6, fp
 80163a6:	9301      	str	r3, [sp, #4]
 80163a8:	4642      	mov	r2, r8
 80163aa:	4615      	mov	r5, r2
 80163ac:	3201      	adds	r2, #1
 80163ae:	7828      	ldrb	r0, [r5, #0]
 80163b0:	f7ff ffaa 	bl	8016308 <__hexdig_fun>
 80163b4:	2800      	cmp	r0, #0
 80163b6:	d1f8      	bne.n	80163aa <__gethex+0x76>
 80163b8:	4994      	ldr	r1, [pc, #592]	; (801660c <__gethex+0x2d8>)
 80163ba:	2201      	movs	r2, #1
 80163bc:	4628      	mov	r0, r5
 80163be:	f7fc ffab 	bl	8013318 <strncmp>
 80163c2:	b978      	cbnz	r0, 80163e4 <__gethex+0xb0>
 80163c4:	b946      	cbnz	r6, 80163d8 <__gethex+0xa4>
 80163c6:	1c6e      	adds	r6, r5, #1
 80163c8:	4632      	mov	r2, r6
 80163ca:	4615      	mov	r5, r2
 80163cc:	3201      	adds	r2, #1
 80163ce:	7828      	ldrb	r0, [r5, #0]
 80163d0:	f7ff ff9a 	bl	8016308 <__hexdig_fun>
 80163d4:	2800      	cmp	r0, #0
 80163d6:	d1f8      	bne.n	80163ca <__gethex+0x96>
 80163d8:	1b73      	subs	r3, r6, r5
 80163da:	009e      	lsls	r6, r3, #2
 80163dc:	e004      	b.n	80163e8 <__gethex+0xb4>
 80163de:	2400      	movs	r4, #0
 80163e0:	4626      	mov	r6, r4
 80163e2:	e7e1      	b.n	80163a8 <__gethex+0x74>
 80163e4:	2e00      	cmp	r6, #0
 80163e6:	d1f7      	bne.n	80163d8 <__gethex+0xa4>
 80163e8:	782b      	ldrb	r3, [r5, #0]
 80163ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80163ee:	2b50      	cmp	r3, #80	; 0x50
 80163f0:	d13d      	bne.n	801646e <__gethex+0x13a>
 80163f2:	786b      	ldrb	r3, [r5, #1]
 80163f4:	2b2b      	cmp	r3, #43	; 0x2b
 80163f6:	d02f      	beq.n	8016458 <__gethex+0x124>
 80163f8:	2b2d      	cmp	r3, #45	; 0x2d
 80163fa:	d031      	beq.n	8016460 <__gethex+0x12c>
 80163fc:	1c69      	adds	r1, r5, #1
 80163fe:	f04f 0b00 	mov.w	fp, #0
 8016402:	7808      	ldrb	r0, [r1, #0]
 8016404:	f7ff ff80 	bl	8016308 <__hexdig_fun>
 8016408:	1e42      	subs	r2, r0, #1
 801640a:	b2d2      	uxtb	r2, r2
 801640c:	2a18      	cmp	r2, #24
 801640e:	d82e      	bhi.n	801646e <__gethex+0x13a>
 8016410:	f1a0 0210 	sub.w	r2, r0, #16
 8016414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016418:	f7ff ff76 	bl	8016308 <__hexdig_fun>
 801641c:	f100 3cff 	add.w	ip, r0, #4294967295
 8016420:	fa5f fc8c 	uxtb.w	ip, ip
 8016424:	f1bc 0f18 	cmp.w	ip, #24
 8016428:	d91d      	bls.n	8016466 <__gethex+0x132>
 801642a:	f1bb 0f00 	cmp.w	fp, #0
 801642e:	d000      	beq.n	8016432 <__gethex+0xfe>
 8016430:	4252      	negs	r2, r2
 8016432:	4416      	add	r6, r2
 8016434:	f8ca 1000 	str.w	r1, [sl]
 8016438:	b1dc      	cbz	r4, 8016472 <__gethex+0x13e>
 801643a:	9b01      	ldr	r3, [sp, #4]
 801643c:	2b00      	cmp	r3, #0
 801643e:	bf14      	ite	ne
 8016440:	f04f 0800 	movne.w	r8, #0
 8016444:	f04f 0806 	moveq.w	r8, #6
 8016448:	4640      	mov	r0, r8
 801644a:	b005      	add	sp, #20
 801644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016450:	4645      	mov	r5, r8
 8016452:	4626      	mov	r6, r4
 8016454:	2401      	movs	r4, #1
 8016456:	e7c7      	b.n	80163e8 <__gethex+0xb4>
 8016458:	f04f 0b00 	mov.w	fp, #0
 801645c:	1ca9      	adds	r1, r5, #2
 801645e:	e7d0      	b.n	8016402 <__gethex+0xce>
 8016460:	f04f 0b01 	mov.w	fp, #1
 8016464:	e7fa      	b.n	801645c <__gethex+0x128>
 8016466:	230a      	movs	r3, #10
 8016468:	fb03 0002 	mla	r0, r3, r2, r0
 801646c:	e7d0      	b.n	8016410 <__gethex+0xdc>
 801646e:	4629      	mov	r1, r5
 8016470:	e7e0      	b.n	8016434 <__gethex+0x100>
 8016472:	eba5 0308 	sub.w	r3, r5, r8
 8016476:	3b01      	subs	r3, #1
 8016478:	4621      	mov	r1, r4
 801647a:	2b07      	cmp	r3, #7
 801647c:	dc0a      	bgt.n	8016494 <__gethex+0x160>
 801647e:	4648      	mov	r0, r9
 8016480:	f7fd fff0 	bl	8014464 <_Balloc>
 8016484:	4604      	mov	r4, r0
 8016486:	b940      	cbnz	r0, 801649a <__gethex+0x166>
 8016488:	4b61      	ldr	r3, [pc, #388]	; (8016610 <__gethex+0x2dc>)
 801648a:	4602      	mov	r2, r0
 801648c:	21e4      	movs	r1, #228	; 0xe4
 801648e:	4861      	ldr	r0, [pc, #388]	; (8016614 <__gethex+0x2e0>)
 8016490:	f7fb fd7c 	bl	8011f8c <__assert_func>
 8016494:	3101      	adds	r1, #1
 8016496:	105b      	asrs	r3, r3, #1
 8016498:	e7ef      	b.n	801647a <__gethex+0x146>
 801649a:	f100 0a14 	add.w	sl, r0, #20
 801649e:	2300      	movs	r3, #0
 80164a0:	495a      	ldr	r1, [pc, #360]	; (801660c <__gethex+0x2d8>)
 80164a2:	f8cd a004 	str.w	sl, [sp, #4]
 80164a6:	469b      	mov	fp, r3
 80164a8:	45a8      	cmp	r8, r5
 80164aa:	d342      	bcc.n	8016532 <__gethex+0x1fe>
 80164ac:	9801      	ldr	r0, [sp, #4]
 80164ae:	f840 bb04 	str.w	fp, [r0], #4
 80164b2:	eba0 000a 	sub.w	r0, r0, sl
 80164b6:	1080      	asrs	r0, r0, #2
 80164b8:	6120      	str	r0, [r4, #16]
 80164ba:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80164be:	4658      	mov	r0, fp
 80164c0:	f7fe f8c2 	bl	8014648 <__hi0bits>
 80164c4:	683d      	ldr	r5, [r7, #0]
 80164c6:	eba8 0000 	sub.w	r0, r8, r0
 80164ca:	42a8      	cmp	r0, r5
 80164cc:	dd59      	ble.n	8016582 <__gethex+0x24e>
 80164ce:	eba0 0805 	sub.w	r8, r0, r5
 80164d2:	4641      	mov	r1, r8
 80164d4:	4620      	mov	r0, r4
 80164d6:	f7fe fc51 	bl	8014d7c <__any_on>
 80164da:	4683      	mov	fp, r0
 80164dc:	b1b8      	cbz	r0, 801650e <__gethex+0x1da>
 80164de:	f108 33ff 	add.w	r3, r8, #4294967295
 80164e2:	1159      	asrs	r1, r3, #5
 80164e4:	f003 021f 	and.w	r2, r3, #31
 80164e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80164ec:	f04f 0b01 	mov.w	fp, #1
 80164f0:	fa0b f202 	lsl.w	r2, fp, r2
 80164f4:	420a      	tst	r2, r1
 80164f6:	d00a      	beq.n	801650e <__gethex+0x1da>
 80164f8:	455b      	cmp	r3, fp
 80164fa:	dd06      	ble.n	801650a <__gethex+0x1d6>
 80164fc:	f1a8 0102 	sub.w	r1, r8, #2
 8016500:	4620      	mov	r0, r4
 8016502:	f7fe fc3b 	bl	8014d7c <__any_on>
 8016506:	2800      	cmp	r0, #0
 8016508:	d138      	bne.n	801657c <__gethex+0x248>
 801650a:	f04f 0b02 	mov.w	fp, #2
 801650e:	4641      	mov	r1, r8
 8016510:	4620      	mov	r0, r4
 8016512:	f7ff fea7 	bl	8016264 <rshift>
 8016516:	4446      	add	r6, r8
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	42b3      	cmp	r3, r6
 801651c:	da41      	bge.n	80165a2 <__gethex+0x26e>
 801651e:	4621      	mov	r1, r4
 8016520:	4648      	mov	r0, r9
 8016522:	f7fd ffdf 	bl	80144e4 <_Bfree>
 8016526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016528:	2300      	movs	r3, #0
 801652a:	6013      	str	r3, [r2, #0]
 801652c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016530:	e78a      	b.n	8016448 <__gethex+0x114>
 8016532:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8016536:	2a2e      	cmp	r2, #46	; 0x2e
 8016538:	d014      	beq.n	8016564 <__gethex+0x230>
 801653a:	2b20      	cmp	r3, #32
 801653c:	d106      	bne.n	801654c <__gethex+0x218>
 801653e:	9b01      	ldr	r3, [sp, #4]
 8016540:	f843 bb04 	str.w	fp, [r3], #4
 8016544:	f04f 0b00 	mov.w	fp, #0
 8016548:	9301      	str	r3, [sp, #4]
 801654a:	465b      	mov	r3, fp
 801654c:	7828      	ldrb	r0, [r5, #0]
 801654e:	9303      	str	r3, [sp, #12]
 8016550:	f7ff feda 	bl	8016308 <__hexdig_fun>
 8016554:	9b03      	ldr	r3, [sp, #12]
 8016556:	f000 000f 	and.w	r0, r0, #15
 801655a:	4098      	lsls	r0, r3
 801655c:	ea4b 0b00 	orr.w	fp, fp, r0
 8016560:	3304      	adds	r3, #4
 8016562:	e7a1      	b.n	80164a8 <__gethex+0x174>
 8016564:	45a8      	cmp	r8, r5
 8016566:	d8e8      	bhi.n	801653a <__gethex+0x206>
 8016568:	2201      	movs	r2, #1
 801656a:	4628      	mov	r0, r5
 801656c:	9303      	str	r3, [sp, #12]
 801656e:	f7fc fed3 	bl	8013318 <strncmp>
 8016572:	4926      	ldr	r1, [pc, #152]	; (801660c <__gethex+0x2d8>)
 8016574:	9b03      	ldr	r3, [sp, #12]
 8016576:	2800      	cmp	r0, #0
 8016578:	d1df      	bne.n	801653a <__gethex+0x206>
 801657a:	e795      	b.n	80164a8 <__gethex+0x174>
 801657c:	f04f 0b03 	mov.w	fp, #3
 8016580:	e7c5      	b.n	801650e <__gethex+0x1da>
 8016582:	da0b      	bge.n	801659c <__gethex+0x268>
 8016584:	eba5 0800 	sub.w	r8, r5, r0
 8016588:	4621      	mov	r1, r4
 801658a:	4642      	mov	r2, r8
 801658c:	4648      	mov	r0, r9
 801658e:	f7fe f9c3 	bl	8014918 <__lshift>
 8016592:	eba6 0608 	sub.w	r6, r6, r8
 8016596:	4604      	mov	r4, r0
 8016598:	f100 0a14 	add.w	sl, r0, #20
 801659c:	f04f 0b00 	mov.w	fp, #0
 80165a0:	e7ba      	b.n	8016518 <__gethex+0x1e4>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	42b3      	cmp	r3, r6
 80165a6:	dd73      	ble.n	8016690 <__gethex+0x35c>
 80165a8:	1b9e      	subs	r6, r3, r6
 80165aa:	42b5      	cmp	r5, r6
 80165ac:	dc34      	bgt.n	8016618 <__gethex+0x2e4>
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2b02      	cmp	r3, #2
 80165b2:	d023      	beq.n	80165fc <__gethex+0x2c8>
 80165b4:	2b03      	cmp	r3, #3
 80165b6:	d025      	beq.n	8016604 <__gethex+0x2d0>
 80165b8:	2b01      	cmp	r3, #1
 80165ba:	d115      	bne.n	80165e8 <__gethex+0x2b4>
 80165bc:	42b5      	cmp	r5, r6
 80165be:	d113      	bne.n	80165e8 <__gethex+0x2b4>
 80165c0:	2d01      	cmp	r5, #1
 80165c2:	d10b      	bne.n	80165dc <__gethex+0x2a8>
 80165c4:	9a02      	ldr	r2, [sp, #8]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6013      	str	r3, [r2, #0]
 80165ca:	2301      	movs	r3, #1
 80165cc:	6123      	str	r3, [r4, #16]
 80165ce:	f8ca 3000 	str.w	r3, [sl]
 80165d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165d4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80165d8:	601c      	str	r4, [r3, #0]
 80165da:	e735      	b.n	8016448 <__gethex+0x114>
 80165dc:	1e69      	subs	r1, r5, #1
 80165de:	4620      	mov	r0, r4
 80165e0:	f7fe fbcc 	bl	8014d7c <__any_on>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d1ed      	bne.n	80165c4 <__gethex+0x290>
 80165e8:	4621      	mov	r1, r4
 80165ea:	4648      	mov	r0, r9
 80165ec:	f7fd ff7a 	bl	80144e4 <_Bfree>
 80165f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165f2:	2300      	movs	r3, #0
 80165f4:	6013      	str	r3, [r2, #0]
 80165f6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80165fa:	e725      	b.n	8016448 <__gethex+0x114>
 80165fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d1f2      	bne.n	80165e8 <__gethex+0x2b4>
 8016602:	e7df      	b.n	80165c4 <__gethex+0x290>
 8016604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1dc      	bne.n	80165c4 <__gethex+0x290>
 801660a:	e7ed      	b.n	80165e8 <__gethex+0x2b4>
 801660c:	080186a4 	.word	0x080186a4
 8016610:	0801853b 	.word	0x0801853b
 8016614:	08018711 	.word	0x08018711
 8016618:	f106 38ff 	add.w	r8, r6, #4294967295
 801661c:	f1bb 0f00 	cmp.w	fp, #0
 8016620:	d133      	bne.n	801668a <__gethex+0x356>
 8016622:	f1b8 0f00 	cmp.w	r8, #0
 8016626:	d004      	beq.n	8016632 <__gethex+0x2fe>
 8016628:	4641      	mov	r1, r8
 801662a:	4620      	mov	r0, r4
 801662c:	f7fe fba6 	bl	8014d7c <__any_on>
 8016630:	4683      	mov	fp, r0
 8016632:	ea4f 1268 	mov.w	r2, r8, asr #5
 8016636:	2301      	movs	r3, #1
 8016638:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801663c:	f008 081f 	and.w	r8, r8, #31
 8016640:	fa03 f308 	lsl.w	r3, r3, r8
 8016644:	4213      	tst	r3, r2
 8016646:	4631      	mov	r1, r6
 8016648:	4620      	mov	r0, r4
 801664a:	bf18      	it	ne
 801664c:	f04b 0b02 	orrne.w	fp, fp, #2
 8016650:	1bad      	subs	r5, r5, r6
 8016652:	f7ff fe07 	bl	8016264 <rshift>
 8016656:	687e      	ldr	r6, [r7, #4]
 8016658:	f04f 0802 	mov.w	r8, #2
 801665c:	f1bb 0f00 	cmp.w	fp, #0
 8016660:	d04a      	beq.n	80166f8 <__gethex+0x3c4>
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	2b02      	cmp	r3, #2
 8016666:	d016      	beq.n	8016696 <__gethex+0x362>
 8016668:	2b03      	cmp	r3, #3
 801666a:	d018      	beq.n	801669e <__gethex+0x36a>
 801666c:	2b01      	cmp	r3, #1
 801666e:	d109      	bne.n	8016684 <__gethex+0x350>
 8016670:	f01b 0f02 	tst.w	fp, #2
 8016674:	d006      	beq.n	8016684 <__gethex+0x350>
 8016676:	f8da 3000 	ldr.w	r3, [sl]
 801667a:	ea4b 0b03 	orr.w	fp, fp, r3
 801667e:	f01b 0f01 	tst.w	fp, #1
 8016682:	d10f      	bne.n	80166a4 <__gethex+0x370>
 8016684:	f048 0810 	orr.w	r8, r8, #16
 8016688:	e036      	b.n	80166f8 <__gethex+0x3c4>
 801668a:	f04f 0b01 	mov.w	fp, #1
 801668e:	e7d0      	b.n	8016632 <__gethex+0x2fe>
 8016690:	f04f 0801 	mov.w	r8, #1
 8016694:	e7e2      	b.n	801665c <__gethex+0x328>
 8016696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016698:	f1c3 0301 	rsb	r3, r3, #1
 801669c:	930f      	str	r3, [sp, #60]	; 0x3c
 801669e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d0ef      	beq.n	8016684 <__gethex+0x350>
 80166a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80166a8:	f104 0214 	add.w	r2, r4, #20
 80166ac:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80166b0:	9301      	str	r3, [sp, #4]
 80166b2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80166b6:	2300      	movs	r3, #0
 80166b8:	4694      	mov	ip, r2
 80166ba:	f852 1b04 	ldr.w	r1, [r2], #4
 80166be:	f1b1 3fff 	cmp.w	r1, #4294967295
 80166c2:	d01e      	beq.n	8016702 <__gethex+0x3ce>
 80166c4:	3101      	adds	r1, #1
 80166c6:	f8cc 1000 	str.w	r1, [ip]
 80166ca:	f1b8 0f02 	cmp.w	r8, #2
 80166ce:	f104 0214 	add.w	r2, r4, #20
 80166d2:	d13d      	bne.n	8016750 <__gethex+0x41c>
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	3b01      	subs	r3, #1
 80166d8:	42ab      	cmp	r3, r5
 80166da:	d10b      	bne.n	80166f4 <__gethex+0x3c0>
 80166dc:	1169      	asrs	r1, r5, #5
 80166de:	2301      	movs	r3, #1
 80166e0:	f005 051f 	and.w	r5, r5, #31
 80166e4:	fa03 f505 	lsl.w	r5, r3, r5
 80166e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166ec:	421d      	tst	r5, r3
 80166ee:	bf18      	it	ne
 80166f0:	f04f 0801 	movne.w	r8, #1
 80166f4:	f048 0820 	orr.w	r8, r8, #32
 80166f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166fa:	601c      	str	r4, [r3, #0]
 80166fc:	9b02      	ldr	r3, [sp, #8]
 80166fe:	601e      	str	r6, [r3, #0]
 8016700:	e6a2      	b.n	8016448 <__gethex+0x114>
 8016702:	4290      	cmp	r0, r2
 8016704:	f842 3c04 	str.w	r3, [r2, #-4]
 8016708:	d8d6      	bhi.n	80166b8 <__gethex+0x384>
 801670a:	68a2      	ldr	r2, [r4, #8]
 801670c:	4593      	cmp	fp, r2
 801670e:	db17      	blt.n	8016740 <__gethex+0x40c>
 8016710:	6861      	ldr	r1, [r4, #4]
 8016712:	4648      	mov	r0, r9
 8016714:	3101      	adds	r1, #1
 8016716:	f7fd fea5 	bl	8014464 <_Balloc>
 801671a:	4682      	mov	sl, r0
 801671c:	b918      	cbnz	r0, 8016726 <__gethex+0x3f2>
 801671e:	4b1b      	ldr	r3, [pc, #108]	; (801678c <__gethex+0x458>)
 8016720:	4602      	mov	r2, r0
 8016722:	2184      	movs	r1, #132	; 0x84
 8016724:	e6b3      	b.n	801648e <__gethex+0x15a>
 8016726:	6922      	ldr	r2, [r4, #16]
 8016728:	3202      	adds	r2, #2
 801672a:	f104 010c 	add.w	r1, r4, #12
 801672e:	0092      	lsls	r2, r2, #2
 8016730:	300c      	adds	r0, #12
 8016732:	f7fc ff00 	bl	8013536 <memcpy>
 8016736:	4621      	mov	r1, r4
 8016738:	4648      	mov	r0, r9
 801673a:	f7fd fed3 	bl	80144e4 <_Bfree>
 801673e:	4654      	mov	r4, sl
 8016740:	6922      	ldr	r2, [r4, #16]
 8016742:	1c51      	adds	r1, r2, #1
 8016744:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016748:	6121      	str	r1, [r4, #16]
 801674a:	2101      	movs	r1, #1
 801674c:	6151      	str	r1, [r2, #20]
 801674e:	e7bc      	b.n	80166ca <__gethex+0x396>
 8016750:	6921      	ldr	r1, [r4, #16]
 8016752:	4559      	cmp	r1, fp
 8016754:	dd0b      	ble.n	801676e <__gethex+0x43a>
 8016756:	2101      	movs	r1, #1
 8016758:	4620      	mov	r0, r4
 801675a:	f7ff fd83 	bl	8016264 <rshift>
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	3601      	adds	r6, #1
 8016762:	42b3      	cmp	r3, r6
 8016764:	f6ff aedb 	blt.w	801651e <__gethex+0x1ea>
 8016768:	f04f 0801 	mov.w	r8, #1
 801676c:	e7c2      	b.n	80166f4 <__gethex+0x3c0>
 801676e:	f015 051f 	ands.w	r5, r5, #31
 8016772:	d0f9      	beq.n	8016768 <__gethex+0x434>
 8016774:	9b01      	ldr	r3, [sp, #4]
 8016776:	441a      	add	r2, r3
 8016778:	f1c5 0520 	rsb	r5, r5, #32
 801677c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016780:	f7fd ff62 	bl	8014648 <__hi0bits>
 8016784:	42a8      	cmp	r0, r5
 8016786:	dbe6      	blt.n	8016756 <__gethex+0x422>
 8016788:	e7ee      	b.n	8016768 <__gethex+0x434>
 801678a:	bf00      	nop
 801678c:	0801853b 	.word	0x0801853b

08016790 <L_shift>:
 8016790:	f1c2 0208 	rsb	r2, r2, #8
 8016794:	0092      	lsls	r2, r2, #2
 8016796:	b570      	push	{r4, r5, r6, lr}
 8016798:	f1c2 0620 	rsb	r6, r2, #32
 801679c:	6843      	ldr	r3, [r0, #4]
 801679e:	6804      	ldr	r4, [r0, #0]
 80167a0:	fa03 f506 	lsl.w	r5, r3, r6
 80167a4:	432c      	orrs	r4, r5
 80167a6:	40d3      	lsrs	r3, r2
 80167a8:	6004      	str	r4, [r0, #0]
 80167aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80167ae:	4288      	cmp	r0, r1
 80167b0:	d3f4      	bcc.n	801679c <L_shift+0xc>
 80167b2:	bd70      	pop	{r4, r5, r6, pc}

080167b4 <__match>:
 80167b4:	b530      	push	{r4, r5, lr}
 80167b6:	6803      	ldr	r3, [r0, #0]
 80167b8:	3301      	adds	r3, #1
 80167ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167be:	b914      	cbnz	r4, 80167c6 <__match+0x12>
 80167c0:	6003      	str	r3, [r0, #0]
 80167c2:	2001      	movs	r0, #1
 80167c4:	bd30      	pop	{r4, r5, pc}
 80167c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80167ce:	2d19      	cmp	r5, #25
 80167d0:	bf98      	it	ls
 80167d2:	3220      	addls	r2, #32
 80167d4:	42a2      	cmp	r2, r4
 80167d6:	d0f0      	beq.n	80167ba <__match+0x6>
 80167d8:	2000      	movs	r0, #0
 80167da:	e7f3      	b.n	80167c4 <__match+0x10>

080167dc <__hexnan>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	680b      	ldr	r3, [r1, #0]
 80167e2:	6801      	ldr	r1, [r0, #0]
 80167e4:	115e      	asrs	r6, r3, #5
 80167e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80167ea:	f013 031f 	ands.w	r3, r3, #31
 80167ee:	b087      	sub	sp, #28
 80167f0:	bf18      	it	ne
 80167f2:	3604      	addne	r6, #4
 80167f4:	2500      	movs	r5, #0
 80167f6:	1f37      	subs	r7, r6, #4
 80167f8:	4682      	mov	sl, r0
 80167fa:	4690      	mov	r8, r2
 80167fc:	9301      	str	r3, [sp, #4]
 80167fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8016802:	46b9      	mov	r9, r7
 8016804:	463c      	mov	r4, r7
 8016806:	9502      	str	r5, [sp, #8]
 8016808:	46ab      	mov	fp, r5
 801680a:	784a      	ldrb	r2, [r1, #1]
 801680c:	1c4b      	adds	r3, r1, #1
 801680e:	9303      	str	r3, [sp, #12]
 8016810:	b342      	cbz	r2, 8016864 <__hexnan+0x88>
 8016812:	4610      	mov	r0, r2
 8016814:	9105      	str	r1, [sp, #20]
 8016816:	9204      	str	r2, [sp, #16]
 8016818:	f7ff fd76 	bl	8016308 <__hexdig_fun>
 801681c:	2800      	cmp	r0, #0
 801681e:	d14f      	bne.n	80168c0 <__hexnan+0xe4>
 8016820:	9a04      	ldr	r2, [sp, #16]
 8016822:	9905      	ldr	r1, [sp, #20]
 8016824:	2a20      	cmp	r2, #32
 8016826:	d818      	bhi.n	801685a <__hexnan+0x7e>
 8016828:	9b02      	ldr	r3, [sp, #8]
 801682a:	459b      	cmp	fp, r3
 801682c:	dd13      	ble.n	8016856 <__hexnan+0x7a>
 801682e:	454c      	cmp	r4, r9
 8016830:	d206      	bcs.n	8016840 <__hexnan+0x64>
 8016832:	2d07      	cmp	r5, #7
 8016834:	dc04      	bgt.n	8016840 <__hexnan+0x64>
 8016836:	462a      	mov	r2, r5
 8016838:	4649      	mov	r1, r9
 801683a:	4620      	mov	r0, r4
 801683c:	f7ff ffa8 	bl	8016790 <L_shift>
 8016840:	4544      	cmp	r4, r8
 8016842:	d950      	bls.n	80168e6 <__hexnan+0x10a>
 8016844:	2300      	movs	r3, #0
 8016846:	f1a4 0904 	sub.w	r9, r4, #4
 801684a:	f844 3c04 	str.w	r3, [r4, #-4]
 801684e:	f8cd b008 	str.w	fp, [sp, #8]
 8016852:	464c      	mov	r4, r9
 8016854:	461d      	mov	r5, r3
 8016856:	9903      	ldr	r1, [sp, #12]
 8016858:	e7d7      	b.n	801680a <__hexnan+0x2e>
 801685a:	2a29      	cmp	r2, #41	; 0x29
 801685c:	d155      	bne.n	801690a <__hexnan+0x12e>
 801685e:	3102      	adds	r1, #2
 8016860:	f8ca 1000 	str.w	r1, [sl]
 8016864:	f1bb 0f00 	cmp.w	fp, #0
 8016868:	d04f      	beq.n	801690a <__hexnan+0x12e>
 801686a:	454c      	cmp	r4, r9
 801686c:	d206      	bcs.n	801687c <__hexnan+0xa0>
 801686e:	2d07      	cmp	r5, #7
 8016870:	dc04      	bgt.n	801687c <__hexnan+0xa0>
 8016872:	462a      	mov	r2, r5
 8016874:	4649      	mov	r1, r9
 8016876:	4620      	mov	r0, r4
 8016878:	f7ff ff8a 	bl	8016790 <L_shift>
 801687c:	4544      	cmp	r4, r8
 801687e:	d934      	bls.n	80168ea <__hexnan+0x10e>
 8016880:	f1a8 0204 	sub.w	r2, r8, #4
 8016884:	4623      	mov	r3, r4
 8016886:	f853 1b04 	ldr.w	r1, [r3], #4
 801688a:	f842 1f04 	str.w	r1, [r2, #4]!
 801688e:	429f      	cmp	r7, r3
 8016890:	d2f9      	bcs.n	8016886 <__hexnan+0xaa>
 8016892:	1b3b      	subs	r3, r7, r4
 8016894:	f023 0303 	bic.w	r3, r3, #3
 8016898:	3304      	adds	r3, #4
 801689a:	3e03      	subs	r6, #3
 801689c:	3401      	adds	r4, #1
 801689e:	42a6      	cmp	r6, r4
 80168a0:	bf38      	it	cc
 80168a2:	2304      	movcc	r3, #4
 80168a4:	4443      	add	r3, r8
 80168a6:	2200      	movs	r2, #0
 80168a8:	f843 2b04 	str.w	r2, [r3], #4
 80168ac:	429f      	cmp	r7, r3
 80168ae:	d2fb      	bcs.n	80168a8 <__hexnan+0xcc>
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	b91b      	cbnz	r3, 80168bc <__hexnan+0xe0>
 80168b4:	4547      	cmp	r7, r8
 80168b6:	d126      	bne.n	8016906 <__hexnan+0x12a>
 80168b8:	2301      	movs	r3, #1
 80168ba:	603b      	str	r3, [r7, #0]
 80168bc:	2005      	movs	r0, #5
 80168be:	e025      	b.n	801690c <__hexnan+0x130>
 80168c0:	3501      	adds	r5, #1
 80168c2:	2d08      	cmp	r5, #8
 80168c4:	f10b 0b01 	add.w	fp, fp, #1
 80168c8:	dd06      	ble.n	80168d8 <__hexnan+0xfc>
 80168ca:	4544      	cmp	r4, r8
 80168cc:	d9c3      	bls.n	8016856 <__hexnan+0x7a>
 80168ce:	2300      	movs	r3, #0
 80168d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80168d4:	2501      	movs	r5, #1
 80168d6:	3c04      	subs	r4, #4
 80168d8:	6822      	ldr	r2, [r4, #0]
 80168da:	f000 000f 	and.w	r0, r0, #15
 80168de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80168e2:	6020      	str	r0, [r4, #0]
 80168e4:	e7b7      	b.n	8016856 <__hexnan+0x7a>
 80168e6:	2508      	movs	r5, #8
 80168e8:	e7b5      	b.n	8016856 <__hexnan+0x7a>
 80168ea:	9b01      	ldr	r3, [sp, #4]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d0df      	beq.n	80168b0 <__hexnan+0xd4>
 80168f0:	f1c3 0320 	rsb	r3, r3, #32
 80168f4:	f04f 32ff 	mov.w	r2, #4294967295
 80168f8:	40da      	lsrs	r2, r3
 80168fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80168fe:	4013      	ands	r3, r2
 8016900:	f846 3c04 	str.w	r3, [r6, #-4]
 8016904:	e7d4      	b.n	80168b0 <__hexnan+0xd4>
 8016906:	3f04      	subs	r7, #4
 8016908:	e7d2      	b.n	80168b0 <__hexnan+0xd4>
 801690a:	2004      	movs	r0, #4
 801690c:	b007      	add	sp, #28
 801690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016912 <__ascii_mbtowc>:
 8016912:	b082      	sub	sp, #8
 8016914:	b901      	cbnz	r1, 8016918 <__ascii_mbtowc+0x6>
 8016916:	a901      	add	r1, sp, #4
 8016918:	b142      	cbz	r2, 801692c <__ascii_mbtowc+0x1a>
 801691a:	b14b      	cbz	r3, 8016930 <__ascii_mbtowc+0x1e>
 801691c:	7813      	ldrb	r3, [r2, #0]
 801691e:	600b      	str	r3, [r1, #0]
 8016920:	7812      	ldrb	r2, [r2, #0]
 8016922:	1e10      	subs	r0, r2, #0
 8016924:	bf18      	it	ne
 8016926:	2001      	movne	r0, #1
 8016928:	b002      	add	sp, #8
 801692a:	4770      	bx	lr
 801692c:	4610      	mov	r0, r2
 801692e:	e7fb      	b.n	8016928 <__ascii_mbtowc+0x16>
 8016930:	f06f 0001 	mvn.w	r0, #1
 8016934:	e7f8      	b.n	8016928 <__ascii_mbtowc+0x16>

08016936 <_realloc_r>:
 8016936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801693a:	4680      	mov	r8, r0
 801693c:	4614      	mov	r4, r2
 801693e:	460e      	mov	r6, r1
 8016940:	b921      	cbnz	r1, 801694c <_realloc_r+0x16>
 8016942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016946:	4611      	mov	r1, r2
 8016948:	f7fd bd00 	b.w	801434c <_malloc_r>
 801694c:	b92a      	cbnz	r2, 801695a <_realloc_r+0x24>
 801694e:	f7fd fc89 	bl	8014264 <_free_r>
 8016952:	4625      	mov	r5, r4
 8016954:	4628      	mov	r0, r5
 8016956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695a:	f000 f828 	bl	80169ae <_malloc_usable_size_r>
 801695e:	4284      	cmp	r4, r0
 8016960:	4607      	mov	r7, r0
 8016962:	d802      	bhi.n	801696a <_realloc_r+0x34>
 8016964:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016968:	d812      	bhi.n	8016990 <_realloc_r+0x5a>
 801696a:	4621      	mov	r1, r4
 801696c:	4640      	mov	r0, r8
 801696e:	f7fd fced 	bl	801434c <_malloc_r>
 8016972:	4605      	mov	r5, r0
 8016974:	2800      	cmp	r0, #0
 8016976:	d0ed      	beq.n	8016954 <_realloc_r+0x1e>
 8016978:	42bc      	cmp	r4, r7
 801697a:	4622      	mov	r2, r4
 801697c:	4631      	mov	r1, r6
 801697e:	bf28      	it	cs
 8016980:	463a      	movcs	r2, r7
 8016982:	f7fc fdd8 	bl	8013536 <memcpy>
 8016986:	4631      	mov	r1, r6
 8016988:	4640      	mov	r0, r8
 801698a:	f7fd fc6b 	bl	8014264 <_free_r>
 801698e:	e7e1      	b.n	8016954 <_realloc_r+0x1e>
 8016990:	4635      	mov	r5, r6
 8016992:	e7df      	b.n	8016954 <_realloc_r+0x1e>

08016994 <__ascii_wctomb>:
 8016994:	b149      	cbz	r1, 80169aa <__ascii_wctomb+0x16>
 8016996:	2aff      	cmp	r2, #255	; 0xff
 8016998:	bf85      	ittet	hi
 801699a:	238a      	movhi	r3, #138	; 0x8a
 801699c:	6003      	strhi	r3, [r0, #0]
 801699e:	700a      	strbls	r2, [r1, #0]
 80169a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80169a4:	bf98      	it	ls
 80169a6:	2001      	movls	r0, #1
 80169a8:	4770      	bx	lr
 80169aa:	4608      	mov	r0, r1
 80169ac:	4770      	bx	lr

080169ae <_malloc_usable_size_r>:
 80169ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b2:	1f18      	subs	r0, r3, #4
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	bfbc      	itt	lt
 80169b8:	580b      	ldrlt	r3, [r1, r0]
 80169ba:	18c0      	addlt	r0, r0, r3
 80169bc:	4770      	bx	lr
	...

080169c0 <_init>:
 80169c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169c2:	bf00      	nop
 80169c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169c6:	bc08      	pop	{r3}
 80169c8:	469e      	mov	lr, r3
 80169ca:	4770      	bx	lr

080169cc <_fini>:
 80169cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ce:	bf00      	nop
 80169d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169d2:	bc08      	pop	{r3}
 80169d4:	469e      	mov	lr, r3
 80169d6:	4770      	bx	lr
