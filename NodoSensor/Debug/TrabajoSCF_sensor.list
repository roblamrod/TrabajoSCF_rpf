
TrabajoSCF_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000154b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb4  08015640  08015640  00025640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171f4  080171f4  000302dc  2**0
                  CONTENTS
  4 .ARM          00000008  080171f4  080171f4  000271f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080171fc  080171fc  000302dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080171fc  080171fc  000271fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017200  08017200  00027200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08017204  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038c4  200002dc  080174e0  000302dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ba0  080174e0  00033ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031af6  00000000  00000000  0003034f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006969  00000000  00000000  00061e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029f8  00000000  00000000  000687b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002086  00000000  00000000  0006b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000944b  00000000  00000000  0006d22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031d16  00000000  00000000  00076679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e3d8  00000000  00000000  000a838f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c8cc  00000000  00000000  001b6768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c3034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002dc 	.word	0x200002dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015628 	.word	0x08015628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e0 	.word	0x200002e0
 80001cc:	08015628 	.word	0x08015628

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	e000      	b.n	800101c <ITM_SendChar+0x2c>
    {
      __NOP();
 800101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f9      	beq.n	800101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_write>:
extern UART_HandleTypeDef hDiscoUart;
#endif /* TERMINAL_USE */

static  uint8_t  IP_Addr[4];

int _write(int file, char *ptr, int len){
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
	{
	ITM_SendChar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffc9 	bl	8000ff0 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
	}
	return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f001 feed 	bl	8002e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f89c 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 fac2 	bl	800160c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001088:	f000 f8fc 	bl	8001284 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800108c:	f000 f932 	bl	80012f4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001090:	f000 f96e 	bl	8001370 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001094:	f000 f9ee 	bl	8001474 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001098:	f000 fa2a 	bl	80014f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800109c:	f000 fa58 	bl	8001550 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010a0:	f000 fa86 	bl	80015b0 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80010a4:	f000 f98a 	bl	80013bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  #if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <main+0x100>)
 80010aa:	4a34      	ldr	r2, [pc, #208]	; (800117c <main+0x104>)
 80010ac:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80010ae:	4b32      	ldr	r3, [pc, #200]	; (8001178 <main+0x100>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <main+0x100>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <main+0x100>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <main+0x100>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <main+0x100>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <main+0x100>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <main+0x100>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <main+0x100>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <main+0x100>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 80010e6:	4924      	ldr	r1, [pc, #144]	; (8001178 <main+0x100>)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f007 ff3b 	bl	8008f64 <BSP_COM_Init>

  #endif /* TERMINAL_USE */
  BSP_TSENSOR_Init(); // Inicializamos temperatura
 80010ee:	f008 f993 	bl	8009418 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init(); // Inicializamos humedad
 80010f2:	f008 f963 	bl	80093bc <BSP_HSENSOR_Init>
  printf("****** Sistemas Ciberfisicos ****** \n\r");
 80010f6:	4822      	ldr	r0, [pc, #136]	; (8001180 <main+0x108>)
 80010f8:	f010 fcf0 	bl	8011adc <iprintf>

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000); 			/* TransmisiÃ³n de mensajes por UART */
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	2231      	movs	r2, #49	; 0x31
 8001102:	4920      	ldr	r1, [pc, #128]	; (8001184 <main+0x10c>)
 8001104:	4820      	ldr	r0, [pc, #128]	; (8001188 <main+0x110>)
 8001106:	f006 fefe 	bl	8007f06 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	2231      	movs	r2, #49	; 0x31
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <main+0x114>)
 8001112:	481d      	ldr	r0, [pc, #116]	; (8001188 <main+0x110>)
 8001114:	f006 fef7 	bl	8007f06 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111c:	2233      	movs	r2, #51	; 0x33
 800111e:	491c      	ldr	r1, [pc, #112]	; (8001190 <main+0x118>)
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <main+0x110>)
 8001122:	f006 fef0 	bl	8007f06 <HAL_UART_Transmit>


  iniAcc = BSP_ACCELERO_Init();									/* InicializaciÃ³n del acelerÃ³metro */
 8001126:	f008 f8d9 	bl	80092dc <BSP_ACCELERO_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <main+0x11c>)
 8001130:	701a      	strb	r2, [r3, #0]
  LSM6DSL_AccInt_Drdy();											/* ConfiguraciÃ³n del acelerÃ³metro*/
 8001132:	f000 fc25 	bl	8001980 <LSM6DSL_AccInt_Drdy>
  BSP_ACCELERO_LowPower(0);										/* Deshabilitado del modo de bajo consumo*/
 8001136:	2000      	movs	r0, #0
 8001138:	f008 f90e 	bl	8009358 <BSP_ACCELERO_LowPower>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800113c:	f00c fd5a 	bl	800dbf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <main+0x120>)
 8001142:	2100      	movs	r1, #0
 8001144:	4815      	ldr	r0, [pc, #84]	; (800119c <main+0x124>)
 8001146:	f00c fd9f 	bl	800dc88 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <main+0x128>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <main+0x12c>)
 8001152:	2100      	movs	r1, #0
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <main+0x130>)
 8001156:	f00c fd97 	bl	800dc88 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <main+0x134>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of acel_task */
  acel_taskHandle = osThreadNew(acel_task_function, NULL, &acel_task_attributes);
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <main+0x138>)
 8001162:	2100      	movs	r1, #0
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <main+0x13c>)
 8001166:	f00c fd8f 	bl	800dc88 <osThreadNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <main+0x140>)
 800116e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001170:	f00c fd64 	bl	800dc3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0xfc>
 8001176:	bf00      	nop
 8001178:	20000f70 	.word	0x20000f70
 800117c:	40013800 	.word	0x40013800
 8001180:	08015664 	.word	0x08015664
 8001184:	20000000 	.word	0x20000000
 8001188:	20000450 	.word	0x20000450
 800118c:	20000034 	.word	0x20000034
 8001190:	20000068 	.word	0x20000068
 8001194:	20000a82 	.word	0x20000a82
 8001198:	08016ac4 	.word	0x08016ac4
 800119c:	08001a25 	.word	0x08001a25
 80011a0:	20000a6c 	.word	0x20000a6c
 80011a4:	08016ae8 	.word	0x08016ae8
 80011a8:	08001cb5 	.word	0x08001cb5
 80011ac:	20000a70 	.word	0x20000a70
 80011b0:	08016b0c 	.word	0x08016b0c
 80011b4:	08001ccd 	.word	0x08001ccd
 80011b8:	20000a74 	.word	0x20000a74

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2244      	movs	r2, #68	; 0x44
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f010 fe4a 	bl	8011e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011e2:	f003 fbf9 	bl	80049d8 <HAL_PWREx_ControlVoltageScaling>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011ec:	f001 f826 	bl	800223c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011f0:	f003 fbd4 	bl	800499c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <SystemClock_Config+0xc4>)
 80011f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <SystemClock_Config+0xc4>)
 80011fc:	f023 0318 	bic.w	r3, r3, #24
 8001200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001204:	231c      	movs	r3, #28
 8001206:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001220:	2301      	movs	r3, #1
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001228:	2328      	movs	r3, #40	; 0x28
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800122c:	2307      	movs	r3, #7
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001230:	2302      	movs	r3, #2
 8001232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fced 	bl	8004c1c <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001248:	f000 fff8 	bl	800223c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2303      	movs	r3, #3
 8001252:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2104      	movs	r1, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f8b5 	bl	80053d4 <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001270:	f000 ffe4 	bl	800223c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001274:	f004 fdbc 	bl	8005df0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001278:	bf00      	nop
 800127a:	3758      	adds	r7, #88	; 0x58
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000

08001284 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_DFSDM1_Init+0x68>)
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <MX_DFSDM1_Init+0x6c>)
 800128c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_DFSDM1_Init+0x68>)
 8001290:	2201      	movs	r2, #1
 8001292:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_DFSDM1_Init+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_DFSDM1_Init+0x68>)
 800129c:	2202      	movs	r2, #2
 800129e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012bc:	2204      	movs	r2, #4
 80012be:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_DFSDM1_Init+0x68>)
 80012da:	f001 ff9b 	bl	8003214 <HAL_DFSDM_ChannelInit>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80012e4:	f000 ffaa 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200002f8 	.word	0x200002f8
 80012f0:	40016020 	.word	0x40016020

080012f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_I2C2_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_I2C2_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_I2C2_Init+0x74>)
 8001300:	f640 6214 	movw	r2, #3604	; 0xe14
 8001304:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_I2C2_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_I2C2_Init+0x74>)
 800130e:	2201      	movs	r2, #1
 8001310:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_I2C2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_I2C2_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_I2C2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_I2C2_Init+0x74>)
 8001332:	f002 fba3 	bl	8003a7c <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 ff7e 	bl	800223c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	4809      	ldr	r0, [pc, #36]	; (8001368 <MX_I2C2_Init+0x74>)
 8001344:	f003 f94a 	bl	80045dc <HAL_I2CEx_ConfigAnalogFilter>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800134e:	f000 ff75 	bl	800223c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_I2C2_Init+0x74>)
 8001356:	f003 f98c 	bl	8004672 <HAL_I2CEx_ConfigDigitalFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 ff6c 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000330 	.word	0x20000330
 800136c:	40005800 	.word	0x40005800

08001370 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <MX_QUADSPI_Init+0x48>)
 8001378:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800137c:	2202      	movs	r2, #2
 800137e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001382:	2204      	movs	r2, #4
 8001384:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001388:	2210      	movs	r2, #16
 800138a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800138e:	2217      	movs	r2, #23
 8001390:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_QUADSPI_Init+0x44>)
 80013a0:	f003 fb80 	bl	8004aa4 <HAL_QSPI_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80013aa:	f000 ff47 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000384 	.word	0x20000384
 80013b8:	a0001000 	.word	0xa0001000

080013bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <MX_RTC_Init+0xb0>)
 80013d6:	4a26      	ldr	r2, [pc, #152]	; (8001470 <MX_RTC_Init+0xb4>)
 80013d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_RTC_Init+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_RTC_Init+0xb0>)
 80013e2:	227f      	movs	r2, #127	; 0x7f
 80013e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_RTC_Init+0xb0>)
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_RTC_Init+0xb0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_RTC_Init+0xb0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_RTC_Init+0xb0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_RTC_Init+0xb0>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <MX_RTC_Init+0xb0>)
 8001406:	f004 fed5 	bl	80061b4 <HAL_RTC_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001410:	f000 ff14 	bl	800223c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001414:	2312      	movs	r3, #18
 8001416:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x49;
 8001418:	2349      	movs	r3, #73	; 0x49
 800141a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 800141c:	2350      	movs	r3, #80	; 0x50
 800141e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2201      	movs	r2, #1
 800142c:	4619      	mov	r1, r3
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <MX_RTC_Init+0xb0>)
 8001430:	f004 ff48 	bl	80062c4 <HAL_RTC_SetTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800143a:	f000 feff 	bl	800223c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800143e:	2303      	movs	r3, #3
 8001440:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001442:	2301      	movs	r3, #1
 8001444:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 8001446:	2303      	movs	r3, #3
 8001448:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 800144a:	2324      	movs	r3, #36	; 0x24
 800144c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_RTC_Init+0xb0>)
 8001456:	f005 f82e 	bl	80064b6 <HAL_RTC_SetDate>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001460:	f000 feec 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200003c8 	.word	0x200003c8
 8001470:	40002800 	.word	0x40002800

08001474 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_SPI3_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_SPI3_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_SPI3_Init+0x74>)
 8001480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001484:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_SPI3_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_SPI3_Init+0x74>)
 800148e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001492:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_SPI3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_SPI3_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_SPI3_Init+0x74>)
 80014d4:	f005 f994 	bl	8006800 <HAL_SPI_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014de:	f000 fead 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200003ec 	.word	0x200003ec
 80014ec:	40003c00 	.word	0x40003c00

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_USART1_UART_Init+0x58>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_USART1_UART_Init+0x5c>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_USART1_UART_Init+0x58>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001534:	f006 fc99 	bl	8007e6a <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 fe7d 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000450 	.word	0x20000450
 800154c:	40013800 	.word	0x40013800

08001550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART3_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001594:	f006 fc69 	bl	8007e6a <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800159e:	f000 fe4d 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200004d8 	.word	0x200004d8
 80015ac:	40004800 	.word	0x40004800

080015b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015be:	2206      	movs	r2, #6
 80015c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f4:	f003 f889 	bl	800470a <HAL_PCD_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 fe1d 	bl	800223c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000560 	.word	0x20000560

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	4bbd      	ldr	r3, [pc, #756]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4abc      	ldr	r2, [pc, #752]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4bba      	ldr	r3, [pc, #744]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4bb7      	ldr	r3, [pc, #732]	; (8001918 <MX_GPIO_Init+0x30c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4ab6      	ldr	r2, [pc, #728]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4bb4      	ldr	r3, [pc, #720]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4bb1      	ldr	r3, [pc, #708]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4ab0      	ldr	r2, [pc, #704]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4bae      	ldr	r3, [pc, #696]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4bab      	ldr	r3, [pc, #684]	; (8001918 <MX_GPIO_Init+0x30c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4aaa      	ldr	r2, [pc, #680]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4ba8      	ldr	r3, [pc, #672]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4aa4      	ldr	r2, [pc, #656]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4ba2      	ldr	r3, [pc, #648]	; (8001918 <MX_GPIO_Init+0x30c>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80016a0:	489e      	ldr	r0, [pc, #632]	; (800191c <MX_GPIO_Init+0x310>)
 80016a2:	f002 f9bb 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f248 1104 	movw	r1, #33028	; 0x8104
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f002 f9b4 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016b4:	2200      	movs	r2, #0
 80016b6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80016ba:	4899      	ldr	r0, [pc, #612]	; (8001920 <MX_GPIO_Init+0x314>)
 80016bc:	f002 f9ae 	bl	8003a1c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f241 0181 	movw	r1, #4225	; 0x1081
 80016c6:	4897      	ldr	r0, [pc, #604]	; (8001924 <MX_GPIO_Init+0x318>)
 80016c8:	f002 f9a8 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4894      	ldr	r0, [pc, #592]	; (8001924 <MX_GPIO_Init+0x318>)
 80016d4:	f002 f9a2 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80016de:	4892      	ldr	r0, [pc, #584]	; (8001928 <MX_GPIO_Init+0x31c>)
 80016e0:	f002 f99c 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2120      	movs	r1, #32
 80016e8:	488d      	ldr	r0, [pc, #564]	; (8001920 <MX_GPIO_Init+0x314>)
 80016ea:	f002 f997 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2101      	movs	r1, #1
 80016f2:	488a      	ldr	r0, [pc, #552]	; (800191c <MX_GPIO_Init+0x310>)
 80016f4:	f002 f992 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016f8:	f240 1315 	movw	r3, #277	; 0x115
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4882      	ldr	r0, [pc, #520]	; (800191c <MX_GPIO_Init+0x310>)
 8001712:	f001 fecd 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001716:	236a      	movs	r3, #106	; 0x6a
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	487c      	ldr	r0, [pc, #496]	; (800191c <MX_GPIO_Init+0x310>)
 800172c:	f001 fec0 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4878      	ldr	r0, [pc, #480]	; (8001928 <MX_GPIO_Init+0x31c>)
 8001748:	f001 feb2 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800174c:	233f      	movs	r3, #63	; 0x3f
 800174e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001750:	230b      	movs	r3, #11
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4872      	ldr	r0, [pc, #456]	; (8001928 <MX_GPIO_Init+0x31c>)
 8001760:	f001 fea6 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001764:	2303      	movs	r3, #3
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001774:	2308      	movs	r3, #8
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f001 fe95 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001786:	f248 1304 	movw	r3, #33028	; 0x8104
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f001 fe85 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80017a6:	2308      	movs	r3, #8
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f001 fe74 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80017c8:	2310      	movs	r3, #16
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017cc:	230b      	movs	r3, #11
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 fe67 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80017e2:	23e0      	movs	r3, #224	; 0xe0
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f2:	2305      	movs	r3, #5
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f001 fe56 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001804:	2301      	movs	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4841      	ldr	r0, [pc, #260]	; (8001920 <MX_GPIO_Init+0x314>)
 800181a:	f001 fe49 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001822:	230b      	movs	r3, #11
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	483b      	ldr	r0, [pc, #236]	; (8001920 <MX_GPIO_Init+0x314>)
 8001832:	f001 fe3d 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001836:	f24f 0334 	movw	r3, #61492	; 0xf034
 800183a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4834      	ldr	r0, [pc, #208]	; (8001920 <MX_GPIO_Init+0x314>)
 8001850:	f001 fe2e 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001854:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001858:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	482e      	ldr	r0, [pc, #184]	; (8001924 <MX_GPIO_Init+0x318>)
 800186c:	f001 fe20 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001870:	f243 0381 	movw	r3, #12417	; 0x3081
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4826      	ldr	r0, [pc, #152]	; (8001924 <MX_GPIO_Init+0x318>)
 800188a:	f001 fe11 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800188e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4820      	ldr	r0, [pc, #128]	; (8001928 <MX_GPIO_Init+0x31c>)
 80018a8:	f001 fe02 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <MX_GPIO_Init+0x31c>)
 80018c4:	f001 fdf4 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80018c8:	2302      	movs	r3, #2
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d8:	2305      	movs	r3, #5
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <MX_GPIO_Init+0x318>)
 80018e4:	f001 fde4 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018e8:	2378      	movs	r3, #120	; 0x78
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f8:	2307      	movs	r3, #7
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <MX_GPIO_Init+0x318>)
 8001904:	f001 fdd4 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	e00a      	b.n	800192c <MX_GPIO_Init+0x320>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	48001000 	.word	0x48001000
 8001920:	48000400 	.word	0x48000400
 8001924:	48000c00 	.word	0x48000c00
 8001928:	48000800 	.word	0x48000800
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001932:	2304      	movs	r3, #4
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	480f      	ldr	r0, [pc, #60]	; (800197c <MX_GPIO_Init+0x370>)
 800193e:	f001 fdb7 	bl	80034b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2105      	movs	r1, #5
 8001946:	2007      	movs	r0, #7
 8001948:	f001 fc1f 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800194c:	2007      	movs	r0, #7
 800194e:	f001 fc38 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2105      	movs	r1, #5
 8001956:	2017      	movs	r0, #23
 8001958:	f001 fc17 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800195c:	2017      	movs	r0, #23
 800195e:	f001 fc30 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2105      	movs	r1, #5
 8001966:	2028      	movs	r0, #40	; 0x28
 8001968:	f001 fc0f 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800196c:	2028      	movs	r0, #40	; 0x28
 800196e:	f001 fc28 	bl	80031c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	48000400 	.word	0x48000400

08001980 <LSM6DSL_AccInt_Drdy>:

/* USER CODE BEGIN 4 */
void LSM6DSL_AccInt_Drdy()						/* InicializaciÃ³n del acelerÃ³metro */
	{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

		uint8_t ctrl = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	71fb      	strb	r3, [r7, #7]
		uint8_t tmp;
		/* Read DRDY_PULSE_CFG_G value  (LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);*/
		drdyPulsedCfg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);     /*Buscar en archivo lsm6dsl.h*/
 800198a:	210b      	movs	r1, #11
 800198c:	20d4      	movs	r0, #212	; 0xd4
 800198e:	f007 fc69 	bl	8009264 <SENSOR_IO_Read>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 8001998:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
		drdyPulsedCfg |= 0b10000000;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 80019a6:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, drdyPulsedCfg);
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <LSM6DSL_AccInt_Drdy+0x98>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	210b      	movs	r1, #11
 80019b0:	20d4      	movs	r0, #212	; 0xd4
 80019b2:	f007 fc3d 	bl	8009230 <SENSOR_IO_Write>

		/* Read INT1_CTRL value */
		ctrlDrdy = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 80019b6:	210d      	movs	r1, #13
 80019b8:	20d4      	movs	r0, #212	; 0xd4
 80019ba:	f007 fc53 	bl	8009264 <SENSOR_IO_Read>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019c4:	701a      	strb	r2, [r3, #0]

		/* Set Drdy interruption to INT1  */
	    ctrlDrdy |= 0b00000011;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	f043 0303 	orr.w	r3, r3, #3
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019d2:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, ctrlDrdy);
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <LSM6DSL_AccInt_Drdy+0x9c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	210d      	movs	r1, #13
 80019dc:	20d4      	movs	r0, #212	; 0xd4
 80019de:	f007 fc27 	bl	8009230 <SENSOR_IO_Write>

		/* Read MASTER_CONFIG value */
		ctrlMaster = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 80019e2:	211a      	movs	r1, #26
 80019e4:	20d4      	movs	r0, #212	; 0xd4
 80019e6:	f007 fc3d 	bl	8009264 <SENSOR_IO_Read>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 80019f0:	701a      	strb	r2, [r3, #0]

		ctrlMaster |= 0b00000011;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f043 0303 	orr.w	r3, r3, #3
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 80019fe:	701a      	strb	r2, [r3, #0]

		/* write back control register */
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, ctrlMaster);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <LSM6DSL_AccInt_Drdy+0xa0>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	211a      	movs	r1, #26
 8001a08:	20d4      	movs	r0, #212	; 0xd4
 8001a0a:	f007 fc11 	bl	8009230 <SENSOR_IO_Write>
	}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000afc 	.word	0x20000afc
 8001a1c:	20000afd 	.word	0x20000afd
 8001a20:	20000afe 	.word	0x20000afe

08001a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f00c fa8c 	bl	800df4a <osDelay>
 8001a32:	e7fb      	b.n	8001a2c <StartDefaultTask+0x8>

08001a34 <wifi_start>:
* @param argument: Not used
* @retval None
*/

static int wifi_start(void)
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af04      	add	r7, sp, #16
  printf("Wifi Start Function. \n\r");
 8001a3a:	4819      	ldr	r0, [pc, #100]	; (8001aa0 <wifi_start+0x6c>)
 8001a3c:	f010 f84e 	bl	8011adc <iprintf>
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001a40:	f009 facc 	bl	800afdc <WIFI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d123      	bne.n	8001a92 <wifi_start+0x5e>
  {
    printf("ES-WIFI Initialized.\n\r");
 8001a4a:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <wifi_start+0x70>)
 8001a4c:	f010 f846 	bl	8011adc <iprintf>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4618      	mov	r0, r3
 8001a54:	f009 fb10 	bl	800b078 <WIFI_GetMAC_Address>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d113      	bne.n	8001a86 <wifi_start+0x52>
    {
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
               MAC_Addr[0],
 8001a5e:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a60:	4618      	mov	r0, r3
               MAC_Addr[1],
 8001a62:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a64:	461c      	mov	r4, r3
               MAC_Addr[2],
 8001a66:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a68:	461d      	mov	r5, r3
               MAC_Addr[3],
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8001a6c:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8001a6e:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n\r",
 8001a70:	9102      	str	r1, [sp, #8]
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	462b      	mov	r3, r5
 8001a78:	4622      	mov	r2, r4
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <wifi_start+0x74>)
 8001a7e:	f010 f82d 	bl	8011adc <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e007      	b.n	8001a96 <wifi_start+0x62>
      printf("> ERROR : CANNOT get MAC address.\n\r");
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <wifi_start+0x78>)
 8001a88:	f010 f828 	bl	8011adc <iprintf>
      return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a90:	e001      	b.n	8001a96 <wifi_start+0x62>
    return -1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	0801568c 	.word	0x0801568c
 8001aa4:	080156a4 	.word	0x080156a4
 8001aa8:	080156bc 	.word	0x080156bc
 8001aac:	080156fc 	.word	0x080156fc

08001ab0 <MQTTTask>:


void MQTTTask(void)
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	b0b5      	sub	sp, #212	; 0xd4
 8001ab4:	af06      	add	r7, sp, #24
const uint32_t ulMaxPublishCount = 5UL;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
NetworkContext_t xNetworkContext = { 0 };
 8001abc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
float ftemp;
float fhum;
char payLoad[64];
 /* Attempt to connect to the MQTT broker. The socket is returned in
 * the network context structure. */
 xNetworkStatus = prvConnectToServer( &xNetworkContext );
 8001ac6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fbbc 	bl	8002248 <prvConnectToServer>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 configASSERT( xNetworkStatus == PLAINTEXT_TRANSPORT_SUCCESS );
 8001ad6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d00b      	beq.n	8001af6 <MQTTTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae2:	f383 8811 	msr	BASEPRI, r3
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	f3bf 8f4f 	dsb	sy
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001af2:	bf00      	nop
 8001af4:	e7fe      	b.n	8001af4 <MQTTTask+0x44>
 //LOG(("Trying to create an MQTT connection\n"));
 prvCreateMQTTConnectionWithBroker( &xMQTTContext, &xNetworkContext );
 8001af6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001afa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fbeb 	bl	80022dc <prvCreateMQTTConnectionWithBroker>
 for( ; ; )
 {
   /* Publicar cada 5 segundos */
   osDelay(5000);
 8001b06:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b0a:	f00c fa1e 	bl	800df4a <osDelay>
   ftemp=BSP_TSENSOR_ReadTemp();
 8001b0e:	f007 fc9f 	bl	8009450 <BSP_TSENSOR_ReadTemp>
 8001b12:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
   fhum=BSP_HSENSOR_ReadHumidity();
 8001b16:	f007 fc71 	bl	80093fc <BSP_HSENSOR_ReadHumidity>
 8001b1a:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8

   sprintf(payLoad,"{\"temperatura\":%02.2f, \"humedad\":%02.2f, \"acel_x\":%d, \"acel_y\":%d, \"acel_z\":%d}",ftemp, fhum, acel_x,acel_y,acel_z);
 8001b1e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001b22:	f7fe fd11 	bl	8000548 <__aeabi_f2d>
 8001b26:	4604      	mov	r4, r0
 8001b28:	460d      	mov	r5, r1
 8001b2a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001b2e:	f7fe fd0b 	bl	8000548 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4910      	ldr	r1, [pc, #64]	; (8001b78 <MQTTTask+0xc8>)
 8001b38:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b3c:	460e      	mov	r6, r1
 8001b3e:	490f      	ldr	r1, [pc, #60]	; (8001b7c <MQTTTask+0xcc>)
 8001b40:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b44:	6079      	str	r1, [r7, #4]
 8001b46:	490e      	ldr	r1, [pc, #56]	; (8001b80 <MQTTTask+0xd0>)
 8001b48:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b4c:	f107 000c 	add.w	r0, r7, #12
 8001b50:	9104      	str	r1, [sp, #16]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	9103      	str	r1, [sp, #12]
 8001b56:	9602      	str	r6, [sp, #8]
 8001b58:	e9cd 2300 	strd	r2, r3, [sp]
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	462b      	mov	r3, r5
 8001b60:	4908      	ldr	r1, [pc, #32]	; (8001b84 <MQTTTask+0xd4>)
 8001b62:	f010 f85d 	bl	8011c20 <siprintf>
   prvMQTTPublishToTopic(&xMQTTContext,pcBaseTopic,payLoad);
 8001b66:	f107 020c 	add.w	r2, r7, #12
 8001b6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b6e:	4906      	ldr	r1, [pc, #24]	; (8001b88 <MQTTTask+0xd8>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fc2d 	bl	80023d0 <prvMQTTPublishToTopic>
   osDelay(5000);
 8001b76:	e7c6      	b.n	8001b06 <MQTTTask+0x56>
 8001b78:	20000ab6 	.word	0x20000ab6
 8001b7c:	20000ab8 	.word	0x20000ab8
 8001b80:	20000aba 	.word	0x20000aba
 8001b84:	08015720 	.word	0x08015720
 8001b88:	08015770 	.word	0x08015770

08001b8c <wifi_connect>:

 }
}

int wifi_connect(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af02      	add	r7, sp, #8
    uint8_t MAX_tries = 3;
 8001b92:	2303      	movs	r3, #3
 8001b94:	717b      	strb	r3, [r7, #5]
    uint8_t return_value=-1;
 8001b96:	23ff      	movs	r3, #255	; 0xff
 8001b98:	71fb      	strb	r3, [r7, #7]
    uint8_t try=1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001b9e:	e044      	b.n	8001c2a <wifi_connect+0x9e>
	  printf("Wifi connect function.. try %d/%d\n\r", try,MAX_tries);
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	797a      	ldrb	r2, [r7, #5]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4827      	ldr	r0, [pc, #156]	; (8001c44 <wifi_connect+0xb8>)
 8001ba8:	f00f ff98 	bl	8011adc <iprintf>
	  wifi_start();
 8001bac:	f7ff ff42 	bl	8001a34 <wifi_start>
	  printf("Connecting to %s , %s.\n\r",SSID,PASSWORD);
 8001bb0:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <wifi_connect+0xbc>)
 8001bb2:	4926      	ldr	r1, [pc, #152]	; (8001c4c <wifi_connect+0xc0>)
 8001bb4:	4826      	ldr	r0, [pc, #152]	; (8001c50 <wifi_connect+0xc4>)
 8001bb6:	f00f ff91 	bl	8011adc <iprintf>
	  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4922      	ldr	r1, [pc, #136]	; (8001c48 <wifi_connect+0xbc>)
 8001bbe:	4823      	ldr	r0, [pc, #140]	; (8001c4c <wifi_connect+0xc0>)
 8001bc0:	f009 fa38 	bl	800b034 <WIFI_Connect>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d127      	bne.n	8001c1a <wifi_connect+0x8e>
	  {
		if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001bca:	4822      	ldr	r0, [pc, #136]	; (8001c54 <wifi_connect+0xc8>)
 8001bcc:	f009 fa6a 	bl	800b0a4 <WIFI_GetIP_Address>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d11b      	bne.n	8001c0e <wifi_connect+0x82>
		{
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
				   IP_Addr[0],
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <wifi_connect+0xc8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001bda:	4619      	mov	r1, r3
				   IP_Addr[1],
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <wifi_connect+0xc8>)
 8001bde:	785b      	ldrb	r3, [r3, #1]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001be0:	461a      	mov	r2, r3
				   IP_Addr[2],
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <wifi_connect+0xc8>)
 8001be4:	789b      	ldrb	r3, [r3, #2]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001be6:	4618      	mov	r0, r3
				   IP_Addr[3]);
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <wifi_connect+0xc8>)
 8001bea:	78db      	ldrb	r3, [r3, #3]
		  printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d.\n\r",
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4819      	ldr	r0, [pc, #100]	; (8001c58 <wifi_connect+0xcc>)
 8001bf2:	f00f ff73 	bl	8011adc <iprintf>
		  return_value=0; //TODO CORRECTO
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71fb      	strb	r3, [r7, #7]
		  try=MAX_tries+1;
 8001bfa:	797b      	ldrb	r3, [r7, #5]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	71bb      	strb	r3, [r7, #6]
		  //osThreadFlagsSet(wifiStartHandle, 0x0001U);

		  // Activa la tarea de aceleracion
		  osThreadFlagsSet(acel_taskHandle, 0x000002U);
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <wifi_connect+0xd0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f00c f8d0 	bl	800ddac <osThreadFlagsSet>
 8001c0c:	e00a      	b.n	8001c24 <wifi_connect+0x98>
		}
		else
		{
		  printf("ERROR : es-wifi module CANNOT get IP address\n\r");
 8001c0e:	4814      	ldr	r0, [pc, #80]	; (8001c60 <wifi_connect+0xd4>)
 8001c10:	f00f ff64 	bl	8011adc <iprintf>
		  return_value= -1;
 8001c14:	23ff      	movs	r3, #255	; 0xff
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	e004      	b.n	8001c24 <wifi_connect+0x98>
		}
	  }
	  else
	  {
		  printf("ERROR : es-wifi module NOT connected\n\r");
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <wifi_connect+0xd8>)
 8001c1c:	f00f ff5e 	bl	8011adc <iprintf>
		  return_value= -1;
 8001c20:	23ff      	movs	r3, #255	; 0xff
 8001c22:	71fb      	strb	r3, [r7, #7]
	  }
	  try=try+1;
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	3301      	adds	r3, #1
 8001c28:	71bb      	strb	r3, [r7, #6]
	while (try<=MAX_tries || return_value!=0){
 8001c2a:	79ba      	ldrb	r2, [r7, #6]
 8001c2c:	797b      	ldrb	r3, [r7, #5]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d9b6      	bls.n	8001ba0 <wifi_connect+0x14>
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1b3      	bne.n	8001ba0 <wifi_connect+0x14>
	}
  return return_value;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0801578c 	.word	0x0801578c
 8001c48:	080157b0 	.word	0x080157b0
 8001c4c:	080157b4 	.word	0x080157b4
 8001c50:	080157c0 	.word	0x080157c0
 8001c54:	20000a78 	.word	0x20000a78
 8001c58:	080157dc 	.word	0x080157dc
 8001c5c:	20000a74 	.word	0x20000a74
 8001c60:	08015818 	.word	0x08015818
 8001c64:	08015848 	.word	0x08015848

08001c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_EXTI_Callback+0x18>
 8001c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_EXTI_Callback+0x1e>
    case (GPIO_PIN_11):
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
      break;
    default:
    {
      break;
 8001c7e:	e009      	b.n	8001c94 <HAL_GPIO_EXTI_Callback+0x2c>
      SPI_WIFI_ISR();
 8001c80:	f009 f99c 	bl	800afbc <SPI_WIFI_ISR>
      break;
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_EXTI_Callback+0x2c>
      osThreadFlagsSet(acel_taskHandle, 0x000001U);
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x34>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f00c f88d 	bl	800ddac <osThreadFlagsSet>
      break;
 8001c92:	bf00      	nop
    }
  }
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000a74 	.word	0x20000a74

08001ca0 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <SPI3_IRQHandler+0x10>)
 8001ca6:	f005 fbb7 	bl	8007418 <HAL_SPI_IRQHandler>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20001008 	.word	0x20001008

08001cb4 <wifiStartTask>:

/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask */
  /* Infinite loop */
	wifi_connect();
 8001cbc:	f7ff ff66 	bl	8001b8c <wifi_connect>
  for(;;)
  {
	MQTTTask();
 8001cc0:	f7ff fef6 	bl	8001ab0 <MQTTTask>
    osDelay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f00c f940 	bl	800df4a <osDelay>
	MQTTTask();
 8001cca:	e7f9      	b.n	8001cc0 <wifiStartTask+0xc>

08001ccc <acel_task_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_acel_task_function */
void acel_task_function(void *argument)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af04      	add	r7, sp, #16
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN acel_task_function */
    uint32_t ret_flag = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  ret_flag = osThreadFlagsWait(0x00000002U, osFlagsWaitAny,osWaitForever);
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f00c f8b2 	bl	800de48 <osThreadFlagsWait>
 8001ce4:	60f8      	str	r0, [r7, #12]
  printf("Llamada desde la tarea de wifi.\n\r");
 8001ce6:	48a7      	ldr	r0, [pc, #668]	; (8001f84 <acel_task_function+0x2b8>)
 8001ce8:	f00f fef8 	bl	8011adc <iprintf>
  // Infinite loop //
  for(;;)
  {
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f00c f8a8 	bl	800de48 <osThreadFlagsWait>
 8001cf8:	60f8      	str	r0, [r7, #12]
      if (ret_flag == 1U){
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 828f 	bne.w	8002220 <acel_task_function+0x554>
        BSP_ACCELERO_AccGetXYZ(pDataAcc);                            // Toma de Aceleración /
 8001d02:	48a1      	ldr	r0, [pc, #644]	; (8001f88 <acel_task_function+0x2bc>)
 8001d04:	f007 fb42 	bl	800938c <BSP_ACCELERO_AccGetXYZ>
        HAL_RTC_GetTime(&hrtc, &varTime, RTC_FORMAT_BIN);            // Toma de timestamp /
 8001d08:	2200      	movs	r2, #0
 8001d0a:	49a0      	ldr	r1, [pc, #640]	; (8001f8c <acel_task_function+0x2c0>)
 8001d0c:	48a0      	ldr	r0, [pc, #640]	; (8001f90 <acel_task_function+0x2c4>)
 8001d0e:	f004 fb76 	bl	80063fe <HAL_RTC_GetTime>
        subsec = (varTime.SecondFraction-varTime.SubSeconds)*1000/varTime.SecondFraction;      /* ms del timestamp */
 8001d12:	4b9e      	ldr	r3, [pc, #632]	; (8001f8c <acel_task_function+0x2c0>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <acel_task_function+0x2c0>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d20:	fb03 f202 	mul.w	r2, r3, r2
 8001d24:	4b99      	ldr	r3, [pc, #612]	; (8001f8c <acel_task_function+0x2c0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b99      	ldr	r3, [pc, #612]	; (8001f94 <acel_task_function+0x2c8>)
 8001d30:	801a      	strh	r2, [r3, #0]
        HAL_RTC_GetDate(&hrtc, &varDate, RTC_FORMAT_BCD);            // Toma de fecha /
 8001d32:	2201      	movs	r2, #1
 8001d34:	4998      	ldr	r1, [pc, #608]	; (8001f98 <acel_task_function+0x2cc>)
 8001d36:	4896      	ldr	r0, [pc, #600]	; (8001f90 <acel_task_function+0x2c4>)
 8001d38:	f004 fc44 	bl	80065c4 <HAL_RTC_GetDate>

        snprintf(str_x,14,"Eje_X = %d, ",pDataAcc[0]);                /* Formateo del mensaje de aceleración del eje X */
 8001d3c:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <acel_task_function+0x2bc>)
 8001d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d42:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <acel_task_function+0x2d0>)
 8001d44:	210e      	movs	r1, #14
 8001d46:	4896      	ldr	r0, [pc, #600]	; (8001fa0 <acel_task_function+0x2d4>)
 8001d48:	f00f ff36 	bl	8011bb8 <sniprintf>
        snprintf(str_y,14,"Eje_Y = %d, ",pDataAcc[1]);
 8001d4c:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <acel_task_function+0x2bc>)
 8001d4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d52:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <acel_task_function+0x2d8>)
 8001d54:	210e      	movs	r1, #14
 8001d56:	4894      	ldr	r0, [pc, #592]	; (8001fa8 <acel_task_function+0x2dc>)
 8001d58:	f00f ff2e 	bl	8011bb8 <sniprintf>
        snprintf(str_z,18,"Eje_Z = %d, \r\n",pDataAcc[2]);
 8001d5c:	4b8a      	ldr	r3, [pc, #552]	; (8001f88 <acel_task_function+0x2bc>)
 8001d5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d62:	4a92      	ldr	r2, [pc, #584]	; (8001fac <acel_task_function+0x2e0>)
 8001d64:	2112      	movs	r1, #18
 8001d66:	4892      	ldr	r0, [pc, #584]	; (8001fb0 <acel_task_function+0x2e4>)
 8001d68:	f00f ff26 	bl	8011bb8 <sniprintf>


        if (subsec <10){
 8001d6c:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <acel_task_function+0x2c8>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d814      	bhi.n	8001d9e <acel_task_function+0xd2>
            snprintf(timestamp,27,"\r\nTimestamp = %d:%d:%d.00%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001d74:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <acel_task_function+0x2c0>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <acel_task_function+0x2c0>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <acel_task_function+0x2c0>)
 8001d82:	789b      	ldrb	r3, [r3, #2]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <acel_task_function+0x2c8>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	9101      	str	r1, [sp, #4]
 8001d8e:	9200      	str	r2, [sp, #0]
 8001d90:	4603      	mov	r3, r0
 8001d92:	4a88      	ldr	r2, [pc, #544]	; (8001fb4 <acel_task_function+0x2e8>)
 8001d94:	211b      	movs	r1, #27
 8001d96:	4888      	ldr	r0, [pc, #544]	; (8001fb8 <acel_task_function+0x2ec>)
 8001d98:	f00f ff0e 	bl	8011bb8 <sniprintf>
 8001d9c:	e030      	b.n	8001e00 <acel_task_function+0x134>

        }
        else if (10<=subsec && subsec <100) {
 8001d9e:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <acel_task_function+0x2c8>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d918      	bls.n	8001dd8 <acel_task_function+0x10c>
 8001da6:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <acel_task_function+0x2c8>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2b63      	cmp	r3, #99	; 0x63
 8001dac:	d814      	bhi.n	8001dd8 <acel_task_function+0x10c>
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.0%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <acel_task_function+0x2c0>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <acel_task_function+0x2c0>)
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <acel_task_function+0x2c0>)
 8001dbc:	789b      	ldrb	r3, [r3, #2]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4b74      	ldr	r3, [pc, #464]	; (8001f94 <acel_task_function+0x2c8>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	9101      	str	r1, [sp, #4]
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a7b      	ldr	r2, [pc, #492]	; (8001fbc <acel_task_function+0x2f0>)
 8001dce:	211c      	movs	r1, #28
 8001dd0:	4879      	ldr	r0, [pc, #484]	; (8001fb8 <acel_task_function+0x2ec>)
 8001dd2:	f00f fef1 	bl	8011bb8 <sniprintf>
 8001dd6:	e013      	b.n	8001e00 <acel_task_function+0x134>

        }
        else{
            snprintf(timestamp,28,"\r\nTimestamp = %d:%d:%d.%d - ",varTime.Hours, varTime.Minutes, varTime.Seconds,subsec);
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <acel_task_function+0x2c0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <acel_task_function+0x2c0>)
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <acel_task_function+0x2c0>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <acel_task_function+0x2c8>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	9101      	str	r1, [sp, #4]
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a72      	ldr	r2, [pc, #456]	; (8001fc0 <acel_task_function+0x2f4>)
 8001df8:	211c      	movs	r1, #28
 8001dfa:	486f      	ldr	r0, [pc, #444]	; (8001fb8 <acel_task_function+0x2ec>)
 8001dfc:	f00f fedc 	bl	8011bb8 <sniprintf>
        }


    	HAL_UART_Transmit(&huart1,(uint8_t *)timestamp,26,1000);		/* TransmisiÃ³n de la informaciÃ³n por UART */
 8001e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e04:	221a      	movs	r2, #26
 8001e06:	496c      	ldr	r1, [pc, #432]	; (8001fb8 <acel_task_function+0x2ec>)
 8001e08:	486e      	ldr	r0, [pc, #440]	; (8001fc4 <acel_task_function+0x2f8>)
 8001e0a:	f006 f87c 	bl	8007f06 <HAL_UART_Transmit>

    	// Se guarda en las variables globales para mandarlo desde la funcion de MQTT
    	acel_x = pDataAcc[0];
 8001e0e:	4b5e      	ldr	r3, [pc, #376]	; (8001f88 <acel_task_function+0x2bc>)
 8001e10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e14:	4b6c      	ldr	r3, [pc, #432]	; (8001fc8 <acel_task_function+0x2fc>)
 8001e16:	801a      	strh	r2, [r3, #0]
    	acel_y = pDataAcc[1];
 8001e18:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <acel_task_function+0x2bc>)
 8001e1a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <acel_task_function+0x300>)
 8001e20:	801a      	strh	r2, [r3, #0]
    	acel_z = pDataAcc[2];
 8001e22:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <acel_task_function+0x2bc>)
 8001e24:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <acel_task_function+0x304>)
 8001e2a:	801a      	strh	r2, [r3, #0]


    	if (pDataAcc[0]>=0 && pDataAcc[0]<10){							/* Eje X */
 8001e2c:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <acel_task_function+0x2bc>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0c      	blt.n	8001e50 <acel_task_function+0x184>
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <acel_task_function+0x2bc>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	dc07      	bgt.n	8001e50 <acel_task_function+0x184>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,10,1000);
 8001e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e44:	220a      	movs	r2, #10
 8001e46:	4956      	ldr	r1, [pc, #344]	; (8001fa0 <acel_task_function+0x2d4>)
 8001e48:	485e      	ldr	r0, [pc, #376]	; (8001fc4 <acel_task_function+0x2f8>)
 8001e4a:	f006 f85c 	bl	8007f06 <HAL_UART_Transmit>
 8001e4e:	e087      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]>=10 && pDataAcc[0]<100){
 8001e50:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <acel_task_function+0x2bc>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	dd0c      	ble.n	8001e74 <acel_task_function+0x1a8>
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <acel_task_function+0x2bc>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	2b63      	cmp	r3, #99	; 0x63
 8001e62:	dc07      	bgt.n	8001e74 <acel_task_function+0x1a8>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,11,1000);
 8001e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e68:	220b      	movs	r2, #11
 8001e6a:	494d      	ldr	r1, [pc, #308]	; (8001fa0 <acel_task_function+0x2d4>)
 8001e6c:	4855      	ldr	r0, [pc, #340]	; (8001fc4 <acel_task_function+0x2f8>)
 8001e6e:	f006 f84a 	bl	8007f06 <HAL_UART_Transmit>
 8001e72:	e075      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]>=100 && pDataAcc[0]<1000){
 8001e74:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <acel_task_function+0x2bc>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	2b63      	cmp	r3, #99	; 0x63
 8001e7c:	dd0d      	ble.n	8001e9a <acel_task_function+0x1ce>
 8001e7e:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <acel_task_function+0x2bc>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e88:	da07      	bge.n	8001e9a <acel_task_function+0x1ce>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,12,1000);
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	220c      	movs	r2, #12
 8001e90:	4943      	ldr	r1, [pc, #268]	; (8001fa0 <acel_task_function+0x2d4>)
 8001e92:	484c      	ldr	r0, [pc, #304]	; (8001fc4 <acel_task_function+0x2f8>)
 8001e94:	f006 f837 	bl	8007f06 <HAL_UART_Transmit>
 8001e98:	e062      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]>=1000 && pDataAcc[0]<10000){
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <acel_task_function+0x2bc>)
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea4:	db0e      	blt.n	8001ec4 <acel_task_function+0x1f8>
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <acel_task_function+0x2bc>)
 8001ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eac:	f242 720f 	movw	r2, #9999	; 0x270f
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	dc07      	bgt.n	8001ec4 <acel_task_function+0x1f8>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,13,1000);
 8001eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb8:	220d      	movs	r2, #13
 8001eba:	4939      	ldr	r1, [pc, #228]	; (8001fa0 <acel_task_function+0x2d4>)
 8001ebc:	4841      	ldr	r0, [pc, #260]	; (8001fc4 <acel_task_function+0x2f8>)
 8001ebe:	f006 f822 	bl	8007f06 <HAL_UART_Transmit>
 8001ec2:	e04d      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]<0 && pDataAcc[0]>-10){
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <acel_task_function+0x2bc>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0d      	bge.n	8001eea <acel_task_function+0x21e>
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <acel_task_function+0x2bc>)
 8001ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed4:	f113 0f09 	cmn.w	r3, #9
 8001ed8:	db07      	blt.n	8001eea <acel_task_function+0x21e>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,11,1000);
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	220b      	movs	r2, #11
 8001ee0:	492f      	ldr	r1, [pc, #188]	; (8001fa0 <acel_task_function+0x2d4>)
 8001ee2:	4838      	ldr	r0, [pc, #224]	; (8001fc4 <acel_task_function+0x2f8>)
 8001ee4:	f006 f80f 	bl	8007f06 <HAL_UART_Transmit>
 8001ee8:	e03a      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]<=-10 && pDataAcc[0]>-100){
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <acel_task_function+0x2bc>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	f113 0f09 	cmn.w	r3, #9
 8001ef4:	da0d      	bge.n	8001f12 <acel_task_function+0x246>
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <acel_task_function+0x2bc>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001f00:	db07      	blt.n	8001f12 <acel_task_function+0x246>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,12,1000);
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	220c      	movs	r2, #12
 8001f08:	4925      	ldr	r1, [pc, #148]	; (8001fa0 <acel_task_function+0x2d4>)
 8001f0a:	482e      	ldr	r0, [pc, #184]	; (8001fc4 <acel_task_function+0x2f8>)
 8001f0c:	f005 fffb 	bl	8007f06 <HAL_UART_Transmit>
 8001f10:	e026      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]<=-100 && pDataAcc[0]>-1000){
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <acel_task_function+0x2bc>)
 8001f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f18:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001f1c:	da0d      	bge.n	8001f3a <acel_task_function+0x26e>
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <acel_task_function+0x2bc>)
 8001f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f24:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001f28:	dd07      	ble.n	8001f3a <acel_task_function+0x26e>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,13,1000);
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	220d      	movs	r2, #13
 8001f30:	491b      	ldr	r1, [pc, #108]	; (8001fa0 <acel_task_function+0x2d4>)
 8001f32:	4824      	ldr	r0, [pc, #144]	; (8001fc4 <acel_task_function+0x2f8>)
 8001f34:	f005 ffe7 	bl	8007f06 <HAL_UART_Transmit>
 8001f38:	e012      	b.n	8001f60 <acel_task_function+0x294>
    	}
    	else if (pDataAcc[0]<=-1000 && pDataAcc[0]>-10000){
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <acel_task_function+0x2bc>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001f44:	dc0c      	bgt.n	8001f60 <acel_task_function+0x294>
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <acel_task_function+0x2bc>)
 8001f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <acel_task_function+0x308>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	db06      	blt.n	8001f60 <acel_task_function+0x294>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_x,14,1000);
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	220e      	movs	r2, #14
 8001f58:	4911      	ldr	r1, [pc, #68]	; (8001fa0 <acel_task_function+0x2d4>)
 8001f5a:	481a      	ldr	r0, [pc, #104]	; (8001fc4 <acel_task_function+0x2f8>)
 8001f5c:	f005 ffd3 	bl	8007f06 <HAL_UART_Transmit>
    	}


    	if (pDataAcc[1]>=0 && pDataAcc[1]<10){						/* Eje Y */
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <acel_task_function+0x2bc>)
 8001f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db36      	blt.n	8001fd8 <acel_task_function+0x30c>
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <acel_task_function+0x2bc>)
 8001f6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	dc31      	bgt.n	8001fd8 <acel_task_function+0x30c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,10,1000);
 8001f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f78:	220a      	movs	r2, #10
 8001f7a:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <acel_task_function+0x2dc>)
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <acel_task_function+0x2f8>)
 8001f7e:	f005 ffc2 	bl	8007f06 <HAL_UART_Transmit>
 8001f82:	e0b1      	b.n	80020e8 <acel_task_function+0x41c>
 8001f84:	08015870 	.word	0x08015870
 8001f88:	20000a7c 	.word	0x20000a7c
 8001f8c:	20000ae4 	.word	0x20000ae4
 8001f90:	200003c8 	.word	0x200003c8
 8001f94:	20000ae0 	.word	0x20000ae0
 8001f98:	20000af8 	.word	0x20000af8
 8001f9c:	08015894 	.word	0x08015894
 8001fa0:	20000a84 	.word	0x20000a84
 8001fa4:	080158a4 	.word	0x080158a4
 8001fa8:	20000a94 	.word	0x20000a94
 8001fac:	080158b4 	.word	0x080158b4
 8001fb0:	20000aa4 	.word	0x20000aa4
 8001fb4:	080158c4 	.word	0x080158c4
 8001fb8:	20000abc 	.word	0x20000abc
 8001fbc:	080158e4 	.word	0x080158e4
 8001fc0:	08015904 	.word	0x08015904
 8001fc4:	20000450 	.word	0x20000450
 8001fc8:	20000ab6 	.word	0x20000ab6
 8001fcc:	20000ab8 	.word	0x20000ab8
 8001fd0:	20000aba 	.word	0x20000aba
 8001fd4:	ffffd8f1 	.word	0xffffd8f1
    	}
    	else if (pDataAcc[1]>=10 && pDataAcc[1]<100){
 8001fd8:	4b93      	ldr	r3, [pc, #588]	; (8002228 <acel_task_function+0x55c>)
 8001fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	dd0c      	ble.n	8001ffc <acel_task_function+0x330>
 8001fe2:	4b91      	ldr	r3, [pc, #580]	; (8002228 <acel_task_function+0x55c>)
 8001fe4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fe8:	2b63      	cmp	r3, #99	; 0x63
 8001fea:	dc07      	bgt.n	8001ffc <acel_task_function+0x330>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,11,1000);
 8001fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff0:	220b      	movs	r2, #11
 8001ff2:	498e      	ldr	r1, [pc, #568]	; (800222c <acel_task_function+0x560>)
 8001ff4:	488e      	ldr	r0, [pc, #568]	; (8002230 <acel_task_function+0x564>)
 8001ff6:	f005 ff86 	bl	8007f06 <HAL_UART_Transmit>
 8001ffa:	e075      	b.n	80020e8 <acel_task_function+0x41c>
    	}
    	else if (pDataAcc[1]>=100 && pDataAcc[1]<1000){
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <acel_task_function+0x55c>)
 8001ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002002:	2b63      	cmp	r3, #99	; 0x63
 8002004:	dd0d      	ble.n	8002022 <acel_task_function+0x356>
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <acel_task_function+0x55c>)
 8002008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800200c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002010:	da07      	bge.n	8002022 <acel_task_function+0x356>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,12,1000);
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	220c      	movs	r2, #12
 8002018:	4984      	ldr	r1, [pc, #528]	; (800222c <acel_task_function+0x560>)
 800201a:	4885      	ldr	r0, [pc, #532]	; (8002230 <acel_task_function+0x564>)
 800201c:	f005 ff73 	bl	8007f06 <HAL_UART_Transmit>
 8002020:	e062      	b.n	80020e8 <acel_task_function+0x41c>
    	}
    	else if (pDataAcc[1]>=1000 && pDataAcc[1]<10000){
 8002022:	4b81      	ldr	r3, [pc, #516]	; (8002228 <acel_task_function+0x55c>)
 8002024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800202c:	db0e      	blt.n	800204c <acel_task_function+0x380>
 800202e:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <acel_task_function+0x55c>)
 8002030:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002034:	f242 720f 	movw	r2, #9999	; 0x270f
 8002038:	4293      	cmp	r3, r2
 800203a:	dc07      	bgt.n	800204c <acel_task_function+0x380>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,13,1000);
 800203c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002040:	220d      	movs	r2, #13
 8002042:	497a      	ldr	r1, [pc, #488]	; (800222c <acel_task_function+0x560>)
 8002044:	487a      	ldr	r0, [pc, #488]	; (8002230 <acel_task_function+0x564>)
 8002046:	f005 ff5e 	bl	8007f06 <HAL_UART_Transmit>
 800204a:	e04d      	b.n	80020e8 <acel_task_function+0x41c>
    	}
    	else if (pDataAcc[1]<0 && pDataAcc[1]>-10){
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <acel_task_function+0x55c>)
 800204e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0d      	bge.n	8002072 <acel_task_function+0x3a6>
 8002056:	4b74      	ldr	r3, [pc, #464]	; (8002228 <acel_task_function+0x55c>)
 8002058:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800205c:	f113 0f09 	cmn.w	r3, #9
 8002060:	db07      	blt.n	8002072 <acel_task_function+0x3a6>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,11,1000);
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	220b      	movs	r2, #11
 8002068:	4970      	ldr	r1, [pc, #448]	; (800222c <acel_task_function+0x560>)
 800206a:	4871      	ldr	r0, [pc, #452]	; (8002230 <acel_task_function+0x564>)
 800206c:	f005 ff4b 	bl	8007f06 <HAL_UART_Transmit>
 8002070:	e03a      	b.n	80020e8 <acel_task_function+0x41c>
    	}
    	else if (pDataAcc[1]<=-10 && pDataAcc[1]>-100){
 8002072:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <acel_task_function+0x55c>)
 8002074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002078:	f113 0f09 	cmn.w	r3, #9
 800207c:	da0d      	bge.n	800209a <acel_task_function+0x3ce>
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <acel_task_function+0x55c>)
 8002080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002084:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002088:	db07      	blt.n	800209a <acel_task_function+0x3ce>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,12,1000);
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	220c      	movs	r2, #12
 8002090:	4966      	ldr	r1, [pc, #408]	; (800222c <acel_task_function+0x560>)
 8002092:	4867      	ldr	r0, [pc, #412]	; (8002230 <acel_task_function+0x564>)
 8002094:	f005 ff37 	bl	8007f06 <HAL_UART_Transmit>
 8002098:	e026      	b.n	80020e8 <acel_task_function+0x41c>
    	}
    	else if (pDataAcc[1]<=-100 && pDataAcc[1]>-1000){
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <acel_task_function+0x55c>)
 800209c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020a0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80020a4:	da0d      	bge.n	80020c2 <acel_task_function+0x3f6>
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <acel_task_function+0x55c>)
 80020a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020ac:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80020b0:	dd07      	ble.n	80020c2 <acel_task_function+0x3f6>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,13,1000);
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	220d      	movs	r2, #13
 80020b8:	495c      	ldr	r1, [pc, #368]	; (800222c <acel_task_function+0x560>)
 80020ba:	485d      	ldr	r0, [pc, #372]	; (8002230 <acel_task_function+0x564>)
 80020bc:	f005 ff23 	bl	8007f06 <HAL_UART_Transmit>
 80020c0:	e012      	b.n	80020e8 <acel_task_function+0x41c>
    	}
    	else if (pDataAcc[1]<=-1000 && pDataAcc[1]>-10000){
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <acel_task_function+0x55c>)
 80020c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020c8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80020cc:	dc0c      	bgt.n	80020e8 <acel_task_function+0x41c>
 80020ce:	4b56      	ldr	r3, [pc, #344]	; (8002228 <acel_task_function+0x55c>)
 80020d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <acel_task_function+0x568>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	db06      	blt.n	80020e8 <acel_task_function+0x41c>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_y,14,1000);
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	220e      	movs	r2, #14
 80020e0:	4952      	ldr	r1, [pc, #328]	; (800222c <acel_task_function+0x560>)
 80020e2:	4853      	ldr	r0, [pc, #332]	; (8002230 <acel_task_function+0x564>)
 80020e4:	f005 ff0f 	bl	8007f06 <HAL_UART_Transmit>
    	}

    	if (pDataAcc[2]>=0 && pDataAcc[2]<10){						/* Eje Z */
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <acel_task_function+0x55c>)
 80020ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0c      	blt.n	800210c <acel_task_function+0x440>
 80020f2:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <acel_task_function+0x55c>)
 80020f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	dc07      	bgt.n	800210c <acel_task_function+0x440>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,10,1000);
 80020fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002100:	220a      	movs	r2, #10
 8002102:	494d      	ldr	r1, [pc, #308]	; (8002238 <acel_task_function+0x56c>)
 8002104:	484a      	ldr	r0, [pc, #296]	; (8002230 <acel_task_function+0x564>)
 8002106:	f005 fefe 	bl	8007f06 <HAL_UART_Transmit>
 800210a:	e089      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]>=10 && pDataAcc[2]<100){
 800210c:	4b46      	ldr	r3, [pc, #280]	; (8002228 <acel_task_function+0x55c>)
 800210e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002112:	2b09      	cmp	r3, #9
 8002114:	dd0c      	ble.n	8002130 <acel_task_function+0x464>
 8002116:	4b44      	ldr	r3, [pc, #272]	; (8002228 <acel_task_function+0x55c>)
 8002118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800211c:	2b63      	cmp	r3, #99	; 0x63
 800211e:	dc07      	bgt.n	8002130 <acel_task_function+0x464>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,11,1000);
 8002120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002124:	220b      	movs	r2, #11
 8002126:	4944      	ldr	r1, [pc, #272]	; (8002238 <acel_task_function+0x56c>)
 8002128:	4841      	ldr	r0, [pc, #260]	; (8002230 <acel_task_function+0x564>)
 800212a:	f005 feec 	bl	8007f06 <HAL_UART_Transmit>
 800212e:	e077      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]>=100 && pDataAcc[2]<1000){
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <acel_task_function+0x55c>)
 8002132:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002136:	2b63      	cmp	r3, #99	; 0x63
 8002138:	dd0d      	ble.n	8002156 <acel_task_function+0x48a>
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <acel_task_function+0x55c>)
 800213c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002144:	da07      	bge.n	8002156 <acel_task_function+0x48a>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,12,1000);
 8002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214a:	220c      	movs	r2, #12
 800214c:	493a      	ldr	r1, [pc, #232]	; (8002238 <acel_task_function+0x56c>)
 800214e:	4838      	ldr	r0, [pc, #224]	; (8002230 <acel_task_function+0x564>)
 8002150:	f005 fed9 	bl	8007f06 <HAL_UART_Transmit>
 8002154:	e064      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]>=1000 && pDataAcc[2]<10000){
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <acel_task_function+0x55c>)
 8002158:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800215c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002160:	db0e      	blt.n	8002180 <acel_task_function+0x4b4>
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <acel_task_function+0x55c>)
 8002164:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002168:	f242 720f 	movw	r2, #9999	; 0x270f
 800216c:	4293      	cmp	r3, r2
 800216e:	dc07      	bgt.n	8002180 <acel_task_function+0x4b4>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,13,1000);
 8002170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002174:	220d      	movs	r2, #13
 8002176:	4930      	ldr	r1, [pc, #192]	; (8002238 <acel_task_function+0x56c>)
 8002178:	482d      	ldr	r0, [pc, #180]	; (8002230 <acel_task_function+0x564>)
 800217a:	f005 fec4 	bl	8007f06 <HAL_UART_Transmit>
 800217e:	e04f      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]<0 && pDataAcc[2]>-10){
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <acel_task_function+0x55c>)
 8002182:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	da0d      	bge.n	80021a6 <acel_task_function+0x4da>
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <acel_task_function+0x55c>)
 800218c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002190:	f113 0f09 	cmn.w	r3, #9
 8002194:	db07      	blt.n	80021a6 <acel_task_function+0x4da>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,11,1000);
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	220b      	movs	r2, #11
 800219c:	4926      	ldr	r1, [pc, #152]	; (8002238 <acel_task_function+0x56c>)
 800219e:	4824      	ldr	r0, [pc, #144]	; (8002230 <acel_task_function+0x564>)
 80021a0:	f005 feb1 	bl	8007f06 <HAL_UART_Transmit>
 80021a4:	e03c      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]<=-10 && pDataAcc[2]>-100){
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <acel_task_function+0x55c>)
 80021a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021ac:	f113 0f09 	cmn.w	r3, #9
 80021b0:	da0d      	bge.n	80021ce <acel_task_function+0x502>
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <acel_task_function+0x55c>)
 80021b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021b8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80021bc:	db07      	blt.n	80021ce <acel_task_function+0x502>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,12,1000);
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	220c      	movs	r2, #12
 80021c4:	491c      	ldr	r1, [pc, #112]	; (8002238 <acel_task_function+0x56c>)
 80021c6:	481a      	ldr	r0, [pc, #104]	; (8002230 <acel_task_function+0x564>)
 80021c8:	f005 fe9d 	bl	8007f06 <HAL_UART_Transmit>
 80021cc:	e028      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]<=-100 && pDataAcc[2]>-1000){
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <acel_task_function+0x55c>)
 80021d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021d4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80021d8:	da0d      	bge.n	80021f6 <acel_task_function+0x52a>
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <acel_task_function+0x55c>)
 80021dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80021e4:	dd07      	ble.n	80021f6 <acel_task_function+0x52a>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,13,1000);
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	220d      	movs	r2, #13
 80021ec:	4912      	ldr	r1, [pc, #72]	; (8002238 <acel_task_function+0x56c>)
 80021ee:	4810      	ldr	r0, [pc, #64]	; (8002230 <acel_task_function+0x564>)
 80021f0:	f005 fe89 	bl	8007f06 <HAL_UART_Transmit>
 80021f4:	e014      	b.n	8002220 <acel_task_function+0x554>
    	}
    	else if (pDataAcc[2]<=-1000 && pDataAcc[2]>-10000){
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <acel_task_function+0x55c>)
 80021f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021fc:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002200:	dc0d      	bgt.n	800221e <acel_task_function+0x552>
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <acel_task_function+0x55c>)
 8002204:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <acel_task_function+0x568>)
 800220a:	4293      	cmp	r3, r2
 800220c:	db07      	blt.n	800221e <acel_task_function+0x552>
    		HAL_UART_Transmit(&huart1,(uint8_t *)str_z,14,1000);
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	220e      	movs	r2, #14
 8002214:	4908      	ldr	r1, [pc, #32]	; (8002238 <acel_task_function+0x56c>)
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <acel_task_function+0x564>)
 8002218:	f005 fe75 	bl	8007f06 <HAL_UART_Transmit>
 800221c:	e000      	b.n	8002220 <acel_task_function+0x554>
    	}

    	else
    		__NOP();
 800221e:	bf00      	nop
    	}

    osDelay(1);
 8002220:	2001      	movs	r0, #1
 8002222:	f00b fe92 	bl	800df4a <osDelay>
      ret_flag = osThreadFlagsWait(0x00000001U, osFlagsWaitAny,osWaitForever);
 8002226:	e561      	b.n	8001cec <acel_task_function+0x20>
 8002228:	20000a7c 	.word	0x20000a7c
 800222c:	20000a94 	.word	0x20000a94
 8002230:	20000450 	.word	0x20000450
 8002234:	ffffd8f1 	.word	0xffffd8f1
 8002238:	20000aa4 	.word	0x20000aa4

0800223c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
}
 8002242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002244:	e7fe      	b.n	8002244 <Error_Handler+0x8>
	...

08002248 <prvConnectToServer>:
 */
static uint32_t ulGlobalEntryTimeMs;


TransportStatus_t prvConnectToServer( NetworkContext_t * pxNetworkContext )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
   TransportStatus_t xNetworkStatus;
   uint8_t ret;
   uint8_t ipaddr[4]=MQTT_BROKER_ENDPOINT_IP;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <prvConnectToServer+0x80>)
 8002252:	60bb      	str	r3, [r7, #8]

    /* Attempt to connect to MQTT broker. */
    do
    {
        /* Establish a TCP connection with the MQTT broker. */
        LOG( ( "Create a TCP connection to %s:%d.\n",
 8002254:	f240 725b 	movw	r2, #1883	; 0x75b
 8002258:	491c      	ldr	r1, [pc, #112]	; (80022cc <prvConnectToServer+0x84>)
 800225a:	481d      	ldr	r0, [pc, #116]	; (80022d0 <prvConnectToServer+0x88>)
 800225c:	f00f fc3e 	bl	8011adc <iprintf>
                   MQTT_BROKER_ENDPOINT,
                   MQTT_BROKER_PORT ) );
        ret=WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "mqtt", ipaddr , MQTT_BROKER_PORT, 0);
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	2200      	movs	r2, #0
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	f240 725b 	movw	r2, #1883	; 0x75b
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <prvConnectToServer+0x8c>)
 8002270:	2100      	movs	r1, #0
 8002272:	2000      	movs	r0, #0
 8002274:	f008 ff32 	bl	800b0dc <WIFI_OpenClientConnection>
 8002278:	4603      	mov	r3, r0
 800227a:	73bb      	strb	r3, [r7, #14]
		if(ret!=WIFI_STATUS_OK) {
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <prvConnectToServer+0x4e>
			LOG(("Error in opening MQTT connection: %d\n",ret));
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	4619      	mov	r1, r3
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <prvConnectToServer+0x90>)
 8002288:	f00f fc28 	bl	8011adc <iprintf>
			osDelay(pdMS_TO_TICKS(10000));
 800228c:	f242 7010 	movw	r0, #10000	; 0x2710
 8002290:	f00b fe5b 	bl	800df4a <osDelay>
 8002294:	e00f      	b.n	80022b6 <prvConnectToServer+0x6e>
		} else {
	        pxNetworkContext->socket = SOCKET;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
	        pxNetworkContext->socket_open=1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	705a      	strb	r2, [r3, #1]
	        memcpy(pxNetworkContext->ipaddr,ipaddr,4*sizeof(uint8_t));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3302      	adds	r3, #2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	601a      	str	r2, [r3, #0]
	        pxNetworkContext->remote_port=MQTT_BROKER_PORT;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f240 725b 	movw	r2, #1883	; 0x75b
 80022b0:	80da      	strh	r2, [r3, #6]
	        xNetworkStatus = PLAINTEXT_TRANSPORT_SUCCESS;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
		}


    } while( ( xNetworkStatus != PLAINTEXT_TRANSPORT_SUCCESS ) );
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d1cb      	bne.n	8002254 <prvConnectToServer+0xc>

    return PLAINTEXT_TRANSPORT_SUCCESS;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2ea035a9 	.word	0x2ea035a9
 80022cc:	0801594c 	.word	0x0801594c
 80022d0:	08015968 	.word	0x08015968
 80022d4:	0801598c 	.word	0x0801598c
 80022d8:	08015994 	.word	0x08015994

080022dc <prvCreateMQTTConnectionWithBroker>:

void prvCreateMQTTConnectionWithBroker( MQTTContext_t * pxMQTTContext,
                                               NetworkContext_t * pxNetworkContext )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b094      	sub	sp, #80	; 0x50
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    MQTTConnectInfo_t xConnectInfo;
    bool xSessionPresent;
    TransportInterface_t xTransport;

    /* Fill in Transport Interface send and receive function pointers. */
    init_transport_from_socket( pxNetworkContext->socket, 1,
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	7818      	ldrb	r0, [r3, #0]
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	f00b fc25 	bl	800db40 <init_transport_from_socket>
                                     pxNetworkContext,
                                     &xTransport );
    /* Initialize MQTT library. */
    xResult = MQTT_Init( pxMQTTContext,
 80022f6:	f107 010c 	add.w	r1, r7, #12
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <prvCreateMQTTConnectionWithBroker+0xd8>)
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <prvCreateMQTTConnectionWithBroker+0xdc>)
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <prvCreateMQTTConnectionWithBroker+0xe0>)
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f009 fe3e 	bl	800bf84 <MQTT_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                         &xTransport,
                         prvGetTimeMs,
                         prvEventCallback,
                         &xBuffer );

    configASSERT( xResult == MQTTSuccess );
 800230e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <prvCreateMQTTConnectionWithBroker+0x50>
	__asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
}
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <prvCreateMQTTConnectionWithBroker+0x4e>
    LOG(("MQTT initialized\n"));
 800232c:	4824      	ldr	r0, [pc, #144]	; (80023c0 <prvCreateMQTTConnectionWithBroker+0xe4>)
 800232e:	f00f fc3b 	bl	8011ba8 <puts>

    /* Many fields not used in this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xConnectInfo, 0x00, sizeof( xConnectInfo ) );
 8002332:	f107 0320 	add.w	r3, r7, #32
 8002336:	221c      	movs	r2, #28
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f00f fd92 	bl	8011e64 <memset>

    /* Start with a clean session i.e. direct the MQTT broker to discard any
     * previous session data. Also, establishing a connection with clean
     * session will ensure that the broker does not store any data when this
     * client gets disconnected. */
    xConnectInfo.cleanSession = true;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3020 	strb.w	r3, [r7, #32]

    /* The client identifier is used to uniquely identify this MQTT client to
     * the MQTT broker. In a production device the identifier can be something
     * unique, such as a device serial number. */
    xConnectInfo.pClientIdentifier = MQTTCLIENT_IDENTIFIER;
 8002346:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <prvCreateMQTTConnectionWithBroker+0xe8>)
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    xConnectInfo.clientIdentifierLength = ( uint16_t ) strlen(
 800234a:	2317      	movs	r3, #23
 800234c:	853b      	strh	r3, [r7, #40]	; 0x28
                                                  MQTTCLIENT_IDENTIFIER );
    xConnectInfo.pUserName=mqttUserName;
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <prvCreateMQTTConnectionWithBroker+0xec>)
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    xConnectInfo.userNameLength=strlen(mqttUserName);
 8002352:	2323      	movs	r3, #35	; 0x23
 8002354:	863b      	strh	r3, [r7, #48]	; 0x30
    xConnectInfo.pPassword=mqttPass;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
    xConnectInfo.passwordLength=strlen(mqttPass);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fd ff88 	bl	8000270 <strlen>
 8002360:	4603      	mov	r3, r0
 8002362:	b29b      	uxth	r3, r3
 8002364:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Set MQTT keep-alive period. It is the responsibility of the application
     * to ensure that the interval between Control Packets being sent does not
     * exceed the Keep Alive value.  In the absence of sending any other
     * Control Packets, the Client MUST send a PINGREQ Packet. */
    xConnectInfo.keepAliveSeconds = 60U;;
 8002366:	233c      	movs	r3, #60	; 0x3c
 8002368:	847b      	strh	r3, [r7, #34]	; 0x22

    /* Send MQTT CONNECT packet to broker. LWT is not used in this demo, so it
     * is passed as NULL. */
    xResult = MQTT_Connect( pxMQTTContext,
 800236a:	f107 0120 	add.w	r1, r7, #32
 800236e:	f107 031f 	add.w	r3, r7, #31
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002378:	2200      	movs	r2, #0
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f009 fe57 	bl	800c02e <MQTT_Connect>
 8002380:	4603      	mov	r3, r0
 8002382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            &xConnectInfo,
                            NULL,
                            1000U,
                            &xSessionPresent );
    configASSERT( xResult == MQTTSuccess );
 8002386:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <prvCreateMQTTConnectionWithBroker+0xc8>
	__asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
}
 80023a0:	bf00      	nop
 80023a2:	e7fe      	b.n	80023a2 <prvCreateMQTTConnectionWithBroker+0xc6>
    LOG(("MQTT connected to broker\n"));
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <prvCreateMQTTConnectionWithBroker+0xf0>)
 80023a6:	f00f fbff 	bl	8011ba8 <puts>

}
 80023aa:	bf00      	nop
 80023ac:	3748      	adds	r7, #72	; 0x48
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000009c 	.word	0x2000009c
 80023b8:	0800255d 	.word	0x0800255d
 80023bc:	0800252d 	.word	0x0800252d
 80023c0:	080159bc 	.word	0x080159bc
 80023c4:	080159d0 	.word	0x080159d0
 80023c8:	080159e8 	.word	0x080159e8
 80023cc:	08015a0c 	.word	0x08015a0c

080023d0 <prvMQTTPublishToTopic>:

void prvMQTTPublishToTopic( MQTTContext_t * pxMQTTContext, char * topic, void * payload )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    MQTTStatus_t xResult;
    MQTTPublishInfo_t xMQTTPublishInfo;

    /* Some fields are not used by this demo so start with everything at 0. */
    ( void ) memset( ( void * ) &xMQTTPublishInfo, 0x00, sizeof(
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	2214      	movs	r2, #20
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00f fd3d 	bl	8011e64 <memset>
                                                        xMQTTPublishInfo ) );

    /* This demo uses QoS0. */
    xMQTTPublishInfo.qos = MQTTQoS0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	743b      	strb	r3, [r7, #16]
    xMQTTPublishInfo.retain = false;
 80023ee:	2300      	movs	r3, #0
 80023f0:	747b      	strb	r3, [r7, #17]
    xMQTTPublishInfo.pTopicName = topic;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	617b      	str	r3, [r7, #20]
    xMQTTPublishInfo.topicNameLength = ( uint16_t ) strlen( topic );
 80023f6:	68b8      	ldr	r0, [r7, #8]
 80023f8:	f7fd ff3a 	bl	8000270 <strlen>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b29b      	uxth	r3, r3
 8002400:	833b      	strh	r3, [r7, #24]
    xMQTTPublishInfo.pPayload = payload;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	61fb      	str	r3, [r7, #28]
    xMQTTPublishInfo.payloadLength = strlen( payload );
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fd ff32 	bl	8000270 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	623b      	str	r3, [r7, #32]

    /* Send PUBLISH packet. Packet ID is not used for a QoS0 publish. */
    xResult = MQTT_Publish( pxMQTTContext, &xMQTTPublishInfo, 0U );
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	2200      	movs	r2, #0
 8002416:	4619      	mov	r1, r3
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f009 fe80 	bl	800c11e <MQTT_Publish>
 800241e:	4603      	mov	r3, r0
 8002420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(xResult==MQTTSuccess) LOG(("Published to topic %s: %s\n",topic,payload));
 8002424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <prvMQTTPublishToTopic+0x66>
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <prvMQTTPublishToTopic+0x70>)
 8002432:	f00f fb53 	bl	8011adc <iprintf>
    //configASSERT( xResult == MQTTSuccess );
}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	08015a28 	.word	0x08015a28

08002444 <prvMQTTProcessIncomingPublish>:

    } while( xFailedSubscribeToTopic == true  );
}

void prvMQTTProcessIncomingPublish( MQTTPublishInfo_t *pxPublishInfo )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0c2      	sub	sp, #264	; 0x108
 8002448:	af00      	add	r7, sp, #0
 800244a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800244e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002452:	6018      	str	r0, [r3, #0]
	char buffer1[128];
	char buffer2[128];
    const char * pTopicName;

	// pPayload no termina en \0, hay que copiarlo en un buffer para imprimirlo. Lo mismo con pTopicName
	memcpy(buffer1,pxPublishInfo->pPayload,min(127,pxPublishInfo->payloadLength));
 8002454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68d9      	ldr	r1, [r3, #12]
 8002460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b7f      	cmp	r3, #127	; 0x7f
 800246e:	bf28      	it	cs
 8002470:	237f      	movcs	r3, #127	; 0x7f
 8002472:	461a      	mov	r2, r3
 8002474:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002478:	4618      	mov	r0, r3
 800247a:	f00f fe0a 	bl	8012092 <memcpy>
	buffer1[min(1023,pxPublishInfo->payloadLength)]='\0';
 800247e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800248e:	4293      	cmp	r3, r2
 8002490:	bf28      	it	cs
 8002492:	4613      	movcs	r3, r2
 8002494:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002498:	443b      	add	r3, r7
 800249a:	2200      	movs	r2, #0
 800249c:	f803 2c80 	strb.w	r2, [r3, #-128]
	memcpy(buffer2,pxPublishInfo->pTopicName,min(127,pxPublishInfo->topicNameLength));
 80024a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	891b      	ldrh	r3, [r3, #8]
 80024b8:	2b7f      	cmp	r3, #127	; 0x7f
 80024ba:	bf28      	it	cs
 80024bc:	237f      	movcs	r3, #127	; 0x7f
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	4618      	mov	r0, r3
 80024c8:	f00f fde3 	bl	8012092 <memcpy>
	buffer2[min(1023,pxPublishInfo->topicNameLength)]='\0';
 80024cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	891b      	ldrh	r3, [r3, #8]
 80024d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf28      	it	cs
 80024e0:	4613      	movcs	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024ee:	2100      	movs	r1, #0
 80024f0:	5499      	strb	r1, [r3, r2]

	LOG(("Topic \"%s\": publicado \"%s\"\n",buffer2,buffer1));
 80024f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	4619      	mov	r1, r3
 80024fc:	480a      	ldr	r0, [pc, #40]	; (8002528 <prvMQTTProcessIncomingPublish+0xe4>)
 80024fe:	f00f faed 	bl	8011adc <iprintf>

  // Actuar localmente sobre los LEDs o alguna otra cosa
	if(buffer1[0]=='1') BSP_LED_On(LED2);
 8002502:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002506:	2b31      	cmp	r3, #49	; 0x31
 8002508:	d102      	bne.n	8002510 <prvMQTTProcessIncomingPublish+0xcc>
 800250a:	2000      	movs	r0, #0
 800250c:	f006 fcfe 	bl	8008f0c <BSP_LED_On>
	if(buffer1[0]=='0') BSP_LED_Off(LED2);
 8002510:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002514:	2b30      	cmp	r3, #48	; 0x30
 8002516:	d102      	bne.n	800251e <prvMQTTProcessIncomingPublish+0xda>
 8002518:	2000      	movs	r0, #0
 800251a:	f006 fd0d 	bl	8008f38 <BSP_LED_Off>

}
 800251e:	bf00      	nop
 8002520:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	08015a98 	.word	0x08015a98

0800252c <prvGetTimeMs>:

uint32_t prvGetTimeMs( void )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
#define MILLISECONDS_PER_TICK                             ( 1000 / configTICK_RATE_HZ )
    TickType_t xTickCount = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
    uint32_t ulTimeMs = 0UL;
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]

    /* Get the current tick count. */
    xTickCount = xTaskGetTickCount();
 800253a:	f00c fddd 	bl	800f0f8 <xTaskGetTickCount>
 800253e:	6078      	str	r0, [r7, #4]

    /* Convert the ticks to milliseconds. */
    ulTimeMs = ( uint32_t ) xTickCount * MILLISECONDS_PER_TICK;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]

    /* Reduce ulGlobalEntryTimeMs from obtained time so as to always return the
     * elapsed time in the application. */
    ulTimeMs = ( uint32_t ) ( ulTimeMs - ulGlobalEntryTimeMs );
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <prvGetTimeMs+0x2c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	603b      	str	r3, [r7, #0]

    return ulTimeMs;
 800254e:	683b      	ldr	r3, [r7, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000ee8 	.word	0x20000ee8

0800255c <prvEventCallback>:

void prvEventCallback( MQTTContext_t * pxMQTTContext,
                              MQTTPacketInfo_t * pxPacketInfo,
                              MQTTDeserializedInfo_t * pxDeserializedInfo )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
    /* The MQTT context is not used for this demo. */
    ( void ) pxMQTTContext;

    if( ( pxPacketInfo->type & 0xF0U ) == MQTT_PACKET_TYPE_PUBLISH )
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002570:	2b30      	cmp	r3, #48	; 0x30
 8002572:	d104      	bne.n	800257e <prvEventCallback+0x22>
    {
    	// procesar un paquete PUBLISH recibido,
    	//por ejemplo llamando a la función prvMQTTProcessIncomingPublish, que hay que desarrollar
      prvMQTTProcessIncomingPublish( pxDeserializedInfo->pPublishInfo );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff63 	bl	8002444 <prvMQTTProcessIncomingPublish>
    {
       // también se podría hacer algo con otros paquetes si fuera necesario
    	 //prvMQTTProcessResponse( pxPacketInfo, pxDeserializedInfo->packetIdentifier );
    }

}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_MspInit+0x4c>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_MspInit+0x4c>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6613      	str	r3, [r2, #96]	; 0x60
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_MspInit+0x4c>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_MspInit+0x4c>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_MspInit+0x4c>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6593      	str	r3, [r2, #88]	; 0x58
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_MspInit+0x4c>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	210f      	movs	r1, #15
 80025c2:	f06f 0001 	mvn.w	r0, #1
 80025c6:	f000 fde0 	bl	800318a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0ac      	sub	sp, #176	; 0xb0
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2288      	movs	r2, #136	; 0x88
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00f fc33 	bl	8011e64 <memset>
  if(DFSDM1_Init == 0)
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d142      	bne.n	800268c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4618      	mov	r0, r3
 8002618:	f003 f900 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002622:	f7ff fe0b 	bl	800223c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800262c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002630:	6613      	str	r3, [r2, #96]	; 0x60
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4a15      	ldr	r2, [pc, #84]	; (8002698 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002656:	f44f 7320 	mov.w	r3, #640	; 0x280
 800265a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002670:	2306      	movs	r3, #6
 8002672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002676:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800267a:	4619      	mov	r1, r3
 800267c:	4807      	ldr	r0, [pc, #28]	; (800269c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800267e:	f000 ff17 	bl	80034b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	4a02      	ldr	r2, [pc, #8]	; (8002694 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800268a:	6013      	str	r3, [r2, #0]
  }

}
 800268c:	bf00      	nop
 800268e:	37b0      	adds	r7, #176	; 0xb0
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000eec 	.word	0x20000eec
 8002698:	40021000 	.word	0x40021000
 800269c:	48001000 	.word	0x48001000

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0ac      	sub	sp, #176	; 0xb0
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2288      	movs	r2, #136	; 0x88
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00f fbcf 	bl	8011e64 <memset>
  if(hi2c->Instance==I2C2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a21      	ldr	r2, [pc, #132]	; (8002750 <HAL_I2C_MspInit+0xb0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d13b      	bne.n	8002748 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 f89d 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026e8:	f7ff fda8 	bl	800223c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_I2C_MspInit+0xb4>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_I2C_MspInit+0xb4>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_I2C_MspInit+0xb4>)
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002704:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270c:	2312      	movs	r3, #18
 800270e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002712:	2301      	movs	r3, #1
 8002714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800271e:	2304      	movs	r3, #4
 8002720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002728:	4619      	mov	r1, r3
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <HAL_I2C_MspInit+0xb8>)
 800272c:	f000 fec0 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_I2C_MspInit+0xb4>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_I2C_MspInit+0xb4>)
 8002736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_I2C_MspInit+0xb4>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	37b0      	adds	r7, #176	; 0xb0
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40005800 	.word	0x40005800
 8002754:	40021000 	.word	0x40021000
 8002758:	48000400 	.word	0x48000400

0800275c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_I2C_MspDeInit+0x3c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10f      	bne.n	800278e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_I2C_MspDeInit+0x40>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_I2C_MspDeInit+0x40>)
 8002774:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002778:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800277a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <HAL_I2C_MspDeInit+0x44>)
 8002780:	f001 f840 	bl	8003804 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <HAL_I2C_MspDeInit+0x44>)
 800278a:	f001 f83b 	bl	8003804 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40005800 	.word	0x40005800
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000400 	.word	0x48000400

080027a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_QSPI_MspInit+0x7c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d128      	bne.n	8002818 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_QSPI_MspInit+0x80>)
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	4a16      	ldr	r2, [pc, #88]	; (8002824 <HAL_QSPI_MspInit+0x80>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d0:	6513      	str	r3, [r2, #80]	; 0x50
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_QSPI_MspInit+0x80>)
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_QSPI_MspInit+0x80>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_QSPI_MspInit+0x80>)
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_QSPI_MspInit+0x80>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80027f6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80027fa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002808:	230a      	movs	r3, #10
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <HAL_QSPI_MspInit+0x84>)
 8002814:	f000 fe4c 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002818:	bf00      	nop
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	a0001000 	.word	0xa0001000
 8002824:	40021000 	.word	0x40021000
 8002828:	48001000 	.word	0x48001000

0800282c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b0a4      	sub	sp, #144	; 0x90
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	2288      	movs	r2, #136	; 0x88
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f00f fb11 	bl	8011e64 <memset>
  if(hrtc->Instance==RTC)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_RTC_MspInit+0x5c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d118      	bne.n	800287e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800284c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800285a:	f107 0308 	add.w	r3, r7, #8
 800285e:	4618      	mov	r0, r3
 8002860:	f002 ffdc 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800286a:	f7ff fce7 	bl	800223c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_RTC_MspInit+0x60>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	4a05      	ldr	r2, [pc, #20]	; (800288c <HAL_RTC_MspInit+0x60>)
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800287e:	bf00      	nop
 8002880:	3790      	adds	r7, #144	; 0x90
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40002800 	.word	0x40002800
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_SPI_MspInit+0x8c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d130      	bne.n	8002914 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80028e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028f4:	2306      	movs	r3, #6
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	4809      	ldr	r0, [pc, #36]	; (8002924 <HAL_SPI_MspInit+0x94>)
 8002900:	f000 fdd6 	bl	80034b0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2105      	movs	r1, #5
 8002908:	2033      	movs	r0, #51	; 0x33
 800290a:	f000 fc3e 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800290e:	2033      	movs	r0, #51	; 0x33
 8002910:	f000 fc57 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40003c00 	.word	0x40003c00
 8002920:	40021000 	.word	0x40021000
 8002924:	48000800 	.word	0x48000800

08002928 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_SPI_MspDeInit+0x38>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10d      	bne.n	8002956 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_SPI_MspDeInit+0x3c>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_SPI_MspDeInit+0x3c>)
 8002940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8002946:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <HAL_SPI_MspDeInit+0x40>)
 800294c:	f000 ff5a 	bl	8003804 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002950:	2033      	movs	r0, #51	; 0x33
 8002952:	f000 fc44 	bl	80031de <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40003c00 	.word	0x40003c00
 8002964:	40021000 	.word	0x40021000
 8002968:	48000800 	.word	0x48000800

0800296c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0ae      	sub	sp, #184	; 0xb8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	2288      	movs	r2, #136	; 0x88
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f00f fa69 	bl	8011e64 <memset>
  if(huart->Instance==USART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a42      	ldr	r2, [pc, #264]	; (8002aa0 <HAL_UART_MspInit+0x134>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d13b      	bne.n	8002a14 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029a0:	2300      	movs	r3, #0
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 ff37 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029b4:	f7ff fc42 	bl	800223c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 80029ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029bc:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 80029be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c2:	6613      	str	r3, [r2, #96]	; 0x60
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 80029d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d4:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80029e8:	23c0      	movs	r3, #192	; 0xc0
 80029ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a00:	2307      	movs	r3, #7
 8002a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4826      	ldr	r0, [pc, #152]	; (8002aa8 <HAL_UART_MspInit+0x13c>)
 8002a0e:	f000 fd4f 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a12:	e040      	b.n	8002a96 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_UART_MspInit+0x140>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d13b      	bne.n	8002a96 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fef6 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002a36:	f7ff fc01 	bl	800223c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <HAL_UART_MspInit+0x138>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002a6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a84:	2307      	movs	r3, #7
 8002a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4807      	ldr	r0, [pc, #28]	; (8002ab0 <HAL_UART_MspInit+0x144>)
 8002a92:	f000 fd0d 	bl	80034b0 <HAL_GPIO_Init>
}
 8002a96:	bf00      	nop
 8002a98:	37b8      	adds	r7, #184	; 0xb8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	48000400 	.word	0x48000400
 8002aac:	40004800 	.word	0x40004800
 8002ab0:	48000c00 	.word	0x48000c00

08002ab4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0ac      	sub	sp, #176	; 0xb0
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2288      	movs	r2, #136	; 0x88
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00f f9c5 	bl	8011e64 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae2:	d17c      	bne.n	8002bde <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002aea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002af2:	2301      	movs	r3, #1
 8002af4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002afa:	2318      	movs	r3, #24
 8002afc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002afe:	2307      	movs	r3, #7
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002b02:	2302      	movs	r3, #2
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 fe81 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002b20:	f7ff fb8c 	bl	800223c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b28:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b54:	4619      	mov	r1, r3
 8002b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5a:	f000 fca9 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002b5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b78:	230a      	movs	r3, #10
 8002b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b82:	4619      	mov	r1, r3
 8002b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b88:	f000 fc92 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002b92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d114      	bne.n	8002bda <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002bc8:	f001 ff5c 	bl	8004a84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <HAL_PCD_MspInit+0x134>)
 8002bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002bd8:	e001      	b.n	8002bde <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002bda:	f001 ff53 	bl	8004a84 <HAL_PWREx_EnableVddUSB>
}
 8002bde:	bf00      	nop
 8002be0:	37b0      	adds	r7, #176	; 0xb0
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <NMI_Handler+0x4>

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1c:	f000 f972 	bl	8002f04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c20:	f00c fda0 	bl	800f764 <xTaskGetSchedulerState>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002c2a:	f00d fd75 	bl	8010718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8002c36:	2002      	movs	r0, #2
 8002c38:	f000 ff08 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002c44:	2020      	movs	r0, #32
 8002c46:	f000 ff01 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002c4a:	2040      	movs	r0, #64	; 0x40
 8002c4c:	f000 fefe 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002c50:	2080      	movs	r0, #128	; 0x80
 8002c52:	f000 fefb 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002c56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c5a:	f000 fef7 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002c66:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c6a:	f000 feef 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002c6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c72:	f000 feeb 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002c76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c7a:	f000 fee7 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002c7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c82:	f000 fee3 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002c86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c8a:	f000 fedf 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return 1;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <_kill>:

int _kill(int pid, int sig)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cac:	f00f f9c4 	bl	8012038 <__errno>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2216      	movs	r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
  return -1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_exit>:

void _exit (int status)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cca:	f04f 31ff 	mov.w	r1, #4294967295
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffe7 	bl	8002ca2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cd4:	e7fe      	b.n	8002cd4 <_exit+0x12>

08002cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e00a      	b.n	8002cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ce8:	f3af 8000 	nop.w
 8002cec:	4601      	mov	r1, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	60ba      	str	r2, [r7, #8]
 8002cf4:	b2ca      	uxtb	r2, r1
 8002cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dbf0      	blt.n	8002ce8 <_read+0x12>
  }

  return len;
 8002d06:	687b      	ldr	r3, [r7, #4]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d38:	605a      	str	r2, [r3, #4]
  return 0;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <_isatty>:

int _isatty(int file)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d50:	2301      	movs	r3, #1
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <_sbrk+0x5c>)
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <_sbrk+0x60>)
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d8c:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <_sbrk+0x64>)
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <_sbrk+0x68>)
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <_sbrk+0x64>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d207      	bcs.n	8002db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da8:	f00f f946 	bl	8012038 <__errno>
 8002dac:	4603      	mov	r3, r0
 8002dae:	220c      	movs	r2, #12
 8002db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	e009      	b.n	8002dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <_sbrk+0x64>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <_sbrk+0x64>)
 8002dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20018000 	.word	0x20018000
 8002dd8:	00000400 	.word	0x00000400
 8002ddc:	20000ef0 	.word	0x20000ef0
 8002de0:	20003ba0 	.word	0x20003ba0

08002de4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <SystemInit+0x20>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <SystemInit+0x20>)
 8002df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e0c:	f7ff ffea 	bl	8002de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e10:	480c      	ldr	r0, [pc, #48]	; (8002e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e12:	490d      	ldr	r1, [pc, #52]	; (8002e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <LoopForever+0xe>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e28:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <LoopForever+0x16>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e36:	f00f f905 	bl	8012044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e3a:	f7fe f91d 	bl	8001078 <main>

08002e3e <LoopForever>:

LoopForever:
    b LoopForever
 8002e3e:	e7fe      	b.n	8002e3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e48:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002e4c:	08017204 	.word	0x08017204
  ldr r2, =_sbss
 8002e50:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8002e54:	20003ba0 	.word	0x20003ba0

08002e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e58:	e7fe      	b.n	8002e58 <ADC1_2_IRQHandler>

08002e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e64:	2003      	movs	r0, #3
 8002e66:	f000 f985 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e6a:	200f      	movs	r0, #15
 8002e6c:	f000 f80e 	bl	8002e8c <HAL_InitTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	71fb      	strb	r3, [r7, #7]
 8002e7a:	e001      	b.n	8002e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e7c:	f7ff fb84 	bl	8002588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e80:	79fb      	ldrb	r3, [r7, #7]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_InitTick+0x6c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d023      	beq.n	8002ee8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ea0:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_InitTick+0x70>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_InitTick+0x6c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f99f 	bl	80031fa <HAL_SYSTICK_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d809      	bhi.n	8002edc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f000 f95b 	bl	800318a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_InitTick+0x74>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e007      	b.n	8002eec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e004      	b.n	8002eec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e001      	b.n	8002eec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200000ac 	.word	0x200000ac
 8002efc:	200000a4 	.word	0x200000a4
 8002f00:	200000a8 	.word	0x200000a8

08002f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_IncTick+0x20>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_IncTick+0x24>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_IncTick+0x24>)
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	200000ac 	.word	0x200000ac
 8002f28:	20000ef4 	.word	0x20000ef4

08002f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_GetTick+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000ef4 	.word	0x20000ef4

08002f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff ffee 	bl	8002f2c <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d005      	beq.n	8002f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_Delay+0x44>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f6a:	bf00      	nop
 8002f6c:	f7ff ffde 	bl	8002f2c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d8f7      	bhi.n	8002f6c <HAL_Delay+0x28>
  {
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200000ac 	.word	0x200000ac

08002f8c <__NVIC_SetPriorityGrouping>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_DisableIRQ>:
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db12      	blt.n	8003064 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	490a      	ldr	r1, [pc, #40]	; (8003070 <__NVIC_DisableIRQ+0x44>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	3320      	adds	r3, #32
 8003054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003058:	f3bf 8f4f 	dsb	sy
}
 800305c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800305e:	f3bf 8f6f 	isb	sy
}
 8003062:	bf00      	nop
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff05 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff1a 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5d 	bl	8003074 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff0d 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff1d 	bl	800302c <__NVIC_DisableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff94 	bl	8003130 <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0ac      	b.n	8003380 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f8b2 	bl	8003394 <DFSDM_GetChannelFromInstance>
 8003230:	4603      	mov	r3, r0
 8003232:	4a55      	ldr	r2, [pc, #340]	; (8003388 <HAL_DFSDM_ChannelInit+0x174>)
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e09f      	b.n	8003380 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff f9c9 	bl	80025d8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_DFSDM_ChannelInit+0x178>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a4f      	ldr	r2, [pc, #316]	; (800338c <HAL_DFSDM_ChannelInit+0x178>)
 800324e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003250:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_DFSDM_ChannelInit+0x178>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d125      	bne.n	80032a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003258:	4b4d      	ldr	r3, [pc, #308]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a4c      	ldr	r2, [pc, #304]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 800325e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003262:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4948      	ldr	r1, [pc, #288]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a46      	ldr	r2, [pc, #280]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 8003278:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800327c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	791b      	ldrb	r3, [r3, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003286:	4b42      	ldr	r3, [pc, #264]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	493f      	ldr	r1, [pc, #252]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003298:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <HAL_DFSDM_ChannelInit+0x17c>)
 800329e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80032b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80032c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 020f 	bic.w	r2, r2, #15
 80032e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6819      	ldr	r1, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003308:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 0207 	and.w	r2, r2, #7
 8003334:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003360:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f810 	bl	8003394 <DFSDM_GetChannelFromInstance>
 8003374:	4602      	mov	r2, r0
 8003376:	4904      	ldr	r1, [pc, #16]	; (8003388 <HAL_DFSDM_ChannelInit+0x174>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000efc 	.word	0x20000efc
 800338c:	20000ef8 	.word	0x20000ef8
 8003390:	40016000 	.word	0x40016000

08003394 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <DFSDM_GetChannelFromInstance+0x7c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d102      	bne.n	80033aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e02b      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <DFSDM_GetChannelFromInstance+0x80>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d102      	bne.n	80033b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e024      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a17      	ldr	r2, [pc, #92]	; (8003418 <DFSDM_GetChannelFromInstance+0x84>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80033c0:	2302      	movs	r3, #2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e01d      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <DFSDM_GetChannelFromInstance+0x88>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d102      	bne.n	80033d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80033ce:	2304      	movs	r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e016      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <DFSDM_GetChannelFromInstance+0x8c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80033dc:	2305      	movs	r3, #5
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e00f      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <DFSDM_GetChannelFromInstance+0x90>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d102      	bne.n	80033f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80033ea:	2306      	movs	r3, #6
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e008      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <DFSDM_GetChannelFromInstance+0x94>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80033f8:	2307      	movs	r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e001      	b.n	8003402 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80033fe:	2303      	movs	r3, #3
 8003400:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40016000 	.word	0x40016000
 8003414:	40016020 	.word	0x40016020
 8003418:	40016040 	.word	0x40016040
 800341c:	40016080 	.word	0x40016080
 8003420:	400160a0 	.word	0x400160a0
 8003424:	400160c0 	.word	0x400160c0
 8003428:	400160e0 	.word	0x400160e0

0800342c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d005      	beq.n	8003450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e029      	b.n	80034a4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 020e 	bic.w	r2, r2, #14
 800345e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f003 021c 	and.w	r2, r3, #28
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
    }
  }
  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034be:	e17f      	b.n	80037c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8171 	beq.w	80037ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d005      	beq.n	80034f0 <HAL_GPIO_Init+0x40>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d130      	bne.n	8003552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003526:	2201      	movs	r2, #1
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0201 	and.w	r2, r3, #1
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b03      	cmp	r3, #3
 800355c:	d118      	bne.n	8003590 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003564:	2201      	movs	r2, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	08db      	lsrs	r3, r3, #3
 800357a:	f003 0201 	and.w	r2, r3, #1
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b03      	cmp	r3, #3
 800359a:	d017      	beq.n	80035cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d123      	bne.n	8003620 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ac 	beq.w	80037ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	4b5f      	ldr	r3, [pc, #380]	; (80037e0 <HAL_GPIO_Init+0x330>)
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	4a5e      	ldr	r2, [pc, #376]	; (80037e0 <HAL_GPIO_Init+0x330>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6613      	str	r3, [r2, #96]	; 0x60
 800366e:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <HAL_GPIO_Init+0x330>)
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800367a:	4a5a      	ldr	r2, [pc, #360]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	3302      	adds	r3, #2
 8003682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003686:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	220f      	movs	r2, #15
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036a4:	d025      	beq.n	80036f2 <HAL_GPIO_Init+0x242>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_GPIO_Init+0x338>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01f      	beq.n	80036ee <HAL_GPIO_Init+0x23e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <HAL_GPIO_Init+0x33c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d019      	beq.n	80036ea <HAL_GPIO_Init+0x23a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4d      	ldr	r2, [pc, #308]	; (80037f0 <HAL_GPIO_Init+0x340>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0x236>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_GPIO_Init+0x344>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_GPIO_Init+0x232>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_GPIO_Init+0x348>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x22e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4a      	ldr	r2, [pc, #296]	; (80037fc <HAL_GPIO_Init+0x34c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_GPIO_Init+0x22a>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e00c      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036da:	2307      	movs	r3, #7
 80036dc:	e00a      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036de:	2305      	movs	r3, #5
 80036e0:	e008      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036e2:	2304      	movs	r3, #4
 80036e4:	e006      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036e6:	2303      	movs	r3, #3
 80036e8:	e004      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e002      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_GPIO_Init+0x244>
 80036f2:	2300      	movs	r3, #0
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	f002 0203 	and.w	r2, r2, #3
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	4093      	lsls	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003704:	4937      	ldr	r1, [pc, #220]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	3302      	adds	r3, #2
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_GPIO_Init+0x350>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003736:	4a32      	ldr	r2, [pc, #200]	; (8003800 <HAL_GPIO_Init+0x350>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800373c:	4b30      	ldr	r3, [pc, #192]	; (8003800 <HAL_GPIO_Init+0x350>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003760:	4a27      	ldr	r2, [pc, #156]	; (8003800 <HAL_GPIO_Init+0x350>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003766:	4b26      	ldr	r3, [pc, #152]	; (8003800 <HAL_GPIO_Init+0x350>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800378a:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <HAL_GPIO_Init+0x350>)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_GPIO_Init+0x350>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037b4:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_GPIO_Init+0x350>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f47f ae78 	bne.w	80034c0 <HAL_GPIO_Init+0x10>
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010000 	.word	0x40010000
 80037e8:	48000400 	.word	0x48000400
 80037ec:	48000800 	.word	0x48000800
 80037f0:	48000c00 	.word	0x48000c00
 80037f4:	48001000 	.word	0x48001000
 80037f8:	48001400 	.word	0x48001400
 80037fc:	48001800 	.word	0x48001800
 8003800:	40010400 	.word	0x40010400

08003804 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003812:	e0cd      	b.n	80039b0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003814:	2201      	movs	r2, #1
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80c0 	beq.w	80039aa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800382a:	4a68      	ldr	r2, [pc, #416]	; (80039cc <HAL_GPIO_DeInit+0x1c8>)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	220f      	movs	r2, #15
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003852:	d025      	beq.n	80038a0 <HAL_GPIO_DeInit+0x9c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <HAL_GPIO_DeInit+0x1cc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01f      	beq.n	800389c <HAL_GPIO_DeInit+0x98>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <HAL_GPIO_DeInit+0x1d0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d019      	beq.n	8003898 <HAL_GPIO_DeInit+0x94>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <HAL_GPIO_DeInit+0x1d4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <HAL_GPIO_DeInit+0x90>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a5b      	ldr	r2, [pc, #364]	; (80039dc <HAL_GPIO_DeInit+0x1d8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00d      	beq.n	8003890 <HAL_GPIO_DeInit+0x8c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a5a      	ldr	r2, [pc, #360]	; (80039e0 <HAL_GPIO_DeInit+0x1dc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <HAL_GPIO_DeInit+0x88>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a59      	ldr	r2, [pc, #356]	; (80039e4 <HAL_GPIO_DeInit+0x1e0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_GPIO_DeInit+0x84>
 8003884:	2306      	movs	r3, #6
 8003886:	e00c      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 8003888:	2307      	movs	r3, #7
 800388a:	e00a      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 800388c:	2305      	movs	r3, #5
 800388e:	e008      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 8003890:	2304      	movs	r3, #4
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 8003894:	2303      	movs	r3, #3
 8003896:	e004      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 8003898:	2302      	movs	r3, #2
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_GPIO_DeInit+0x9e>
 80038a0:	2300      	movs	r3, #0
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	f002 0203 	and.w	r2, r2, #3
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	4093      	lsls	r3, r2
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d132      	bne.n	8003918 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80038b2:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	494b      	ldr	r1, [pc, #300]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038bc:	4013      	ands	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80038c0:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	4947      	ldr	r1, [pc, #284]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	4944      	ldr	r1, [pc, #272]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038d8:	4013      	ands	r3, r2
 80038da:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80038dc:	4b42      	ldr	r3, [pc, #264]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	4940      	ldr	r1, [pc, #256]	; (80039e8 <HAL_GPIO_DeInit+0x1e4>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038fa:	4a34      	ldr	r2, [pc, #208]	; (80039cc <HAL_GPIO_DeInit+0x1c8>)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	43da      	mvns	r2, r3
 800390a:	4830      	ldr	r0, [pc, #192]	; (80039cc <HAL_GPIO_DeInit+0x1c8>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	400a      	ands	r2, r1
 8003912:	3302      	adds	r3, #2
 8003914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	2103      	movs	r1, #3
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	220f      	movs	r2, #15
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	08d2      	lsrs	r2, r2, #3
 800394c:	4019      	ands	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3208      	adds	r2, #8
 8003952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2103      	movs	r1, #3
 8003960:	fa01 f303 	lsl.w	r3, r1, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	401a      	ands	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	2101      	movs	r1, #1
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	401a      	ands	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	2103      	movs	r1, #3
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	401a      	ands	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	2101      	movs	r1, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	401a      	ands	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3301      	adds	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f af2b 	bne.w	8003814 <HAL_GPIO_DeInit+0x10>
  }
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40010000 	.word	0x40010000
 80039d0:	48000400 	.word	0x48000400
 80039d4:	48000800 	.word	0x48000800
 80039d8:	48000c00 	.word	0x48000c00
 80039dc:	48001000 	.word	0x48001000
 80039e0:	48001400 	.word	0x48001400
 80039e4:	48001800 	.word	0x48001800
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f8fc 	bl	8001c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e08d      	b.n	8003baa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe fdfc 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003acc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003adc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e006      	b.n	8003b04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d108      	bne.n	8003b1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	e007      	b.n	8003b2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e021      	b.n	8003c08 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fe fdbd 	bl	800275c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	817b      	strh	r3, [r7, #10]
 8003c22:	460b      	mov	r3, r1
 8003c24:	813b      	strh	r3, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 80f9 	bne.w	8003e2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_I2C_Mem_Write+0x34>
 8003c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0ed      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Mem_Write+0x4e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0e6      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c66:	f7ff f961 	bl	8002f2c <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fac3 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d1      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	; 0x21
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb0:	88f8      	ldrh	r0, [r7, #6]
 8003cb2:	893a      	ldrh	r2, [r7, #8]
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f9d3 	bl	800406c <I2C_RequestMemoryWrite>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0a9      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2bff      	cmp	r3, #255	; 0xff
 8003ce0:	d90e      	bls.n	8003d00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22ff      	movs	r2, #255	; 0xff
 8003ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fc3d 	bl	8004578 <I2C_TransferConfig>
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fc2c 	bl	8004578 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fabc 	bl	80042a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e07b      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d034      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0x1c8>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d130      	bne.n	8003dd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fa3f 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e04d      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2bff      	cmp	r3, #255	; 0xff
 8003d98:	d90e      	bls.n	8003db8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	8979      	ldrh	r1, [r7, #10]
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fbe1 	bl	8004578 <I2C_TransferConfig>
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fbd0 	bl	8004578 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d19e      	bne.n	8003d20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 faa2 	bl	8004330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e01a      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_I2C_Mem_Write+0x224>)
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	fe00e800 	.word	0xfe00e800

08003e38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	813b      	strh	r3, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 80fd 	bne.w	800405a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_I2C_Mem_Read+0x34>
 8003e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0f1      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x4e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0ea      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e8e:	f7ff f84d 	bl	8002f2c <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2319      	movs	r3, #25
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f9af 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0d5      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2222      	movs	r2, #34	; 0x22
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2240      	movs	r2, #64	; 0x40
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed8:	88f8      	ldrh	r0, [r7, #6]
 8003eda:	893a      	ldrh	r2, [r7, #8]
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f913 	bl	8004114 <I2C_RequestMemoryRead>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0ad      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2bff      	cmp	r3, #255	; 0xff
 8003f08:	d90e      	bls.n	8003f28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	8979      	ldrh	r1, [r7, #10]
 8003f18:	4b52      	ldr	r3, [pc, #328]	; (8004064 <HAL_I2C_Mem_Read+0x22c>)
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fb29 	bl	8004578 <I2C_TransferConfig>
 8003f26:	e00f      	b.n	8003f48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	8979      	ldrh	r1, [r7, #10]
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_I2C_Mem_Read+0x22c>)
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fb18 	bl	8004578 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2104      	movs	r1, #4
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f956 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07c      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d034      	beq.n	8004008 <HAL_I2C_Mem_Read+0x1d0>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d130      	bne.n	8004008 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	2200      	movs	r2, #0
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f927 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e04d      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2bff      	cmp	r3, #255	; 0xff
 8003fc8:	d90e      	bls.n	8003fe8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22ff      	movs	r2, #255	; 0xff
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	8979      	ldrh	r1, [r7, #10]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fac9 	bl	8004578 <I2C_TransferConfig>
 8003fe6:	e00f      	b.n	8004008 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	8979      	ldrh	r1, [r7, #10]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fab8 	bl	8004578 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d19a      	bne.n	8003f48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f98a 	bl	8004330 <I2C_WaitOnSTOPFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e01a      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2220      	movs	r2, #32
 800402c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_I2C_Mem_Read+0x230>)
 800403a:	400b      	ands	r3, r1
 800403c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	80002400 	.word	0x80002400
 8004068:	fe00e800 	.word	0xfe00e800

0800406c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <I2C_RequestMemoryWrite+0xa4>)
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fa6f 	bl	8004578 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f8ff 	bl	80042a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e02c      	b.n	8004108 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
 80040be:	e015      	b.n	80040ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f8e5 	bl	80042a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e012      	b.n	8004108 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e2:	893b      	ldrh	r3, [r7, #8]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f884 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	80002000 	.word	0x80002000

08004114 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	461a      	mov	r2, r3
 8004122:	4603      	mov	r3, r0
 8004124:	817b      	strh	r3, [r7, #10]
 8004126:	460b      	mov	r3, r1
 8004128:	813b      	strh	r3, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	8979      	ldrh	r1, [r7, #10]
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <I2C_RequestMemoryRead+0xa4>)
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fa1c 	bl	8004578 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f8ac 	bl	80042a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e02c      	b.n	80041ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800415a:	893b      	ldrh	r3, [r7, #8]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
 8004164:	e015      	b.n	8004192 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004166:	893b      	ldrh	r3, [r7, #8]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	b29b      	uxth	r3, r3
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	69b9      	ldr	r1, [r7, #24]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f892 	bl	80042a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e012      	b.n	80041ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004188:	893b      	ldrh	r3, [r7, #8]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f831 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	80002000 	.word	0x80002000

080041bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d103      	bne.n	80041da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2200      	movs	r2, #0
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d007      	beq.n	80041f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	619a      	str	r2, [r3, #24]
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004214:	e031      	b.n	800427a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d02d      	beq.n	800427a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fe85 	bl	8002f2c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d122      	bne.n	800427a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	429a      	cmp	r2, r3
 8004250:	d113      	bne.n	800427a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00f      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	429a      	cmp	r2, r3
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0be      	beq.n	8004216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042ae:	e033      	b.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f87f 	bl	80043b8 <I2C_IsErrorOccurred>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e031      	b.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d025      	beq.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042cc:	f7fe fe2e 	bl	8002f2c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11a      	bne.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d013      	beq.n	8004318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e007      	b.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	d1c4      	bne.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800433c:	e02f      	b.n	800439e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f838 	bl	80043b8 <I2C_IsErrorOccurred>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02d      	b.n	80043ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fdeb 	bl	8002f2c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11a      	bne.n	800439e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b20      	cmp	r3, #32
 8004374:	d013      	beq.n	800439e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e007      	b.n	80043ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d1c8      	bne.n	800433e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d068      	beq.n	80044b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2210      	movs	r2, #16
 80043ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ec:	e049      	b.n	8004482 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d045      	beq.n	8004482 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe fd99 	bl	8002f2c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_IsErrorOccurred+0x54>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d13a      	bne.n	8004482 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004416:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800441e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800442a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442e:	d121      	bne.n	8004474 <I2C_IsErrorOccurred+0xbc>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004436:	d01d      	beq.n	8004474 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d01a      	beq.n	8004474 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800444c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800444e:	f7fe fd6d 	bl	8002f2c <HAL_GetTick>
 8004452:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004454:	e00e      	b.n	8004474 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004456:	f7fe fd69 	bl	8002f2c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b19      	cmp	r3, #25
 8004462:	d907      	bls.n	8004474 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	f043 0320 	orr.w	r3, r3, #32
 800446a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004472:	e006      	b.n	8004482 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b20      	cmp	r3, #32
 8004480:	d1e9      	bne.n	8004456 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b20      	cmp	r3, #32
 800448e:	d003      	beq.n	8004498 <I2C_IsErrorOccurred+0xe0>
 8004490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0aa      	beq.n	80043ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2220      	movs	r2, #32
 80044a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f043 0308 	orr.w	r3, r3, #8
 80044f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	f043 0302 	orr.w	r3, r3, #2
 8004512:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01c      	beq.n	8004566 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fe45 	bl	80041bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <I2C_IsErrorOccurred+0x1bc>)
 800453e:	400b      	ands	r3, r1
 8004540:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	431a      	orrs	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800456a:	4618      	mov	r0, r3
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	fe00e800 	.word	0xfe00e800

08004578 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	4613      	mov	r3, r2
 8004588:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004590:	7a7b      	ldrb	r3, [r7, #9]
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004598:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	0d5b      	lsrs	r3, r3, #21
 80045b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <I2C_TransferConfig+0x60>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	43db      	mvns	r3, r3
 80045bc:	ea02 0103 	and.w	r1, r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	03ff63ff 	.word	0x03ff63ff

080045dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d138      	bne.n	8004664 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e032      	b.n	8004666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800462e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	d139      	bne.n	80046fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004692:	2302      	movs	r3, #2
 8004694:	e033      	b.n	80046fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2224      	movs	r2, #36	; 0x24
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800470a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470c:	b08f      	sub	sp, #60	; 0x3c
 800470e:	af0a      	add	r7, sp, #40	; 0x28
 8004710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e116      	b.n	800494a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe f9bc 	bl	8002ab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2203      	movs	r2, #3
 8004740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f004 f957 	bl	8008a0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	687e      	ldr	r6, [r7, #4]
 8004768:	466d      	mov	r5, sp
 800476a:	f106 0410 	add.w	r4, r6, #16
 800476e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800477a:	e885 0003 	stmia.w	r5, {r0, r1}
 800477e:	1d33      	adds	r3, r6, #4
 8004780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004782:	6838      	ldr	r0, [r7, #0]
 8004784:	f004 f917 	bl	80089b6 <USB_CoreInit>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0d7      	b.n	800494a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f004 f945 	bl	8008a30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	e04a      	b.n	8004842 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	333d      	adds	r3, #61	; 0x3d
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	333c      	adds	r3, #60	; 0x3c
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	b298      	uxth	r0, r3
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3356      	adds	r3, #86	; 0x56
 80047e8:	4602      	mov	r2, r0
 80047ea:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	3340      	adds	r3, #64	; 0x40
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004800:	7bfa      	ldrb	r2, [r7, #15]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	3344      	adds	r3, #68	; 0x44
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004814:	7bfa      	ldrb	r2, [r7, #15]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	3348      	adds	r3, #72	; 0x48
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	334c      	adds	r3, #76	; 0x4c
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	3301      	adds	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d3af      	bcc.n	80047ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e044      	b.n	80048dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004868:	7bfa      	ldrb	r2, [r7, #15]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800487e:	7bfa      	ldrb	r2, [r7, #15]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048aa:	7bfa      	ldrb	r2, [r7, #15]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048c0:	7bfa      	ldrb	r2, [r7, #15]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	3301      	adds	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d3b5      	bcc.n	8004852 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	687e      	ldr	r6, [r7, #4]
 80048ee:	466d      	mov	r5, sp
 80048f0:	f106 0410 	add.w	r4, r6, #16
 80048f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004900:	e885 0003 	stmia.w	r5, {r0, r1}
 8004904:	1d33      	adds	r3, r6, #4
 8004906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004908:	6838      	ldr	r0, [r7, #0]
 800490a:	f004 f8dd 	bl	8008ac8 <USB_DevInit>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e014      	b.n	800494a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f80a 	bl	8004952 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f004 fa7f 	bl	8008e46 <USB_DevDisconnect>

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004952 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004984:	f043 0303 	orr.w	r3, r3, #3
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049aa:	6013      	str	r3, [r2, #0]
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40007000 	.word	0x40007000

080049bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40007000 	.word	0x40007000

080049d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d130      	bne.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e8:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f4:	d038      	beq.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2232      	movs	r2, #50	; 0x32
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0c9b      	lsrs	r3, r3, #18
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1c:	e002      	b.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a30:	d102      	bne.n	8004a38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f2      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a44:	d110      	bne.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d007      	beq.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a60:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40007000 	.word	0x40007000
 8004a7c:	200000a4 	.word	0x200000a4
 8004a80:	431bde83 	.word	0x431bde83

08004a84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a92:	6053      	str	r3, [r2, #4]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40007000 	.word	0x40007000

08004aa4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004aac:	f7fe fa3e 	bl	8002f2c <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e063      	b.n	8004b84 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fd fe67 	bl	80027a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004ad6:	f241 3188 	movw	r1, #5000	; 0x1388
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f858 	bl	8004b90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	021a      	lsls	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	2120      	movs	r1, #32
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f850 	bl	8004bac <QSPI_WaitFlagStateUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d131      	bne.n	8004b7a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b20:	f023 0310 	bic.w	r3, r3, #16
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6852      	ldr	r2, [r2, #4]
 8004b28:	0611      	lsls	r1, r2, #24
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68d2      	ldr	r2, [r2, #12]
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_QSPI_Init+0xe8>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6912      	ldr	r2, [r2, #16]
 8004b46:	0411      	lsls	r1, r2, #16
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6952      	ldr	r2, [r2, #20]
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6992      	ldr	r2, [r2, #24]
 8004b52:	4311      	orrs	r1, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004b82:	7afb      	ldrb	r3, [r7, #11]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	ffe0f8fe 	.word	0xffe0f8fe

08004b90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bbc:	e01a      	b.n	8004bf4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d016      	beq.n	8004bf4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc6:	f7fe f9b1 	bl	8002f2c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d302      	bcc.n	8004bdc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2204      	movs	r2, #4
 8004be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e00e      	b.n	8004c12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1d6      	bne.n	8004bbe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e3ca      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b97      	ldr	r3, [pc, #604]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c38:	4b94      	ldr	r3, [pc, #592]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80e4 	beq.w	8004e18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_RCC_OscConfig+0x4a>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	f040 808b 	bne.w	8004d74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f040 8087 	bne.w	8004d74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c66:	4b89      	ldr	r3, [pc, #548]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_RCC_OscConfig+0x62>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e3a2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1a      	ldr	r2, [r3, #32]
 8004c82:	4b82      	ldr	r3, [pc, #520]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <HAL_RCC_OscConfig+0x7c>
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c96:	e005      	b.n	8004ca4 <HAL_RCC_OscConfig+0x88>
 8004c98:	4b7c      	ldr	r3, [pc, #496]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d223      	bcs.n	8004cf0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fd55 	bl	800575c <RCC_SetFlashLatencyFromMSIRange>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e383      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cbc:	4b73      	ldr	r3, [pc, #460]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a72      	ldr	r2, [pc, #456]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cc2:	f043 0308 	orr.w	r3, r3, #8
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b70      	ldr	r3, [pc, #448]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	496d      	ldr	r1, [pc, #436]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cda:	4b6c      	ldr	r3, [pc, #432]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	4968      	ldr	r1, [pc, #416]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
 8004cee:	e025      	b.n	8004d3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a65      	ldr	r2, [pc, #404]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cf6:	f043 0308 	orr.w	r3, r3, #8
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4960      	ldr	r1, [pc, #384]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d0e:	4b5f      	ldr	r3, [pc, #380]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	495b      	ldr	r1, [pc, #364]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fd15 	bl	800575c <RCC_SetFlashLatencyFromMSIRange>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e343      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d3c:	f000 fc4a 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	4b52      	ldr	r3, [pc, #328]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	4950      	ldr	r1, [pc, #320]	; (8004e90 <HAL_RCC_OscConfig+0x274>)
 8004d4e:	5ccb      	ldrb	r3, [r1, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	4a4e      	ldr	r2, [pc, #312]	; (8004e94 <HAL_RCC_OscConfig+0x278>)
 8004d5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d5c:	4b4e      	ldr	r3, [pc, #312]	; (8004e98 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe f893 	bl	8002e8c <HAL_InitTick>
 8004d66:	4603      	mov	r3, r0
 8004d68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d052      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	e327      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d032      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d7c:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a42      	ldr	r2, [pc, #264]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d88:	f7fe f8d0 	bl	8002f2c <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d90:	f7fe f8cc 	bl	8002f2c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e310      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004da2:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a36      	ldr	r2, [pc, #216]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004db4:	f043 0308 	orr.w	r3, r3, #8
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4931      	ldr	r1, [pc, #196]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	492c      	ldr	r1, [pc, #176]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]
 8004de0:	e01a      	b.n	8004e18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004de2:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dee:	f7fe f89d 	bl	8002f2c <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004df6:	f7fe f899 	bl	8002f2c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e2dd      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e08:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x1da>
 8004e14:	e000      	b.n	8004e18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d074      	beq.n	8004f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d005      	beq.n	8004e36 <HAL_RCC_OscConfig+0x21a>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d10e      	bne.n	8004e4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d064      	beq.n	8004f0c <HAL_RCC_OscConfig+0x2f0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d160      	bne.n	8004f0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e2ba      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e56:	d106      	bne.n	8004e66 <HAL_RCC_OscConfig+0x24a>
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e026      	b.n	8004eb4 <HAL_RCC_OscConfig+0x298>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e6e:	d115      	bne.n	8004e9c <HAL_RCC_OscConfig+0x280>
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a02      	ldr	r2, [pc, #8]	; (8004e8c <HAL_RCC_OscConfig+0x270>)
 8004e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e014      	b.n	8004eb4 <HAL_RCC_OscConfig+0x298>
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	08016b30 	.word	0x08016b30
 8004e94:	200000a4 	.word	0x200000a4
 8004e98:	200000a8 	.word	0x200000a8
 8004e9c:	4ba0      	ldr	r3, [pc, #640]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a9f      	ldr	r2, [pc, #636]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4b9d      	ldr	r3, [pc, #628]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a9c      	ldr	r2, [pc, #624]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fe f836 	bl	8002f2c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fe f832 	bl	8002f2c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e276      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed6:	4b92      	ldr	r3, [pc, #584]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x2a8>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fe f822 	bl	8002f2c <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fe f81e 	bl	8002f2c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e262      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004efe:	4b88      	ldr	r3, [pc, #544]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x2d0>
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d060      	beq.n	8004fdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_OscConfig+0x310>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	d119      	bne.n	8004f5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d116      	bne.n	8004f5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f2c:	4b7c      	ldr	r3, [pc, #496]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_OscConfig+0x328>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e23f      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b76      	ldr	r3, [pc, #472]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	4973      	ldr	r1, [pc, #460]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f58:	e040      	b.n	8004fdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d023      	beq.n	8004faa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f62:	4b6f      	ldr	r3, [pc, #444]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6e      	ldr	r2, [pc, #440]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fd ffdd 	bl	8002f2c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f76:	f7fd ffd9 	bl	8002f2c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e21d      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f88:	4b65      	ldr	r3, [pc, #404]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f94:	4b62      	ldr	r3, [pc, #392]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	495f      	ldr	r1, [pc, #380]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
 8004fa8:	e018      	b.n	8004fdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004faa:	4b5d      	ldr	r3, [pc, #372]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5c      	ldr	r2, [pc, #368]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fd ffb9 	bl	8002f2c <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fd ffb5 	bl	8002f2c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1f9      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d03c      	beq.n	8005062 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01c      	beq.n	800502a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff0:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff6:	4a4a      	ldr	r2, [pc, #296]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fd ff94 	bl	8002f2c <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005008:	f7fd ff90 	bl	8002f2c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1d4      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 800501c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ef      	beq.n	8005008 <HAL_RCC_OscConfig+0x3ec>
 8005028:	e01b      	b.n	8005062 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 800502c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005030:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503a:	f7fd ff77 	bl	8002f2c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005042:	f7fd ff73 	bl	8002f2c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e1b7      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005054:	4b32      	ldr	r3, [pc, #200]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ef      	bne.n	8005042 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80a6 	beq.w	80051bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005074:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	4a26      	ldr	r2, [pc, #152]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508a:	6593      	str	r3, [r2, #88]	; 0x58
 800508c:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005098:	2301      	movs	r3, #1
 800509a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCC_OscConfig+0x508>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d118      	bne.n	80050da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <HAL_RCC_OscConfig+0x508>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_RCC_OscConfig+0x508>)
 80050ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b4:	f7fd ff3a 	bl	8002f2c <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050bc:	f7fd ff36 	bl	8002f2c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e17a      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ce:	4b15      	ldr	r3, [pc, #84]	; (8005124 <HAL_RCC_OscConfig+0x508>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d108      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4d8>
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	4a0d      	ldr	r2, [pc, #52]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f2:	e029      	b.n	8005148 <HAL_RCC_OscConfig+0x52c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d115      	bne.n	8005128 <HAL_RCC_OscConfig+0x50c>
 80050fc:	4b08      	ldr	r3, [pc, #32]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a07      	ldr	r2, [pc, #28]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	4a03      	ldr	r2, [pc, #12]	; (8005120 <HAL_RCC_OscConfig+0x504>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800511c:	e014      	b.n	8005148 <HAL_RCC_OscConfig+0x52c>
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	40007000 	.word	0x40007000
 8005128:	4b9c      	ldr	r3, [pc, #624]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	4a9b      	ldr	r2, [pc, #620]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005138:	4b98      	ldr	r3, [pc, #608]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	4a97      	ldr	r2, [pc, #604]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d016      	beq.n	800517e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fd feec 	bl	8002f2c <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005156:	e00a      	b.n	800516e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fd fee8 	bl	8002f2c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e12a      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516e:	4b8b      	ldr	r3, [pc, #556]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0ed      	beq.n	8005158 <HAL_RCC_OscConfig+0x53c>
 800517c:	e015      	b.n	80051aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fd fed5 	bl	8002f2c <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005184:	e00a      	b.n	800519c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fd fed1 	bl	8002f2c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e113      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800519c:	4b7f      	ldr	r3, [pc, #508]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1ed      	bne.n	8005186 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d105      	bne.n	80051bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b0:	4b7a      	ldr	r3, [pc, #488]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b4:	4a79      	ldr	r2, [pc, #484]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80051b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80fe 	beq.w	80053c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	f040 80d0 	bne.w	8005370 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051d0:	4b72      	ldr	r3, [pc, #456]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0203 	and.w	r2, r3, #3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d130      	bne.n	8005246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	3b01      	subs	r3, #1
 80051f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d127      	bne.n	8005246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d11f      	bne.n	8005246 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005210:	2a07      	cmp	r2, #7
 8005212:	bf14      	ite	ne
 8005214:	2201      	movne	r2, #1
 8005216:	2200      	moveq	r2, #0
 8005218:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800521a:	4293      	cmp	r3, r2
 800521c:	d113      	bne.n	8005246 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d109      	bne.n	8005246 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d06e      	beq.n	8005324 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d069      	beq.n	8005320 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800524c:	4b53      	ldr	r3, [pc, #332]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0ad      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005268:	4b4c      	ldr	r3, [pc, #304]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a4b      	ldr	r2, [pc, #300]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800526e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005272:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005274:	f7fd fe5a 	bl	8002f2c <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fd fe56 	bl	8002f2c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e09a      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528e:	4b43      	ldr	r3, [pc, #268]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529a:	4b40      	ldr	r3, [pc, #256]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	4b40      	ldr	r3, [pc, #256]	; (80053a0 <HAL_RCC_OscConfig+0x784>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052aa:	3a01      	subs	r2, #1
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	4311      	orrs	r1, r2
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052b4:	0212      	lsls	r2, r2, #8
 80052b6:	4311      	orrs	r1, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052bc:	0852      	lsrs	r2, r2, #1
 80052be:	3a01      	subs	r2, #1
 80052c0:	0552      	lsls	r2, r2, #21
 80052c2:	4311      	orrs	r1, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052c8:	0852      	lsrs	r2, r2, #1
 80052ca:	3a01      	subs	r2, #1
 80052cc:	0652      	lsls	r2, r2, #25
 80052ce:	4311      	orrs	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052d4:	0912      	lsrs	r2, r2, #4
 80052d6:	0452      	lsls	r2, r2, #17
 80052d8:	430a      	orrs	r2, r1
 80052da:	4930      	ldr	r1, [pc, #192]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052e0:	4b2e      	ldr	r3, [pc, #184]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2d      	ldr	r2, [pc, #180]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80052e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052ec:	4b2b      	ldr	r3, [pc, #172]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <HAL_RCC_OscConfig+0x780>)
 80052f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052f8:	f7fd fe18 	bl	8002f2c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005300:	f7fd fe14 	bl	8002f2c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e058      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005312:	4b22      	ldr	r3, [pc, #136]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800531e:	e050      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e04f      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005324:	4b1d      	ldr	r3, [pc, #116]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d148      	bne.n	80053c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005330:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a19      	ldr	r2, [pc, #100]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005346:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005348:	f7fd fdf0 	bl	8002f2c <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005350:	f7fd fdec 	bl	8002f2c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e030      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x734>
 800536e:	e028      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d023      	beq.n	80053be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCC_OscConfig+0x780>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <HAL_RCC_OscConfig+0x780>)
 800537c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fd fdd3 	bl	8002f2c <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005388:	e00c      	b.n	80053a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538a:	f7fd fdcf 	bl	8002f2c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d905      	bls.n	80053a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e013      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
 800539c:	40021000 	.word	0x40021000
 80053a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a4:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_RCC_OscConfig+0x7b0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1ec      	bne.n	800538a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053b0:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_OscConfig+0x7b0>)
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	4905      	ldr	r1, [pc, #20]	; (80053cc <HAL_RCC_OscConfig+0x7b0>)
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_OscConfig+0x7b4>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60cb      	str	r3, [r1, #12]
 80053bc:	e001      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000
 80053d0:	feeefffc 	.word	0xfeeefffc

080053d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0e7      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053e8:	4b75      	ldr	r3, [pc, #468]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d910      	bls.n	8005418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 0207 	bic.w	r2, r3, #7
 80053fe:	4970      	ldr	r1, [pc, #448]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0cf      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b66      	ldr	r3, [pc, #408]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005430:	429a      	cmp	r2, r3
 8005432:	d908      	bls.n	8005446 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005434:	4b63      	ldr	r3, [pc, #396]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4960      	ldr	r1, [pc, #384]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04c      	beq.n	80054ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b03      	cmp	r3, #3
 8005458:	d107      	bne.n	800546a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545a:	4b5a      	ldr	r3, [pc, #360]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d121      	bne.n	80054aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0a6      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005472:	4b54      	ldr	r3, [pc, #336]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d115      	bne.n	80054aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e09a      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800548a:	4b4e      	ldr	r3, [pc, #312]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e08e      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800549a:	4b4a      	ldr	r3, [pc, #296]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e086      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054aa:	4b46      	ldr	r3, [pc, #280]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4943      	ldr	r1, [pc, #268]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054bc:	f7fd fd36 	bl	8002f2c <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	e00a      	b.n	80054da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c4:	f7fd fd32 	bl	8002f2c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e06e      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 020c 	and.w	r2, r3, #12
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d1eb      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005504:	429a      	cmp	r2, r3
 8005506:	d208      	bcs.n	800551a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005508:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	492b      	ldr	r1, [pc, #172]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800551a:	4b29      	ldr	r3, [pc, #164]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d210      	bcs.n	800554a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 0207 	bic.w	r2, r3, #7
 8005530:	4923      	ldr	r1, [pc, #140]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005538:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <HAL_RCC_ClockConfig+0x1ec>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d001      	beq.n	800554a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e036      	b.n	80055b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005556:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	4918      	ldr	r1, [pc, #96]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005564:	4313      	orrs	r3, r2
 8005566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4910      	ldr	r1, [pc, #64]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005584:	4313      	orrs	r3, r2
 8005586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005588:	f000 f824 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	490b      	ldr	r1, [pc, #44]	; (80055c8 <HAL_RCC_ClockConfig+0x1f4>)
 800559a:	5ccb      	ldrb	r3, [r1, r3]
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
 80055a4:	4a09      	ldr	r2, [pc, #36]	; (80055cc <HAL_RCC_ClockConfig+0x1f8>)
 80055a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <HAL_RCC_ClockConfig+0x1fc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fd fc6d 	bl	8002e8c <HAL_InitTick>
 80055b2:	4603      	mov	r3, r0
 80055b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80055b6:	7afb      	ldrb	r3, [r7, #11]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40022000 	.word	0x40022000
 80055c4:	40021000 	.word	0x40021000
 80055c8:	08016b30 	.word	0x08016b30
 80055cc:	200000a4 	.word	0x200000a4
 80055d0:	200000a8 	.word	0x200000a8

080055d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	2300      	movs	r3, #0
 80055e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e2:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x34>
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b0c      	cmp	r3, #12
 8005600:	d121      	bne.n	8005646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d11e      	bne.n	8005646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005608:	4b34      	ldr	r3, [pc, #208]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e005      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005624:	4b2d      	ldr	r3, [pc, #180]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005630:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10d      	bne.n	800565c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005644:	e00a      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b04      	cmp	r3, #4
 800564a:	d102      	bne.n	8005652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800564c:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e004      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d101      	bne.n	800565c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005658:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800565a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d134      	bne.n	80056cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d003      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0xa6>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d003      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0xac>
 8005678:	e005      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800567a:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800567c:	617b      	str	r3, [r7, #20]
      break;
 800567e:	e005      	b.n	800568c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005682:	617b      	str	r3, [r7, #20]
      break;
 8005684:	e002      	b.n	800568c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	617b      	str	r3, [r7, #20]
      break;
 800568a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	3301      	adds	r3, #1
 8005698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	fb03 f202 	mul.w	r2, r3, r2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <HAL_RCC_GetSysClockFreq+0x108>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	0e5b      	lsrs	r3, r3, #25
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	3301      	adds	r3, #1
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056cc:	69bb      	ldr	r3, [r7, #24]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000
 80056e0:	08016b48 	.word	0x08016b48
 80056e4:	00f42400 	.word	0x00f42400
 80056e8:	007a1200 	.word	0x007a1200

080056ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	200000a4 	.word	0x200000a4

08005704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005708:	f7ff fff0 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4904      	ldr	r1, [pc, #16]	; (800572c <HAL_RCC_GetPCLK1Freq+0x28>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	08016b40 	.word	0x08016b40

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005734:	f7ff ffda 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	08016b40 	.word	0x08016b40

0800575c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005774:	f7ff f922 	bl	80049bc <HAL_PWREx_GetVoltageRange>
 8005778:	6178      	str	r0, [r7, #20]
 800577a:	e014      	b.n	80057a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800577c:	4b25      	ldr	r3, [pc, #148]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005786:	6593      	str	r3, [r2, #88]	; 0x58
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005794:	f7ff f912 	bl	80049bc <HAL_PWREx_GetVoltageRange>
 8005798:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800579a:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d10b      	bne.n	80057c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d919      	bls.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2ba0      	cmp	r3, #160	; 0xa0
 80057b8:	d902      	bls.n	80057c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057ba:	2302      	movs	r3, #2
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e013      	b.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c0:	2301      	movs	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	e010      	b.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d902      	bls.n	80057d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057cc:	2303      	movs	r3, #3
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	e00a      	b.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d102      	bne.n	80057de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057d8:	2302      	movs	r3, #2
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	e004      	b.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b70      	cmp	r3, #112	; 0x70
 80057e2:	d101      	bne.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057e4:	2301      	movs	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057e8:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f023 0207 	bic.w	r2, r3, #7
 80057f0:	4909      	ldr	r1, [pc, #36]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	429a      	cmp	r2, r3
 8005804:	d001      	beq.n	800580a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000
 8005818:	40022000 	.word	0x40022000

0800581c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005824:	2300      	movs	r3, #0
 8005826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005828:	2300      	movs	r3, #0
 800582a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005834:	2b00      	cmp	r3, #0
 8005836:	d041      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005840:	d02a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005842:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005846:	d824      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800584c:	d008      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800584e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005852:	d81e      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800585c:	d010      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800585e:	e018      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005860:	4b86      	ldr	r3, [pc, #536]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a85      	ldr	r2, [pc, #532]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800586a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800586c:	e015      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f000 facb 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800587e:	e00c      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3320      	adds	r3, #32
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fbb6 	bl	8005ff8 <RCCEx_PLLSAI2_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	74fb      	strb	r3, [r7, #19]
      break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a0:	4b76      	ldr	r3, [pc, #472]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ae:	4973      	ldr	r1, [pc, #460]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d041      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058d0:	d02a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058d6:	d824      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058dc:	d008      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e2:	d81e      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058ec:	d010      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058ee:	e018      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058f0:	4b62      	ldr	r3, [pc, #392]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a61      	ldr	r2, [pc, #388]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058fc:	e015      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fa83 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800590e:	e00c      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3320      	adds	r3, #32
 8005914:	2100      	movs	r1, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fb6e 	bl	8005ff8 <RCCEx_PLLSAI2_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005920:	e003      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	74fb      	strb	r3, [r7, #19]
      break;
 8005926:	e000      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10b      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005930:	4b52      	ldr	r3, [pc, #328]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800593e:	494f      	ldr	r1, [pc, #316]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005946:	e001      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	7cfb      	ldrb	r3, [r7, #19]
 800594a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80a0 	beq.w	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800595a:	2300      	movs	r3, #0
 800595c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800595e:	4b47      	ldr	r3, [pc, #284]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00d      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005974:	4b41      	ldr	r3, [pc, #260]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597e:	6593      	str	r3, [r2, #88]	; 0x58
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800598c:	2301      	movs	r3, #1
 800598e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005990:	4b3b      	ldr	r3, [pc, #236]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a3a      	ldr	r2, [pc, #232]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800599c:	f7fd fac6 	bl	8002f2c <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059a2:	e009      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a4:	f7fd fac2 	bl	8002f2c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d902      	bls.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	74fb      	strb	r3, [r7, #19]
        break;
 80059b6:	e005      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059b8:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ef      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d15c      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059ca:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01f      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d019      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059e8:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	4a20      	ldr	r2, [pc, #128]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a04:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fd fa81 	bl	8002f2c <HAL_GetTick>
 8005a2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2c:	e00b      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f7fd fa7d 	bl	8002f2c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d902      	bls.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	74fb      	strb	r3, [r7, #19]
            break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0ec      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6a:	4904      	ldr	r1, [pc, #16]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a72:	e009      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	74bb      	strb	r3, [r7, #18]
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a7a:	bf00      	nop
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a88:	7c7b      	ldrb	r3, [r7, #17]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8e:	4b9e      	ldr	r3, [pc, #632]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	4a9d      	ldr	r2, [pc, #628]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aa6:	4b98      	ldr	r3, [pc, #608]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	f023 0203 	bic.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	4994      	ldr	r1, [pc, #592]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ac8:	4b8f      	ldr	r3, [pc, #572]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f023 020c 	bic.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	498c      	ldr	r1, [pc, #560]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aea:	4b87      	ldr	r3, [pc, #540]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	4983      	ldr	r1, [pc, #524]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b0c:	4b7e      	ldr	r3, [pc, #504]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	497b      	ldr	r1, [pc, #492]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b2e:	4b76      	ldr	r3, [pc, #472]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3c:	4972      	ldr	r1, [pc, #456]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b50:	4b6d      	ldr	r3, [pc, #436]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	496a      	ldr	r1, [pc, #424]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b72:	4b65      	ldr	r3, [pc, #404]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b80:	4961      	ldr	r1, [pc, #388]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b94:	4b5c      	ldr	r3, [pc, #368]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	4959      	ldr	r1, [pc, #356]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bb6:	4b54      	ldr	r3, [pc, #336]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	4950      	ldr	r1, [pc, #320]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	4948      	ldr	r1, [pc, #288]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bfa:	4b43      	ldr	r3, [pc, #268]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	493f      	ldr	r1, [pc, #252]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d028      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c1c:	4b3a      	ldr	r3, [pc, #232]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	4937      	ldr	r1, [pc, #220]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c3a:	d106      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3c:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a31      	ldr	r2, [pc, #196]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c46:	60d3      	str	r3, [r2, #12]
 8005c48:	e011      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c52:	d10c      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f8d8 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c64:	7cfb      	ldrb	r3, [r7, #19]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d028      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	491f      	ldr	r1, [pc, #124]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c9a:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ca4:	60d3      	str	r3, [r2, #12]
 8005ca6:	e011      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f8a9 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d02b      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	4908      	ldr	r1, [pc, #32]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf6:	d109      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a02      	ldr	r2, [pc, #8]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d02:	60d3      	str	r3, [r2, #12]
 8005d04:	e014      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d06:	bf00      	nop
 8005d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d14:	d10c      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f877 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d02f      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d4a:	4928      	ldr	r1, [pc, #160]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5a:	d10d      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	2102      	movs	r1, #2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f854 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d014      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d72:	7cfb      	ldrb	r3, [r7, #19]
 8005d74:	74bb      	strb	r3, [r7, #18]
 8005d76:	e011      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3320      	adds	r3, #32
 8005d86:	2102      	movs	r1, #2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f935 	bl	8005ff8 <RCCEx_PLLSAI2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005da8:	4b10      	ldr	r3, [pc, #64]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db6:	490d      	ldr	r1, [pc, #52]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dca:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dda:	4904      	ldr	r1, [pc, #16]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005de2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40021000 	.word	0x40021000

08005df0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a04      	ldr	r2, [pc, #16]	; (8005e0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005dfa:	f043 0304 	orr.w	r3, r3, #4
 8005dfe:	6013      	str	r3, [r2, #0]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40021000 	.word	0x40021000

08005e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e1e:	4b75      	ldr	r3, [pc, #468]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d018      	beq.n	8005e5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e2a:	4b72      	ldr	r3, [pc, #456]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0203 	and.w	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d10d      	bne.n	8005e56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e42:	4b6c      	ldr	r3, [pc, #432]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
       ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d047      	beq.n	8005ee6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	e044      	b.n	8005ee6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d018      	beq.n	8005e96 <RCCEx_PLLSAI1_Config+0x86>
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d825      	bhi.n	8005eb4 <RCCEx_PLLSAI1_Config+0xa4>
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d002      	beq.n	8005e72 <RCCEx_PLLSAI1_Config+0x62>
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d009      	beq.n	8005e84 <RCCEx_PLLSAI1_Config+0x74>
 8005e70:	e020      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e72:	4b60      	ldr	r3, [pc, #384]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d11d      	bne.n	8005eba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e82:	e01a      	b.n	8005eba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e84:	4b5b      	ldr	r3, [pc, #364]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d116      	bne.n	8005ebe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e94:	e013      	b.n	8005ebe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e96:	4b57      	ldr	r3, [pc, #348]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10f      	bne.n	8005ec2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ea2:	4b54      	ldr	r3, [pc, #336]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eb2:	e006      	b.n	8005ec2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb8:	e004      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ec2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eca:	4b4a      	ldr	r3, [pc, #296]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	4944      	ldr	r1, [pc, #272]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d17d      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005eec:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a40      	ldr	r2, [pc, #256]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef8:	f7fd f818 	bl	8002f2c <HAL_GetTick>
 8005efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005efe:	e009      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f00:	f7fd f814 	bl	8002f2c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d902      	bls.n	8005f14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	73fb      	strb	r3, [r7, #15]
        break;
 8005f12:	e005      	b.n	8005f20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f14:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1ef      	bne.n	8005f00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d160      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d111      	bne.n	8005f50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f2c:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6892      	ldr	r2, [r2, #8]
 8005f3c:	0211      	lsls	r1, r2, #8
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68d2      	ldr	r2, [r2, #12]
 8005f42:	0912      	lsrs	r2, r2, #4
 8005f44:	0452      	lsls	r2, r2, #17
 8005f46:	430a      	orrs	r2, r1
 8005f48:	492a      	ldr	r1, [pc, #168]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
 8005f4e:	e027      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d112      	bne.n	8005f7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f56:	4b27      	ldr	r3, [pc, #156]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6892      	ldr	r2, [r2, #8]
 8005f66:	0211      	lsls	r1, r2, #8
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6912      	ldr	r2, [r2, #16]
 8005f6c:	0852      	lsrs	r2, r2, #1
 8005f6e:	3a01      	subs	r2, #1
 8005f70:	0552      	lsls	r2, r2, #21
 8005f72:	430a      	orrs	r2, r1
 8005f74:	491f      	ldr	r1, [pc, #124]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	610b      	str	r3, [r1, #16]
 8005f7a:	e011      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	0211      	lsls	r1, r2, #8
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6952      	ldr	r2, [r2, #20]
 8005f92:	0852      	lsrs	r2, r2, #1
 8005f94:	3a01      	subs	r2, #1
 8005f96:	0652      	lsls	r2, r2, #25
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fa0:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005faa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fc ffbe 	bl	8002f2c <HAL_GetTick>
 8005fb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fb2:	e009      	b.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb4:	f7fc ffba 	bl	8002f2c <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d902      	bls.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc6:	e005      	b.n	8005fd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0ef      	beq.n	8005fb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006006:	4b6a      	ldr	r3, [pc, #424]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006012:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0203 	and.w	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d10d      	bne.n	800603e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
       ||
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800602a:	4b61      	ldr	r3, [pc, #388]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
       ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d047      	beq.n	80060ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e044      	b.n	80060ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d018      	beq.n	800607e <RCCEx_PLLSAI2_Config+0x86>
 800604c:	2b03      	cmp	r3, #3
 800604e:	d825      	bhi.n	800609c <RCCEx_PLLSAI2_Config+0xa4>
 8006050:	2b01      	cmp	r3, #1
 8006052:	d002      	beq.n	800605a <RCCEx_PLLSAI2_Config+0x62>
 8006054:	2b02      	cmp	r3, #2
 8006056:	d009      	beq.n	800606c <RCCEx_PLLSAI2_Config+0x74>
 8006058:	e020      	b.n	800609c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800605a:	4b55      	ldr	r3, [pc, #340]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11d      	bne.n	80060a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606a:	e01a      	b.n	80060a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800606c:	4b50      	ldr	r3, [pc, #320]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d116      	bne.n	80060a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607c:	e013      	b.n	80060a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800607e:	4b4c      	ldr	r3, [pc, #304]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800608a:	4b49      	ldr	r3, [pc, #292]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800609a:	e006      	b.n	80060aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e004      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10d      	bne.n	80060ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060b2:	4b3f      	ldr	r3, [pc, #252]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6819      	ldr	r1, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	430b      	orrs	r3, r1
 80060c8:	4939      	ldr	r1, [pc, #228]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d167      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060d4:	4b36      	ldr	r3, [pc, #216]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a35      	ldr	r2, [pc, #212]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e0:	f7fc ff24 	bl	8002f2c <HAL_GetTick>
 80060e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060e6:	e009      	b.n	80060fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060e8:	f7fc ff20 	bl	8002f2c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d902      	bls.n	80060fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	73fb      	strb	r3, [r7, #15]
        break;
 80060fa:	e005      	b.n	8006108 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060fc:	4b2c      	ldr	r3, [pc, #176]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ef      	bne.n	80060e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d14a      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d111      	bne.n	8006138 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006114:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6892      	ldr	r2, [r2, #8]
 8006124:	0211      	lsls	r1, r2, #8
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68d2      	ldr	r2, [r2, #12]
 800612a:	0912      	lsrs	r2, r2, #4
 800612c:	0452      	lsls	r2, r2, #17
 800612e:	430a      	orrs	r2, r1
 8006130:	491f      	ldr	r1, [pc, #124]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	614b      	str	r3, [r1, #20]
 8006136:	e011      	b.n	800615c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6892      	ldr	r2, [r2, #8]
 8006148:	0211      	lsls	r1, r2, #8
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6912      	ldr	r2, [r2, #16]
 800614e:	0852      	lsrs	r2, r2, #1
 8006150:	3a01      	subs	r2, #1
 8006152:	0652      	lsls	r2, r2, #25
 8006154:	430a      	orrs	r2, r1
 8006156:	4916      	ldr	r1, [pc, #88]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006158:	4313      	orrs	r3, r2
 800615a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800615c:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fc fee0 	bl	8002f2c <HAL_GetTick>
 800616c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800616e:	e009      	b.n	8006184 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006170:	f7fc fedc 	bl	8002f2c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d902      	bls.n	8006184 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	73fb      	strb	r3, [r7, #15]
          break;
 8006182:	e005      	b.n	8006190 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ef      	beq.n	8006170 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4904      	ldr	r1, [pc, #16]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40021000 	.word	0x40021000

080061b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d079      	beq.n	80062ba <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc fb26 	bl	800282c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d058      	beq.n	80062a8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	22ca      	movs	r2, #202	; 0xca
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2253      	movs	r2, #83	; 0x53
 8006204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa4e 	bl	80066a8 <RTC_EnterInitMode>
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d127      	bne.n	8006266 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6899      	ldr	r1, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	68d2      	ldr	r2, [r2, #12]
 8006250:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6919      	ldr	r1, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	041a      	lsls	r2, r3, #16
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa52 	bl	8006710 <RTC_ExitInitMode>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d113      	bne.n	800629e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0203 	bic.w	r2, r2, #3
 8006284:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	22ff      	movs	r2, #255	; 0xff
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24
 80062a6:	e001      	b.n	80062ac <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_RTC_SetTime+0x1a>
 80062da:	2302      	movs	r3, #2
 80062dc:	e08b      	b.n	80063f6 <HAL_RTC_SetTime+0x132>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	22ca      	movs	r2, #202	; 0xca
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2253      	movs	r2, #83	; 0x53
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f9d2 	bl	80066a8 <RTC_EnterInitMode>
 8006304:	4603      	mov	r3, r0
 8006306:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006308:	7cfb      	ldrb	r3, [r7, #19]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d163      	bne.n	80063d6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d126      	bne.n	8006362 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fa2d 	bl	800678c <RTC_ByteToBcd2>
 8006332:	4603      	mov	r3, r0
 8006334:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fa26 	bl	800678c <RTC_ByteToBcd2>
 8006340:	4603      	mov	r3, r0
 8006342:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006344:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	789b      	ldrb	r3, [r3, #2]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fa1e 	bl	800678c <RTC_ByteToBcd2>
 8006350:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006352:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	78db      	ldrb	r3, [r3, #3]
 800635a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e018      	b.n	8006394 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2200      	movs	r2, #0
 8006374:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006382:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006388:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800639e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6899      	ldr	r1, [r3, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f99f 	bl	8006710 <RTC_ExitInitMode>
 80063d2:	4603      	mov	r3, r0
 80063d4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	22ff      	movs	r2, #255	; 0xff
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80063de:	7cfb      	ldrb	r3, [r7, #19]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd90      	pop	{r4, r7, pc}

080063fe <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800642c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006430:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644c:	b2da      	uxtb	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	0d9b      	lsrs	r3, r3, #22
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d11a      	bne.n	80064ac <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 f9a6 	bl	80067cc <RTC_Bcd2ToByte>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 f99d 	bl	80067cc <RTC_Bcd2ToByte>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	789b      	ldrb	r3, [r3, #2]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f994 	bl	80067cc <RTC_Bcd2ToByte>
 80064a4:	4603      	mov	r3, r0
 80064a6:	461a      	mov	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064b6:	b590      	push	{r4, r7, lr}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_RTC_SetDate+0x1a>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e075      	b.n	80065bc <HAL_RTC_SetDate+0x106>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10e      	bne.n	8006504 <HAL_RTC_SetDate+0x4e>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	f023 0310 	bic.w	r3, r3, #16
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	330a      	adds	r3, #10
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11c      	bne.n	8006544 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	78db      	ldrb	r3, [r3, #3]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f93c 	bl	800678c <RTC_ByteToBcd2>
 8006514:	4603      	mov	r3, r0
 8006516:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	4618      	mov	r0, r3
 800651e:	f000 f935 	bl	800678c <RTC_ByteToBcd2>
 8006522:	4603      	mov	r3, r0
 8006524:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006526:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	789b      	ldrb	r3, [r3, #2]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f92d 	bl	800678c <RTC_ByteToBcd2>
 8006532:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006534:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e00e      	b.n	8006562 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006550:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006556:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	22ca      	movs	r2, #202	; 0xca
 8006568:	625a      	str	r2, [r3, #36]	; 0x24
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2253      	movs	r2, #83	; 0x53
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f898 	bl	80066a8 <RTC_EnterInitMode>
 8006578:	4603      	mov	r3, r0
 800657a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10c      	bne.n	800659c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006590:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f8bc 	bl	8006710 <RTC_ExitInitMode>
 8006598:	4603      	mov	r3, r0
 800659a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd90      	pop	{r4, r7, pc}

080065c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	0c1b      	lsrs	r3, r3, #16
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	0b5b      	lsrs	r3, r3, #13
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d11a      	bne.n	8006654 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f8d2 	bl	80067cc <RTC_Bcd2ToByte>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f8c9 	bl	80067cc <RTC_Bcd2ToByte>
 800663a:	4603      	mov	r3, r0
 800663c:	461a      	mov	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	789b      	ldrb	r3, [r3, #2]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f8c0 	bl	80067cc <RTC_Bcd2ToByte>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0d      	ldr	r2, [pc, #52]	; (80066a4 <HAL_RTC_WaitForSynchro+0x44>)
 800666e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006670:	f7fc fc5c 	bl	8002f2c <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006676:	e009      	b.n	800668c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006678:	f7fc fc58 	bl	8002f2c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006686:	d901      	bls.n	800668c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e007      	b.n	800669c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ee      	beq.n	8006678 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	0003ff5f 	.word	0x0003ff5f

080066a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d120      	bne.n	8006704 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066cc:	f7fc fc2e 	bl	8002f2c <HAL_GetTick>
 80066d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066d2:	e00d      	b.n	80066f0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066d4:	f7fc fc2a 	bl	8002f2c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066e2:	d905      	bls.n	80066f0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2203      	movs	r2, #3
 80066ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d102      	bne.n	8006704 <RTC_EnterInitMode+0x5c>
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d1e7      	bne.n	80066d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <RTC_ExitInitMode+0x78>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a19      	ldr	r2, [pc, #100]	; (8006788 <RTC_ExitInitMode+0x78>)
 8006722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006726:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006728:	4b17      	ldr	r3, [pc, #92]	; (8006788 <RTC_ExitInitMode+0x78>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10c      	bne.n	800674e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ff93 	bl	8006660 <HAL_RTC_WaitForSynchro>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01e      	beq.n	800677e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2203      	movs	r2, #3
 8006744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	73fb      	strb	r3, [r7, #15]
 800674c:	e017      	b.n	800677e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <RTC_ExitInitMode+0x78>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4a0d      	ldr	r2, [pc, #52]	; (8006788 <RTC_ExitInitMode+0x78>)
 8006754:	f023 0320 	bic.w	r3, r3, #32
 8006758:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ff80 	bl	8006660 <HAL_RTC_WaitForSynchro>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2203      	movs	r2, #3
 800676a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <RTC_ExitInitMode+0x78>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <RTC_ExitInitMode+0x78>)
 8006778:	f043 0320 	orr.w	r3, r3, #32
 800677c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40002800 	.word	0x40002800

0800678c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800679e:	e005      	b.n	80067ac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	3b0a      	subs	r3, #10
 80067aa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	2b09      	cmp	r3, #9
 80067b0:	d8f6      	bhi.n	80067a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	7afb      	ldrb	r3, [r7, #11]
 80067bc:	4313      	orrs	r3, r2
 80067be:	b2db      	uxtb	r3, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	4413      	add	r3, r2
 80067f2:	b2db      	uxtb	r3, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e095      	b.n	800693e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006822:	d009      	beq.n	8006838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	61da      	str	r2, [r3, #28]
 800682a:	e005      	b.n	8006838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fc f81c 	bl	8002890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006878:	d902      	bls.n	8006880 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	e002      	b.n	8006886 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006884:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800688e:	d007      	beq.n	80068a0 <HAL_SPI_Init+0xa0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006898:	d002      	beq.n	80068a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	ea42 0103 	orr.w	r1, r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	f003 0204 	and.w	r2, r3, #4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800691c:	ea42 0103 	orr.w	r1, r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e01a      	b.n	800698e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fb ffd9 	bl	8002928 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b088      	sub	sp, #32
 800699a:	af02      	add	r7, sp, #8
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
 80069b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069ba:	e11a      	b.n	8006bf2 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c4:	d112      	bne.n	80069ec <HAL_SPI_Receive+0x56>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10e      	bne.n	80069ec <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2204      	movs	r2, #4
 80069d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f90e 	bl	8006c04 <HAL_SPI_TransmitReceive>
 80069e8:	4603      	mov	r3, r0
 80069ea:	e107      	b.n	8006bfc <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_SPI_Receive+0x64>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e100      	b.n	8006bfc <HAL_SPI_Receive+0x266>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a02:	f7fc fa93 	bl	8002f2c <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_SPI_Receive+0x7e>
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a18:	e0eb      	b.n	8006bf2 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a64:	d908      	bls.n	8006a78 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	e007      	b.n	8006a88 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a86:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a90:	d10f      	bne.n	8006ab2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ab0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d007      	beq.n	8006ad0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ace:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ad8:	d86f      	bhi.n	8006bba <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ada:	e034      	b.n	8006b46 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d117      	bne.n	8006b1a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f103 020c 	add.w	r2, r3, #12
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b18:	e015      	b.n	8006b46 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1a:	f7fc fa07 	bl	8002f2c <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d803      	bhi.n	8006b32 <HAL_SPI_Receive+0x19c>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_Receive+0x1a2>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006b44:	e055      	b.n	8006bf2 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1c4      	bne.n	8006adc <HAL_SPI_Receive+0x146>
 8006b52:	e038      	b.n	8006bc6 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d115      	bne.n	8006b8e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	b292      	uxth	r2, r2
 8006b6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b8c:	e015      	b.n	8006bba <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8e:	f7fc f9cd 	bl	8002f2c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d803      	bhi.n	8006ba6 <HAL_SPI_Receive+0x210>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d102      	bne.n	8006bac <HAL_SPI_Receive+0x216>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006bb8:	e01b      	b.n	8006bf2 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1c6      	bne.n	8006b54 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fffe 	bl	8007bcc <SPI_EndRxTransaction>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
 8006be8:	e003      	b.n	8006bf2 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	; 0x28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c12:	2301      	movs	r3, #1
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x26>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e20a      	b.n	8007040 <HAL_SPI_TransmitReceive+0x43c>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c32:	f7fc f97b 	bl	8002f2c <HAL_GetTick>
 8006c36:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c3e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006c4a:	887b      	ldrh	r3, [r7, #2]
 8006c4c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c4e:	7efb      	ldrb	r3, [r7, #27]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d00e      	beq.n	8006c72 <HAL_SPI_TransmitReceive+0x6e>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c5a:	d106      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x66>
 8006c64:	7efb      	ldrb	r3, [r7, #27]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d003      	beq.n	8006c72 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c70:	e1e0      	b.n	8007034 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x80>
 8006c7e:	887b      	ldrh	r3, [r7, #2]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c8a:	e1d3      	b.n	8007034 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d003      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2205      	movs	r2, #5
 8006c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	887a      	ldrh	r2, [r7, #2]
 8006cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	887a      	ldrh	r2, [r7, #2]
 8006cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	887a      	ldrh	r2, [r7, #2]
 8006cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ce2:	d802      	bhi.n	8006cea <HAL_SPI_TransmitReceive+0xe6>
 8006ce4:	8a3b      	ldrh	r3, [r7, #16]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d908      	bls.n	8006cfc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cf8:	605a      	str	r2, [r3, #4]
 8006cfa:	e007      	b.n	8006d0c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d007      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d32:	f240 8081 	bls.w	8006e38 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x140>
 8006d3e:	8a7b      	ldrh	r3, [r7, #18]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d16d      	bne.n	8006e20 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	881a      	ldrh	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	1c9a      	adds	r2, r3, #2
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d68:	e05a      	b.n	8006e20 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d11b      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1ac>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <HAL_SPI_TransmitReceive+0x1ac>
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d113      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	881a      	ldrh	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	1c9a      	adds	r2, r3, #2
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d11c      	bne.n	8006df8 <HAL_SPI_TransmitReceive+0x1f4>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d016      	beq.n	8006df8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	1c9a      	adds	r2, r3, #2
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006df4:	2301      	movs	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006df8:	f7fc f898 	bl	8002f2c <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d80b      	bhi.n	8006e20 <HAL_SPI_TransmitReceive+0x21c>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d007      	beq.n	8006e20 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006e1e:	e109      	b.n	8007034 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d19f      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x166>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d199      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x166>
 8006e36:	e0e3      	b.n	8007000 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x244>
 8006e40:	8a7b      	ldrh	r3, [r7, #18]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	f040 80cf 	bne.w	8006fe6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d912      	bls.n	8006e78 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b02      	subs	r3, #2
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e76:	e0b6      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e9e:	e0a2      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d134      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x314>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02f      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x314>
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d12c      	bne.n	8006f18 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d912      	bls.n	8006eee <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	881a      	ldrh	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	1c9a      	adds	r2, r3, #2
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b02      	subs	r3, #2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eec:	e012      	b.n	8006f14 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d148      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x3b4>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d042      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d923      	bls.n	8006f86 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	b292      	uxth	r2, r2
 8006f4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	1c9a      	adds	r2, r3, #2
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b02      	subs	r3, #2
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d81f      	bhi.n	8006fb4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f82:	605a      	str	r2, [r3, #4]
 8006f84:	e016      	b.n	8006fb4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f103 020c 	add.w	r2, r3, #12
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fb8:	f7fb ffb8 	bl	8002f2c <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d803      	bhi.n	8006fd0 <HAL_SPI_TransmitReceive+0x3cc>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d102      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x3d2>
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d107      	bne.n	8006fe6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006fe4:	e026      	b.n	8007034 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f af57 	bne.w	8006ea0 <HAL_SPI_TransmitReceive+0x29c>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f47f af50 	bne.w	8006ea0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fe39 	bl	8007c7c <SPI_EndRxTxTransaction>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702a:	e003      	b.n	8007034 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800703c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007040:	4618      	mov	r0, r3
 8007042:	3728      	adds	r7, #40	; 0x28
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_SPI_Transmit_IT+0x1e>
 8007060:	88fb      	ldrh	r3, [r7, #6]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	75fb      	strb	r3, [r7, #23]
    goto error;
 800706a:	e06d      	b.n	8007148 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8007078:	2302      	movs	r3, #2
 800707a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800707c:	e064      	b.n	8007148 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_SPI_Transmit_IT+0x44>
 8007088:	2302      	movs	r3, #2
 800708a:	e05e      	b.n	800714a <HAL_SPI_Transmit_IT+0x102>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2203      	movs	r2, #3
 8007098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070d8:	d903      	bls.n	80070e2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_SPI_Transmit_IT+0x110>)
 80070de:	651a      	str	r2, [r3, #80]	; 0x50
 80070e0:	e002      	b.n	80070e8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <HAL_SPI_Transmit_IT+0x114>)
 80070e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f0:	d10f      	bne.n	8007112 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007100:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007110:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d007      	beq.n	8007130 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800712e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007146:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	0800794b 	.word	0x0800794b
 800715c:	08007905 	.word	0x08007905

08007160 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d002      	beq.n	8007184 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800717e:	2302      	movs	r3, #2
 8007180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007182:	e092      	b.n	80072aa <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d110      	bne.n	80071ae <HAL_SPI_Receive_IT+0x4e>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007194:	d10b      	bne.n	80071ae <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2204      	movs	r2, #4
 800719a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f889 	bl	80072bc <HAL_SPI_TransmitReceive_IT>
 80071aa:	4603      	mov	r3, r0
 80071ac:	e07e      	b.n	80072ac <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <HAL_SPI_Receive_IT+0x5a>
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071be:	e074      	b.n	80072aa <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_SPI_Receive_IT+0x6e>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e06e      	b.n	80072ac <HAL_SPI_Receive_IT+0x14c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2204      	movs	r2, #4
 80071da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800721a:	d90b      	bls.n	8007234 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800722a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <HAL_SPI_Receive_IT+0x154>)
 8007230:	64da      	str	r2, [r3, #76]	; 0x4c
 8007232:	e00a      	b.n	800724a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007242:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <HAL_SPI_Receive_IT+0x158>)
 8007248:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007252:	d10f      	bne.n	8007274 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007272:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d007      	beq.n	8007292 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007290:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80072a8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	080078b9 	.word	0x080078b9
 80072b8:	08007869 	.word	0x08007869

080072bc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072d4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072dc:	7dbb      	ldrb	r3, [r7, #22]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d00d      	beq.n	80072fe <HAL_SPI_TransmitReceive_IT+0x42>
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072e8:	d106      	bne.n	80072f8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80072f2:	7dbb      	ldrb	r3, [r7, #22]
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d002      	beq.n	80072fe <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80072f8:	2302      	movs	r3, #2
 80072fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072fc:	e07d      	b.n	80073fa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_SPI_TransmitReceive_IT+0x54>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_SPI_TransmitReceive_IT+0x54>
 800730a:	887b      	ldrh	r3, [r7, #2]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007314:	e071      	b.n	80073fa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_SPI_TransmitReceive_IT+0x68>
 8007320:	2302      	movs	r3, #2
 8007322:	e06b      	b.n	80073fc <HAL_SPI_TransmitReceive_IT+0x140>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b04      	cmp	r3, #4
 8007336:	d003      	beq.n	8007340 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2205      	movs	r2, #5
 800733c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	887a      	ldrh	r2, [r7, #2]
 8007356:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	887a      	ldrh	r2, [r7, #2]
 8007362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007376:	d906      	bls.n	8007386 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a23      	ldr	r2, [pc, #140]	; (8007408 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800737c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a22      	ldr	r2, [pc, #136]	; (800740c <HAL_SPI_TransmitReceive_IT+0x150>)
 8007382:	651a      	str	r2, [r3, #80]	; 0x50
 8007384:	e005      	b.n	8007392 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a21      	ldr	r2, [pc, #132]	; (8007410 <HAL_SPI_TransmitReceive_IT+0x154>)
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a21      	ldr	r2, [pc, #132]	; (8007414 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007390:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800739a:	d802      	bhi.n	80073a2 <HAL_SPI_TransmitReceive_IT+0xe6>
 800739c:	887b      	ldrh	r3, [r7, #2]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d908      	bls.n	80073b4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073b0:	605a      	str	r2, [r3, #4]
 80073b2:	e007      	b.n	80073c4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073c2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d007      	beq.n	80073e2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80073f8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	080077a3 	.word	0x080077a3
 800740c:	08007809 	.word	0x08007809
 8007410:	08007653 	.word	0x08007653
 8007414:	08007711 	.word	0x08007711

08007418 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10e      	bne.n	8007458 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007440:	2b00      	cmp	r3, #0
 8007442:	d009      	beq.n	8007458 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
    return;
 8007456:	e0ce      	b.n	80075f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d009      	beq.n	8007476 <HAL_SPI_IRQHandler+0x5e>
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
    return;
 8007474:	e0bf      	b.n	80075f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <HAL_SPI_IRQHandler+0x7e>
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d105      	bne.n	8007496 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80b0 	beq.w	80075f6 <HAL_SPI_IRQHandler+0x1de>
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80aa 	beq.w	80075f6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d023      	beq.n	80074f4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d011      	beq.n	80074dc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074bc:	f043 0204 	orr.w	r2, r3, #4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	e00b      	b.n	80074f4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074dc:	2300      	movs	r3, #0
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	693b      	ldr	r3, [r7, #16]
        return;
 80074f2:	e080      	b.n	80075f6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d014      	beq.n	8007528 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007502:	f043 0201 	orr.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00c      	beq.n	800754c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007536:	f043 0208 	orr.w	r2, r3, #8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007550:	2b00      	cmp	r3, #0
 8007552:	d04f      	beq.n	80075f4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007562:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d104      	bne.n	8007580 <HAL_SPI_IRQHandler+0x168>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d034      	beq.n	80075ea <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0203 	bic.w	r2, r2, #3
 800758e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007594:	2b00      	cmp	r3, #0
 8007596:	d011      	beq.n	80075bc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759c:	4a17      	ldr	r2, [pc, #92]	; (80075fc <HAL_SPI_IRQHandler+0x1e4>)
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fb ff41 	bl	800342c <HAL_DMA_Abort_IT>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d016      	beq.n	80075f2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c8:	4a0c      	ldr	r2, [pc, #48]	; (80075fc <HAL_SPI_IRQHandler+0x1e4>)
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fb ff2b 	bl	800342c <HAL_DMA_Abort_IT>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80075e8:	e003      	b.n	80075f2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f812 	bl	8007614 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80075f0:	e000      	b.n	80075f4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80075f2:	bf00      	nop
    return;
 80075f4:	bf00      	nop
  }
}
 80075f6:	3720      	adds	r7, #32
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	08007629 	.word	0x08007629

08007600 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff ffe5 	bl	8007614 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b01      	cmp	r3, #1
 8007664:	d923      	bls.n	80076ae <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	b292      	uxth	r2, r2
 8007672:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	1c9a      	adds	r2, r3, #2
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b02      	subs	r3, #2
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b01      	cmp	r3, #1
 800769a:	d11f      	bne.n	80076dc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076aa:	605a      	str	r2, [r3, #4]
 80076ac:	e016      	b.n	80076dc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f103 020c 	add.w	r2, r3, #12
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10f      	bne.n	8007708 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076f6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb00 	bl	8007d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	d912      	bls.n	8007748 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	881a      	ldrh	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b02      	subs	r3, #2
 8007740:	b29a      	uxth	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007746:	e012      	b.n	800776e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	7812      	ldrb	r2, [r2, #0]
 8007754:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d110      	bne.n	800779a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007786:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fab7 	bl	8007d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	b292      	uxth	r2, r2
 80077b6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	1c9a      	adds	r2, r3, #2
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10f      	bne.n	8007800 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa84 	bl	8007d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	881a      	ldrh	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	1c9a      	adds	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d110      	bne.n	8007860 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800784c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa54 	bl	8007d08 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f103 020c 	add.w	r2, r3, #12
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	7812      	ldrb	r2, [r2, #0]
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa6e 	bl	8007d8c <SPI_CloseRx_ISR>
  }
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	b292      	uxth	r2, r2
 80078cc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	1c9a      	adds	r2, r3, #2
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa48 	bl	8007d8c <SPI_CloseRx_ISR>
  }
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	330c      	adds	r3, #12
 8007916:	7812      	ldrb	r2, [r2, #0]
 8007918:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fa55 	bl	8007dec <SPI_CloseTx_ISR>
  }
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	881a      	ldrh	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	1c9a      	adds	r2, r3, #2
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa33 	bl	8007dec <SPI_CloseTx_ISR>
  }
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079a0:	f7fb fac4 	bl	8002f2c <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4413      	add	r3, r2
 80079ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079b0:	f7fb fabc 	bl	8002f2c <HAL_GetTick>
 80079b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079b6:	4b39      	ldr	r3, [pc, #228]	; (8007a9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	015b      	lsls	r3, r3, #5
 80079bc:	0d1b      	lsrs	r3, r3, #20
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	fb02 f303 	mul.w	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079c6:	e054      	b.n	8007a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d050      	beq.n	8007a72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079d0:	f7fb faac 	bl	8002f2c <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d902      	bls.n	80079e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d13d      	bne.n	8007a62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079fe:	d111      	bne.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a08:	d004      	beq.n	8007a14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a12:	d107      	bne.n	8007a24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2c:	d10f      	bne.n	8007a4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e017      	b.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d19b      	bne.n	80079c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200000a4 	.word	0x200000a4

08007aa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	; 0x28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ab2:	f7fb fa3b 	bl	8002f2c <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	4413      	add	r3, r2
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007ac2:	f7fb fa33 	bl	8002f2c <HAL_GetTick>
 8007ac6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ad0:	4b3d      	ldr	r3, [pc, #244]	; (8007bc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	00da      	lsls	r2, r3, #3
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	0d1b      	lsrs	r3, r3, #20
 8007ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ae8:	e060      	b.n	8007bac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007af0:	d107      	bne.n	8007b02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b08:	d050      	beq.n	8007bac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b0a:	f7fb fa0f 	bl	8002f2c <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d902      	bls.n	8007b20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d13d      	bne.n	8007b9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b38:	d111      	bne.n	8007b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b42:	d004      	beq.n	8007b4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4c:	d107      	bne.n	8007b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b66:	d10f      	bne.n	8007b88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e010      	b.n	8007bbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d196      	bne.n	8007aea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3728      	adds	r7, #40	; 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200000a4 	.word	0x200000a4

08007bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007be0:	d111      	bne.n	8007c06 <SPI_EndRxTransaction+0x3a>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bea:	d004      	beq.n	8007bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf4:	d107      	bne.n	8007c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c04:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2180      	movs	r1, #128	; 0x80
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff febd 	bl	8007990 <SPI_WaitFlagStateUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	f043 0220 	orr.w	r2, r3, #32
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e023      	b.n	8007c74 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c34:	d11d      	bne.n	8007c72 <SPI_EndRxTransaction+0xa6>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c3e:	d004      	beq.n	8007c4a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c48:	d113      	bne.n	8007c72 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff ff22 	bl	8007aa0 <SPI_WaitFifoStateUntilTimeout>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c66:	f043 0220 	orr.w	r2, r3, #32
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e000      	b.n	8007c74 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af02      	add	r7, sp, #8
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff03 	bl	8007aa0 <SPI_WaitFifoStateUntilTimeout>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca4:	f043 0220 	orr.w	r2, r3, #32
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e027      	b.n	8007d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff fe68 	bl	8007990 <SPI_WaitFlagStateUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e014      	b.n	8007d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fedc 	bl	8007aa0 <SPI_WaitFifoStateUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e000      	b.n	8007d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d10:	f7fb f90c 	bl	8002f2c <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0220 	bic.w	r2, r2, #32
 8007d24:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	2164      	movs	r1, #100	; 0x64
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ffa6 	bl	8007c7c <SPI_EndRxTxTransaction>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3a:	f043 0220 	orr.w	r2, r3, #32
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d115      	bne.n	8007d76 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d107      	bne.n	8007d66 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f003 f904 	bl	800af6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d64:	e00e      	b.n	8007d84 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fc46 	bl	8007600 <HAL_SPI_TxRxCpltCallback>
}
 8007d74:	e006      	b.n	8007d84 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff fc48 	bl	8007614 <HAL_SPI_ErrorCallback>
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007da2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007da4:	f7fb f8c2 	bl	8002f2c <HAL_GetTick>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	2164      	movs	r1, #100	; 0x64
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff ff0c 	bl	8007bcc <SPI_EndRxTransaction>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbe:	f043 0220 	orr.w	r2, r3, #32
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f003 f8c8 	bl	800af6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007ddc:	e002      	b.n	8007de4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fc18 	bl	8007614 <HAL_SPI_ErrorCallback>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007df4:	f7fb f89a 	bl	8002f2c <HAL_GetTick>
 8007df8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e08:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	2164      	movs	r1, #100	; 0x64
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff ff34 	bl	8007c7c <SPI_EndRxTxTransaction>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1e:	f043 0220 	orr.w	r2, r3, #32
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff fbdd 	bl	8007614 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007e5a:	e002      	b.n	8007e62 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f003 f899 	bl	800af94 <HAL_SPI_TxCpltCallback>
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e040      	b.n	8007efe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d106      	bne.n	8007e92 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7fa fd6d 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2224      	movs	r2, #36	; 0x24
 8007e96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb6b 	bl	800858c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8b0 	bl	800801c <UART_SetConfig>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e01b      	b.n	8007efe <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ee4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0201 	orr.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fbea 	bl	80086d0 <UART_CheckIdleState>
 8007efc:	4603      	mov	r3, r0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b08a      	sub	sp, #40	; 0x28
 8007f0a:	af02      	add	r7, sp, #8
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d178      	bne.n	8008010 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <HAL_UART_Transmit+0x24>
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e071      	b.n	8008012 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2221      	movs	r2, #33	; 0x21
 8007f3a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f3c:	f7fa fff6 	bl	8002f2c <HAL_GetTick>
 8007f40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	88fa      	ldrh	r2, [r7, #6]
 8007f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	d108      	bne.n	8007f6e <HAL_UART_Transmit+0x68>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e003      	b.n	8007f76 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f76:	e030      	b.n	8007fda <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fc4c 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2220      	movs	r2, #32
 8007f92:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e03c      	b.n	8008012 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	881a      	ldrh	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007faa:	b292      	uxth	r2, r2
 8007fac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	3302      	adds	r3, #2
 8007fb2:	61bb      	str	r3, [r7, #24]
 8007fb4:	e008      	b.n	8007fc8 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	781a      	ldrb	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	b292      	uxth	r2, r2
 8007fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1c8      	bne.n	8007f78 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2200      	movs	r2, #0
 8007fee:	2140      	movs	r1, #64	; 0x40
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fc15 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e005      	b.n	8008012 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2220      	movs	r2, #32
 800800a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008010:	2302      	movs	r3, #2
  }
}
 8008012:	4618      	mov	r0, r3
 8008014:	3720      	adds	r7, #32
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800801c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008020:	b08a      	sub	sp, #40	; 0x28
 8008022:	af00      	add	r7, sp, #0
 8008024:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	431a      	orrs	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	431a      	orrs	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	4313      	orrs	r3, r2
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4ba4      	ldr	r3, [pc, #656]	; (80082dc <UART_SetConfig+0x2c0>)
 800804c:	4013      	ands	r3, r2
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008054:	430b      	orrs	r3, r1
 8008056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a99      	ldr	r2, [pc, #612]	; (80082e0 <UART_SetConfig+0x2c4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008084:	4313      	orrs	r3, r2
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008098:	430a      	orrs	r2, r1
 800809a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a90      	ldr	r2, [pc, #576]	; (80082e4 <UART_SetConfig+0x2c8>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d126      	bne.n	80080f4 <UART_SetConfig+0xd8>
 80080a6:	4b90      	ldr	r3, [pc, #576]	; (80082e8 <UART_SetConfig+0x2cc>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d81b      	bhi.n	80080ec <UART_SetConfig+0xd0>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <UART_SetConfig+0xa0>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080cd 	.word	0x080080cd
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080d5 	.word	0x080080d5
 80080c8:	080080e5 	.word	0x080080e5
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d2:	e116      	b.n	8008302 <UART_SetConfig+0x2e6>
 80080d4:	2302      	movs	r3, #2
 80080d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080da:	e112      	b.n	8008302 <UART_SetConfig+0x2e6>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e2:	e10e      	b.n	8008302 <UART_SetConfig+0x2e6>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ea:	e10a      	b.n	8008302 <UART_SetConfig+0x2e6>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080f2:	e106      	b.n	8008302 <UART_SetConfig+0x2e6>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a7c      	ldr	r2, [pc, #496]	; (80082ec <UART_SetConfig+0x2d0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d138      	bne.n	8008170 <UART_SetConfig+0x154>
 80080fe:	4b7a      	ldr	r3, [pc, #488]	; (80082e8 <UART_SetConfig+0x2cc>)
 8008100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008104:	f003 030c 	and.w	r3, r3, #12
 8008108:	2b0c      	cmp	r3, #12
 800810a:	d82d      	bhi.n	8008168 <UART_SetConfig+0x14c>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0xf8>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008149 	.word	0x08008149
 8008118:	08008169 	.word	0x08008169
 800811c:	08008169 	.word	0x08008169
 8008120:	08008169 	.word	0x08008169
 8008124:	08008159 	.word	0x08008159
 8008128:	08008169 	.word	0x08008169
 800812c:	08008169 	.word	0x08008169
 8008130:	08008169 	.word	0x08008169
 8008134:	08008151 	.word	0x08008151
 8008138:	08008169 	.word	0x08008169
 800813c:	08008169 	.word	0x08008169
 8008140:	08008169 	.word	0x08008169
 8008144:	08008161 	.word	0x08008161
 8008148:	2300      	movs	r3, #0
 800814a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800814e:	e0d8      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008150:	2302      	movs	r3, #2
 8008152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008156:	e0d4      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008158:	2304      	movs	r3, #4
 800815a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800815e:	e0d0      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008166:	e0cc      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008168:	2310      	movs	r3, #16
 800816a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800816e:	e0c8      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a5e      	ldr	r2, [pc, #376]	; (80082f0 <UART_SetConfig+0x2d4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d125      	bne.n	80081c6 <UART_SetConfig+0x1aa>
 800817a:	4b5b      	ldr	r3, [pc, #364]	; (80082e8 <UART_SetConfig+0x2cc>)
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008180:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008184:	2b30      	cmp	r3, #48	; 0x30
 8008186:	d016      	beq.n	80081b6 <UART_SetConfig+0x19a>
 8008188:	2b30      	cmp	r3, #48	; 0x30
 800818a:	d818      	bhi.n	80081be <UART_SetConfig+0x1a2>
 800818c:	2b20      	cmp	r3, #32
 800818e:	d00a      	beq.n	80081a6 <UART_SetConfig+0x18a>
 8008190:	2b20      	cmp	r3, #32
 8008192:	d814      	bhi.n	80081be <UART_SetConfig+0x1a2>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <UART_SetConfig+0x182>
 8008198:	2b10      	cmp	r3, #16
 800819a:	d008      	beq.n	80081ae <UART_SetConfig+0x192>
 800819c:	e00f      	b.n	80081be <UART_SetConfig+0x1a2>
 800819e:	2300      	movs	r3, #0
 80081a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a4:	e0ad      	b.n	8008302 <UART_SetConfig+0x2e6>
 80081a6:	2302      	movs	r3, #2
 80081a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ac:	e0a9      	b.n	8008302 <UART_SetConfig+0x2e6>
 80081ae:	2304      	movs	r3, #4
 80081b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081b4:	e0a5      	b.n	8008302 <UART_SetConfig+0x2e6>
 80081b6:	2308      	movs	r3, #8
 80081b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081bc:	e0a1      	b.n	8008302 <UART_SetConfig+0x2e6>
 80081be:	2310      	movs	r3, #16
 80081c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081c4:	e09d      	b.n	8008302 <UART_SetConfig+0x2e6>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a4a      	ldr	r2, [pc, #296]	; (80082f4 <UART_SetConfig+0x2d8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d125      	bne.n	800821c <UART_SetConfig+0x200>
 80081d0:	4b45      	ldr	r3, [pc, #276]	; (80082e8 <UART_SetConfig+0x2cc>)
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081da:	2bc0      	cmp	r3, #192	; 0xc0
 80081dc:	d016      	beq.n	800820c <UART_SetConfig+0x1f0>
 80081de:	2bc0      	cmp	r3, #192	; 0xc0
 80081e0:	d818      	bhi.n	8008214 <UART_SetConfig+0x1f8>
 80081e2:	2b80      	cmp	r3, #128	; 0x80
 80081e4:	d00a      	beq.n	80081fc <UART_SetConfig+0x1e0>
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d814      	bhi.n	8008214 <UART_SetConfig+0x1f8>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <UART_SetConfig+0x1d8>
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d008      	beq.n	8008204 <UART_SetConfig+0x1e8>
 80081f2:	e00f      	b.n	8008214 <UART_SetConfig+0x1f8>
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fa:	e082      	b.n	8008302 <UART_SetConfig+0x2e6>
 80081fc:	2302      	movs	r3, #2
 80081fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008202:	e07e      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800820a:	e07a      	b.n	8008302 <UART_SetConfig+0x2e6>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008212:	e076      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800821a:	e072      	b.n	8008302 <UART_SetConfig+0x2e6>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a35      	ldr	r2, [pc, #212]	; (80082f8 <UART_SetConfig+0x2dc>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d12a      	bne.n	800827c <UART_SetConfig+0x260>
 8008226:	4b30      	ldr	r3, [pc, #192]	; (80082e8 <UART_SetConfig+0x2cc>)
 8008228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008234:	d01a      	beq.n	800826c <UART_SetConfig+0x250>
 8008236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800823a:	d81b      	bhi.n	8008274 <UART_SetConfig+0x258>
 800823c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008240:	d00c      	beq.n	800825c <UART_SetConfig+0x240>
 8008242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008246:	d815      	bhi.n	8008274 <UART_SetConfig+0x258>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <UART_SetConfig+0x238>
 800824c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008250:	d008      	beq.n	8008264 <UART_SetConfig+0x248>
 8008252:	e00f      	b.n	8008274 <UART_SetConfig+0x258>
 8008254:	2300      	movs	r3, #0
 8008256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800825a:	e052      	b.n	8008302 <UART_SetConfig+0x2e6>
 800825c:	2302      	movs	r3, #2
 800825e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008262:	e04e      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008264:	2304      	movs	r3, #4
 8008266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800826a:	e04a      	b.n	8008302 <UART_SetConfig+0x2e6>
 800826c:	2308      	movs	r3, #8
 800826e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008272:	e046      	b.n	8008302 <UART_SetConfig+0x2e6>
 8008274:	2310      	movs	r3, #16
 8008276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800827a:	e042      	b.n	8008302 <UART_SetConfig+0x2e6>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <UART_SetConfig+0x2c4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d13a      	bne.n	80082fc <UART_SetConfig+0x2e0>
 8008286:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <UART_SetConfig+0x2cc>)
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008294:	d01a      	beq.n	80082cc <UART_SetConfig+0x2b0>
 8008296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800829a:	d81b      	bhi.n	80082d4 <UART_SetConfig+0x2b8>
 800829c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a0:	d00c      	beq.n	80082bc <UART_SetConfig+0x2a0>
 80082a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a6:	d815      	bhi.n	80082d4 <UART_SetConfig+0x2b8>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <UART_SetConfig+0x298>
 80082ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b0:	d008      	beq.n	80082c4 <UART_SetConfig+0x2a8>
 80082b2:	e00f      	b.n	80082d4 <UART_SetConfig+0x2b8>
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ba:	e022      	b.n	8008302 <UART_SetConfig+0x2e6>
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c2:	e01e      	b.n	8008302 <UART_SetConfig+0x2e6>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ca:	e01a      	b.n	8008302 <UART_SetConfig+0x2e6>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082d2:	e016      	b.n	8008302 <UART_SetConfig+0x2e6>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082da:	e012      	b.n	8008302 <UART_SetConfig+0x2e6>
 80082dc:	efff69f3 	.word	0xefff69f3
 80082e0:	40008000 	.word	0x40008000
 80082e4:	40013800 	.word	0x40013800
 80082e8:	40021000 	.word	0x40021000
 80082ec:	40004400 	.word	0x40004400
 80082f0:	40004800 	.word	0x40004800
 80082f4:	40004c00 	.word	0x40004c00
 80082f8:	40005000 	.word	0x40005000
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a9f      	ldr	r2, [pc, #636]	; (8008584 <UART_SetConfig+0x568>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d17a      	bne.n	8008402 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800830c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008310:	2b08      	cmp	r3, #8
 8008312:	d824      	bhi.n	800835e <UART_SetConfig+0x342>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x300>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008341 	.word	0x08008341
 8008320:	0800835f 	.word	0x0800835f
 8008324:	08008349 	.word	0x08008349
 8008328:	0800835f 	.word	0x0800835f
 800832c:	0800834f 	.word	0x0800834f
 8008330:	0800835f 	.word	0x0800835f
 8008334:	0800835f 	.word	0x0800835f
 8008338:	0800835f 	.word	0x0800835f
 800833c:	08008357 	.word	0x08008357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008340:	f7fd f9e0 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8008344:	61f8      	str	r0, [r7, #28]
        break;
 8008346:	e010      	b.n	800836a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008348:	4b8f      	ldr	r3, [pc, #572]	; (8008588 <UART_SetConfig+0x56c>)
 800834a:	61fb      	str	r3, [r7, #28]
        break;
 800834c:	e00d      	b.n	800836a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800834e:	f7fd f941 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8008352:	61f8      	str	r0, [r7, #28]
        break;
 8008354:	e009      	b.n	800836a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835a:	61fb      	str	r3, [r7, #28]
        break;
 800835c:	e005      	b.n	800836a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80fb 	beq.w	8008568 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4613      	mov	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4413      	add	r3, r2
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	429a      	cmp	r2, r3
 8008380:	d305      	bcc.n	800838e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	429a      	cmp	r2, r3
 800838c:	d903      	bls.n	8008396 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008394:	e0e8      	b.n	8008568 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	2200      	movs	r2, #0
 800839a:	461c      	mov	r4, r3
 800839c:	4615      	mov	r5, r2
 800839e:	f04f 0200 	mov.w	r2, #0
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	022b      	lsls	r3, r5, #8
 80083a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80083ac:	0222      	lsls	r2, r4, #8
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	6849      	ldr	r1, [r1, #4]
 80083b2:	0849      	lsrs	r1, r1, #1
 80083b4:	2000      	movs	r0, #0
 80083b6:	4688      	mov	r8, r1
 80083b8:	4681      	mov	r9, r0
 80083ba:	eb12 0a08 	adds.w	sl, r2, r8
 80083be:	eb43 0b09 	adc.w	fp, r3, r9
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	f7f8 fc58 	bl	8000c88 <__aeabi_uldivmod>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4613      	mov	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083e6:	d308      	bcc.n	80083fa <UART_SetConfig+0x3de>
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ee:	d204      	bcs.n	80083fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	60da      	str	r2, [r3, #12]
 80083f8:	e0b6      	b.n	8008568 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008400:	e0b2      	b.n	8008568 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800840a:	d15e      	bne.n	80084ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800840c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008410:	2b08      	cmp	r3, #8
 8008412:	d828      	bhi.n	8008466 <UART_SetConfig+0x44a>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <UART_SetConfig+0x400>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008441 	.word	0x08008441
 8008420:	08008449 	.word	0x08008449
 8008424:	08008451 	.word	0x08008451
 8008428:	08008467 	.word	0x08008467
 800842c:	08008457 	.word	0x08008457
 8008430:	08008467 	.word	0x08008467
 8008434:	08008467 	.word	0x08008467
 8008438:	08008467 	.word	0x08008467
 800843c:	0800845f 	.word	0x0800845f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008440:	f7fd f960 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8008444:	61f8      	str	r0, [r7, #28]
        break;
 8008446:	e014      	b.n	8008472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008448:	f7fd f972 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 800844c:	61f8      	str	r0, [r7, #28]
        break;
 800844e:	e010      	b.n	8008472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008450:	4b4d      	ldr	r3, [pc, #308]	; (8008588 <UART_SetConfig+0x56c>)
 8008452:	61fb      	str	r3, [r7, #28]
        break;
 8008454:	e00d      	b.n	8008472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008456:	f7fd f8bd 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 800845a:	61f8      	str	r0, [r7, #28]
        break;
 800845c:	e009      	b.n	8008472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008462:	61fb      	str	r3, [r7, #28]
        break;
 8008464:	e005      	b.n	8008472 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d077      	beq.n	8008568 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	005a      	lsls	r2, r3, #1
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	441a      	add	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	fbb2 f3f3 	udiv	r3, r2, r3
 800848c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b0f      	cmp	r3, #15
 8008492:	d916      	bls.n	80084c2 <UART_SetConfig+0x4a6>
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849a:	d212      	bcs.n	80084c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f023 030f 	bic.w	r3, r3, #15
 80084a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	085b      	lsrs	r3, r3, #1
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	8afb      	ldrh	r3, [r7, #22]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	8afa      	ldrh	r2, [r7, #22]
 80084be:	60da      	str	r2, [r3, #12]
 80084c0:	e052      	b.n	8008568 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084c8:	e04e      	b.n	8008568 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d827      	bhi.n	8008522 <UART_SetConfig+0x506>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x4bc>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	08008505 	.word	0x08008505
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	08008523 	.word	0x08008523
 80084e8:	08008513 	.word	0x08008513
 80084ec:	08008523 	.word	0x08008523
 80084f0:	08008523 	.word	0x08008523
 80084f4:	08008523 	.word	0x08008523
 80084f8:	0800851b 	.word	0x0800851b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fd f902 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8008500:	61f8      	str	r0, [r7, #28]
        break;
 8008502:	e014      	b.n	800852e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008504:	f7fd f914 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 8008508:	61f8      	str	r0, [r7, #28]
        break;
 800850a:	e010      	b.n	800852e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800850c:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <UART_SetConfig+0x56c>)
 800850e:	61fb      	str	r3, [r7, #28]
        break;
 8008510:	e00d      	b.n	800852e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008512:	f7fd f85f 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8008516:	61f8      	str	r0, [r7, #28]
        break;
 8008518:	e009      	b.n	800852e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800851a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800851e:	61fb      	str	r3, [r7, #28]
        break;
 8008520:	e005      	b.n	800852e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800852c:	bf00      	nop
    }

    if (pclk != 0U)
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d019      	beq.n	8008568 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	085a      	lsrs	r2, r3, #1
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	441a      	add	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	fbb2 f3f3 	udiv	r3, r2, r3
 8008546:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b0f      	cmp	r3, #15
 800854c:	d909      	bls.n	8008562 <UART_SetConfig+0x546>
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008554:	d205      	bcs.n	8008562 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60da      	str	r2, [r3, #12]
 8008560:	e002      	b.n	8008568 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008574:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008578:	4618      	mov	r0, r3
 800857a:	3728      	adds	r7, #40	; 0x28
 800857c:	46bd      	mov	sp, r7
 800857e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008582:	bf00      	nop
 8008584:	40008000 	.word	0x40008000
 8008588:	00f42400 	.word	0x00f42400

0800858c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01a      	beq.n	80086a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800868a:	d10a      	bne.n	80086a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	605a      	str	r2, [r3, #4]
  }
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b098      	sub	sp, #96	; 0x60
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086e0:	f7fa fc24 	bl	8002f2c <HAL_GetTick>
 80086e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d12e      	bne.n	8008752 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086fc:	2200      	movs	r2, #0
 80086fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f88c 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d021      	beq.n	8008752 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800871c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008722:	653b      	str	r3, [r7, #80]	; 0x50
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800872c:	647b      	str	r3, [r7, #68]	; 0x44
 800872e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e062      	b.n	8008818 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b04      	cmp	r3, #4
 800875e:	d149      	bne.n	80087f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008768:	2200      	movs	r2, #0
 800876a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f856 	bl	8008820 <UART_WaitOnFlagUntilTimeout>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d03c      	beq.n	80087f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	623b      	str	r3, [r7, #32]
   return(result);
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800878e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008798:	633b      	str	r3, [r7, #48]	; 0x30
 800879a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e6      	bne.n	800877a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3308      	adds	r3, #8
 80087ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087cc:	61fa      	str	r2, [r7, #28]
 80087ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	69b9      	ldr	r1, [r7, #24]
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	617b      	str	r3, [r7, #20]
   return(result);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e011      	b.n	8008818 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3758      	adds	r7, #88	; 0x58
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4613      	mov	r3, r2
 800882e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008830:	e049      	b.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d045      	beq.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883a:	f7fa fb77 	bl	8002f2c <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <UART_WaitOnFlagUntilTimeout+0x30>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e048      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d031      	beq.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d110      	bne.n	8008892 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2208      	movs	r2, #8
 8008876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f838 	bl	80088ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2208      	movs	r2, #8
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e029      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800889c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a0:	d111      	bne.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f81e 	bl	80088ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e00f      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4013      	ands	r3, r2
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d0a6      	beq.n	8008832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b095      	sub	sp, #84	; 0x54
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800890a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	461a      	mov	r2, r3
 8008912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008914:	643b      	str	r3, [r7, #64]	; 0x40
 8008916:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800891a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e6      	bne.n	80088f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3308      	adds	r3, #8
 800892e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	61fb      	str	r3, [r7, #28]
   return(result);
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f023 0301 	bic.w	r3, r3, #1
 800893e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800894e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e5      	bne.n	8008928 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008960:	2b01      	cmp	r3, #1
 8008962:	d118      	bne.n	8008996 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	60bb      	str	r3, [r7, #8]
   return(result);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f023 0310 	bic.w	r3, r3, #16
 8008978:	647b      	str	r3, [r7, #68]	; 0x44
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6979      	ldr	r1, [r7, #20]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	613b      	str	r3, [r7, #16]
   return(result);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e6      	bne.n	8008964 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80089aa:	bf00      	nop
 80089ac:	3754      	adds	r7, #84	; 0x54
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b6:	b084      	sub	sp, #16
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	f107 001c 	add.w	r0, r7, #28
 80089c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fa65 	bl	8008ea4 <USB_CoreReset>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80089de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
 80089f0:	e005      	b.n	80089fe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a0a:	b004      	add	sp, #16
 8008a0c:	4770      	bx	lr

08008a0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f023 0201 	bic.w	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d115      	bne.n	8008a7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f7fa fa70 	bl	8002f44 <HAL_Delay>
      ms++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa0c 	bl	8008e88 <USB_GetMode>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d01e      	beq.n	8008ab4 <USB_SetCurrentMode+0x84>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b31      	cmp	r3, #49	; 0x31
 8008a7a:	d9f0      	bls.n	8008a5e <USB_SetCurrentMode+0x2e>
 8008a7c:	e01a      	b.n	8008ab4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d115      	bne.n	8008ab0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a90:	2001      	movs	r0, #1
 8008a92:	f7fa fa57 	bl	8002f44 <HAL_Delay>
      ms++;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f9f3 	bl	8008e88 <USB_GetMode>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <USB_SetCurrentMode+0x84>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b31      	cmp	r3, #49	; 0x31
 8008aac:	d9f0      	bls.n	8008a90 <USB_SetCurrentMode+0x60>
 8008aae:	e001      	b.n	8008ab4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e005      	b.n	8008ac0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b32      	cmp	r3, #50	; 0x32
 8008ab8:	d101      	bne.n	8008abe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ac8:	b084      	sub	sp, #16
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	e009      	b.n	8008afc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3340      	adds	r3, #64	; 0x40
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b0e      	cmp	r3, #14
 8008b00:	d9f2      	bls.n	8008ae8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11c      	bne.n	8008b42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b16:	f043 0302 	orr.w	r3, r3, #2
 8008b1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	e005      	b.n	8008b4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b54:	461a      	mov	r2, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f959 	bl	8008e14 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b62:	2110      	movs	r1, #16
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f8f1 	bl	8008d4c <USB_FlushTxFifo>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f91d 	bl	8008db4 <USB_FlushRxFifo>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b96:	461a      	mov	r2, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	e043      	b.n	8008c36 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc4:	d118      	bne.n	8008bf8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	e013      	b.n	8008c0a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	e008      	b.n	8008c0a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c04:	461a      	mov	r2, r3
 8008c06:	2300      	movs	r3, #0
 8008c08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c16:	461a      	mov	r2, r3
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	3301      	adds	r3, #1
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d3b7      	bcc.n	8008bae <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	e043      	b.n	8008ccc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c5a:	d118      	bne.n	8008c8e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	e013      	b.n	8008ca0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	461a      	mov	r2, r3
 8008c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	e008      	b.n	8008ca0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cac:	461a      	mov	r2, r3
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	613b      	str	r3, [r7, #16]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d3b7      	bcc.n	8008c44 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ce6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008cf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f043 0210 	orr.w	r2, r3, #16
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	699a      	ldr	r2, [r3, #24]
 8008d06:	4b10      	ldr	r3, [pc, #64]	; (8008d48 <USB_DevInit+0x280>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f043 0208 	orr.w	r2, r3, #8
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d107      	bne.n	8008d36 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d2e:	f043 0304 	orr.w	r3, r3, #4
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d42:	b004      	add	sp, #16
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	803c3800 	.word	0x803c3800

08008d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4a13      	ldr	r2, [pc, #76]	; (8008db0 <USB_FlushTxFifo+0x64>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d901      	bls.n	8008d6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e01b      	b.n	8008da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	daf2      	bge.n	8008d5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	019b      	lsls	r3, r3, #6
 8008d7c:	f043 0220 	orr.w	r2, r3, #32
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a08      	ldr	r2, [pc, #32]	; (8008db0 <USB_FlushTxFifo+0x64>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d901      	bls.n	8008d96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e006      	b.n	8008da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d0f0      	beq.n	8008d84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	00030d40 	.word	0x00030d40

08008db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a11      	ldr	r2, [pc, #68]	; (8008e10 <USB_FlushRxFifo+0x5c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d901      	bls.n	8008dd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e018      	b.n	8008e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	daf2      	bge.n	8008dc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2210      	movs	r2, #16
 8008de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a08      	ldr	r2, [pc, #32]	; (8008e10 <USB_FlushRxFifo+0x5c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d901      	bls.n	8008df6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e006      	b.n	8008e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d0f0      	beq.n	8008de4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	00030d40 	.word	0x00030d40

08008e14 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e34:	4313      	orrs	r3, r2
 8008e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e60:	f023 0303 	bic.w	r3, r3, #3
 8008e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e74:	f043 0302 	orr.w	r3, r3, #2
 8008e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0301 	and.w	r3, r3, #1
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4a13      	ldr	r2, [pc, #76]	; (8008f08 <USB_CoreReset+0x64>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d901      	bls.n	8008ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e01b      	b.n	8008efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	daf2      	bge.n	8008eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f043 0201 	orr.w	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <USB_CoreReset+0x64>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d901      	bls.n	8008eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e006      	b.n	8008efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d0f0      	beq.n	8008eda <USB_CoreReset+0x36>

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	00030d40 	.word	0x00030d40

08008f0c <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	4a06      	ldr	r2, [pc, #24]	; (8008f34 <BSP_LED_On+0x28>)
 8008f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f22:	b291      	uxth	r1, r2
 8008f24:	2201      	movs	r2, #1
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fa fd78 	bl	8003a1c <HAL_GPIO_WritePin>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200000b0 	.word	0x200000b0

08008f38 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	4a06      	ldr	r2, [pc, #24]	; (8008f60 <BSP_LED_Off+0x28>)
 8008f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f4e:	b291      	uxth	r1, r2
 8008f50:	2200      	movs	r2, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fa fd62 	bl	8003a1c <HAL_GPIO_WritePin>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200000b0 	.word	0x200000b0

08008f64 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	; 0x28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10b      	bne.n	8008f8e <BSP_COM_Init+0x2a>
 8008f76:	4b2d      	ldr	r3, [pc, #180]	; (800902c <BSP_COM_Init+0xc8>)
 8008f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7a:	4a2c      	ldr	r2, [pc, #176]	; (800902c <BSP_COM_Init+0xc8>)
 8008f7c:	f043 0302 	orr.w	r3, r3, #2
 8008f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f82:	4b2a      	ldr	r3, [pc, #168]	; (800902c <BSP_COM_Init+0xc8>)
 8008f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10b      	bne.n	8008fac <BSP_COM_Init+0x48>
 8008f94:	4b25      	ldr	r3, [pc, #148]	; (800902c <BSP_COM_Init+0xc8>)
 8008f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f98:	4a24      	ldr	r2, [pc, #144]	; (800902c <BSP_COM_Init+0xc8>)
 8008f9a:	f043 0302 	orr.w	r3, r3, #2
 8008f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fa0:	4b22      	ldr	r3, [pc, #136]	; (800902c <BSP_COM_Init+0xc8>)
 8008fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <BSP_COM_Init+0x66>
 8008fb2:	4b1e      	ldr	r3, [pc, #120]	; (800902c <BSP_COM_Init+0xc8>)
 8008fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb6:	4a1d      	ldr	r2, [pc, #116]	; (800902c <BSP_COM_Init+0xc8>)
 8008fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8008fbe:	4b1b      	ldr	r3, [pc, #108]	; (800902c <BSP_COM_Init+0xc8>)
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc6:	60bb      	str	r3, [r7, #8]
 8008fc8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8008fca:	2340      	movs	r3, #64	; 0x40
 8008fcc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8008fda:	2307      	movs	r3, #7
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	4a13      	ldr	r2, [pc, #76]	; (8009030 <BSP_COM_Init+0xcc>)
 8008fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe6:	f107 0214 	add.w	r2, r7, #20
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fa fa5f 	bl	80034b0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8008ff2:	2380      	movs	r3, #128	; 0x80
 8008ff4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8008ffa:	2307      	movs	r3, #7
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	4a0c      	ldr	r2, [pc, #48]	; (8009034 <BSP_COM_Init+0xd0>)
 8009002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009006:	f107 0214 	add.w	r2, r7, #20
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f7fa fa4f 	bl	80034b0 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	4a08      	ldr	r2, [pc, #32]	; (8009038 <BSP_COM_Init+0xd4>)
 8009016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800901e:	6838      	ldr	r0, [r7, #0]
 8009020:	f7fe ff23 	bl	8007e6a <HAL_UART_Init>
}
 8009024:	bf00      	nop
 8009026:	3728      	adds	r7, #40	; 0x28
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40021000 	.word	0x40021000
 8009030:	200000b8 	.word	0x200000b8
 8009034:	200000bc 	.word	0x200000bc
 8009038:	200000b4 	.word	0x200000b4

0800903c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08a      	sub	sp, #40	; 0x28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009044:	4b27      	ldr	r3, [pc, #156]	; (80090e4 <I2Cx_MspInit+0xa8>)
 8009046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009048:	4a26      	ldr	r2, [pc, #152]	; (80090e4 <I2Cx_MspInit+0xa8>)
 800904a:	f043 0302 	orr.w	r3, r3, #2
 800904e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009050:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <I2Cx_MspInit+0xa8>)
 8009052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800905c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009060:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009062:	2312      	movs	r3, #18
 8009064:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009066:	2301      	movs	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800906a:	2303      	movs	r3, #3
 800906c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800906e:	2304      	movs	r3, #4
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009072:	f107 0314 	add.w	r3, r7, #20
 8009076:	4619      	mov	r1, r3
 8009078:	481b      	ldr	r0, [pc, #108]	; (80090e8 <I2Cx_MspInit+0xac>)
 800907a:	f7fa fa19 	bl	80034b0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800907e:	f107 0314 	add.w	r3, r7, #20
 8009082:	4619      	mov	r1, r3
 8009084:	4818      	ldr	r0, [pc, #96]	; (80090e8 <I2Cx_MspInit+0xac>)
 8009086:	f7fa fa13 	bl	80034b0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800908a:	4b16      	ldr	r3, [pc, #88]	; (80090e4 <I2Cx_MspInit+0xa8>)
 800908c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908e:	4a15      	ldr	r2, [pc, #84]	; (80090e4 <I2Cx_MspInit+0xa8>)
 8009090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009094:	6593      	str	r3, [r2, #88]	; 0x58
 8009096:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <I2Cx_MspInit+0xa8>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80090a2:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <I2Cx_MspInit+0xa8>)
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	4a0f      	ldr	r2, [pc, #60]	; (80090e4 <I2Cx_MspInit+0xa8>)
 80090a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80090ae:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <I2Cx_MspInit+0xa8>)
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	4a0c      	ldr	r2, [pc, #48]	; (80090e4 <I2Cx_MspInit+0xa8>)
 80090b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80090b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80090ba:	2200      	movs	r2, #0
 80090bc:	210f      	movs	r1, #15
 80090be:	2021      	movs	r0, #33	; 0x21
 80090c0:	f7fa f863 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80090c4:	2021      	movs	r0, #33	; 0x21
 80090c6:	f7fa f87c 	bl	80031c2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80090ca:	2200      	movs	r2, #0
 80090cc:	210f      	movs	r1, #15
 80090ce:	2022      	movs	r0, #34	; 0x22
 80090d0:	f7fa f85b 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80090d4:	2022      	movs	r0, #34	; 0x22
 80090d6:	f7fa f874 	bl	80031c2 <HAL_NVIC_EnableIRQ>
}
 80090da:	bf00      	nop
 80090dc:	3728      	adds	r7, #40	; 0x28
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	40021000 	.word	0x40021000
 80090e8:	48000400 	.word	0x48000400

080090ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a12      	ldr	r2, [pc, #72]	; (8009140 <I2Cx_Init+0x54>)
 80090f8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a11      	ldr	r2, [pc, #68]	; (8009144 <I2Cx_Init+0x58>)
 80090fe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7ff ff89 	bl	800903c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fa fca6 	bl	8003a7c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009130:	2100      	movs	r1, #0
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fb fa52 	bl	80045dc <HAL_I2CEx_ConfigAnalogFilter>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	40005800 	.word	0x40005800
 8009144:	00702681 	.word	0x00702681

08009148 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08a      	sub	sp, #40	; 0x28
 800914c:	af04      	add	r7, sp, #16
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	4608      	mov	r0, r1
 8009152:	4611      	mov	r1, r2
 8009154:	461a      	mov	r2, r3
 8009156:	4603      	mov	r3, r0
 8009158:	72fb      	strb	r3, [r7, #11]
 800915a:	460b      	mov	r3, r1
 800915c:	813b      	strh	r3, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	b299      	uxth	r1, r3
 800916a:	88f8      	ldrh	r0, [r7, #6]
 800916c:	893a      	ldrh	r2, [r7, #8]
 800916e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009172:	9302      	str	r3, [sp, #8]
 8009174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	4603      	mov	r3, r0
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7fa fe5a 	bl	8003e38 <HAL_I2C_Mem_Read>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	4619      	mov	r1, r3
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f832 	bl	80091fc <I2Cx_Error>
  }
  return status;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b08a      	sub	sp, #40	; 0x28
 80091a6:	af04      	add	r7, sp, #16
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	4608      	mov	r0, r1
 80091ac:	4611      	mov	r1, r2
 80091ae:	461a      	mov	r2, r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	72fb      	strb	r3, [r7, #11]
 80091b4:	460b      	mov	r3, r1
 80091b6:	813b      	strh	r3, [r7, #8]
 80091b8:	4613      	mov	r3, r2
 80091ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	b299      	uxth	r1, r3
 80091c4:	88f8      	ldrh	r0, [r7, #6]
 80091c6:	893a      	ldrh	r2, [r7, #8]
 80091c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	4603      	mov	r3, r0
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7fa fd19 	bl	8003c10 <HAL_I2C_Mem_Write>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d004      	beq.n	80091f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	4619      	mov	r1, r3
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f805 	bl	80091fc <I2Cx_Error>
  }
  return status;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7fa fcd2 	bl	8003bb2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff ff6c 	bl	80090ec <I2Cx_Init>
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009220:	4802      	ldr	r0, [pc, #8]	; (800922c <SENSOR_IO_Init+0x10>)
 8009222:	f7ff ff63 	bl	80090ec <I2Cx_Init>
}
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000f1c 	.word	0x20000f1c

08009230 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af02      	add	r7, sp, #8
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
 800923a:	460b      	mov	r3, r1
 800923c:	71bb      	strb	r3, [r7, #6]
 800923e:	4613      	mov	r3, r2
 8009240:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009242:	79bb      	ldrb	r3, [r7, #6]
 8009244:	b29a      	uxth	r2, r3
 8009246:	79f9      	ldrb	r1, [r7, #7]
 8009248:	2301      	movs	r3, #1
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	1d7b      	adds	r3, r7, #5
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	2301      	movs	r3, #1
 8009252:	4803      	ldr	r0, [pc, #12]	; (8009260 <SENSOR_IO_Write+0x30>)
 8009254:	f7ff ffa5 	bl	80091a2 <I2Cx_WriteMultiple>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20000f1c 	.word	0x20000f1c

08009264 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af02      	add	r7, sp, #8
 800926a:	4603      	mov	r3, r0
 800926c:	460a      	mov	r2, r1
 800926e:	71fb      	strb	r3, [r7, #7]
 8009270:	4613      	mov	r3, r2
 8009272:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009278:	79bb      	ldrb	r3, [r7, #6]
 800927a:	b29a      	uxth	r2, r3
 800927c:	79f9      	ldrb	r1, [r7, #7]
 800927e:	2301      	movs	r3, #1
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	f107 030f 	add.w	r3, r7, #15
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	2301      	movs	r3, #1
 800928a:	4804      	ldr	r0, [pc, #16]	; (800929c <SENSOR_IO_Read+0x38>)
 800928c:	f7ff ff5c 	bl	8009148 <I2Cx_ReadMultiple>

  return read_value;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000f1c 	.word	0x20000f1c

080092a0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	603a      	str	r2, [r7, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	4603      	mov	r3, r0
 80092ac:	71fb      	strb	r3, [r7, #7]
 80092ae:	460b      	mov	r3, r1
 80092b0:	71bb      	strb	r3, [r7, #6]
 80092b2:	4613      	mov	r3, r2
 80092b4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80092b6:	79bb      	ldrb	r3, [r7, #6]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	79f9      	ldrb	r1, [r7, #7]
 80092bc:	88bb      	ldrh	r3, [r7, #4]
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	2301      	movs	r3, #1
 80092c6:	4804      	ldr	r0, [pc, #16]	; (80092d8 <SENSOR_IO_ReadMultiple+0x38>)
 80092c8:	f7ff ff3e 	bl	8009148 <I2Cx_ReadMultiple>
 80092cc:	4603      	mov	r3, r0
 80092ce:	b29b      	uxth	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000f1c 	.word	0x20000f1c

080092dc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80092e6:	2300      	movs	r3, #0
 80092e8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80092ea:	4b19      	ldr	r3, [pc, #100]	; (8009350 <BSP_ACCELERO_Init+0x74>)
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	4798      	blx	r3
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b6a      	cmp	r3, #106	; 0x6a
 80092f4:	d002      	beq.n	80092fc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	73fb      	strb	r3, [r7, #15]
 80092fa:	e024      	b.n	8009346 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80092fc:	4b15      	ldr	r3, [pc, #84]	; (8009354 <BSP_ACCELERO_Init+0x78>)
 80092fe:	4a14      	ldr	r2, [pc, #80]	; (8009350 <BSP_ACCELERO_Init+0x74>)
 8009300:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8009302:	2330      	movs	r3, #48	; 0x30
 8009304:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800930a:	2300      	movs	r3, #0
 800930c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800930e:	2340      	movs	r3, #64	; 0x40
 8009310:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800931a:	797a      	ldrb	r2, [r7, #5]
 800931c:	7abb      	ldrb	r3, [r7, #10]
 800931e:	4313      	orrs	r3, r2
 8009320:	b2db      	uxtb	r3, r3
 8009322:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009324:	7a3b      	ldrb	r3, [r7, #8]
 8009326:	f043 0304 	orr.w	r3, r3, #4
 800932a:	b2db      	uxtb	r3, r3
 800932c:	021b      	lsls	r3, r3, #8
 800932e:	b21a      	sxth	r2, r3
 8009330:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009334:	4313      	orrs	r3, r2
 8009336:	b21b      	sxth	r3, r3
 8009338:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <BSP_ACCELERO_Init+0x78>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	89ba      	ldrh	r2, [r7, #12]
 8009342:	4610      	mov	r0, r2
 8009344:	4798      	blx	r3
  }  

  return ret;
 8009346:	7bfb      	ldrb	r3, [r7, #15]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	200000dc 	.word	0x200000dc
 8009354:	20000ff8 	.word	0x20000ff8

08009358 <BSP_ACCELERO_LowPower>:
  * @brief  Set/Unset the ACCELERO in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  * @retval None
  */
void BSP_ACCELERO_LowPower(uint16_t status)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	80fb      	strh	r3, [r7, #6]
  /* Set/Unset the ACCELERO in low power mode */
  if(AccelerometerDrv != NULL)
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <BSP_ACCELERO_LowPower+0x30>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <BSP_ACCELERO_LowPower+0x28>
  {
    if(AccelerometerDrv->LowPower != NULL)
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <BSP_ACCELERO_LowPower+0x30>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d005      	beq.n	8009380 <BSP_ACCELERO_LowPower+0x28>
    {
      AccelerometerDrv->LowPower(status);
 8009374:	4b04      	ldr	r3, [pc, #16]	; (8009388 <BSP_ACCELERO_LowPower+0x30>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	88fa      	ldrh	r2, [r7, #6]
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
    }
  }
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	20000ff8 	.word	0x20000ff8

0800938c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

  if(AccelerometerDrv != NULL)
 8009394:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d009      	beq.n	80093b0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d004      	beq.n	80093b0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80093a6:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3


    }
  }
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000ff8 	.word	0x20000ff8

080093bc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80093c2:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <BSP_HSENSOR_Init+0x38>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	20be      	movs	r0, #190	; 0xbe
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	2bbc      	cmp	r3, #188	; 0xbc
 80093ce:	d002      	beq.n	80093d6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	e009      	b.n	80093ea <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80093d6:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <BSP_HSENSOR_Init+0x3c>)
 80093d8:	4a06      	ldr	r2, [pc, #24]	; (80093f4 <BSP_HSENSOR_Init+0x38>)
 80093da:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <BSP_HSENSOR_Init+0x3c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	20be      	movs	r0, #190	; 0xbe
 80093e4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80093ea:	687b      	ldr	r3, [r7, #4]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200000c0 	.word	0x200000c0
 80093f8:	20000ffc 	.word	0x20000ffc

080093fc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <BSP_HSENSOR_ReadHumidity+0x18>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	20be      	movs	r0, #190	; 0xbe
 8009408:	4798      	blx	r3
 800940a:	eef0 7a40 	vmov.f32	s15, s0
}
 800940e:	eeb0 0a67 	vmov.f32	s0, s15
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20000ffc 	.word	0x20000ffc

08009418 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8009422:	4b09      	ldr	r3, [pc, #36]	; (8009448 <BSP_TSENSOR_Init+0x30>)
 8009424:	4a09      	ldr	r2, [pc, #36]	; (800944c <BSP_TSENSOR_Init+0x34>)
 8009426:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8009428:	f7ff fef8 	bl	800921c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800942c:	4b06      	ldr	r3, [pc, #24]	; (8009448 <BSP_TSENSOR_Init+0x30>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2100      	movs	r1, #0
 8009434:	20be      	movs	r0, #190	; 0xbe
 8009436:	4798      	blx	r3

  ret = TSENSOR_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800943c:	79fb      	ldrb	r3, [r7, #7]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20001000 	.word	0x20001000
 800944c:	200000cc 	.word	0x200000cc

08009450 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <BSP_TSENSOR_ReadTemp+0x18>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	20be      	movs	r0, #190	; 0xbe
 800945c:	4798      	blx	r3
 800945e:	eef0 7a40 	vmov.f32	s15, s0
}
 8009462:	eeb0 0a67 	vmov.f32	s0, s15
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20001000 	.word	0x20001000

0800946c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2120      	movs	r1, #32
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff fef1 	bl	8009264 <SENSOR_IO_Read>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	f023 0304 	bic.w	r3, r3, #4
 800948c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	f043 0304 	orr.w	r3, r3, #4
 8009494:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	f043 0301 	orr.w	r3, r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094ac:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80094ae:	88fb      	ldrh	r3, [r7, #6]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	7bfa      	ldrb	r2, [r7, #15]
 80094b4:	2120      	movs	r1, #32
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff feba 	bl	8009230 <SENSOR_IO_Write>
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80094d2:	f7ff fea3 	bl	800921c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	210f      	movs	r1, #15
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fec1 	bl	8009264 <SENSOR_IO_Read>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	b2d8      	uxtb	r0, r3
 80094fe:	f107 020c 	add.w	r2, r7, #12
 8009502:	2302      	movs	r3, #2
 8009504:	21b0      	movs	r1, #176	; 0xb0
 8009506:	f7ff fecb 	bl	80092a0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800950a:	7b3b      	ldrb	r3, [r7, #12]
 800950c:	085b      	lsrs	r3, r3, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8009512:	7b7b      	ldrb	r3, [r7, #13]
 8009514:	085b      	lsrs	r3, r3, #1
 8009516:	b2db      	uxtb	r3, r3
 8009518:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	b2d8      	uxtb	r0, r3
 800951e:	f107 020c 	add.w	r2, r7, #12
 8009522:	2302      	movs	r3, #2
 8009524:	21b6      	movs	r1, #182	; 0xb6
 8009526:	f7ff febb 	bl	80092a0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800952a:	7b7b      	ldrb	r3, [r7, #13]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	b21a      	sxth	r2, r3
 8009530:	7b3b      	ldrb	r3, [r7, #12]
 8009532:	b21b      	sxth	r3, r3
 8009534:	4313      	orrs	r3, r2
 8009536:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	b2d8      	uxtb	r0, r3
 800953c:	f107 020c 	add.w	r2, r7, #12
 8009540:	2302      	movs	r3, #2
 8009542:	21ba      	movs	r1, #186	; 0xba
 8009544:	f7ff feac 	bl	80092a0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009548:	7b7b      	ldrb	r3, [r7, #13]
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	b21a      	sxth	r2, r3
 800954e:	7b3b      	ldrb	r3, [r7, #12]
 8009550:	b21b      	sxth	r3, r3
 8009552:	4313      	orrs	r3, r2
 8009554:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	b2d8      	uxtb	r0, r3
 800955a:	f107 020c 	add.w	r2, r7, #12
 800955e:	2302      	movs	r3, #2
 8009560:	21a8      	movs	r1, #168	; 0xa8
 8009562:	f7ff fe9d 	bl	80092a0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009566:	7b7b      	ldrb	r3, [r7, #13]
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	b21a      	sxth	r2, r3
 800956c:	7b3b      	ldrb	r3, [r7, #12]
 800956e:	b21b      	sxth	r3, r3
 8009570:	4313      	orrs	r3, r2
 8009572:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8009574:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009578:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009586:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800958a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009598:	ee67 6a27 	vmul.f32	s13, s14, s15
 800959c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80095a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095c2:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80095c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80095ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80095ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095d2:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80095d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80095da:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009620 <HTS221_H_ReadHumidity+0x130>
 80095de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e6:	dd01      	ble.n	80095ec <HTS221_H_ReadHumidity+0xfc>
 80095e8:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <HTS221_H_ReadHumidity+0x134>)
 80095ea:	e00a      	b.n	8009602 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80095ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80095f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f8:	d502      	bpl.n	8009600 <HTS221_H_ReadHumidity+0x110>
 80095fa:	f04f 0300 	mov.w	r3, #0
 80095fe:	e000      	b.n	8009602 <HTS221_H_ReadHumidity+0x112>
 8009600:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8009602:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8009604:	edd7 7a04 	vldr	s15, [r7, #16]
 8009608:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800960c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009610:	eef0 7a66 	vmov.f32	s15, s13
}
 8009614:	eeb0 0a67 	vmov.f32	s0, s15
 8009618:	3720      	adds	r7, #32
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	447a0000 	.word	0x447a0000
 8009624:	447a0000 	.word	0x447a0000

08009628 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	6039      	str	r1, [r7, #0]
 8009632:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2120      	movs	r1, #32
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff fe12 	bl	8009264 <SENSOR_IO_Read>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	f023 0304 	bic.w	r3, r3, #4
 800964a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	f043 0304 	orr.w	r3, r3, #4
 8009652:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800966a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	b2db      	uxtb	r3, r3
 8009670:	7bfa      	ldrb	r2, [r7, #15]
 8009672:	2120      	movs	r1, #32
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff fddb 	bl	8009230 <SENSOR_IO_Write>
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b088      	sub	sp, #32
 8009686:	af00      	add	r7, sp, #0
 8009688:	4603      	mov	r3, r0
 800968a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800968c:	88fb      	ldrh	r3, [r7, #6]
 800968e:	b2d8      	uxtb	r0, r3
 8009690:	f107 0208 	add.w	r2, r7, #8
 8009694:	2302      	movs	r3, #2
 8009696:	21b2      	movs	r1, #178	; 0xb2
 8009698:	f7ff fe02 	bl	80092a0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800969c:	88fb      	ldrh	r3, [r7, #6]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2135      	movs	r1, #53	; 0x35
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fdde 	bl	8009264 <SENSOR_IO_Read>
 80096a8:	4603      	mov	r3, r0
 80096aa:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80096ac:	7ffb      	ldrb	r3, [r7, #31]
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	b21b      	sxth	r3, r3
 80096b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096b6:	b21a      	sxth	r2, r3
 80096b8:	7a3b      	ldrb	r3, [r7, #8]
 80096ba:	b21b      	sxth	r3, r3
 80096bc:	4313      	orrs	r3, r2
 80096be:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80096c0:	7ffb      	ldrb	r3, [r7, #31]
 80096c2:	019b      	lsls	r3, r3, #6
 80096c4:	b21b      	sxth	r3, r3
 80096c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ca:	b21a      	sxth	r2, r3
 80096cc:	7a7b      	ldrb	r3, [r7, #9]
 80096ce:	b21b      	sxth	r3, r3
 80096d0:	4313      	orrs	r3, r2
 80096d2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80096d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80096d8:	10db      	asrs	r3, r3, #3
 80096da:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80096dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096e0:	10db      	asrs	r3, r3, #3
 80096e2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80096e4:	88fb      	ldrh	r3, [r7, #6]
 80096e6:	b2d8      	uxtb	r0, r3
 80096e8:	f107 0208 	add.w	r2, r7, #8
 80096ec:	2304      	movs	r3, #4
 80096ee:	21bc      	movs	r1, #188	; 0xbc
 80096f0:	f7ff fdd6 	bl	80092a0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80096f4:	7a7b      	ldrb	r3, [r7, #9]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	b21a      	sxth	r2, r3
 80096fa:	7a3b      	ldrb	r3, [r7, #8]
 80096fc:	b21b      	sxth	r3, r3
 80096fe:	4313      	orrs	r3, r2
 8009700:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	b21a      	sxth	r2, r3
 8009708:	7abb      	ldrb	r3, [r7, #10]
 800970a:	b21b      	sxth	r3, r3
 800970c:	4313      	orrs	r3, r2
 800970e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8009710:	88fb      	ldrh	r3, [r7, #6]
 8009712:	b2d8      	uxtb	r0, r3
 8009714:	f107 0208 	add.w	r2, r7, #8
 8009718:	2302      	movs	r3, #2
 800971a:	21aa      	movs	r1, #170	; 0xaa
 800971c:	f7ff fdc0 	bl	80092a0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009720:	7a7b      	ldrb	r3, [r7, #9]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	b21a      	sxth	r2, r3
 8009726:	7a3b      	ldrb	r3, [r7, #8]
 8009728:	b21b      	sxth	r3, r3
 800972a:	4313      	orrs	r3, r2
 800972c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800972e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009732:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009744:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009752:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009756:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800975a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800976c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800977c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	ee07 3a90 	vmov	s15, r3
}
 8009786:	eeb0 0a67 	vmov.f32	s0, s15
 800978a:	3720      	adds	r7, #32
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800979e:	2110      	movs	r1, #16
 80097a0:	20d4      	movs	r0, #212	; 0xd4
 80097a2:	f7ff fd5f 	bl	8009264 <SENSOR_IO_Read>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80097aa:	88fb      	ldrh	r3, [r7, #6]
 80097ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80097b6:	7bba      	ldrb	r2, [r7, #14]
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	461a      	mov	r2, r3
 80097c2:	2110      	movs	r1, #16
 80097c4:	20d4      	movs	r0, #212	; 0xd4
 80097c6:	f7ff fd33 	bl	8009230 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80097ca:	2112      	movs	r1, #18
 80097cc:	20d4      	movs	r0, #212	; 0xd4
 80097ce:	f7ff fd49 	bl	8009264 <SENSOR_IO_Read>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80097d6:	88fb      	ldrh	r3, [r7, #6]
 80097d8:	0a1b      	lsrs	r3, r3, #8
 80097da:	b29b      	uxth	r3, r3
 80097dc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80097e4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80097e6:	7bba      	ldrb	r2, [r7, #14]
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	461a      	mov	r2, r3
 80097f2:	2112      	movs	r1, #18
 80097f4:	20d4      	movs	r0, #212	; 0xd4
 80097f6:	f7ff fd1b 	bl	8009230 <SENSOR_IO_Write>
}
 80097fa:	bf00      	nop
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8009808:	2300      	movs	r3, #0
 800980a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800980c:	2110      	movs	r1, #16
 800980e:	20d4      	movs	r0, #212	; 0xd4
 8009810:	f7ff fd28 	bl	8009264 <SENSOR_IO_Read>
 8009814:	4603      	mov	r3, r0
 8009816:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8009818:	79fb      	ldrb	r3, [r7, #7]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	461a      	mov	r2, r3
 8009824:	2110      	movs	r1, #16
 8009826:	20d4      	movs	r0, #212	; 0xd4
 8009828:	f7ff fd02 	bl	8009230 <SENSOR_IO_Write>
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009838:	f7ff fcf0 	bl	800921c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800983c:	210f      	movs	r1, #15
 800983e:	20d4      	movs	r0, #212	; 0xd4
 8009840:	f7ff fd10 	bl	8009264 <SENSOR_IO_Read>
 8009844:	4603      	mov	r3, r0
}
 8009846:	4618      	mov	r0, r3
 8009848:	bd80      	pop	{r7, pc}

0800984a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	4603      	mov	r3, r0
 8009852:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009858:	2115      	movs	r1, #21
 800985a:	20d4      	movs	r0, #212	; 0xd4
 800985c:	f7ff fd02 	bl	8009264 <SENSOR_IO_Read>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	f023 0310 	bic.w	r3, r3, #16
 800986a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	f043 0310 	orr.w	r3, r3, #16
 8009878:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	461a      	mov	r2, r3
 800987e:	2115      	movs	r1, #21
 8009880:	20d4      	movs	r0, #212	; 0xd4
 8009882:	f7ff fcd5 	bl	8009230 <SENSOR_IO_Write>
}
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009898:	2300      	movs	r3, #0
 800989a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80098a6:	2110      	movs	r1, #16
 80098a8:	20d4      	movs	r0, #212	; 0xd4
 80098aa:	f7ff fcdb 	bl	8009264 <SENSOR_IO_Read>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80098b2:	f107 0208 	add.w	r2, r7, #8
 80098b6:	2306      	movs	r3, #6
 80098b8:	2128      	movs	r1, #40	; 0x28
 80098ba:	20d4      	movs	r0, #212	; 0xd4
 80098bc:	f7ff fcf0 	bl	80092a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80098c0:	2300      	movs	r3, #0
 80098c2:	77fb      	strb	r3, [r7, #31]
 80098c4:	e01c      	b.n	8009900 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80098c6:	7ffb      	ldrb	r3, [r7, #31]
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	3301      	adds	r3, #1
 80098cc:	3320      	adds	r3, #32
 80098ce:	443b      	add	r3, r7
 80098d0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	b29a      	uxth	r2, r3
 80098da:	7ffb      	ldrb	r3, [r7, #31]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	3320      	adds	r3, #32
 80098e0:	443b      	add	r3, r7
 80098e2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4413      	add	r3, r2
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	7ffb      	ldrb	r3, [r7, #31]
 80098ee:	b212      	sxth	r2, r2
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	3320      	adds	r3, #32
 80098f4:	443b      	add	r3, r7
 80098f6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80098fa:	7ffb      	ldrb	r3, [r7, #31]
 80098fc:	3301      	adds	r3, #1
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	7ffb      	ldrb	r3, [r7, #31]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d9df      	bls.n	80098c6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	f003 030c 	and.w	r3, r3, #12
 800990c:	2b0c      	cmp	r3, #12
 800990e:	d829      	bhi.n	8009964 <LSM6DSL_AccReadXYZ+0xd4>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <LSM6DSL_AccReadXYZ+0x88>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	0800994d 	.word	0x0800994d
 800991c:	08009965 	.word	0x08009965
 8009920:	08009965 	.word	0x08009965
 8009924:	08009965 	.word	0x08009965
 8009928:	0800995f 	.word	0x0800995f
 800992c:	08009965 	.word	0x08009965
 8009930:	08009965 	.word	0x08009965
 8009934:	08009965 	.word	0x08009965
 8009938:	08009953 	.word	0x08009953
 800993c:	08009965 	.word	0x08009965
 8009940:	08009965 	.word	0x08009965
 8009944:	08009965 	.word	0x08009965
 8009948:	08009959 	.word	0x08009959
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800994c:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <LSM6DSL_AccReadXYZ+0x120>)
 800994e:	61bb      	str	r3, [r7, #24]
    break;
 8009950:	e008      	b.n	8009964 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009952:	4b18      	ldr	r3, [pc, #96]	; (80099b4 <LSM6DSL_AccReadXYZ+0x124>)
 8009954:	61bb      	str	r3, [r7, #24]
    break;
 8009956:	e005      	b.n	8009964 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009958:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <LSM6DSL_AccReadXYZ+0x128>)
 800995a:	61bb      	str	r3, [r7, #24]
    break;
 800995c:	e002      	b.n	8009964 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800995e:	4b17      	ldr	r3, [pc, #92]	; (80099bc <LSM6DSL_AccReadXYZ+0x12c>)
 8009960:	61bb      	str	r3, [r7, #24]
    break;    
 8009962:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009964:	2300      	movs	r3, #0
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	e01a      	b.n	80099a0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800996a:	7ffb      	ldrb	r3, [r7, #31]
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	3320      	adds	r3, #32
 8009970:	443b      	add	r3, r7
 8009972:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800997e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009986:	7ffb      	ldrb	r3, [r7, #31]
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009992:	ee17 2a90 	vmov	r2, s15
 8009996:	b212      	sxth	r2, r2
 8009998:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800999a:	7ffb      	ldrb	r3, [r7, #31]
 800999c:	3301      	adds	r3, #1
 800999e:	77fb      	strb	r3, [r7, #31]
 80099a0:	7ffb      	ldrb	r3, [r7, #31]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d9e1      	bls.n	800996a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	3720      	adds	r7, #32
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	3d79db23 	.word	0x3d79db23
 80099b4:	3df9db23 	.word	0x3df9db23
 80099b8:	3e79db23 	.word	0x3e79db23
 80099bc:	3ef9db23 	.word	0x3ef9db23

080099c0 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	2b2f      	cmp	r3, #47	; 0x2f
 80099ce:	d906      	bls.n	80099de <Hex2Num+0x1e>
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	2b39      	cmp	r3, #57	; 0x39
 80099d4:	d803      	bhi.n	80099de <Hex2Num+0x1e>
        return a - '0';
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	3b30      	subs	r3, #48	; 0x30
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	e014      	b.n	8009a08 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	2b60      	cmp	r3, #96	; 0x60
 80099e2:	d906      	bls.n	80099f2 <Hex2Num+0x32>
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b66      	cmp	r3, #102	; 0x66
 80099e8:	d803      	bhi.n	80099f2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	3b57      	subs	r3, #87	; 0x57
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	e00a      	b.n	8009a08 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	2b40      	cmp	r3, #64	; 0x40
 80099f6:	d906      	bls.n	8009a06 <Hex2Num+0x46>
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	2b46      	cmp	r3, #70	; 0x46
 80099fc:	d803      	bhi.n	8009a06 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	3b37      	subs	r3, #55	; 0x37
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	e000      	b.n	8009a08 <Hex2Num+0x48>
    }

    return 0;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a26:	e012      	b.n	8009a4e <ParseHexNumber+0x3a>
        sum <<= 4;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	011b      	lsls	r3, r3, #4
 8009a2c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff ffc4 	bl	80099c0 <Hex2Num>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
        ptr++;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	3301      	adds	r3, #1
 8009a46:	607b      	str	r3, [r7, #4]
        i++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b2f      	cmp	r3, #47	; 0x2f
 8009a54:	d903      	bls.n	8009a5e <ParseHexNumber+0x4a>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b39      	cmp	r3, #57	; 0x39
 8009a5c:	d9e4      	bls.n	8009a28 <ParseHexNumber+0x14>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b60      	cmp	r3, #96	; 0x60
 8009a64:	d903      	bls.n	8009a6e <ParseHexNumber+0x5a>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b66      	cmp	r3, #102	; 0x66
 8009a6c:	d9dc      	bls.n	8009a28 <ParseHexNumber+0x14>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b40      	cmp	r3, #64	; 0x40
 8009a74:	d903      	bls.n	8009a7e <ParseHexNumber+0x6a>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b46      	cmp	r3, #70	; 0x46
 8009a7c:	d9d4      	bls.n	8009a28 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <ParseHexNumber+0x76>
        *cnt = i;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	7afa      	ldrb	r2, [r7, #11]
 8009a88:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b2d      	cmp	r3, #45	; 0x2d
 8009ab0:	d119      	bne.n	8009ae6 <ParseNumber+0x52>
        minus = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	607b      	str	r3, [r7, #4]
        i++;
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009ac2:	e010      	b.n	8009ae6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	461a      	mov	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	3b30      	subs	r3, #48	; 0x30
 8009ad6:	4413      	add	r3, r2
 8009ad8:	60bb      	str	r3, [r7, #8]
        ptr++;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3301      	adds	r3, #1
 8009ade:	607b      	str	r3, [r7, #4]
        i++;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b2f      	cmp	r3, #47	; 0x2f
 8009aec:	d903      	bls.n	8009af6 <ParseNumber+0x62>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b39      	cmp	r3, #57	; 0x39
 8009af4:	d9e6      	bls.n	8009ac4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <ParseNumber+0x6e>
        *cnt = i;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	7bba      	ldrb	r2, [r7, #14]
 8009b00:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <ParseNumber+0x7a>
        return 0 - sum;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	425b      	negs	r3, r3
 8009b0c:	e000      	b.n	8009b10 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8009b0e:	68bb      	ldr	r3, [r7, #8]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b2a:	e019      	b.n	8009b60 <ParseMAC+0x44>
    hexcnt = 1;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b3a      	cmp	r3, #58	; 0x3a
 8009b36:	d00e      	beq.n	8009b56 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8009b38:	f107 030e 	add.w	r3, r7, #14
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ff68 	bl	8009a14 <ParseHexNumber>
 8009b44:	4601      	mov	r1, r0
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	73fa      	strb	r2, [r7, #15]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	4413      	add	r3, r2
 8009b52:	b2ca      	uxtb	r2, r1
 8009b54:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e1      	bne.n	8009b2c <ParseMAC+0x10>
  }
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8009b80:	e019      	b.n	8009bb6 <ParseIP+0x44>
    hexcnt = 1;
 8009b82:	2301      	movs	r3, #1
 8009b84:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b8c:	d00e      	beq.n	8009bac <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8009b8e:	f107 030e 	add.w	r3, r7, #14
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff ff7d 	bl	8009a94 <ParseNumber>
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	73fa      	strb	r2, [r7, #15]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	b2ca      	uxtb	r2, r1
 8009baa:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e1      	bne.n	8009b82 <ParseIP+0x10>
  }
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	3302      	adds	r3, #2
 8009bda:	4934      	ldr	r1, [pc, #208]	; (8009cac <AT_ParseInfo+0xe4>)
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f008 f96f 	bl	8011ec0 <strtok>
 8009be2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8009be4:	e05a      	b.n	8009c9c <AT_ParseInfo+0xd4>
    switch (num++) {
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	72fa      	strb	r2, [r7, #11]
 8009bec:	2b06      	cmp	r3, #6
 8009bee:	d84f      	bhi.n	8009c90 <AT_ParseInfo+0xc8>
 8009bf0:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <AT_ParseInfo+0x30>)
 8009bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf6:	bf00      	nop
 8009bf8:	08009c15 	.word	0x08009c15
 8009bfc:	08009c23 	.word	0x08009c23
 8009c00:	08009c33 	.word	0x08009c33
 8009c04:	08009c43 	.word	0x08009c43
 8009c08:	08009c53 	.word	0x08009c53
 8009c0c:	08009c63 	.word	0x08009c63
 8009c10:	08009c77 	.word	0x08009c77
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2220      	movs	r2, #32
 8009c18:	68f9      	ldr	r1, [r7, #12]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f008 f93c 	bl	8011e98 <strncpy>
      break;
 8009c20:	e037      	b.n	8009c92 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3320      	adds	r3, #32
 8009c26:	2218      	movs	r2, #24
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f008 f934 	bl	8011e98 <strncpy>
      break;
 8009c30:	e02f      	b.n	8009c92 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3338      	adds	r3, #56	; 0x38
 8009c36:	2210      	movs	r2, #16
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f008 f92c 	bl	8011e98 <strncpy>
      break;
 8009c40:	e027      	b.n	8009c92 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3348      	adds	r3, #72	; 0x48
 8009c46:	2210      	movs	r2, #16
 8009c48:	68f9      	ldr	r1, [r7, #12]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f008 f924 	bl	8011e98 <strncpy>
      break;
 8009c50:	e01f      	b.n	8009c92 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3358      	adds	r3, #88	; 0x58
 8009c56:	2210      	movs	r2, #16
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f008 f91c 	bl	8011e98 <strncpy>
      break;
 8009c60:	e017      	b.n	8009c92 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8009c62:	2100      	movs	r1, #0
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff ff15 	bl	8009a94 <ParseNumber>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8009c74:	e00d      	b.n	8009c92 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8009c76:	490e      	ldr	r1, [pc, #56]	; (8009cb0 <AT_ParseInfo+0xe8>)
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f008 f921 	bl	8011ec0 <strtok>
 8009c7e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3368      	adds	r3, #104	; 0x68
 8009c84:	2220      	movs	r2, #32
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f008 f905 	bl	8011e98 <strncpy>
      break;
 8009c8e:	e000      	b.n	8009c92 <AT_ParseInfo+0xca>

    default: break;
 8009c90:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009c92:	4906      	ldr	r1, [pc, #24]	; (8009cac <AT_ParseInfo+0xe4>)
 8009c94:	2000      	movs	r0, #0
 8009c96:	f008 f913 	bl	8011ec0 <strtok>
 8009c9a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1a1      	bne.n	8009be6 <AT_ParseInfo+0x1e>
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	08015ba0 	.word	0x08015ba0
 8009cb0:	08015ba4 	.word	0x08015ba4

08009cb4 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	4952      	ldr	r1, [pc, #328]	; (8009e10 <AT_ParseConnSettings+0x15c>)
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f008 f8f9 	bl	8011ec0 <strtok>
 8009cce:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8009cd0:	e095      	b.n	8009dfe <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	73fa      	strb	r2, [r7, #15]
 8009cd8:	2b0b      	cmp	r3, #11
 8009cda:	d87f      	bhi.n	8009ddc <AT_ParseConnSettings+0x128>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <AT_ParseConnSettings+0x30>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009d15 	.word	0x08009d15
 8009ce8:	08009d23 	.word	0x08009d23
 8009cec:	08009d33 	.word	0x08009d33
 8009cf0:	08009d47 	.word	0x08009d47
 8009cf4:	08009d5b 	.word	0x08009d5b
 8009cf8:	08009d6f 	.word	0x08009d6f
 8009cfc:	08009d7d 	.word	0x08009d7d
 8009d00:	08009d8b 	.word	0x08009d8b
 8009d04:	08009d99 	.word	0x08009d99
 8009d08:	08009da7 	.word	0x08009da7
 8009d0c:	08009db5 	.word	0x08009db5
 8009d10:	08009dc9 	.word	0x08009dc9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2221      	movs	r2, #33	; 0x21
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f008 f8bc 	bl	8011e98 <strncpy>
      break;
 8009d20:	e05d      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	3321      	adds	r3, #33	; 0x21
 8009d26:	2221      	movs	r2, #33	; 0x21
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f008 f8b4 	bl	8011e98 <strncpy>
      break;
 8009d30:	e055      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8009d32:	2100      	movs	r1, #0
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f7ff fead 	bl	8009a94 <ParseNumber>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8009d44:	e04b      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8009d46:	2100      	movs	r1, #0
 8009d48:	68b8      	ldr	r0, [r7, #8]
 8009d4a:	f7ff fea3 	bl	8009a94 <ParseNumber>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8009d58:	e041      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f7ff fe99 	bl	8009a94 <ParseNumber>
 8009d62:	4603      	mov	r3, r0
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8009d6c:	e037      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	3348      	adds	r3, #72	; 0x48
 8009d72:	4619      	mov	r1, r3
 8009d74:	68b8      	ldr	r0, [r7, #8]
 8009d76:	f7ff fefc 	bl	8009b72 <ParseIP>
      break;
 8009d7a:	e030      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	334c      	adds	r3, #76	; 0x4c
 8009d80:	4619      	mov	r1, r3
 8009d82:	68b8      	ldr	r0, [r7, #8]
 8009d84:	f7ff fef5 	bl	8009b72 <ParseIP>
      break;
 8009d88:	e029      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	3350      	adds	r3, #80	; 0x50
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68b8      	ldr	r0, [r7, #8]
 8009d92:	f7ff feee 	bl	8009b72 <ParseIP>
      break;
 8009d96:	e022      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	3354      	adds	r3, #84	; 0x54
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	68b8      	ldr	r0, [r7, #8]
 8009da0:	f7ff fee7 	bl	8009b72 <ParseIP>
      break;
 8009da4:	e01b      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	3358      	adds	r3, #88	; 0x58
 8009daa:	4619      	mov	r1, r3
 8009dac:	68b8      	ldr	r0, [r7, #8]
 8009dae:	f7ff fee0 	bl	8009b72 <ParseIP>
      break;
 8009db2:	e014      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8009db4:	2100      	movs	r1, #0
 8009db6:	68b8      	ldr	r0, [r7, #8]
 8009db8:	f7ff fe6c 	bl	8009a94 <ParseNumber>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8009dc6:	e00a      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8009dc8:	2100      	movs	r1, #0
 8009dca:	68b8      	ldr	r0, [r7, #8]
 8009dcc:	f7ff fe62 	bl	8009a94 <ParseNumber>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8009dda:	e000      	b.n	8009dde <AT_ParseConnSettings+0x12a>

    default:
      break;
 8009ddc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8009dde:	490c      	ldr	r1, [pc, #48]	; (8009e10 <AT_ParseConnSettings+0x15c>)
 8009de0:	2000      	movs	r0, #0
 8009de2:	f008 f86d 	bl	8011ec0 <strtok>
 8009de6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d007      	beq.n	8009dfe <AT_ParseConnSettings+0x14a>
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b2c      	cmp	r3, #44	; 0x2c
 8009df6:	d102      	bne.n	8009dfe <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f47f af66 	bne.w	8009cd2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	08015ba0 	.word	0x08015ba0

08009e14 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3302      	adds	r3, #2
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b31      	cmp	r3, #49	; 0x31
 8009e26:	bf0c      	ite	eq
 8009e28:	2301      	moveq	r3, #1
 8009e2a:	2300      	movne	r3, #0
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	701a      	strb	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8009e5a:	68b8      	ldr	r0, [r7, #8]
 8009e5c:	f7f6 fa08 	bl	8000270 <strlen>
 8009e60:	4603      	mov	r3, r0
 8009e62:	b299      	uxth	r1, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68b8      	ldr	r0, [r7, #8]
 8009e6e:	47a0      	blx	r4
 8009e70:	4603      	mov	r3, r0
 8009e72:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd3e      	ble.n	8009ef8 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009e86:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8009e92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	dd27      	ble.n	8009eea <AT_ExecuteCommand+0xaa>
 8009e9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009e9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ea2:	dc22      	bgt.n	8009eea <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8009ea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ea8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009eac:	d105      	bne.n	8009eba <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8009eae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8009eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8009ec6:	490f      	ldr	r1, [pc, #60]	; (8009f04 <AT_ExecuteCommand+0xc4>)
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f008 f855 	bl	8011f78 <strstr>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e010      	b.n	8009efa <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009ed8:	490b      	ldr	r1, [pc, #44]	; (8009f08 <AT_ExecuteCommand+0xc8>)
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f008 f84c 	bl	8011f78 <strstr>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009ee6:	2305      	movs	r3, #5
 8009ee8:	e007      	b.n	8009efa <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009eea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009eee:	f113 0f04 	cmn.w	r3, #4
 8009ef2:	d101      	bne.n	8009ef8 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	e000      	b.n	8009efa <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8009ef8:	2304      	movs	r3, #4
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd90      	pop	{r4, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	08015bb4 	.word	0x08015bb4
 8009f08:	08015bc0 	.word	0x08015bc0

08009f0c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8009f26:	68b8      	ldr	r0, [r7, #8]
 8009f28:	f7f6 f9a2 	bl	8000270 <strlen>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8009f30:	8a7b      	ldrh	r3, [r7, #18]
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <AT_RequestSendData+0x32>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	e053      	b.n	8009fe6 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f4a:	8a79      	ldrh	r1, [r7, #18]
 8009f4c:	68b8      	ldr	r0, [r7, #8]
 8009f4e:	4798      	blx	r3
 8009f50:	4603      	mov	r3, r0
 8009f52:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8009f54:	8a3a      	ldrh	r2, [r7, #16]
 8009f56:	8a7b      	ldrh	r3, [r7, #18]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d143      	bne.n	8009fe4 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f68:	8879      	ldrh	r1, [r7, #2]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8009f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f76:	887b      	ldrh	r3, [r7, #2]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d131      	bne.n	8009fe0 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6a38      	ldr	r0, [r7, #32]
 8009f8c:	4798      	blx	r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8009f92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dd19      	ble.n	8009fce <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8009f9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f9e:	6a3a      	ldr	r2, [r7, #32]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8009fa6:	4912      	ldr	r1, [pc, #72]	; (8009ff0 <AT_RequestSendData+0xe4>)
 8009fa8:	6a38      	ldr	r0, [r7, #32]
 8009faa:	f007 ffe5 	bl	8011f78 <strstr>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e016      	b.n	8009fe6 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8009fb8:	490e      	ldr	r1, [pc, #56]	; (8009ff4 <AT_RequestSendData+0xe8>)
 8009fba:	6a38      	ldr	r0, [r7, #32]
 8009fbc:	f007 ffdc 	bl	8011f78 <strstr>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8009fc6:	2305      	movs	r3, #5
 8009fc8:	e00d      	b.n	8009fe6 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e00b      	b.n	8009fe6 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8009fce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fd2:	f113 0f04 	cmn.w	r3, #4
 8009fd6:	d101      	bne.n	8009fdc <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8009fd8:	2306      	movs	r3, #6
 8009fda:	e004      	b.n	8009fe6 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8009fdc:	2302      	movs	r3, #2
 8009fde:	e002      	b.n	8009fe6 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e000      	b.n	8009fe6 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8009fe4:	2304      	movs	r3, #4
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	08015bb4 	.word	0x08015bb4
 8009ff4:	08015bc0 	.word	0x08015bc0

08009ff8 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
 800a004:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a00c:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800a014:	68b8      	ldr	r0, [r7, #8]
 800a016:	f7f6 f92b 	bl	8000270 <strlen>
 800a01a:	4603      	mov	r3, r0
 800a01c:	b299      	uxth	r1, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800a024:	461a      	mov	r2, r3
 800a026:	68b8      	ldr	r0, [r7, #8]
 800a028:	47a0      	blx	r4
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dd6f      	ble.n	800a110 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800a03c:	2100      	movs	r1, #0
 800a03e:	6938      	ldr	r0, [r7, #16]
 800a040:	4798      	blx	r3
 800a042:	4603      	mov	r3, r0
 800a044:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b0d      	cmp	r3, #13
 800a04c:	d104      	bne.n	800a058 <AT_RequestReceiveData+0x60>
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	3301      	adds	r3, #1
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b0a      	cmp	r3, #10
 800a056:	d001      	beq.n	800a05c <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800a058:	2304      	movs	r3, #4
 800a05a:	e05a      	b.n	800a112 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	3b02      	subs	r3, #2
 800a060:	617b      	str	r3, [r7, #20]
    p+=2;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3302      	adds	r3, #2
 800a066:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2b07      	cmp	r3, #7
 800a06c:	d94a      	bls.n	800a104 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800a06e:	e002      	b.n	800a076 <AT_RequestReceiveData+0x7e>
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3b01      	subs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <AT_RequestReceiveData+0x92>
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	3b01      	subs	r3, #1
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4413      	add	r3, r2
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b15      	cmp	r3, #21
 800a088:	d0f2      	beq.n	800a070 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	4413      	add	r3, r2
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	3b08      	subs	r3, #8
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	491f      	ldr	r1, [pc, #124]	; (800a11c <AT_RequestReceiveData+0x124>)
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f007 ff6a 	bl	8011f78 <strstr>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d016      	beq.n	800a0d8 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b08      	subs	r3, #8
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	887a      	ldrh	r2, [r7, #2]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d202      	bcs.n	800a0c6 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	887a      	ldrh	r2, [r7, #2]
 800a0c4:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6939      	ldr	r1, [r7, #16]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f007 ffdf 	bl	8012092 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e01c      	b.n	800a112 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	3b04      	subs	r3, #4
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4413      	add	r3, r2
 800a0e0:	2204      	movs	r2, #4
 800a0e2:	490f      	ldr	r1, [pc, #60]	; (800a120 <AT_RequestReceiveData+0x128>)
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f007 fe93 	bl	8011e10 <memcmp>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d104      	bne.n	800a0fa <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a0f6:	2305      	movs	r3, #5
 800a0f8:	e00b      	b.n	800a112 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800a100:	2305      	movs	r3, #5
 800a102:	e006      	b.n	800a112 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f113 0f04 	cmn.w	r3, #4
 800a10a:	d101      	bne.n	800a110 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800a10c:	2306      	movs	r3, #6
 800a10e:	e000      	b.n	800a112 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800a110:	2304      	movs	r3, #4
}
 800a112:	4618      	mov	r0, r3
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	bd90      	pop	{r4, r7, pc}
 800a11a:	bf00      	nop
 800a11c:	08015bb4 	.word	0x08015bb4
 800a120:	08015bc8 	.word	0x08015bc8

0800a124 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a12c:	2302      	movs	r3, #2
 800a12e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f247 5230 	movw	r2, #30000	; 0x7530
 800a136:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a140:	2000      	movs	r0, #0
 800a142:	4798      	blx	r3
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d113      	bne.n	800a172 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a150:	461a      	mov	r2, r3
 800a152:	490a      	ldr	r1, [pc, #40]	; (800a17c <ES_WIFI_Init+0x58>)
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fe73 	bl	8009e40 <AT_ExecuteCommand>
 800a15a:	4603      	mov	r3, r0
 800a15c:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fd2b 	bl	8009bc8 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	08015bd0 	.word	0x08015bd0

0800a180 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <ES_WIFI_RegisterBusIO+0x2c>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d008      	beq.n	800a1ac <ES_WIFI_RegisterBusIO+0x2c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d005      	beq.n	800a1ac <ES_WIFI_RegisterBusIO+0x2c>
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <ES_WIFI_RegisterBusIO+0x2c>
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	e014      	b.n	800a1da <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
	...

0800a1e8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	4932      	ldr	r1, [pc, #200]	; (800a2c8 <ES_WIFI_Connect+0xe0>)
 800a200:	4618      	mov	r0, r3
 800a202:	f007 fd0d 	bl	8011c20 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a212:	461a      	mov	r2, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff fe13 	bl	8009e40 <AT_ExecuteCommand>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d14b      	bne.n	800a2bc <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	4927      	ldr	r1, [pc, #156]	; (800a2cc <ES_WIFI_Connect+0xe4>)
 800a22e:	4618      	mov	r0, r3
 800a230:	f007 fcf6 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a240:	461a      	mov	r2, r3
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff fdfc 	bl	8009e40 <AT_ExecuteCommand>
 800a248:	4603      	mov	r3, r0
 800a24a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d134      	bne.n	800a2bc <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a260:	78fa      	ldrb	r2, [r7, #3]
 800a262:	491b      	ldr	r1, [pc, #108]	; (800a2d0 <ES_WIFI_Connect+0xe8>)
 800a264:	4618      	mov	r0, r3
 800a266:	f007 fcdb 	bl	8011c20 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a276:	461a      	mov	r2, r3
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f7ff fde1 	bl	8009e40 <AT_ExecuteCommand>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d119      	bne.n	800a2bc <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a28e:	4911      	ldr	r1, [pc, #68]	; (800a2d4 <ES_WIFI_Connect+0xec>)
 800a290:	4618      	mov	r0, r3
 800a292:	f007 fcc5 	bl	8011c20 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fdcb 	bl	8009e40 <AT_ExecuteCommand>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d103      	bne.n	800a2bc <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	08015be8 	.word	0x08015be8
 800a2cc:	08015bf0 	.word	0x08015bf0
 800a2d0:	08015bf8 	.word	0x08015bf8
 800a2d4:	08015c00 	.word	0x08015c00

0800a2d8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2e6:	4911      	ldr	r1, [pc, #68]	; (800a32c <ES_WIFI_IsConnected+0x54>)
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f007 fc99 	bl	8011c20 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fd9f 	bl	8009e40 <AT_ExecuteCommand>
 800a302:	4603      	mov	r3, r0
 800a304:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	33d2      	adds	r3, #210	; 0xd2
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f7ff fd7b 	bl	8009e14 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	08015c04 	.word	0x08015c04

0800a330 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a33e:	4910      	ldr	r1, [pc, #64]	; (800a380 <ES_WIFI_GetNetworkSettings+0x50>)
 800a340:	4618      	mov	r0, r3
 800a342:	f007 fc6d 	bl	8011c20 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a352:	461a      	mov	r2, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff fd73 	bl	8009e40 <AT_ExecuteCommand>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d108      	bne.n	800a376 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	338d      	adds	r3, #141	; 0x8d
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f7ff fc9f 	bl	8009cb4 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800a376:	7bfb      	ldrb	r3, [r7, #15]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	08015c0c 	.word	0x08015c0c

0800a384 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a394:	4912      	ldr	r1, [pc, #72]	; (800a3e0 <ES_WIFI_GetMACAddress+0x5c>)
 800a396:	4618      	mov	r0, r3
 800a398:	f007 fc42 	bl	8011c20 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fd48 	bl	8009e40 <AT_ExecuteCommand>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10c      	bne.n	800a3d4 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	4908      	ldr	r1, [pc, #32]	; (800a3e4 <ES_WIFI_GetMACAddress+0x60>)
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f007 fd7b 	bl	8011ec0 <strtok>
 800a3ca:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	68b8      	ldr	r0, [r7, #8]
 800a3d0:	f7ff fba4 	bl	8009b1c <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	08015c5c 	.word	0x08015c5c
 800a3e4:	08015c60 	.word	0x08015c60

0800a3e8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <ES_WIFI_StartClientConnection+0x1e>
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b03      	cmp	r3, #3
 800a404:	d105      	bne.n	800a412 <ES_WIFI_StartClientConnection+0x2a>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <ES_WIFI_StartClientConnection+0x2a>
 800a40e:	2302      	movs	r3, #2
 800a410:	e0c1      	b.n	800a596 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	461a      	mov	r2, r3
 800a41e:	4960      	ldr	r1, [pc, #384]	; (800a5a0 <ES_WIFI_StartClientConnection+0x1b8>)
 800a420:	f007 fbfe 	bl	8011c20 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a430:	461a      	mov	r2, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7ff fd04 	bl	8009e40 <AT_ExecuteCommand>
 800a438:	4603      	mov	r3, r0
 800a43a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d114      	bne.n	800a46c <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	461a      	mov	r2, r3
 800a44e:	4955      	ldr	r1, [pc, #340]	; (800a5a4 <ES_WIFI_StartClientConnection+0x1bc>)
 800a450:	f007 fbe6 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a460:	461a      	mov	r2, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff fcec 	bl	8009e40 <AT_ExecuteCommand>
 800a468:	4603      	mov	r3, r0
 800a46a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d114      	bne.n	800a49c <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	889b      	ldrh	r3, [r3, #4]
 800a47c:	461a      	mov	r2, r3
 800a47e:	494a      	ldr	r1, [pc, #296]	; (800a5a8 <ES_WIFI_StartClientConnection+0x1c0>)
 800a480:	f007 fbce 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a490:	461a      	mov	r2, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fcd4 	bl	8009e40 <AT_ExecuteCommand>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d11c      	bne.n	800a4dc <ES_WIFI_StartClientConnection+0xf4>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <ES_WIFI_StartClientConnection+0xca>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d114      	bne.n	800a4dc <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	885b      	ldrh	r3, [r3, #2]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	493b      	ldr	r1, [pc, #236]	; (800a5ac <ES_WIFI_StartClientConnection+0x1c4>)
 800a4c0:	f007 fbae 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff fcb4 	bl	8009e40 <AT_ExecuteCommand>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d128      	bne.n	800a534 <ES_WIFI_StartClientConnection+0x14c>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <ES_WIFI_StartClientConnection+0x10a>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d120      	bne.n	800a534 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	799b      	ldrb	r3, [r3, #6]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	79db      	ldrb	r3, [r3, #7]
 800a502:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a508:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	9200      	str	r2, [sp, #0]
 800a512:	4623      	mov	r3, r4
 800a514:	460a      	mov	r2, r1
 800a516:	4926      	ldr	r1, [pc, #152]	; (800a5b0 <ES_WIFI_StartClientConnection+0x1c8>)
 800a518:	f007 fb82 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a528:	461a      	mov	r2, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff fc88 	bl	8009e40 <AT_ExecuteCommand>
 800a530:	4603      	mov	r3, r0
 800a532:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d116      	bne.n	800a568 <ES_WIFI_StartClientConnection+0x180>
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d112      	bne.n	800a568 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a548:	491a      	ldr	r1, [pc, #104]	; (800a5b4 <ES_WIFI_StartClientConnection+0x1cc>)
 800a54a:	4618      	mov	r0, r3
 800a54c:	f007 fb68 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a55c:	461a      	mov	r2, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff fc6e 	bl	8009e40 <AT_ExecuteCommand>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d112      	bne.n	800a594 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a574:	4910      	ldr	r1, [pc, #64]	; (800a5b8 <ES_WIFI_StartClientConnection+0x1d0>)
 800a576:	4618      	mov	r0, r3
 800a578:	f007 fb52 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a588:	461a      	mov	r2, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff fc58 	bl	8009e40 <AT_ExecuteCommand>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd90      	pop	{r4, r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08015cc4 	.word	0x08015cc4
 800a5a4:	08015ccc 	.word	0x08015ccc
 800a5a8:	08015cd4 	.word	0x08015cd4
 800a5ac:	08015cdc 	.word	0x08015cdc
 800a5b0:	08015ce4 	.word	0x08015ce4
 800a5b4:	08015cf4 	.word	0x08015cf4
 800a5b8:	08015cfc 	.word	0x08015cfc

0800a5bc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	607a      	str	r2, [r7, #4]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	72fb      	strb	r3, [r7, #11]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	e001      	b.n	800a5e4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800a5e4:	893b      	ldrh	r3, [r7, #8]
 800a5e6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a5ea:	d302      	bcc.n	800a5f2 <ES_WIFI_SendData+0x36>
 800a5ec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a5f0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	893a      	ldrh	r2, [r7, #8]
 800a5f6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5fe:	7afa      	ldrb	r2, [r7, #11]
 800a600:	4942      	ldr	r1, [pc, #264]	; (800a70c <ES_WIFI_SendData+0x150>)
 800a602:	4618      	mov	r0, r3
 800a604:	f007 fb0c 	bl	8011c20 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a614:	461a      	mov	r2, r3
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fc12 	bl	8009e40 <AT_ExecuteCommand>
 800a61c:	4603      	mov	r3, r0
 800a61e:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 800a620:	7cfb      	ldrb	r3, [r7, #19]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d15e      	bne.n	800a6e4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	4938      	ldr	r1, [pc, #224]	; (800a710 <ES_WIFI_SendData+0x154>)
 800a630:	4618      	mov	r0, r3
 800a632:	f007 faf5 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a642:	461a      	mov	r2, r3
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff fbfb 	bl	8009e40 <AT_ExecuteCommand>
 800a64a:	4603      	mov	r3, r0
 800a64c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a64e:	7cfb      	ldrb	r3, [r7, #19]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d13d      	bne.n	800a6d0 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a65a:	893a      	ldrh	r2, [r7, #8]
 800a65c:	492d      	ldr	r1, [pc, #180]	; (800a714 <ES_WIFI_SendData+0x158>)
 800a65e:	4618      	mov	r0, r3
 800a660:	f007 fade 	bl	8011c20 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a670:	893a      	ldrh	r2, [r7, #8]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff fc47 	bl	8009f0c <AT_RequestSendData>
 800a67e:	4603      	mov	r3, r0
 800a680:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800a682:	7cfb      	ldrb	r3, [r7, #19]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d119      	bne.n	800a6bc <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a68e:	4922      	ldr	r1, [pc, #136]	; (800a718 <ES_WIFI_SendData+0x15c>)
 800a690:	4618      	mov	r0, r3
 800a692:	f007 fc71 	bl	8011f78 <strstr>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d02c      	beq.n	800a6f6 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800a69c:	f640 024c 	movw	r2, #2124	; 0x84c
 800a6a0:	491e      	ldr	r1, [pc, #120]	; (800a71c <ES_WIFI_SendData+0x160>)
 800a6a2:	481f      	ldr	r0, [pc, #124]	; (800a720 <ES_WIFI_SendData+0x164>)
 800a6a4:	f007 fa1a 	bl	8011adc <iprintf>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	481c      	ldr	r0, [pc, #112]	; (800a724 <ES_WIFI_SendData+0x168>)
 800a6b2:	f007 fa13 	bl	8011adc <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	74fb      	strb	r3, [r7, #19]
 800a6ba:	e01c      	b.n	800a6f6 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 800a6bc:	f640 0252 	movw	r2, #2130	; 0x852
 800a6c0:	4916      	ldr	r1, [pc, #88]	; (800a71c <ES_WIFI_SendData+0x160>)
 800a6c2:	4817      	ldr	r0, [pc, #92]	; (800a720 <ES_WIFI_SendData+0x164>)
 800a6c4:	f007 fa0a 	bl	8011adc <iprintf>
 800a6c8:	4817      	ldr	r0, [pc, #92]	; (800a728 <ES_WIFI_SendData+0x16c>)
 800a6ca:	f007 fa6d 	bl	8011ba8 <puts>
 800a6ce:	e012      	b.n	800a6f6 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800a6d0:	f640 0257 	movw	r2, #2135	; 0x857
 800a6d4:	4911      	ldr	r1, [pc, #68]	; (800a71c <ES_WIFI_SendData+0x160>)
 800a6d6:	4812      	ldr	r0, [pc, #72]	; (800a720 <ES_WIFI_SendData+0x164>)
 800a6d8:	f007 fa00 	bl	8011adc <iprintf>
 800a6dc:	4813      	ldr	r0, [pc, #76]	; (800a72c <ES_WIFI_SendData+0x170>)
 800a6de:	f007 fa63 	bl	8011ba8 <puts>
 800a6e2:	e008      	b.n	800a6f6 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 800a6e4:	f640 025c 	movw	r2, #2140	; 0x85c
 800a6e8:	490c      	ldr	r1, [pc, #48]	; (800a71c <ES_WIFI_SendData+0x160>)
 800a6ea:	480d      	ldr	r0, [pc, #52]	; (800a720 <ES_WIFI_SendData+0x164>)
 800a6ec:	f007 f9f6 	bl	8011adc <iprintf>
 800a6f0:	480f      	ldr	r0, [pc, #60]	; (800a730 <ES_WIFI_SendData+0x174>)
 800a6f2:	f007 fa59 	bl	8011ba8 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800a6f6:	7cfb      	ldrb	r3, [r7, #19]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d102      	bne.n	800a702 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	2200      	movs	r2, #0
 800a700:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800a702:	7cfb      	ldrb	r3, [r7, #19]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	08015cc4 	.word	0x08015cc4
 800a710:	08015e7c 	.word	0x08015e7c
 800a714:	08015e84 	.word	0x08015e84
 800a718:	08015e90 	.word	0x08015e90
 800a71c:	08015d54 	.word	0x08015d54
 800a720:	08015d70 	.word	0x08015d70
 800a724:	08015e98 	.word	0x08015e98
 800a728:	08015eb4 	.word	0x08015eb4
 800a72c:	08015ed0 	.word	0x08015ed0
 800a730:	08015ee4 	.word	0x08015ee4

0800a734 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af02      	add	r7, sp, #8
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	461a      	mov	r2, r3
 800a740:	460b      	mov	r3, r1
 800a742:	72fb      	strb	r3, [r7, #11]
 800a744:	4613      	mov	r3, r2
 800a746:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800a748:	2302      	movs	r3, #2
 800a74a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800a752:	2301      	movs	r3, #1
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	e001      	b.n	800a75c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800a75c:	893b      	ldrh	r3, [r7, #8]
 800a75e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800a762:	f200 808b 	bhi.w	800a87c <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a76c:	7afa      	ldrb	r2, [r7, #11]
 800a76e:	4946      	ldr	r1, [pc, #280]	; (800a888 <ES_WIFI_ReceiveData+0x154>)
 800a770:	4618      	mov	r0, r3
 800a772:	f007 fa55 	bl	8011c20 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a782:	461a      	mov	r2, r3
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff fb5b 	bl	8009e40 <AT_ExecuteCommand>
 800a78a:	4603      	mov	r3, r0
 800a78c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 800a78e:	7cfb      	ldrb	r3, [r7, #19]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d165      	bne.n	800a860 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a79a:	893a      	ldrh	r2, [r7, #8]
 800a79c:	493b      	ldr	r1, [pc, #236]	; (800a88c <ES_WIFI_ReceiveData+0x158>)
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f007 fa3e 	bl	8011c20 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff fb44 	bl	8009e40 <AT_ExecuteCommand>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800a7bc:	7cfb      	ldrb	r3, [r7, #19]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d141      	bne.n	800a846 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	4931      	ldr	r1, [pc, #196]	; (800a890 <ES_WIFI_ReceiveData+0x15c>)
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f007 fa27 	bl	8011c20 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7de:	461a      	mov	r2, r3
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff fb2d 	bl	8009e40 <AT_ExecuteCommand>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800a7ea:	7cfb      	ldrb	r3, [r7, #19]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d120      	bne.n	800a832 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7f6:	4927      	ldr	r1, [pc, #156]	; (800a894 <ES_WIFI_ReceiveData+0x160>)
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f007 fa11 	bl	8011c20 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800a804:	893a      	ldrh	r2, [r7, #8]
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4613      	mov	r3, r2
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f7ff fbf2 	bl	8009ff8 <AT_RequestReceiveData>
 800a814:	4603      	mov	r3, r0
 800a816:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 800a818:	7cfb      	ldrb	r3, [r7, #19]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d02e      	beq.n	800a87c <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 800a81e:	f640 02ed 	movw	r2, #2285	; 0x8ed
 800a822:	491d      	ldr	r1, [pc, #116]	; (800a898 <ES_WIFI_ReceiveData+0x164>)
 800a824:	481d      	ldr	r0, [pc, #116]	; (800a89c <ES_WIFI_ReceiveData+0x168>)
 800a826:	f007 f959 	bl	8011adc <iprintf>
 800a82a:	481d      	ldr	r0, [pc, #116]	; (800a8a0 <ES_WIFI_ReceiveData+0x16c>)
 800a82c:	f007 f9bc 	bl	8011ba8 <puts>
 800a830:	e024      	b.n	800a87c <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800a832:	f640 02f2 	movw	r2, #2290	; 0x8f2
 800a836:	4918      	ldr	r1, [pc, #96]	; (800a898 <ES_WIFI_ReceiveData+0x164>)
 800a838:	4818      	ldr	r0, [pc, #96]	; (800a89c <ES_WIFI_ReceiveData+0x168>)
 800a83a:	f007 f94f 	bl	8011adc <iprintf>
 800a83e:	4819      	ldr	r0, [pc, #100]	; (800a8a4 <ES_WIFI_ReceiveData+0x170>)
 800a840:	f007 f9b2 	bl	8011ba8 <puts>
 800a844:	e01a      	b.n	800a87c <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800a846:	f640 02f7 	movw	r2, #2295	; 0x8f7
 800a84a:	4913      	ldr	r1, [pc, #76]	; (800a898 <ES_WIFI_ReceiveData+0x164>)
 800a84c:	4813      	ldr	r0, [pc, #76]	; (800a89c <ES_WIFI_ReceiveData+0x168>)
 800a84e:	f007 f945 	bl	8011adc <iprintf>
 800a852:	4815      	ldr	r0, [pc, #84]	; (800a8a8 <ES_WIFI_ReceiveData+0x174>)
 800a854:	f007 f9a8 	bl	8011ba8 <puts>
        *Receivedlen = 0;
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2200      	movs	r2, #0
 800a85c:	801a      	strh	r2, [r3, #0]
 800a85e:	e00d      	b.n	800a87c <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 800a860:	f640 02fd 	movw	r2, #2301	; 0x8fd
 800a864:	490c      	ldr	r1, [pc, #48]	; (800a898 <ES_WIFI_ReceiveData+0x164>)
 800a866:	480d      	ldr	r0, [pc, #52]	; (800a89c <ES_WIFI_ReceiveData+0x168>)
 800a868:	f007 f938 	bl	8011adc <iprintf>
 800a86c:	480f      	ldr	r0, [pc, #60]	; (800a8ac <ES_WIFI_ReceiveData+0x178>)
 800a86e:	f007 f99b 	bl	8011ba8 <puts>
      issue15++;
 800a872:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <ES_WIFI_ReceiveData+0x17c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	4a0d      	ldr	r2, [pc, #52]	; (800a8b0 <ES_WIFI_ReceiveData+0x17c>)
 800a87a:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800a87c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	08015cc4 	.word	0x08015cc4
 800a88c:	08015f08 	.word	0x08015f08
 800a890:	08015f10 	.word	0x08015f10
 800a894:	08015f18 	.word	0x08015f18
 800a898:	08015d54 	.word	0x08015d54
 800a89c:	08015d70 	.word	0x08015d70
 800a8a0:	08015f1c 	.word	0x08015f1c
 800a8a4:	08015f3c 	.word	0x08015f3c
 800a8a8:	08015f54 	.word	0x08015f54
 800a8ac:	08015f74 	.word	0x08015f74
 800a8b0:	20001004 	.word	0x20001004

0800a8b4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08c      	sub	sp, #48	; 0x30
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800a8bc:	4b57      	ldr	r3, [pc, #348]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8c0:	4a56      	ldr	r2, [pc, #344]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a8c8:	4b54      	ldr	r3, [pc, #336]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8d0:	61bb      	str	r3, [r7, #24]
 800a8d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8d4:	4b51      	ldr	r3, [pc, #324]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d8:	4a50      	ldr	r2, [pc, #320]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8da:	f043 0302 	orr.w	r3, r3, #2
 800a8de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8e0:	4b4e      	ldr	r3, [pc, #312]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8ec:	4b4b      	ldr	r3, [pc, #300]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f0:	4a4a      	ldr	r2, [pc, #296]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8f2:	f043 0304 	orr.w	r3, r3, #4
 800a8f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8f8:	4b48      	ldr	r3, [pc, #288]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	613b      	str	r3, [r7, #16]
 800a902:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a904:	4b45      	ldr	r3, [pc, #276]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a908:	4a44      	ldr	r2, [pc, #272]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a90a:	f043 0310 	orr.w	r3, r3, #16
 800a90e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a910:	4b42      	ldr	r3, [pc, #264]	; (800aa1c <SPI_WIFI_MspInit+0x168>)
 800a912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a914:	f003 0310 	and.w	r3, r3, #16
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800a91c:	2200      	movs	r2, #0
 800a91e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a922:	483f      	ldr	r0, [pc, #252]	; (800aa20 <SPI_WIFI_MspInit+0x16c>)
 800a924:	f7f9 f87a 	bl	8003a1c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800a928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a92c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a92e:	2301      	movs	r3, #1
 800a930:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a932:	2300      	movs	r3, #0
 800a934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a936:	2300      	movs	r3, #0
 800a938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800a93a:	f107 031c 	add.w	r3, r7, #28
 800a93e:	4619      	mov	r1, r3
 800a940:	4837      	ldr	r0, [pc, #220]	; (800aa20 <SPI_WIFI_MspInit+0x16c>)
 800a942:	f7f8 fdb5 	bl	80034b0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800a946:	2302      	movs	r3, #2
 800a948:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800a94a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a94e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a950:	2300      	movs	r3, #0
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a954:	2300      	movs	r3, #0
 800a956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a958:	f107 031c 	add.w	r3, r7, #28
 800a95c:	4619      	mov	r1, r3
 800a95e:	4831      	ldr	r0, [pc, #196]	; (800aa24 <SPI_WIFI_MspInit+0x170>)
 800a960:	f7f8 fda6 	bl	80034b0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800a964:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a968:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a96a:	2301      	movs	r3, #1
 800a96c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800a972:	2300      	movs	r3, #0
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800a97a:	f107 031c 	add.w	r3, r7, #28
 800a97e:	4619      	mov	r1, r3
 800a980:	4828      	ldr	r0, [pc, #160]	; (800aa24 <SPI_WIFI_MspInit+0x170>)
 800a982:	f7f8 fd95 	bl	80034b0 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800a986:	2201      	movs	r2, #1
 800a988:	2101      	movs	r1, #1
 800a98a:	4826      	ldr	r0, [pc, #152]	; (800aa24 <SPI_WIFI_MspInit+0x170>)
 800a98c:	f7f9 f846 	bl	8003a1c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800a990:	2301      	movs	r3, #1
 800a992:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800a994:	2301      	movs	r3, #1
 800a996:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a998:	2300      	movs	r3, #0
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a99c:	2301      	movs	r3, #1
 800a99e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800a9a0:	f107 031c 	add.w	r3, r7, #28
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	481f      	ldr	r0, [pc, #124]	; (800aa24 <SPI_WIFI_MspInit+0x170>)
 800a9a8:	f7f8 fd82 	bl	80034b0 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800a9ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9b0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9be:	2306      	movs	r3, #6
 800a9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800a9c2:	f107 031c 	add.w	r3, r7, #28
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4817      	ldr	r0, [pc, #92]	; (800aa28 <SPI_WIFI_MspInit+0x174>)
 800a9ca:	f7f8 fd71 	bl	80034b0 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800a9ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800a9e0:	2306      	movs	r3, #6
 800a9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800a9e4:	f107 031c 	add.w	r3, r7, #28
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	480f      	ldr	r0, [pc, #60]	; (800aa28 <SPI_WIFI_MspInit+0x174>)
 800a9ec:	f7f8 fd60 	bl	80034b0 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800a9f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9f4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800aa02:	2306      	movs	r3, #6
 800aa04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800aa06:	f107 031c 	add.w	r3, r7, #28
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4806      	ldr	r0, [pc, #24]	; (800aa28 <SPI_WIFI_MspInit+0x174>)
 800aa0e:	f7f8 fd4f 	bl	80034b0 <HAL_GPIO_Init>
}
 800aa12:	bf00      	nop
 800aa14:	3730      	adds	r7, #48	; 0x30
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	40021000 	.word	0x40021000
 800aa20:	48000400 	.word	0x48000400
 800aa24:	48001000 	.word	0x48001000
 800aa28:	48000800 	.word	0x48000800

0800aa2c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d145      	bne.n	800aacc <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800aa40:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa42:	4a28      	ldr	r2, [pc, #160]	; (800aae4 <SPI_WIFI_Init+0xb8>)
 800aa44:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800aa46:	4826      	ldr	r0, [pc, #152]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa48:	f7ff ff34 	bl	800a8b4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800aa4c:	4b24      	ldr	r3, [pc, #144]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa4e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aa52:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800aa54:	4b22      	ldr	r3, [pc, #136]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800aa5a:	4b21      	ldr	r3, [pc, #132]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa5c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800aa60:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800aa62:	4b1f      	ldr	r3, [pc, #124]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800aa68:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800aa6e:	4b1c      	ldr	r3, [pc, #112]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa74:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800aa76:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa78:	2210      	movs	r2, #16
 800aa7a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800aa7c:	4b18      	ldr	r3, [pc, #96]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800aa82:	4b17      	ldr	r3, [pc, #92]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800aa88:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800aa8e:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800aa94:	4812      	ldr	r0, [pc, #72]	; (800aae0 <SPI_WIFI_Init+0xb4>)
 800aa96:	f7fb feb3 	bl	8006800 <HAL_SPI_Init>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800aaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa4:	e018      	b.n	800aad8 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	2007      	movs	r0, #7
 800aaac:	f7f8 fb6d 	bl	800318a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800aab0:	2007      	movs	r0, #7
 800aab2:	f7f8 fb86 	bl	80031c2 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	2033      	movs	r0, #51	; 0x33
 800aabc:	f7f8 fb65 	bl	800318a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800aac0:	2033      	movs	r0, #51	; 0x33
 800aac2:	f7f8 fb7e 	bl	80031c2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800aac6:	200a      	movs	r0, #10
 800aac8:	f000 f9fe 	bl	800aec8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800aacc:	f000 f80c 	bl	800aae8 <SPI_WIFI_ResetModule>
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]

  return rc;
 800aad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20001008 	.word	0x20001008
 800aae4:	40003c00 	.word	0x40003c00

0800aae8 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800aaee:	f7f8 fa1d 	bl	8002f2c <HAL_GetTick>
 800aaf2:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aafe:	4830      	ldr	r0, [pc, #192]	; (800abc0 <SPI_WIFI_ResetModule+0xd8>)
 800ab00:	f7f8 ff8c 	bl	8003a1c <HAL_GPIO_WritePin>
 800ab04:	200a      	movs	r0, #10
 800ab06:	f7f8 fa1d 	bl	8002f44 <HAL_Delay>
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab10:	482b      	ldr	r0, [pc, #172]	; (800abc0 <SPI_WIFI_ResetModule+0xd8>)
 800ab12:	f7f8 ff83 	bl	8003a1c <HAL_GPIO_WritePin>
 800ab16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ab1a:	f7f8 fa13 	bl	8002f44 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2101      	movs	r1, #1
 800ab22:	4827      	ldr	r0, [pc, #156]	; (800abc0 <SPI_WIFI_ResetModule+0xd8>)
 800ab24:	f7f8 ff7a 	bl	8003a1c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ab28:	200f      	movs	r0, #15
 800ab2a:	f000 f9cd 	bl	800aec8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800ab2e:	e020      	b.n	800ab72 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	463a      	mov	r2, r7
 800ab34:	18d1      	adds	r1, r2, r3
 800ab36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	4821      	ldr	r0, [pc, #132]	; (800abc4 <SPI_WIFI_ResetModule+0xdc>)
 800ab3e:	f7fb ff2a 	bl	8006996 <HAL_SPI_Receive>
 800ab42:	4603      	mov	r3, r0
 800ab44:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	3302      	adds	r3, #2
 800ab4a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800ab4c:	f7f8 f9ee 	bl	8002f2c <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5a:	d202      	bcs.n	800ab62 <SPI_WIFI_ResetModule+0x7a>
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800ab62:	2201      	movs	r2, #1
 800ab64:	2101      	movs	r1, #1
 800ab66:	4816      	ldr	r0, [pc, #88]	; (800abc0 <SPI_WIFI_ResetModule+0xd8>)
 800ab68:	f7f8 ff58 	bl	8003a1c <HAL_GPIO_WritePin>
      return -1;
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	e021      	b.n	800abb6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800ab72:	2102      	movs	r1, #2
 800ab74:	4812      	ldr	r0, [pc, #72]	; (800abc0 <SPI_WIFI_ResetModule+0xd8>)
 800ab76:	f7f8 ff39 	bl	80039ec <HAL_GPIO_ReadPin>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d0d7      	beq.n	800ab30 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800ab80:	2201      	movs	r2, #1
 800ab82:	2101      	movs	r1, #1
 800ab84:	480e      	ldr	r0, [pc, #56]	; (800abc0 <SPI_WIFI_ResetModule+0xd8>)
 800ab86:	f7f8 ff49 	bl	8003a1c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab8a:	783b      	ldrb	r3, [r7, #0]
 800ab8c:	2b15      	cmp	r3, #21
 800ab8e:	d10e      	bne.n	800abae <SPI_WIFI_ResetModule+0xc6>
 800ab90:	787b      	ldrb	r3, [r7, #1]
 800ab92:	2b15      	cmp	r3, #21
 800ab94:	d10b      	bne.n	800abae <SPI_WIFI_ResetModule+0xc6>
 800ab96:	78bb      	ldrb	r3, [r7, #2]
 800ab98:	2b0d      	cmp	r3, #13
 800ab9a:	d108      	bne.n	800abae <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800ab9c:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800ab9e:	2b0a      	cmp	r3, #10
 800aba0:	d105      	bne.n	800abae <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800aba2:	793b      	ldrb	r3, [r7, #4]
 800aba4:	2b3e      	cmp	r3, #62	; 0x3e
 800aba6:	d102      	bne.n	800abae <SPI_WIFI_ResetModule+0xc6>
 800aba8:	797b      	ldrb	r3, [r7, #5]
 800abaa:	2b20      	cmp	r3, #32
 800abac:	d002      	beq.n	800abb4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800abae:	f04f 33ff 	mov.w	r3, #4294967295
 800abb2:	e000      	b.n	800abb6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	48001000 	.word	0x48001000
 800abc4:	20001008 	.word	0x20001008

0800abc8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800abcc:	4802      	ldr	r0, [pc, #8]	; (800abd8 <SPI_WIFI_DeInit+0x10>)
 800abce:	f7fb feba 	bl	8006946 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20001008 	.word	0x20001008

0800abdc <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800abe4:	f7f8 f9a2 	bl	8002f2c <HAL_GetTick>
 800abe8:	4603      	mov	r3, r0
 800abea:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800abec:	e00a      	b.n	800ac04 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800abee:	f7f8 f99d 	bl	8002f2c <HAL_GetTick>
 800abf2:	4602      	mov	r2, r0
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	1ad2      	subs	r2, r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d902      	bls.n	800ac04 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800abfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ac02:	e007      	b.n	800ac14 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800ac04:	2102      	movs	r1, #2
 800ac06:	4805      	ldr	r0, [pc, #20]	; (800ac1c <wait_cmddata_rdy_high+0x40>)
 800ac08:	f7f8 fef0 	bl	80039ec <HAL_GPIO_ReadPin>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d1ed      	bne.n	800abee <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	48001000 	.word	0x48001000

0800ac20 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac28:	f7f8 f980 	bl	8002f2c <HAL_GetTick>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800ac30:	e00a      	b.n	800ac48 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac32:	f7f8 f97b 	bl	8002f2c <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	1ad2      	subs	r2, r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d902      	bls.n	800ac48 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800ac42:	f04f 33ff 	mov.w	r3, #4294967295
 800ac46:	e004      	b.n	800ac52 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800ac48:	4b04      	ldr	r3, [pc, #16]	; (800ac5c <wait_cmddata_rdy_rising_event+0x3c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d0f0      	beq.n	800ac32 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800ac50:	2300      	movs	r3, #0
#endif
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20001074 	.word	0x20001074

0800ac60 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800ac68:	f7f8 f960 	bl	8002f2c <HAL_GetTick>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800ac70:	e00a      	b.n	800ac88 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800ac72:	f7f8 f95b 	bl	8002f2c <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	1ad2      	subs	r2, r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d902      	bls.n	800ac88 <wait_spi_rx_event+0x28>
    {
      return -1;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
 800ac86:	e004      	b.n	800ac92 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800ac88:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <wait_spi_rx_event+0x3c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d0f0      	beq.n	800ac72 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800ac90:	2300      	movs	r3, #0
#endif
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	2000106c 	.word	0x2000106c

0800aca0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800aca8:	f7f8 f940 	bl	8002f2c <HAL_GetTick>
 800acac:	4603      	mov	r3, r0
 800acae:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800acb0:	e00a      	b.n	800acc8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800acb2:	f7f8 f93b 	bl	8002f2c <HAL_GetTick>
 800acb6:	4602      	mov	r2, r0
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	1ad2      	subs	r2, r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d902      	bls.n	800acc8 <wait_spi_tx_event+0x28>
    {
      return -1;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295
 800acc6:	e004      	b.n	800acd2 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <wait_spi_tx_event+0x3c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d0f0      	beq.n	800acb2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800acd0:	2300      	movs	r3, #0
#endif
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20001070 	.word	0x20001070

0800ace0 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	460b      	mov	r3, r1
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 800acf2:	2201      	movs	r2, #1
 800acf4:	2101      	movs	r1, #1
 800acf6:	4834      	ldr	r0, [pc, #208]	; (800adc8 <SPI_WIFI_ReceiveData+0xe8>)
 800acf8:	f7f8 fe90 	bl	8003a1c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800acfc:	2003      	movs	r0, #3
 800acfe:	f000 f8e3 	bl	800aec8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff ff8b 	bl	800ac20 <wait_cmddata_rdy_rising_event>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	da02      	bge.n	800ad16 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800ad10:	f06f 0302 	mvn.w	r3, #2
 800ad14:	e054      	b.n	800adc0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800ad16:	2200      	movs	r2, #0
 800ad18:	2101      	movs	r1, #1
 800ad1a:	482b      	ldr	r0, [pc, #172]	; (800adc8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad1c:	f7f8 fe7e 	bl	8003a1c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ad20:	200f      	movs	r0, #15
 800ad22:	f000 f8d1 	bl	800aec8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800ad26:	e03d      	b.n	800ada4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800ad28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ad2c:	897b      	ldrh	r3, [r7, #10]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	db02      	blt.n	800ad38 <SPI_WIFI_ReceiveData+0x58>
 800ad32:	897b      	ldrh	r3, [r7, #10]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d13c      	bne.n	800adb2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800ad38:	4b24      	ldr	r3, [pc, #144]	; (800adcc <SPI_WIFI_ReceiveData+0xec>)
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800ad3e:	f107 0314 	add.w	r3, r7, #20
 800ad42:	2201      	movs	r2, #1
 800ad44:	4619      	mov	r1, r3
 800ad46:	4822      	ldr	r0, [pc, #136]	; (800add0 <SPI_WIFI_ReceiveData+0xf0>)
 800ad48:	f7fc fa0a 	bl	8007160 <HAL_SPI_Receive_IT>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d007      	beq.n	800ad62 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800ad52:	2201      	movs	r2, #1
 800ad54:	2101      	movs	r1, #1
 800ad56:	481c      	ldr	r0, [pc, #112]	; (800adc8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad58:	f7f8 fe60 	bl	8003a1c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	e02e      	b.n	800adc0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff ff7b 	bl	800ac60 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800ad6a:	7d3a      	ldrb	r2, [r7, #20]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3301      	adds	r3, #1
 800ad74:	7d7a      	ldrb	r2, [r7, #21]
 800ad76:	701a      	strb	r2, [r3, #0]
      length += 2;
 800ad78:	8afb      	ldrh	r3, [r7, #22]
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3302      	adds	r3, #2
 800ad84:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800ad86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ad8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad8e:	db09      	blt.n	800ada4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800ad90:	2201      	movs	r2, #1
 800ad92:	2101      	movs	r1, #1
 800ad94:	480c      	ldr	r0, [pc, #48]	; (800adc8 <SPI_WIFI_ReceiveData+0xe8>)
 800ad96:	f7f8 fe41 	bl	8003a1c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800ad9a:	f7ff fea5 	bl	800aae8 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800ad9e:	f06f 0303 	mvn.w	r3, #3
 800ada2:	e00d      	b.n	800adc0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800ada4:	2102      	movs	r1, #2
 800ada6:	4808      	ldr	r0, [pc, #32]	; (800adc8 <SPI_WIFI_ReceiveData+0xe8>)
 800ada8:	f7f8 fe20 	bl	80039ec <HAL_GPIO_ReadPin>
 800adac:	4603      	mov	r3, r0
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d0ba      	beq.n	800ad28 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800adb2:	2201      	movs	r2, #1
 800adb4:	2101      	movs	r1, #1
 800adb6:	4804      	ldr	r0, [pc, #16]	; (800adc8 <SPI_WIFI_ReceiveData+0xe8>)
 800adb8:	f7f8 fe30 	bl	8003a1c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800adbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	48001000 	.word	0x48001000
 800adcc:	2000106c 	.word	0x2000106c
 800add0:	20001008 	.word	0x20001008

0800add4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	460b      	mov	r3, r1
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff fef9 	bl	800abdc <wait_cmddata_rdy_high>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	da02      	bge.n	800adf6 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	e04f      	b.n	800ae96 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800adf6:	4b2a      	ldr	r3, [pc, #168]	; (800aea0 <SPI_WIFI_SendData+0xcc>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800adfc:	2200      	movs	r2, #0
 800adfe:	2101      	movs	r1, #1
 800ae00:	4828      	ldr	r0, [pc, #160]	; (800aea4 <SPI_WIFI_SendData+0xd0>)
 800ae02:	f7f8 fe0b 	bl	8003a1c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800ae06:	200f      	movs	r0, #15
 800ae08:	f000 f85e 	bl	800aec8 <SPI_WIFI_DelayUs>
  if (len > 1)
 800ae0c:	897b      	ldrh	r3, [r7, #10]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d919      	bls.n	800ae46 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800ae12:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <SPI_WIFI_SendData+0xd4>)
 800ae14:	2201      	movs	r2, #1
 800ae16:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800ae18:	897b      	ldrh	r3, [r7, #10]
 800ae1a:	085b      	lsrs	r3, r3, #1
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	461a      	mov	r2, r3
 800ae20:	68f9      	ldr	r1, [r7, #12]
 800ae22:	4822      	ldr	r0, [pc, #136]	; (800aeac <SPI_WIFI_SendData+0xd8>)
 800ae24:	f7fc f910 	bl	8007048 <HAL_SPI_Transmit_IT>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800ae2e:	2201      	movs	r2, #1
 800ae30:	2101      	movs	r1, #1
 800ae32:	481c      	ldr	r0, [pc, #112]	; (800aea4 <SPI_WIFI_SendData+0xd0>)
 800ae34:	f7f8 fdf2 	bl	8003a1c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae38:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3c:	e02b      	b.n	800ae96 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff ff2d 	bl	800aca0 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800ae46:	897b      	ldrh	r3, [r7, #10]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d020      	beq.n	800ae92 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800ae50:	897b      	ldrh	r3, [r7, #10]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800ae5c:	230a      	movs	r3, #10
 800ae5e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800ae60:	4b11      	ldr	r3, [pc, #68]	; (800aea8 <SPI_WIFI_SendData+0xd4>)
 800ae62:	2201      	movs	r2, #1
 800ae64:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	480f      	ldr	r0, [pc, #60]	; (800aeac <SPI_WIFI_SendData+0xd8>)
 800ae70:	f7fc f8ea 	bl	8007048 <HAL_SPI_Transmit_IT>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	4809      	ldr	r0, [pc, #36]	; (800aea4 <SPI_WIFI_SendData+0xd0>)
 800ae80:	f7f8 fdcc 	bl	8003a1c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800ae84:	f04f 33ff 	mov.w	r3, #4294967295
 800ae88:	e005      	b.n	800ae96 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff ff07 	bl	800aca0 <wait_spi_tx_event>
    
  }
  return len;
 800ae92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20001074 	.word	0x20001074
 800aea4:	48001000 	.word	0x48001000
 800aea8:	20001070 	.word	0x20001070
 800aeac:	20001008 	.word	0x20001008

0800aeb0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7f8 f843 	bl	8002f44 <HAL_Delay>
}
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
	...

0800aec8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800aed8:	4b20      	ldr	r3, [pc, #128]	; (800af5c <SPI_WIFI_DelayUs+0x94>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d122      	bne.n	800af26 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 800aee0:	4b1f      	ldr	r3, [pc, #124]	; (800af60 <SPI_WIFI_DelayUs+0x98>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a1f      	ldr	r2, [pc, #124]	; (800af64 <SPI_WIFI_DelayUs+0x9c>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	099b      	lsrs	r3, r3, #6
 800aeec:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800aef6:	f7f8 f819 	bl	8002f2c <HAL_GetTick>
 800aefa:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800aefc:	e002      	b.n	800af04 <SPI_WIFI_DelayUs+0x3c>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	3b01      	subs	r3, #1
 800af02:	60bb      	str	r3, [r7, #8]
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1f9      	bne.n	800aefe <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800af0a:	f7f8 f80f 	bl	8002f2c <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	4a11      	ldr	r2, [pc, #68]	; (800af5c <SPI_WIFI_DelayUs+0x94>)
 800af16:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800af18:	4b10      	ldr	r3, [pc, #64]	; (800af5c <SPI_WIFI_DelayUs+0x94>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <SPI_WIFI_DelayUs+0x5e>
 800af20:	4b0e      	ldr	r3, [pc, #56]	; (800af5c <SPI_WIFI_DelayUs+0x94>)
 800af22:	2201      	movs	r2, #1
 800af24:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800af26:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <SPI_WIFI_DelayUs+0x98>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a0f      	ldr	r2, [pc, #60]	; (800af68 <SPI_WIFI_DelayUs+0xa0>)
 800af2c:	fba2 2303 	umull	r2, r3, r2, r3
 800af30:	0c9a      	lsrs	r2, r3, #18
 800af32:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <SPI_WIFI_DelayUs+0x94>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	fb02 f303 	mul.w	r3, r2, r3
 800af44:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800af46:	e002      	b.n	800af4e <SPI_WIFI_DelayUs+0x86>
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	60bb      	str	r3, [r7, #8]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1f9      	bne.n	800af48 <SPI_WIFI_DelayUs+0x80>
  return;
 800af54:	bf00      	nop
}
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20001078 	.word	0x20001078
 800af60:	200000a4 	.word	0x200000a4
 800af64:	10624dd3 	.word	0x10624dd3
 800af68:	431bde83 	.word	0x431bde83

0800af6c <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800af74:	4b06      	ldr	r3, [pc, #24]	; (800af90 <HAL_SPI_RxCpltCallback+0x24>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <HAL_SPI_RxCpltCallback+0x24>)
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
  }
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	2000106c 	.word	0x2000106c

0800af94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800af9c:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <HAL_SPI_TxCpltCallback+0x24>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800afa4:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <HAL_SPI_TxCpltCallback+0x24>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	601a      	str	r2, [r3, #0]
  }
}
 800afaa:	bf00      	nop
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20001070 	.word	0x20001070

0800afbc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <SPI_WIFI_ISR+0x1c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d102      	bne.n	800afce <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800afc8:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <SPI_WIFI_ISR+0x1c>)
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
   }
}
 800afce:	bf00      	nop
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	20001074 	.word	0x20001074

0800afdc <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800afe6:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <WIFI_Init+0x40>)
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <WIFI_Init+0x44>)
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <WIFI_Init+0x48>)
 800aff0:	4a0d      	ldr	r2, [pc, #52]	; (800b028 <WIFI_Init+0x4c>)
 800aff2:	490e      	ldr	r1, [pc, #56]	; (800b02c <WIFI_Init+0x50>)
 800aff4:	480e      	ldr	r0, [pc, #56]	; (800b030 <WIFI_Init+0x54>)
 800aff6:	f7ff f8c3 	bl	800a180 <ES_WIFI_RegisterBusIO>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d107      	bne.n	800b010 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b000:	480b      	ldr	r0, [pc, #44]	; (800b030 <WIFI_Init+0x54>)
 800b002:	f7ff f88f 	bl	800a124 <ES_WIFI_Init>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800b010:	79fb      	ldrb	r3, [r7, #7]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	0800ace1 	.word	0x0800ace1
 800b020:	0800add5 	.word	0x0800add5
 800b024:	0800aeb1 	.word	0x0800aeb1
 800b028:	0800abc9 	.word	0x0800abc9
 800b02c:	0800aa2d 	.word	0x0800aa2d
 800b030:	2000107c 	.word	0x2000107c

0800b034 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	4613      	mov	r3, r2
 800b040:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	4809      	ldr	r0, [pc, #36]	; (800b074 <WIFI_Connect+0x40>)
 800b04e:	f7ff f8cb 	bl	800a1e8 <ES_WIFI_Connect>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800b058:	4806      	ldr	r0, [pc, #24]	; (800b074 <WIFI_Connect+0x40>)
 800b05a:	f7ff f969 	bl	800a330 <ES_WIFI_GetNetworkSettings>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	2000107c 	.word	0x2000107c

0800b078 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	4806      	ldr	r0, [pc, #24]	; (800b0a0 <WIFI_GetMAC_Address+0x28>)
 800b088:	f7ff f97c 	bl	800a384 <ES_WIFI_GetMACAddress>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b096:	7bfb      	ldrb	r3, [r7, #15]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	2000107c 	.word	0x2000107c

0800b0a4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800b0b0:	4809      	ldr	r0, [pc, #36]	; (800b0d8 <WIFI_GetIP_Address+0x34>)
 800b0b2:	f7ff f911 	bl	800a2d8 <ES_WIFI_IsConnected>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d107      	bne.n	800b0cc <WIFI_GetIP_Address+0x28>
 800b0bc:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <WIFI_GetIP_Address+0x34>)
 800b0be:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800b0c2:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	2000107c 	.word	0x2000107c

0800b0dc <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08a      	sub	sp, #40	; 0x28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800b0f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0fa:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800b0fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0fe:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800b100:	7afb      	ldrb	r3, [r7, #11]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bf14      	ite	ne
 800b106:	2301      	movne	r3, #1
 800b108:	2300      	moveq	r3, #0
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	789b      	ldrb	r3, [r3, #2]
 800b11e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	78db      	ldrb	r3, [r3, #3]
 800b124:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800b126:	f107 0310 	add.w	r3, r7, #16
 800b12a:	4619      	mov	r1, r3
 800b12c:	4807      	ldr	r0, [pc, #28]	; (800b14c <WIFI_OpenClientConnection+0x70>)
 800b12e:	f7ff f95b 	bl	800a3e8 <ES_WIFI_StartClientConnection>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d102      	bne.n	800b13e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b142:	4618      	mov	r0, r3
 800b144:	3728      	adds	r7, #40	; 0x28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	2000107c 	.word	0x2000107c

0800b150 <sendMessageVector>:
/*-----------------------------------------------------------*/

static int32_t sendMessageVector( MQTTContext_t * pContext,
                                  TransportOutVector_t * pIoVec,
                                  size_t ioVecCount )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	; 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t startTime;
    TransportOutVector_t * pIoVectIterator;
    size_t vectorsToBeSent = ioVecCount;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	61fb      	str	r3, [r7, #28]
    size_t bytesToSend = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	61bb      	str	r3, [r7, #24]
    int32_t bytesSentOrError = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	617b      	str	r3, [r7, #20]

    assert( pContext != NULL );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <sendMessageVector+0x2c>
 800b16e:	4b66      	ldr	r3, [pc, #408]	; (800b308 <sendMessageVector+0x1b8>)
 800b170:	4a66      	ldr	r2, [pc, #408]	; (800b30c <sendMessageVector+0x1bc>)
 800b172:	f240 3107 	movw	r1, #775	; 0x307
 800b176:	4866      	ldr	r0, [pc, #408]	; (800b310 <sendMessageVector+0x1c0>)
 800b178:	f005 fd48 	bl	8010c0c <__assert_func>
    assert( pIoVec != NULL );
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <sendMessageVector+0x40>
 800b182:	4b64      	ldr	r3, [pc, #400]	; (800b314 <sendMessageVector+0x1c4>)
 800b184:	4a61      	ldr	r2, [pc, #388]	; (800b30c <sendMessageVector+0x1bc>)
 800b186:	f44f 7142 	mov.w	r1, #776	; 0x308
 800b18a:	4861      	ldr	r0, [pc, #388]	; (800b310 <sendMessageVector+0x1c0>)
 800b18c:	f005 fd3e 	bl	8010c0c <__assert_func>
    assert( pContext->getTime != NULL );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <sendMessageVector+0x56>
 800b198:	4b5f      	ldr	r3, [pc, #380]	; (800b318 <sendMessageVector+0x1c8>)
 800b19a:	4a5c      	ldr	r2, [pc, #368]	; (800b30c <sendMessageVector+0x1bc>)
 800b19c:	f240 3109 	movw	r1, #777	; 0x309
 800b1a0:	485b      	ldr	r0, [pc, #364]	; (800b310 <sendMessageVector+0x1c0>)
 800b1a2:	f005 fd33 	bl	8010c0c <__assert_func>
    /* Send must always be defined */
    assert( pContext->transportInterface.send != NULL );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d106      	bne.n	800b1bc <sendMessageVector+0x6c>
 800b1ae:	4b5b      	ldr	r3, [pc, #364]	; (800b31c <sendMessageVector+0x1cc>)
 800b1b0:	4a56      	ldr	r2, [pc, #344]	; (800b30c <sendMessageVector+0x1bc>)
 800b1b2:	f240 310b 	movw	r1, #779	; 0x30b
 800b1b6:	4856      	ldr	r0, [pc, #344]	; (800b310 <sendMessageVector+0x1c0>)
 800b1b8:	f005 fd28 	bl	8010c0c <__assert_func>

    /* Count the total number of bytes to be sent as outlined in the vector. */
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	623b      	str	r3, [r7, #32]
 800b1c0:	e007      	b.n	800b1d2 <sendMessageVector+0x82>
    {
        bytesToSend += pIoVectIterator->iov_len;
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	61bb      	str	r3, [r7, #24]
    for( pIoVectIterator = pIoVec; pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ); pIoVectIterator++ )
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	623b      	str	r3, [r7, #32]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	4413      	add	r3, r2
 800b1e0:	6a3a      	ldr	r2, [r7, #32]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d9ed      	bls.n	800b1c2 <sendMessageVector+0x72>
    }

    /* Reset the iterator to point to the first entry in the array. */
    pIoVectIterator = pIoVec;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	623b      	str	r3, [r7, #32]

    /* Note the start time. */
    startTime = pContext->getTime();
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ee:	4798      	blx	r3
 800b1f0:	6138      	str	r0, [r7, #16]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b1f2:	e079      	b.n	800b2e8 <sendMessageVector+0x198>
    {
        if( pContext->transportInterface.writev != NULL )
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <sendMessageVector+0xbe>
        {
            sendResult = pContext->transportInterface.writev( pContext->transportInterface.pNetworkContext,
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	69d0      	ldr	r0, [r2, #28]
 800b204:	69fa      	ldr	r2, [r7, #28]
 800b206:	6a39      	ldr	r1, [r7, #32]
 800b208:	4798      	blx	r3
 800b20a:	6278      	str	r0, [r7, #36]	; 0x24
 800b20c:	e009      	b.n	800b222 <sendMessageVector+0xd2>
                                                              pIoVectIterator,
                                                              vectorsToBeSent );
        }
        else
        {
            sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	69d0      	ldr	r0, [r2, #28]
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	6a3a      	ldr	r2, [r7, #32]
 800b21c:	6852      	ldr	r2, [r2, #4]
 800b21e:	4798      	blx	r3
 800b220:	6278      	str	r0, [r7, #36]	; 0x24
                                                            pIoVectIterator->iov_base,
                                                            pIoVectIterator->iov_len );
        }

        if( sendResult > 0 )
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	2b00      	cmp	r3, #0
 800b226:	dd17      	ble.n	800b258 <sendMessageVector+0x108>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b230:	429a      	cmp	r2, r3
 800b232:	dd06      	ble.n	800b242 <sendMessageVector+0xf2>
 800b234:	4b3a      	ldr	r3, [pc, #232]	; (800b320 <sendMessageVector+0x1d0>)
 800b236:	4a35      	ldr	r2, [pc, #212]	; (800b30c <sendMessageVector+0x1bc>)
 800b238:	f44f 714b 	mov.w	r1, #812	; 0x32c
 800b23c:	4834      	ldr	r0, [pc, #208]	; (800b310 <sendMessageVector+0x1c0>)
 800b23e:	f005 fce5 	bl	8010c0c <__assert_func>

            bytesSentOrError += sendResult;
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	4413      	add	r3, r2
 800b248:	617b      	str	r3, [r7, #20]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24e:	4798      	blx	r3
 800b250:	4602      	mov	r2, r0
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	635a      	str	r2, [r3, #52]	; 0x34
 800b256:	e004      	b.n	800b262 <sendMessageVector+0x112>

            LogDebug( ( "sendMessageVector: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da01      	bge.n	800b262 <sendMessageVector+0x112>
        {
            bytesSentOrError = sendResult;
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	617b      	str	r3, [r7, #20]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( calculateElapsedTime( pContext->getTime(), startTime ) > MQTT_SEND_TIMEOUT_MS )
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	4798      	blx	r3
 800b268:	4603      	mov	r3, r0
 800b26a:	6939      	ldr	r1, [r7, #16]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 f8e7 	bl	800b440 <calculateElapsedTime>
 800b272:	4603      	mov	r3, r0
 800b274:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b278:	4293      	cmp	r3, r2
 800b27a:	d83e      	bhi.n	800b2fa <sendMessageVector+0x1aa>
            LogError( ( "sendMessageVector: Unable to send packet: Timed out." ) );
            break;
        }

        /* Update the send pointer to the correct vector and offset. */
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b27c:	e00b      	b.n	800b296 <sendMessageVector+0x146>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
        {
            sendResult -= ( int32_t ) pIoVectIterator->iov_len;
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	461a      	mov	r2, r3
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
            pIoVectIterator++;
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	3308      	adds	r3, #8
 800b28e:	623b      	str	r3, [r7, #32]
            /* Update the number of vector which are yet to be sent. */
            vectorsToBeSent--;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	3b01      	subs	r3, #1
 800b294:	61fb      	str	r3, [r7, #28]
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b29c:	3b01      	subs	r3, #1
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	6a3a      	ldr	r2, [r7, #32]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d805      	bhi.n	800b2b6 <sendMessageVector+0x166>
               ( sendResult >= ( int32_t ) pIoVectIterator->iov_len ) )
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	461a      	mov	r2, r3
        while( ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) &&
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	dae3      	bge.n	800b27e <sendMessageVector+0x12e>
        }

        /* Some of the bytes from this vector were sent as well, update the length
         * and the pointer to data in this vector. */
        if( ( sendResult > 0 ) &&
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dd15      	ble.n	800b2e8 <sendMessageVector+0x198>
            ( pIoVectIterator <= &( pIoVec[ ioVecCount - 1U ] ) ) )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	4413      	add	r3, r2
        if( ( sendResult > 0 ) &&
 800b2ca:	6a3a      	ldr	r2, [r7, #32]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d80b      	bhi.n	800b2e8 <sendMessageVector+0x198>
        {
            pIoVectIterator->iov_base = ( const void * ) &( ( ( const uint8_t * ) pIoVectIterator->iov_base )[ sendResult ] );
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	441a      	add	r2, r3
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	601a      	str	r2, [r3, #0]
            pIoVectIterator->iov_len -= ( size_t ) sendResult;
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	1ad2      	subs	r2, r2, r3
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	605a      	str	r2, [r3, #4]
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	da05      	bge.n	800b2fc <sendMessageVector+0x1ac>
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f6bf af7e 	bge.w	800b1f4 <sendMessageVector+0xa4>
 800b2f8:	e000      	b.n	800b2fc <sendMessageVector+0x1ac>
            break;
 800b2fa:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b2fc:	697b      	ldr	r3, [r7, #20]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3728      	adds	r7, #40	; 0x28
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	0801611c 	.word	0x0801611c
 800b30c:	08016b78 	.word	0x08016b78
 800b310:	08016040 	.word	0x08016040
 800b314:	08016130 	.word	0x08016130
 800b318:	08016140 	.word	0x08016140
 800b31c:	0801615c 	.word	0x0801615c
 800b320:	08016188 	.word	0x08016188

0800b324 <sendBuffer>:

static int32_t sendBuffer( MQTTContext_t * pContext,
                           const uint8_t * pBufferToSend,
                           size_t bytesToSend )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
    int32_t sendResult;
    uint32_t timeoutMs;
    int32_t bytesSentOrError = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
    const uint8_t * pIndex = pBufferToSend;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	61bb      	str	r3, [r7, #24]

    assert( pContext != NULL );
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <sendBuffer+0x28>
 800b33e:	4b39      	ldr	r3, [pc, #228]	; (800b424 <sendBuffer+0x100>)
 800b340:	4a39      	ldr	r2, [pc, #228]	; (800b428 <sendBuffer+0x104>)
 800b342:	f44f 715a 	mov.w	r1, #872	; 0x368
 800b346:	4839      	ldr	r0, [pc, #228]	; (800b42c <sendBuffer+0x108>)
 800b348:	f005 fc60 	bl	8010c0c <__assert_func>
    assert( pContext->getTime != NULL );
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	2b00      	cmp	r3, #0
 800b352:	d106      	bne.n	800b362 <sendBuffer+0x3e>
 800b354:	4b36      	ldr	r3, [pc, #216]	; (800b430 <sendBuffer+0x10c>)
 800b356:	4a34      	ldr	r2, [pc, #208]	; (800b428 <sendBuffer+0x104>)
 800b358:	f240 3169 	movw	r1, #873	; 0x369
 800b35c:	4833      	ldr	r0, [pc, #204]	; (800b42c <sendBuffer+0x108>)
 800b35e:	f005 fc55 	bl	8010c0c <__assert_func>
    assert( pContext->transportInterface.send != NULL );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <sendBuffer+0x54>
 800b36a:	4b32      	ldr	r3, [pc, #200]	; (800b434 <sendBuffer+0x110>)
 800b36c:	4a2e      	ldr	r2, [pc, #184]	; (800b428 <sendBuffer+0x104>)
 800b36e:	f240 316a 	movw	r1, #874	; 0x36a
 800b372:	482e      	ldr	r0, [pc, #184]	; (800b42c <sendBuffer+0x108>)
 800b374:	f005 fc4a 	bl	8010c0c <__assert_func>
    assert( pIndex != NULL );
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <sendBuffer+0x68>
 800b37e:	4b2e      	ldr	r3, [pc, #184]	; (800b438 <sendBuffer+0x114>)
 800b380:	4a29      	ldr	r2, [pc, #164]	; (800b428 <sendBuffer+0x104>)
 800b382:	f240 316b 	movw	r1, #875	; 0x36b
 800b386:	4829      	ldr	r0, [pc, #164]	; (800b42c <sendBuffer+0x108>)
 800b388:	f005 fc40 	bl	8010c0c <__assert_func>

    /* Set the timeout. */
    timeoutMs = pContext->getTime() + MQTT_SEND_TIMEOUT_MS;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b390:	4798      	blx	r3
 800b392:	4603      	mov	r3, r0
 800b394:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800b398:	3320      	adds	r3, #32
 800b39a:	617b      	str	r3, [r7, #20]

    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b39c:	e034      	b.n	800b408 <sendBuffer+0xe4>
    {
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	69d0      	ldr	r0, [r2, #28]
                                                        pIndex,
                                                        bytesToSend - ( size_t ) bytesSentOrError );
 800b3a6:	69fa      	ldr	r2, [r7, #28]
        sendResult = pContext->transportInterface.send( pContext->transportInterface.pNetworkContext,
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	1a8a      	subs	r2, r1, r2
 800b3ac:	69b9      	ldr	r1, [r7, #24]
 800b3ae:	4798      	blx	r3
 800b3b0:	6138      	str	r0, [r7, #16]

        if( sendResult > 0 )
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd1b      	ble.n	800b3f0 <sendBuffer+0xcc>
        {
            /* It is a bug in the application's transport send implementation if
             * more bytes than expected are sent. */
            assert( sendResult <= ( ( int32_t ) bytesToSend - bytesSentOrError ) );
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	dd06      	ble.n	800b3d2 <sendBuffer+0xae>
 800b3c4:	4b1d      	ldr	r3, [pc, #116]	; (800b43c <sendBuffer+0x118>)
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <sendBuffer+0x104>)
 800b3c8:	f240 317a 	movw	r1, #890	; 0x37a
 800b3cc:	4817      	ldr	r0, [pc, #92]	; (800b42c <sendBuffer+0x108>)
 800b3ce:	f005 fc1d 	bl	8010c0c <__assert_func>

            bytesSentOrError += sendResult;
 800b3d2:	69fa      	ldr	r2, [r7, #28]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	61fb      	str	r3, [r7, #28]
            pIndex = &pIndex[ sendResult ];
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	4413      	add	r3, r2
 800b3e0:	61bb      	str	r3, [r7, #24]

            /* Set last transmission time. */
            pContext->lastPacketTxTime = pContext->getTime();
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4798      	blx	r3
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	635a      	str	r2, [r3, #52]	; 0x34
 800b3ee:	e004      	b.n	800b3fa <sendBuffer+0xd6>

            LogDebug( ( "sendBuffer: Bytes Sent=%ld, Bytes Remaining=%lu",
                        ( long int ) sendResult,
                        ( unsigned long ) ( bytesToSend - ( size_t ) bytesSentOrError ) ) );
        }
        else if( sendResult < 0 )
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	da01      	bge.n	800b3fa <sendBuffer+0xd6>
        {
            bytesSentOrError = sendResult;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	61fb      	str	r3, [r7, #28]
        {
            /* MISRA Empty body */
        }

        /* Check for timeout. */
        if( pContext->getTime() >= timeoutMs )
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	4798      	blx	r3
 800b400:	4602      	mov	r2, r0
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	4293      	cmp	r3, r2
 800b406:	d907      	bls.n	800b418 <sendBuffer+0xf4>
    while( ( bytesSentOrError < ( int32_t ) bytesToSend ) && ( bytesSentOrError >= 0 ) )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	da04      	bge.n	800b41a <sendBuffer+0xf6>
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dac3      	bge.n	800b39e <sendBuffer+0x7a>
 800b416:	e000      	b.n	800b41a <sendBuffer+0xf6>
        {
            LogError( ( "sendBuffer: Unable to send packet: Timed out." ) );
            break;
 800b418:	bf00      	nop
        }
    }

    return bytesSentOrError;
 800b41a:	69fb      	ldr	r3, [r7, #28]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3720      	adds	r7, #32
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	0801611c 	.word	0x0801611c
 800b428:	08016b8c 	.word	0x08016b8c
 800b42c:	08016040 	.word	0x08016040
 800b430:	08016140 	.word	0x08016140
 800b434:	0801615c 	.word	0x0801615c
 800b438:	080161c8 	.word	0x080161c8
 800b43c:	08016188 	.word	0x08016188

0800b440 <calculateElapsedTime>:

/*-----------------------------------------------------------*/

static uint32_t calculateElapsedTime( uint32_t later,
                                      uint32_t start )
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
    return later - start;
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	1ad3      	subs	r3, r2, r3
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <getAckFromPacketType>:

/*-----------------------------------------------------------*/

static MQTTPubAckType_t getAckFromPacketType( uint8_t packetType )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	71fb      	strb	r3, [r7, #7]
    MQTTPubAckType_t ackType = MQTTPuback;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800b46a:	79fb      	ldrb	r3, [r7, #7]
 800b46c:	2b62      	cmp	r3, #98	; 0x62
 800b46e:	d00c      	beq.n	800b48a <getAckFromPacketType+0x2e>
 800b470:	2b62      	cmp	r3, #98	; 0x62
 800b472:	dc0d      	bgt.n	800b490 <getAckFromPacketType+0x34>
 800b474:	2b40      	cmp	r3, #64	; 0x40
 800b476:	d002      	beq.n	800b47e <getAckFromPacketType+0x22>
 800b478:	2b50      	cmp	r3, #80	; 0x50
 800b47a:	d003      	beq.n	800b484 <getAckFromPacketType+0x28>
 800b47c:	e008      	b.n	800b490 <getAckFromPacketType+0x34>
    {
        case MQTT_PACKET_TYPE_PUBACK:
            ackType = MQTTPuback;
 800b47e:	2300      	movs	r3, #0
 800b480:	73fb      	strb	r3, [r7, #15]
            break;
 800b482:	e012      	b.n	800b4aa <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREC:
            ackType = MQTTPubrec;
 800b484:	2301      	movs	r3, #1
 800b486:	73fb      	strb	r3, [r7, #15]
            break;
 800b488:	e00f      	b.n	800b4aa <getAckFromPacketType+0x4e>

        case MQTT_PACKET_TYPE_PUBREL:
            ackType = MQTTPubrel;
 800b48a:	2302      	movs	r3, #2
 800b48c:	73fb      	strb	r3, [r7, #15]
            break;
 800b48e:	e00c      	b.n	800b4aa <getAckFromPacketType+0x4e>
        case MQTT_PACKET_TYPE_PUBCOMP:
        default:

            /* This function is only called after checking the type is one of
             * the above four values, so packet type must be PUBCOMP here. */
            assert( packetType == MQTT_PACKET_TYPE_PUBCOMP );
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	2b70      	cmp	r3, #112	; 0x70
 800b494:	d006      	beq.n	800b4a4 <getAckFromPacketType+0x48>
 800b496:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <getAckFromPacketType+0x58>)
 800b498:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <getAckFromPacketType+0x5c>)
 800b49a:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 800b49e:	4807      	ldr	r0, [pc, #28]	; (800b4bc <getAckFromPacketType+0x60>)
 800b4a0:	f005 fbb4 	bl	8010c0c <__assert_func>
            ackType = MQTTPubcomp;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	73fb      	strb	r3, [r7, #15]
            break;
 800b4a8:	bf00      	nop
    }

    return ackType;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	080161d8 	.word	0x080161d8
 800b4b8:	08016b98 	.word	0x08016b98
 800b4bc:	08016040 	.word	0x08016040

0800b4c0 <recvExact>:

/*-----------------------------------------------------------*/

static int32_t recvExact( const MQTTContext_t * pContext,
                          size_t bytesToRecv )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08c      	sub	sp, #48	; 0x30
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
    uint8_t * pIndex = NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bytesRemaining = bytesToRecv;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t totalBytesRecvd = 0, bytesRecvd;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t lastDataRecvTimeMs = 0U, timeSinceLastRecvMs = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	623b      	str	r3, [r7, #32]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	61bb      	str	r3, [r7, #24]
    TransportRecv_t recvFunc = NULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	77fb      	strb	r3, [r7, #31]

    assert( pContext != NULL );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <recvExact+0x3e>
 800b4f0:	4b44      	ldr	r3, [pc, #272]	; (800b604 <recvExact+0x144>)
 800b4f2:	4a45      	ldr	r2, [pc, #276]	; (800b608 <recvExact+0x148>)
 800b4f4:	f240 31d1 	movw	r1, #977	; 0x3d1
 800b4f8:	4844      	ldr	r0, [pc, #272]	; (800b60c <recvExact+0x14c>)
 800b4fa:	f005 fb87 	bl	8010c0c <__assert_func>
    assert( bytesToRecv <= pContext->networkBuffer.size );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d906      	bls.n	800b516 <recvExact+0x56>
 800b508:	4b41      	ldr	r3, [pc, #260]	; (800b610 <recvExact+0x150>)
 800b50a:	4a3f      	ldr	r2, [pc, #252]	; (800b608 <recvExact+0x148>)
 800b50c:	f240 31d2 	movw	r1, #978	; 0x3d2
 800b510:	483e      	ldr	r0, [pc, #248]	; (800b60c <recvExact+0x14c>)
 800b512:	f005 fb7b 	bl	8010c0c <__assert_func>
    assert( pContext->getTime != NULL );
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <recvExact+0x6c>
 800b51e:	4b3d      	ldr	r3, [pc, #244]	; (800b614 <recvExact+0x154>)
 800b520:	4a39      	ldr	r2, [pc, #228]	; (800b608 <recvExact+0x148>)
 800b522:	f240 31d3 	movw	r1, #979	; 0x3d3
 800b526:	4839      	ldr	r0, [pc, #228]	; (800b60c <recvExact+0x14c>)
 800b528:	f005 fb70 	bl	8010c0c <__assert_func>
    assert( pContext->transportInterface.recv != NULL );
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <recvExact+0x82>
 800b534:	4b38      	ldr	r3, [pc, #224]	; (800b618 <recvExact+0x158>)
 800b536:	4a34      	ldr	r2, [pc, #208]	; (800b608 <recvExact+0x148>)
 800b538:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800b53c:	4833      	ldr	r0, [pc, #204]	; (800b60c <recvExact+0x14c>)
 800b53e:	f005 fb65 	bl	8010c0c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <recvExact+0x98>
 800b54a:	4b34      	ldr	r3, [pc, #208]	; (800b61c <recvExact+0x15c>)
 800b54c:	4a2e      	ldr	r2, [pc, #184]	; (800b608 <recvExact+0x148>)
 800b54e:	f240 31d5 	movw	r1, #981	; 0x3d5
 800b552:	482e      	ldr	r0, [pc, #184]	; (800b60c <recvExact+0x14c>)
 800b554:	f005 fb5a 	bl	8010c0c <__assert_func>

    pIndex = pContext->networkBuffer.pBuffer;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a1b      	ldr	r3, [r3, #32]
 800b55c:	62fb      	str	r3, [r7, #44]	; 0x2c
    recvFunc = pContext->transportInterface.recv;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	617b      	str	r3, [r7, #20]
    getTimeStampMs = pContext->getTime;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b568:	613b      	str	r3, [r7, #16]

    /* Part of the MQTT packet has been read before calling this function. */
    lastDataRecvTimeMs = getTimeStampMs();
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	4798      	blx	r3
 800b56e:	6238      	str	r0, [r7, #32]

    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b570:	e039      	b.n	800b5e6 <recvExact+0x126>
    {
        bytesRecvd = recvFunc( pContext->transportInterface.pNetworkContext,
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	69d8      	ldr	r0, [r3, #28]
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b57a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b57c:	4798      	blx	r3
 800b57e:	60f8      	str	r0, [r7, #12]
                               pIndex,
                               bytesRemaining );

        if( bytesRecvd < 0 )
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	da04      	bge.n	800b590 <recvExact+0xd0>
        {
            LogError( ( "Network error while receiving packet: ReturnCode=%ld.",
                        ( long int ) bytesRecvd ) );
            totalBytesRecvd = bytesRecvd;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	627b      	str	r3, [r7, #36]	; 0x24
            receiveError = true;
 800b58a:	2301      	movs	r3, #1
 800b58c:	77fb      	strb	r3, [r7, #31]
 800b58e:	e02a      	b.n	800b5e6 <recvExact+0x126>
        }
        else if( bytesRecvd > 0 )
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	dd1a      	ble.n	800b5cc <recvExact+0x10c>
        {
            /* Reset the starting time as we have received some data from the network. */
            lastDataRecvTimeMs = getTimeStampMs();
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	4798      	blx	r3
 800b59a:	6238      	str	r0, [r7, #32]
            /* It is a bug in the application's transport receive implementation
             * if more bytes than expected are received. To avoid a possible
             * overflow in converting bytesRemaining from unsigned to signed,
             * this assert must exist after the check for bytesRecvd being
             * negative. */
            assert( ( size_t ) bytesRecvd <= bytesRemaining );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d206      	bcs.n	800b5b2 <recvExact+0xf2>
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	; (800b620 <recvExact+0x160>)
 800b5a6:	4a18      	ldr	r2, [pc, #96]	; (800b608 <recvExact+0x148>)
 800b5a8:	f240 31f5 	movw	r1, #1013	; 0x3f5
 800b5ac:	4817      	ldr	r0, [pc, #92]	; (800b60c <recvExact+0x14c>)
 800b5ae:	f005 fb2d 	bl	8010c0c <__assert_func>

            bytesRemaining -= ( size_t ) bytesRecvd;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
            totalBytesRecvd += ( int32_t ) bytesRecvd;
 800b5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
            /* Increment the index. */
            pIndex = &pIndex[ bytesRecvd ];
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5c6:	4413      	add	r3, r2
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ca:	e00c      	b.n	800b5e6 <recvExact+0x126>
                        ( long int ) totalBytesRecvd ) );
        }
        else
        {
            /* No bytes were read from the network. */
            timeSinceLastRecvMs = calculateElapsedTime( getTimeStampMs(), lastDataRecvTimeMs );
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	4798      	blx	r3
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	6a39      	ldr	r1, [r7, #32]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ff33 	bl	800b440 <calculateElapsedTime>
 800b5da:	61b8      	str	r0, [r7, #24]

            /* Check for timeout if we have been waiting to receive any byte on the network. */
            if( timeSinceLastRecvMs >= MQTT_RECV_POLLING_TIMEOUT_MS )
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	2b09      	cmp	r3, #9
 800b5e0:	d901      	bls.n	800b5e6 <recvExact+0x126>
            {
                LogError( ( "Unable to receive packet: Timed out in transport recv." ) );
                receiveError = true;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	77fb      	strb	r3, [r7, #31]
    while( ( bytesRemaining > 0U ) && ( receiveError == false ) )
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <recvExact+0x138>
 800b5ec:	7ffb      	ldrb	r3, [r7, #31]
 800b5ee:	f083 0301 	eor.w	r3, r3, #1
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1bc      	bne.n	800b572 <recvExact+0xb2>
            }
        }
    }

    return totalBytesRecvd;
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3730      	adds	r7, #48	; 0x30
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	0801611c 	.word	0x0801611c
 800b608:	08016bb0 	.word	0x08016bb0
 800b60c:	08016040 	.word	0x08016040
 800b610:	08016200 	.word	0x08016200
 800b614:	08016140 	.word	0x08016140
 800b618:	0801622c 	.word	0x0801622c
 800b61c:	08016258 	.word	0x08016258
 800b620:	08016280 	.word	0x08016280

0800b624 <discardPacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t discardPacket( const MQTTContext_t * pContext,
                                   size_t remainingLength,
                                   uint32_t timeoutMs )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08c      	sub	sp, #48	; 0x30
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTRecvFailed;
 800b630:	2304      	movs	r3, #4
 800b632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int32_t bytesReceived = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	61fb      	str	r3, [r7, #28]
    size_t bytesToReceive = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t totalBytesReceived = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t entryTimeMs = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	61bb      	str	r3, [r7, #24]
    uint32_t elapsedTimeMs = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]
    MQTTGetCurrentTimeFunc_t getTimeStampMs = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	613b      	str	r3, [r7, #16]
    bool receiveError = false;
 800b64e:	2300      	movs	r3, #0
 800b650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    assert( pContext != NULL );
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <discardPacket+0x44>
 800b65a:	4b2f      	ldr	r3, [pc, #188]	; (800b718 <discardPacket+0xf4>)
 800b65c:	4a2f      	ldr	r2, [pc, #188]	; (800b71c <discardPacket+0xf8>)
 800b65e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800b662:	482f      	ldr	r0, [pc, #188]	; (800b720 <discardPacket+0xfc>)
 800b664:	f005 fad2 	bl	8010c0c <__assert_func>
    assert( pContext->getTime != NULL );
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <discardPacket+0x5a>
 800b670:	4b2c      	ldr	r3, [pc, #176]	; (800b724 <discardPacket+0x100>)
 800b672:	4a2a      	ldr	r2, [pc, #168]	; (800b71c <discardPacket+0xf8>)
 800b674:	f240 4121 	movw	r1, #1057	; 0x421
 800b678:	4829      	ldr	r0, [pc, #164]	; (800b720 <discardPacket+0xfc>)
 800b67a:	f005 fac7 	bl	8010c0c <__assert_func>

    bytesToReceive = pContext->networkBuffer.size;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	62bb      	str	r3, [r7, #40]	; 0x28
    getTimeStampMs = pContext->getTime;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	613b      	str	r3, [r7, #16]

    entryTimeMs = getTimeStampMs();
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	4798      	blx	r3
 800b68e:	61b8      	str	r0, [r7, #24]

    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b690:	e029      	b.n	800b6e6 <discardPacket+0xc2>
    {
        if( ( remainingLength - totalBytesReceived ) < bytesToReceive )
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d903      	bls.n	800b6a6 <discardPacket+0x82>
        {
            bytesToReceive = remainingLength - totalBytesReceived;
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        bytesReceived = recvExact( pContext, bytesToReceive );
 800b6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff ff09 	bl	800b4c0 <recvExact>
 800b6ae:	61f8      	str	r0, [r7, #28]

        if( bytesReceived != ( int32_t ) bytesToReceive )
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d003      	beq.n	800b6c0 <discardPacket+0x9c>
        {
            LogError( ( "Receive error while discarding packet."
                        "ReceivedBytes=%ld, ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            receiveError = true;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6be:	e012      	b.n	800b6e6 <discardPacket+0xc2>
        }
        else
        {
            totalBytesReceived += ( uint32_t ) bytesReceived;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c4:	4413      	add	r3, r2
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24

            elapsedTimeMs = calculateElapsedTime( getTimeStampMs(), entryTimeMs );
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	4798      	blx	r3
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	69b9      	ldr	r1, [r7, #24]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff feb5 	bl	800b440 <calculateElapsedTime>
 800b6d6:	6178      	str	r0, [r7, #20]

            /* Check for timeout. */
            if( elapsedTimeMs >= timeoutMs )
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d302      	bcc.n	800b6e6 <discardPacket+0xc2>
            {
                LogError( ( "Time expired while discarding packet." ) );
                receiveError = true;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while( ( totalBytesReceived < remainingLength ) && ( receiveError == false ) )
 800b6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d206      	bcs.n	800b6fc <discardPacket+0xd8>
 800b6ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6f2:	f083 0301 	eor.w	r3, r3, #1
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1ca      	bne.n	800b692 <discardPacket+0x6e>
            }
        }
    }

    if( totalBytesReceived == remainingLength )
 800b6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	429a      	cmp	r2, r3
 800b702:	d102      	bne.n	800b70a <discardPacket+0xe6>
    {
        LogError( ( "Dumped packet. DumpedBytes=%lu.",
                    ( unsigned long ) totalBytesReceived ) );
        /* Packet dumped, so no data is available. */
        status = MQTTNoDataAvailable;
 800b704:	2307      	movs	r3, #7
 800b706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 800b70a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3730      	adds	r7, #48	; 0x30
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	0801611c 	.word	0x0801611c
 800b71c:	08016bbc 	.word	0x08016bbc
 800b720:	08016040 	.word	0x08016040
 800b724:	08016140 	.word	0x08016140

0800b728 <receivePacket>:
/*-----------------------------------------------------------*/

static MQTTStatus_t receivePacket( const MQTTContext_t * pContext,
                                   MQTTPacketInfo_t incomingPacket,
                                   uint32_t remainingTimeMs )
{
 800b728:	b084      	sub	sp, #16
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    MQTTStatus_t status = MQTTSuccess;
 800b73a:	2300      	movs	r3, #0
 800b73c:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	613b      	str	r3, [r7, #16]
    size_t bytesToReceive = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]

    assert( pContext != NULL );
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <receivePacket+0x32>
 800b74c:	4b1a      	ldr	r3, [pc, #104]	; (800b7b8 <receivePacket+0x90>)
 800b74e:	4a1b      	ldr	r2, [pc, #108]	; (800b7bc <receivePacket+0x94>)
 800b750:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800b754:	481a      	ldr	r0, [pc, #104]	; (800b7c0 <receivePacket+0x98>)
 800b756:	f005 fa59 	bl	8010c0c <__assert_func>
    assert( pContext->networkBuffer.pBuffer != NULL );
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d106      	bne.n	800b770 <receivePacket+0x48>
 800b762:	4b18      	ldr	r3, [pc, #96]	; (800b7c4 <receivePacket+0x9c>)
 800b764:	4a15      	ldr	r2, [pc, #84]	; (800b7bc <receivePacket+0x94>)
 800b766:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800b76a:	4815      	ldr	r0, [pc, #84]	; (800b7c0 <receivePacket+0x98>)
 800b76c:	f005 fa4e 	bl	8010c0c <__assert_func>

    if( incomingPacket.remainingLength > pContext->networkBuffer.size )
 800b770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	429a      	cmp	r2, r3
 800b778:	d908      	bls.n	800b78c <receivePacket+0x64>
        LogError( ( "Incoming packet will be dumped: "
                    "Packet length exceeds network buffer size."
                    "PacketSize=%lu, NetworkBufferSize=%lu.",
                    ( unsigned long ) incomingPacket.remainingLength,
                    ( unsigned long ) pContext->networkBuffer.size ) );
        status = discardPacket( pContext,
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7ff ff4f 	bl	800b624 <discardPacket>
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]
 800b78a:	e00c      	b.n	800b7a6 <receivePacket+0x7e>
                                incomingPacket.remainingLength,
                                remainingTimeMs );
    }
    else
    {
        bytesToReceive = incomingPacket.remainingLength;
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	60fb      	str	r3, [r7, #12]
        bytesReceived = recvExact( pContext, bytesToReceive );
 800b790:	68f9      	ldr	r1, [r7, #12]
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff fe94 	bl	800b4c0 <recvExact>
 800b798:	6138      	str	r0, [r7, #16]

        if( bytesReceived == ( int32_t ) bytesToReceive )
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d001      	beq.n	800b7a6 <receivePacket+0x7e>
        {
            LogError( ( "Packet reception failed. ReceivedBytes=%ld, "
                        "ExpectedBytes=%lu.",
                        ( long int ) bytesReceived,
                        ( unsigned long ) bytesToReceive ) );
            status = MQTTRecvFailed;
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7b2:	b004      	add	sp, #16
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	0801611c 	.word	0x0801611c
 800b7bc:	08016bcc 	.word	0x08016bcc
 800b7c0:	08016040 	.word	0x08016040
 800b7c4:	08016258 	.word	0x08016258

0800b7c8 <getAckTypeToSend>:

/*-----------------------------------------------------------*/

static uint8_t getAckTypeToSend( MQTTPublishState_t state )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	71fb      	strb	r3, [r7, #7]
    uint8_t packetTypeByte = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]

    switch( state )
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	3b02      	subs	r3, #2
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d816      	bhi.n	800b80c <getAckTypeToSend+0x44>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <getAckTypeToSend+0x1c>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b7f5 	.word	0x0800b7f5
 800b7e8:	0800b7fb 	.word	0x0800b7fb
 800b7ec:	0800b801 	.word	0x0800b801
 800b7f0:	0800b807 	.word	0x0800b807
    {
        case MQTTPubAckSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBACK;
 800b7f4:	2340      	movs	r3, #64	; 0x40
 800b7f6:	73fb      	strb	r3, [r7, #15]
            break;
 800b7f8:	e009      	b.n	800b80e <getAckTypeToSend+0x46>

        case MQTTPubRecSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREC;
 800b7fa:	2350      	movs	r3, #80	; 0x50
 800b7fc:	73fb      	strb	r3, [r7, #15]
            break;
 800b7fe:	e006      	b.n	800b80e <getAckTypeToSend+0x46>

        case MQTTPubRelSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBREL;
 800b800:	2362      	movs	r3, #98	; 0x62
 800b802:	73fb      	strb	r3, [r7, #15]
            break;
 800b804:	e003      	b.n	800b80e <getAckTypeToSend+0x46>

        case MQTTPubCompSend:
            packetTypeByte = MQTT_PACKET_TYPE_PUBCOMP;
 800b806:	2370      	movs	r3, #112	; 0x70
 800b808:	73fb      	strb	r3, [r7, #15]
            break;
 800b80a:	e000      	b.n	800b80e <getAckTypeToSend+0x46>
        case MQTTPublishDone:
        case MQTTPublishSend:
        case MQTTStateNull:
        default:
            /* Take no action for states that do not require sending an ack. */
            break;
 800b80c:	bf00      	nop
    }

    return packetTypeByte;
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <sendPublishAcks>:
/*-----------------------------------------------------------*/

static MQTTStatus_t sendPublishAcks( MQTTContext_t * pContext,
                                     uint16_t packetId,
                                     MQTTPublishState_t publishState )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08a      	sub	sp, #40	; 0x28
 800b820:	af02      	add	r7, sp, #8
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	807b      	strh	r3, [r7, #2]
 800b828:	4613      	mov	r3, r2
 800b82a:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800b82c:	2300      	movs	r3, #0
 800b82e:	77fb      	strb	r3, [r7, #31]
    MQTTPublishState_t newState = MQTTStateNull;
 800b830:	2300      	movs	r3, #0
 800b832:	757b      	strb	r3, [r7, #21]
    int32_t sendResult = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	61bb      	str	r3, [r7, #24]
    uint8_t packetTypeByte = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	75fb      	strb	r3, [r7, #23]
    MQTTPubAckType_t packetType;
    MQTTFixedBuffer_t localBuffer;
    uint8_t pubAckPacket[ MQTT_PUBLISH_ACK_PACKET_SIZE ];

    localBuffer.pBuffer = pubAckPacket;
 800b83c:	f107 0308 	add.w	r3, r7, #8
 800b840:	60fb      	str	r3, [r7, #12]
    localBuffer.size = MQTT_PUBLISH_ACK_PACKET_SIZE;
 800b842:	2304      	movs	r3, #4
 800b844:	613b      	str	r3, [r7, #16]

    assert( pContext != NULL );
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <sendPublishAcks+0x3e>
 800b84c:	4b21      	ldr	r3, [pc, #132]	; (800b8d4 <sendPublishAcks+0xb8>)
 800b84e:	4a22      	ldr	r2, [pc, #136]	; (800b8d8 <sendPublishAcks+0xbc>)
 800b850:	f240 5101 	movw	r1, #1281	; 0x501
 800b854:	4821      	ldr	r0, [pc, #132]	; (800b8dc <sendPublishAcks+0xc0>)
 800b856:	f005 f9d9 	bl	8010c0c <__assert_func>

    packetTypeByte = getAckTypeToSend( publishState );
 800b85a:	787b      	ldrb	r3, [r7, #1]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff ffb3 	bl	800b7c8 <getAckTypeToSend>
 800b862:	4603      	mov	r3, r0
 800b864:	75fb      	strb	r3, [r7, #23]

    if( packetTypeByte != 0U )
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d02d      	beq.n	800b8c8 <sendPublishAcks+0xac>
    {
        packetType = getAckFromPacketType( packetTypeByte );
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff fdf4 	bl	800b45c <getAckFromPacketType>
 800b874:	4603      	mov	r3, r0
 800b876:	75bb      	strb	r3, [r7, #22]

        status = MQTT_SerializeAck( &localBuffer,
 800b878:	887a      	ldrh	r2, [r7, #2]
 800b87a:	7df9      	ldrb	r1, [r7, #23]
 800b87c:	f107 030c 	add.w	r3, r7, #12
 800b880:	4618      	mov	r0, r3
 800b882:	f001 f972 	bl	800cb6a <MQTT_SerializeAck>
 800b886:	4603      	mov	r3, r0
 800b888:	77fb      	strb	r3, [r7, #31]
                                    packetTypeByte,
                                    packetId );

        if( status == MQTTSuccess )
 800b88a:	7ffb      	ldrb	r3, [r7, #31]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d106      	bne.n	800b89e <sendPublishAcks+0x82>
            MQTT_PRE_SEND_HOOK( pContext );

            /* Here, we are not using the vector approach for efficiency. There is just one buffer
             * to be sent which can be achieved with a normal send call. */
            sendResult = sendBuffer( pContext,
                                     localBuffer.pBuffer,
 800b890:	68fb      	ldr	r3, [r7, #12]
            sendResult = sendBuffer( pContext,
 800b892:	2204      	movs	r2, #4
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff fd44 	bl	800b324 <sendBuffer>
 800b89c:	61b8      	str	r0, [r7, #24]
                                     MQTT_PUBLISH_ACK_PACKET_SIZE );

            MQTT_POST_SEND_HOOK( pContext );
        }

        if( sendResult == ( int32_t ) MQTT_PUBLISH_ACK_PACKET_SIZE )
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	2b04      	cmp	r3, #4
 800b8a2:	d10f      	bne.n	800b8c4 <sendPublishAcks+0xa8>
        {
            pContext->controlPacketSent = true;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            MQTT_PRE_STATE_UPDATE_HOOK( pContext );

            status = MQTT_UpdateStateAck( pContext,
 800b8ac:	7dba      	ldrb	r2, [r7, #22]
 800b8ae:	8879      	ldrh	r1, [r7, #2]
 800b8b0:	f107 0315 	add.w	r3, r7, #21
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 ff6f 	bl	800d79c <MQTT_UpdateStateAck>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	77fb      	strb	r3, [r7, #31]
 800b8c2:	e001      	b.n	800b8c8 <sendPublishAcks+0xac>
        {
            LogError( ( "Failed to send ACK packet: PacketType=%02x, SentBytes=%ld, "
                        "PacketSize=%lu.",
                        ( unsigned int ) packetTypeByte, ( long int ) sendResult,
                        MQTT_PUBLISH_ACK_PACKET_SIZE ) );
            status = MQTTSendFailed;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 800b8c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3720      	adds	r7, #32
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0801611c 	.word	0x0801611c
 800b8d8:	08016bdc 	.word	0x08016bdc
 800b8dc:	08016040 	.word	0x08016040

0800b8e0 <addEncodedStringToVector>:
static size_t addEncodedStringToVector( uint8_t serializedLength[ CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES ],
                                        const char * const string,
                                        uint16_t length,
                                        TransportOutVector_t * iterator,
                                        size_t * updatedLength )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	80fb      	strh	r3, [r7, #6]
    size_t packetLength = 0U;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	61fb      	str	r3, [r7, #28]
    TransportOutVector_t * pLocalIterator = iterator;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	617b      	str	r3, [r7, #20]
    size_t vectorsAdded = 0U;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61bb      	str	r3, [r7, #24]

    /* When length is non-zero, the string must be non-NULL. */
    assert( ( length != 0U ) ? ( string != NULL ) : true );
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <addEncodedStringToVector+0x36>
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <addEncodedStringToVector+0x36>
 800b908:	4b1e      	ldr	r3, [pc, #120]	; (800b984 <addEncodedStringToVector+0xa4>)
 800b90a:	4a1f      	ldr	r2, [pc, #124]	; (800b988 <addEncodedStringToVector+0xa8>)
 800b90c:	f240 7151 	movw	r1, #1873	; 0x751
 800b910:	481e      	ldr	r0, [pc, #120]	; (800b98c <addEncodedStringToVector+0xac>)
 800b912:	f005 f97b 	bl	8010c0c <__assert_func>

    serializedLength[ 0 ] = ( ( uint8_t ) ( ( length ) >> 8 ) );
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	0a1b      	lsrs	r3, r3, #8
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	701a      	strb	r2, [r3, #0]
    serializedLength[ 1 ] = ( ( uint8_t ) ( ( length ) & 0x00ffU ) );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3301      	adds	r3, #1
 800b926:	88fa      	ldrh	r2, [r7, #6]
 800b928:	b2d2      	uxtb	r2, r2
 800b92a:	701a      	strb	r2, [r3, #0]

    /* Add the serialized length of the string first. */
    pLocalIterator[ 0 ].iov_base = serializedLength;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]
    pLocalIterator[ 0 ].iov_len = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2202      	movs	r2, #2
 800b936:	605a      	str	r2, [r3, #4]
    vectorsAdded++;
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	3301      	adds	r3, #1
 800b93c:	61bb      	str	r3, [r7, #24]
    packetLength = CORE_MQTT_SERIALIZED_LENGTH_FIELD_BYTES;
 800b93e:	2302      	movs	r3, #2
 800b940:	61fb      	str	r3, [r7, #28]

    /* Sometimes the string can be NULL that is, of 0 length. In that case,
     * only the length field should be encoded in the vector. */
    if( ( string != NULL ) && ( length != 0U ) )
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d011      	beq.n	800b96c <addEncodedStringToVector+0x8c>
 800b948:	88fb      	ldrh	r3, [r7, #6]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00e      	beq.n	800b96c <addEncodedStringToVector+0x8c>
    {
        /* Then add the pointer to the string itself. */
        pLocalIterator[ 1 ].iov_base = string;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	3308      	adds	r3, #8
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	601a      	str	r2, [r3, #0]
        pLocalIterator[ 1 ].iov_len = length;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	3308      	adds	r3, #8
 800b95a:	88fa      	ldrh	r2, [r7, #6]
 800b95c:	605a      	str	r2, [r3, #4]
        vectorsAdded++;
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	3301      	adds	r3, #1
 800b962:	61bb      	str	r3, [r7, #24]
        packetLength += length;
 800b964:	88fb      	ldrh	r3, [r7, #6]
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	4413      	add	r3, r2
 800b96a:	61fb      	str	r3, [r7, #28]
    }

    ( *updatedLength ) = ( *updatedLength ) + packetLength;
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	441a      	add	r2, r3
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	601a      	str	r2, [r3, #0]

    return vectorsAdded;
 800b978:	69bb      	ldr	r3, [r7, #24]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	08016324 	.word	0x08016324
 800b988:	08016bec 	.word	0x08016bec
 800b98c:	08016040 	.word	0x08016040

0800b990 <sendPublishWithoutCopy>:
static MQTTStatus_t sendPublishWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTPublishInfo_t * pPublishInfo,
                                            const uint8_t * pMqttHeader,
                                            size_t headerSize,
                                            uint16_t packetId )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b090      	sub	sp, #64	; 0x40
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     * Packet ID (only when QoS > QoS0)                    + 1 = 3
     * Payload                                             + 1 = 4  */
    TransportOutVector_t pIoVector[ 4U ];

    /* The header is sent first. */
    pIoVector[ 0U ].iov_base = pMqttHeader;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	613b      	str	r3, [r7, #16]
    pIoVector[ 0U ].iov_len = headerSize;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	617b      	str	r3, [r7, #20]
    totalMessageLength = headerSize;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	637b      	str	r3, [r7, #52]	; 0x34

    /* Then the topic name has to be sent. */
    pIoVector[ 1U ].iov_base = pPublishInfo->pTopicName;
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	61bb      	str	r3, [r7, #24]
    pIoVector[ 1U ].iov_len = pPublishInfo->topicNameLength;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	891b      	ldrh	r3, [r3, #8]
 800b9ba:	61fb      	str	r3, [r7, #28]
    totalMessageLength += pPublishInfo->topicNameLength;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	891b      	ldrh	r3, [r3, #8]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c4:	4413      	add	r3, r2
 800b9c6:	637b      	str	r3, [r7, #52]	; 0x34

    /* The next field's index should be 2 as the first two fields
     * have been filled in. */
    ioVectorLength = 2U;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	63bb      	str	r3, [r7, #56]	; 0x38

    if( pPublishInfo->qos > MQTTQoS0 )
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d020      	beq.n	800ba16 <sendPublishWithoutCopy+0x86>
    {
        /* Encode the packet ID. */
        serializedPacketID[ 0 ] = ( ( uint8_t ) ( ( packetId ) >> 8 ) );
 800b9d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9d8:	0a1b      	lsrs	r3, r3, #8
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        serializedPacketID[ 1 ] = ( ( uint8_t ) ( ( packetId ) & 0x00ffU ) );
 800b9e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

        pIoVector[ ioVectorLength ].iov_base = serializedPacketID;
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	3340      	adds	r3, #64	; 0x40
 800b9f2:	443b      	add	r3, r7
 800b9f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b9f8:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = sizeof( serializedPacketID );
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	3340      	adds	r3, #64	; 0x40
 800ba02:	443b      	add	r3, r7
 800ba04:	2202      	movs	r2, #2
 800ba06:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += sizeof( serializedPacketID );
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	3302      	adds	r3, #2
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Publish packets are allowed to contain no payload. */
    if( pPublishInfo->payloadLength > 0U )
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d017      	beq.n	800ba4e <sendPublishWithoutCopy+0xbe>
    {
        pIoVector[ ioVectorLength ].iov_base = pPublishInfo->pPayload;
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	68da      	ldr	r2, [r3, #12]
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	00db      	lsls	r3, r3, #3
 800ba26:	3340      	adds	r3, #64	; 0x40
 800ba28:	443b      	add	r3, r7
 800ba2a:	f843 2c30 	str.w	r2, [r3, #-48]
        pIoVector[ ioVectorLength ].iov_len = pPublishInfo->payloadLength;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	691a      	ldr	r2, [r3, #16]
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	3340      	adds	r3, #64	; 0x40
 800ba38:	443b      	add	r3, r7
 800ba3a:	f843 2c2c 	str.w	r2, [r3, #-44]

        ioVectorLength++;
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba40:	3301      	adds	r3, #1
 800ba42:	63bb      	str	r3, [r7, #56]	; 0x38
        totalMessageLength += pPublishInfo->payloadLength;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba4a:	4413      	add	r3, r2
 800ba4c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if( sendMessageVector( pContext, pIoVector, ioVectorLength ) != ( int32_t ) totalMessageLength )
 800ba4e:	f107 0310 	add.w	r3, r7, #16
 800ba52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba54:	4619      	mov	r1, r3
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7ff fb7a 	bl	800b150 <sendMessageVector>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d002      	beq.n	800ba6a <sendPublishWithoutCopy+0xda>
    {
        status = MQTTSendFailed;
 800ba64:	2303      	movs	r3, #3
 800ba66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    return status;
 800ba6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3740      	adds	r7, #64	; 0x40
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <sendConnectWithoutCopy>:

static MQTTStatus_t sendConnectWithoutCopy( MQTTContext_t * pContext,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b0ac      	sub	sp, #176	; 0xb0
 800ba7c:	af02      	add	r7, sp, #8
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ba86:	2300      	movs	r3, #0
 800ba88:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    TransportOutVector_t * iterator;
    size_t ioVectorLength = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    size_t totalMessageLength = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
     * Will payload        + 2 = 7
     * Username            + 2 = 9
     * Password            + 2 = 11 */
    TransportOutVector_t pIoVector[ 11U ];

    iterator = pIoVector;
 800ba98:	f107 0310 	add.w	r3, r7, #16
 800ba9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    pIndex = connectPacketHeader;
 800baa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800baa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Validate arguments. */
    if( ( pWillInfo != NULL ) && ( pWillInfo->pTopicName == NULL ) )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d007      	beq.n	800babe <sendConnectWithoutCopy+0x46>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <sendConnectWithoutCopy+0x46>
    {
        LogError( ( "pWillInfo->pTopicName cannot be NULL if Will is present." ) );
        status = MQTTBadParameter;
 800bab6:	2301      	movs	r3, #1
 800bab8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800babc:	e0ec      	b.n	800bc98 <sendConnectWithoutCopy+0x220>
    }
    else
    {
        pIndex = MQTT_SerializeConnectFixedHeader( pIndex,
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800bac8:	f000 ff3a 	bl	800c940 <MQTT_SerializeConnectFixedHeader>
 800bacc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                                                   pConnectInfo,
                                                   pWillInfo,
                                                   remainingLength );

        assert( ( pIndex - connectPacketHeader ) <= sizeof( connectPacketHeader ) );
 800bad0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bad4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	2b0f      	cmp	r3, #15
 800badc:	d906      	bls.n	800baec <sendConnectWithoutCopy+0x74>
 800bade:	4b71      	ldr	r3, [pc, #452]	; (800bca4 <sendConnectWithoutCopy+0x22c>)
 800bae0:	4a71      	ldr	r2, [pc, #452]	; (800bca8 <sendConnectWithoutCopy+0x230>)
 800bae2:	f640 01ad 	movw	r1, #2221	; 0x8ad
 800bae6:	4871      	ldr	r0, [pc, #452]	; (800bcac <sendConnectWithoutCopy+0x234>)
 800bae8:	f005 f890 	bl	8010c0c <__assert_func>

        /* The header gets sent first. */
        iterator->iov_base = connectPacketHeader;
 800baec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800baf0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800baf4:	601a      	str	r2, [r3, #0]
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-182 */
        /* More details at: https://github.com/FreeRTOS/coreMQTT/blob/main/MISRA.md#rule-108 */
        /* coverity[misra_c_2012_rule_18_2_violation] */
        /* coverity[misra_c_2012_rule_10_8_violation] */
        iterator->iov_len = ( size_t ) ( pIndex - connectPacketHeader );
 800baf6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bafa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	461a      	mov	r2, r3
 800bb02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb06:	605a      	str	r2, [r3, #4]
        totalMessageLength += iterator->iov_len;
 800bb08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb12:	4413      	add	r3, r2
 800bb14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        iterator++;
 800bb18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength++;
 800bb22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb26:	3301      	adds	r3, #1
 800bb28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        /* Serialize the client ID. */
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
                                                 pConnectInfo->pClientIdentifier,
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	6859      	ldr	r1, [r3, #4]
                                                 pConnectInfo->clientIdentifierLength,
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	891a      	ldrh	r2, [r3, #8]
        vectorsAdded = addEncodedStringToVector( serializedClientIDLength,
 800bb34:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800bb38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb42:	f7ff fecd 	bl	800b8e0 <addEncodedStringToVector>
 800bb46:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                 iterator,
                                                 &totalMessageLength );

        /* Update the iterator to point to the next empty slot. */
        iterator = &iterator[ vectorsAdded ];
 800bb4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bb54:	4413      	add	r3, r2
 800bb56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        ioVectorLength += vectorsAdded;
 800bb5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bb5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb62:	4413      	add	r3, r2
 800bb64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

        if( pWillInfo != NULL )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d03c      	beq.n	800bbe8 <sendConnectWithoutCopy+0x170>
        {
            /* Serialize the topic. */
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
                                                     pWillInfo->pTopicName,
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6859      	ldr	r1, [r3, #4]
                                                     pWillInfo->topicNameLength,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	891a      	ldrh	r2, [r3, #8]
            vectorsAdded = addEncodedStringToVector( serializedTopicLength,
 800bb76:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800bb7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb84:	f7ff feac 	bl	800b8e0 <addEncodedStringToVector>
 800bb88:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bb8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bb96:	4413      	add	r3, r2
 800bb98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bb9c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bba4:	4413      	add	r3, r2
 800bba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


            /* Serialize the payload. Payload of last will and testament can be NULL. */
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
                                                     pWillInfo->pPayload,
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68d9      	ldr	r1, [r3, #12]
                                                     ( uint16_t ) pWillInfo->payloadLength,
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	691b      	ldr	r3, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedPayloadLength,
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800bbb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bbbc:	9300      	str	r3, [sp, #0]
 800bbbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbc2:	f7ff fe8d 	bl	800b8e0 <addEncodedStringToVector>
 800bbc6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bbca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bbda:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bbde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the user name if provided. */
        if( pConnectInfo->pUserName != NULL )
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01d      	beq.n	800bc2c <sendConnectWithoutCopy+0x1b4>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
                                                     pConnectInfo->pUserName,
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	68d9      	ldr	r1, [r3, #12]
                                                     pConnectInfo->userNameLength,
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	8a1a      	ldrh	r2, [r3, #16]
            vectorsAdded = addEncodedStringToVector( serializedUsernameLength,
 800bbf8:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800bbfc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc06:	f7ff fe6b 	bl	800b8e0 <addEncodedStringToVector>
 800bc0a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );

            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bc0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bc18:	4413      	add	r3, r2
 800bc1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bc1e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bc22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc26:	4413      	add	r3, r2
 800bc28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        /* Encode the password if provided. */
        if( pConnectInfo->pPassword != NULL )
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01d      	beq.n	800bc70 <sendConnectWithoutCopy+0x1f8>
        {
            /* Serialize the user name string. */
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
                                                     pConnectInfo->pPassword,
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	6959      	ldr	r1, [r3, #20]
                                                     pConnectInfo->passwordLength,
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	8b1a      	ldrh	r2, [r3, #24]
            vectorsAdded = addEncodedStringToVector( serializedPasswordLength,
 800bc3c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800bc40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc4a:	f7ff fe49 	bl	800b8e0 <addEncodedStringToVector>
 800bc4e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                                                     iterator,
                                                     &totalMessageLength );
            /* Update the iterator to point to the next empty slot. */
            iterator = &iterator[ vectorsAdded ];
 800bc52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            ioVectorLength += vectorsAdded;
 800bc62:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bc66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        }

        bytesSentOrError = sendMessageVector( pContext, pIoVector, ioVectorLength );
 800bc70:	f107 0310 	add.w	r3, r7, #16
 800bc74:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bc78:	4619      	mov	r1, r3
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff fa68 	bl	800b150 <sendMessageVector>
 800bc80:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if( bytesSentOrError != ( int32_t ) totalMessageLength )
 800bc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d002      	beq.n	800bc98 <sendConnectWithoutCopy+0x220>
        {
            status = MQTTSendFailed;
 800bc92:	2303      	movs	r3, #3
 800bc94:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        }
    }

    return status;
 800bc98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	37a8      	adds	r7, #168	; 0xa8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	08016354 	.word	0x08016354
 800bca8:	08016c08 	.word	0x08016c08
 800bcac:	08016040 	.word	0x08016040

0800bcb0 <receiveConnack>:
static MQTTStatus_t receiveConnack( const MQTTContext_t * pContext,
                                    uint32_t timeoutMs,
                                    bool cleanSession,
                                    MQTTPacketInfo_t * pIncomingPacket,
                                    bool * pSessionPresent )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08c      	sub	sp, #48	; 0x30
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	71fb      	strb	r3, [r7, #7]
    MQTTStatus_t status = MQTTSuccess;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MQTTGetCurrentTimeFunc_t getTimeStamp = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	61bb      	str	r3, [r7, #24]
    uint32_t entryTimeMs = 0U, remainingTimeMs = 0U, timeTakenMs = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	623b      	str	r3, [r7, #32]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	613b      	str	r3, [r7, #16]
    bool breakFromLoop = false;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	77fb      	strb	r3, [r7, #31]
    uint16_t loopCount = 0U;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	83bb      	strh	r3, [r7, #28]

    assert( pContext != NULL );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d106      	bne.n	800bcf2 <receiveConnack+0x42>
 800bce4:	4b4e      	ldr	r3, [pc, #312]	; (800be20 <receiveConnack+0x170>)
 800bce6:	4a4f      	ldr	r2, [pc, #316]	; (800be24 <receiveConnack+0x174>)
 800bce8:	f640 1115 	movw	r1, #2325	; 0x915
 800bcec:	484e      	ldr	r0, [pc, #312]	; (800be28 <receiveConnack+0x178>)
 800bcee:	f004 ff8d 	bl	8010c0c <__assert_func>
    assert( pIncomingPacket != NULL );
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d106      	bne.n	800bd06 <receiveConnack+0x56>
 800bcf8:	4b4c      	ldr	r3, [pc, #304]	; (800be2c <receiveConnack+0x17c>)
 800bcfa:	4a4a      	ldr	r2, [pc, #296]	; (800be24 <receiveConnack+0x174>)
 800bcfc:	f640 1116 	movw	r1, #2326	; 0x916
 800bd00:	4849      	ldr	r0, [pc, #292]	; (800be28 <receiveConnack+0x178>)
 800bd02:	f004 ff83 	bl	8010c0c <__assert_func>
    assert( pContext->getTime != NULL );
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <receiveConnack+0x6c>
 800bd0e:	4b48      	ldr	r3, [pc, #288]	; (800be30 <receiveConnack+0x180>)
 800bd10:	4a44      	ldr	r2, [pc, #272]	; (800be24 <receiveConnack+0x174>)
 800bd12:	f640 1117 	movw	r1, #2327	; 0x917
 800bd16:	4844      	ldr	r0, [pc, #272]	; (800be28 <receiveConnack+0x178>)
 800bd18:	f004 ff78 	bl	8010c0c <__assert_func>

    getTimeStamp = pContext->getTime;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd20:	61bb      	str	r3, [r7, #24]

    /* Get the entry time for the function. */
    entryTimeMs = getTimeStamp();
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	4798      	blx	r3
 800bd26:	6178      	str	r0, [r7, #20]
    {
        /* Transport read for incoming CONNACK packet type and length.
         * MQTT_GetIncomingPacketTypeAndLength is a blocking call and it is
         * returned after a transport receive timeout, an error, or a successful
         * receive of packet type and length. */
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6918      	ldr	r0, [r3, #16]
                                                      pContext->transportInterface.pNetworkContext,
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	69db      	ldr	r3, [r3, #28]
        status = MQTT_GetIncomingPacketTypeAndLength( pContext->transportInterface.recv,
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	f000 ffdf 	bl	800ccf6 <MQTT_GetIncomingPacketTypeAndLength>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         * 2. If timeoutMs is 0:
         *    Loop times out based on the maximum number of retries config
         *    MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT. This config will control
         *    maximum the number of retry attempts to read the CONNACK packet.
         *    A value of 0 for the config will try once to read CONNACK. */
        if( timeoutMs > 0U )
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00e      	beq.n	800bd62 <receiveConnack+0xb2>
        {
            breakFromLoop = calculateElapsedTime( getTimeStamp(), entryTimeMs ) >= timeoutMs;
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	4798      	blx	r3
 800bd48:	4603      	mov	r3, r0
 800bd4a:	6979      	ldr	r1, [r7, #20]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff fb77 	bl	800b440 <calculateElapsedTime>
 800bd52:	4602      	mov	r2, r0
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	bf94      	ite	ls
 800bd5a:	2301      	movls	r3, #1
 800bd5c:	2300      	movhi	r3, #0
 800bd5e:	77fb      	strb	r3, [r7, #31]
 800bd60:	e008      	b.n	800bd74 <receiveConnack+0xc4>
        }
        else
        {
            breakFromLoop = loopCount >= MQTT_MAX_CONNACK_RECEIVE_RETRY_COUNT;
 800bd62:	8bbb      	ldrh	r3, [r7, #28]
 800bd64:	2b04      	cmp	r3, #4
 800bd66:	bf8c      	ite	hi
 800bd68:	2301      	movhi	r3, #1
 800bd6a:	2300      	movls	r3, #0
 800bd6c:	77fb      	strb	r3, [r7, #31]
            loopCount++;
 800bd6e:	8bbb      	ldrh	r3, [r7, #28]
 800bd70:	3301      	adds	r3, #1
 800bd72:	83bb      	strh	r3, [r7, #28]
        }

        /* Loop until there is data to read or if we have exceeded the timeout/retries. */
    } while( ( status == MQTTNoDataAvailable ) && ( breakFromLoop == false ) );
 800bd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd78:	2b07      	cmp	r3, #7
 800bd7a:	d105      	bne.n	800bd88 <receiveConnack+0xd8>
 800bd7c:	7ffb      	ldrb	r3, [r7, #31]
 800bd7e:	f083 0301 	eor.w	r3, r3, #1
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1cf      	bne.n	800bd28 <receiveConnack+0x78>

    if( status == MQTTSuccess )
 800bd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d123      	bne.n	800bdd8 <receiveConnack+0x128>
    {
        /* Time taken in this function so far. */
        timeTakenMs = calculateElapsedTime( getTimeStamp(), entryTimeMs );
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	4798      	blx	r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	6979      	ldr	r1, [r7, #20]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fb51 	bl	800b440 <calculateElapsedTime>
 800bd9e:	6138      	str	r0, [r7, #16]

        if( timeTakenMs < timeoutMs )
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d203      	bcs.n	800bdb0 <receiveConnack+0x100>
        {
            /* Calculate remaining time for receiving the remainder of
             * the packet. */
            remainingTimeMs = timeoutMs - timeTakenMs;
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	623b      	str	r3, [r7, #32]
         * Invoking receivePacket with remainingTime as 0 would attempt to
         * recv from network once. If using retries, the remainder of the
         * CONNACK packet is tried to be read only once. Reading once would be
         * good as the packet type and remaining length was already read. Hence,
         * the probability of the remaining 2 bytes available to read is very high. */
        if( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK )
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b20      	cmp	r3, #32
 800bdb6:	d10c      	bne.n	800bdd2 <receiveConnack+0x122>
        {
            status = receivePacket( pContext,
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	6a3a      	ldr	r2, [r7, #32]
 800bdbc:	9201      	str	r2, [sp, #4]
 800bdbe:	68da      	ldr	r2, [r3, #12]
 800bdc0:	9200      	str	r2, [sp, #0]
 800bdc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7ff fcaf 	bl	800b728 <receivePacket>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdd0:	e002      	b.n	800bdd8 <receiveConnack+0x128>
        {
            LogError( ( "Incorrect packet type %X received while expecting"
                        " CONNACK(%X).",
                        ( unsigned int ) pIncomingPacket->type,
                        MQTT_PACKET_TYPE_CONNACK ) );
            status = MQTTBadResponse;
 800bdd2:	2305      	movs	r3, #5
 800bdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800bdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10b      	bne.n	800bdf8 <receiveConnack+0x148>
    {
        /* Update the packet info pointer to the buffer read. */
        pIncomingPacket->pRemainingData = pContext->networkBuffer.pBuffer;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a1a      	ldr	r2, [r3, #32]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	605a      	str	r2, [r3, #4]

        /* Deserialize CONNACK. */
        status = MQTT_DeserializeAck( pIncomingPacket, NULL, pSessionPresent );
 800bde8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdea:	2100      	movs	r1, #0
 800bdec:	6838      	ldr	r0, [r7, #0]
 800bdee:	f000 ff0f 	bl	800cc10 <MQTT_DeserializeAck>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If a clean session is requested, a session present should not be set by
     * broker. */
    if( status == MQTTSuccess )
 800bdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d109      	bne.n	800be14 <receiveConnack+0x164>
    {
        if( ( cleanSession == true ) && ( *pSessionPresent == true ) )
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d006      	beq.n	800be14 <receiveConnack+0x164>
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <receiveConnack+0x164>
        {
            LogError( ( "Unexpected session present flag in CONNACK response from broker."
                        " CONNECT request with clean session was made with broker." ) );
            status = MQTTBadResponse;
 800be0e:	2305      	movs	r3, #5
 800be10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "CONNACK recv failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800be14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3728      	adds	r7, #40	; 0x28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	0801611c 	.word	0x0801611c
 800be24:	08016c20 	.word	0x08016c20
 800be28:	08016040 	.word	0x08016040
 800be2c:	080162ec 	.word	0x080162ec
 800be30:	08016140 	.word	0x08016140

0800be34 <handleSessionResumption>:

/*-----------------------------------------------------------*/

static MQTTStatus_t handleSessionResumption( MQTTContext_t * pContext,
                                             bool sessionPresent )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
    MQTTStatus_t status = MQTTSuccess;
 800be40:	2300      	movs	r3, #0
 800be42:	75fb      	strb	r3, [r7, #23]
    MQTTStateCursor_t cursor = MQTT_STATE_CURSOR_INITIALIZER;
 800be44:	2300      	movs	r3, #0
 800be46:	613b      	str	r3, [r7, #16]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800be48:	2300      	movs	r3, #0
 800be4a:	82bb      	strh	r3, [r7, #20]
    MQTTPublishState_t state = MQTTStateNull;
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]

    assert( pContext != NULL );
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <handleSessionResumption+0x30>
 800be56:	4b2c      	ldr	r3, [pc, #176]	; (800bf08 <handleSessionResumption+0xd4>)
 800be58:	4a2c      	ldr	r2, [pc, #176]	; (800bf0c <handleSessionResumption+0xd8>)
 800be5a:	f640 118d 	movw	r1, #2445	; 0x98d
 800be5e:	482c      	ldr	r0, [pc, #176]	; (800bf10 <handleSessionResumption+0xdc>)
 800be60:	f004 fed4 	bl	8010c0c <__assert_func>

    /* Reset the index and clear the buffer when a new session is established. */
    pContext->index = 0;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) memset( pContext->networkBuffer.pBuffer, 0, pContext->networkBuffer.size );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a18      	ldr	r0, [r3, #32]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be72:	461a      	mov	r2, r3
 800be74:	2100      	movs	r1, #0
 800be76:	f005 fff5 	bl	8011e64 <memset>

    if( sessionPresent == true )
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d023      	beq.n	800bec8 <handleSessionResumption+0x94>
    {
        /* Get the next packet ID for which a PUBREL need to be resent. */
        packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800be80:	f107 020f 	add.w	r2, r7, #15
 800be84:	f107 0310 	add.w	r3, r7, #16
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 fd01 	bl	800d892 <MQTT_PubrelToResend>
 800be90:	4603      	mov	r3, r0
 800be92:	82bb      	strh	r3, [r7, #20]

        /* Resend all the PUBREL acks after session is reestablished. */
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800be94:	e011      	b.n	800beba <handleSessionResumption+0x86>
               ( status == MQTTSuccess ) )
        {
            status = sendPublishAcks( pContext, packetId, state );
 800be96:	7bfa      	ldrb	r2, [r7, #15]
 800be98:	8abb      	ldrh	r3, [r7, #20]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff fcbd 	bl	800b81c <sendPublishAcks>
 800bea2:	4603      	mov	r3, r0
 800bea4:	75fb      	strb	r3, [r7, #23]

            packetId = MQTT_PubrelToResend( pContext, &cursor, &state );
 800bea6:	f107 020f 	add.w	r2, r7, #15
 800beaa:	f107 0310 	add.w	r3, r7, #16
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f001 fcee 	bl	800d892 <MQTT_PubrelToResend>
 800beb6:	4603      	mov	r3, r0
 800beb8:	82bb      	strh	r3, [r7, #20]
        while( ( packetId != MQTT_PACKET_ID_INVALID ) &&
 800beba:	8abb      	ldrh	r3, [r7, #20]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d01d      	beq.n	800befc <handleSessionResumption+0xc8>
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d0e7      	beq.n	800be96 <handleSessionResumption+0x62>
 800bec6:	e019      	b.n	800befc <handleSessionResumption+0xc8>
        }
    }
    else
    {
        /* Clear any existing records if a new session is established. */
        if( pContext->outgoingPublishRecordMaxCount > 0U )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d008      	beq.n	800bee2 <handleSessionResumption+0xae>
        {
            ( void ) memset( pContext->outgoingPublishRecords,
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6818      	ldr	r0, [r3, #0]
                             0x00,
                             pContext->outgoingPublishRecordMaxCount * sizeof( *pContext->outgoingPublishRecords ) );
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689b      	ldr	r3, [r3, #8]
            ( void ) memset( pContext->outgoingPublishRecords,
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	461a      	mov	r2, r3
 800bedc:	2100      	movs	r1, #0
 800bede:	f005 ffc1 	bl	8011e64 <memset>
        }

        if( pContext->incomingPublishRecordMaxCount > 0U )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d008      	beq.n	800befc <handleSessionResumption+0xc8>
        {
            ( void ) memset( pContext->incomingPublishRecords,
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6858      	ldr	r0, [r3, #4]
                             0x00,
                             pContext->incomingPublishRecordMaxCount * sizeof( *pContext->incomingPublishRecords ) );
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
            ( void ) memset( pContext->incomingPublishRecords,
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	461a      	mov	r2, r3
 800bef6:	2100      	movs	r1, #0
 800bef8:	f005 ffb4 	bl	8011e64 <memset>
        }
    }

    return status;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	0801611c 	.word	0x0801611c
 800bf0c:	08016c30 	.word	0x08016c30
 800bf10:	08016040 	.word	0x08016040

0800bf14 <validatePublishParams>:

static MQTTStatus_t validatePublishParams( const MQTTContext_t * pContext,
                                           const MQTTPublishInfo_t * pPublishInfo,
                                           uint16_t packetId )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	80fb      	strh	r3, [r7, #6]
    MQTTStatus_t status = MQTTSuccess;
 800bf22:	2300      	movs	r3, #0
 800bf24:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pPublishInfo == NULL ) )
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d002      	beq.n	800bf32 <validatePublishParams+0x1e>
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d102      	bne.n	800bf38 <validatePublishParams+0x24>
    {
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pPublishInfo=%p.",
                    ( void * ) pContext,
                    ( void * ) pPublishInfo ) );
        status = MQTTBadParameter;
 800bf32:	2301      	movs	r3, #1
 800bf34:	75fb      	strb	r3, [r7, #23]
 800bf36:	e01e      	b.n	800bf76 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->qos != MQTTQoS0 ) && ( packetId == 0U ) )
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <validatePublishParams+0x38>
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <validatePublishParams+0x38>
    {
        LogError( ( "Packet Id is 0 for PUBLISH with QoS=%u.",
                    ( unsigned int ) pPublishInfo->qos ) );
        status = MQTTBadParameter;
 800bf46:	2301      	movs	r3, #1
 800bf48:	75fb      	strb	r3, [r7, #23]
 800bf4a:	e014      	b.n	800bf76 <validatePublishParams+0x62>
    }
    else if( ( pPublishInfo->payloadLength > 0U ) && ( pPublishInfo->pPayload == NULL ) )
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d006      	beq.n	800bf62 <validatePublishParams+0x4e>
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <validatePublishParams+0x4e>
    {
        LogError( ( "A nonzero payload length requires a non-NULL payload: "
                    "payloadLength=%lu, pPayload=%p.",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    pPublishInfo->pPayload ) );
        status = MQTTBadParameter;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	75fb      	strb	r3, [r7, #23]
 800bf60:	e009      	b.n	800bf76 <validatePublishParams+0x62>
    }
    else if( ( pContext->outgoingPublishRecords == NULL ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d105      	bne.n	800bf76 <validatePublishParams+0x62>
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <validatePublishParams+0x62>
    {
        LogError( ( "Trying to publish a QoS > MQTTQoS0 packet when outgoing publishes "
                    "for QoS1/QoS2 have not been enabled. Please, call MQTT_InitStatefulQoS "
                    "to initialize and enable the use of QoS1/QoS2 publishes." ) );
        status = MQTTBadParameter;
 800bf72:	2301      	movs	r3, #1
 800bf74:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* MISRA else */
    }

    return status;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	371c      	adds	r7, #28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <MQTT_Init>:
MQTTStatus_t MQTT_Init( MQTTContext_t * pContext,
                        const TransportInterface_t * pTransportInterface,
                        MQTTGetCurrentTimeFunc_t getTimeFunction,
                        MQTTEventCallback_t userCallback,
                        const MQTTFixedBuffer_t * pNetworkBuffer )
{
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800bf92:	2300      	movs	r3, #0
 800bf94:	75fb      	strb	r3, [r7, #23]

    /* Validate arguments. */
    if( ( pContext == NULL ) || ( pTransportInterface == NULL ) ||
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d005      	beq.n	800bfa8 <MQTT_Init+0x24>
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <MQTT_Init+0x24>
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d102      	bne.n	800bfae <MQTT_Init+0x2a>
                    "pTransportInterface=%p, "
                    "pNetworkBuffer=%p",
                    ( void * ) pContext,
                    ( void * ) pTransportInterface,
                    ( void * ) pNetworkBuffer ) );
        status = MQTTBadParameter;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	75fb      	strb	r3, [r7, #23]
 800bfac:	e03a      	b.n	800c024 <MQTT_Init+0xa0>
    }
    else if( getTimeFunction == NULL )
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <MQTT_Init+0x36>
    {
        LogError( ( "Invalid parameter: getTimeFunction is NULL" ) );
        status = MQTTBadParameter;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	75fb      	strb	r3, [r7, #23]
 800bfb8:	e034      	b.n	800c024 <MQTT_Init+0xa0>
    }
    else if( userCallback == NULL )
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <MQTT_Init+0x42>
    {
        LogError( ( "Invalid parameter: userCallback is NULL" ) );
        status = MQTTBadParameter;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	75fb      	strb	r3, [r7, #23]
 800bfc4:	e02e      	b.n	800c024 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->recv == NULL )
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d102      	bne.n	800bfd4 <MQTT_Init+0x50>
    {
        LogError( ( "Invalid parameter: pTransportInterface->recv is NULL" ) );
        status = MQTTBadParameter;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	75fb      	strb	r3, [r7, #23]
 800bfd2:	e027      	b.n	800c024 <MQTT_Init+0xa0>
    }
    else if( pTransportInterface->send == NULL )
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <MQTT_Init+0x5e>
    {
        LogError( ( "Invalid parameter: pTransportInterface->send is NULL" ) );
        status = MQTTBadParameter;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	75fb      	strb	r3, [r7, #23]
 800bfe0:	e020      	b.n	800c024 <MQTT_Init+0xa0>
    }
    else
    {
        ( void ) memset( pContext, 0x00, sizeof( MQTTContext_t ) );
 800bfe2:	2250      	movs	r2, #80	; 0x50
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f005 ff3c 	bl	8011e64 <memset>

        pContext->connectStatus = MQTTNotConnected;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pContext->transportInterface = *pTransportInterface;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	f103 0410 	add.w	r4, r3, #16
 800bffc:	4613      	mov	r3, r2
 800bffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        pContext->getTime = getTimeFunction;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	62da      	str	r2, [r3, #44]	; 0x2c
        pContext->appCallback = userCallback;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	631a      	str	r2, [r3, #48]	; 0x30
        pContext->networkBuffer = *pNetworkBuffer;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c014:	3320      	adds	r3, #32
 800c016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c01a:	e883 0003 	stmia.w	r3, {r0, r1}

        /* Zero is not a valid packet ID per MQTT spec. Start from 1. */
        pContext->nextPacketId = 1;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2201      	movs	r2, #1
 800c022:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    return status;
 800c024:	7dfb      	ldrb	r3, [r7, #23]
}
 800c026:	4618      	mov	r0, r3
 800c028:	371c      	adds	r7, #28
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd90      	pop	{r4, r7, pc}

0800c02e <MQTT_Connect>:
MQTTStatus_t MQTT_Connect( MQTTContext_t * pContext,
                           const MQTTConnectInfo_t * pConnectInfo,
                           const MQTTPublishInfo_t * pWillInfo,
                           uint32_t timeoutMs,
                           bool * pSessionPresent )
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b08e      	sub	sp, #56	; 0x38
 800c032:	af02      	add	r7, sp, #8
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	607a      	str	r2, [r7, #4]
 800c03a:	603b      	str	r3, [r7, #0]
    size_t remainingLength = 0UL, packetSize = 0UL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c040:	2300      	movs	r3, #0
 800c042:	627b      	str	r3, [r7, #36]	; 0x24
    MQTTStatus_t status = MQTTSuccess;
 800c044:	2300      	movs	r3, #0
 800c046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MQTTPacketInfo_t incomingPacket = { 0 };
 800c04a:	f107 0314 	add.w	r3, r7, #20
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	605a      	str	r2, [r3, #4]
 800c054:	609a      	str	r2, [r3, #8]
 800c056:	60da      	str	r2, [r3, #12]

    incomingPacket.type = ( uint8_t ) 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	753b      	strb	r3, [r7, #20]

    if( ( pContext == NULL ) || ( pConnectInfo == NULL ) || ( pSessionPresent == NULL ) )
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d005      	beq.n	800c06e <MQTT_Connect+0x40>
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <MQTT_Connect+0x40>
 800c068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d102      	bne.n	800c074 <MQTT_Connect+0x46>
        LogError( ( "Argument cannot be NULL: pContext=%p, "
                    "pConnectInfo=%p, pSessionPresent=%p.",
                    ( void * ) pContext,
                    ( void * ) pConnectInfo,
                    ( void * ) pSessionPresent ) );
        status = MQTTBadParameter;
 800c06e:	2301      	movs	r3, #1
 800c070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <MQTT_Connect+0x64>
    {
        /* Get MQTT connect packet size and remaining length. */
        status = MQTT_GetConnectPacketSize( pConnectInfo,
 800c07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c080:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	68b8      	ldr	r0, [r7, #8]
 800c088:	f000 fcd2 	bl	800ca30 <MQTT_GetConnectPacketSize>
 800c08c:	4603      	mov	r3, r0
 800c08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        LogDebug( ( "CONNECT packet size is %lu and remaining length is %lu.",
                    ( unsigned long ) packetSize,
                    ( unsigned long ) remainingLength ) );
    }

    if( status == MQTTSuccess )
 800c092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c096:	2b00      	cmp	r3, #0
 800c098:	d108      	bne.n	800c0ac <MQTT_Connect+0x7e>
    {
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendConnectWithoutCopy( pContext,
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	68b9      	ldr	r1, [r7, #8]
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f7ff fce9 	bl	800ba78 <sendConnectWithoutCopy>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        MQTT_POST_SEND_HOOK( pContext );
    }

    /* Read CONNACK from transport layer. */
    if( status == MQTTSuccess )
 800c0ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10d      	bne.n	800c0d0 <MQTT_Connect+0xa2>
    {
        status = receiveConnack( pContext,
                                 timeoutMs,
                                 pConnectInfo->cleanSession,
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	781a      	ldrb	r2, [r3, #0]
        status = receiveConnack( pContext,
 800c0b8:	f107 0114 	add.w	r1, r7, #20
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff fdf3 	bl	800bcb0 <receiveConnack>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 &incomingPacket,
                                 pSessionPresent );
    }

    if( status == MQTTSuccess )
 800c0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d108      	bne.n	800c0ea <MQTT_Connect+0xbc>
    {
        /* Resend PUBRELs when reestablishing a session, or clear records for new sessions. */
        status = handleSessionResumption( pContext, *pSessionPresent );
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7ff fea8 	bl	800be34 <handleSessionResumption>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if( status == MQTTSuccess )
 800c0ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10f      	bne.n	800c112 <MQTT_Connect+0xe4>
    {
        LogInfo( ( "MQTT connection established with the broker." ) );
        pContext->connectStatus = MQTTConnected;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        /* Initialize keep-alive fields after a successful connection. */
        pContext->keepAliveIntervalSec = pConnectInfo->keepAliveSeconds;
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	885a      	ldrh	r2, [r3, #2]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pContext->waitingForPingResp = false;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pContext->pingReqSendTimeMs = 0U;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	649a      	str	r2, [r3, #72]	; 0x48
    {
        LogError( ( "MQTT connection failed with status = %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c116:	4618      	mov	r0, r3
 800c118:	3730      	adds	r7, #48	; 0x30
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <MQTT_Publish>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_Publish( MQTTContext_t * pContext,
                           const MQTTPublishInfo_t * pPublishInfo,
                           uint16_t packetId )
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b08c      	sub	sp, #48	; 0x30
 800c122:	af02      	add	r7, sp, #8
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	60b9      	str	r1, [r7, #8]
 800c128:	4613      	mov	r3, r2
 800c12a:	80fb      	strh	r3, [r7, #6]
    size_t headerSize = 0UL;
 800c12c:	2300      	movs	r3, #0
 800c12e:	623b      	str	r3, [r7, #32]
    size_t remainingLength = 0UL;
 800c130:	2300      	movs	r3, #0
 800c132:	61fb      	str	r3, [r7, #28]
    size_t packetSize = 0UL;
 800c134:	2300      	movs	r3, #0
 800c136:	61bb      	str	r3, [r7, #24]
    MQTTPublishState_t publishStatus = MQTTStateNull;
 800c138:	2300      	movs	r3, #0
 800c13a:	75fb      	strb	r3, [r7, #23]
    bool stateUpdateHookExecuted = false;
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     * an extra call to 'send' (in case writev is not defined) to send the
     * topic length.    */
    uint8_t mqttHeader[ 7U ];

    /* Validate arguments. */
    MQTTStatus_t status = validatePublishParams( pContext, pPublishInfo, packetId );
 800c142:	88fb      	ldrh	r3, [r7, #6]
 800c144:	461a      	mov	r2, r3
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f7ff fee3 	bl	800bf14 <validatePublishParams>
 800c14e:	4603      	mov	r3, r0
 800c150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == MQTTSuccess )
 800c154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10a      	bne.n	800c172 <MQTT_Publish+0x54>
    {
        /* Get the remaining length and packet size.*/
        status = MQTT_GetPublishPacketSize( pPublishInfo,
 800c15c:	f107 0218 	add.w	r2, r7, #24
 800c160:	f107 031c 	add.w	r3, r7, #28
 800c164:	4619      	mov	r1, r3
 800c166:	68b8      	ldr	r0, [r7, #8]
 800c168:	f000 fcce 	bl	800cb08 <MQTT_GetPublishPacketSize>
 800c16c:	4603      	mov	r3, r0
 800c16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                            &remainingLength,
                                            &packetSize );
    }

    if( status == MQTTSuccess )
 800c172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <MQTT_Publish+0x72>
    {
        status = MQTT_SerializePublishHeaderWithoutTopic( pPublishInfo,
 800c17a:	69f9      	ldr	r1, [r7, #28]
 800c17c:	f107 0320 	add.w	r3, r7, #32
 800c180:	f107 0210 	add.w	r2, r7, #16
 800c184:	68b8      	ldr	r0, [r7, #8]
 800c186:	f000 f961 	bl	800c44c <MQTT_SerializePublishHeaderWithoutTopic>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                          remainingLength,
                                                          mqttHeader,
                                                          &headerSize );
    }

    if( ( status == MQTTSuccess ) && ( pPublishInfo->qos > MQTTQoS0 ) )
 800c190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c194:	2b00      	cmp	r3, #0
 800c196:	d11b      	bne.n	800c1d0 <MQTT_Publish+0xb2>
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d017      	beq.n	800c1d0 <MQTT_Publish+0xb2>
    {
        MQTT_PRE_STATE_UPDATE_HOOK( pContext );

        /* Set the flag so that the corresponding hook can be called later. */
        stateUpdateHookExecuted = true;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        status = MQTT_ReserveState( pContext,
                                    packetId,
                                    pPublishInfo->qos );
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_ReserveState( pContext,
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f001 fa28 	bl	800d604 <MQTT_ReserveState>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* State already exists for a duplicate packet.
         * If a state doesn't exist, it will be handled as a new publish in
         * state engine. */
        if( ( status == MQTTStateCollision ) && ( pPublishInfo->dup == true ) )
 800c1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1be:	2b09      	cmp	r3, #9
 800c1c0:	d106      	bne.n	800c1d0 <MQTT_Publish+0xb2>
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	789b      	ldrb	r3, [r3, #2]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d002      	beq.n	800c1d0 <MQTT_Publish+0xb2>
        {
            status = MQTTSuccess;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    if( status == MQTTSuccess )
 800c1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10c      	bne.n	800c1f2 <MQTT_Publish+0xd4>
    {
        /* Take the mutex as multiple send calls are required for sending this
         * packet. */
        MQTT_PRE_SEND_HOOK( pContext );

        status = sendPublishWithoutCopy( pContext,
 800c1d8:	6a39      	ldr	r1, [r7, #32]
 800c1da:	f107 0210 	add.w	r2, r7, #16
 800c1de:	88fb      	ldrh	r3, [r7, #6]
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff fbd2 	bl	800b990 <sendPublishWithoutCopy>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Give the mutex away for the next taker. */
        MQTT_POST_SEND_HOOK( pContext );
    }

    if( ( status == MQTTSuccess ) &&
 800c1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d111      	bne.n	800c21e <MQTT_Publish+0x100>
        ( pPublishInfo->qos > MQTTQoS0 ) )
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
    if( ( status == MQTTSuccess ) &&
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00d      	beq.n	800c21e <MQTT_Publish+0x100>
        /* Update state machine after PUBLISH is sent.
         * Only to be done for QoS1 or QoS2. */
        status = MQTT_UpdateStatePublish( pContext,
                                          packetId,
                                          MQTT_SEND,
                                          pPublishInfo->qos,
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	781a      	ldrb	r2, [r3, #0]
        status = MQTT_UpdateStatePublish( pContext,
 800c206:	88f9      	ldrh	r1, [r7, #6]
 800c208:	f107 0317 	add.w	r3, r7, #23
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	4613      	mov	r3, r2
 800c210:	2200      	movs	r2, #0
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f001 fa4f 	bl	800d6b6 <MQTT_UpdateStatePublish>
 800c218:	4603      	mov	r3, r0
 800c21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    {
        LogError( ( "MQTT PUBLISH failed with status %s.",
                    MQTT_Status_strerror( status ) ) );
    }

    return status;
 800c21e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c222:	4618      	mov	r0, r3
 800c224:	3728      	adds	r7, #40	; 0x28
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <remainingLengthEncodedSize>:
static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp );

/*-----------------------------------------------------------*/

static size_t remainingLengthEncodedSize( size_t length )
{
 800c22a:	b480      	push	{r7}
 800c22c:	b085      	sub	sp, #20
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]

    /* Determine how many bytes are needed to encode length.
     * The values below are taken from the MQTT 3.1.1 spec. */

    /* 1 byte is needed to encode lengths between 0 and 127. */
    if( length < 128U )
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b7f      	cmp	r3, #127	; 0x7f
 800c236:	d802      	bhi.n	800c23e <remainingLengthEncodedSize+0x14>
    {
        encodedSize = 1U;
 800c238:	2301      	movs	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	e00f      	b.n	800c25e <remainingLengthEncodedSize+0x34>
    }
    /* 2 bytes are needed to encode lengths between 128 and 16,383. */
    else if( length < 16384U )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c244:	d202      	bcs.n	800c24c <remainingLengthEncodedSize+0x22>
    {
        encodedSize = 2U;
 800c246:	2302      	movs	r3, #2
 800c248:	60fb      	str	r3, [r7, #12]
 800c24a:	e008      	b.n	800c25e <remainingLengthEncodedSize+0x34>
    }
    /* 3 bytes are needed to encode lengths between 16,384 and 2,097,151. */
    else if( length < 2097152U )
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c252:	d202      	bcs.n	800c25a <remainingLengthEncodedSize+0x30>
    {
        encodedSize = 3U;
 800c254:	2303      	movs	r3, #3
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e001      	b.n	800c25e <remainingLengthEncodedSize+0x34>
    }
    /* 4 bytes are needed to encode lengths between 2,097,152 and 268,435,455. */
    else
    {
        encodedSize = 4U;
 800c25a:	2304      	movs	r3, #4
 800c25c:	60fb      	str	r3, [r7, #12]

    LogDebug( ( "Encoded size for length %lu is %lu bytes.",
                ( unsigned long ) length,
                ( unsigned long ) encodedSize ) );

    return encodedSize;
 800c25e:	68fb      	ldr	r3, [r7, #12]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <encodeRemainingLength>:

/*-----------------------------------------------------------*/

static uint8_t * encodeRemainingLength( uint8_t * pDestination,
                                        size_t length )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
    uint8_t lengthByte;
    uint8_t * pLengthEnd = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	613b      	str	r3, [r7, #16]
    size_t remainingLength = length;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	60fb      	str	r3, [r7, #12]

    assert( pDestination != NULL );
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d106      	bne.n	800c292 <encodeRemainingLength+0x26>
 800c284:	4b12      	ldr	r3, [pc, #72]	; (800c2d0 <encodeRemainingLength+0x64>)
 800c286:	4a13      	ldr	r2, [pc, #76]	; (800c2d4 <encodeRemainingLength+0x68>)
 800c288:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800c28c:	4812      	ldr	r0, [pc, #72]	; (800c2d8 <encodeRemainingLength+0x6c>)
 800c28e:	f004 fcbd 	bl	8010c0c <__assert_func>

    pLengthEnd = pDestination;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	613b      	str	r3, [r7, #16]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        lengthByte = ( uint8_t ) ( remainingLength % 128U );
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c29e:	75fb      	strb	r3, [r7, #23]
        remainingLength = remainingLength / 128U;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	09db      	lsrs	r3, r3, #7
 800c2a4:	60fb      	str	r3, [r7, #12]

        /* Set the high bit of this byte, indicating that there's more data. */
        if( remainingLength > 0U )
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <encodeRemainingLength+0x48>
        {
            UINT8_SET_BIT( lengthByte, 7 );
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
 800c2ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c2b2:	75fb      	strb	r3, [r7, #23]
        }

        /* Output a single encoded byte. */
        *pLengthEnd = lengthByte;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	7dfa      	ldrb	r2, [r7, #23]
 800c2b8:	701a      	strb	r2, [r3, #0]
        pLengthEnd++;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	613b      	str	r3, [r7, #16]
    } while( remainingLength > 0U );
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e7      	bne.n	800c296 <encodeRemainingLength+0x2a>

    return pLengthEnd;
 800c2c6:	693b      	ldr	r3, [r7, #16]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	080164b0 	.word	0x080164b0
 800c2d4:	08016c48 	.word	0x08016c48
 800c2d8:	080164c8 	.word	0x080164c8

0800c2dc <encodeString>:
/*-----------------------------------------------------------*/

static uint8_t * encodeString( uint8_t * pDestination,
                               const char * pSource,
                               uint16_t sourceLength )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	80fb      	strh	r3, [r7, #6]
    uint8_t * pBuffer = NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]

    /* Typecast const char * typed source buffer to const uint8_t *.
     * This is to use same type buffers in memcpy. */
    const uint8_t * pSourceBuffer = ( const uint8_t * ) pSource;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	613b      	str	r3, [r7, #16]

    assert( pDestination != NULL );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d106      	bne.n	800c306 <encodeString+0x2a>
 800c2f8:	4b15      	ldr	r3, [pc, #84]	; (800c350 <encodeString+0x74>)
 800c2fa:	4a16      	ldr	r2, [pc, #88]	; (800c354 <encodeString+0x78>)
 800c2fc:	f44f 7105 	mov.w	r1, #532	; 0x214
 800c300:	4815      	ldr	r0, [pc, #84]	; (800c358 <encodeString+0x7c>)
 800c302:	f004 fc83 	bl	8010c0c <__assert_func>

    pBuffer = pDestination;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	617b      	str	r3, [r7, #20]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pBuffer = UINT16_HIGH_BYTE( sourceLength );
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	0a1b      	lsrs	r3, r3, #8
 800c30e:	b29b      	uxth	r3, r3
 800c310:	b2da      	uxtb	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	3301      	adds	r3, #1
 800c31a:	617b      	str	r3, [r7, #20]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pBuffer = UINT16_LOW_BYTE( sourceLength );
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	3301      	adds	r3, #1
 800c328:	617b      	str	r3, [r7, #20]

    /* Copy the string into pBuffer. */
    if( pSourceBuffer != NULL )
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d005      	beq.n	800c33c <encodeString+0x60>
    {
        ( void ) memcpy( pBuffer, pSourceBuffer, sourceLength );
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	461a      	mov	r2, r3
 800c334:	6939      	ldr	r1, [r7, #16]
 800c336:	6978      	ldr	r0, [r7, #20]
 800c338:	f005 feab 	bl	8012092 <memcpy>
    }

    /* Return the pointer to the end of the encoded string. */
    pBuffer = &pBuffer[ sourceLength ];
 800c33c:	88fb      	ldrh	r3, [r7, #6]
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	4413      	add	r3, r2
 800c342:	617b      	str	r3, [r7, #20]

    return pBuffer;
 800c344:	697b      	ldr	r3, [r7, #20]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	080164b0 	.word	0x080164b0
 800c354:	08016c60 	.word	0x08016c60
 800c358:	080164c8 	.word	0x080164c8

0800c35c <calculatePublishPacketSize>:
/*-----------------------------------------------------------*/

static bool calculatePublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
    bool status = true;
 800c368:	2301      	movs	r3, #1
 800c36a:	77fb      	strb	r3, [r7, #31]
    size_t packetSize = 0, payloadLimit = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	61bb      	str	r3, [r7, #24]
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]

    assert( pPublishInfo != NULL );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d106      	bne.n	800c388 <calculatePublishPacketSize+0x2c>
 800c37a:	4b2e      	ldr	r3, [pc, #184]	; (800c434 <calculatePublishPacketSize+0xd8>)
 800c37c:	4a2e      	ldr	r2, [pc, #184]	; (800c438 <calculatePublishPacketSize+0xdc>)
 800c37e:	f240 2135 	movw	r1, #565	; 0x235
 800c382:	482e      	ldr	r0, [pc, #184]	; (800c43c <calculatePublishPacketSize+0xe0>)
 800c384:	f004 fc42 	bl	8010c0c <__assert_func>
    assert( pRemainingLength != NULL );
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <calculatePublishPacketSize+0x40>
 800c38e:	4b2c      	ldr	r3, [pc, #176]	; (800c440 <calculatePublishPacketSize+0xe4>)
 800c390:	4a29      	ldr	r2, [pc, #164]	; (800c438 <calculatePublishPacketSize+0xdc>)
 800c392:	f240 2136 	movw	r1, #566	; 0x236
 800c396:	4829      	ldr	r0, [pc, #164]	; (800c43c <calculatePublishPacketSize+0xe0>)
 800c398:	f004 fc38 	bl	8010c0c <__assert_func>
    assert( pPacketSize != NULL );
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <calculatePublishPacketSize+0x54>
 800c3a2:	4b28      	ldr	r3, [pc, #160]	; (800c444 <calculatePublishPacketSize+0xe8>)
 800c3a4:	4a24      	ldr	r2, [pc, #144]	; (800c438 <calculatePublishPacketSize+0xdc>)
 800c3a6:	f240 2137 	movw	r1, #567	; 0x237
 800c3aa:	4824      	ldr	r0, [pc, #144]	; (800c43c <calculatePublishPacketSize+0xe0>)
 800c3ac:	f004 fc2e 	bl	8010c0c <__assert_func>

    /* The variable header of a PUBLISH packet always contains the topic name.
     * The first 2 bytes of UTF-8 string contains length of the string.
     */
    packetSize += pPublishInfo->topicNameLength + sizeof( uint16_t );
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	891b      	ldrh	r3, [r3, #8]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	3302      	adds	r3, #2
 800c3bc:	61bb      	str	r3, [r7, #24]

    /* The variable header of a QoS 1 or 2 PUBLISH packet contains a 2-byte
     * packet identifier. */
    if( pPublishInfo->qos > MQTTQoS0 )
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <calculatePublishPacketSize+0x70>
    {
        packetSize += sizeof( uint16_t );
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	3302      	adds	r3, #2
 800c3ca:	61bb      	str	r3, [r7, #24]
    }

    /* Calculate the maximum allowed size of the payload for the given parameters.
     * This calculation excludes the "Remaining length" encoding, whose size is not
     * yet known. */
    payloadLimit = MQTT_MAX_REMAINING_LENGTH - packetSize - 1U;
 800c3cc:	69ba      	ldr	r2, [r7, #24]
 800c3ce:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <calculatePublishPacketSize+0xec>)
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]

    /* Ensure that the given payload fits within the calculated limit. */
    if( pPublishInfo->payloadLength > payloadLimit )
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d202      	bcs.n	800c3e4 <calculatePublishPacketSize+0x88>
                    "%lu so as not to exceed the maximum "
                    "remaining length of MQTT 3.1.1 packet( %lu ).",
                    ( unsigned long ) pPublishInfo->payloadLength,
                    ( unsigned long ) payloadLimit,
                    MQTT_MAX_REMAINING_LENGTH ) );
        status = false;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	77fb      	strb	r3, [r7, #31]
 800c3e2:	e021      	b.n	800c428 <calculatePublishPacketSize+0xcc>
    }
    else
    {
        /* Add the length of the PUBLISH payload. At this point, the "Remaining length"
         * has been calculated. */
        packetSize += pPublishInfo->payloadLength;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]

        /* Now that the "Remaining length" is known, recalculate the payload limit
         * based on the size of its encoding. */
        payloadLimit -= remainingLengthEncodedSize( packetSize );
 800c3ee:	69b8      	ldr	r0, [r7, #24]
 800c3f0:	f7ff ff1b 	bl	800c22a <remainingLengthEncodedSize>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	617b      	str	r3, [r7, #20]

        /* Check that the given payload fits within the size allowed by MQTT spec. */
        if( pPublishInfo->payloadLength > payloadLimit )
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	429a      	cmp	r2, r3
 800c404:	d202      	bcs.n	800c40c <calculatePublishPacketSize+0xb0>
                        "%lu so as not to exceed the maximum "
                        "remaining length of MQTT 3.1.1 packet( %lu ).",
                        ( unsigned long ) pPublishInfo->payloadLength,
                        ( unsigned long ) payloadLimit,
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = false;
 800c406:	2300      	movs	r3, #0
 800c408:	77fb      	strb	r3, [r7, #31]
 800c40a:	e00d      	b.n	800c428 <calculatePublishPacketSize+0xcc>
        }
        else
        {
            /* Set the "Remaining length" output parameter and calculate the full
             * size of the PUBLISH packet. */
            *pRemainingLength = packetSize;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	601a      	str	r2, [r3, #0]

            packetSize += 1U + remainingLengthEncodedSize( packetSize );
 800c412:	69b8      	ldr	r0, [r7, #24]
 800c414:	f7ff ff09 	bl	800c22a <remainingLengthEncodedSize>
 800c418:	4603      	mov	r3, r0
 800c41a:	3301      	adds	r3, #1
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	4413      	add	r3, r2
 800c420:	61bb      	str	r3, [r7, #24]
            *pPacketSize = packetSize;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	601a      	str	r2, [r3, #0]
    }

    LogDebug( ( "PUBLISH packet remaining length=%lu and packet size=%lu.",
                ( unsigned long ) *pRemainingLength,
                ( unsigned long ) *pPacketSize ) );
    return status;
 800c428:	7ffb      	ldrb	r3, [r7, #31]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3720      	adds	r7, #32
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	080164fc 	.word	0x080164fc
 800c438:	08016c70 	.word	0x08016c70
 800c43c:	080164c8 	.word	0x080164c8
 800c440:	08016514 	.word	0x08016514
 800c444:	08016530 	.word	0x08016530
 800c448:	0ffffffe 	.word	0x0ffffffe

0800c44c <MQTT_SerializePublishHeaderWithoutTopic>:

MQTTStatus_t MQTT_SerializePublishHeaderWithoutTopic( const MQTTPublishInfo_t * pPublishInfo,
                                                      size_t remainingLength,
                                                      uint8_t * pBuffer,
                                                      size_t * headerSize )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
 800c458:	603b      	str	r3, [r7, #0]
    size_t headerLength;
    uint8_t * pIndex;
    MQTTStatus_t status = MQTTSuccess;
 800c45a:	2300      	movs	r3, #0
 800c45c:	77bb      	strb	r3, [r7, #30]

    /* The first byte of a PUBLISH packet contains the packet type and flags. */
    uint8_t publishFlags = MQTT_PACKET_TYPE_PUBLISH;
 800c45e:	2330      	movs	r3, #48	; 0x30
 800c460:	77fb      	strb	r3, [r7, #31]

    /* Get the start address of the buffer. */
    pIndex = pBuffer;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	61bb      	str	r3, [r7, #24]

    /* Length of serialized packet = First byte
     *                               + Length of encoded remaining length
     *                               + Encoded topic length. */
    headerLength = 1U + remainingLengthEncodedSize( remainingLength ) + 2U;
 800c466:	68b8      	ldr	r0, [r7, #8]
 800c468:	f7ff fedf 	bl	800c22a <remainingLengthEncodedSize>
 800c46c:	4603      	mov	r3, r0
 800c46e:	3303      	adds	r3, #3
 800c470:	617b      	str	r3, [r7, #20]

    if( pPublishInfo->qos == MQTTQoS1 )
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d104      	bne.n	800c484 <MQTT_SerializePublishHeaderWithoutTopic+0x38>
    {
        LogDebug( ( "Adding QoS as QoS1 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS1 );
 800c47a:	7ffb      	ldrb	r3, [r7, #31]
 800c47c:	f043 0302 	orr.w	r3, r3, #2
 800c480:	77fb      	strb	r3, [r7, #31]
 800c482:	e007      	b.n	800c494 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    }
    else if( pPublishInfo->qos == MQTTQoS2 )
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d103      	bne.n	800c494 <MQTT_SerializePublishHeaderWithoutTopic+0x48>
    {
        LogDebug( ( "Adding QoS as QoS2 in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_QOS2 );
 800c48c:	7ffb      	ldrb	r3, [r7, #31]
 800c48e:	f043 0304 	orr.w	r3, r3, #4
 800c492:	77fb      	strb	r3, [r7, #31]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    if( pPublishInfo->retain == true )
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <MQTT_SerializePublishHeaderWithoutTopic+0x58>
    {
        LogDebug( ( "Adding retain bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_RETAIN );
 800c49c:	7ffb      	ldrb	r3, [r7, #31]
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	77fb      	strb	r3, [r7, #31]
    }

    if( pPublishInfo->dup == true )
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	789b      	ldrb	r3, [r3, #2]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <MQTT_SerializePublishHeaderWithoutTopic+0x68>
    {
        LogDebug( ( "Adding dup bit in PUBLISH flags." ) );
        UINT8_SET_BIT( publishFlags, MQTT_PUBLISH_FLAG_DUP );
 800c4ac:	7ffb      	ldrb	r3, [r7, #31]
 800c4ae:	f043 0308 	orr.w	r3, r3, #8
 800c4b2:	77fb      	strb	r3, [r7, #31]
    }

    *pIndex = publishFlags;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	7ffa      	ldrb	r2, [r7, #31]
 800c4b8:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	61bb      	str	r3, [r7, #24]

    /* The "Remaining length" is encoded from the second byte. */
    pIndex = encodeRemainingLength( pIndex, remainingLength );
 800c4c0:	68b9      	ldr	r1, [r7, #8]
 800c4c2:	69b8      	ldr	r0, [r7, #24]
 800c4c4:	f7ff fed2 	bl	800c26c <encodeRemainingLength>
 800c4c8:	61b8      	str	r0, [r7, #24]

    /* The first byte of a UTF-8 string is the high byte of the string length. */
    *pIndex = UINT16_HIGH_BYTE( pPublishInfo->topicNameLength );
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	891b      	ldrh	r3, [r3, #8]
 800c4ce:	0a1b      	lsrs	r3, r3, #8
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	61bb      	str	r3, [r7, #24]

    /* The second byte of a UTF-8 string is the low byte of the string length. */
    *pIndex = UINT16_LOW_BYTE( pPublishInfo->topicNameLength );
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	891b      	ldrh	r3, [r3, #8]
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	701a      	strb	r2, [r3, #0]
    pIndex++;
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	61bb      	str	r3, [r7, #24]

    *headerSize = headerLength;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	601a      	str	r2, [r3, #0]

    return status;
 800c4f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3720      	adds	r7, #32
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <getRemainingLength>:
    assert( ( ( size_t ) ( pIndex - pFixedBuffer->pBuffer ) ) <= pFixedBuffer->size );
}

static size_t getRemainingLength( TransportRecv_t recvFunc,
                                  NetworkContext_t * pNetworkContext )
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b088      	sub	sp, #32
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
    size_t remainingLength = 0, multiplier = 1, bytesDecoded = 0, expectedSize = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	61fb      	str	r3, [r7, #28]
 800c50c:	2301      	movs	r3, #1
 800c50e:	61bb      	str	r3, [r7, #24]
 800c510:	2300      	movs	r3, #0
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	2300      	movs	r3, #0
 800c516:	613b      	str	r3, [r7, #16]
    uint8_t encodedByte = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	72fb      	strb	r3, [r7, #11]
    int32_t bytesReceived = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	60fb      	str	r3, [r7, #12]

    /* This algorithm is copied from the MQTT v3.1.1 spec. */
    do
    {
        if( multiplier > 2097152U ) /* 128 ^ 3 */
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c526:	d903      	bls.n	800c530 <getRemainingLength+0x32>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800c528:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	e01c      	b.n	800c56a <getRemainingLength+0x6c>
        }
        else
        {
            bytesReceived = recvFunc( pNetworkContext, &encodedByte, 1U );
 800c530:	f107 010b 	add.w	r1, r7, #11
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	6838      	ldr	r0, [r7, #0]
 800c53a:	4798      	blx	r3
 800c53c:	60f8      	str	r0, [r7, #12]

            if( bytesReceived == 1 )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d10f      	bne.n	800c564 <getRemainingLength+0x66>
            {
                remainingLength += ( ( size_t ) encodedByte & 0x7FU ) * multiplier;
 800c544:	7afb      	ldrb	r3, [r7, #11]
 800c546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	fb02 f303 	mul.w	r3, r2, r3
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	4413      	add	r3, r2
 800c554:	61fb      	str	r3, [r7, #28]
                multiplier *= 128U;
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	01db      	lsls	r3, r3, #7
 800c55a:	61bb      	str	r3, [r7, #24]
                bytesDecoded++;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	3301      	adds	r3, #1
 800c560:	617b      	str	r3, [r7, #20]
 800c562:	e002      	b.n	800c56a <getRemainingLength+0x6c>
            }
            else
            {
                remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800c564:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c568:	61fb      	str	r3, [r7, #28]
            }
        }

        if( remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c570:	d004      	beq.n	800c57c <getRemainingLength+0x7e>
        {
            break;
        }
    } while( ( encodedByte & 0x80U ) != 0U );
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	b25b      	sxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	dbd2      	blt.n	800c520 <getRemainingLength+0x22>
 800c57a:	e000      	b.n	800c57e <getRemainingLength+0x80>
            break;
 800c57c:	bf00      	nop

    /* Check that the decoded remaining length conforms to the MQTT specification. */
    if( remainingLength != MQTT_REMAINING_LENGTH_INVALID )
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c584:	d00a      	beq.n	800c59c <getRemainingLength+0x9e>
    {
        expectedSize = remainingLengthEncodedSize( remainingLength );
 800c586:	69f8      	ldr	r0, [r7, #28]
 800c588:	f7ff fe4f 	bl	800c22a <remainingLengthEncodedSize>
 800c58c:	6138      	str	r0, [r7, #16]

        if( bytesDecoded != expectedSize )
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	429a      	cmp	r2, r3
 800c594:	d002      	beq.n	800c59c <getRemainingLength+0x9e>
        {
            remainingLength = MQTT_REMAINING_LENGTH_INVALID;
 800c596:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c59a:	61fb      	str	r3, [r7, #28]
        }
    }

    return remainingLength;
 800c59c:	69fb      	ldr	r3, [r7, #28]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3720      	adds	r7, #32
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <incomingPacketValid>:
}

/*-----------------------------------------------------------*/

static bool incomingPacketValid( uint8_t packetType )
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b085      	sub	sp, #20
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	73fb      	strb	r3, [r7, #15]

    /* Check packet type. Mask out lower bits to ignore flags. */
    switch( packetType & 0xF0U )
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ba:	2bd0      	cmp	r3, #208	; 0xd0
 800c5bc:	d01d      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5be:	2bd0      	cmp	r3, #208	; 0xd0
 800c5c0:	d826      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5c2:	2bb0      	cmp	r3, #176	; 0xb0
 800c5c4:	d019      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5c6:	2bb0      	cmp	r3, #176	; 0xb0
 800c5c8:	d822      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5ca:	2b90      	cmp	r3, #144	; 0x90
 800c5cc:	d015      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5ce:	2b90      	cmp	r3, #144	; 0x90
 800c5d0:	d81e      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5d2:	2b70      	cmp	r3, #112	; 0x70
 800c5d4:	d011      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5d6:	2b70      	cmp	r3, #112	; 0x70
 800c5d8:	d81a      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5da:	2b60      	cmp	r3, #96	; 0x60
 800c5dc:	d010      	beq.n	800c600 <incomingPacketValid+0x5a>
 800c5de:	2b60      	cmp	r3, #96	; 0x60
 800c5e0:	d816      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5e2:	2b50      	cmp	r3, #80	; 0x50
 800c5e4:	d009      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5e6:	2b50      	cmp	r3, #80	; 0x50
 800c5e8:	d812      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5ea:	2b40      	cmp	r3, #64	; 0x40
 800c5ec:	d005      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5ee:	2b40      	cmp	r3, #64	; 0x40
 800c5f0:	d80e      	bhi.n	800c610 <incomingPacketValid+0x6a>
 800c5f2:	2b20      	cmp	r3, #32
 800c5f4:	d001      	beq.n	800c5fa <incomingPacketValid+0x54>
 800c5f6:	2b30      	cmp	r3, #48	; 0x30
 800c5f8:	d10a      	bne.n	800c610 <incomingPacketValid+0x6a>
        case MQTT_PACKET_TYPE_PUBREC:
        case MQTT_PACKET_TYPE_PUBCOMP:
        case MQTT_PACKET_TYPE_SUBACK:
        case MQTT_PACKET_TYPE_UNSUBACK:
        case MQTT_PACKET_TYPE_PINGRESP:
            status = true;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	73fb      	strb	r3, [r7, #15]
            break;
 800c5fe:	e00a      	b.n	800c616 <incomingPacketValid+0x70>

        case ( MQTT_PACKET_TYPE_PUBREL & 0xF0U ):

            /* The second bit of a PUBREL must be set. */
            if( ( packetType & 0x02U ) > 0U )
 800c600:	79fb      	ldrb	r3, [r7, #7]
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <incomingPacketValid+0x6e>
            {
                status = true;
 800c60a:	2301      	movs	r3, #1
 800c60c:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800c60e:	e001      	b.n	800c614 <incomingPacketValid+0x6e>

        /* Any other packet type is invalid. */
        default:
            LogWarn( ( "Incoming packet invalid: Packet type=%u.",
                       ( unsigned int ) packetType ) );
            break;
 800c610:	bf00      	nop
 800c612:	e000      	b.n	800c616 <incomingPacketValid+0x70>
            break;
 800c614:	bf00      	nop
    }

    return status;
 800c616:	7bfb      	ldrb	r3, [r7, #15]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <logConnackResponse>:
}

/*-----------------------------------------------------------*/

static void logConnackResponse( uint8_t responseCode )
{
 800c624:	b5b0      	push	{r4, r5, r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	71fb      	strb	r3, [r7, #7]
    const char * const pConnackResponses[ 6 ] =
 800c62e:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <logConnackResponse+0x3c>)
 800c630:	f107 0408 	add.w	r4, r7, #8
 800c634:	461d      	mov	r5, r3
 800c636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c63a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c63e:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Avoid unused parameter warning when assert and logs are disabled. */
    ( void ) responseCode;
    ( void ) pConnackResponses;

    assert( responseCode <= 5U );
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	2b05      	cmp	r3, #5
 800c646:	d906      	bls.n	800c656 <logConnackResponse+0x32>
 800c648:	4b06      	ldr	r3, [pc, #24]	; (800c664 <logConnackResponse+0x40>)
 800c64a:	4a07      	ldr	r2, [pc, #28]	; (800c668 <logConnackResponse+0x44>)
 800c64c:	f240 412e 	movw	r1, #1070	; 0x42e
 800c650:	4806      	ldr	r0, [pc, #24]	; (800c66c <logConnackResponse+0x48>)
 800c652:	f004 fadb 	bl	8010c0c <__assert_func>
    else
    {
        /* Log an error based on the CONNACK response code. */
        LogError( ( "%s", pConnackResponses[ responseCode ] ) );
    }
}
 800c656:	bf00      	nop
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bdb0      	pop	{r4, r5, r7, pc}
 800c65e:	bf00      	nop
 800c660:	08016750 	.word	0x08016750
 800c664:	08016648 	.word	0x08016648
 800c668:	08016c8c 	.word	0x08016c8c
 800c66c:	080164c8 	.word	0x080164c8

0800c670 <deserializeConnack>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeConnack( const MQTTPacketInfo_t * pConnack,
                                        bool * pSessionPresent )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c67a:	2300      	movs	r3, #0
 800c67c:	73fb      	strb	r3, [r7, #15]
    const uint8_t * pRemainingData = NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	60bb      	str	r3, [r7, #8]

    assert( pConnack != NULL );
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d106      	bne.n	800c696 <deserializeConnack+0x26>
 800c688:	4b2a      	ldr	r3, [pc, #168]	; (800c734 <deserializeConnack+0xc4>)
 800c68a:	4a2b      	ldr	r2, [pc, #172]	; (800c738 <deserializeConnack+0xc8>)
 800c68c:	f240 4144 	movw	r1, #1092	; 0x444
 800c690:	482a      	ldr	r0, [pc, #168]	; (800c73c <deserializeConnack+0xcc>)
 800c692:	f004 fabb 	bl	8010c0c <__assert_func>
    assert( pSessionPresent != NULL );
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <deserializeConnack+0x3a>
 800c69c:	4b28      	ldr	r3, [pc, #160]	; (800c740 <deserializeConnack+0xd0>)
 800c69e:	4a26      	ldr	r2, [pc, #152]	; (800c738 <deserializeConnack+0xc8>)
 800c6a0:	f240 4145 	movw	r1, #1093	; 0x445
 800c6a4:	4825      	ldr	r0, [pc, #148]	; (800c73c <deserializeConnack+0xcc>)
 800c6a6:	f004 fab1 	bl	8010c0c <__assert_func>
    pRemainingData = pConnack->pRemainingData;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	60bb      	str	r3, [r7, #8]

    /* According to MQTT 3.1.1, the second byte of CONNACK must specify a
     * "Remaining length" of 2. */
    if( pConnack->remainingLength != MQTT_PACKET_CONNACK_REMAINING_LENGTH )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d002      	beq.n	800c6be <deserializeConnack+0x4e>
    {
        LogError( ( "CONNACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_CONNACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c6b8:	2305      	movs	r3, #5
 800c6ba:	73fb      	strb	r3, [r7, #15]
 800c6bc:	e01d      	b.n	800c6fa <deserializeConnack+0x8a>
    }

    /* Check the reserved bits in CONNACK. The high 7 bits of the third byte
     * in CONNACK must be 0. */
    else if( ( pRemainingData[ 0 ] | 0x01U ) != 0x01U )
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	f043 0301 	orr.w	r3, r3, #1
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d002      	beq.n	800c6d2 <deserializeConnack+0x62>
    {
        LogError( ( "Reserved bits in CONNACK incorrect." ) );

        status = MQTTBadResponse;
 800c6cc:	2305      	movs	r3, #5
 800c6ce:	73fb      	strb	r3, [r7, #15]
 800c6d0:	e013      	b.n	800c6fa <deserializeConnack+0x8a>
    }
    else
    {
        /* Determine if the "Session Present" bit is set. This is the lowest bit of
         * the third byte in CONNACK. */
        if( ( pRemainingData[ 0 ] & MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <deserializeConnack+0x84>
            == MQTT_PACKET_CONNACK_SESSION_PRESENT_MASK )
        {
            LogDebug( ( "CONNACK session present bit set." ) );
            *pSessionPresent = true;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	701a      	strb	r2, [r3, #0]

            /* MQTT 3.1.1 specifies that the fourth byte in CONNACK must be 0 if the
             * "Session Present" bit is set. */
            if( pRemainingData[ 1 ] != 0U )
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d005      	beq.n	800c6fa <deserializeConnack+0x8a>
            {
                LogError( ( "Session Present bit is set, but connect return code in CONNACK is %u (nonzero).",
                            ( unsigned int ) pRemainingData[ 1 ] ) );
                status = MQTTBadResponse;
 800c6ee:	2305      	movs	r3, #5
 800c6f0:	73fb      	strb	r3, [r7, #15]
 800c6f2:	e002      	b.n	800c6fa <deserializeConnack+0x8a>
            }
        }
        else
        {
            LogDebug( ( "CONNACK session present bit not set." ) );
            *pSessionPresent = false;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	701a      	strb	r2, [r3, #0]
        }
    }

    if( status == MQTTSuccess )
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d114      	bne.n	800c72a <deserializeConnack+0xba>
    {
        /* In MQTT 3.1.1, only values 0 through 5 are valid CONNACK response codes. */
        if( pRemainingData[ 1 ] > 5U )
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	3301      	adds	r3, #1
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b05      	cmp	r3, #5
 800c708:	d902      	bls.n	800c710 <deserializeConnack+0xa0>
        {
            LogError( ( "CONNACK response %u is invalid.",
                        ( unsigned int ) pRemainingData[ 1 ] ) );

            status = MQTTBadResponse;
 800c70a:	2305      	movs	r3, #5
 800c70c:	73fb      	strb	r3, [r7, #15]
 800c70e:	e00c      	b.n	800c72a <deserializeConnack+0xba>
        }
        else
        {
            /* Print the appropriate message for the CONNACK response code if logs are
             * enabled. */
            logConnackResponse( pRemainingData[ 1 ] );
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	3301      	adds	r3, #1
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff ff84 	bl	800c624 <logConnackResponse>

            /* A nonzero CONNACK response code means the connection was refused. */
            if( pRemainingData[ 1 ] > 0U )
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	3301      	adds	r3, #1
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <deserializeConnack+0xba>
            {
                status = MQTTServerRefused;
 800c726:	2306      	movs	r3, #6
 800c728:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return status;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	08016768 	.word	0x08016768
 800c738:	08016ca0 	.word	0x08016ca0
 800c73c:	080164c8 	.word	0x080164c8
 800c740:	0801677c 	.word	0x0801677c

0800c744 <readSubackStatus>:

/*-----------------------------------------------------------*/

static MQTTStatus_t readSubackStatus( size_t statusCount,
                                      const uint8_t * pStatusStart )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c74e:	2300      	movs	r3, #0
 800c750:	75fb      	strb	r3, [r7, #23]
    uint8_t subscriptionStatus = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	73fb      	strb	r3, [r7, #15]
    size_t i = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	613b      	str	r3, [r7, #16]

    assert( pStatusStart != NULL );
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d106      	bne.n	800c76e <readSubackStatus+0x2a>
 800c760:	4b17      	ldr	r3, [pc, #92]	; (800c7c0 <readSubackStatus+0x7c>)
 800c762:	4a18      	ldr	r2, [pc, #96]	; (800c7c4 <readSubackStatus+0x80>)
 800c764:	f240 41e6 	movw	r1, #1254	; 0x4e6
 800c768:	4817      	ldr	r0, [pc, #92]	; (800c7c8 <readSubackStatus+0x84>)
 800c76a:	f004 fa4f 	bl	8010c0c <__assert_func>

    /* Iterate through each status byte in the SUBACK packet. */
    for( i = 0; i < statusCount; i++ )
 800c76e:	2300      	movs	r3, #0
 800c770:	613b      	str	r3, [r7, #16]
 800c772:	e019      	b.n	800c7a8 <readSubackStatus+0x64>
    {
        /* Read a single status byte in SUBACK. */
        subscriptionStatus = pStatusStart[ i ];
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	4413      	add	r3, r2
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	73fb      	strb	r3, [r7, #15]

        /* MQTT 3.1.1 defines the following values as status codes. */
        switch( subscriptionStatus )
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b02      	cmp	r3, #2
 800c782:	dc02      	bgt.n	800c78a <readSubackStatus+0x46>
 800c784:	2b00      	cmp	r3, #0
 800c786:	da08      	bge.n	800c79a <readSubackStatus+0x56>
 800c788:	e004      	b.n	800c794 <readSubackStatus+0x50>
 800c78a:	2b80      	cmp	r3, #128	; 0x80
 800c78c:	d102      	bne.n	800c794 <readSubackStatus+0x50>
            case 0x80:

                LogWarn( ( "Topic filter %lu refused.", ( unsigned long ) i ) );

                /* Application should remove subscription from the list */
                status = MQTTServerRefused;
 800c78e:	2306      	movs	r3, #6
 800c790:	75fb      	strb	r3, [r7, #23]

                break;
 800c792:	e003      	b.n	800c79c <readSubackStatus+0x58>

            default:
                LogError( ( "Bad SUBSCRIBE status %u.",
                            ( unsigned int ) subscriptionStatus ) );

                status = MQTTBadResponse;
 800c794:	2305      	movs	r3, #5
 800c796:	75fb      	strb	r3, [r7, #23]

                break;
 800c798:	e000      	b.n	800c79c <readSubackStatus+0x58>
                break;
 800c79a:	bf00      	nop
        }

        /* Stop parsing the subscription statuses if a bad response was received. */
        if( status == MQTTBadResponse )
 800c79c:	7dfb      	ldrb	r3, [r7, #23]
 800c79e:	2b05      	cmp	r3, #5
 800c7a0:	d007      	beq.n	800c7b2 <readSubackStatus+0x6e>
    for( i = 0; i < statusCount; i++ )
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	613b      	str	r3, [r7, #16]
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d3e1      	bcc.n	800c774 <readSubackStatus+0x30>
 800c7b0:	e000      	b.n	800c7b4 <readSubackStatus+0x70>
        {
            break;
 800c7b2:	bf00      	nop
        }
    }

    return status;
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	080167c8 	.word	0x080167c8
 800c7c4:	08016cb4 	.word	0x08016cb4
 800c7c8:	080164c8 	.word	0x080164c8

0800c7cc <deserializeSuback>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSuback( const MQTTPacketInfo_t * pSuback,
                                       uint16_t * pPacketIdentifier )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	75fb      	strb	r3, [r7, #23]
    size_t remainingLength;
    const uint8_t * pVariableHeader = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	613b      	str	r3, [r7, #16]

    assert( pSuback != NULL );
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d106      	bne.n	800c7f2 <deserializeSuback+0x26>
 800c7e4:	4b1f      	ldr	r3, [pc, #124]	; (800c864 <deserializeSuback+0x98>)
 800c7e6:	4a20      	ldr	r2, [pc, #128]	; (800c868 <deserializeSuback+0x9c>)
 800c7e8:	f240 511f 	movw	r1, #1311	; 0x51f
 800c7ec:	481f      	ldr	r0, [pc, #124]	; (800c86c <deserializeSuback+0xa0>)
 800c7ee:	f004 fa0d 	bl	8010c0c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <deserializeSuback+0x3a>
 800c7f8:	4b1d      	ldr	r3, [pc, #116]	; (800c870 <deserializeSuback+0xa4>)
 800c7fa:	4a1b      	ldr	r2, [pc, #108]	; (800c868 <deserializeSuback+0x9c>)
 800c7fc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800c800:	481a      	ldr	r0, [pc, #104]	; (800c86c <deserializeSuback+0xa0>)
 800c802:	f004 fa03 	bl	8010c0c <__assert_func>

    remainingLength = pSuback->remainingLength;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	60fb      	str	r3, [r7, #12]
    pVariableHeader = pSuback->pRemainingData;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	613b      	str	r3, [r7, #16]

    /* A SUBACK must have a remaining length of at least 3 to accommodate the
     * packet identifier and at least 1 return code. */
    if( remainingLength < 3U )
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2b02      	cmp	r3, #2
 800c816:	d802      	bhi.n	800c81e <deserializeSuback+0x52>
    {
        LogError( ( "SUBACK cannot have a remaining length less than 3." ) );
        status = MQTTBadResponse;
 800c818:	2305      	movs	r3, #5
 800c81a:	75fb      	strb	r3, [r7, #23]
 800c81c:	e01d      	b.n	800c85a <deserializeSuback+0x8e>
    }
    else
    {
        /* Extract the packet identifier (first 2 bytes of variable header) from SUBACK. */
        *pPacketIdentifier = UINT16_DECODE( pVariableHeader );
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	b21a      	sxth	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	3301      	adds	r3, #1
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	b21b      	sxth	r3, r3
 800c82e:	4313      	orrs	r3, r2
 800c830:	b21b      	sxth	r3, r3
 800c832:	b29a      	uxth	r2, r3
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        if( *pPacketIdentifier == 0U )
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	881b      	ldrh	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <deserializeSuback+0x7a>
        {
            status = MQTTBadResponse;
 800c840:	2305      	movs	r3, #5
 800c842:	75fb      	strb	r3, [r7, #23]
 800c844:	e009      	b.n	800c85a <deserializeSuback+0x8e>
        }
        else
        {
            status = readSubackStatus( remainingLength - sizeof( uint16_t ),
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	1e9a      	subs	r2, r3, #2
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	3302      	adds	r3, #2
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7ff ff77 	bl	800c744 <readSubackStatus>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]
                                       &pVariableHeader[ sizeof( uint16_t ) ] );
        }
    }

    return status;
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3718      	adds	r7, #24
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	080167e0 	.word	0x080167e0
 800c868:	08016cc8 	.word	0x08016cc8
 800c86c:	080164c8 	.word	0x080164c8
 800c870:	080167f0 	.word	0x080167f0

0800c874 <deserializeSimpleAck>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializeSimpleAck( const MQTTPacketInfo_t * pAck,
                                          uint16_t * pPacketIdentifier )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]

    assert( pAck != NULL );
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d106      	bne.n	800c896 <deserializeSimpleAck+0x22>
 800c888:	4b18      	ldr	r3, [pc, #96]	; (800c8ec <deserializeSimpleAck+0x78>)
 800c88a:	4a19      	ldr	r2, [pc, #100]	; (800c8f0 <deserializeSimpleAck+0x7c>)
 800c88c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800c890:	4818      	ldr	r0, [pc, #96]	; (800c8f4 <deserializeSimpleAck+0x80>)
 800c892:	f004 f9bb 	bl	8010c0c <__assert_func>
    assert( pPacketIdentifier != NULL );
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d106      	bne.n	800c8aa <deserializeSimpleAck+0x36>
 800c89c:	4b16      	ldr	r3, [pc, #88]	; (800c8f8 <deserializeSimpleAck+0x84>)
 800c89e:	4a14      	ldr	r2, [pc, #80]	; (800c8f0 <deserializeSimpleAck+0x7c>)
 800c8a0:	f240 51e1 	movw	r1, #1505	; 0x5e1
 800c8a4:	4813      	ldr	r0, [pc, #76]	; (800c8f4 <deserializeSimpleAck+0x80>)
 800c8a6:	f004 f9b1 	bl	8010c0c <__assert_func>

    /* Check that the "Remaining length" of the received ACK is 2. */
    if( pAck->remainingLength != MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d002      	beq.n	800c8b8 <deserializeSimpleAck+0x44>
    {
        LogError( ( "ACK does not have remaining length of %u.",
                    ( unsigned int ) MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c8b2:	2305      	movs	r3, #5
 800c8b4:	73fb      	strb	r3, [r7, #15]
 800c8b6:	e014      	b.n	800c8e2 <deserializeSimpleAck+0x6e>
    }
    else
    {
        /* Extract the packet identifier (third and fourth bytes) from ACK. */
        *pPacketIdentifier = UINT16_DECODE( pAck->pRemainingData );
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	021b      	lsls	r3, r3, #8
 800c8c0:	b21a      	sxth	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	b21b      	sxth	r3, r3
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	b21b      	sxth	r3, r3
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	801a      	strh	r2, [r3, #0]

        LogDebug( ( "Packet identifier %hu.",
                    ( unsigned short ) *pPacketIdentifier ) );

        /* Packet identifier cannot be 0. */
        if( *pPacketIdentifier == 0U )
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d101      	bne.n	800c8e2 <deserializeSimpleAck+0x6e>
        {
            LogError( ( "Packet identifier cannot be 0." ) );
            status = MQTTBadResponse;
 800c8de:	2305      	movs	r3, #5
 800c8e0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	08016860 	.word	0x08016860
 800c8f0:	08016cdc 	.word	0x08016cdc
 800c8f4:	080164c8 	.word	0x080164c8
 800c8f8:	080167f0 	.word	0x080167f0

0800c8fc <deserializePingresp>:

/*-----------------------------------------------------------*/

static MQTTStatus_t deserializePingresp( const MQTTPacketInfo_t * pPingresp )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800c904:	2300      	movs	r3, #0
 800c906:	73fb      	strb	r3, [r7, #15]

    assert( pPingresp != NULL );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <deserializePingresp+0x20>
 800c90e:	4b09      	ldr	r3, [pc, #36]	; (800c934 <deserializePingresp+0x38>)
 800c910:	4a09      	ldr	r2, [pc, #36]	; (800c938 <deserializePingresp+0x3c>)
 800c912:	f240 6104 	movw	r1, #1540	; 0x604
 800c916:	4809      	ldr	r0, [pc, #36]	; (800c93c <deserializePingresp+0x40>)
 800c918:	f004 f978 	bl	8010c0c <__assert_func>

    /* Check the "Remaining length" (second byte) of the received PINGRESP is 0. */
    if( pPingresp->remainingLength != MQTT_PACKET_PINGRESP_REMAINING_LENGTH )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <deserializePingresp+0x2c>
    {
        LogError( ( "PINGRESP does not have remaining length of %u.",
                    MQTT_PACKET_PINGRESP_REMAINING_LENGTH ) );

        status = MQTTBadResponse;
 800c924:	2305      	movs	r3, #5
 800c926:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	08016870 	.word	0x08016870
 800c938:	08016cf4 	.word	0x08016cf4
 800c93c:	080164c8 	.word	0x080164c8

0800c940 <MQTT_SerializeConnectFixedHeader>:

uint8_t * MQTT_SerializeConnectFixedHeader( uint8_t * pIndex,
                                            const MQTTConnectInfo_t * pConnectInfo,
                                            const MQTTPublishInfo_t * pWillInfo,
                                            size_t remainingLength )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	603b      	str	r3, [r7, #0]
    uint8_t * pIndexLocal = pIndex;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	613b      	str	r3, [r7, #16]
    uint8_t connectFlags = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	75fb      	strb	r3, [r7, #23]

    /* The first byte in the CONNECT packet is the control packet type. */
    *pIndexLocal = MQTT_PACKET_TYPE_CONNECT;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	2210      	movs	r2, #16
 800c95a:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	3301      	adds	r3, #1
 800c960:	613b      	str	r3, [r7, #16]

    /* The remaining length of the CONNECT packet is encoded starting from the
     * second byte. The remaining length does not include the length of the fixed
     * header or the encoding of the remaining length. */
    pIndexLocal = encodeRemainingLength( pIndexLocal, remainingLength );
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6938      	ldr	r0, [r7, #16]
 800c966:	f7ff fc81 	bl	800c26c <encodeRemainingLength>
 800c96a:	6138      	str	r0, [r7, #16]

    /* The string "MQTT" is placed at the beginning of the CONNECT packet's variable
     * header. This string is 4 bytes long. */
    pIndexLocal = encodeString( pIndexLocal, "MQTT", 4 );
 800c96c:	2204      	movs	r2, #4
 800c96e:	492f      	ldr	r1, [pc, #188]	; (800ca2c <MQTT_SerializeConnectFixedHeader+0xec>)
 800c970:	6938      	ldr	r0, [r7, #16]
 800c972:	f7ff fcb3 	bl	800c2dc <encodeString>
 800c976:	6138      	str	r0, [r7, #16]

    /* The MQTT protocol version is the second field of the variable header. */
    *pIndexLocal = MQTT_VERSION_3_1_1;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	2204      	movs	r2, #4
 800c97c:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	3301      	adds	r3, #1
 800c982:	613b      	str	r3, [r7, #16]

    /* Set the clean session flag if needed. */
    if( pConnectInfo->cleanSession == true )
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d003      	beq.n	800c994 <MQTT_SerializeConnectFixedHeader+0x54>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_CLEAN );
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
 800c98e:	f043 0302 	orr.w	r3, r3, #2
 800c992:	75fb      	strb	r3, [r7, #23]
    }

    /* Set the flags for username and password if provided. */
    if( pConnectInfo->pUserName != NULL )
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <MQTT_SerializeConnectFixedHeader+0x64>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_USERNAME );
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c9a2:	75fb      	strb	r3, [r7, #23]
    }

    if( pConnectInfo->pPassword != NULL )
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <MQTT_SerializeConnectFixedHeader+0x74>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_PASSWORD );
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9b2:	75fb      	strb	r3, [r7, #23]
    }

    /* Set will flag if a Last Will and Testament is provided. */
    if( pWillInfo != NULL )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d01c      	beq.n	800c9f4 <MQTT_SerializeConnectFixedHeader+0xb4>
    {
        UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL );
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	f043 0304 	orr.w	r3, r3, #4
 800c9c0:	75fb      	strb	r3, [r7, #23]

        /* Flags only need to be changed for Will QoS 1 or 2. */
        if( pWillInfo->qos == MQTTQoS1 )
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d104      	bne.n	800c9d4 <MQTT_SerializeConnectFixedHeader+0x94>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS1 );
 800c9ca:	7dfb      	ldrb	r3, [r7, #23]
 800c9cc:	f043 0308 	orr.w	r3, r3, #8
 800c9d0:	75fb      	strb	r3, [r7, #23]
 800c9d2:	e007      	b.n	800c9e4 <MQTT_SerializeConnectFixedHeader+0xa4>
        }
        else if( pWillInfo->qos == MQTTQoS2 )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d103      	bne.n	800c9e4 <MQTT_SerializeConnectFixedHeader+0xa4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_QOS2 );
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
 800c9de:	f043 0310 	orr.w	r3, r3, #16
 800c9e2:	75fb      	strb	r3, [r7, #23]
        else
        {
            /* Empty else MISRA 15.7 */
        }

        if( pWillInfo->retain == true )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	785b      	ldrb	r3, [r3, #1]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <MQTT_SerializeConnectFixedHeader+0xb4>
        {
            UINT8_SET_BIT( connectFlags, MQTT_CONNECT_FLAG_WILL_RETAIN );
 800c9ec:	7dfb      	ldrb	r3, [r7, #23]
 800c9ee:	f043 0320 	orr.w	r3, r3, #32
 800c9f2:	75fb      	strb	r3, [r7, #23]
        }
    }

    *pIndexLocal = connectFlags;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	7dfa      	ldrb	r2, [r7, #23]
 800c9f8:	701a      	strb	r2, [r3, #0]
    pIndexLocal++;
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	613b      	str	r3, [r7, #16]

    /* Write the 2 bytes of the keep alive interval into the CONNECT packet. */
    pIndexLocal[ 0 ] = UINT16_HIGH_BYTE( pConnectInfo->keepAliveSeconds );
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	885b      	ldrh	r3, [r3, #2]
 800ca04:	0a1b      	lsrs	r3, r3, #8
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	701a      	strb	r2, [r3, #0]
    pIndexLocal[ 1 ] = UINT16_LOW_BYTE( pConnectInfo->keepAliveSeconds );
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	885a      	ldrh	r2, [r3, #2]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	3301      	adds	r3, #1
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	701a      	strb	r2, [r3, #0]
    pIndexLocal = &pIndexLocal[ 2 ];
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	3302      	adds	r3, #2
 800ca1e:	613b      	str	r3, [r7, #16]

    return pIndexLocal;
 800ca20:	693b      	ldr	r3, [r7, #16]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	08016884 	.word	0x08016884

0800ca30 <MQTT_GetConnectPacketSize>:

MQTTStatus_t MQTT_GetConnectPacketSize( const MQTTConnectInfo_t * pConnectInfo,
                                        const MQTTPublishInfo_t * pWillInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	77fb      	strb	r3, [r7, #31]
    size_t remainingLength;

    /* The CONNECT packet will always include a 10-byte variable header. */
    size_t connectPacketSize = MQTT_PACKET_CONNECT_HEADER_SIZE;
 800ca42:	230a      	movs	r3, #10
 800ca44:	61bb      	str	r3, [r7, #24]

    /* Validate arguments. */
    if( ( pConnectInfo == NULL ) || ( pRemainingLength == NULL ) ||
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d005      	beq.n	800ca58 <MQTT_GetConnectPacketSize+0x28>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <MQTT_GetConnectPacketSize+0x28>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <MQTT_GetConnectPacketSize+0x2e>
        LogError( ( "Argument cannot be NULL: pConnectInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pConnectInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	77fb      	strb	r3, [r7, #31]
 800ca5c:	e04f      	b.n	800cafe <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pConnectInfo->clientIdentifierLength == 0U ) || ( pConnectInfo->pClientIdentifier == NULL ) )
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	891b      	ldrh	r3, [r3, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <MQTT_GetConnectPacketSize+0x3e>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d102      	bne.n	800ca74 <MQTT_GetConnectPacketSize+0x44>
    {
        LogError( ( "Mqtt_GetConnectPacketSize() client identifier must be set." ) );
        status = MQTTBadParameter;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	77fb      	strb	r3, [r7, #31]
 800ca72:	e044      	b.n	800cafe <MQTT_GetConnectPacketSize+0xce>
    }
    else if( ( pWillInfo != NULL ) && ( pWillInfo->payloadLength > ( size_t ) UINT16_MAX ) )
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <MQTT_GetConnectPacketSize+0x5a>
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	691b      	ldr	r3, [r3, #16]
 800ca7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca82:	d302      	bcc.n	800ca8a <MQTT_GetConnectPacketSize+0x5a>
         * packet will never be larger than 327699 bytes. */
        LogError( ( "The Will Message length must not exceed %d. "
                    "pWillInfo->payloadLength=%lu.",
                    UINT16_MAX,
                    ( unsigned long ) pWillInfo->payloadLength ) );
        status = MQTTBadParameter;
 800ca84:	2301      	movs	r3, #1
 800ca86:	77fb      	strb	r3, [r7, #31]
 800ca88:	e039      	b.n	800cafe <MQTT_GetConnectPacketSize+0xce>
    }
    else
    {
        /* Add the length of the client identifier. */
        connectPacketSize += pConnectInfo->clientIdentifierLength + sizeof( uint16_t );
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	891b      	ldrh	r3, [r3, #8]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	4413      	add	r3, r2
 800ca94:	3302      	adds	r3, #2
 800ca96:	61bb      	str	r3, [r7, #24]

        /* Add the lengths of the will message and topic name if provided. */
        if( pWillInfo != NULL )
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d009      	beq.n	800cab2 <MQTT_GetConnectPacketSize+0x82>
        {
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	891b      	ldrh	r3, [r3, #8]
 800caa2:	461a      	mov	r2, r3
                                 pWillInfo->payloadLength + sizeof( uint16_t );
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	691b      	ldr	r3, [r3, #16]
            connectPacketSize += pWillInfo->topicNameLength + sizeof( uint16_t ) +
 800caa8:	441a      	add	r2, r3
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	4413      	add	r3, r2
 800caae:	3304      	adds	r3, #4
 800cab0:	61bb      	str	r3, [r7, #24]
        }

        /* Add the lengths of the user name and password if provided. */
        if( pConnectInfo->pUserName != NULL )
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d006      	beq.n	800cac8 <MQTT_GetConnectPacketSize+0x98>
        {
            connectPacketSize += pConnectInfo->userNameLength + sizeof( uint16_t );
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	8a1b      	ldrh	r3, [r3, #16]
 800cabe:	461a      	mov	r2, r3
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	4413      	add	r3, r2
 800cac4:	3302      	adds	r3, #2
 800cac6:	61bb      	str	r3, [r7, #24]
        }

        if( pConnectInfo->pPassword != NULL )
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d006      	beq.n	800cade <MQTT_GetConnectPacketSize+0xae>
        {
            connectPacketSize += pConnectInfo->passwordLength + sizeof( uint16_t );
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	8b1b      	ldrh	r3, [r3, #24]
 800cad4:	461a      	mov	r2, r3
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	4413      	add	r3, r2
 800cada:	3302      	adds	r3, #2
 800cadc:	61bb      	str	r3, [r7, #24]
        }

        /* At this point, the "Remaining Length" field of the MQTT CONNECT packet has
         * been calculated. */
        remainingLength = connectPacketSize;
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	617b      	str	r3, [r7, #20]

        /* Calculate the full size of the MQTT CONNECT packet by adding the size of
         * the "Remaining Length" field plus 1 byte for the "Packet Type" field. */
        connectPacketSize += 1U + remainingLengthEncodedSize( connectPacketSize );
 800cae2:	69b8      	ldr	r0, [r7, #24]
 800cae4:	f7ff fba1 	bl	800c22a <remainingLengthEncodedSize>
 800cae8:	4603      	mov	r3, r0
 800caea:	3301      	adds	r3, #1
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	4413      	add	r3, r2
 800caf0:	61bb      	str	r3, [r7, #24]
         * (maximum username length) 65535 + (encoded length) 2 +
         * (maximum password length) 65535 + (encoded length) 2 +
         * (packet type field length) 1 +
         * (CONNECT packet encoded length) 3 = 327699 */

        *pRemainingLength = remainingLength;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	601a      	str	r2, [r3, #0]
        *pPacketSize = connectPacketSize;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	69ba      	ldr	r2, [r7, #24]
 800cafc:	601a      	str	r2, [r3, #0]
        LogDebug( ( "CONNECT packet remaining length=%lu and packet size=%lu.",
                    ( unsigned long ) *pRemainingLength,
                    ( unsigned long ) *pPacketSize ) );
    }

    return status;
 800cafe:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3720      	adds	r7, #32
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <MQTT_GetPublishPacketSize>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetPublishPacketSize( const MQTTPublishInfo_t * pPublishInfo,
                                        size_t * pRemainingLength,
                                        size_t * pPacketSize )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800cb14:	2300      	movs	r3, #0
 800cb16:	75fb      	strb	r3, [r7, #23]

    if( ( pPublishInfo == NULL ) || ( pRemainingLength == NULL ) || ( pPacketSize == NULL ) )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d005      	beq.n	800cb2a <MQTT_GetPublishPacketSize+0x22>
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <MQTT_GetPublishPacketSize+0x22>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d102      	bne.n	800cb30 <MQTT_GetPublishPacketSize+0x28>
        LogError( ( "Argument cannot be NULL: pPublishInfo=%p, "
                    "pRemainingLength=%p, pPacketSize=%p.",
                    ( void * ) pPublishInfo,
                    ( void * ) pRemainingLength,
                    ( void * ) pPacketSize ) );
        status = MQTTBadParameter;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	75fb      	strb	r3, [r7, #23]
 800cb2e:	e017      	b.n	800cb60 <MQTT_GetPublishPacketSize+0x58>
    }
    else if( ( pPublishInfo->pTopicName == NULL ) || ( pPublishInfo->topicNameLength == 0U ) )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d003      	beq.n	800cb40 <MQTT_GetPublishPacketSize+0x38>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	891b      	ldrh	r3, [r3, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d102      	bne.n	800cb46 <MQTT_GetPublishPacketSize+0x3e>
    {
        LogError( ( "Invalid topic name for PUBLISH: pTopicName=%p, "
                    "topicNameLength=%hu.",
                    ( void * ) pPublishInfo->pTopicName,
                    ( unsigned short ) pPublishInfo->topicNameLength ) );
        status = MQTTBadParameter;
 800cb40:	2301      	movs	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
 800cb44:	e00c      	b.n	800cb60 <MQTT_GetPublishPacketSize+0x58>
    }
    else
    {
        /* Calculate the "Remaining length" field and total packet size. If it exceeds
         * what is allowed in the MQTT standard, return an error. */
        if( calculatePublishPacketSize( pPublishInfo, pRemainingLength, pPacketSize ) == false )
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f7ff fc06 	bl	800c35c <calculatePublishPacketSize>
 800cb50:	4603      	mov	r3, r0
 800cb52:	f083 0301 	eor.w	r3, r3, #1
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <MQTT_GetPublishPacketSize+0x58>
        {
            LogError( ( "PUBLISH packet remaining length exceeds %lu, which is the "
                        "maximum size allowed by MQTT 3.1.1.",
                        MQTT_MAX_REMAINING_LENGTH ) );
            status = MQTTBadParameter;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <MQTT_SerializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_SerializeAck( const MQTTFixedBuffer_t * pFixedBuffer,
                                uint8_t packetType,
                                uint16_t packetId )
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b085      	sub	sp, #20
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
 800cb76:	4613      	mov	r3, r2
 800cb78:	803b      	strh	r3, [r7, #0]
    MQTTStatus_t status = MQTTSuccess;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73fb      	strb	r3, [r7, #15]

    if( pFixedBuffer == NULL )
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d102      	bne.n	800cb8a <MQTT_SerializeAck+0x20>
    {
        LogError( ( "Provided buffer is NULL." ) );
        status = MQTTBadParameter;
 800cb84:	2301      	movs	r3, #1
 800cb86:	73fb      	strb	r3, [r7, #15]
 800cb88:	e03b      	b.n	800cc02 <MQTT_SerializeAck+0x98>
    }
    else if( pFixedBuffer->pBuffer == NULL )
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d102      	bne.n	800cb98 <MQTT_SerializeAck+0x2e>
    {
        LogError( ( "pFixedBuffer->pBuffer cannot be NULL." ) );
        status = MQTTBadParameter;
 800cb92:	2301      	movs	r3, #1
 800cb94:	73fb      	strb	r3, [r7, #15]
 800cb96:	e034      	b.n	800cc02 <MQTT_SerializeAck+0x98>
    }
    /* The buffer must be able to fit 4 bytes for the packet. */
    else if( pFixedBuffer->size < MQTT_PUBLISH_ACK_PACKET_SIZE )
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	2b03      	cmp	r3, #3
 800cb9e:	d802      	bhi.n	800cba6 <MQTT_SerializeAck+0x3c>
    {
        LogError( ( "Insufficient memory for packet." ) );
        status = MQTTNoMemory;
 800cba0:	2302      	movs	r3, #2
 800cba2:	73fb      	strb	r3, [r7, #15]
 800cba4:	e02d      	b.n	800cc02 <MQTT_SerializeAck+0x98>
    }
    else if( packetId == 0U )
 800cba6:	883b      	ldrh	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d102      	bne.n	800cbb2 <MQTT_SerializeAck+0x48>
    {
        LogError( ( "Packet ID cannot be 0." ) );
        status = MQTTBadParameter;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
 800cbb0:	e027      	b.n	800cc02 <MQTT_SerializeAck+0x98>
    }
    else
    {
        switch( packetType )
 800cbb2:	78fb      	ldrb	r3, [r7, #3]
 800cbb4:	2b70      	cmp	r3, #112	; 0x70
 800cbb6:	d009      	beq.n	800cbcc <MQTT_SerializeAck+0x62>
 800cbb8:	2b70      	cmp	r3, #112	; 0x70
 800cbba:	dc1f      	bgt.n	800cbfc <MQTT_SerializeAck+0x92>
 800cbbc:	2b62      	cmp	r3, #98	; 0x62
 800cbbe:	d005      	beq.n	800cbcc <MQTT_SerializeAck+0x62>
 800cbc0:	2b62      	cmp	r3, #98	; 0x62
 800cbc2:	dc1b      	bgt.n	800cbfc <MQTT_SerializeAck+0x92>
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d001      	beq.n	800cbcc <MQTT_SerializeAck+0x62>
 800cbc8:	2b50      	cmp	r3, #80	; 0x50
 800cbca:	d117      	bne.n	800cbfc <MQTT_SerializeAck+0x92>
            /* Only publish acks are serialized by the client. */
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                pFixedBuffer->pBuffer[ 0 ] = packetType;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	78fa      	ldrb	r2, [r7, #3]
 800cbd2:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 1 ] = MQTT_PACKET_SIMPLE_ACK_REMAINING_LENGTH;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	2202      	movs	r2, #2
 800cbdc:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 2 ] = UINT16_HIGH_BYTE( packetId );
 800cbde:	883b      	ldrh	r3, [r7, #0]
 800cbe0:	0a1b      	lsrs	r3, r3, #8
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3302      	adds	r3, #2
 800cbea:	b2d2      	uxtb	r2, r2
 800cbec:	701a      	strb	r2, [r3, #0]
                pFixedBuffer->pBuffer[ 3 ] = UINT16_LOW_BYTE( packetId );
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	3303      	adds	r3, #3
 800cbf4:	883a      	ldrh	r2, [r7, #0]
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	701a      	strb	r2, [r3, #0]
                break;
 800cbfa:	e002      	b.n	800cc02 <MQTT_SerializeAck+0x98>

            default:
                LogError( ( "Packet type is not a publish ACK: Packet type=%02x",
                            ( unsigned int ) packetType ) );
                status = MQTTBadParameter;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	73fb      	strb	r3, [r7, #15]
                break;
 800cc00:	bf00      	nop
        }
    }

    return status;
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <MQTT_DeserializeAck>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_DeserializeAck( const MQTTPacketInfo_t * pIncomingPacket,
                                  uint16_t * pPacketId,
                                  bool * pSessionPresent )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	75fb      	strb	r3, [r7, #23]

    if( pIncomingPacket == NULL )
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d102      	bne.n	800cc2c <MQTT_DeserializeAck+0x1c>
    {
        LogError( ( "pIncomingPacket cannot be NULL." ) );
        status = MQTTBadParameter;
 800cc26:	2301      	movs	r3, #1
 800cc28:	75fb      	strb	r3, [r7, #23]
 800cc2a:	e05f      	b.n	800ccec <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for packet identifier cannot be NULL for packets other than
     * CONNACK and PINGRESP. */
    else if( ( pPacketId == NULL ) &&
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10a      	bne.n	800cc48 <MQTT_DeserializeAck+0x38>
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	781b      	ldrb	r3, [r3, #0]
    else if( ( pPacketId == NULL ) &&
 800cc36:	2b20      	cmp	r3, #32
 800cc38:	d006      	beq.n	800cc48 <MQTT_DeserializeAck+0x38>
               ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) ) )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
             ( ( pIncomingPacket->type != MQTT_PACKET_TYPE_CONNACK ) &&
 800cc3e:	2bd0      	cmp	r3, #208	; 0xd0
 800cc40:	d002      	beq.n	800cc48 <MQTT_DeserializeAck+0x38>
    {
        LogError( ( "pPacketId cannot be NULL for packet type %02x.",
                    ( unsigned int ) pIncomingPacket->type ) );
        status = MQTTBadParameter;
 800cc42:	2301      	movs	r3, #1
 800cc44:	75fb      	strb	r3, [r7, #23]
 800cc46:	e051      	b.n	800ccec <MQTT_DeserializeAck+0xdc>
    }
    /* Pointer for session present cannot be NULL for CONNACK. */
    else if( ( pSessionPresent == NULL ) &&
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d106      	bne.n	800cc5c <MQTT_DeserializeAck+0x4c>
             ( pIncomingPacket->type == MQTT_PACKET_TYPE_CONNACK ) )
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	781b      	ldrb	r3, [r3, #0]
    else if( ( pSessionPresent == NULL ) &&
 800cc52:	2b20      	cmp	r3, #32
 800cc54:	d102      	bne.n	800cc5c <MQTT_DeserializeAck+0x4c>
    {
        LogError( ( "pSessionPresent cannot be NULL for CONNACK packet." ) );
        status = MQTTBadParameter;
 800cc56:	2301      	movs	r3, #1
 800cc58:	75fb      	strb	r3, [r7, #23]
 800cc5a:	e047      	b.n	800ccec <MQTT_DeserializeAck+0xdc>
    }

    /* Pointer for remaining data cannot be NULL for packets other
     * than PINGRESP. */
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <MQTT_DeserializeAck+0x62>
             ( pIncomingPacket->type != MQTT_PACKET_TYPE_PINGRESP ) )
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	781b      	ldrb	r3, [r3, #0]
    else if( ( pIncomingPacket->pRemainingData == NULL ) &&
 800cc68:	2bd0      	cmp	r3, #208	; 0xd0
 800cc6a:	d002      	beq.n	800cc72 <MQTT_DeserializeAck+0x62>
    {
        LogError( ( "Remaining data of incoming packet is NULL." ) );
        status = MQTTBadParameter;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	75fb      	strb	r3, [r7, #23]
 800cc70:	e03c      	b.n	800ccec <MQTT_DeserializeAck+0xdc>
    }
    else
    {
        /* Make sure response packet is a valid ack. */
        switch( pIncomingPacket->type )
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	2bd0      	cmp	r3, #208	; 0xd0
 800cc78:	d028      	beq.n	800cccc <MQTT_DeserializeAck+0xbc>
 800cc7a:	2bd0      	cmp	r3, #208	; 0xd0
 800cc7c:	dc33      	bgt.n	800cce6 <MQTT_DeserializeAck+0xd6>
 800cc7e:	2bb0      	cmp	r3, #176	; 0xb0
 800cc80:	d02a      	beq.n	800ccd8 <MQTT_DeserializeAck+0xc8>
 800cc82:	2bb0      	cmp	r3, #176	; 0xb0
 800cc84:	dc2f      	bgt.n	800cce6 <MQTT_DeserializeAck+0xd6>
 800cc86:	2b90      	cmp	r3, #144	; 0x90
 800cc88:	d019      	beq.n	800ccbe <MQTT_DeserializeAck+0xae>
 800cc8a:	2b90      	cmp	r3, #144	; 0x90
 800cc8c:	dc2b      	bgt.n	800cce6 <MQTT_DeserializeAck+0xd6>
 800cc8e:	2b70      	cmp	r3, #112	; 0x70
 800cc90:	d022      	beq.n	800ccd8 <MQTT_DeserializeAck+0xc8>
 800cc92:	2b70      	cmp	r3, #112	; 0x70
 800cc94:	dc27      	bgt.n	800cce6 <MQTT_DeserializeAck+0xd6>
 800cc96:	2b62      	cmp	r3, #98	; 0x62
 800cc98:	d01e      	beq.n	800ccd8 <MQTT_DeserializeAck+0xc8>
 800cc9a:	2b62      	cmp	r3, #98	; 0x62
 800cc9c:	dc23      	bgt.n	800cce6 <MQTT_DeserializeAck+0xd6>
 800cc9e:	2b50      	cmp	r3, #80	; 0x50
 800cca0:	d01a      	beq.n	800ccd8 <MQTT_DeserializeAck+0xc8>
 800cca2:	2b50      	cmp	r3, #80	; 0x50
 800cca4:	dc1f      	bgt.n	800cce6 <MQTT_DeserializeAck+0xd6>
 800cca6:	2b20      	cmp	r3, #32
 800cca8:	d002      	beq.n	800ccb0 <MQTT_DeserializeAck+0xa0>
 800ccaa:	2b40      	cmp	r3, #64	; 0x40
 800ccac:	d014      	beq.n	800ccd8 <MQTT_DeserializeAck+0xc8>
 800ccae:	e01a      	b.n	800cce6 <MQTT_DeserializeAck+0xd6>
        {
            case MQTT_PACKET_TYPE_CONNACK:
                status = deserializeConnack( pIncomingPacket, pSessionPresent );
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff fcdc 	bl	800c670 <deserializeConnack>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	75fb      	strb	r3, [r7, #23]
                break;
 800ccbc:	e016      	b.n	800ccec <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_SUBACK:
                status = deserializeSuback( pIncomingPacket, pPacketId );
 800ccbe:	68b9      	ldr	r1, [r7, #8]
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff fd83 	bl	800c7cc <deserializeSuback>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	75fb      	strb	r3, [r7, #23]
                break;
 800ccca:	e00f      	b.n	800ccec <MQTT_DeserializeAck+0xdc>

            case MQTT_PACKET_TYPE_PINGRESP:
                status = deserializePingresp( pIncomingPacket );
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff fe15 	bl	800c8fc <deserializePingresp>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	75fb      	strb	r3, [r7, #23]
                break;
 800ccd6:	e009      	b.n	800ccec <MQTT_DeserializeAck+0xdc>
            case MQTT_PACKET_TYPE_UNSUBACK:
            case MQTT_PACKET_TYPE_PUBACK:
            case MQTT_PACKET_TYPE_PUBREC:
            case MQTT_PACKET_TYPE_PUBREL:
            case MQTT_PACKET_TYPE_PUBCOMP:
                status = deserializeSimpleAck( pIncomingPacket, pPacketId );
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f7ff fdca 	bl	800c874 <deserializeSimpleAck>
 800cce0:	4603      	mov	r3, r0
 800cce2:	75fb      	strb	r3, [r7, #23]
                break;
 800cce4:	e002      	b.n	800ccec <MQTT_DeserializeAck+0xdc>

            /* Any other packet type is invalid. */
            default:
                LogError( ( "IotMqtt_DeserializeResponse() called with unknown packet type:(%02x).",
                            ( unsigned int ) pIncomingPacket->type ) );
                status = MQTTBadResponse;
 800cce6:	2305      	movs	r3, #5
 800cce8:	75fb      	strb	r3, [r7, #23]
                break;
 800ccea:	bf00      	nop
        }
    }

    return status;
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <MQTT_GetIncomingPacketTypeAndLength>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_GetIncomingPacketTypeAndLength( TransportRecv_t readFunc,
                                                  NetworkContext_t * pNetworkContext,
                                                  MQTTPacketInfo_t * pIncomingPacket )
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b086      	sub	sp, #24
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
    MQTTStatus_t status = MQTTSuccess;
 800cd02:	2300      	movs	r3, #0
 800cd04:	75fb      	strb	r3, [r7, #23]
    int32_t bytesReceived = 0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	613b      	str	r3, [r7, #16]

    if( pIncomingPacket == NULL )
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d102      	bne.n	800cd16 <MQTT_GetIncomingPacketTypeAndLength+0x20>
    {
        LogError( ( "Invalid parameter: pIncomingPacket is NULL." ) );
        status = MQTTBadParameter;
 800cd10:	2301      	movs	r3, #1
 800cd12:	75fb      	strb	r3, [r7, #23]
 800cd14:	e005      	b.n	800cd22 <MQTT_GetIncomingPacketTypeAndLength+0x2c>
    }
    else
    {
        /* Read a single byte. */
        bytesReceived = readFunc( pNetworkContext,
                                  &( pIncomingPacket->type ),
 800cd16:	6879      	ldr	r1, [r7, #4]
        bytesReceived = readFunc( pNetworkContext,
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	68b8      	ldr	r0, [r7, #8]
 800cd1e:	4798      	blx	r3
 800cd20:	6138      	str	r0, [r7, #16]
                                  1U );
    }

    if( bytesReceived == 1 )
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d119      	bne.n	800cd5c <MQTT_GetIncomingPacketTypeAndLength+0x66>
    {
        /* Check validity. */
        if( incomingPacketValid( pIncomingPacket->type ) == true )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fc3a 	bl	800c5a6 <incomingPacketValid>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00e      	beq.n	800cd56 <MQTT_GetIncomingPacketTypeAndLength+0x60>
        {
            pIncomingPacket->remainingLength = getRemainingLength( readFunc,
 800cd38:	68b9      	ldr	r1, [r7, #8]
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7ff fbdf 	bl	800c4fe <getRemainingLength>
 800cd40:	4602      	mov	r2, r0
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	609a      	str	r2, [r3, #8]
                                                                   pNetworkContext );

            if( pIncomingPacket->remainingLength == MQTT_REMAINING_LENGTH_INVALID )
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd4e:	d113      	bne.n	800cd78 <MQTT_GetIncomingPacketTypeAndLength+0x82>
            {
                LogError( ( "Incoming packet remaining length invalid." ) );
                status = MQTTBadResponse;
 800cd50:	2305      	movs	r3, #5
 800cd52:	75fb      	strb	r3, [r7, #23]
 800cd54:	e010      	b.n	800cd78 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
        else
        {
            LogError( ( "Incoming packet invalid: Packet type=%u.",
                        ( unsigned int ) pIncomingPacket->type ) );
            status = MQTTBadResponse;
 800cd56:	2305      	movs	r3, #5
 800cd58:	75fb      	strb	r3, [r7, #23]
 800cd5a:	e00d      	b.n	800cd78 <MQTT_GetIncomingPacketTypeAndLength+0x82>
        }
    }
    else if( ( status != MQTTBadParameter ) && ( bytesReceived == 0 ) )
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d005      	beq.n	800cd6e <MQTT_GetIncomingPacketTypeAndLength+0x78>
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <MQTT_GetIncomingPacketTypeAndLength+0x78>
    {
        status = MQTTNoDataAvailable;
 800cd68:	2307      	movs	r3, #7
 800cd6a:	75fb      	strb	r3, [r7, #23]
 800cd6c:	e004      	b.n	800cd78 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    }

    /* If the input packet was valid, then any other number of bytes received is
     * a failure. */
    else if( status != MQTTBadParameter )
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d001      	beq.n	800cd78 <MQTT_GetIncomingPacketTypeAndLength+0x82>
    {
        LogError( ( "A single byte was not read from the transport: "
                    "transportStatus=%ld.",
                    ( long int ) bytesReceived ) );
        status = MQTTRecvFailed;
 800cd74:	2304      	movs	r3, #4
 800cd76:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* Empty else MISRA 15.7 */
    }

    return status;
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <validateTransitionPublish>:

static bool validateTransitionPublish( MQTTPublishState_t currentState,
                                       MQTTPublishState_t newState,
                                       MQTTStateOperation_t opType,
                                       MQTTQoS_t qos )
{
 800cd84:	b490      	push	{r4, r7}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	461a      	mov	r2, r3
 800cd92:	4623      	mov	r3, r4
 800cd94:	71fb      	strb	r3, [r7, #7]
 800cd96:	4603      	mov	r3, r0
 800cd98:	71bb      	strb	r3, [r7, #6]
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	717b      	strb	r3, [r7, #5]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	713b      	strb	r3, [r7, #4]
    bool isValid = false;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	2b07      	cmp	r3, #7
 800cdaa:	d848      	bhi.n	800ce3e <validateTransitionPublish+0xba>
 800cdac:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <validateTransitionPublish+0x30>)
 800cdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb2:	bf00      	nop
 800cdb4:	0800cdd5 	.word	0x0800cdd5
 800cdb8:	0800cdf9 	.word	0x0800cdf9
 800cdbc:	0800ce3f 	.word	0x0800ce3f
 800cdc0:	0800ce3f 	.word	0x0800ce3f
 800cdc4:	0800ce3f 	.word	0x0800ce3f
 800cdc8:	0800ce3f 	.word	0x0800ce3f
 800cdcc:	0800ce23 	.word	0x0800ce23
 800cdd0:	0800ce31 	.word	0x0800ce31
    {
        case MQTTStateNull:

            /* Transitions from null occur when storing a new entry into the record. */
            if( opType == MQTT_RECEIVE )
 800cdd4:	797b      	ldrb	r3, [r7, #5]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d133      	bne.n	800ce42 <validateTransitionPublish+0xbe>
            {
                isValid = ( newState == MQTTPubAckSend ) || ( newState == MQTTPubRecSend );
 800cdda:	79bb      	ldrb	r3, [r7, #6]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d002      	beq.n	800cde6 <validateTransitionPublish+0x62>
 800cde0:	79bb      	ldrb	r3, [r7, #6]
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d101      	bne.n	800cdea <validateTransitionPublish+0x66>
 800cde6:	2301      	movs	r3, #1
 800cde8:	e000      	b.n	800cdec <validateTransitionPublish+0x68>
 800cdea:	2300      	movs	r3, #0
 800cdec:	73fb      	strb	r3, [r7, #15]
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	73fb      	strb	r3, [r7, #15]
            }

            break;
 800cdf6:	e024      	b.n	800ce42 <validateTransitionPublish+0xbe>

        case MQTTPublishSend:

            /* Outgoing publish. All such publishes start in this state due to
             * the reserve operation. */
            switch( qos )
 800cdf8:	793b      	ldrb	r3, [r7, #4]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d002      	beq.n	800ce04 <validateTransitionPublish+0x80>
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d007      	beq.n	800ce12 <validateTransitionPublish+0x8e>
                    break;

                case MQTTQoS0:
                default:
                    /* QoS 0 is checked before calling this function. */
                    break;
 800ce02:	e00d      	b.n	800ce20 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubAckPending;
 800ce04:	79bb      	ldrb	r3, [r7, #6]
 800ce06:	2b06      	cmp	r3, #6
 800ce08:	bf0c      	ite	eq
 800ce0a:	2301      	moveq	r3, #1
 800ce0c:	2300      	movne	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
                    break;
 800ce10:	e006      	b.n	800ce20 <validateTransitionPublish+0x9c>
                    isValid = newState == MQTTPubRecPending;
 800ce12:	79bb      	ldrb	r3, [r7, #6]
 800ce14:	2b07      	cmp	r3, #7
 800ce16:	bf0c      	ite	eq
 800ce18:	2301      	moveq	r3, #1
 800ce1a:	2300      	movne	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]
                    break;
 800ce1e:	bf00      	nop
            }

            break;
 800ce20:	e010      	b.n	800ce44 <validateTransitionPublish+0xc0>
         * reestablished. */
        case MQTTPubAckPending:

            /* When a session is reestablished, outgoing QoS1 publishes in state
             * #MQTTPubAckPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubAckPending;
 800ce22:	79bb      	ldrb	r3, [r7, #6]
 800ce24:	2b06      	cmp	r3, #6
 800ce26:	bf0c      	ite	eq
 800ce28:	2301      	moveq	r3, #1
 800ce2a:	2300      	movne	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]

            break;
 800ce2e:	e009      	b.n	800ce44 <validateTransitionPublish+0xc0>

        case MQTTPubRecPending:

            /* When a session is reestablished, outgoing QoS2 publishes in state
             * #MQTTPubRecPending can be resent. The state remains the same. */
            isValid = newState == MQTTPubRecPending;
 800ce30:	79bb      	ldrb	r3, [r7, #6]
 800ce32:	2b07      	cmp	r3, #7
 800ce34:	bf0c      	ite	eq
 800ce36:	2301      	moveq	r3, #1
 800ce38:	2300      	movne	r3, #0
 800ce3a:	73fb      	strb	r3, [r7, #15]

            break;
 800ce3c:	e002      	b.n	800ce44 <validateTransitionPublish+0xc0>
        case MQTTPubRelPending:
        case MQTTPubRelSend:
        case MQTTPublishDone:
        default:
            /* For a PUBLISH, we should not start from any other state. */
            break;
 800ce3e:	bf00      	nop
 800ce40:	e000      	b.n	800ce44 <validateTransitionPublish+0xc0>
            break;
 800ce42:	bf00      	nop
    }

    return isValid;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bc90      	pop	{r4, r7}
 800ce4e:	4770      	bx	lr

0800ce50 <validateTransitionAck>:

/*-----------------------------------------------------------*/

static bool validateTransitionAck( MQTTPublishState_t currentState,
                                   MQTTPublishState_t newState )
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	460a      	mov	r2, r1
 800ce5a:	71fb      	strb	r3, [r7, #7]
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	71bb      	strb	r3, [r7, #6]
    bool isValid = false;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]

    switch( currentState )
 800ce64:	79fb      	ldrb	r3, [r7, #7]
 800ce66:	3b02      	subs	r3, #2
 800ce68:	2b07      	cmp	r3, #7
 800ce6a:	d85c      	bhi.n	800cf26 <validateTransitionAck+0xd6>
 800ce6c:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <validateTransitionAck+0x24>)
 800ce6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce72:	bf00      	nop
 800ce74:	0800ce95 	.word	0x0800ce95
 800ce78:	0800cea3 	.word	0x0800cea3
 800ce7c:	0800cefb 	.word	0x0800cefb
 800ce80:	0800cecf 	.word	0x0800cecf
 800ce84:	0800ce95 	.word	0x0800ce95
 800ce88:	0800ceed 	.word	0x0800ceed
 800ce8c:	0800ceb1 	.word	0x0800ceb1
 800ce90:	0800cf09 	.word	0x0800cf09
    {
        case MQTTPubAckSend:
        /* Incoming publish, QoS 1. */
        case MQTTPubAckPending:
            /* Outgoing publish, QoS 1. */
            isValid = newState == MQTTPublishDone;
 800ce94:	79bb      	ldrb	r3, [r7, #6]
 800ce96:	2b0a      	cmp	r3, #10
 800ce98:	bf0c      	ite	eq
 800ce9a:	2301      	moveq	r3, #1
 800ce9c:	2300      	movne	r3, #0
 800ce9e:	73fb      	strb	r3, [r7, #15]
            break;
 800cea0:	e042      	b.n	800cf28 <validateTransitionAck+0xd8>

        case MQTTPubRecSend:
            /* Incoming publish, QoS 2. */
            isValid = newState == MQTTPubRelPending;
 800cea2:	79bb      	ldrb	r3, [r7, #6]
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	bf0c      	ite	eq
 800cea8:	2301      	moveq	r3, #1
 800ceaa:	2300      	movne	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
            break;
 800ceae:	e03b      	b.n	800cf28 <validateTransitionAck+0xd8>
             *    5. MQTT broker resent the un-acked publish.
             *    6. Publish is received when publish record state is in
             *       MQTTPubRelPending.
             *    7. Sending out a PUBREC will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPubCompSend ) ||
 800ceb0:	79bb      	ldrb	r3, [r7, #6]
 800ceb2:	2b05      	cmp	r3, #5
 800ceb4:	d002      	beq.n	800cebc <validateTransitionAck+0x6c>
 800ceb6:	79bb      	ldrb	r3, [r7, #6]
 800ceb8:	2b08      	cmp	r3, #8
 800ceba:	d101      	bne.n	800cec0 <validateTransitionAck+0x70>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e000      	b.n	800cec2 <validateTransitionAck+0x72>
 800cec0:	2300      	movs	r3, #0
 800cec2:	73fb      	strb	r3, [r7, #15]
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubRelPending );
            break;
 800cecc:	e02c      	b.n	800cf28 <validateTransitionAck+0xd8>
             *       for an incoming PUBREL.
             *    2. Reestablished an MQTT session.
             *    3. MQTT broker resent the un-acked PUBREL.
             *    4. Receiving the PUBREL again will result in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800cece:	79bb      	ldrb	r3, [r7, #6]
 800ced0:	2b0a      	cmp	r3, #10
 800ced2:	d002      	beq.n	800ceda <validateTransitionAck+0x8a>
 800ced4:	79bb      	ldrb	r3, [r7, #6]
 800ced6:	2b05      	cmp	r3, #5
 800ced8:	d101      	bne.n	800cede <validateTransitionAck+0x8e>
 800ceda:	2301      	movs	r3, #1
 800cedc:	e000      	b.n	800cee0 <validateTransitionAck+0x90>
 800cede:	2300      	movs	r3, #0
 800cee0:	73fb      	strb	r3, [r7, #15]
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompSend );
            break;
 800ceea:	e01d      	b.n	800cf28 <validateTransitionAck+0xd8>

        case MQTTPubRecPending:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubRelSend;
 800ceec:	79bb      	ldrb	r3, [r7, #6]
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	bf0c      	ite	eq
 800cef2:	2301      	moveq	r3, #1
 800cef4:	2300      	movne	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
            break;
 800cef8:	e016      	b.n	800cf28 <validateTransitionAck+0xd8>

        case MQTTPubRelSend:
            /* Outgoing publish, Qos 2. */
            isValid = newState == MQTTPubCompPending;
 800cefa:	79bb      	ldrb	r3, [r7, #6]
 800cefc:	2b09      	cmp	r3, #9
 800cefe:	bf0c      	ite	eq
 800cf00:	2301      	moveq	r3, #1
 800cf02:	2300      	movne	r3, #0
 800cf04:	73fb      	strb	r3, [r7, #15]
            break;
 800cf06:	e00f      	b.n	800cf28 <validateTransitionAck+0xd8>
             *    1. A TCP connection failure happened before receiving a PUBCOMP
             *       for an outgoing PUBREL.
             *    2. An MQTT session is reestablished.
             *    3. Resending the un-acked PUBREL results in this transition
             *       to the same state. */
            isValid = ( newState == MQTTPublishDone ) ||
 800cf08:	79bb      	ldrb	r3, [r7, #6]
 800cf0a:	2b0a      	cmp	r3, #10
 800cf0c:	d002      	beq.n	800cf14 <validateTransitionAck+0xc4>
 800cf0e:	79bb      	ldrb	r3, [r7, #6]
 800cf10:	2b09      	cmp	r3, #9
 800cf12:	d101      	bne.n	800cf18 <validateTransitionAck+0xc8>
 800cf14:	2301      	movs	r3, #1
 800cf16:	e000      	b.n	800cf1a <validateTransitionAck+0xca>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	73fb      	strb	r3, [r7, #15]
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	73fb      	strb	r3, [r7, #15]
                      ( newState == MQTTPubCompPending );
            break;
 800cf24:	e000      	b.n	800cf28 <validateTransitionAck+0xd8>
        /* If an ack was sent/received we shouldn't have been in this state. */
        case MQTTStateNull:
        /* If an ack was sent/received the record should exist. */
        default:
            /* Invalid. */
            break;
 800cf26:	bf00      	nop
    }

    return isValid;
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop

0800cf38 <isPublishOutgoing>:

/*-----------------------------------------------------------*/

static bool isPublishOutgoing( MQTTPubAckType_t packetType,
                               MQTTStateOperation_t opType )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	4603      	mov	r3, r0
 800cf40:	460a      	mov	r2, r1
 800cf42:	71fb      	strb	r3, [r7, #7]
 800cf44:	4613      	mov	r3, r2
 800cf46:	71bb      	strb	r3, [r7, #6]
    bool isOutgoing = false;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]

    switch( packetType )
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	2b03      	cmp	r3, #3
 800cf50:	d009      	beq.n	800cf66 <isPublishOutgoing+0x2e>
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	dc15      	bgt.n	800cf82 <isPublishOutgoing+0x4a>
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	dc02      	bgt.n	800cf60 <isPublishOutgoing+0x28>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	da03      	bge.n	800cf66 <isPublishOutgoing+0x2e>
            isOutgoing = opType == MQTT_SEND;
            break;

        default:
            /* No other ack type. */
            break;
 800cf5e:	e010      	b.n	800cf82 <isPublishOutgoing+0x4a>
    switch( packetType )
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d007      	beq.n	800cf74 <isPublishOutgoing+0x3c>
            break;
 800cf64:	e00d      	b.n	800cf82 <isPublishOutgoing+0x4a>
            isOutgoing = opType == MQTT_RECEIVE;
 800cf66:	79bb      	ldrb	r3, [r7, #6]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	bf0c      	ite	eq
 800cf6c:	2301      	moveq	r3, #1
 800cf6e:	2300      	movne	r3, #0
 800cf70:	73fb      	strb	r3, [r7, #15]
            break;
 800cf72:	e007      	b.n	800cf84 <isPublishOutgoing+0x4c>
            isOutgoing = opType == MQTT_SEND;
 800cf74:	79bb      	ldrb	r3, [r7, #6]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	bf0c      	ite	eq
 800cf7a:	2301      	moveq	r3, #1
 800cf7c:	2300      	movne	r3, #0
 800cf7e:	73fb      	strb	r3, [r7, #15]
            break;
 800cf80:	e000      	b.n	800cf84 <isPublishOutgoing+0x4c>
            break;
 800cf82:	bf00      	nop
    }

    return isOutgoing;
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <findInRecord>:
static size_t findInRecord( const MQTTPubAckInfo_t * records,
                            size_t recordCount,
                            uint16_t packetId,
                            MQTTQoS_t * pQos,
                            MQTTPublishState_t * pCurrentState )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	603b      	str	r3, [r7, #0]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	80fb      	strh	r3, [r7, #6]
    size_t index = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	617b      	str	r3, [r7, #20]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800cfa8:	88fb      	ldrh	r3, [r7, #6]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d106      	bne.n	800cfbc <findInRecord+0x28>
 800cfae:	4b1b      	ldr	r3, [pc, #108]	; (800d01c <findInRecord+0x88>)
 800cfb0:	4a1b      	ldr	r2, [pc, #108]	; (800d020 <findInRecord+0x8c>)
 800cfb2:	f240 11c7 	movw	r1, #455	; 0x1c7
 800cfb6:	481b      	ldr	r0, [pc, #108]	; (800d024 <findInRecord+0x90>)
 800cfb8:	f003 fe28 	bl	8010c0c <__assert_func>

    *pCurrentState = MQTTStateNull;
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	701a      	strb	r2, [r3, #0]

    for( index = 0; index < recordCount; index++ )
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	617b      	str	r3, [r7, #20]
 800cfc6:	e019      	b.n	800cffc <findInRecord+0x68>
    {
        if( records[ index ].packetId == packetId )
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	4413      	add	r3, r2
 800cfd0:	881b      	ldrh	r3, [r3, #0]
 800cfd2:	88fa      	ldrh	r2, [r7, #6]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d10e      	bne.n	800cff6 <findInRecord+0x62>
        {
            *pQos = records[ index ].qos;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	789a      	ldrb	r2, [r3, #2]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	701a      	strb	r2, [r3, #0]
            *pCurrentState = records[ index ].publishState;
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	4413      	add	r3, r2
 800cfee:	78da      	ldrb	r2, [r3, #3]
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	701a      	strb	r2, [r3, #0]
            break;
 800cff4:	e006      	b.n	800d004 <findInRecord+0x70>
    for( index = 0; index < recordCount; index++ )
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	3301      	adds	r3, #1
 800cffa:	617b      	str	r3, [r7, #20]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	429a      	cmp	r2, r3
 800d002:	d3e1      	bcc.n	800cfc8 <findInRecord+0x34>
        }
    }

    if( index == recordCount )
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d102      	bne.n	800d012 <findInRecord+0x7e>
    {
        index = MQTT_INVALID_STATE_COUNT;
 800d00c:	2300      	movs	r3, #0
 800d00e:	43db      	mvns	r3, r3
 800d010:	617b      	str	r3, [r7, #20]
    }

    return index;
 800d012:	697b      	ldr	r3, [r7, #20]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	080168a4 	.word	0x080168a4
 800d020:	08016d08 	.word	0x08016d08
 800d024:	080168c8 	.word	0x080168c8

0800d028 <compactRecords>:

/*-----------------------------------------------------------*/

static void compactRecords( MQTTPubAckInfo_t * records,
                            size_t recordCount )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
    size_t index = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
    size_t emptyIndex = MQTT_INVALID_STATE_COUNT;
 800d036:	2300      	movs	r3, #0
 800d038:	43db      	mvns	r3, r3
 800d03a:	60bb      	str	r3, [r7, #8]

    assert( records != NULL );
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d150      	bne.n	800d0e4 <compactRecords+0xbc>
 800d042:	4b2d      	ldr	r3, [pc, #180]	; (800d0f8 <compactRecords+0xd0>)
 800d044:	4a2d      	ldr	r2, [pc, #180]	; (800d0fc <compactRecords+0xd4>)
 800d046:	f240 11e5 	movw	r1, #485	; 0x1e5
 800d04a:	482d      	ldr	r0, [pc, #180]	; (800d100 <compactRecords+0xd8>)
 800d04c:	f003 fdde 	bl	8010c0c <__assert_func>

    /* Find the empty spots and fill those with non empty values. */
    for( ; index < recordCount; index++ )
    {
        /* Find the first empty spot. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	4413      	add	r3, r2
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d107      	bne.n	800d06e <compactRecords+0x46>
        {
            if( emptyIndex == MQTT_INVALID_STATE_COUNT )
 800d05e:	2300      	movs	r3, #0
 800d060:	43db      	mvns	r3, r3
 800d062:	68ba      	ldr	r2, [r7, #8]
 800d064:	429a      	cmp	r2, r3
 800d066:	d13a      	bne.n	800d0de <compactRecords+0xb6>
            {
                emptyIndex = index;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	60bb      	str	r3, [r7, #8]
 800d06c:	e037      	b.n	800d0de <compactRecords+0xb6>
            }
        }
        else
        {
            if( emptyIndex != MQTT_INVALID_STATE_COUNT )
 800d06e:	2300      	movs	r3, #0
 800d070:	43db      	mvns	r3, r3
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	429a      	cmp	r2, r3
 800d076:	d032      	beq.n	800d0de <compactRecords+0xb6>
            {
                /* Copy over the contents at non empty index to empty index. */
                records[ emptyIndex ].packetId = records[ index ].packetId;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	441a      	add	r2, r3
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	440b      	add	r3, r1
 800d088:	8812      	ldrh	r2, [r2, #0]
 800d08a:	801a      	strh	r2, [r3, #0]
                records[ emptyIndex ].qos = records[ index ].qos;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	441a      	add	r2, r3
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	6879      	ldr	r1, [r7, #4]
 800d09a:	440b      	add	r3, r1
 800d09c:	7892      	ldrb	r2, [r2, #2]
 800d09e:	709a      	strb	r2, [r3, #2]
                records[ emptyIndex ].publishState = records[ index ].publishState;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	441a      	add	r2, r3
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	440b      	add	r3, r1
 800d0b0:	78d2      	ldrb	r2, [r2, #3]
 800d0b2:	70da      	strb	r2, [r3, #3]

                /* Mark the record at current non empty index as invalid. */
                records[ index ].packetId = MQTT_PACKET_ID_INVALID;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	2200      	movs	r2, #0
 800d0be:	801a      	strh	r2, [r3, #0]
                records[ index ].qos = MQTTQoS0;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	709a      	strb	r2, [r3, #2]
                records[ index ].publishState = MQTTStateNull;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	70da      	strb	r2, [r3, #3]

                /* Advance the emptyIndex. */
                emptyIndex++;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	60bb      	str	r3, [r7, #8]
    for( ; index < recordCount; index++ )
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d3b1      	bcc.n	800d050 <compactRecords+0x28>
            }
        }
    }
}
 800d0ec:	bf00      	nop
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	080168f8 	.word	0x080168f8
 800d0fc:	08016d18 	.word	0x08016d18
 800d100:	080168c8 	.word	0x080168c8

0800d104 <addRecord>:
static MQTTStatus_t addRecord( MQTTPubAckInfo_t * records,
                               size_t recordCount,
                               uint16_t packetId,
                               MQTTQoS_t qos,
                               MQTTPublishState_t publishState )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	4611      	mov	r1, r2
 800d110:	461a      	mov	r2, r3
 800d112:	460b      	mov	r3, r1
 800d114:	80fb      	strh	r3, [r7, #6]
 800d116:	4613      	mov	r3, r2
 800d118:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTNoMemory;
 800d11a:	2302      	movs	r3, #2
 800d11c:	77fb      	strb	r3, [r7, #31]
    int32_t index = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	61bb      	str	r3, [r7, #24]
    size_t availableIndex = recordCount;
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	617b      	str	r3, [r7, #20]
    bool validEntryFound = false;
 800d126:	2300      	movs	r3, #0
 800d128:	74fb      	strb	r3, [r7, #19]

    assert( packetId != MQTT_PACKET_ID_INVALID );
 800d12a:	88fb      	ldrh	r3, [r7, #6]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d106      	bne.n	800d13e <addRecord+0x3a>
 800d130:	4b32      	ldr	r3, [pc, #200]	; (800d1fc <addRecord+0xf8>)
 800d132:	4a33      	ldr	r2, [pc, #204]	; (800d200 <addRecord+0xfc>)
 800d134:	f44f 7105 	mov.w	r1, #532	; 0x214
 800d138:	4832      	ldr	r0, [pc, #200]	; (800d204 <addRecord+0x100>)
 800d13a:	f003 fd67 	bl	8010c0c <__assert_func>
    assert( qos != MQTTQoS0 );
 800d13e:	797b      	ldrb	r3, [r7, #5]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d106      	bne.n	800d152 <addRecord+0x4e>
 800d144:	4b30      	ldr	r3, [pc, #192]	; (800d208 <addRecord+0x104>)
 800d146:	4a2e      	ldr	r2, [pc, #184]	; (800d200 <addRecord+0xfc>)
 800d148:	f240 2115 	movw	r1, #533	; 0x215
 800d14c:	482d      	ldr	r0, [pc, #180]	; (800d204 <addRecord+0x100>)
 800d14e:	f003 fd5d 	bl	8010c0c <__assert_func>

    /* Check if we have to compact the records. This is known by checking if
     * the last spot in the array is filled. */
    if( records[ recordCount - 1U ].packetId != MQTT_PACKET_ID_INVALID )
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d158:	3b01      	subs	r3, #1
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4413      	add	r3, r2
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <addRecord+0x6a>
    {
        compactRecords( records, recordCount );
 800d166:	68b9      	ldr	r1, [r7, #8]
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff ff5d 	bl	800d028 <compactRecords>

    /* Start from end so first available index will be populated.
     * Available index is always found after the last element in the records.
     * This is to make sure the relative order of the records in order to meet
     * the message ordering requirement of MQTT spec 3.1.1. */
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3b01      	subs	r3, #1
 800d172:	61bb      	str	r3, [r7, #24]
 800d174:	e021      	b.n	800d1ba <addRecord+0xb6>
    {
        /* Available index is only found after packet at the highest index. */
        if( records[ index ].packetId == MQTT_PACKET_ID_INVALID )
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	4413      	add	r3, r2
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d108      	bne.n	800d196 <addRecord+0x92>
        {
            if( validEntryFound == false )
 800d184:	7cfb      	ldrb	r3, [r7, #19]
 800d186:	f083 0301 	eor.w	r3, r3, #1
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d011      	beq.n	800d1b4 <addRecord+0xb0>
            {
                availableIndex = ( size_t ) index;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	e00e      	b.n	800d1b4 <addRecord+0xb0>
            }
        }
        else
        {
            /* A non-empty spot found in the records. */
            validEntryFound = true;
 800d196:	2301      	movs	r3, #1
 800d198:	74fb      	strb	r3, [r7, #19]

            if( records[ index ].packetId == packetId )
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	88fa      	ldrh	r2, [r7, #6]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d104      	bne.n	800d1b4 <addRecord+0xb0>
                /* Collision. */
                LogError( ( "Collision when adding PacketID=%u at index=%d.",
                            ( unsigned int ) packetId,
                            ( int ) index ) );

                status = MQTTStateCollision;
 800d1aa:	2309      	movs	r3, #9
 800d1ac:	77fb      	strb	r3, [r7, #31]
                availableIndex = recordCount;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	617b      	str	r3, [r7, #20]
                break;
 800d1b2:	e005      	b.n	800d1c0 <addRecord+0xbc>
    for( index = ( ( int32_t ) recordCount - 1 ); index >= 0; index-- )
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	61bb      	str	r3, [r7, #24]
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	dada      	bge.n	800d176 <addRecord+0x72>
            }
        }
    }

    if( availableIndex < recordCount )
 800d1c0:	697a      	ldr	r2, [r7, #20]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d214      	bcs.n	800d1f2 <addRecord+0xee>
    {
        records[ availableIndex ].packetId = packetId;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	88fa      	ldrh	r2, [r7, #6]
 800d1d2:	801a      	strh	r2, [r3, #0]
        records[ availableIndex ].qos = qos;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	797a      	ldrb	r2, [r7, #5]
 800d1de:	709a      	strb	r2, [r3, #2]
        records[ availableIndex ].publishState = publishState;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d1ec:	70da      	strb	r2, [r3, #3]
        status = MQTTSuccess;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	77fb      	strb	r3, [r7, #31]
    }

    return status;
 800d1f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3720      	adds	r7, #32
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	080168a4 	.word	0x080168a4
 800d200:	08016d28 	.word	0x08016d28
 800d204:	080168c8 	.word	0x080168c8
 800d208:	08016908 	.word	0x08016908

0800d20c <updateRecord>:

static void updateRecord( MQTTPubAckInfo_t * records,
                          size_t recordIndex,
                          MQTTPublishState_t newState,
                          bool shouldDelete )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4611      	mov	r1, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	460b      	mov	r3, r1
 800d21c:	71fb      	strb	r3, [r7, #7]
 800d21e:	4613      	mov	r3, r2
 800d220:	71bb      	strb	r3, [r7, #6]
    assert( records != NULL );
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <updateRecord+0x2a>
 800d228:	4b13      	ldr	r3, [pc, #76]	; (800d278 <updateRecord+0x6c>)
 800d22a:	4a14      	ldr	r2, [pc, #80]	; (800d27c <updateRecord+0x70>)
 800d22c:	f240 2151 	movw	r1, #593	; 0x251
 800d230:	4813      	ldr	r0, [pc, #76]	; (800d280 <updateRecord+0x74>)
 800d232:	f003 fceb 	bl	8010c0c <__assert_func>

    if( shouldDelete == true )
 800d236:	79bb      	ldrb	r3, [r7, #6]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d012      	beq.n	800d262 <updateRecord+0x56>
    {
        /* Mark the record as invalid. */
        records[ recordIndex ].packetId = MQTT_PACKET_ID_INVALID;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	4413      	add	r3, r2
 800d244:	2200      	movs	r2, #0
 800d246:	801a      	strh	r2, [r3, #0]
        records[ recordIndex ].qos = MQTTQoS0;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	2200      	movs	r2, #0
 800d252:	709a      	strb	r2, [r3, #2]
        records[ recordIndex ].publishState = MQTTStateNull;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	4413      	add	r3, r2
 800d25c:	2200      	movs	r2, #0
 800d25e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        records[ recordIndex ].publishState = newState;
    }
}
 800d260:	e005      	b.n	800d26e <updateRecord+0x62>
        records[ recordIndex ].publishState = newState;
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	4413      	add	r3, r2
 800d26a:	79fa      	ldrb	r2, [r7, #7]
 800d26c:	70da      	strb	r2, [r3, #3]
}
 800d26e:	bf00      	nop
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	080168f8 	.word	0x080168f8
 800d27c:	08016d34 	.word	0x08016d34
 800d280:	080168c8 	.word	0x080168c8

0800d284 <stateSelect>:
/*-----------------------------------------------------------*/

static uint16_t stateSelect( const MQTTContext_t * pMqttContext,
                             uint16_t searchStates,
                             MQTTStateCursor_t * pCursor )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	460b      	mov	r3, r1
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	817b      	strh	r3, [r7, #10]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800d292:	2300      	movs	r3, #0
 800d294:	83fb      	strh	r3, [r7, #30]
    uint16_t outgoingStates = 0U;
 800d296:	2300      	movs	r3, #0
 800d298:	83bb      	strh	r3, [r7, #28]
    const MQTTPubAckInfo_t * records = NULL;
 800d29a:	2300      	movs	r3, #0
 800d29c:	61bb      	str	r3, [r7, #24]
    size_t maxCount;
    bool stateCheck = false;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	75fb      	strb	r3, [r7, #23]

    assert( pMqttContext != NULL );
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d106      	bne.n	800d2b6 <stateSelect+0x32>
 800d2a8:	4b43      	ldr	r3, [pc, #268]	; (800d3b8 <stateSelect+0x134>)
 800d2aa:	4a44      	ldr	r2, [pc, #272]	; (800d3bc <stateSelect+0x138>)
 800d2ac:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800d2b0:	4843      	ldr	r0, [pc, #268]	; (800d3c0 <stateSelect+0x13c>)
 800d2b2:	f003 fcab 	bl	8010c0c <__assert_func>
    assert( searchStates != 0U );
 800d2b6:	897b      	ldrh	r3, [r7, #10]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d106      	bne.n	800d2ca <stateSelect+0x46>
 800d2bc:	4b41      	ldr	r3, [pc, #260]	; (800d3c4 <stateSelect+0x140>)
 800d2be:	4a3f      	ldr	r2, [pc, #252]	; (800d3bc <stateSelect+0x138>)
 800d2c0:	f240 216d 	movw	r1, #621	; 0x26d
 800d2c4:	483e      	ldr	r0, [pc, #248]	; (800d3c0 <stateSelect+0x13c>)
 800d2c6:	f003 fca1 	bl	8010c0c <__assert_func>
    assert( pCursor != NULL );
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <stateSelect+0x5a>
 800d2d0:	4b3d      	ldr	r3, [pc, #244]	; (800d3c8 <stateSelect+0x144>)
 800d2d2:	4a3a      	ldr	r2, [pc, #232]	; (800d3bc <stateSelect+0x138>)
 800d2d4:	f240 216e 	movw	r1, #622	; 0x26e
 800d2d8:	4839      	ldr	r0, [pc, #228]	; (800d3c0 <stateSelect+0x13c>)
 800d2da:	f003 fc97 	bl	8010c0c <__assert_func>

    /* Create a bit map with all the outgoing publish states. */
    UINT16_SET_BIT( outgoingStates, MQTTPublishSend );
 800d2de:	8bbb      	ldrh	r3, [r7, #28]
 800d2e0:	f043 0302 	orr.w	r3, r3, #2
 800d2e4:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubAckPending );
 800d2e6:	8bbb      	ldrh	r3, [r7, #28]
 800d2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ec:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRecPending );
 800d2ee:	8bbb      	ldrh	r3, [r7, #28]
 800d2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f4:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubRelSend );
 800d2f6:	8bbb      	ldrh	r3, [r7, #28]
 800d2f8:	f043 0310 	orr.w	r3, r3, #16
 800d2fc:	83bb      	strh	r3, [r7, #28]
    UINT16_SET_BIT( outgoingStates, MQTTPubCompPending );
 800d2fe:	8bbb      	ldrh	r3, [r7, #28]
 800d300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d304:	83bb      	strh	r3, [r7, #28]

    /* Only outgoing publish records need to be searched. */
    assert( ( outgoingStates & searchStates ) > 0U );
 800d306:	8bba      	ldrh	r2, [r7, #28]
 800d308:	897b      	ldrh	r3, [r7, #10]
 800d30a:	4013      	ands	r3, r2
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d106      	bne.n	800d320 <stateSelect+0x9c>
 800d312:	4b2e      	ldr	r3, [pc, #184]	; (800d3cc <stateSelect+0x148>)
 800d314:	4a29      	ldr	r2, [pc, #164]	; (800d3bc <stateSelect+0x138>)
 800d316:	f44f 711e 	mov.w	r1, #632	; 0x278
 800d31a:	4829      	ldr	r0, [pc, #164]	; (800d3c0 <stateSelect+0x13c>)
 800d31c:	f003 fc76 	bl	8010c0c <__assert_func>
    assert( ( ~outgoingStates & searchStates ) == 0U );
 800d320:	8bbb      	ldrh	r3, [r7, #28]
 800d322:	43da      	mvns	r2, r3
 800d324:	897b      	ldrh	r3, [r7, #10]
 800d326:	4013      	ands	r3, r2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <stateSelect+0xb6>
 800d32c:	4b28      	ldr	r3, [pc, #160]	; (800d3d0 <stateSelect+0x14c>)
 800d32e:	4a23      	ldr	r2, [pc, #140]	; (800d3bc <stateSelect+0x138>)
 800d330:	f240 2179 	movw	r1, #633	; 0x279
 800d334:	4822      	ldr	r0, [pc, #136]	; (800d3c0 <stateSelect+0x13c>)
 800d336:	f003 fc69 	bl	8010c0c <__assert_func>

    records = pMqttContext->outgoingPublishRecords;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	61bb      	str	r3, [r7, #24]
    maxCount = pMqttContext->outgoingPublishRecordMaxCount;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	613b      	str	r3, [r7, #16]

    while( *pCursor < maxCount )
 800d346:	e02d      	b.n	800d3a4 <stateSelect+0x120>
    {
        /* Check if any of the search states are present. */
        stateCheck = UINT16_CHECK_BIT( searchStates, records[ *pCursor ].publishState );
 800d348:	897a      	ldrh	r2, [r7, #10]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	69b9      	ldr	r1, [r7, #24]
 800d352:	440b      	add	r3, r1
 800d354:	78db      	ldrb	r3, [r3, #3]
 800d356:	4619      	mov	r1, r3
 800d358:	2301      	movs	r3, #1
 800d35a:	408b      	lsls	r3, r1
 800d35c:	401a      	ands	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	69b9      	ldr	r1, [r7, #24]
 800d366:	440b      	add	r3, r1
 800d368:	78db      	ldrb	r3, [r3, #3]
 800d36a:	4619      	mov	r1, r3
 800d36c:	2301      	movs	r3, #1
 800d36e:	408b      	lsls	r3, r1
 800d370:	429a      	cmp	r2, r3
 800d372:	bf0c      	ite	eq
 800d374:	2301      	moveq	r3, #1
 800d376:	2300      	movne	r3, #0
 800d378:	75fb      	strb	r3, [r7, #23]

        if( stateCheck == true )
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00c      	beq.n	800d39a <stateSelect+0x116>
        {
            packetId = records[ *pCursor ].packetId;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	4413      	add	r3, r2
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	83fb      	strh	r3, [r7, #30]
            ( *pCursor )++;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	601a      	str	r2, [r3, #0]
            break;
 800d398:	e009      	b.n	800d3ae <stateSelect+0x12a>
        }

        ( *pCursor )++;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	601a      	str	r2, [r3, #0]
    while( *pCursor < maxCount )
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d8cc      	bhi.n	800d348 <stateSelect+0xc4>
    }

    return packetId;
 800d3ae:	8bfb      	ldrh	r3, [r7, #30]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	08016918 	.word	0x08016918
 800d3bc:	08016d44 	.word	0x08016d44
 800d3c0:	080168c8 	.word	0x080168c8
 800d3c4:	08016930 	.word	0x08016930
 800d3c8:	08016944 	.word	0x08016944
 800d3cc:	08016954 	.word	0x08016954
 800d3d0:	0801697c 	.word	0x0801697c

0800d3d4 <MQTT_CalculateStateAck>:
/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStateAck( MQTTPubAckType_t packetType,
                                           MQTTStateOperation_t opType,
                                           MQTTQoS_t qos )
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	71fb      	strb	r3, [r7, #7]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	71bb      	strb	r3, [r7, #6]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	717b      	strb	r3, [r7, #5]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]
    /* There are more QoS2 cases than QoS1, so initialize to that. */
    bool qosValid = qos == MQTTQoS2;
 800d3ea:	797b      	ldrb	r3, [r7, #5]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	bf0c      	ite	eq
 800d3f0:	2301      	moveq	r3, #1
 800d3f2:	2300      	movne	r3, #0
 800d3f4:	73bb      	strb	r3, [r7, #14]

    switch( packetType )
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	2b03      	cmp	r3, #3
 800d3fa:	d827      	bhi.n	800d44c <MQTT_CalculateStateAck+0x78>
 800d3fc:	a201      	add	r2, pc, #4	; (adr r2, 800d404 <MQTT_CalculateStateAck+0x30>)
 800d3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d402:	bf00      	nop
 800d404:	0800d415 	.word	0x0800d415
 800d408:	0800d427 	.word	0x0800d427
 800d40c:	0800d437 	.word	0x0800d437
 800d410:	0800d447 	.word	0x0800d447
    {
        case MQTTPuback:
            qosValid = qos == MQTTQoS1;
 800d414:	797b      	ldrb	r3, [r7, #5]
 800d416:	2b01      	cmp	r3, #1
 800d418:	bf0c      	ite	eq
 800d41a:	2301      	moveq	r3, #1
 800d41c:	2300      	movne	r3, #0
 800d41e:	73bb      	strb	r3, [r7, #14]
            calculatedState = MQTTPublishDone;
 800d420:	230a      	movs	r3, #10
 800d422:	73fb      	strb	r3, [r7, #15]
            break;
 800d424:	e013      	b.n	800d44e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrec:

            /* Incoming publish: send PUBREC, PUBREL pending.
             * Outgoing publish: receive PUBREC, send PUBREL. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRelPending : MQTTPubRelSend;
 800d426:	79bb      	ldrb	r3, [r7, #6]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <MQTT_CalculateStateAck+0x5c>
 800d42c:	2308      	movs	r3, #8
 800d42e:	e000      	b.n	800d432 <MQTT_CalculateStateAck+0x5e>
 800d430:	2304      	movs	r3, #4
 800d432:	73fb      	strb	r3, [r7, #15]
            break;
 800d434:	e00b      	b.n	800d44e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubrel:

            /* Incoming publish: receive PUBREL, send PUBCOMP.
             * Outgoing publish: send PUBREL, PUBCOMP pending. */
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubCompPending : MQTTPubCompSend;
 800d436:	79bb      	ldrb	r3, [r7, #6]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <MQTT_CalculateStateAck+0x6c>
 800d43c:	2309      	movs	r3, #9
 800d43e:	e000      	b.n	800d442 <MQTT_CalculateStateAck+0x6e>
 800d440:	2305      	movs	r3, #5
 800d442:	73fb      	strb	r3, [r7, #15]
            break;
 800d444:	e003      	b.n	800d44e <MQTT_CalculateStateAck+0x7a>

        case MQTTPubcomp:
            calculatedState = MQTTPublishDone;
 800d446:	230a      	movs	r3, #10
 800d448:	73fb      	strb	r3, [r7, #15]
            break;
 800d44a:	e000      	b.n	800d44e <MQTT_CalculateStateAck+0x7a>

        default:
            /* No other ack type. */
            break;
 800d44c:	bf00      	nop
    }

    /* Sanity check, make sure ack and QoS agree. */
    if( qosValid == false )
 800d44e:	7bbb      	ldrb	r3, [r7, #14]
 800d450:	f083 0301 	eor.w	r3, r3, #1
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <MQTT_CalculateStateAck+0x8a>
    {
        calculatedState = MQTTStateNull;
 800d45a:	2300      	movs	r3, #0
 800d45c:	73fb      	strb	r3, [r7, #15]
    }

    return calculatedState;
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3714      	adds	r7, #20
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <updateStateAck>:
                                    size_t maxRecordCount,
                                    size_t recordIndex,
                                    uint16_t packetId,
                                    MQTTPublishState_t currentState,
                                    MQTTPublishState_t newState )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af02      	add	r7, sp, #8
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	807b      	strh	r3, [r7, #2]
    MQTTStatus_t status = MQTTIllegalState;
 800d47a:	2308      	movs	r3, #8
 800d47c:	75fb      	strb	r3, [r7, #23]
    bool shouldDeleteRecord = false;
 800d47e:	2300      	movs	r3, #0
 800d480:	75bb      	strb	r3, [r7, #22]
    bool isTransitionValid = false;
 800d482:	2300      	movs	r3, #0
 800d484:	757b      	strb	r3, [r7, #21]

    assert( records != NULL );
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d106      	bne.n	800d49a <updateStateAck+0x2e>
 800d48c:	4b22      	ldr	r3, [pc, #136]	; (800d518 <updateStateAck+0xac>)
 800d48e:	4a23      	ldr	r2, [pc, #140]	; (800d51c <updateStateAck+0xb0>)
 800d490:	f240 21ce 	movw	r1, #718	; 0x2ce
 800d494:	4822      	ldr	r0, [pc, #136]	; (800d520 <updateStateAck+0xb4>)
 800d496:	f003 fbb9 	bl	8010c0c <__assert_func>

    /* Record to be deleted if the state transition is completed or if a PUBREC
     * is received for an outgoing QoS2 publish. When a PUBREC is received,
     * record is deleted and added back to the end of the records to maintain
     * ordering for PUBRELs. */
    shouldDeleteRecord = ( newState == MQTTPublishDone ) || ( newState == MQTTPubRelSend );
 800d49a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d49e:	2b0a      	cmp	r3, #10
 800d4a0:	d003      	beq.n	800d4aa <updateStateAck+0x3e>
 800d4a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	d101      	bne.n	800d4ae <updateStateAck+0x42>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <updateStateAck+0x44>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	75bb      	strb	r3, [r7, #22]
 800d4b2:	7dbb      	ldrb	r3, [r7, #22]
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	75bb      	strb	r3, [r7, #22]
    isTransitionValid = validateTransitionAck( currentState, newState );
 800d4ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d4be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7ff fcc3 	bl	800ce50 <validateTransitionAck>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	757b      	strb	r3, [r7, #21]

    if( isTransitionValid == true )
 800d4ce:	7d7b      	ldrb	r3, [r7, #21]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d01c      	beq.n	800d50e <updateStateAck+0xa2>
    {
        status = MQTTSuccess;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	75fb      	strb	r3, [r7, #23]

        /* Update record for acks. When sending or receiving acks for packets that
         * are resent during a session reestablishment, the new state and
         * current state can be the same. No update of record required in that case. */
        if( currentState != newState )
 800d4d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d4dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d014      	beq.n	800d50e <updateStateAck+0xa2>
        {
            updateRecord( records,
 800d4e4:	7dbb      	ldrb	r3, [r7, #22]
 800d4e6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7ff fe8d 	bl	800d20c <updateRecord>

            /* For QoS2 messages, in order to preserve the message ordering, when
             * a PUBREC is received for an outgoing publish, the record should be
             * moved to the last. This move will help preserve the order in which
             * a PUBREL needs to be resent in case of a session reestablishment. */
            if( newState == MQTTPubRelSend )
 800d4f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4f6:	2b04      	cmp	r3, #4
 800d4f8:	d109      	bne.n	800d50e <updateStateAck+0xa2>
            {
                status = addRecord( records,
 800d4fa:	887a      	ldrh	r2, [r7, #2]
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	2302      	movs	r3, #2
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7ff fdfd 	bl	800d104 <addRecord>
 800d50a:	4603      	mov	r3, r0
 800d50c:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	080168f8 	.word	0x080168f8
 800d51c:	08016d50 	.word	0x08016d50
 800d520:	080168c8 	.word	0x080168c8

0800d524 <updateStatePublish>:
                                        uint16_t packetId,
                                        MQTTStateOperation_t opType,
                                        MQTTQoS_t qos,
                                        MQTTPublishState_t currentState,
                                        MQTTPublishState_t newState )
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b089      	sub	sp, #36	; 0x24
 800d528:	af02      	add	r7, sp, #8
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	4611      	mov	r1, r2
 800d530:	461a      	mov	r2, r3
 800d532:	460b      	mov	r3, r1
 800d534:	80fb      	strh	r3, [r7, #6]
 800d536:	4613      	mov	r3, r2
 800d538:	717b      	strb	r3, [r7, #5]
    MQTTStatus_t status = MQTTSuccess;
 800d53a:	2300      	movs	r3, #0
 800d53c:	75fb      	strb	r3, [r7, #23]
    bool isTransitionValid = false;
 800d53e:	2300      	movs	r3, #0
 800d540:	75bb      	strb	r3, [r7, #22]

    assert( pMqttContext != NULL );
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d106      	bne.n	800d556 <updateStatePublish+0x32>
 800d548:	4b29      	ldr	r3, [pc, #164]	; (800d5f0 <updateStatePublish+0xcc>)
 800d54a:	4a2a      	ldr	r2, [pc, #168]	; (800d5f4 <updateStatePublish+0xd0>)
 800d54c:	f240 310b 	movw	r1, #779	; 0x30b
 800d550:	4829      	ldr	r0, [pc, #164]	; (800d5f8 <updateStatePublish+0xd4>)
 800d552:	f003 fb5b 	bl	8010c0c <__assert_func>
    assert( packetId != MQTT_PACKET_ID_INVALID );
 800d556:	88fb      	ldrh	r3, [r7, #6]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d106      	bne.n	800d56a <updateStatePublish+0x46>
 800d55c:	4b27      	ldr	r3, [pc, #156]	; (800d5fc <updateStatePublish+0xd8>)
 800d55e:	4a25      	ldr	r2, [pc, #148]	; (800d5f4 <updateStatePublish+0xd0>)
 800d560:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800d564:	4824      	ldr	r0, [pc, #144]	; (800d5f8 <updateStatePublish+0xd4>)
 800d566:	f003 fb51 	bl	8010c0c <__assert_func>
    assert( qos != MQTTQoS0 );
 800d56a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <updateStatePublish+0x5c>
 800d572:	4b23      	ldr	r3, [pc, #140]	; (800d600 <updateStatePublish+0xdc>)
 800d574:	4a1f      	ldr	r2, [pc, #124]	; (800d5f4 <updateStatePublish+0xd0>)
 800d576:	f240 310d 	movw	r1, #781	; 0x30d
 800d57a:	481f      	ldr	r0, [pc, #124]	; (800d5f8 <updateStatePublish+0xd4>)
 800d57c:	f003 fb46 	bl	8010c0c <__assert_func>

    /* This will always succeed for an incoming publish. This is due to the fact
     * that the passed in currentState must be MQTTStateNull, since
     * #MQTT_UpdateStatePublish does not perform a lookup for receives. */
    isTransitionValid = validateTransitionPublish( currentState, newState, opType, qos );
 800d580:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d584:	797a      	ldrb	r2, [r7, #5]
 800d586:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800d58a:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 800d58e:	f7ff fbf9 	bl	800cd84 <validateTransitionPublish>
 800d592:	4603      	mov	r3, r0
 800d594:	75bb      	strb	r3, [r7, #22]

    if( isTransitionValid == true )
 800d596:	7dbb      	ldrb	r3, [r7, #22]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d021      	beq.n	800d5e0 <updateStatePublish+0xbc>
    {
        /* addRecord will check for collisions. */
        if( opType == MQTT_RECEIVE )
 800d59c:	797b      	ldrb	r3, [r7, #5]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d10f      	bne.n	800d5c2 <updateStatePublish+0x9e>
        {
            status = addRecord( pMqttContext->incomingPublishRecords,
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6858      	ldr	r0, [r3, #4]
                                pMqttContext->incomingPublishRecordMaxCount,
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	68d9      	ldr	r1, [r3, #12]
            status = addRecord( pMqttContext->incomingPublishRecords,
 800d5aa:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800d5ae:	88fa      	ldrh	r2, [r7, #6]
 800d5b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	4623      	mov	r3, r4
 800d5b8:	f7ff fda4 	bl	800d104 <addRecord>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	75fb      	strb	r3, [r7, #23]
 800d5c0:	e010      	b.n	800d5e4 <updateStatePublish+0xc0>
        /* Send operation. */
        else
        {
            /* Skip updating record when publish is resend and no state
             * update is required. */
            if( currentState != newState )
 800d5c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d5c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d00a      	beq.n	800d5e4 <updateStatePublish+0xc0>
            {
                updateRecord( pMqttContext->outgoingPublishRecords,
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	68b9      	ldr	r1, [r7, #8]
 800d5da:	f7ff fe17 	bl	800d20c <updateRecord>
 800d5de:	e001      	b.n	800d5e4 <updateStatePublish+0xc0>
            }
        }
    }
    else
    {
        status = MQTTIllegalState;
 800d5e0:	2308      	movs	r3, #8
 800d5e2:	75fb      	strb	r3, [r7, #23]
        LogError( ( "Invalid transition from state %s to state %s.",
                    MQTT_State_strerror( currentState ),
                    MQTT_State_strerror( newState ) ) );
    }

    return status;
 800d5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	371c      	adds	r7, #28
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd90      	pop	{r4, r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	08016918 	.word	0x08016918
 800d5f4:	08016d60 	.word	0x08016d60
 800d5f8:	080168c8 	.word	0x080168c8
 800d5fc:	080168a4 	.word	0x080168a4
 800d600:	08016908 	.word	0x08016908

0800d604 <MQTT_ReserveState>:
/*-----------------------------------------------------------*/

MQTTStatus_t MQTT_ReserveState( const MQTTContext_t * pMqttContext,
                                uint16_t packetId,
                                MQTTQoS_t qos )
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af02      	add	r7, sp, #8
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	807b      	strh	r3, [r7, #2]
 800d610:	4613      	mov	r3, r2
 800d612:	707b      	strb	r3, [r7, #1]
    MQTTStatus_t status = MQTTSuccess;
 800d614:	2300      	movs	r3, #0
 800d616:	73fb      	strb	r3, [r7, #15]

    if( qos == MQTTQoS0 )
 800d618:	787b      	ldrb	r3, [r7, #1]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d102      	bne.n	800d624 <MQTT_ReserveState+0x20>
    {
        status = MQTTSuccess;
 800d61e:	2300      	movs	r3, #0
 800d620:	73fb      	strb	r3, [r7, #15]
 800d622:	e014      	b.n	800d64e <MQTT_ReserveState+0x4a>
    }
    else if( ( packetId == MQTT_PACKET_ID_INVALID ) || ( pMqttContext == NULL ) )
 800d624:	887b      	ldrh	r3, [r7, #2]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <MQTT_ReserveState+0x2c>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d102      	bne.n	800d636 <MQTT_ReserveState+0x32>
    {
        status = MQTTBadParameter;
 800d630:	2301      	movs	r3, #1
 800d632:	73fb      	strb	r3, [r7, #15]
 800d634:	e00b      	b.n	800d64e <MQTT_ReserveState+0x4a>
    }
    else
    {
        /* Collisions are detected when adding the record. */
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6818      	ldr	r0, [r3, #0]
                            pMqttContext->outgoingPublishRecordMaxCount,
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6899      	ldr	r1, [r3, #8]
        status = addRecord( pMqttContext->outgoingPublishRecords,
 800d63e:	787b      	ldrb	r3, [r7, #1]
 800d640:	887a      	ldrh	r2, [r7, #2]
 800d642:	2401      	movs	r4, #1
 800d644:	9400      	str	r4, [sp, #0]
 800d646:	f7ff fd5d 	bl	800d104 <addRecord>
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]
                            packetId,
                            qos,
                            MQTTPublishSend );
    }

    return status;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	bd90      	pop	{r4, r7, pc}

0800d658 <MQTT_CalculateStatePublish>:

/*-----------------------------------------------------------*/

MQTTPublishState_t MQTT_CalculateStatePublish( MQTTStateOperation_t opType,
                                               MQTTQoS_t qos )
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	460a      	mov	r2, r1
 800d662:	71fb      	strb	r3, [r7, #7]
 800d664:	4613      	mov	r3, r2
 800d666:	71bb      	strb	r3, [r7, #6]
    MQTTPublishState_t calculatedState = MQTTStateNull;
 800d668:	2300      	movs	r3, #0
 800d66a:	73fb      	strb	r3, [r7, #15]

    switch( qos )
 800d66c:	79bb      	ldrb	r3, [r7, #6]
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d011      	beq.n	800d696 <MQTT_CalculateStatePublish+0x3e>
 800d672:	2b02      	cmp	r3, #2
 800d674:	dc17      	bgt.n	800d6a6 <MQTT_CalculateStatePublish+0x4e>
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <MQTT_CalculateStatePublish+0x28>
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d003      	beq.n	800d686 <MQTT_CalculateStatePublish+0x2e>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
            break;

        default:
            /* No other QoS values. */
            break;
 800d67e:	e012      	b.n	800d6a6 <MQTT_CalculateStatePublish+0x4e>
            calculatedState = MQTTPublishDone;
 800d680:	230a      	movs	r3, #10
 800d682:	73fb      	strb	r3, [r7, #15]
            break;
 800d684:	e010      	b.n	800d6a8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubAckPending : MQTTPubAckSend;
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <MQTT_CalculateStatePublish+0x38>
 800d68c:	2306      	movs	r3, #6
 800d68e:	e000      	b.n	800d692 <MQTT_CalculateStatePublish+0x3a>
 800d690:	2302      	movs	r3, #2
 800d692:	73fb      	strb	r3, [r7, #15]
            break;
 800d694:	e008      	b.n	800d6a8 <MQTT_CalculateStatePublish+0x50>
            calculatedState = ( opType == MQTT_SEND ) ? MQTTPubRecPending : MQTTPubRecSend;
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <MQTT_CalculateStatePublish+0x48>
 800d69c:	2307      	movs	r3, #7
 800d69e:	e000      	b.n	800d6a2 <MQTT_CalculateStatePublish+0x4a>
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	73fb      	strb	r3, [r7, #15]
            break;
 800d6a4:	e000      	b.n	800d6a8 <MQTT_CalculateStatePublish+0x50>
            break;
 800d6a6:	bf00      	nop
    }

    return calculatedState;
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <MQTT_UpdateStatePublish>:
MQTTStatus_t MQTT_UpdateStatePublish( const MQTTContext_t * pMqttContext,
                                      uint16_t packetId,
                                      MQTTStateOperation_t opType,
                                      MQTTQoS_t qos,
                                      MQTTPublishState_t * pNewState )
{
 800d6b6:	b590      	push	{r4, r7, lr}
 800d6b8:	b08b      	sub	sp, #44	; 0x2c
 800d6ba:	af04      	add	r7, sp, #16
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	4608      	mov	r0, r1
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	807b      	strh	r3, [r7, #2]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	707b      	strb	r3, [r7, #1]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	73fb      	strb	r3, [r7, #15]
    MQTTPublishState_t currentState = MQTTStateNull;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73bb      	strb	r3, [r7, #14]
    MQTTStatus_t mqttStatus = MQTTSuccess;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	75fb      	strb	r3, [r7, #23]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	43db      	mvns	r3, r3
 800d6e0:	613b      	str	r3, [r7, #16]
    MQTTQoS_t foundQoS = MQTTQoS0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	737b      	strb	r3, [r7, #13]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <MQTT_UpdateStatePublish+0x3c>
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <MQTT_UpdateStatePublish+0x42>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );

        mqttStatus = MQTTBadParameter;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	75fb      	strb	r3, [r7, #23]
 800d6f6:	e028      	b.n	800d74a <MQTT_UpdateStatePublish+0x94>
    }
    else if( qos == MQTTQoS0 )
 800d6f8:	783b      	ldrb	r3, [r7, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d103      	bne.n	800d706 <MQTT_UpdateStatePublish+0x50>
    {
        /* QoS 0 publish. Do nothing. */
        *pNewState = MQTTPublishDone;
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	220a      	movs	r2, #10
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e021      	b.n	800d74a <MQTT_UpdateStatePublish+0x94>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800d706:	887b      	ldrh	r3, [r7, #2]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d102      	bne.n	800d712 <MQTT_UpdateStatePublish+0x5c>
    {
        /* Publishes > QoS 0 need a valid packet ID. */
        mqttStatus = MQTTBadParameter;
 800d70c:	2301      	movs	r3, #1
 800d70e:	75fb      	strb	r3, [r7, #23]
 800d710:	e01b      	b.n	800d74a <MQTT_UpdateStatePublish+0x94>
    }
    else if( opType == MQTT_SEND )
 800d712:	787b      	ldrb	r3, [r7, #1]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d118      	bne.n	800d74a <MQTT_UpdateStatePublish+0x94>
    {
        /* Search record for entry so we can check QoS. */
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6818      	ldr	r0, [r3, #0]
                                    pMqttContext->outgoingPublishRecordMaxCount,
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6899      	ldr	r1, [r3, #8]
        recordIndex = findInRecord( pMqttContext->outgoingPublishRecords,
 800d720:	f107 040d 	add.w	r4, r7, #13
 800d724:	887a      	ldrh	r2, [r7, #2]
 800d726:	f107 030e 	add.w	r3, r7, #14
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	4623      	mov	r3, r4
 800d72e:	f7ff fc31 	bl	800cf94 <findInRecord>
 800d732:	6138      	str	r0, [r7, #16]
                                    packetId,
                                    &foundQoS,
                                    &currentState );

        if( ( recordIndex == MQTT_INVALID_STATE_COUNT ) || ( foundQoS != qos ) )
 800d734:	2300      	movs	r3, #0
 800d736:	43db      	mvns	r3, r3
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d003      	beq.n	800d746 <MQTT_UpdateStatePublish+0x90>
 800d73e:	7b7b      	ldrb	r3, [r7, #13]
 800d740:	783a      	ldrb	r2, [r7, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	d001      	beq.n	800d74a <MQTT_UpdateStatePublish+0x94>
        {
            /* Entry should match with supplied QoS. */
            mqttStatus = MQTTBadParameter;
 800d746:	2301      	movs	r3, #1
 800d748:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* QoS 1 or 2 receive. Nothing to be done. */
    }

    if( ( qos != MQTTQoS0 ) && ( mqttStatus == MQTTSuccess ) )
 800d74a:	783b      	ldrb	r3, [r7, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d020      	beq.n	800d792 <MQTT_UpdateStatePublish+0xdc>
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11d      	bne.n	800d792 <MQTT_UpdateStatePublish+0xdc>
    {
        newState = MQTT_CalculateStatePublish( opType, qos );
 800d756:	783a      	ldrb	r2, [r7, #0]
 800d758:	787b      	ldrb	r3, [r7, #1]
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff ff7b 	bl	800d658 <MQTT_CalculateStatePublish>
 800d762:	4603      	mov	r3, r0
 800d764:	73fb      	strb	r3, [r7, #15]
        /* Validate state transition and update state records. */
        mqttStatus = updateStatePublish( pMqttContext,
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	7878      	ldrb	r0, [r7, #1]
 800d76a:	8879      	ldrh	r1, [r7, #2]
 800d76c:	7bfa      	ldrb	r2, [r7, #15]
 800d76e:	9202      	str	r2, [sp, #8]
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	783b      	ldrb	r3, [r7, #0]
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	4603      	mov	r3, r0
 800d778:	460a      	mov	r2, r1
 800d77a:	6939      	ldr	r1, [r7, #16]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff fed1 	bl	800d524 <updateStatePublish>
 800d782:	4603      	mov	r3, r0
 800d784:	75fb      	strb	r3, [r7, #23]
                                         qos,
                                         currentState,
                                         newState );

        /* Update output parameter on success. */
        if( mqttStatus == MQTTSuccess )
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d102      	bne.n	800d792 <MQTT_UpdateStatePublish+0xdc>
        {
            *pNewState = newState;
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	7bfa      	ldrb	r2, [r7, #15]
 800d790:	701a      	strb	r2, [r3, #0]
        }
    }

    return mqttStatus;
 800d792:	7dfb      	ldrb	r3, [r7, #23]
}
 800d794:	4618      	mov	r0, r3
 800d796:	371c      	adds	r7, #28
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd90      	pop	{r4, r7, pc}

0800d79c <MQTT_UpdateStateAck>:
MQTTStatus_t MQTT_UpdateStateAck( const MQTTContext_t * pMqttContext,
                                  uint16_t packetId,
                                  MQTTPubAckType_t packetType,
                                  MQTTStateOperation_t opType,
                                  MQTTPublishState_t * pNewState )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08a      	sub	sp, #40	; 0x28
 800d7a0:	af02      	add	r7, sp, #8
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	4611      	mov	r1, r2
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	807b      	strh	r3, [r7, #2]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	707b      	strb	r3, [r7, #1]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	703b      	strb	r3, [r7, #0]
    MQTTPublishState_t newState = MQTTStateNull;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	74bb      	strb	r3, [r7, #18]
    MQTTPublishState_t currentState = MQTTStateNull;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	743b      	strb	r3, [r7, #16]
    bool isOutgoingPublish = isPublishOutgoing( packetType, opType );
 800d7be:	783a      	ldrb	r2, [r7, #0]
 800d7c0:	787b      	ldrb	r3, [r7, #1]
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff fbb7 	bl	800cf38 <isPublishOutgoing>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	747b      	strb	r3, [r7, #17]
    MQTTQoS_t qos = MQTTQoS0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	73fb      	strb	r3, [r7, #15]
    size_t maxRecordCount = MQTT_INVALID_STATE_COUNT;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	43db      	mvns	r3, r3
 800d7d6:	61fb      	str	r3, [r7, #28]
    size_t recordIndex = MQTT_INVALID_STATE_COUNT;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	43db      	mvns	r3, r3
 800d7dc:	61bb      	str	r3, [r7, #24]

    MQTTPubAckInfo_t * records = NULL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
    MQTTStatus_t status = MQTTBadResponse;
 800d7e2:	2305      	movs	r3, #5
 800d7e4:	74fb      	strb	r3, [r7, #19]

    if( ( pMqttContext == NULL ) || ( pNewState == NULL ) )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <MQTT_UpdateStateAck+0x56>
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d102      	bne.n	800d7f8 <MQTT_UpdateStateAck+0x5c>
    {
        LogError( ( "Argument cannot be NULL: pMqttContext=%p, pNewState=%p.",
                    ( void * ) pMqttContext,
                    ( void * ) pNewState ) );
        status = MQTTBadParameter;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	74fb      	strb	r3, [r7, #19]
 800d7f6:	e027      	b.n	800d848 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetId == MQTT_PACKET_ID_INVALID )
 800d7f8:	887b      	ldrh	r3, [r7, #2]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <MQTT_UpdateStateAck+0x68>
    {
        LogError( ( "Packet ID must be nonzero." ) );
        status = MQTTBadParameter;
 800d7fe:	2301      	movs	r3, #1
 800d800:	74fb      	strb	r3, [r7, #19]
 800d802:	e021      	b.n	800d848 <MQTT_UpdateStateAck+0xac>
    }
    else if( packetType > MQTTPubcomp )
 800d804:	787b      	ldrb	r3, [r7, #1]
 800d806:	2b03      	cmp	r3, #3
 800d808:	d902      	bls.n	800d810 <MQTT_UpdateStateAck+0x74>
    {
        LogError( ( "Invalid packet type %u.", ( unsigned int ) packetType ) );
        status = MQTTBadParameter;
 800d80a:	2301      	movs	r3, #1
 800d80c:	74fb      	strb	r3, [r7, #19]
 800d80e:	e01b      	b.n	800d848 <MQTT_UpdateStateAck+0xac>
    }
    else
    {
        if( isOutgoingPublish == true )
 800d810:	7c7b      	ldrb	r3, [r7, #17]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d006      	beq.n	800d824 <MQTT_UpdateStateAck+0x88>
        {
            records = pMqttContext->outgoingPublishRecords;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->outgoingPublishRecordMaxCount;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	61fb      	str	r3, [r7, #28]
 800d822:	e005      	b.n	800d830 <MQTT_UpdateStateAck+0x94>
        }
        else
        {
            records = pMqttContext->incomingPublishRecords;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	617b      	str	r3, [r7, #20]
            maxRecordCount = pMqttContext->incomingPublishRecordMaxCount;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	61fb      	str	r3, [r7, #28]
        }

        recordIndex = findInRecord( records,
 800d830:	f107 010f 	add.w	r1, r7, #15
 800d834:	887a      	ldrh	r2, [r7, #2]
 800d836:	f107 0310 	add.w	r3, r7, #16
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	460b      	mov	r3, r1
 800d83e:	69f9      	ldr	r1, [r7, #28]
 800d840:	6978      	ldr	r0, [r7, #20]
 800d842:	f7ff fba7 	bl	800cf94 <findInRecord>
 800d846:	61b8      	str	r0, [r7, #24]
                                    packetId,
                                    &qos,
                                    &currentState );
    }

    if( recordIndex != MQTT_INVALID_STATE_COUNT )
 800d848:	2300      	movs	r3, #0
 800d84a:	43db      	mvns	r3, r3
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d01a      	beq.n	800d888 <MQTT_UpdateStateAck+0xec>
    {
        newState = MQTT_CalculateStateAck( packetType, opType, qos );
 800d852:	7bfa      	ldrb	r2, [r7, #15]
 800d854:	7839      	ldrb	r1, [r7, #0]
 800d856:	787b      	ldrb	r3, [r7, #1]
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff fdbb 	bl	800d3d4 <MQTT_CalculateStateAck>
 800d85e:	4603      	mov	r3, r0
 800d860:	74bb      	strb	r3, [r7, #18]

        /* Validate state transition and update state record. */
        status = updateStateAck( records,
 800d862:	7c3b      	ldrb	r3, [r7, #16]
 800d864:	8879      	ldrh	r1, [r7, #2]
 800d866:	7cba      	ldrb	r2, [r7, #18]
 800d868:	9201      	str	r2, [sp, #4]
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	460b      	mov	r3, r1
 800d86e:	69ba      	ldr	r2, [r7, #24]
 800d870:	69f9      	ldr	r1, [r7, #28]
 800d872:	6978      	ldr	r0, [r7, #20]
 800d874:	f7ff fdfa 	bl	800d46c <updateStateAck>
 800d878:	4603      	mov	r3, r0
 800d87a:	74fb      	strb	r3, [r7, #19]
                                 packetId,
                                 currentState,
                                 newState );

        /* Update the output parameter. */
        if( status == MQTTSuccess )
 800d87c:	7cfb      	ldrb	r3, [r7, #19]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d102      	bne.n	800d888 <MQTT_UpdateStateAck+0xec>
        {
            *pNewState = newState;
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	7cba      	ldrb	r2, [r7, #18]
 800d886:	701a      	strb	r2, [r3, #0]
    {
        LogError( ( "No matching record found for publish: PacketId=%u.",
                    ( unsigned int ) packetId ) );
    }

    return status;
 800d888:	7cfb      	ldrb	r3, [r7, #19]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3720      	adds	r7, #32
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <MQTT_PubrelToResend>:
/*-----------------------------------------------------------*/

uint16_t MQTT_PubrelToResend( const MQTTContext_t * pMqttContext,
                              MQTTStateCursor_t * pCursor,
                              MQTTPublishState_t * pState )
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b086      	sub	sp, #24
 800d896:	af00      	add	r7, sp, #0
 800d898:	60f8      	str	r0, [r7, #12]
 800d89a:	60b9      	str	r1, [r7, #8]
 800d89c:	607a      	str	r2, [r7, #4]
    uint16_t packetId = MQTT_PACKET_ID_INVALID;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	82fb      	strh	r3, [r7, #22]
    uint16_t searchStates = 0U;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	82bb      	strh	r3, [r7, #20]

    /* Validate arguments. */
    if( ( pMqttContext == NULL ) || ( pCursor == NULL ) || ( pState == NULL ) )
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01b      	beq.n	800d8e4 <MQTT_PubrelToResend+0x52>
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d018      	beq.n	800d8e4 <MQTT_PubrelToResend+0x52>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d015      	beq.n	800d8e4 <MQTT_PubrelToResend+0x52>
    }
    else
    {
        /* PUBREL for packets in state #MQTTPubCompPending and #MQTTPubRelSend
         * would need to be resent when a session is reestablished.*/
        UINT16_SET_BIT( searchStates, MQTTPubCompPending );
 800d8b8:	8abb      	ldrh	r3, [r7, #20]
 800d8ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d8be:	82bb      	strh	r3, [r7, #20]
        UINT16_SET_BIT( searchStates, MQTTPubRelSend );
 800d8c0:	8abb      	ldrh	r3, [r7, #20]
 800d8c2:	f043 0310 	orr.w	r3, r3, #16
 800d8c6:	82bb      	strh	r3, [r7, #20]
        packetId = stateSelect( pMqttContext, searchStates, pCursor );
 800d8c8:	8abb      	ldrh	r3, [r7, #20]
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f7ff fcd8 	bl	800d284 <stateSelect>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	82fb      	strh	r3, [r7, #22]

        /* The state needs to be in #MQTTPubRelSend for sending PUBREL. */
        if( packetId != MQTT_PACKET_ID_INVALID )
 800d8d8:	8afb      	ldrh	r3, [r7, #22]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <MQTT_PubrelToResend+0x52>
        {
            *pState = MQTTPubRelSend;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	701a      	strb	r2, [r3, #0]
        }
    }

    return packetId;
 800d8e4:	8afb      	ldrh	r3, [r7, #22]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
	...

0800d8f0 <transport_recv>:
#define min(a,b) ((a) < (b) ? (a) : (b))

int32_t transport_recv( NetworkContext_t * pNetworkContext,
                        void * pBuffer,
                        size_t bytesToRecv )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
 800d8f6:	af02      	add	r7, sp, #8
 800d8f8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d8fc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d900:	6018      	str	r0, [r3, #0]
 800d902:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d906:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800d90a:	6019      	str	r1, [r3, #0]
 800d90c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d910:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800d914:	601a      	str	r2, [r3, #0]
    int32_t socketStatus = 1;
 800d916:	2301      	movs	r3, #1
 800d918:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t recvlen;
	uint8_t recvdata[1024];

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800d91c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d920:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	781a      	ldrb	r2, [r3, #0]
 800d928:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d92c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d930:	705a      	strb	r2, [r3, #1]
	conn.RemotePort = pNetworkContext->remote_port;
 800d932:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d936:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	88da      	ldrh	r2, [r3, #6]
 800d93e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d942:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d946:	805a      	strh	r2, [r3, #2]
	conn.LocalPort = 0;
 800d948:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d94c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d950:	2200      	movs	r2, #0
 800d952:	809a      	strh	r2, [r3, #4]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800d954:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d958:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d95c:	2200      	movs	r2, #0
 800d95e:	701a      	strb	r2, [r3, #0]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800d960:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d964:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	789a      	ldrb	r2, [r3, #2]
 800d96c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d970:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d974:	719a      	strb	r2, [r3, #6]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800d976:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d97a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	78da      	ldrb	r2, [r3, #3]
 800d982:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d986:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d98a:	71da      	strb	r2, [r3, #7]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800d98c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d990:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	791a      	ldrb	r2, [r3, #4]
 800d998:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d99c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d9a0:	721a      	strb	r2, [r3, #8]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800d9a2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9a6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	795a      	ldrb	r2, [r3, #5]
 800d9ae:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9b2:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800d9b6:	725a      	strb	r2, [r3, #9]

    if(!pNetworkContext->socket_open) {
 800d9b8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9bc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	785b      	ldrb	r3, [r3, #1]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d115      	bne.n	800d9f4 <transport_recv+0x104>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800d9c8:	f107 0314 	add.w	r3, r7, #20
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	482a      	ldr	r0, [pc, #168]	; (800da78 <transport_recv+0x188>)
 800d9d0:	f7fc fd0a 	bl	800a3e8 <ES_WIFI_StartClientConnection>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b

		if(ret!=ES_WIFI_STATUS_OK) {
 800d9da:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <transport_recv+0xf6>
			return 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e042      	b.n	800da6c <transport_recv+0x17c>
		} else {
			pNetworkContext->socket_open=1;
 800d9e6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9ea:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_ReceiveData(&EsWifiObj,pNetworkContext->socket, pBuffer, bytesToRecv, &recvlen, 1000);
 800d9f4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800d9f8:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	7819      	ldrb	r1, [r3, #0]
 800da00:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800da04:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	b298      	uxth	r0, r3
 800da0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800da10:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 800da14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da18:	9301      	str	r3, [sp, #4]
 800da1a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	4603      	mov	r3, r0
 800da22:	6812      	ldr	r2, [r2, #0]
 800da24:	4814      	ldr	r0, [pc, #80]	; (800da78 <transport_recv+0x188>)
 800da26:	f7fc fe85 	bl	800a734 <ES_WIFI_ReceiveData>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f887 342b 	strb.w	r3, [r7, #1067]	; 0x42b
	if(ret!=WIFI_STATUS_OK) {
 800da30:	f897 342b 	ldrb.w	r3, [r7, #1067]	; 0x42b
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00a      	beq.n	800da4e <transport_recv+0x15e>
		socketStatus=0;
 800da38:	2300      	movs	r3, #0
 800da3a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
		pNetworkContext->socket_open=0;
 800da3e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800da42:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2200      	movs	r2, #0
 800da4a:	705a      	strb	r2, [r3, #1]
 800da4c:	e00c      	b.n	800da68 <transport_recv+0x178>
	} else {
		//log_transport('R',pBuffer,recvlen);
		recvdata[recvlen]=0;
 800da4e:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800da52:	461a      	mov	r2, r3
 800da54:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800da58:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800da5c:	2100      	movs	r1, #0
 800da5e:	5499      	strb	r1, [r3, r2]
		socketStatus=recvlen;
 800da60:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 800da64:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	}

    return socketStatus;
 800da68:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	2000107c 	.word	0x2000107c

0800da7c <transport_send>:

int32_t transport_send( NetworkContext_t * pNetworkContext,
                        const void * pBuffer,
                        size_t bytesToSend )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08e      	sub	sp, #56	; 0x38
 800da80:	af02      	add	r7, sp, #8
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
    int32_t socketStatus=0;
 800da88:	2300      	movs	r3, #0
 800da8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t datasent;
    uint8_t ret;

    ES_WIFI_Conn_t conn;

	conn.Number = pNetworkContext->socket;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	757b      	strb	r3, [r7, #21]
	conn.RemotePort = pNetworkContext->remote_port;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	88db      	ldrh	r3, [r3, #6]
 800da96:	82fb      	strh	r3, [r7, #22]
	conn.LocalPort = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	833b      	strh	r3, [r7, #24]
	conn.Type = ES_WIFI_TCP_CONNECTION;
 800da9c:	2300      	movs	r3, #0
 800da9e:	753b      	strb	r3, [r7, #20]
	conn.RemoteIP[0] = pNetworkContext->ipaddr[0];
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	789b      	ldrb	r3, [r3, #2]
 800daa4:	76bb      	strb	r3, [r7, #26]
	conn.RemoteIP[1] = pNetworkContext->ipaddr[1];
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	78db      	ldrb	r3, [r3, #3]
 800daaa:	76fb      	strb	r3, [r7, #27]
	conn.RemoteIP[2] = pNetworkContext->ipaddr[2];
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	791b      	ldrb	r3, [r3, #4]
 800dab0:	773b      	strb	r3, [r7, #28]
	conn.RemoteIP[3] = pNetworkContext->ipaddr[3];
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	795b      	ldrb	r3, [r3, #5]
 800dab6:	777b      	strb	r3, [r7, #29]

    if(!pNetworkContext->socket_open) {
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d111      	bne.n	800dae4 <transport_send+0x68>
    	ret=ES_WIFI_StartClientConnection(&EsWifiObj, &conn);
 800dac0:	f107 0314 	add.w	r3, r7, #20
 800dac4:	4619      	mov	r1, r3
 800dac6:	481c      	ldr	r0, [pc, #112]	; (800db38 <transport_send+0xbc>)
 800dac8:	f7fc fc8e 	bl	800a3e8 <ES_WIFI_StartClientConnection>
 800dacc:	4603      	mov	r3, r0
 800dace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		if(ret!=ES_WIFI_STATUS_OK) {
 800dad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <transport_send+0x62>
			return 0;
 800dada:	2300      	movs	r3, #0
 800dadc:	e027      	b.n	800db2e <transport_send+0xb2>
		} else {
			pNetworkContext->socket_open=1;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	705a      	strb	r2, [r3, #1]
		}
    }

	ret=ES_WIFI_SendData(&EsWifiObj,pNetworkContext->socket,pBuffer,bytesToSend,&datasent,1000);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	7819      	ldrb	r1, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	b29a      	uxth	r2, r3
 800daec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800daf0:	9301      	str	r3, [sp, #4]
 800daf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4613      	mov	r3, r2
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	480e      	ldr	r0, [pc, #56]	; (800db38 <transport_send+0xbc>)
 800dafe:	f7fc fd5d 	bl	800a5bc <ES_WIFI_SendData>
 800db02:	4603      	mov	r3, r0
 800db04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	//log_transport('S',pBuffer,bytesToSend);
	if(ret!=ES_WIFI_STATUS_OK) {
 800db08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00a      	beq.n	800db26 <transport_send+0xaa>
		pNetworkContext->socket_open=0;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2200      	movs	r2, #0
 800db14:	705a      	strb	r2, [r3, #1]
		printf("Error in sending data: %d\n",ret);
 800db16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db1a:	4619      	mov	r1, r3
 800db1c:	4807      	ldr	r0, [pc, #28]	; (800db3c <transport_send+0xc0>)
 800db1e:	f003 ffdd 	bl	8011adc <iprintf>
		return 0;
 800db22:	2300      	movs	r3, #0
 800db24:	e003      	b.n	800db2e <transport_send+0xb2>
	} else {
		socketStatus=datasent;
 800db26:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800db2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

    return socketStatus;
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3730      	adds	r7, #48	; 0x30
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	2000107c 	.word	0x2000107c
 800db3c:	08016a7c 	.word	0x08016a7c

0800db40 <init_transport_from_socket>:

/* Populating the TransportInterface_t structure with the definitions above. */
void init_transport_from_socket( uint8_t tcpSocket, uint8_t socketOpen,
                                 NetworkContext_t * pNetworkContext,
                                 TransportInterface_t * pTransport )
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	60ba      	str	r2, [r7, #8]
 800db48:	607b      	str	r3, [r7, #4]
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
 800db4e:	460b      	mov	r3, r1
 800db50:	73bb      	strb	r3, [r7, #14]
    pNetworkContext->socket = tcpSocket;
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	7bfa      	ldrb	r2, [r7, #15]
 800db56:	701a      	strb	r2, [r3, #0]
    pNetworkContext->socket_open=socketOpen;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	7bba      	ldrb	r2, [r7, #14]
 800db5c:	705a      	strb	r2, [r3, #1]
    pTransport->recv = transport_recv;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a08      	ldr	r2, [pc, #32]	; (800db84 <init_transport_from_socket+0x44>)
 800db62:	601a      	str	r2, [r3, #0]
    pTransport->send = transport_send;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a08      	ldr	r2, [pc, #32]	; (800db88 <init_transport_from_socket+0x48>)
 800db68:	605a      	str	r2, [r3, #4]
    // We don't implement transport vector function
    pTransport->writev=NULL;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	609a      	str	r2, [r3, #8]
    pTransport->pNetworkContext = pNetworkContext;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	60da      	str	r2, [r3, #12]
}
 800db76:	bf00      	nop
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	0800d8f1 	.word	0x0800d8f1
 800db88:	0800da7d 	.word	0x0800da7d

0800db8c <__NVIC_SetPriority>:
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	6039      	str	r1, [r7, #0]
 800db96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	db0a      	blt.n	800dbb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	490c      	ldr	r1, [pc, #48]	; (800dbd8 <__NVIC_SetPriority+0x4c>)
 800dba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbaa:	0112      	lsls	r2, r2, #4
 800dbac:	b2d2      	uxtb	r2, r2
 800dbae:	440b      	add	r3, r1
 800dbb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dbb4:	e00a      	b.n	800dbcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	4908      	ldr	r1, [pc, #32]	; (800dbdc <__NVIC_SetPriority+0x50>)
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	f003 030f 	and.w	r3, r3, #15
 800dbc2:	3b04      	subs	r3, #4
 800dbc4:	0112      	lsls	r2, r2, #4
 800dbc6:	b2d2      	uxtb	r2, r2
 800dbc8:	440b      	add	r3, r1
 800dbca:	761a      	strb	r2, [r3, #24]
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	e000e100 	.word	0xe000e100
 800dbdc:	e000ed00 	.word	0xe000ed00

0800dbe0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	f06f 0004 	mvn.w	r0, #4
 800dbea:	f7ff ffcf 	bl	800db8c <__NVIC_SetPriority>
#endif
}
 800dbee:	bf00      	nop
 800dbf0:	bd80      	pop	{r7, pc}
	...

0800dbf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbfa:	f3ef 8305 	mrs	r3, IPSR
 800dbfe:	603b      	str	r3, [r7, #0]
  return(result);
 800dc00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d003      	beq.n	800dc0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc06:	f06f 0305 	mvn.w	r3, #5
 800dc0a:	607b      	str	r3, [r7, #4]
 800dc0c:	e00c      	b.n	800dc28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc0e:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <osKernelInitialize+0x44>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d105      	bne.n	800dc22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc16:	4b08      	ldr	r3, [pc, #32]	; (800dc38 <osKernelInitialize+0x44>)
 800dc18:	2201      	movs	r2, #1
 800dc1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	607b      	str	r3, [r7, #4]
 800dc20:	e002      	b.n	800dc28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295
 800dc26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc28:	687b      	ldr	r3, [r7, #4]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	2000197c 	.word	0x2000197c

0800dc3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc42:	f3ef 8305 	mrs	r3, IPSR
 800dc46:	603b      	str	r3, [r7, #0]
  return(result);
 800dc48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc4e:	f06f 0305 	mvn.w	r3, #5
 800dc52:	607b      	str	r3, [r7, #4]
 800dc54:	e010      	b.n	800dc78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc56:	4b0b      	ldr	r3, [pc, #44]	; (800dc84 <osKernelStart+0x48>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d109      	bne.n	800dc72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc5e:	f7ff ffbf 	bl	800dbe0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc62:	4b08      	ldr	r3, [pc, #32]	; (800dc84 <osKernelStart+0x48>)
 800dc64:	2202      	movs	r2, #2
 800dc66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc68:	f001 f934 	bl	800eed4 <vTaskStartScheduler>
      stat = osOK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	607b      	str	r3, [r7, #4]
 800dc70:	e002      	b.n	800dc78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc72:	f04f 33ff 	mov.w	r3, #4294967295
 800dc76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc78:	687b      	ldr	r3, [r7, #4]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	2000197c 	.word	0x2000197c

0800dc88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08e      	sub	sp, #56	; 0x38
 800dc8c:	af04      	add	r7, sp, #16
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc94:	2300      	movs	r3, #0
 800dc96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc98:	f3ef 8305 	mrs	r3, IPSR
 800dc9c:	617b      	str	r3, [r7, #20]
  return(result);
 800dc9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d17e      	bne.n	800dda2 <osThreadNew+0x11a>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d07b      	beq.n	800dda2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dcaa:	2380      	movs	r3, #128	; 0x80
 800dcac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dcae:	2318      	movs	r3, #24
 800dcb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d045      	beq.n	800dd4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <osThreadNew+0x48>
        name = attr->name;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	699b      	ldr	r3, [r3, #24]
 800dcdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d008      	beq.n	800dcf6 <osThreadNew+0x6e>
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	2b38      	cmp	r3, #56	; 0x38
 800dce8:	d805      	bhi.n	800dcf6 <osThreadNew+0x6e>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <osThreadNew+0x72>
        return (NULL);
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e054      	b.n	800dda4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	695b      	ldr	r3, [r3, #20]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	695b      	ldr	r3, [r3, #20]
 800dd06:	089b      	lsrs	r3, r3, #2
 800dd08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00e      	beq.n	800dd30 <osThreadNew+0xa8>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	2b5b      	cmp	r3, #91	; 0x5b
 800dd18:	d90a      	bls.n	800dd30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d006      	beq.n	800dd30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <osThreadNew+0xa8>
        mem = 1;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	61bb      	str	r3, [r7, #24]
 800dd2e:	e010      	b.n	800dd52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10c      	bne.n	800dd52 <osThreadNew+0xca>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d108      	bne.n	800dd52 <osThreadNew+0xca>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d104      	bne.n	800dd52 <osThreadNew+0xca>
          mem = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	61bb      	str	r3, [r7, #24]
 800dd4c:	e001      	b.n	800dd52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d110      	bne.n	800dd7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd60:	9202      	str	r2, [sp, #8]
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	6a3a      	ldr	r2, [r7, #32]
 800dd6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f000 feda 	bl	800eb28 <xTaskCreateStatic>
 800dd74:	4603      	mov	r3, r0
 800dd76:	613b      	str	r3, [r7, #16]
 800dd78:	e013      	b.n	800dda2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d110      	bne.n	800dda2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	f107 0310 	add.w	r3, r7, #16
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f000 ff25 	bl	800ebe2 <xTaskCreate>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d001      	beq.n	800dda2 <osThreadNew+0x11a>
            hTask = NULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dda2:	693b      	ldr	r3, [r7, #16]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3728      	adds	r7, #40	; 0x28
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af02      	add	r7, sp, #8
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <osThreadFlagsSet+0x1a>
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	da03      	bge.n	800ddce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ddc6:	f06f 0303 	mvn.w	r3, #3
 800ddca:	60fb      	str	r3, [r7, #12]
 800ddcc:	e035      	b.n	800de3a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ddce:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddd4:	f3ef 8305 	mrs	r3, IPSR
 800ddd8:	613b      	str	r3, [r7, #16]
  return(result);
 800ddda:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d01f      	beq.n	800de20 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dde4:	f107 0308 	add.w	r3, r7, #8
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	2300      	movs	r3, #0
 800ddec:	2201      	movs	r2, #1
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6978      	ldr	r0, [r7, #20]
 800ddf2:	f001 fe55 	bl	800faa0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ddf6:	f107 030c 	add.w	r3, r7, #12
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	9200      	str	r2, [sp, #0]
 800ddfe:	2200      	movs	r2, #0
 800de00:	2100      	movs	r1, #0
 800de02:	6978      	ldr	r0, [r7, #20]
 800de04:	f001 fe4c 	bl	800faa0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d015      	beq.n	800de3a <osThreadFlagsSet+0x8e>
 800de0e:	4b0d      	ldr	r3, [pc, #52]	; (800de44 <osThreadFlagsSet+0x98>)
 800de10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	e00c      	b.n	800de3a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800de20:	2300      	movs	r3, #0
 800de22:	2201      	movs	r2, #1
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6978      	ldr	r0, [r7, #20]
 800de28:	f001 fd82 	bl	800f930 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800de2c:	f107 030c 	add.w	r3, r7, #12
 800de30:	2200      	movs	r2, #0
 800de32:	2100      	movs	r1, #0
 800de34:	6978      	ldr	r0, [r7, #20]
 800de36:	f001 fd7b 	bl	800f930 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800de3a:	68fb      	ldr	r3, [r7, #12]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	e000ed04 	.word	0xe000ed04

0800de48 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800de48:	b580      	push	{r7, lr}
 800de4a:	b08c      	sub	sp, #48	; 0x30
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de54:	f3ef 8305 	mrs	r3, IPSR
 800de58:	617b      	str	r3, [r7, #20]
  return(result);
 800de5a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d003      	beq.n	800de68 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800de60:	f06f 0305 	mvn.w	r3, #5
 800de64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de66:	e06b      	b.n	800df40 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	da03      	bge.n	800de76 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800de6e:	f06f 0303 	mvn.w	r3, #3
 800de72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de74:	e064      	b.n	800df40 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	f003 0302 	and.w	r3, r3, #2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800de80:	2300      	movs	r3, #0
 800de82:	62bb      	str	r3, [r7, #40]	; 0x28
 800de84:	e001      	b.n	800de8a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800de8a:	2300      	movs	r3, #0
 800de8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800de92:	f001 f931 	bl	800f0f8 <xTaskGetTickCount>
 800de96:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800de98:	f107 0210 	add.w	r2, r7, #16
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dea0:	2000      	movs	r0, #0
 800dea2:	f001 fceb 	bl	800f87c <xTaskNotifyWait>
 800dea6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d137      	bne.n	800df1e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800deae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	4013      	ands	r3, r2
 800deb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deba:	4313      	orrs	r3, r2
 800debc:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00c      	beq.n	800dee2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800decc:	4013      	ands	r3, r2
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d032      	beq.n	800df3a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10f      	bne.n	800defa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800deda:	f06f 0302 	mvn.w	r3, #2
 800dede:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800dee0:	e02e      	b.n	800df40 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee6:	4013      	ands	r3, r2
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d128      	bne.n	800df3e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d103      	bne.n	800defa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800def2:	f06f 0302 	mvn.w	r3, #2
 800def6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800def8:	e022      	b.n	800df40 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800defa:	f001 f8fd 	bl	800f0f8 <xTaskGetTickCount>
 800defe:	4602      	mov	r2, r0
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	1ad3      	subs	r3, r2, r3
 800df04:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800df06:	69ba      	ldr	r2, [r7, #24]
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d902      	bls.n	800df14 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	627b      	str	r3, [r7, #36]	; 0x24
 800df12:	e00e      	b.n	800df32 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800df14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24
 800df1c:	e009      	b.n	800df32 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d103      	bne.n	800df2c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800df24:	f06f 0302 	mvn.w	r3, #2
 800df28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df2a:	e002      	b.n	800df32 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800df2c:	f06f 0301 	mvn.w	r3, #1
 800df30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1af      	bne.n	800de98 <osThreadFlagsWait+0x50>
 800df38:	e002      	b.n	800df40 <osThreadFlagsWait+0xf8>
            break;
 800df3a:	bf00      	nop
 800df3c:	e000      	b.n	800df40 <osThreadFlagsWait+0xf8>
            break;
 800df3e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800df42:	4618      	mov	r0, r3
 800df44:	3730      	adds	r7, #48	; 0x30
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df52:	f3ef 8305 	mrs	r3, IPSR
 800df56:	60bb      	str	r3, [r7, #8]
  return(result);
 800df58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d003      	beq.n	800df66 <osDelay+0x1c>
    stat = osErrorISR;
 800df5e:	f06f 0305 	mvn.w	r3, #5
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	e007      	b.n	800df76 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800df66:	2300      	movs	r3, #0
 800df68:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <osDelay+0x2c>
      vTaskDelay(ticks);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 ff7b 	bl	800ee6c <vTaskDelay>
    }
  }

  return (stat);
 800df76:	68fb      	ldr	r3, [r7, #12]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4a07      	ldr	r2, [pc, #28]	; (800dfac <vApplicationGetIdleTaskMemory+0x2c>)
 800df90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	4a06      	ldr	r2, [pc, #24]	; (800dfb0 <vApplicationGetIdleTaskMemory+0x30>)
 800df96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2280      	movs	r2, #128	; 0x80
 800df9c:	601a      	str	r2, [r3, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20001980 	.word	0x20001980
 800dfb0:	200019dc 	.word	0x200019dc

0800dfb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4a07      	ldr	r2, [pc, #28]	; (800dfe0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dfc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	4a06      	ldr	r2, [pc, #24]	; (800dfe4 <vApplicationGetTimerTaskMemory+0x30>)
 800dfca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfd2:	601a      	str	r2, [r3, #0]
}
 800dfd4:	bf00      	nop
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	20001bdc 	.word	0x20001bdc
 800dfe4:	20001c38 	.word	0x20001c38

0800dfe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f103 0208 	add.w	r2, r3, #8
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f04f 32ff 	mov.w	r2, #4294967295
 800e000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f103 0208 	add.w	r2, r3, #8
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f103 0208 	add.w	r2, r3, #8
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e01c:	bf00      	nop
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2200      	movs	r2, #0
 800e034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e042:	b480      	push	{r7}
 800e044:	b085      	sub	sp, #20
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	689a      	ldr	r2, [r3, #8]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	601a      	str	r2, [r3, #0]
}
 800e07e:	bf00      	nop
 800e080:	3714      	adds	r7, #20
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e08a:	b480      	push	{r7}
 800e08c:	b085      	sub	sp, #20
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a0:	d103      	bne.n	800e0aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	e00c      	b.n	800e0c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	e002      	b.n	800e0b8 <vListInsert+0x2e>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	60fb      	str	r3, [r7, #12]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d2f6      	bcs.n	800e0b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
}
 800e0f0:	bf00      	nop
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	6892      	ldr	r2, [r2, #8]
 800e112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	6852      	ldr	r2, [r2, #4]
 800e11c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	429a      	cmp	r2, r3
 800e126:	d103      	bne.n	800e130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689a      	ldr	r2, [r3, #8]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	1e5a      	subs	r2, r3, #1
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <xQueueGenericReset+0x2a>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	60bb      	str	r3, [r7, #8]
}
 800e176:	bf00      	nop
 800e178:	e7fe      	b.n	800e178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e17a:	f002 fa3b 	bl	80105f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e186:	68f9      	ldr	r1, [r7, #12]
 800e188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e18a:	fb01 f303 	mul.w	r3, r1, r3
 800e18e:	441a      	add	r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e1b0:	fb01 f303 	mul.w	r3, r1, r3
 800e1b4:	441a      	add	r2, r3
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	22ff      	movs	r2, #255	; 0xff
 800e1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	22ff      	movs	r2, #255	; 0xff
 800e1c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d114      	bne.n	800e1fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d01a      	beq.n	800e20e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3310      	adds	r3, #16
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f001 f903 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d012      	beq.n	800e20e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e1e8:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <xQueueGenericReset+0xcc>)
 800e1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	e009      	b.n	800e20e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3310      	adds	r3, #16
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff fef2 	bl	800dfe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	3324      	adds	r3, #36	; 0x24
 800e208:	4618      	mov	r0, r3
 800e20a:	f7ff feed 	bl	800dfe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e20e:	f002 fa21 	bl	8010654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e212:	2301      	movs	r3, #1
}
 800e214:	4618      	mov	r0, r3
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08e      	sub	sp, #56	; 0x38
 800e224:	af02      	add	r7, sp, #8
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10a      	bne.n	800e24a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10a      	bne.n	800e266 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e262:	bf00      	nop
 800e264:	e7fe      	b.n	800e264 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <xQueueGenericCreateStatic+0x52>
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d001      	beq.n	800e276 <xQueueGenericCreateStatic+0x56>
 800e272:	2301      	movs	r3, #1
 800e274:	e000      	b.n	800e278 <xQueueGenericCreateStatic+0x58>
 800e276:	2300      	movs	r3, #0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	623b      	str	r3, [r7, #32]
}
 800e28e:	bf00      	nop
 800e290:	e7fe      	b.n	800e290 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <xQueueGenericCreateStatic+0x7e>
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d101      	bne.n	800e2a2 <xQueueGenericCreateStatic+0x82>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e000      	b.n	800e2a4 <xQueueGenericCreateStatic+0x84>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10a      	bne.n	800e2be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ac:	f383 8811 	msr	BASEPRI, r3
 800e2b0:	f3bf 8f6f 	isb	sy
 800e2b4:	f3bf 8f4f 	dsb	sy
 800e2b8:	61fb      	str	r3, [r7, #28]
}
 800e2ba:	bf00      	nop
 800e2bc:	e7fe      	b.n	800e2bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e2be:	2350      	movs	r3, #80	; 0x50
 800e2c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b50      	cmp	r3, #80	; 0x50
 800e2c6:	d00a      	beq.n	800e2de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	61bb      	str	r3, [r7, #24]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e2de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00d      	beq.n	800e306 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f000 f805 	bl	800e310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e308:	4618      	mov	r0, r3
 800e30a:	3730      	adds	r7, #48	; 0x30
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	601a      	str	r2, [r3, #0]
 800e32a:	e002      	b.n	800e332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e33e:	2101      	movs	r1, #1
 800e340:	69b8      	ldr	r0, [r7, #24]
 800e342:	f7ff ff05 	bl	800e150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	78fa      	ldrb	r2, [r7, #3]
 800e34a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e34e:	bf00      	nop
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08e      	sub	sp, #56	; 0x38
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e366:	2300      	movs	r3, #0
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10a      	bne.n	800e38a <xQueueGenericSend+0x32>
	__asm volatile
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e386:	bf00      	nop
 800e388:	e7fe      	b.n	800e388 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d103      	bne.n	800e398 <xQueueGenericSend+0x40>
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <xQueueGenericSend+0x44>
 800e398:	2301      	movs	r3, #1
 800e39a:	e000      	b.n	800e39e <xQueueGenericSend+0x46>
 800e39c:	2300      	movs	r3, #0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10a      	bne.n	800e3b8 <xQueueGenericSend+0x60>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3b4:	bf00      	nop
 800e3b6:	e7fe      	b.n	800e3b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d103      	bne.n	800e3c6 <xQueueGenericSend+0x6e>
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d101      	bne.n	800e3ca <xQueueGenericSend+0x72>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e000      	b.n	800e3cc <xQueueGenericSend+0x74>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	623b      	str	r3, [r7, #32]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3e6:	f001 f9bd 	bl	800f764 <xTaskGetSchedulerState>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <xQueueGenericSend+0x9e>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <xQueueGenericSend+0xa2>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <xQueueGenericSend+0xa4>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10a      	bne.n	800e416 <xQueueGenericSend+0xbe>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	61fb      	str	r3, [r7, #28]
}
 800e412:	bf00      	nop
 800e414:	e7fe      	b.n	800e414 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e416:	f002 f8ed 	bl	80105f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e422:	429a      	cmp	r2, r3
 800e424:	d302      	bcc.n	800e42c <xQueueGenericSend+0xd4>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d129      	bne.n	800e480 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	68b9      	ldr	r1, [r7, #8]
 800e430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e432:	f000 fa0b 	bl	800e84c <prvCopyDataToQueue>
 800e436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d010      	beq.n	800e462 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	3324      	adds	r3, #36	; 0x24
 800e444:	4618      	mov	r0, r3
 800e446:	f000 ffcf 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d013      	beq.n	800e478 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e450:	4b3f      	ldr	r3, [pc, #252]	; (800e550 <xQueueGenericSend+0x1f8>)
 800e452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	f3bf 8f6f 	isb	sy
 800e460:	e00a      	b.n	800e478 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	2b00      	cmp	r3, #0
 800e466:	d007      	beq.n	800e478 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e468:	4b39      	ldr	r3, [pc, #228]	; (800e550 <xQueueGenericSend+0x1f8>)
 800e46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e46e:	601a      	str	r2, [r3, #0]
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e478:	f002 f8ec 	bl	8010654 <vPortExitCritical>
				return pdPASS;
 800e47c:	2301      	movs	r3, #1
 800e47e:	e063      	b.n	800e548 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d103      	bne.n	800e48e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e486:	f002 f8e5 	bl	8010654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	e05c      	b.n	800e548 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e490:	2b00      	cmp	r3, #0
 800e492:	d106      	bne.n	800e4a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e494:	f107 0314 	add.w	r3, r7, #20
 800e498:	4618      	mov	r0, r3
 800e49a:	f001 f809 	bl	800f4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4a2:	f002 f8d7 	bl	8010654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4a6:	f000 fd7b 	bl	800efa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4aa:	f002 f8a3 	bl	80105f4 <vPortEnterCritical>
 800e4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4b4:	b25b      	sxtb	r3, r3
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ba:	d103      	bne.n	800e4c4 <xQueueGenericSend+0x16c>
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4ca:	b25b      	sxtb	r3, r3
 800e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d0:	d103      	bne.n	800e4da <xQueueGenericSend+0x182>
 800e4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4da:	f002 f8bb 	bl	8010654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4de:	1d3a      	adds	r2, r7, #4
 800e4e0:	f107 0314 	add.w	r3, r7, #20
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f000 fff8 	bl	800f4dc <xTaskCheckForTimeOut>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d124      	bne.n	800e53c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e4f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4f4:	f000 faa2 	bl	800ea3c <prvIsQueueFull>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d018      	beq.n	800e530 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e500:	3310      	adds	r3, #16
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	4611      	mov	r1, r2
 800e506:	4618      	mov	r0, r3
 800e508:	f000 ff1e 	bl	800f348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e50e:	f000 fa2d 	bl	800e96c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e512:	f000 fd53 	bl	800efbc <xTaskResumeAll>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f47f af7c 	bne.w	800e416 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e51e:	4b0c      	ldr	r3, [pc, #48]	; (800e550 <xQueueGenericSend+0x1f8>)
 800e520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e524:	601a      	str	r2, [r3, #0]
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	f3bf 8f6f 	isb	sy
 800e52e:	e772      	b.n	800e416 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e532:	f000 fa1b 	bl	800e96c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e536:	f000 fd41 	bl	800efbc <xTaskResumeAll>
 800e53a:	e76c      	b.n	800e416 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e53e:	f000 fa15 	bl	800e96c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e542:	f000 fd3b 	bl	800efbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3738      	adds	r7, #56	; 0x38
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	e000ed04 	.word	0xe000ed04

0800e554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b090      	sub	sp, #64	; 0x40
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
 800e560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10a      	bne.n	800e582 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e570:	f383 8811 	msr	BASEPRI, r3
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e57e:	bf00      	nop
 800e580:	e7fe      	b.n	800e580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d103      	bne.n	800e590 <xQueueGenericSendFromISR+0x3c>
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <xQueueGenericSendFromISR+0x40>
 800e590:	2301      	movs	r3, #1
 800e592:	e000      	b.n	800e596 <xQueueGenericSendFromISR+0x42>
 800e594:	2300      	movs	r3, #0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d10a      	bne.n	800e5b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	d103      	bne.n	800e5be <xQueueGenericSendFromISR+0x6a>
 800e5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d101      	bne.n	800e5c2 <xQueueGenericSendFromISR+0x6e>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e000      	b.n	800e5c4 <xQueueGenericSendFromISR+0x70>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10a      	bne.n	800e5de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 800e5d0:	f3bf 8f6f 	isb	sy
 800e5d4:	f3bf 8f4f 	dsb	sy
 800e5d8:	623b      	str	r3, [r7, #32]
}
 800e5da:	bf00      	nop
 800e5dc:	e7fe      	b.n	800e5dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5de:	f002 f8eb 	bl	80107b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e5e2:	f3ef 8211 	mrs	r2, BASEPRI
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	61fa      	str	r2, [r7, #28]
 800e5f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e606:	429a      	cmp	r2, r3
 800e608:	d302      	bcc.n	800e610 <xQueueGenericSendFromISR+0xbc>
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d12f      	bne.n	800e670 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	68b9      	ldr	r1, [r7, #8]
 800e624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e626:	f000 f911 	bl	800e84c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e62a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e632:	d112      	bne.n	800e65a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d016      	beq.n	800e66a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	3324      	adds	r3, #36	; 0x24
 800e640:	4618      	mov	r0, r3
 800e642:	f000 fed1 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00e      	beq.n	800e66a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00b      	beq.n	800e66a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2201      	movs	r2, #1
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	e007      	b.n	800e66a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e65a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e65e:	3301      	adds	r3, #1
 800e660:	b2db      	uxtb	r3, r3
 800e662:	b25a      	sxtb	r2, r3
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e66a:	2301      	movs	r3, #1
 800e66c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e66e:	e001      	b.n	800e674 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e670:	2300      	movs	r3, #0
 800e672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e676:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e67e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e682:	4618      	mov	r0, r3
 800e684:	3740      	adds	r7, #64	; 0x40
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b08c      	sub	sp, #48	; 0x30
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e698:	2300      	movs	r3, #0
 800e69a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10a      	bne.n	800e6bc <xQueueReceive+0x30>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	623b      	str	r3, [r7, #32]
}
 800e6b8:	bf00      	nop
 800e6ba:	e7fe      	b.n	800e6ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d103      	bne.n	800e6ca <xQueueReceive+0x3e>
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d101      	bne.n	800e6ce <xQueueReceive+0x42>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e000      	b.n	800e6d0 <xQueueReceive+0x44>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10a      	bne.n	800e6ea <xQueueReceive+0x5e>
	__asm volatile
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	61fb      	str	r3, [r7, #28]
}
 800e6e6:	bf00      	nop
 800e6e8:	e7fe      	b.n	800e6e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6ea:	f001 f83b 	bl	800f764 <xTaskGetSchedulerState>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <xQueueReceive+0x6e>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d101      	bne.n	800e6fe <xQueueReceive+0x72>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e000      	b.n	800e700 <xQueueReceive+0x74>
 800e6fe:	2300      	movs	r3, #0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xQueueReceive+0x8e>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	61bb      	str	r3, [r7, #24]
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e71a:	f001 ff6b 	bl	80105f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e722:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	2b00      	cmp	r3, #0
 800e728:	d01f      	beq.n	800e76a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e72a:	68b9      	ldr	r1, [r7, #8]
 800e72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e72e:	f000 f8f7 	bl	800e920 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	1e5a      	subs	r2, r3, #1
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00f      	beq.n	800e762 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e744:	3310      	adds	r3, #16
 800e746:	4618      	mov	r0, r3
 800e748:	f000 fe4e 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d007      	beq.n	800e762 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e752:	4b3d      	ldr	r3, [pc, #244]	; (800e848 <xQueueReceive+0x1bc>)
 800e754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e762:	f001 ff77 	bl	8010654 <vPortExitCritical>
				return pdPASS;
 800e766:	2301      	movs	r3, #1
 800e768:	e069      	b.n	800e83e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d103      	bne.n	800e778 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e770:	f001 ff70 	bl	8010654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e774:	2300      	movs	r3, #0
 800e776:	e062      	b.n	800e83e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e77e:	f107 0310 	add.w	r3, r7, #16
 800e782:	4618      	mov	r0, r3
 800e784:	f000 fe94 	bl	800f4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e788:	2301      	movs	r3, #1
 800e78a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e78c:	f001 ff62 	bl	8010654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e790:	f000 fc06 	bl	800efa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e794:	f001 ff2e 	bl	80105f4 <vPortEnterCritical>
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e79e:	b25b      	sxtb	r3, r3
 800e7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a4:	d103      	bne.n	800e7ae <xQueueReceive+0x122>
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7b4:	b25b      	sxtb	r3, r3
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d103      	bne.n	800e7c4 <xQueueReceive+0x138>
 800e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7c4:	f001 ff46 	bl	8010654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7c8:	1d3a      	adds	r2, r7, #4
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f000 fe83 	bl	800f4dc <xTaskCheckForTimeOut>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d123      	bne.n	800e824 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7de:	f000 f917 	bl	800ea10 <prvIsQueueEmpty>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d017      	beq.n	800e818 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	3324      	adds	r3, #36	; 0x24
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	4611      	mov	r1, r2
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f000 fda9 	bl	800f348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7f8:	f000 f8b8 	bl	800e96c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7fc:	f000 fbde 	bl	800efbc <xTaskResumeAll>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d189      	bne.n	800e71a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e806:	4b10      	ldr	r3, [pc, #64]	; (800e848 <xQueueReceive+0x1bc>)
 800e808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e80c:	601a      	str	r2, [r3, #0]
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	e780      	b.n	800e71a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e81a:	f000 f8a7 	bl	800e96c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e81e:	f000 fbcd 	bl	800efbc <xTaskResumeAll>
 800e822:	e77a      	b.n	800e71a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e826:	f000 f8a1 	bl	800e96c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e82a:	f000 fbc7 	bl	800efbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e830:	f000 f8ee 	bl	800ea10 <prvIsQueueEmpty>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	f43f af6f 	beq.w	800e71a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e83c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3730      	adds	r7, #48	; 0x30
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	e000ed04 	.word	0xe000ed04

0800e84c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e858:	2300      	movs	r3, #0
 800e85a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e860:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10d      	bne.n	800e886 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d14d      	bne.n	800e90e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	4618      	mov	r0, r3
 800e878:	f000 ff92 	bl	800f7a0 <xTaskPriorityDisinherit>
 800e87c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2200      	movs	r2, #0
 800e882:	609a      	str	r2, [r3, #8]
 800e884:	e043      	b.n	800e90e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d119      	bne.n	800e8c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6858      	ldr	r0, [r3, #4]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e894:	461a      	mov	r2, r3
 800e896:	68b9      	ldr	r1, [r7, #8]
 800e898:	f003 fbfb 	bl	8012092 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a4:	441a      	add	r2, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	685a      	ldr	r2, [r3, #4]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d32b      	bcc.n	800e90e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	605a      	str	r2, [r3, #4]
 800e8be:	e026      	b.n	800e90e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	68d8      	ldr	r0, [r3, #12]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	68b9      	ldr	r1, [r7, #8]
 800e8cc:	f003 fbe1 	bl	8012092 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d8:	425b      	negs	r3, r3
 800e8da:	441a      	add	r2, r3
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d207      	bcs.n	800e8fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	689a      	ldr	r2, [r3, #8]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f4:	425b      	negs	r3, r3
 800e8f6:	441a      	add	r2, r3
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d105      	bne.n	800e90e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	1c5a      	adds	r2, r3, #1
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e916:	697b      	ldr	r3, [r7, #20]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d018      	beq.n	800e964 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e93a:	441a      	add	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68da      	ldr	r2, [r3, #12]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d303      	bcc.n	800e954 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	68d9      	ldr	r1, [r3, #12]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95c:	461a      	mov	r2, r3
 800e95e:	6838      	ldr	r0, [r7, #0]
 800e960:	f003 fb97 	bl	8012092 <memcpy>
	}
}
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e974:	f001 fe3e 	bl	80105f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e97e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e980:	e011      	b.n	800e9a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	2b00      	cmp	r3, #0
 800e988:	d012      	beq.n	800e9b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	3324      	adds	r3, #36	; 0x24
 800e98e:	4618      	mov	r0, r3
 800e990:	f000 fd2a 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e99a:	f000 fe01 	bl	800f5a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e99e:	7bfb      	ldrb	r3, [r7, #15]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	dce9      	bgt.n	800e982 <prvUnlockQueue+0x16>
 800e9ae:	e000      	b.n	800e9b2 <prvUnlockQueue+0x46>
					break;
 800e9b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	22ff      	movs	r2, #255	; 0xff
 800e9b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e9ba:	f001 fe4b 	bl	8010654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9be:	f001 fe19 	bl	80105f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9ca:	e011      	b.n	800e9f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d012      	beq.n	800e9fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3310      	adds	r3, #16
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f000 fd05 	bl	800f3e8 <xTaskRemoveFromEventList>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e9e4:	f000 fddc 	bl	800f5a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e9e8:	7bbb      	ldrb	r3, [r7, #14]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dce9      	bgt.n	800e9cc <prvUnlockQueue+0x60>
 800e9f8:	e000      	b.n	800e9fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e9fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	22ff      	movs	r2, #255	; 0xff
 800ea00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea04:	f001 fe26 	bl	8010654 <vPortExitCritical>
}
 800ea08:	bf00      	nop
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea18:	f001 fdec 	bl	80105f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d102      	bne.n	800ea2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea24:	2301      	movs	r3, #1
 800ea26:	60fb      	str	r3, [r7, #12]
 800ea28:	e001      	b.n	800ea2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea2e:	f001 fe11 	bl	8010654 <vPortExitCritical>

	return xReturn;
 800ea32:	68fb      	ldr	r3, [r7, #12]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea44:	f001 fdd6 	bl	80105f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d102      	bne.n	800ea5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea54:	2301      	movs	r3, #1
 800ea56:	60fb      	str	r3, [r7, #12]
 800ea58:	e001      	b.n	800ea5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea5e:	f001 fdf9 	bl	8010654 <vPortExitCritical>

	return xReturn;
 800ea62:	68fb      	ldr	r3, [r7, #12]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	e014      	b.n	800eaa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ea7c:	4a0f      	ldr	r2, [pc, #60]	; (800eabc <vQueueAddToRegistry+0x50>)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d10b      	bne.n	800eaa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ea88:	490c      	ldr	r1, [pc, #48]	; (800eabc <vQueueAddToRegistry+0x50>)
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	683a      	ldr	r2, [r7, #0]
 800ea8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ea92:	4a0a      	ldr	r2, [pc, #40]	; (800eabc <vQueueAddToRegistry+0x50>)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	00db      	lsls	r3, r3, #3
 800ea98:	4413      	add	r3, r2
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ea9e:	e006      	b.n	800eaae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	60fb      	str	r3, [r7, #12]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b07      	cmp	r3, #7
 800eaaa:	d9e7      	bls.n	800ea7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eaac:	bf00      	nop
 800eaae:	bf00      	nop
 800eab0:	3714      	adds	r7, #20
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20002038 	.word	0x20002038

0800eac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ead0:	f001 fd90 	bl	80105f4 <vPortEnterCritical>
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eada:	b25b      	sxtb	r3, r3
 800eadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae0:	d103      	bne.n	800eaea <vQueueWaitForMessageRestricted+0x2a>
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eaf0:	b25b      	sxtb	r3, r3
 800eaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf6:	d103      	bne.n	800eb00 <vQueueWaitForMessageRestricted+0x40>
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb00:	f001 fda8 	bl	8010654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	3324      	adds	r3, #36	; 0x24
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	68b9      	ldr	r1, [r7, #8]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f000 fc3b 	bl	800f390 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb1a:	6978      	ldr	r0, [r7, #20]
 800eb1c:	f7ff ff26 	bl	800e96c <prvUnlockQueue>
	}
 800eb20:	bf00      	nop
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08e      	sub	sp, #56	; 0x38
 800eb2c:	af04      	add	r7, sp, #16
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d10a      	bne.n	800eb52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	623b      	str	r3, [r7, #32]
}
 800eb4e:	bf00      	nop
 800eb50:	e7fe      	b.n	800eb50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d10a      	bne.n	800eb6e <xTaskCreateStatic+0x46>
	__asm volatile
 800eb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5c:	f383 8811 	msr	BASEPRI, r3
 800eb60:	f3bf 8f6f 	isb	sy
 800eb64:	f3bf 8f4f 	dsb	sy
 800eb68:	61fb      	str	r3, [r7, #28]
}
 800eb6a:	bf00      	nop
 800eb6c:	e7fe      	b.n	800eb6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb6e:	235c      	movs	r3, #92	; 0x5c
 800eb70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	2b5c      	cmp	r3, #92	; 0x5c
 800eb76:	d00a      	beq.n	800eb8e <xTaskCreateStatic+0x66>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	61bb      	str	r3, [r7, #24]
}
 800eb8a:	bf00      	nop
 800eb8c:	e7fe      	b.n	800eb8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eb8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d01e      	beq.n	800ebd4 <xTaskCreateStatic+0xac>
 800eb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d01b      	beq.n	800ebd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eba4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	2202      	movs	r2, #2
 800ebaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebae:	2300      	movs	r3, #0
 800ebb0:	9303      	str	r3, [sp, #12]
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb4:	9302      	str	r3, [sp, #8]
 800ebb6:	f107 0314 	add.w	r3, r7, #20
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	68b9      	ldr	r1, [r7, #8]
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f000 f850 	bl	800ec6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebce:	f000 f8dd 	bl	800ed8c <prvAddNewTaskToReadyList>
 800ebd2:	e001      	b.n	800ebd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ebd8:	697b      	ldr	r3, [r7, #20]
	}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3728      	adds	r7, #40	; 0x28
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b08c      	sub	sp, #48	; 0x30
 800ebe6:	af04      	add	r7, sp, #16
 800ebe8:	60f8      	str	r0, [r7, #12]
 800ebea:	60b9      	str	r1, [r7, #8]
 800ebec:	603b      	str	r3, [r7, #0]
 800ebee:	4613      	mov	r3, r2
 800ebf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ebf2:	88fb      	ldrh	r3, [r7, #6]
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f001 fe1e 	bl	8010838 <pvPortMalloc>
 800ebfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00e      	beq.n	800ec22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec04:	205c      	movs	r0, #92	; 0x5c
 800ec06:	f001 fe17 	bl	8010838 <pvPortMalloc>
 800ec0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	631a      	str	r2, [r3, #48]	; 0x30
 800ec18:	e005      	b.n	800ec26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec1a:	6978      	ldr	r0, [r7, #20]
 800ec1c:	f001 fed8 	bl	80109d0 <vPortFree>
 800ec20:	e001      	b.n	800ec26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d017      	beq.n	800ec5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec34:	88fa      	ldrh	r2, [r7, #6]
 800ec36:	2300      	movs	r3, #0
 800ec38:	9303      	str	r3, [sp, #12]
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	9302      	str	r3, [sp, #8]
 800ec3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 f80e 	bl	800ec6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec50:	69f8      	ldr	r0, [r7, #28]
 800ec52:	f000 f89b 	bl	800ed8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec56:	2301      	movs	r3, #1
 800ec58:	61bb      	str	r3, [r7, #24]
 800ec5a:	e002      	b.n	800ec62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec62:	69bb      	ldr	r3, [r7, #24]
	}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b088      	sub	sp, #32
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	607a      	str	r2, [r7, #4]
 800ec78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	461a      	mov	r2, r3
 800ec84:	21a5      	movs	r1, #165	; 0xa5
 800ec86:	f003 f8ed 	bl	8011e64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ec94:	3b01      	subs	r3, #1
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	4413      	add	r3, r2
 800ec9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	f023 0307 	bic.w	r3, r3, #7
 800eca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	f003 0307 	and.w	r3, r3, #7
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00a      	beq.n	800ecc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	f383 8811 	msr	BASEPRI, r3
 800ecb6:	f3bf 8f6f 	isb	sy
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	617b      	str	r3, [r7, #20]
}
 800ecc0:	bf00      	nop
 800ecc2:	e7fe      	b.n	800ecc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d01f      	beq.n	800ed0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecca:	2300      	movs	r3, #0
 800eccc:	61fb      	str	r3, [r7, #28]
 800ecce:	e012      	b.n	800ecf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	7819      	ldrb	r1, [r3, #0]
 800ecd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	4413      	add	r3, r2
 800ecde:	3334      	adds	r3, #52	; 0x34
 800ece0:	460a      	mov	r2, r1
 800ece2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	4413      	add	r3, r2
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d006      	beq.n	800ecfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	61fb      	str	r3, [r7, #28]
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	2b0f      	cmp	r3, #15
 800ecfa:	d9e9      	bls.n	800ecd0 <prvInitialiseNewTask+0x64>
 800ecfc:	e000      	b.n	800ed00 <prvInitialiseNewTask+0x94>
			{
				break;
 800ecfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed08:	e003      	b.n	800ed12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed14:	2b37      	cmp	r3, #55	; 0x37
 800ed16:	d901      	bls.n	800ed1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed18:	2337      	movs	r3, #55	; 0x37
 800ed1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	3304      	adds	r3, #4
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7ff f978 	bl	800e028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3a:	3318      	adds	r3, #24
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff f973 	bl	800e028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	2200      	movs	r2, #0
 800ed62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed66:	683a      	ldr	r2, [r7, #0]
 800ed68:	68f9      	ldr	r1, [r7, #12]
 800ed6a:	69b8      	ldr	r0, [r7, #24]
 800ed6c:	f001 fb16 	bl	801039c <pxPortInitialiseStack>
 800ed70:	4602      	mov	r2, r0
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d002      	beq.n	800ed82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed82:	bf00      	nop
 800ed84:	3720      	adds	r7, #32
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
	...

0800ed8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ed94:	f001 fc2e 	bl	80105f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ed98:	4b2d      	ldr	r3, [pc, #180]	; (800ee50 <prvAddNewTaskToReadyList+0xc4>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	4a2c      	ldr	r2, [pc, #176]	; (800ee50 <prvAddNewTaskToReadyList+0xc4>)
 800eda0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eda2:	4b2c      	ldr	r3, [pc, #176]	; (800ee54 <prvAddNewTaskToReadyList+0xc8>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d109      	bne.n	800edbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edaa:	4a2a      	ldr	r2, [pc, #168]	; (800ee54 <prvAddNewTaskToReadyList+0xc8>)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800edb0:	4b27      	ldr	r3, [pc, #156]	; (800ee50 <prvAddNewTaskToReadyList+0xc4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d110      	bne.n	800edda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800edb8:	f000 fc16 	bl	800f5e8 <prvInitialiseTaskLists>
 800edbc:	e00d      	b.n	800edda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800edbe:	4b26      	ldr	r3, [pc, #152]	; (800ee58 <prvAddNewTaskToReadyList+0xcc>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d109      	bne.n	800edda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edc6:	4b23      	ldr	r3, [pc, #140]	; (800ee54 <prvAddNewTaskToReadyList+0xc8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d802      	bhi.n	800edda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800edd4:	4a1f      	ldr	r2, [pc, #124]	; (800ee54 <prvAddNewTaskToReadyList+0xc8>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800edda:	4b20      	ldr	r3, [pc, #128]	; (800ee5c <prvAddNewTaskToReadyList+0xd0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	3301      	adds	r3, #1
 800ede0:	4a1e      	ldr	r2, [pc, #120]	; (800ee5c <prvAddNewTaskToReadyList+0xd0>)
 800ede2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ede4:	4b1d      	ldr	r3, [pc, #116]	; (800ee5c <prvAddNewTaskToReadyList+0xd0>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edf0:	4b1b      	ldr	r3, [pc, #108]	; (800ee60 <prvAddNewTaskToReadyList+0xd4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d903      	bls.n	800ee00 <prvAddNewTaskToReadyList+0x74>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfc:	4a18      	ldr	r2, [pc, #96]	; (800ee60 <prvAddNewTaskToReadyList+0xd4>)
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4a15      	ldr	r2, [pc, #84]	; (800ee64 <prvAddNewTaskToReadyList+0xd8>)
 800ee0e:	441a      	add	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7ff f913 	bl	800e042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee1c:	f001 fc1a 	bl	8010654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee20:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <prvAddNewTaskToReadyList+0xcc>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00e      	beq.n	800ee46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee28:	4b0a      	ldr	r3, [pc, #40]	; (800ee54 <prvAddNewTaskToReadyList+0xc8>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d207      	bcs.n	800ee46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee36:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <prvAddNewTaskToReadyList+0xdc>)
 800ee38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee46:	bf00      	nop
 800ee48:	3708      	adds	r7, #8
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	2000254c 	.word	0x2000254c
 800ee54:	20002078 	.word	0x20002078
 800ee58:	20002558 	.word	0x20002558
 800ee5c:	20002568 	.word	0x20002568
 800ee60:	20002554 	.word	0x20002554
 800ee64:	2000207c 	.word	0x2000207c
 800ee68:	e000ed04 	.word	0xe000ed04

0800ee6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d017      	beq.n	800eeae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ee7e:	4b13      	ldr	r3, [pc, #76]	; (800eecc <vTaskDelay+0x60>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00a      	beq.n	800ee9c <vTaskDelay+0x30>
	__asm volatile
 800ee86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	60bb      	str	r3, [r7, #8]
}
 800ee98:	bf00      	nop
 800ee9a:	e7fe      	b.n	800ee9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ee9c:	f000 f880 	bl	800efa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eea0:	2100      	movs	r1, #0
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fed8 	bl	800fc58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eea8:	f000 f888 	bl	800efbc <xTaskResumeAll>
 800eeac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d107      	bne.n	800eec4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eeb4:	4b06      	ldr	r3, [pc, #24]	; (800eed0 <vTaskDelay+0x64>)
 800eeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeba:	601a      	str	r2, [r3, #0]
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eec4:	bf00      	nop
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	20002574 	.word	0x20002574
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08a      	sub	sp, #40	; 0x28
 800eed8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eeda:	2300      	movs	r3, #0
 800eedc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eee2:	463a      	mov	r2, r7
 800eee4:	1d39      	adds	r1, r7, #4
 800eee6:	f107 0308 	add.w	r3, r7, #8
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff f848 	bl	800df80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	9202      	str	r2, [sp, #8]
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	2300      	movs	r3, #0
 800eefc:	9300      	str	r3, [sp, #0]
 800eefe:	2300      	movs	r3, #0
 800ef00:	460a      	mov	r2, r1
 800ef02:	4921      	ldr	r1, [pc, #132]	; (800ef88 <vTaskStartScheduler+0xb4>)
 800ef04:	4821      	ldr	r0, [pc, #132]	; (800ef8c <vTaskStartScheduler+0xb8>)
 800ef06:	f7ff fe0f 	bl	800eb28 <xTaskCreateStatic>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	4a20      	ldr	r2, [pc, #128]	; (800ef90 <vTaskStartScheduler+0xbc>)
 800ef0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef10:	4b1f      	ldr	r3, [pc, #124]	; (800ef90 <vTaskStartScheduler+0xbc>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	617b      	str	r3, [r7, #20]
 800ef1c:	e001      	b.n	800ef22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d102      	bne.n	800ef2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef28:	f000 feea 	bl	800fd00 <xTimerCreateTimerTask>
 800ef2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d116      	bne.n	800ef62 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ef34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef38:	f383 8811 	msr	BASEPRI, r3
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	613b      	str	r3, [r7, #16]
}
 800ef46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef48:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <vTaskStartScheduler+0xc0>)
 800ef4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef50:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <vTaskStartScheduler+0xc4>)
 800ef52:	2201      	movs	r2, #1
 800ef54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef56:	4b11      	ldr	r3, [pc, #68]	; (800ef9c <vTaskStartScheduler+0xc8>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef5c:	f001 faa8 	bl	80104b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef60:	e00e      	b.n	800ef80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef68:	d10a      	bne.n	800ef80 <vTaskStartScheduler+0xac>
	__asm volatile
 800ef6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	60fb      	str	r3, [r7, #12]
}
 800ef7c:	bf00      	nop
 800ef7e:	e7fe      	b.n	800ef7e <vTaskStartScheduler+0xaa>
}
 800ef80:	bf00      	nop
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	08016aac 	.word	0x08016aac
 800ef8c:	0800f5b9 	.word	0x0800f5b9
 800ef90:	20002570 	.word	0x20002570
 800ef94:	2000256c 	.word	0x2000256c
 800ef98:	20002558 	.word	0x20002558
 800ef9c:	20002550 	.word	0x20002550

0800efa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efa0:	b480      	push	{r7}
 800efa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800efa4:	4b04      	ldr	r3, [pc, #16]	; (800efb8 <vTaskSuspendAll+0x18>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	3301      	adds	r3, #1
 800efaa:	4a03      	ldr	r2, [pc, #12]	; (800efb8 <vTaskSuspendAll+0x18>)
 800efac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800efae:	bf00      	nop
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	20002574 	.word	0x20002574

0800efbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800efc2:	2300      	movs	r3, #0
 800efc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800efc6:	2300      	movs	r3, #0
 800efc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800efca:	4b42      	ldr	r3, [pc, #264]	; (800f0d4 <xTaskResumeAll+0x118>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10a      	bne.n	800efe8 <xTaskResumeAll+0x2c>
	__asm volatile
 800efd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd6:	f383 8811 	msr	BASEPRI, r3
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	603b      	str	r3, [r7, #0]
}
 800efe4:	bf00      	nop
 800efe6:	e7fe      	b.n	800efe6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800efe8:	f001 fb04 	bl	80105f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800efec:	4b39      	ldr	r3, [pc, #228]	; (800f0d4 <xTaskResumeAll+0x118>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	3b01      	subs	r3, #1
 800eff2:	4a38      	ldr	r2, [pc, #224]	; (800f0d4 <xTaskResumeAll+0x118>)
 800eff4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eff6:	4b37      	ldr	r3, [pc, #220]	; (800f0d4 <xTaskResumeAll+0x118>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d162      	bne.n	800f0c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800effe:	4b36      	ldr	r3, [pc, #216]	; (800f0d8 <xTaskResumeAll+0x11c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d05e      	beq.n	800f0c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f006:	e02f      	b.n	800f068 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f008:	4b34      	ldr	r3, [pc, #208]	; (800f0dc <xTaskResumeAll+0x120>)
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	3318      	adds	r3, #24
 800f014:	4618      	mov	r0, r3
 800f016:	f7ff f871 	bl	800e0fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3304      	adds	r3, #4
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff f86c 	bl	800e0fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f028:	4b2d      	ldr	r3, [pc, #180]	; (800f0e0 <xTaskResumeAll+0x124>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d903      	bls.n	800f038 <xTaskResumeAll+0x7c>
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f034:	4a2a      	ldr	r2, [pc, #168]	; (800f0e0 <xTaskResumeAll+0x124>)
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f03c:	4613      	mov	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4a27      	ldr	r2, [pc, #156]	; (800f0e4 <xTaskResumeAll+0x128>)
 800f046:	441a      	add	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fe fff7 	bl	800e042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f058:	4b23      	ldr	r3, [pc, #140]	; (800f0e8 <xTaskResumeAll+0x12c>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05e:	429a      	cmp	r2, r3
 800f060:	d302      	bcc.n	800f068 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f062:	4b22      	ldr	r3, [pc, #136]	; (800f0ec <xTaskResumeAll+0x130>)
 800f064:	2201      	movs	r2, #1
 800f066:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f068:	4b1c      	ldr	r3, [pc, #112]	; (800f0dc <xTaskResumeAll+0x120>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d1cb      	bne.n	800f008 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f076:	f000 fb55 	bl	800f724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f07a:	4b1d      	ldr	r3, [pc, #116]	; (800f0f0 <xTaskResumeAll+0x134>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d010      	beq.n	800f0a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f086:	f000 f847 	bl	800f118 <xTaskIncrementTick>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d002      	beq.n	800f096 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f090:	4b16      	ldr	r3, [pc, #88]	; (800f0ec <xTaskResumeAll+0x130>)
 800f092:	2201      	movs	r2, #1
 800f094:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	3b01      	subs	r3, #1
 800f09a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1f1      	bne.n	800f086 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0a2:	4b13      	ldr	r3, [pc, #76]	; (800f0f0 <xTaskResumeAll+0x134>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0a8:	4b10      	ldr	r3, [pc, #64]	; (800f0ec <xTaskResumeAll+0x130>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d009      	beq.n	800f0c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0b4:	4b0f      	ldr	r3, [pc, #60]	; (800f0f4 <xTaskResumeAll+0x138>)
 800f0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0c4:	f001 fac6 	bl	8010654 <vPortExitCritical>

	return xAlreadyYielded;
 800f0c8:	68bb      	ldr	r3, [r7, #8]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20002574 	.word	0x20002574
 800f0d8:	2000254c 	.word	0x2000254c
 800f0dc:	2000250c 	.word	0x2000250c
 800f0e0:	20002554 	.word	0x20002554
 800f0e4:	2000207c 	.word	0x2000207c
 800f0e8:	20002078 	.word	0x20002078
 800f0ec:	20002560 	.word	0x20002560
 800f0f0:	2000255c 	.word	0x2000255c
 800f0f4:	e000ed04 	.word	0xe000ed04

0800f0f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f0fe:	4b05      	ldr	r3, [pc, #20]	; (800f114 <xTaskGetTickCount+0x1c>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f104:	687b      	ldr	r3, [r7, #4]
}
 800f106:	4618      	mov	r0, r3
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	20002550 	.word	0x20002550

0800f118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f11e:	2300      	movs	r3, #0
 800f120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f122:	4b4f      	ldr	r3, [pc, #316]	; (800f260 <xTaskIncrementTick+0x148>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	f040 808f 	bne.w	800f24a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f12c:	4b4d      	ldr	r3, [pc, #308]	; (800f264 <xTaskIncrementTick+0x14c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3301      	adds	r3, #1
 800f132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f134:	4a4b      	ldr	r2, [pc, #300]	; (800f264 <xTaskIncrementTick+0x14c>)
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d120      	bne.n	800f182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f140:	4b49      	ldr	r3, [pc, #292]	; (800f268 <xTaskIncrementTick+0x150>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00a      	beq.n	800f160 <xTaskIncrementTick+0x48>
	__asm volatile
 800f14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14e:	f383 8811 	msr	BASEPRI, r3
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	603b      	str	r3, [r7, #0]
}
 800f15c:	bf00      	nop
 800f15e:	e7fe      	b.n	800f15e <xTaskIncrementTick+0x46>
 800f160:	4b41      	ldr	r3, [pc, #260]	; (800f268 <xTaskIncrementTick+0x150>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	60fb      	str	r3, [r7, #12]
 800f166:	4b41      	ldr	r3, [pc, #260]	; (800f26c <xTaskIncrementTick+0x154>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a3f      	ldr	r2, [pc, #252]	; (800f268 <xTaskIncrementTick+0x150>)
 800f16c:	6013      	str	r3, [r2, #0]
 800f16e:	4a3f      	ldr	r2, [pc, #252]	; (800f26c <xTaskIncrementTick+0x154>)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6013      	str	r3, [r2, #0]
 800f174:	4b3e      	ldr	r3, [pc, #248]	; (800f270 <xTaskIncrementTick+0x158>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	3301      	adds	r3, #1
 800f17a:	4a3d      	ldr	r2, [pc, #244]	; (800f270 <xTaskIncrementTick+0x158>)
 800f17c:	6013      	str	r3, [r2, #0]
 800f17e:	f000 fad1 	bl	800f724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f182:	4b3c      	ldr	r3, [pc, #240]	; (800f274 <xTaskIncrementTick+0x15c>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	693a      	ldr	r2, [r7, #16]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d349      	bcc.n	800f220 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f18c:	4b36      	ldr	r3, [pc, #216]	; (800f268 <xTaskIncrementTick+0x150>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d104      	bne.n	800f1a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f196:	4b37      	ldr	r3, [pc, #220]	; (800f274 <xTaskIncrementTick+0x15c>)
 800f198:	f04f 32ff 	mov.w	r2, #4294967295
 800f19c:	601a      	str	r2, [r3, #0]
					break;
 800f19e:	e03f      	b.n	800f220 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1a0:	4b31      	ldr	r3, [pc, #196]	; (800f268 <xTaskIncrementTick+0x150>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1b0:	693a      	ldr	r2, [r7, #16]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d203      	bcs.n	800f1c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1b8:	4a2e      	ldr	r2, [pc, #184]	; (800f274 <xTaskIncrementTick+0x15c>)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1be:	e02f      	b.n	800f220 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fe ff99 	bl	800e0fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d004      	beq.n	800f1dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	3318      	adds	r3, #24
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fe ff90 	bl	800e0fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e0:	4b25      	ldr	r3, [pc, #148]	; (800f278 <xTaskIncrementTick+0x160>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d903      	bls.n	800f1f0 <xTaskIncrementTick+0xd8>
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	4a22      	ldr	r2, [pc, #136]	; (800f278 <xTaskIncrementTick+0x160>)
 800f1ee:	6013      	str	r3, [r2, #0]
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	4413      	add	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4a1f      	ldr	r2, [pc, #124]	; (800f27c <xTaskIncrementTick+0x164>)
 800f1fe:	441a      	add	r2, r3
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	3304      	adds	r3, #4
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7fe ff1b 	bl	800e042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f210:	4b1b      	ldr	r3, [pc, #108]	; (800f280 <xTaskIncrementTick+0x168>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f216:	429a      	cmp	r2, r3
 800f218:	d3b8      	bcc.n	800f18c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f21a:	2301      	movs	r3, #1
 800f21c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f21e:	e7b5      	b.n	800f18c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f220:	4b17      	ldr	r3, [pc, #92]	; (800f280 <xTaskIncrementTick+0x168>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f226:	4915      	ldr	r1, [pc, #84]	; (800f27c <xTaskIncrementTick+0x164>)
 800f228:	4613      	mov	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	440b      	add	r3, r1
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d901      	bls.n	800f23c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f238:	2301      	movs	r3, #1
 800f23a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f23c:	4b11      	ldr	r3, [pc, #68]	; (800f284 <xTaskIncrementTick+0x16c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f244:	2301      	movs	r3, #1
 800f246:	617b      	str	r3, [r7, #20]
 800f248:	e004      	b.n	800f254 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f24a:	4b0f      	ldr	r3, [pc, #60]	; (800f288 <xTaskIncrementTick+0x170>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	3301      	adds	r3, #1
 800f250:	4a0d      	ldr	r2, [pc, #52]	; (800f288 <xTaskIncrementTick+0x170>)
 800f252:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f254:	697b      	ldr	r3, [r7, #20]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3718      	adds	r7, #24
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	20002574 	.word	0x20002574
 800f264:	20002550 	.word	0x20002550
 800f268:	20002504 	.word	0x20002504
 800f26c:	20002508 	.word	0x20002508
 800f270:	20002564 	.word	0x20002564
 800f274:	2000256c 	.word	0x2000256c
 800f278:	20002554 	.word	0x20002554
 800f27c:	2000207c 	.word	0x2000207c
 800f280:	20002078 	.word	0x20002078
 800f284:	20002560 	.word	0x20002560
 800f288:	2000255c 	.word	0x2000255c

0800f28c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f28c:	b480      	push	{r7}
 800f28e:	b085      	sub	sp, #20
 800f290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f292:	4b28      	ldr	r3, [pc, #160]	; (800f334 <vTaskSwitchContext+0xa8>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d003      	beq.n	800f2a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f29a:	4b27      	ldr	r3, [pc, #156]	; (800f338 <vTaskSwitchContext+0xac>)
 800f29c:	2201      	movs	r2, #1
 800f29e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2a0:	e041      	b.n	800f326 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f2a2:	4b25      	ldr	r3, [pc, #148]	; (800f338 <vTaskSwitchContext+0xac>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2a8:	4b24      	ldr	r3, [pc, #144]	; (800f33c <vTaskSwitchContext+0xb0>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	60fb      	str	r3, [r7, #12]
 800f2ae:	e010      	b.n	800f2d2 <vTaskSwitchContext+0x46>
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <vTaskSwitchContext+0x40>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	607b      	str	r3, [r7, #4]
}
 800f2c8:	bf00      	nop
 800f2ca:	e7fe      	b.n	800f2ca <vTaskSwitchContext+0x3e>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	60fb      	str	r3, [r7, #12]
 800f2d2:	491b      	ldr	r1, [pc, #108]	; (800f340 <vTaskSwitchContext+0xb4>)
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	440b      	add	r3, r1
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d0e4      	beq.n	800f2b0 <vTaskSwitchContext+0x24>
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	4613      	mov	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	4a13      	ldr	r2, [pc, #76]	; (800f340 <vTaskSwitchContext+0xb4>)
 800f2f2:	4413      	add	r3, r2
 800f2f4:	60bb      	str	r3, [r7, #8]
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	685a      	ldr	r2, [r3, #4]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	605a      	str	r2, [r3, #4]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	685a      	ldr	r2, [r3, #4]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	3308      	adds	r3, #8
 800f308:	429a      	cmp	r2, r3
 800f30a:	d104      	bne.n	800f316 <vTaskSwitchContext+0x8a>
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	685a      	ldr	r2, [r3, #4]
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	605a      	str	r2, [r3, #4]
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	4a09      	ldr	r2, [pc, #36]	; (800f344 <vTaskSwitchContext+0xb8>)
 800f31e:	6013      	str	r3, [r2, #0]
 800f320:	4a06      	ldr	r2, [pc, #24]	; (800f33c <vTaskSwitchContext+0xb0>)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6013      	str	r3, [r2, #0]
}
 800f326:	bf00      	nop
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	20002574 	.word	0x20002574
 800f338:	20002560 	.word	0x20002560
 800f33c:	20002554 	.word	0x20002554
 800f340:	2000207c 	.word	0x2000207c
 800f344:	20002078 	.word	0x20002078

0800f348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d10a      	bne.n	800f36e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35c:	f383 8811 	msr	BASEPRI, r3
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	f3bf 8f4f 	dsb	sy
 800f368:	60fb      	str	r3, [r7, #12]
}
 800f36a:	bf00      	nop
 800f36c:	e7fe      	b.n	800f36c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f36e:	4b07      	ldr	r3, [pc, #28]	; (800f38c <vTaskPlaceOnEventList+0x44>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3318      	adds	r3, #24
 800f374:	4619      	mov	r1, r3
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7fe fe87 	bl	800e08a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f37c:	2101      	movs	r1, #1
 800f37e:	6838      	ldr	r0, [r7, #0]
 800f380:	f000 fc6a 	bl	800fc58 <prvAddCurrentTaskToDelayedList>
}
 800f384:	bf00      	nop
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	20002078 	.word	0x20002078

0800f390 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10a      	bne.n	800f3b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	617b      	str	r3, [r7, #20]
}
 800f3b4:	bf00      	nop
 800f3b6:	e7fe      	b.n	800f3b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3b8:	4b0a      	ldr	r3, [pc, #40]	; (800f3e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	3318      	adds	r3, #24
 800f3be:	4619      	mov	r1, r3
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f7fe fe3e 	bl	800e042 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f3d2:	6879      	ldr	r1, [r7, #4]
 800f3d4:	68b8      	ldr	r0, [r7, #8]
 800f3d6:	f000 fc3f 	bl	800fc58 <prvAddCurrentTaskToDelayedList>
	}
 800f3da:	bf00      	nop
 800f3dc:	3718      	adds	r7, #24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20002078 	.word	0x20002078

0800f3e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10a      	bne.n	800f414 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	60fb      	str	r3, [r7, #12]
}
 800f410:	bf00      	nop
 800f412:	e7fe      	b.n	800f412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	3318      	adds	r3, #24
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fe fe6f 	bl	800e0fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f41e:	4b1e      	ldr	r3, [pc, #120]	; (800f498 <xTaskRemoveFromEventList+0xb0>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d11d      	bne.n	800f462 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	3304      	adds	r3, #4
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fe fe66 	bl	800e0fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f434:	4b19      	ldr	r3, [pc, #100]	; (800f49c <xTaskRemoveFromEventList+0xb4>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d903      	bls.n	800f444 <xTaskRemoveFromEventList+0x5c>
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f440:	4a16      	ldr	r2, [pc, #88]	; (800f49c <xTaskRemoveFromEventList+0xb4>)
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f448:	4613      	mov	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	4a13      	ldr	r2, [pc, #76]	; (800f4a0 <xTaskRemoveFromEventList+0xb8>)
 800f452:	441a      	add	r2, r3
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	3304      	adds	r3, #4
 800f458:	4619      	mov	r1, r3
 800f45a:	4610      	mov	r0, r2
 800f45c:	f7fe fdf1 	bl	800e042 <vListInsertEnd>
 800f460:	e005      	b.n	800f46e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	3318      	adds	r3, #24
 800f466:	4619      	mov	r1, r3
 800f468:	480e      	ldr	r0, [pc, #56]	; (800f4a4 <xTaskRemoveFromEventList+0xbc>)
 800f46a:	f7fe fdea 	bl	800e042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f472:	4b0d      	ldr	r3, [pc, #52]	; (800f4a8 <xTaskRemoveFromEventList+0xc0>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f478:	429a      	cmp	r2, r3
 800f47a:	d905      	bls.n	800f488 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f47c:	2301      	movs	r3, #1
 800f47e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f480:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <xTaskRemoveFromEventList+0xc4>)
 800f482:	2201      	movs	r2, #1
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	e001      	b.n	800f48c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f488:	2300      	movs	r3, #0
 800f48a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f48c:	697b      	ldr	r3, [r7, #20]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3718      	adds	r7, #24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	20002574 	.word	0x20002574
 800f49c:	20002554 	.word	0x20002554
 800f4a0:	2000207c 	.word	0x2000207c
 800f4a4:	2000250c 	.word	0x2000250c
 800f4a8:	20002078 	.word	0x20002078
 800f4ac:	20002560 	.word	0x20002560

0800f4b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <vTaskInternalSetTimeOutState+0x24>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4c0:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <vTaskInternalSetTimeOutState+0x28>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	605a      	str	r2, [r3, #4]
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	20002564 	.word	0x20002564
 800f4d8:	20002550 	.word	0x20002550

0800f4dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b088      	sub	sp, #32
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10a      	bne.n	800f502 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	613b      	str	r3, [r7, #16]
}
 800f4fe:	bf00      	nop
 800f500:	e7fe      	b.n	800f500 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10a      	bne.n	800f51e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50c:	f383 8811 	msr	BASEPRI, r3
 800f510:	f3bf 8f6f 	isb	sy
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	60fb      	str	r3, [r7, #12]
}
 800f51a:	bf00      	nop
 800f51c:	e7fe      	b.n	800f51c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f51e:	f001 f869 	bl	80105f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f522:	4b1d      	ldr	r3, [pc, #116]	; (800f598 <xTaskCheckForTimeOut+0xbc>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	69ba      	ldr	r2, [r7, #24]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53a:	d102      	bne.n	800f542 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f53c:	2300      	movs	r3, #0
 800f53e:	61fb      	str	r3, [r7, #28]
 800f540:	e023      	b.n	800f58a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	4b15      	ldr	r3, [pc, #84]	; (800f59c <xTaskCheckForTimeOut+0xc0>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d007      	beq.n	800f55e <xTaskCheckForTimeOut+0x82>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	69ba      	ldr	r2, [r7, #24]
 800f554:	429a      	cmp	r2, r3
 800f556:	d302      	bcc.n	800f55e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f558:	2301      	movs	r3, #1
 800f55a:	61fb      	str	r3, [r7, #28]
 800f55c:	e015      	b.n	800f58a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	697a      	ldr	r2, [r7, #20]
 800f564:	429a      	cmp	r2, r3
 800f566:	d20b      	bcs.n	800f580 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	1ad2      	subs	r2, r2, r3
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7ff ff9b 	bl	800f4b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f57a:	2300      	movs	r3, #0
 800f57c:	61fb      	str	r3, [r7, #28]
 800f57e:	e004      	b.n	800f58a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f586:	2301      	movs	r3, #1
 800f588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f58a:	f001 f863 	bl	8010654 <vPortExitCritical>

	return xReturn;
 800f58e:	69fb      	ldr	r3, [r7, #28]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3720      	adds	r7, #32
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	20002550 	.word	0x20002550
 800f59c:	20002564 	.word	0x20002564

0800f5a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5a4:	4b03      	ldr	r3, [pc, #12]	; (800f5b4 <vTaskMissedYield+0x14>)
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	601a      	str	r2, [r3, #0]
}
 800f5aa:	bf00      	nop
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr
 800f5b4:	20002560 	.word	0x20002560

0800f5b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5c0:	f000 f852 	bl	800f668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5c4:	4b06      	ldr	r3, [pc, #24]	; (800f5e0 <prvIdleTask+0x28>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d9f9      	bls.n	800f5c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f5cc:	4b05      	ldr	r3, [pc, #20]	; (800f5e4 <prvIdleTask+0x2c>)
 800f5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5d2:	601a      	str	r2, [r3, #0]
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f5dc:	e7f0      	b.n	800f5c0 <prvIdleTask+0x8>
 800f5de:	bf00      	nop
 800f5e0:	2000207c 	.word	0x2000207c
 800f5e4:	e000ed04 	.word	0xe000ed04

0800f5e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	607b      	str	r3, [r7, #4]
 800f5f2:	e00c      	b.n	800f60e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4a12      	ldr	r2, [pc, #72]	; (800f648 <prvInitialiseTaskLists+0x60>)
 800f600:	4413      	add	r3, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7fe fcf0 	bl	800dfe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3301      	adds	r3, #1
 800f60c:	607b      	str	r3, [r7, #4]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2b37      	cmp	r3, #55	; 0x37
 800f612:	d9ef      	bls.n	800f5f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f614:	480d      	ldr	r0, [pc, #52]	; (800f64c <prvInitialiseTaskLists+0x64>)
 800f616:	f7fe fce7 	bl	800dfe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f61a:	480d      	ldr	r0, [pc, #52]	; (800f650 <prvInitialiseTaskLists+0x68>)
 800f61c:	f7fe fce4 	bl	800dfe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f620:	480c      	ldr	r0, [pc, #48]	; (800f654 <prvInitialiseTaskLists+0x6c>)
 800f622:	f7fe fce1 	bl	800dfe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f626:	480c      	ldr	r0, [pc, #48]	; (800f658 <prvInitialiseTaskLists+0x70>)
 800f628:	f7fe fcde 	bl	800dfe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f62c:	480b      	ldr	r0, [pc, #44]	; (800f65c <prvInitialiseTaskLists+0x74>)
 800f62e:	f7fe fcdb 	bl	800dfe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f632:	4b0b      	ldr	r3, [pc, #44]	; (800f660 <prvInitialiseTaskLists+0x78>)
 800f634:	4a05      	ldr	r2, [pc, #20]	; (800f64c <prvInitialiseTaskLists+0x64>)
 800f636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <prvInitialiseTaskLists+0x7c>)
 800f63a:	4a05      	ldr	r2, [pc, #20]	; (800f650 <prvInitialiseTaskLists+0x68>)
 800f63c:	601a      	str	r2, [r3, #0]
}
 800f63e:	bf00      	nop
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	2000207c 	.word	0x2000207c
 800f64c:	200024dc 	.word	0x200024dc
 800f650:	200024f0 	.word	0x200024f0
 800f654:	2000250c 	.word	0x2000250c
 800f658:	20002520 	.word	0x20002520
 800f65c:	20002538 	.word	0x20002538
 800f660:	20002504 	.word	0x20002504
 800f664:	20002508 	.word	0x20002508

0800f668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f66e:	e019      	b.n	800f6a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f670:	f000 ffc0 	bl	80105f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f674:	4b10      	ldr	r3, [pc, #64]	; (800f6b8 <prvCheckTasksWaitingTermination+0x50>)
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3304      	adds	r3, #4
 800f680:	4618      	mov	r0, r3
 800f682:	f7fe fd3b 	bl	800e0fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f686:	4b0d      	ldr	r3, [pc, #52]	; (800f6bc <prvCheckTasksWaitingTermination+0x54>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	3b01      	subs	r3, #1
 800f68c:	4a0b      	ldr	r2, [pc, #44]	; (800f6bc <prvCheckTasksWaitingTermination+0x54>)
 800f68e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f690:	4b0b      	ldr	r3, [pc, #44]	; (800f6c0 <prvCheckTasksWaitingTermination+0x58>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3b01      	subs	r3, #1
 800f696:	4a0a      	ldr	r2, [pc, #40]	; (800f6c0 <prvCheckTasksWaitingTermination+0x58>)
 800f698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f69a:	f000 ffdb 	bl	8010654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 f810 	bl	800f6c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6a4:	4b06      	ldr	r3, [pc, #24]	; (800f6c0 <prvCheckTasksWaitingTermination+0x58>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1e1      	bne.n	800f670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6ac:	bf00      	nop
 800f6ae:	bf00      	nop
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	20002520 	.word	0x20002520
 800f6bc:	2000254c 	.word	0x2000254c
 800f6c0:	20002534 	.word	0x20002534

0800f6c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d108      	bne.n	800f6e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f001 f978 	bl	80109d0 <vPortFree>
				vPortFree( pxTCB );
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f001 f975 	bl	80109d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f6e6:	e018      	b.n	800f71a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d103      	bne.n	800f6fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f001 f96c 	bl	80109d0 <vPortFree>
	}
 800f6f8:	e00f      	b.n	800f71a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f700:	2b02      	cmp	r3, #2
 800f702:	d00a      	beq.n	800f71a <prvDeleteTCB+0x56>
	__asm volatile
 800f704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f708:	f383 8811 	msr	BASEPRI, r3
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	f3bf 8f4f 	dsb	sy
 800f714:	60fb      	str	r3, [r7, #12]
}
 800f716:	bf00      	nop
 800f718:	e7fe      	b.n	800f718 <prvDeleteTCB+0x54>
	}
 800f71a:	bf00      	nop
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
	...

0800f724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f72a:	4b0c      	ldr	r3, [pc, #48]	; (800f75c <prvResetNextTaskUnblockTime+0x38>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d104      	bne.n	800f73e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f734:	4b0a      	ldr	r3, [pc, #40]	; (800f760 <prvResetNextTaskUnblockTime+0x3c>)
 800f736:	f04f 32ff 	mov.w	r2, #4294967295
 800f73a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f73c:	e008      	b.n	800f750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f73e:	4b07      	ldr	r3, [pc, #28]	; (800f75c <prvResetNextTaskUnblockTime+0x38>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	4a04      	ldr	r2, [pc, #16]	; (800f760 <prvResetNextTaskUnblockTime+0x3c>)
 800f74e:	6013      	str	r3, [r2, #0]
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	20002504 	.word	0x20002504
 800f760:	2000256c 	.word	0x2000256c

0800f764 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f76a:	4b0b      	ldr	r3, [pc, #44]	; (800f798 <xTaskGetSchedulerState+0x34>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d102      	bne.n	800f778 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f772:	2301      	movs	r3, #1
 800f774:	607b      	str	r3, [r7, #4]
 800f776:	e008      	b.n	800f78a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f778:	4b08      	ldr	r3, [pc, #32]	; (800f79c <xTaskGetSchedulerState+0x38>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d102      	bne.n	800f786 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f780:	2302      	movs	r3, #2
 800f782:	607b      	str	r3, [r7, #4]
 800f784:	e001      	b.n	800f78a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f786:	2300      	movs	r3, #0
 800f788:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f78a:	687b      	ldr	r3, [r7, #4]
	}
 800f78c:	4618      	mov	r0, r3
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr
 800f798:	20002558 	.word	0x20002558
 800f79c:	20002574 	.word	0x20002574

0800f7a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d056      	beq.n	800f864 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f7b6:	4b2e      	ldr	r3, [pc, #184]	; (800f870 <xTaskPriorityDisinherit+0xd0>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d00a      	beq.n	800f7d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	60fb      	str	r3, [r7, #12]
}
 800f7d2:	bf00      	nop
 800f7d4:	e7fe      	b.n	800f7d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d10a      	bne.n	800f7f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	60bb      	str	r3, [r7, #8]
}
 800f7f0:	bf00      	nop
 800f7f2:	e7fe      	b.n	800f7f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7f8:	1e5a      	subs	r2, r3, #1
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f806:	429a      	cmp	r2, r3
 800f808:	d02c      	beq.n	800f864 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d128      	bne.n	800f864 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	3304      	adds	r3, #4
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe fc70 	bl	800e0fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f834:	4b0f      	ldr	r3, [pc, #60]	; (800f874 <xTaskPriorityDisinherit+0xd4>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d903      	bls.n	800f844 <xTaskPriorityDisinherit+0xa4>
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f840:	4a0c      	ldr	r2, [pc, #48]	; (800f874 <xTaskPriorityDisinherit+0xd4>)
 800f842:	6013      	str	r3, [r2, #0]
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f848:	4613      	mov	r3, r2
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	4413      	add	r3, r2
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	4a09      	ldr	r2, [pc, #36]	; (800f878 <xTaskPriorityDisinherit+0xd8>)
 800f852:	441a      	add	r2, r3
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	3304      	adds	r3, #4
 800f858:	4619      	mov	r1, r3
 800f85a:	4610      	mov	r0, r2
 800f85c:	f7fe fbf1 	bl	800e042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f860:	2301      	movs	r3, #1
 800f862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f864:	697b      	ldr	r3, [r7, #20]
	}
 800f866:	4618      	mov	r0, r3
 800f868:	3718      	adds	r7, #24
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	20002078 	.word	0x20002078
 800f874:	20002554 	.word	0x20002554
 800f878:	2000207c 	.word	0x2000207c

0800f87c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
 800f888:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f88a:	f000 feb3 	bl	80105f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f88e:	4b26      	ldr	r3, [pc, #152]	; (800f928 <xTaskNotifyWait+0xac>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f896:	b2db      	uxtb	r3, r3
 800f898:	2b02      	cmp	r3, #2
 800f89a:	d01a      	beq.n	800f8d2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f89c:	4b22      	ldr	r3, [pc, #136]	; (800f928 <xTaskNotifyWait+0xac>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	43d2      	mvns	r2, r2
 800f8a6:	400a      	ands	r2, r1
 800f8a8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f8aa:	4b1f      	ldr	r3, [pc, #124]	; (800f928 <xTaskNotifyWait+0xac>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00b      	beq.n	800f8d2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8ba:	2101      	movs	r1, #1
 800f8bc:	6838      	ldr	r0, [r7, #0]
 800f8be:	f000 f9cb 	bl	800fc58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f8c2:	4b1a      	ldr	r3, [pc, #104]	; (800f92c <xTaskNotifyWait+0xb0>)
 800f8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c8:	601a      	str	r2, [r3, #0]
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f8d2:	f000 febf 	bl	8010654 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f8d6:	f000 fe8d 	bl	80105f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f8e0:	4b11      	ldr	r3, [pc, #68]	; (800f928 <xTaskNotifyWait+0xac>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f8ea:	4b0f      	ldr	r3, [pc, #60]	; (800f928 <xTaskNotifyWait+0xac>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d002      	beq.n	800f8fe <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	617b      	str	r3, [r7, #20]
 800f8fc:	e008      	b.n	800f910 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f8fe:	4b0a      	ldr	r3, [pc, #40]	; (800f928 <xTaskNotifyWait+0xac>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	43d2      	mvns	r2, r2
 800f908:	400a      	ands	r2, r1
 800f90a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f90c:	2301      	movs	r3, #1
 800f90e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f910:	4b05      	ldr	r3, [pc, #20]	; (800f928 <xTaskNotifyWait+0xac>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f91a:	f000 fe9b 	bl	8010654 <vPortExitCritical>

		return xReturn;
 800f91e:	697b      	ldr	r3, [r7, #20]
	}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	20002078 	.word	0x20002078
 800f92c:	e000ed04 	.word	0xe000ed04

0800f930 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f930:	b580      	push	{r7, lr}
 800f932:	b08a      	sub	sp, #40	; 0x28
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	603b      	str	r3, [r7, #0]
 800f93c:	4613      	mov	r3, r2
 800f93e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f940:	2301      	movs	r3, #1
 800f942:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10a      	bne.n	800f960 <xTaskGenericNotify+0x30>
	__asm volatile
 800f94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94e:	f383 8811 	msr	BASEPRI, r3
 800f952:	f3bf 8f6f 	isb	sy
 800f956:	f3bf 8f4f 	dsb	sy
 800f95a:	61bb      	str	r3, [r7, #24]
}
 800f95c:	bf00      	nop
 800f95e:	e7fe      	b.n	800f95e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f964:	f000 fe46 	bl	80105f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d003      	beq.n	800f976 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f976:	6a3b      	ldr	r3, [r7, #32]
 800f978:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f97c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f97e:	6a3b      	ldr	r3, [r7, #32]
 800f980:	2202      	movs	r2, #2
 800f982:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800f986:	79fb      	ldrb	r3, [r7, #7]
 800f988:	2b04      	cmp	r3, #4
 800f98a:	d828      	bhi.n	800f9de <xTaskGenericNotify+0xae>
 800f98c:	a201      	add	r2, pc, #4	; (adr r2, 800f994 <xTaskGenericNotify+0x64>)
 800f98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f992:	bf00      	nop
 800f994:	0800f9ff 	.word	0x0800f9ff
 800f998:	0800f9a9 	.word	0x0800f9a9
 800f99c:	0800f9b7 	.word	0x0800f9b7
 800f9a0:	0800f9c3 	.word	0x0800f9c3
 800f9a4:	0800f9cb 	.word	0x0800f9cb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f9a8:	6a3b      	ldr	r3, [r7, #32]
 800f9aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f9b4:	e026      	b.n	800fa04 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ba:	1c5a      	adds	r2, r3, #1
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f9c0:	e020      	b.n	800fa04 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f9c2:	6a3b      	ldr	r3, [r7, #32]
 800f9c4:	68ba      	ldr	r2, [r7, #8]
 800f9c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800f9c8:	e01c      	b.n	800fa04 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f9ca:	7ffb      	ldrb	r3, [r7, #31]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d003      	beq.n	800f9d8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	68ba      	ldr	r2, [r7, #8]
 800f9d4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f9d6:	e015      	b.n	800fa04 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f9dc:	e012      	b.n	800fa04 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e6:	d00c      	beq.n	800fa02 <xTaskGenericNotify+0xd2>
	__asm volatile
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	617b      	str	r3, [r7, #20]
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <xTaskGenericNotify+0xcc>
					break;
 800f9fe:	bf00      	nop
 800fa00:	e000      	b.n	800fa04 <xTaskGenericNotify+0xd4>

					break;
 800fa02:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fa04:	7ffb      	ldrb	r3, [r7, #31]
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d13a      	bne.n	800fa80 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa0a:	6a3b      	ldr	r3, [r7, #32]
 800fa0c:	3304      	adds	r3, #4
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fe fb74 	bl	800e0fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fa14:	6a3b      	ldr	r3, [r7, #32]
 800fa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa18:	4b1d      	ldr	r3, [pc, #116]	; (800fa90 <xTaskGenericNotify+0x160>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d903      	bls.n	800fa28 <xTaskGenericNotify+0xf8>
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa24:	4a1a      	ldr	r2, [pc, #104]	; (800fa90 <xTaskGenericNotify+0x160>)
 800fa26:	6013      	str	r3, [r2, #0]
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	4413      	add	r3, r2
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4a17      	ldr	r2, [pc, #92]	; (800fa94 <xTaskGenericNotify+0x164>)
 800fa36:	441a      	add	r2, r3
 800fa38:	6a3b      	ldr	r3, [r7, #32]
 800fa3a:	3304      	adds	r3, #4
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	4610      	mov	r0, r2
 800fa40:	f7fe faff 	bl	800e042 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fa44:	6a3b      	ldr	r3, [r7, #32]
 800fa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00a      	beq.n	800fa62 <xTaskGenericNotify+0x132>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	613b      	str	r3, [r7, #16]
}
 800fa5e:	bf00      	nop
 800fa60:	e7fe      	b.n	800fa60 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa62:	6a3b      	ldr	r3, [r7, #32]
 800fa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa66:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <xTaskGenericNotify+0x168>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d907      	bls.n	800fa80 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fa70:	4b0a      	ldr	r3, [pc, #40]	; (800fa9c <xTaskGenericNotify+0x16c>)
 800fa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa76:	601a      	str	r2, [r3, #0]
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fa80:	f000 fde8 	bl	8010654 <vPortExitCritical>

		return xReturn;
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3728      	adds	r7, #40	; 0x28
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20002554 	.word	0x20002554
 800fa94:	2000207c 	.word	0x2000207c
 800fa98:	20002078 	.word	0x20002078
 800fa9c:	e000ed04 	.word	0xe000ed04

0800faa0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b08e      	sub	sp, #56	; 0x38
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	4613      	mov	r3, r2
 800faae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fab0:	2301      	movs	r3, #1
 800fab2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10a      	bne.n	800fad0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800faba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800facc:	bf00      	nop
 800face:	e7fe      	b.n	800face <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fad0:	f000 fe72 	bl	80107b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800fad8:	f3ef 8211 	mrs	r2, BASEPRI
 800fadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	623a      	str	r2, [r7, #32]
 800faee:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800faf0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800faf2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d003      	beq.n	800fb02 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fb08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0e:	2202      	movs	r2, #2
 800fb10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800fb14:	79fb      	ldrb	r3, [r7, #7]
 800fb16:	2b04      	cmp	r3, #4
 800fb18:	d828      	bhi.n	800fb6c <xTaskGenericNotifyFromISR+0xcc>
 800fb1a:	a201      	add	r2, pc, #4	; (adr r2, 800fb20 <xTaskGenericNotifyFromISR+0x80>)
 800fb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb20:	0800fb8d 	.word	0x0800fb8d
 800fb24:	0800fb35 	.word	0x0800fb35
 800fb28:	0800fb43 	.word	0x0800fb43
 800fb2c:	0800fb4f 	.word	0x0800fb4f
 800fb30:	0800fb57 	.word	0x0800fb57
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	431a      	orrs	r2, r3
 800fb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fb40:	e027      	b.n	800fb92 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fb4c:	e021      	b.n	800fb92 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fb54:	e01d      	b.n	800fb92 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fb56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d003      	beq.n	800fb66 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fb64:	e015      	b.n	800fb92 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800fb66:	2300      	movs	r3, #0
 800fb68:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800fb6a:	e012      	b.n	800fb92 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb74:	d00c      	beq.n	800fb90 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	61bb      	str	r3, [r7, #24]
}
 800fb88:	bf00      	nop
 800fb8a:	e7fe      	b.n	800fb8a <xTaskGenericNotifyFromISR+0xea>
					break;
 800fb8c:	bf00      	nop
 800fb8e:	e000      	b.n	800fb92 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800fb90:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fb92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d146      	bne.n	800fc28 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00a      	beq.n	800fbb8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	617b      	str	r3, [r7, #20]
}
 800fbb4:	bf00      	nop
 800fbb6:	e7fe      	b.n	800fbb6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbb8:	4b21      	ldr	r3, [pc, #132]	; (800fc40 <xTaskGenericNotifyFromISR+0x1a0>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d11d      	bne.n	800fbfc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc2:	3304      	adds	r3, #4
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fe fa99 	bl	800e0fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbce:	4b1d      	ldr	r3, [pc, #116]	; (800fc44 <xTaskGenericNotifyFromISR+0x1a4>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d903      	bls.n	800fbde <xTaskGenericNotifyFromISR+0x13e>
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbda:	4a1a      	ldr	r2, [pc, #104]	; (800fc44 <xTaskGenericNotifyFromISR+0x1a4>)
 800fbdc:	6013      	str	r3, [r2, #0]
 800fbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4a17      	ldr	r2, [pc, #92]	; (800fc48 <xTaskGenericNotifyFromISR+0x1a8>)
 800fbec:	441a      	add	r2, r3
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	f7fe fa24 	bl	800e042 <vListInsertEnd>
 800fbfa:	e005      	b.n	800fc08 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfe:	3318      	adds	r3, #24
 800fc00:	4619      	mov	r1, r3
 800fc02:	4812      	ldr	r0, [pc, #72]	; (800fc4c <xTaskGenericNotifyFromISR+0x1ac>)
 800fc04:	f7fe fa1d 	bl	800e042 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0c:	4b10      	ldr	r3, [pc, #64]	; (800fc50 <xTaskGenericNotifyFromISR+0x1b0>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d908      	bls.n	800fc28 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fc1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc1e:	2201      	movs	r2, #1
 800fc20:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fc22:	4b0c      	ldr	r3, [pc, #48]	; (800fc54 <xTaskGenericNotifyFromISR+0x1b4>)
 800fc24:	2201      	movs	r2, #1
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	f383 8811 	msr	BASEPRI, r3
}
 800fc32:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800fc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3738      	adds	r7, #56	; 0x38
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	20002574 	.word	0x20002574
 800fc44:	20002554 	.word	0x20002554
 800fc48:	2000207c 	.word	0x2000207c
 800fc4c:	2000250c 	.word	0x2000250c
 800fc50:	20002078 	.word	0x20002078
 800fc54:	20002560 	.word	0x20002560

0800fc58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fc62:	4b21      	ldr	r3, [pc, #132]	; (800fce8 <prvAddCurrentTaskToDelayedList+0x90>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc68:	4b20      	ldr	r3, [pc, #128]	; (800fcec <prvAddCurrentTaskToDelayedList+0x94>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fa44 	bl	800e0fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc7a:	d10a      	bne.n	800fc92 <prvAddCurrentTaskToDelayedList+0x3a>
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d007      	beq.n	800fc92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fc82:	4b1a      	ldr	r3, [pc, #104]	; (800fcec <prvAddCurrentTaskToDelayedList+0x94>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	3304      	adds	r3, #4
 800fc88:	4619      	mov	r1, r3
 800fc8a:	4819      	ldr	r0, [pc, #100]	; (800fcf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800fc8c:	f7fe f9d9 	bl	800e042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fc90:	e026      	b.n	800fce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4413      	add	r3, r2
 800fc98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fc9a:	4b14      	ldr	r3, [pc, #80]	; (800fcec <prvAddCurrentTaskToDelayedList+0x94>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d209      	bcs.n	800fcbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcaa:	4b12      	ldr	r3, [pc, #72]	; (800fcf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	4b0f      	ldr	r3, [pc, #60]	; (800fcec <prvAddCurrentTaskToDelayedList+0x94>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	4610      	mov	r0, r2
 800fcb8:	f7fe f9e7 	bl	800e08a <vListInsert>
}
 800fcbc:	e010      	b.n	800fce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcbe:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	4b0a      	ldr	r3, [pc, #40]	; (800fcec <prvAddCurrentTaskToDelayedList+0x94>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3304      	adds	r3, #4
 800fcc8:	4619      	mov	r1, r3
 800fcca:	4610      	mov	r0, r2
 800fccc:	f7fe f9dd 	bl	800e08a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fcd0:	4b0a      	ldr	r3, [pc, #40]	; (800fcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d202      	bcs.n	800fce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fcda:	4a08      	ldr	r2, [pc, #32]	; (800fcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	6013      	str	r3, [r2, #0]
}
 800fce0:	bf00      	nop
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	20002550 	.word	0x20002550
 800fcec:	20002078 	.word	0x20002078
 800fcf0:	20002538 	.word	0x20002538
 800fcf4:	20002508 	.word	0x20002508
 800fcf8:	20002504 	.word	0x20002504
 800fcfc:	2000256c 	.word	0x2000256c

0800fd00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08a      	sub	sp, #40	; 0x28
 800fd04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd06:	2300      	movs	r3, #0
 800fd08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd0a:	f000 fb07 	bl	801031c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd0e:	4b1c      	ldr	r3, [pc, #112]	; (800fd80 <xTimerCreateTimerTask+0x80>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d021      	beq.n	800fd5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd1e:	1d3a      	adds	r2, r7, #4
 800fd20:	f107 0108 	add.w	r1, r7, #8
 800fd24:	f107 030c 	add.w	r3, r7, #12
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe f943 	bl	800dfb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd2e:	6879      	ldr	r1, [r7, #4]
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	9202      	str	r2, [sp, #8]
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	2302      	movs	r3, #2
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	460a      	mov	r2, r1
 800fd40:	4910      	ldr	r1, [pc, #64]	; (800fd84 <xTimerCreateTimerTask+0x84>)
 800fd42:	4811      	ldr	r0, [pc, #68]	; (800fd88 <xTimerCreateTimerTask+0x88>)
 800fd44:	f7fe fef0 	bl	800eb28 <xTaskCreateStatic>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	4a10      	ldr	r2, [pc, #64]	; (800fd8c <xTimerCreateTimerTask+0x8c>)
 800fd4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fd4e:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <xTimerCreateTimerTask+0x8c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d001      	beq.n	800fd5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fd56:	2301      	movs	r3, #1
 800fd58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d10a      	bne.n	800fd76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	613b      	str	r3, [r7, #16]
}
 800fd72:	bf00      	nop
 800fd74:	e7fe      	b.n	800fd74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fd76:	697b      	ldr	r3, [r7, #20]
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3718      	adds	r7, #24
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	200025a8 	.word	0x200025a8
 800fd84:	08016ab4 	.word	0x08016ab4
 800fd88:	0800fec5 	.word	0x0800fec5
 800fd8c:	200025ac 	.word	0x200025ac

0800fd90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b08a      	sub	sp, #40	; 0x28
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
 800fd9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10a      	bne.n	800fdbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800fda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	623b      	str	r3, [r7, #32]
}
 800fdba:	bf00      	nop
 800fdbc:	e7fe      	b.n	800fdbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fdbe:	4b1a      	ldr	r3, [pc, #104]	; (800fe28 <xTimerGenericCommand+0x98>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d02a      	beq.n	800fe1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	2b05      	cmp	r3, #5
 800fdd6:	dc18      	bgt.n	800fe0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fdd8:	f7ff fcc4 	bl	800f764 <xTaskGetSchedulerState>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b02      	cmp	r3, #2
 800fde0:	d109      	bne.n	800fdf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fde2:	4b11      	ldr	r3, [pc, #68]	; (800fe28 <xTimerGenericCommand+0x98>)
 800fde4:	6818      	ldr	r0, [r3, #0]
 800fde6:	f107 0110 	add.w	r1, r7, #16
 800fdea:	2300      	movs	r3, #0
 800fdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdee:	f7fe fab3 	bl	800e358 <xQueueGenericSend>
 800fdf2:	6278      	str	r0, [r7, #36]	; 0x24
 800fdf4:	e012      	b.n	800fe1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fdf6:	4b0c      	ldr	r3, [pc, #48]	; (800fe28 <xTimerGenericCommand+0x98>)
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	f107 0110 	add.w	r1, r7, #16
 800fdfe:	2300      	movs	r3, #0
 800fe00:	2200      	movs	r2, #0
 800fe02:	f7fe faa9 	bl	800e358 <xQueueGenericSend>
 800fe06:	6278      	str	r0, [r7, #36]	; 0x24
 800fe08:	e008      	b.n	800fe1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe0a:	4b07      	ldr	r3, [pc, #28]	; (800fe28 <xTimerGenericCommand+0x98>)
 800fe0c:	6818      	ldr	r0, [r3, #0]
 800fe0e:	f107 0110 	add.w	r1, r7, #16
 800fe12:	2300      	movs	r3, #0
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	f7fe fb9d 	bl	800e554 <xQueueGenericSendFromISR>
 800fe1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3728      	adds	r7, #40	; 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	200025a8 	.word	0x200025a8

0800fe2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b088      	sub	sp, #32
 800fe30:	af02      	add	r7, sp, #8
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe36:	4b22      	ldr	r3, [pc, #136]	; (800fec0 <prvProcessExpiredTimer+0x94>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	3304      	adds	r3, #4
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fe f959 	bl	800e0fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe50:	f003 0304 	and.w	r3, r3, #4
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d022      	beq.n	800fe9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	699a      	ldr	r2, [r3, #24]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	18d1      	adds	r1, r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	683a      	ldr	r2, [r7, #0]
 800fe64:	6978      	ldr	r0, [r7, #20]
 800fe66:	f000 f8d1 	bl	801000c <prvInsertTimerInActiveList>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d01f      	beq.n	800feb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe70:	2300      	movs	r3, #0
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	2300      	movs	r3, #0
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	2100      	movs	r1, #0
 800fe7a:	6978      	ldr	r0, [r7, #20]
 800fe7c:	f7ff ff88 	bl	800fd90 <xTimerGenericCommand>
 800fe80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d113      	bne.n	800feb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	60fb      	str	r3, [r7, #12]
}
 800fe9a:	bf00      	nop
 800fe9c:	e7fe      	b.n	800fe9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fea4:	f023 0301 	bic.w	r3, r3, #1
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	6978      	ldr	r0, [r7, #20]
 800feb6:	4798      	blx	r3
}
 800feb8:	bf00      	nop
 800feba:	3718      	adds	r7, #24
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	200025a0 	.word	0x200025a0

0800fec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fecc:	f107 0308 	add.w	r3, r7, #8
 800fed0:	4618      	mov	r0, r3
 800fed2:	f000 f857 	bl	800ff84 <prvGetNextExpireTime>
 800fed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	4619      	mov	r1, r3
 800fedc:	68f8      	ldr	r0, [r7, #12]
 800fede:	f000 f803 	bl	800fee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fee2:	f000 f8d5 	bl	8010090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fee6:	e7f1      	b.n	800fecc <prvTimerTask+0x8>

0800fee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fef2:	f7ff f855 	bl	800efa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fef6:	f107 0308 	add.w	r3, r7, #8
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 f866 	bl	800ffcc <prvSampleTimeNow>
 800ff00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d130      	bne.n	800ff6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <prvProcessTimerOrBlockTask+0x3c>
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d806      	bhi.n	800ff24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff16:	f7ff f851 	bl	800efbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff1a:	68f9      	ldr	r1, [r7, #12]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7ff ff85 	bl	800fe2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff22:	e024      	b.n	800ff6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d008      	beq.n	800ff3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff2a:	4b13      	ldr	r3, [pc, #76]	; (800ff78 <prvProcessTimerOrBlockTask+0x90>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d101      	bne.n	800ff38 <prvProcessTimerOrBlockTask+0x50>
 800ff34:	2301      	movs	r3, #1
 800ff36:	e000      	b.n	800ff3a <prvProcessTimerOrBlockTask+0x52>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff3c:	4b0f      	ldr	r3, [pc, #60]	; (800ff7c <prvProcessTimerOrBlockTask+0x94>)
 800ff3e:	6818      	ldr	r0, [r3, #0]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	1ad3      	subs	r3, r2, r3
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	f7fe fdb9 	bl	800eac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ff4e:	f7ff f835 	bl	800efbc <xTaskResumeAll>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10a      	bne.n	800ff6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ff58:	4b09      	ldr	r3, [pc, #36]	; (800ff80 <prvProcessTimerOrBlockTask+0x98>)
 800ff5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff5e:	601a      	str	r2, [r3, #0]
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	f3bf 8f6f 	isb	sy
}
 800ff68:	e001      	b.n	800ff6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ff6a:	f7ff f827 	bl	800efbc <xTaskResumeAll>
}
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	200025a4 	.word	0x200025a4
 800ff7c:	200025a8 	.word	0x200025a8
 800ff80:	e000ed04 	.word	0xe000ed04

0800ff84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ff84:	b480      	push	{r7}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ff8c:	4b0e      	ldr	r3, [pc, #56]	; (800ffc8 <prvGetNextExpireTime+0x44>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <prvGetNextExpireTime+0x16>
 800ff96:	2201      	movs	r2, #1
 800ff98:	e000      	b.n	800ff9c <prvGetNextExpireTime+0x18>
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d105      	bne.n	800ffb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffa8:	4b07      	ldr	r3, [pc, #28]	; (800ffc8 <prvGetNextExpireTime+0x44>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	60fb      	str	r3, [r7, #12]
 800ffb2:	e001      	b.n	800ffb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3714      	adds	r7, #20
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	200025a0 	.word	0x200025a0

0800ffcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ffd4:	f7ff f890 	bl	800f0f8 <xTaskGetTickCount>
 800ffd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ffda:	4b0b      	ldr	r3, [pc, #44]	; (8010008 <prvSampleTimeNow+0x3c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d205      	bcs.n	800fff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ffe4:	f000 f936 	bl	8010254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2201      	movs	r2, #1
 800ffec:	601a      	str	r2, [r3, #0]
 800ffee:	e002      	b.n	800fff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fff6:	4a04      	ldr	r2, [pc, #16]	; (8010008 <prvSampleTimeNow+0x3c>)
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fffc:	68fb      	ldr	r3, [r7, #12]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	200025b0 	.word	0x200025b0

0801000c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
 8010018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801001a:	2300      	movs	r3, #0
 801001c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	429a      	cmp	r2, r3
 8010030:	d812      	bhi.n	8010058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	1ad2      	subs	r2, r2, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	699b      	ldr	r3, [r3, #24]
 801003c:	429a      	cmp	r2, r3
 801003e:	d302      	bcc.n	8010046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010040:	2301      	movs	r3, #1
 8010042:	617b      	str	r3, [r7, #20]
 8010044:	e01b      	b.n	801007e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010046:	4b10      	ldr	r3, [pc, #64]	; (8010088 <prvInsertTimerInActiveList+0x7c>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	3304      	adds	r3, #4
 801004e:	4619      	mov	r1, r3
 8010050:	4610      	mov	r0, r2
 8010052:	f7fe f81a 	bl	800e08a <vListInsert>
 8010056:	e012      	b.n	801007e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	d206      	bcs.n	801006e <prvInsertTimerInActiveList+0x62>
 8010060:	68ba      	ldr	r2, [r7, #8]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d302      	bcc.n	801006e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010068:	2301      	movs	r3, #1
 801006a:	617b      	str	r3, [r7, #20]
 801006c:	e007      	b.n	801007e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801006e:	4b07      	ldr	r3, [pc, #28]	; (801008c <prvInsertTimerInActiveList+0x80>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3304      	adds	r3, #4
 8010076:	4619      	mov	r1, r3
 8010078:	4610      	mov	r0, r2
 801007a:	f7fe f806 	bl	800e08a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801007e:	697b      	ldr	r3, [r7, #20]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3718      	adds	r7, #24
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	200025a4 	.word	0x200025a4
 801008c:	200025a0 	.word	0x200025a0

08010090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b08e      	sub	sp, #56	; 0x38
 8010094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010096:	e0ca      	b.n	801022e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	da18      	bge.n	80100d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801009e:	1d3b      	adds	r3, r7, #4
 80100a0:	3304      	adds	r3, #4
 80100a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80100a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10a      	bne.n	80100c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	61fb      	str	r3, [r7, #28]
}
 80100bc:	bf00      	nop
 80100be:	e7fe      	b.n	80100be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80100c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100c6:	6850      	ldr	r0, [r2, #4]
 80100c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100ca:	6892      	ldr	r2, [r2, #8]
 80100cc:	4611      	mov	r1, r2
 80100ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f2c0 80ab 	blt.w	801022e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80100dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e6:	3304      	adds	r3, #4
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fe f807 	bl	800e0fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80100ee:	463b      	mov	r3, r7
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff ff6b 	bl	800ffcc <prvSampleTimeNow>
 80100f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b09      	cmp	r3, #9
 80100fc:	f200 8096 	bhi.w	801022c <prvProcessReceivedCommands+0x19c>
 8010100:	a201      	add	r2, pc, #4	; (adr r2, 8010108 <prvProcessReceivedCommands+0x78>)
 8010102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010106:	bf00      	nop
 8010108:	08010131 	.word	0x08010131
 801010c:	08010131 	.word	0x08010131
 8010110:	08010131 	.word	0x08010131
 8010114:	080101a5 	.word	0x080101a5
 8010118:	080101b9 	.word	0x080101b9
 801011c:	08010203 	.word	0x08010203
 8010120:	08010131 	.word	0x08010131
 8010124:	08010131 	.word	0x08010131
 8010128:	080101a5 	.word	0x080101a5
 801012c:	080101b9 	.word	0x080101b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010136:	f043 0301 	orr.w	r3, r3, #1
 801013a:	b2da      	uxtb	r2, r3
 801013c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	18d1      	adds	r1, r2, r3
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801014e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010150:	f7ff ff5c 	bl	801000c <prvInsertTimerInActiveList>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d069      	beq.n	801022e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801015a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015c:	6a1b      	ldr	r3, [r3, #32]
 801015e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010168:	f003 0304 	and.w	r3, r3, #4
 801016c:	2b00      	cmp	r3, #0
 801016e:	d05e      	beq.n	801022e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010170:	68ba      	ldr	r2, [r7, #8]
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	699b      	ldr	r3, [r3, #24]
 8010176:	441a      	add	r2, r3
 8010178:	2300      	movs	r3, #0
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	2300      	movs	r3, #0
 801017e:	2100      	movs	r1, #0
 8010180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010182:	f7ff fe05 	bl	800fd90 <xTimerGenericCommand>
 8010186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010188:	6a3b      	ldr	r3, [r7, #32]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d14f      	bne.n	801022e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	61bb      	str	r3, [r7, #24]
}
 80101a0:	bf00      	nop
 80101a2:	e7fe      	b.n	80101a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80101a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101aa:	f023 0301 	bic.w	r3, r3, #1
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80101b6:	e03a      	b.n	801022e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80101b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80101be:	f043 0301 	orr.w	r3, r3, #1
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80101d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d2:	699b      	ldr	r3, [r3, #24]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d10a      	bne.n	80101ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80101d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101dc:	f383 8811 	msr	BASEPRI, r3
 80101e0:	f3bf 8f6f 	isb	sy
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	617b      	str	r3, [r7, #20]
}
 80101ea:	bf00      	nop
 80101ec:	e7fe      	b.n	80101ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	699a      	ldr	r2, [r3, #24]
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	18d1      	adds	r1, r2, r3
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101fc:	f7ff ff06 	bl	801000c <prvInsertTimerInActiveList>
					break;
 8010200:	e015      	b.n	801022e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010208:	f003 0302 	and.w	r3, r3, #2
 801020c:	2b00      	cmp	r3, #0
 801020e:	d103      	bne.n	8010218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010212:	f000 fbdd 	bl	80109d0 <vPortFree>
 8010216:	e00a      	b.n	801022e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801021e:	f023 0301 	bic.w	r3, r3, #1
 8010222:	b2da      	uxtb	r2, r3
 8010224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801022a:	e000      	b.n	801022e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801022c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801022e:	4b08      	ldr	r3, [pc, #32]	; (8010250 <prvProcessReceivedCommands+0x1c0>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	1d39      	adds	r1, r7, #4
 8010234:	2200      	movs	r2, #0
 8010236:	4618      	mov	r0, r3
 8010238:	f7fe fa28 	bl	800e68c <xQueueReceive>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	f47f af2a 	bne.w	8010098 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010244:	bf00      	nop
 8010246:	bf00      	nop
 8010248:	3730      	adds	r7, #48	; 0x30
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	200025a8 	.word	0x200025a8

08010254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b088      	sub	sp, #32
 8010258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801025a:	e048      	b.n	80102ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801025c:	4b2d      	ldr	r3, [pc, #180]	; (8010314 <prvSwitchTimerLists+0xc0>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010266:	4b2b      	ldr	r3, [pc, #172]	; (8010314 <prvSwitchTimerLists+0xc0>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	3304      	adds	r3, #4
 8010274:	4618      	mov	r0, r3
 8010276:	f7fd ff41 	bl	800e0fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	6a1b      	ldr	r3, [r3, #32]
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010288:	f003 0304 	and.w	r3, r3, #4
 801028c:	2b00      	cmp	r3, #0
 801028e:	d02e      	beq.n	80102ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	693a      	ldr	r2, [r7, #16]
 8010296:	4413      	add	r3, r2
 8010298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801029a:	68ba      	ldr	r2, [r7, #8]
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d90e      	bls.n	80102c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80102ae:	4b19      	ldr	r3, [pc, #100]	; (8010314 <prvSwitchTimerLists+0xc0>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	3304      	adds	r3, #4
 80102b6:	4619      	mov	r1, r3
 80102b8:	4610      	mov	r0, r2
 80102ba:	f7fd fee6 	bl	800e08a <vListInsert>
 80102be:	e016      	b.n	80102ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102c0:	2300      	movs	r3, #0
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	2300      	movs	r3, #0
 80102c6:	693a      	ldr	r2, [r7, #16]
 80102c8:	2100      	movs	r1, #0
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f7ff fd60 	bl	800fd90 <xTimerGenericCommand>
 80102d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d10a      	bne.n	80102ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	603b      	str	r3, [r7, #0]
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102ee:	4b09      	ldr	r3, [pc, #36]	; (8010314 <prvSwitchTimerLists+0xc0>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1b1      	bne.n	801025c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80102f8:	4b06      	ldr	r3, [pc, #24]	; (8010314 <prvSwitchTimerLists+0xc0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80102fe:	4b06      	ldr	r3, [pc, #24]	; (8010318 <prvSwitchTimerLists+0xc4>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4a04      	ldr	r2, [pc, #16]	; (8010314 <prvSwitchTimerLists+0xc0>)
 8010304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010306:	4a04      	ldr	r2, [pc, #16]	; (8010318 <prvSwitchTimerLists+0xc4>)
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	6013      	str	r3, [r2, #0]
}
 801030c:	bf00      	nop
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	200025a0 	.word	0x200025a0
 8010318:	200025a4 	.word	0x200025a4

0801031c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010322:	f000 f967 	bl	80105f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010326:	4b15      	ldr	r3, [pc, #84]	; (801037c <prvCheckForValidListAndQueue+0x60>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d120      	bne.n	8010370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801032e:	4814      	ldr	r0, [pc, #80]	; (8010380 <prvCheckForValidListAndQueue+0x64>)
 8010330:	f7fd fe5a 	bl	800dfe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010334:	4813      	ldr	r0, [pc, #76]	; (8010384 <prvCheckForValidListAndQueue+0x68>)
 8010336:	f7fd fe57 	bl	800dfe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801033a:	4b13      	ldr	r3, [pc, #76]	; (8010388 <prvCheckForValidListAndQueue+0x6c>)
 801033c:	4a10      	ldr	r2, [pc, #64]	; (8010380 <prvCheckForValidListAndQueue+0x64>)
 801033e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010340:	4b12      	ldr	r3, [pc, #72]	; (801038c <prvCheckForValidListAndQueue+0x70>)
 8010342:	4a10      	ldr	r2, [pc, #64]	; (8010384 <prvCheckForValidListAndQueue+0x68>)
 8010344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010346:	2300      	movs	r3, #0
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	4b11      	ldr	r3, [pc, #68]	; (8010390 <prvCheckForValidListAndQueue+0x74>)
 801034c:	4a11      	ldr	r2, [pc, #68]	; (8010394 <prvCheckForValidListAndQueue+0x78>)
 801034e:	2110      	movs	r1, #16
 8010350:	200a      	movs	r0, #10
 8010352:	f7fd ff65 	bl	800e220 <xQueueGenericCreateStatic>
 8010356:	4603      	mov	r3, r0
 8010358:	4a08      	ldr	r2, [pc, #32]	; (801037c <prvCheckForValidListAndQueue+0x60>)
 801035a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801035c:	4b07      	ldr	r3, [pc, #28]	; (801037c <prvCheckForValidListAndQueue+0x60>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d005      	beq.n	8010370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010364:	4b05      	ldr	r3, [pc, #20]	; (801037c <prvCheckForValidListAndQueue+0x60>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	490b      	ldr	r1, [pc, #44]	; (8010398 <prvCheckForValidListAndQueue+0x7c>)
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fb7e 	bl	800ea6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010370:	f000 f970 	bl	8010654 <vPortExitCritical>
}
 8010374:	bf00      	nop
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	200025a8 	.word	0x200025a8
 8010380:	20002578 	.word	0x20002578
 8010384:	2000258c 	.word	0x2000258c
 8010388:	200025a0 	.word	0x200025a0
 801038c:	200025a4 	.word	0x200025a4
 8010390:	20002654 	.word	0x20002654
 8010394:	200025b4 	.word	0x200025b4
 8010398:	08016abc 	.word	0x08016abc

0801039c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	3b04      	subs	r3, #4
 80103ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80103b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3b04      	subs	r3, #4
 80103ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	f023 0201 	bic.w	r2, r3, #1
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3b04      	subs	r3, #4
 80103ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80103cc:	4a0c      	ldr	r2, [pc, #48]	; (8010400 <pxPortInitialiseStack+0x64>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	3b14      	subs	r3, #20
 80103d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	3b04      	subs	r3, #4
 80103e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f06f 0202 	mvn.w	r2, #2
 80103ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	3b20      	subs	r3, #32
 80103f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80103f2:	68fb      	ldr	r3, [r7, #12]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3714      	adds	r7, #20
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr
 8010400:	08010405 	.word	0x08010405

08010404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801040e:	4b12      	ldr	r3, [pc, #72]	; (8010458 <prvTaskExitError+0x54>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010416:	d00a      	beq.n	801042e <prvTaskExitError+0x2a>
	__asm volatile
 8010418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041c:	f383 8811 	msr	BASEPRI, r3
 8010420:	f3bf 8f6f 	isb	sy
 8010424:	f3bf 8f4f 	dsb	sy
 8010428:	60fb      	str	r3, [r7, #12]
}
 801042a:	bf00      	nop
 801042c:	e7fe      	b.n	801042c <prvTaskExitError+0x28>
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010432:	f383 8811 	msr	BASEPRI, r3
 8010436:	f3bf 8f6f 	isb	sy
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	60bb      	str	r3, [r7, #8]
}
 8010440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010442:	bf00      	nop
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d0fc      	beq.n	8010444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801044a:	bf00      	nop
 801044c:	bf00      	nop
 801044e:	3714      	adds	r7, #20
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr
 8010458:	20000110 	.word	0x20000110
 801045c:	00000000 	.word	0x00000000

08010460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010460:	4b07      	ldr	r3, [pc, #28]	; (8010480 <pxCurrentTCBConst2>)
 8010462:	6819      	ldr	r1, [r3, #0]
 8010464:	6808      	ldr	r0, [r1, #0]
 8010466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801046a:	f380 8809 	msr	PSP, r0
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f04f 0000 	mov.w	r0, #0
 8010476:	f380 8811 	msr	BASEPRI, r0
 801047a:	4770      	bx	lr
 801047c:	f3af 8000 	nop.w

08010480 <pxCurrentTCBConst2>:
 8010480:	20002078 	.word	0x20002078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010484:	bf00      	nop
 8010486:	bf00      	nop

08010488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010488:	4808      	ldr	r0, [pc, #32]	; (80104ac <prvPortStartFirstTask+0x24>)
 801048a:	6800      	ldr	r0, [r0, #0]
 801048c:	6800      	ldr	r0, [r0, #0]
 801048e:	f380 8808 	msr	MSP, r0
 8010492:	f04f 0000 	mov.w	r0, #0
 8010496:	f380 8814 	msr	CONTROL, r0
 801049a:	b662      	cpsie	i
 801049c:	b661      	cpsie	f
 801049e:	f3bf 8f4f 	dsb	sy
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	df00      	svc	0
 80104a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104aa:	bf00      	nop
 80104ac:	e000ed08 	.word	0xe000ed08

080104b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80104b6:	4b46      	ldr	r3, [pc, #280]	; (80105d0 <xPortStartScheduler+0x120>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a46      	ldr	r2, [pc, #280]	; (80105d4 <xPortStartScheduler+0x124>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d10a      	bne.n	80104d6 <xPortStartScheduler+0x26>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	613b      	str	r3, [r7, #16]
}
 80104d2:	bf00      	nop
 80104d4:	e7fe      	b.n	80104d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80104d6:	4b3e      	ldr	r3, [pc, #248]	; (80105d0 <xPortStartScheduler+0x120>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4a3f      	ldr	r2, [pc, #252]	; (80105d8 <xPortStartScheduler+0x128>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d10a      	bne.n	80104f6 <xPortStartScheduler+0x46>
	__asm volatile
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	60fb      	str	r3, [r7, #12]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80104f6:	4b39      	ldr	r3, [pc, #228]	; (80105dc <xPortStartScheduler+0x12c>)
 80104f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	22ff      	movs	r2, #255	; 0xff
 8010506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	b2db      	uxtb	r3, r3
 801050e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010510:	78fb      	ldrb	r3, [r7, #3]
 8010512:	b2db      	uxtb	r3, r3
 8010514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010518:	b2da      	uxtb	r2, r3
 801051a:	4b31      	ldr	r3, [pc, #196]	; (80105e0 <xPortStartScheduler+0x130>)
 801051c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801051e:	4b31      	ldr	r3, [pc, #196]	; (80105e4 <xPortStartScheduler+0x134>)
 8010520:	2207      	movs	r2, #7
 8010522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010524:	e009      	b.n	801053a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010526:	4b2f      	ldr	r3, [pc, #188]	; (80105e4 <xPortStartScheduler+0x134>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	3b01      	subs	r3, #1
 801052c:	4a2d      	ldr	r2, [pc, #180]	; (80105e4 <xPortStartScheduler+0x134>)
 801052e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010530:	78fb      	ldrb	r3, [r7, #3]
 8010532:	b2db      	uxtb	r3, r3
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	b2db      	uxtb	r3, r3
 8010538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801053a:	78fb      	ldrb	r3, [r7, #3]
 801053c:	b2db      	uxtb	r3, r3
 801053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010542:	2b80      	cmp	r3, #128	; 0x80
 8010544:	d0ef      	beq.n	8010526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010546:	4b27      	ldr	r3, [pc, #156]	; (80105e4 <xPortStartScheduler+0x134>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f1c3 0307 	rsb	r3, r3, #7
 801054e:	2b04      	cmp	r3, #4
 8010550:	d00a      	beq.n	8010568 <xPortStartScheduler+0xb8>
	__asm volatile
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	60bb      	str	r3, [r7, #8]
}
 8010564:	bf00      	nop
 8010566:	e7fe      	b.n	8010566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010568:	4b1e      	ldr	r3, [pc, #120]	; (80105e4 <xPortStartScheduler+0x134>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	021b      	lsls	r3, r3, #8
 801056e:	4a1d      	ldr	r2, [pc, #116]	; (80105e4 <xPortStartScheduler+0x134>)
 8010570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010572:	4b1c      	ldr	r3, [pc, #112]	; (80105e4 <xPortStartScheduler+0x134>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801057a:	4a1a      	ldr	r2, [pc, #104]	; (80105e4 <xPortStartScheduler+0x134>)
 801057c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	b2da      	uxtb	r2, r3
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010586:	4b18      	ldr	r3, [pc, #96]	; (80105e8 <xPortStartScheduler+0x138>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4a17      	ldr	r2, [pc, #92]	; (80105e8 <xPortStartScheduler+0x138>)
 801058c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010592:	4b15      	ldr	r3, [pc, #84]	; (80105e8 <xPortStartScheduler+0x138>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4a14      	ldr	r2, [pc, #80]	; (80105e8 <xPortStartScheduler+0x138>)
 8010598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801059c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801059e:	f000 f8dd 	bl	801075c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105a2:	4b12      	ldr	r3, [pc, #72]	; (80105ec <xPortStartScheduler+0x13c>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105a8:	f000 f8fc 	bl	80107a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80105ac:	4b10      	ldr	r3, [pc, #64]	; (80105f0 <xPortStartScheduler+0x140>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a0f      	ldr	r2, [pc, #60]	; (80105f0 <xPortStartScheduler+0x140>)
 80105b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80105b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80105b8:	f7ff ff66 	bl	8010488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80105bc:	f7fe fe66 	bl	800f28c <vTaskSwitchContext>
	prvTaskExitError();
 80105c0:	f7ff ff20 	bl	8010404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3718      	adds	r7, #24
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	e000ed00 	.word	0xe000ed00
 80105d4:	410fc271 	.word	0x410fc271
 80105d8:	410fc270 	.word	0x410fc270
 80105dc:	e000e400 	.word	0xe000e400
 80105e0:	200026a4 	.word	0x200026a4
 80105e4:	200026a8 	.word	0x200026a8
 80105e8:	e000ed20 	.word	0xe000ed20
 80105ec:	20000110 	.word	0x20000110
 80105f0:	e000ef34 	.word	0xe000ef34

080105f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
	__asm volatile
 80105fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fe:	f383 8811 	msr	BASEPRI, r3
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	607b      	str	r3, [r7, #4]
}
 801060c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801060e:	4b0f      	ldr	r3, [pc, #60]	; (801064c <vPortEnterCritical+0x58>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3301      	adds	r3, #1
 8010614:	4a0d      	ldr	r2, [pc, #52]	; (801064c <vPortEnterCritical+0x58>)
 8010616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010618:	4b0c      	ldr	r3, [pc, #48]	; (801064c <vPortEnterCritical+0x58>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d10f      	bne.n	8010640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010620:	4b0b      	ldr	r3, [pc, #44]	; (8010650 <vPortEnterCritical+0x5c>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	b2db      	uxtb	r3, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00a      	beq.n	8010640 <vPortEnterCritical+0x4c>
	__asm volatile
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	603b      	str	r3, [r7, #0]
}
 801063c:	bf00      	nop
 801063e:	e7fe      	b.n	801063e <vPortEnterCritical+0x4a>
	}
}
 8010640:	bf00      	nop
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	20000110 	.word	0x20000110
 8010650:	e000ed04 	.word	0xe000ed04

08010654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801065a:	4b12      	ldr	r3, [pc, #72]	; (80106a4 <vPortExitCritical+0x50>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d10a      	bne.n	8010678 <vPortExitCritical+0x24>
	__asm volatile
 8010662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010666:	f383 8811 	msr	BASEPRI, r3
 801066a:	f3bf 8f6f 	isb	sy
 801066e:	f3bf 8f4f 	dsb	sy
 8010672:	607b      	str	r3, [r7, #4]
}
 8010674:	bf00      	nop
 8010676:	e7fe      	b.n	8010676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010678:	4b0a      	ldr	r3, [pc, #40]	; (80106a4 <vPortExitCritical+0x50>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	3b01      	subs	r3, #1
 801067e:	4a09      	ldr	r2, [pc, #36]	; (80106a4 <vPortExitCritical+0x50>)
 8010680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010682:	4b08      	ldr	r3, [pc, #32]	; (80106a4 <vPortExitCritical+0x50>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d105      	bne.n	8010696 <vPortExitCritical+0x42>
 801068a:	2300      	movs	r3, #0
 801068c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	f383 8811 	msr	BASEPRI, r3
}
 8010694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	20000110 	.word	0x20000110
	...

080106b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80106b0:	f3ef 8009 	mrs	r0, PSP
 80106b4:	f3bf 8f6f 	isb	sy
 80106b8:	4b15      	ldr	r3, [pc, #84]	; (8010710 <pxCurrentTCBConst>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	f01e 0f10 	tst.w	lr, #16
 80106c0:	bf08      	it	eq
 80106c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80106c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ca:	6010      	str	r0, [r2, #0]
 80106cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80106d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80106d4:	f380 8811 	msr	BASEPRI, r0
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f7fe fdd4 	bl	800f28c <vTaskSwitchContext>
 80106e4:	f04f 0000 	mov.w	r0, #0
 80106e8:	f380 8811 	msr	BASEPRI, r0
 80106ec:	bc09      	pop	{r0, r3}
 80106ee:	6819      	ldr	r1, [r3, #0]
 80106f0:	6808      	ldr	r0, [r1, #0]
 80106f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f6:	f01e 0f10 	tst.w	lr, #16
 80106fa:	bf08      	it	eq
 80106fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010700:	f380 8809 	msr	PSP, r0
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	f3af 8000 	nop.w

08010710 <pxCurrentTCBConst>:
 8010710:	20002078 	.word	0x20002078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010714:	bf00      	nop
 8010716:	bf00      	nop

08010718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
	__asm volatile
 801071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010722:	f383 8811 	msr	BASEPRI, r3
 8010726:	f3bf 8f6f 	isb	sy
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	607b      	str	r3, [r7, #4]
}
 8010730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010732:	f7fe fcf1 	bl	800f118 <xTaskIncrementTick>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d003      	beq.n	8010744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801073c:	4b06      	ldr	r3, [pc, #24]	; (8010758 <xPortSysTickHandler+0x40>)
 801073e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010742:	601a      	str	r2, [r3, #0]
 8010744:	2300      	movs	r3, #0
 8010746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	f383 8811 	msr	BASEPRI, r3
}
 801074e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	e000ed04 	.word	0xe000ed04

0801075c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801075c:	b480      	push	{r7}
 801075e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010760:	4b0b      	ldr	r3, [pc, #44]	; (8010790 <vPortSetupTimerInterrupt+0x34>)
 8010762:	2200      	movs	r2, #0
 8010764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010766:	4b0b      	ldr	r3, [pc, #44]	; (8010794 <vPortSetupTimerInterrupt+0x38>)
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801076c:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <vPortSetupTimerInterrupt+0x3c>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4a0a      	ldr	r2, [pc, #40]	; (801079c <vPortSetupTimerInterrupt+0x40>)
 8010772:	fba2 2303 	umull	r2, r3, r2, r3
 8010776:	099b      	lsrs	r3, r3, #6
 8010778:	4a09      	ldr	r2, [pc, #36]	; (80107a0 <vPortSetupTimerInterrupt+0x44>)
 801077a:	3b01      	subs	r3, #1
 801077c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801077e:	4b04      	ldr	r3, [pc, #16]	; (8010790 <vPortSetupTimerInterrupt+0x34>)
 8010780:	2207      	movs	r2, #7
 8010782:	601a      	str	r2, [r3, #0]
}
 8010784:	bf00      	nop
 8010786:	46bd      	mov	sp, r7
 8010788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078c:	4770      	bx	lr
 801078e:	bf00      	nop
 8010790:	e000e010 	.word	0xe000e010
 8010794:	e000e018 	.word	0xe000e018
 8010798:	200000a4 	.word	0x200000a4
 801079c:	10624dd3 	.word	0x10624dd3
 80107a0:	e000e014 	.word	0xe000e014

080107a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80107b4 <vPortEnableVFP+0x10>
 80107a8:	6801      	ldr	r1, [r0, #0]
 80107aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80107ae:	6001      	str	r1, [r0, #0]
 80107b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80107b2:	bf00      	nop
 80107b4:	e000ed88 	.word	0xe000ed88

080107b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80107b8:	b480      	push	{r7}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80107be:	f3ef 8305 	mrs	r3, IPSR
 80107c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b0f      	cmp	r3, #15
 80107c8:	d914      	bls.n	80107f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80107ca:	4a17      	ldr	r2, [pc, #92]	; (8010828 <vPortValidateInterruptPriority+0x70>)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	4413      	add	r3, r2
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80107d4:	4b15      	ldr	r3, [pc, #84]	; (801082c <vPortValidateInterruptPriority+0x74>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	7afa      	ldrb	r2, [r7, #11]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d20a      	bcs.n	80107f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	607b      	str	r3, [r7, #4]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80107f4:	4b0e      	ldr	r3, [pc, #56]	; (8010830 <vPortValidateInterruptPriority+0x78>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80107fc:	4b0d      	ldr	r3, [pc, #52]	; (8010834 <vPortValidateInterruptPriority+0x7c>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	429a      	cmp	r2, r3
 8010802:	d90a      	bls.n	801081a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	603b      	str	r3, [r7, #0]
}
 8010816:	bf00      	nop
 8010818:	e7fe      	b.n	8010818 <vPortValidateInterruptPriority+0x60>
	}
 801081a:	bf00      	nop
 801081c:	3714      	adds	r7, #20
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	e000e3f0 	.word	0xe000e3f0
 801082c:	200026a4 	.word	0x200026a4
 8010830:	e000ed0c 	.word	0xe000ed0c
 8010834:	200026a8 	.word	0x200026a8

08010838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	; 0x28
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010840:	2300      	movs	r3, #0
 8010842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010844:	f7fe fbac 	bl	800efa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010848:	4b5b      	ldr	r3, [pc, #364]	; (80109b8 <pvPortMalloc+0x180>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d101      	bne.n	8010854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010850:	f000 f920 	bl	8010a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010854:	4b59      	ldr	r3, [pc, #356]	; (80109bc <pvPortMalloc+0x184>)
 8010856:	681a      	ldr	r2, [r3, #0]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4013      	ands	r3, r2
 801085c:	2b00      	cmp	r3, #0
 801085e:	f040 8093 	bne.w	8010988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d01d      	beq.n	80108a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010868:	2208      	movs	r2, #8
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f003 0307 	and.w	r3, r3, #7
 8010876:	2b00      	cmp	r3, #0
 8010878:	d014      	beq.n	80108a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f023 0307 	bic.w	r3, r3, #7
 8010880:	3308      	adds	r3, #8
 8010882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f003 0307 	and.w	r3, r3, #7
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00a      	beq.n	80108a4 <pvPortMalloc+0x6c>
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	617b      	str	r3, [r7, #20]
}
 80108a0:	bf00      	nop
 80108a2:	e7fe      	b.n	80108a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d06e      	beq.n	8010988 <pvPortMalloc+0x150>
 80108aa:	4b45      	ldr	r3, [pc, #276]	; (80109c0 <pvPortMalloc+0x188>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d869      	bhi.n	8010988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80108b4:	4b43      	ldr	r3, [pc, #268]	; (80109c4 <pvPortMalloc+0x18c>)
 80108b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80108b8:	4b42      	ldr	r3, [pc, #264]	; (80109c4 <pvPortMalloc+0x18c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80108be:	e004      	b.n	80108ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80108c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80108ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d903      	bls.n	80108dc <pvPortMalloc+0xa4>
 80108d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1f1      	bne.n	80108c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80108dc:	4b36      	ldr	r3, [pc, #216]	; (80109b8 <pvPortMalloc+0x180>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d050      	beq.n	8010988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2208      	movs	r2, #8
 80108ec:	4413      	add	r3, r2
 80108ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	6a3b      	ldr	r3, [r7, #32]
 80108f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	1ad2      	subs	r2, r2, r3
 8010900:	2308      	movs	r3, #8
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	429a      	cmp	r2, r3
 8010906:	d91f      	bls.n	8010948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4413      	add	r3, r2
 801090e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	f003 0307 	and.w	r3, r3, #7
 8010916:	2b00      	cmp	r3, #0
 8010918:	d00a      	beq.n	8010930 <pvPortMalloc+0xf8>
	__asm volatile
 801091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	613b      	str	r3, [r7, #16]
}
 801092c:	bf00      	nop
 801092e:	e7fe      	b.n	801092e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	685a      	ldr	r2, [r3, #4]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	1ad2      	subs	r2, r2, r3
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010942:	69b8      	ldr	r0, [r7, #24]
 8010944:	f000 f908 	bl	8010b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010948:	4b1d      	ldr	r3, [pc, #116]	; (80109c0 <pvPortMalloc+0x188>)
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	4a1b      	ldr	r2, [pc, #108]	; (80109c0 <pvPortMalloc+0x188>)
 8010954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010956:	4b1a      	ldr	r3, [pc, #104]	; (80109c0 <pvPortMalloc+0x188>)
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	4b1b      	ldr	r3, [pc, #108]	; (80109c8 <pvPortMalloc+0x190>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	429a      	cmp	r2, r3
 8010960:	d203      	bcs.n	801096a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010962:	4b17      	ldr	r3, [pc, #92]	; (80109c0 <pvPortMalloc+0x188>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a18      	ldr	r2, [pc, #96]	; (80109c8 <pvPortMalloc+0x190>)
 8010968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	4b13      	ldr	r3, [pc, #76]	; (80109bc <pvPortMalloc+0x184>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	431a      	orrs	r2, r3
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097a:	2200      	movs	r2, #0
 801097c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801097e:	4b13      	ldr	r3, [pc, #76]	; (80109cc <pvPortMalloc+0x194>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	3301      	adds	r3, #1
 8010984:	4a11      	ldr	r2, [pc, #68]	; (80109cc <pvPortMalloc+0x194>)
 8010986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010988:	f7fe fb18 	bl	800efbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	f003 0307 	and.w	r3, r3, #7
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00a      	beq.n	80109ac <pvPortMalloc+0x174>
	__asm volatile
 8010996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099a:	f383 8811 	msr	BASEPRI, r3
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	60fb      	str	r3, [r7, #12]
}
 80109a8:	bf00      	nop
 80109aa:	e7fe      	b.n	80109aa <pvPortMalloc+0x172>
	return pvReturn;
 80109ac:	69fb      	ldr	r3, [r7, #28]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3728      	adds	r7, #40	; 0x28
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	20003a3c 	.word	0x20003a3c
 80109bc:	20003a50 	.word	0x20003a50
 80109c0:	20003a40 	.word	0x20003a40
 80109c4:	20003a34 	.word	0x20003a34
 80109c8:	20003a44 	.word	0x20003a44
 80109cc:	20003a48 	.word	0x20003a48

080109d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d04d      	beq.n	8010a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80109e2:	2308      	movs	r3, #8
 80109e4:	425b      	negs	r3, r3
 80109e6:	697a      	ldr	r2, [r7, #20]
 80109e8:	4413      	add	r3, r2
 80109ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	685a      	ldr	r2, [r3, #4]
 80109f4:	4b24      	ldr	r3, [pc, #144]	; (8010a88 <vPortFree+0xb8>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4013      	ands	r3, r2
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10a      	bne.n	8010a14 <vPortFree+0x44>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	60fb      	str	r3, [r7, #12]
}
 8010a10:	bf00      	nop
 8010a12:	e7fe      	b.n	8010a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00a      	beq.n	8010a32 <vPortFree+0x62>
	__asm volatile
 8010a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a20:	f383 8811 	msr	BASEPRI, r3
 8010a24:	f3bf 8f6f 	isb	sy
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	60bb      	str	r3, [r7, #8]
}
 8010a2e:	bf00      	nop
 8010a30:	e7fe      	b.n	8010a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	685a      	ldr	r2, [r3, #4]
 8010a36:	4b14      	ldr	r3, [pc, #80]	; (8010a88 <vPortFree+0xb8>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4013      	ands	r3, r2
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d01e      	beq.n	8010a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d11a      	bne.n	8010a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	685a      	ldr	r2, [r3, #4]
 8010a4c:	4b0e      	ldr	r3, [pc, #56]	; (8010a88 <vPortFree+0xb8>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	43db      	mvns	r3, r3
 8010a52:	401a      	ands	r2, r3
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010a58:	f7fe faa2 	bl	800efa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	4b0a      	ldr	r3, [pc, #40]	; (8010a8c <vPortFree+0xbc>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4413      	add	r3, r2
 8010a66:	4a09      	ldr	r2, [pc, #36]	; (8010a8c <vPortFree+0xbc>)
 8010a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010a6a:	6938      	ldr	r0, [r7, #16]
 8010a6c:	f000 f874 	bl	8010b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010a70:	4b07      	ldr	r3, [pc, #28]	; (8010a90 <vPortFree+0xc0>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	3301      	adds	r3, #1
 8010a76:	4a06      	ldr	r2, [pc, #24]	; (8010a90 <vPortFree+0xc0>)
 8010a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010a7a:	f7fe fa9f 	bl	800efbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010a7e:	bf00      	nop
 8010a80:	3718      	adds	r7, #24
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	20003a50 	.word	0x20003a50
 8010a8c:	20003a40 	.word	0x20003a40
 8010a90:	20003a4c 	.word	0x20003a4c

08010a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8010a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010aa0:	4b27      	ldr	r3, [pc, #156]	; (8010b40 <prvHeapInit+0xac>)
 8010aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f003 0307 	and.w	r3, r3, #7
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00c      	beq.n	8010ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3307      	adds	r3, #7
 8010ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f023 0307 	bic.w	r3, r3, #7
 8010aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	4a1f      	ldr	r2, [pc, #124]	; (8010b40 <prvHeapInit+0xac>)
 8010ac4:	4413      	add	r3, r2
 8010ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010acc:	4a1d      	ldr	r2, [pc, #116]	; (8010b44 <prvHeapInit+0xb0>)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010ad2:	4b1c      	ldr	r3, [pc, #112]	; (8010b44 <prvHeapInit+0xb0>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	4413      	add	r3, r2
 8010ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010ae0:	2208      	movs	r2, #8
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	1a9b      	subs	r3, r3, r2
 8010ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f023 0307 	bic.w	r3, r3, #7
 8010aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	4a15      	ldr	r2, [pc, #84]	; (8010b48 <prvHeapInit+0xb4>)
 8010af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010af6:	4b14      	ldr	r3, [pc, #80]	; (8010b48 <prvHeapInit+0xb4>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2200      	movs	r2, #0
 8010afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010afe:	4b12      	ldr	r3, [pc, #72]	; (8010b48 <prvHeapInit+0xb4>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2200      	movs	r2, #0
 8010b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	1ad2      	subs	r2, r2, r3
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b14:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <prvHeapInit+0xb4>)
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	4a0a      	ldr	r2, [pc, #40]	; (8010b4c <prvHeapInit+0xb8>)
 8010b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	4a09      	ldr	r2, [pc, #36]	; (8010b50 <prvHeapInit+0xbc>)
 8010b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b2c:	4b09      	ldr	r3, [pc, #36]	; (8010b54 <prvHeapInit+0xc0>)
 8010b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010b32:	601a      	str	r2, [r3, #0]
}
 8010b34:	bf00      	nop
 8010b36:	3714      	adds	r7, #20
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr
 8010b40:	200026ac 	.word	0x200026ac
 8010b44:	20003a34 	.word	0x20003a34
 8010b48:	20003a3c 	.word	0x20003a3c
 8010b4c:	20003a44 	.word	0x20003a44
 8010b50:	20003a40 	.word	0x20003a40
 8010b54:	20003a50 	.word	0x20003a50

08010b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010b60:	4b28      	ldr	r3, [pc, #160]	; (8010c04 <prvInsertBlockIntoFreeList+0xac>)
 8010b62:	60fb      	str	r3, [r7, #12]
 8010b64:	e002      	b.n	8010b6c <prvInsertBlockIntoFreeList+0x14>
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d8f7      	bhi.n	8010b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	4413      	add	r3, r2
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d108      	bne.n	8010b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	685a      	ldr	r2, [r3, #4]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	441a      	add	r2, r3
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	441a      	add	r2, r3
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d118      	bne.n	8010be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	4b15      	ldr	r3, [pc, #84]	; (8010c08 <prvInsertBlockIntoFreeList+0xb0>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d00d      	beq.n	8010bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	685a      	ldr	r2, [r3, #4]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	441a      	add	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	e008      	b.n	8010be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010bd6:	4b0c      	ldr	r3, [pc, #48]	; (8010c08 <prvInsertBlockIntoFreeList+0xb0>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	601a      	str	r2, [r3, #0]
 8010bde:	e003      	b.n	8010be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d002      	beq.n	8010bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bf6:	bf00      	nop
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	20003a34 	.word	0x20003a34
 8010c08:	20003a3c 	.word	0x20003a3c

08010c0c <__assert_func>:
 8010c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c0e:	4614      	mov	r4, r2
 8010c10:	461a      	mov	r2, r3
 8010c12:	4b09      	ldr	r3, [pc, #36]	; (8010c38 <__assert_func+0x2c>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4605      	mov	r5, r0
 8010c18:	68d8      	ldr	r0, [r3, #12]
 8010c1a:	b14c      	cbz	r4, 8010c30 <__assert_func+0x24>
 8010c1c:	4b07      	ldr	r3, [pc, #28]	; (8010c3c <__assert_func+0x30>)
 8010c1e:	9100      	str	r1, [sp, #0]
 8010c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c24:	4906      	ldr	r1, [pc, #24]	; (8010c40 <__assert_func+0x34>)
 8010c26:	462b      	mov	r3, r5
 8010c28:	f000 ff28 	bl	8011a7c <fiprintf>
 8010c2c:	f001 fa46 	bl	80120bc <abort>
 8010c30:	4b04      	ldr	r3, [pc, #16]	; (8010c44 <__assert_func+0x38>)
 8010c32:	461c      	mov	r4, r3
 8010c34:	e7f3      	b.n	8010c1e <__assert_func+0x12>
 8010c36:	bf00      	nop
 8010c38:	2000016c 	.word	0x2000016c
 8010c3c:	08016d73 	.word	0x08016d73
 8010c40:	08016d80 	.word	0x08016d80
 8010c44:	08016dae 	.word	0x08016dae

08010c48 <__cvt>:
 8010c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c4c:	ec55 4b10 	vmov	r4, r5, d0
 8010c50:	2d00      	cmp	r5, #0
 8010c52:	460e      	mov	r6, r1
 8010c54:	4619      	mov	r1, r3
 8010c56:	462b      	mov	r3, r5
 8010c58:	bfbb      	ittet	lt
 8010c5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010c5e:	461d      	movlt	r5, r3
 8010c60:	2300      	movge	r3, #0
 8010c62:	232d      	movlt	r3, #45	; 0x2d
 8010c64:	700b      	strb	r3, [r1, #0]
 8010c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010c6c:	4691      	mov	r9, r2
 8010c6e:	f023 0820 	bic.w	r8, r3, #32
 8010c72:	bfbc      	itt	lt
 8010c74:	4622      	movlt	r2, r4
 8010c76:	4614      	movlt	r4, r2
 8010c78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c7c:	d005      	beq.n	8010c8a <__cvt+0x42>
 8010c7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c82:	d100      	bne.n	8010c86 <__cvt+0x3e>
 8010c84:	3601      	adds	r6, #1
 8010c86:	2102      	movs	r1, #2
 8010c88:	e000      	b.n	8010c8c <__cvt+0x44>
 8010c8a:	2103      	movs	r1, #3
 8010c8c:	ab03      	add	r3, sp, #12
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	ab02      	add	r3, sp, #8
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	ec45 4b10 	vmov	d0, r4, r5
 8010c98:	4653      	mov	r3, sl
 8010c9a:	4632      	mov	r2, r6
 8010c9c:	f001 faa0 	bl	80121e0 <_dtoa_r>
 8010ca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010ca4:	4607      	mov	r7, r0
 8010ca6:	d102      	bne.n	8010cae <__cvt+0x66>
 8010ca8:	f019 0f01 	tst.w	r9, #1
 8010cac:	d022      	beq.n	8010cf4 <__cvt+0xac>
 8010cae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cb2:	eb07 0906 	add.w	r9, r7, r6
 8010cb6:	d110      	bne.n	8010cda <__cvt+0x92>
 8010cb8:	783b      	ldrb	r3, [r7, #0]
 8010cba:	2b30      	cmp	r3, #48	; 0x30
 8010cbc:	d10a      	bne.n	8010cd4 <__cvt+0x8c>
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	f7ef feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cca:	b918      	cbnz	r0, 8010cd4 <__cvt+0x8c>
 8010ccc:	f1c6 0601 	rsb	r6, r6, #1
 8010cd0:	f8ca 6000 	str.w	r6, [sl]
 8010cd4:	f8da 3000 	ldr.w	r3, [sl]
 8010cd8:	4499      	add	r9, r3
 8010cda:	2200      	movs	r2, #0
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4620      	mov	r0, r4
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	f7ef fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ce6:	b108      	cbz	r0, 8010cec <__cvt+0xa4>
 8010ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010cec:	2230      	movs	r2, #48	; 0x30
 8010cee:	9b03      	ldr	r3, [sp, #12]
 8010cf0:	454b      	cmp	r3, r9
 8010cf2:	d307      	bcc.n	8010d04 <__cvt+0xbc>
 8010cf4:	9b03      	ldr	r3, [sp, #12]
 8010cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cf8:	1bdb      	subs	r3, r3, r7
 8010cfa:	4638      	mov	r0, r7
 8010cfc:	6013      	str	r3, [r2, #0]
 8010cfe:	b004      	add	sp, #16
 8010d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d04:	1c59      	adds	r1, r3, #1
 8010d06:	9103      	str	r1, [sp, #12]
 8010d08:	701a      	strb	r2, [r3, #0]
 8010d0a:	e7f0      	b.n	8010cee <__cvt+0xa6>

08010d0c <__exponent>:
 8010d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2900      	cmp	r1, #0
 8010d12:	bfb8      	it	lt
 8010d14:	4249      	neglt	r1, r1
 8010d16:	f803 2b02 	strb.w	r2, [r3], #2
 8010d1a:	bfb4      	ite	lt
 8010d1c:	222d      	movlt	r2, #45	; 0x2d
 8010d1e:	222b      	movge	r2, #43	; 0x2b
 8010d20:	2909      	cmp	r1, #9
 8010d22:	7042      	strb	r2, [r0, #1]
 8010d24:	dd2a      	ble.n	8010d7c <__exponent+0x70>
 8010d26:	f10d 0207 	add.w	r2, sp, #7
 8010d2a:	4617      	mov	r7, r2
 8010d2c:	260a      	movs	r6, #10
 8010d2e:	4694      	mov	ip, r2
 8010d30:	fb91 f5f6 	sdiv	r5, r1, r6
 8010d34:	fb06 1415 	mls	r4, r6, r5, r1
 8010d38:	3430      	adds	r4, #48	; 0x30
 8010d3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010d3e:	460c      	mov	r4, r1
 8010d40:	2c63      	cmp	r4, #99	; 0x63
 8010d42:	f102 32ff 	add.w	r2, r2, #4294967295
 8010d46:	4629      	mov	r1, r5
 8010d48:	dcf1      	bgt.n	8010d2e <__exponent+0x22>
 8010d4a:	3130      	adds	r1, #48	; 0x30
 8010d4c:	f1ac 0402 	sub.w	r4, ip, #2
 8010d50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010d54:	1c41      	adds	r1, r0, #1
 8010d56:	4622      	mov	r2, r4
 8010d58:	42ba      	cmp	r2, r7
 8010d5a:	d30a      	bcc.n	8010d72 <__exponent+0x66>
 8010d5c:	f10d 0209 	add.w	r2, sp, #9
 8010d60:	eba2 020c 	sub.w	r2, r2, ip
 8010d64:	42bc      	cmp	r4, r7
 8010d66:	bf88      	it	hi
 8010d68:	2200      	movhi	r2, #0
 8010d6a:	4413      	add	r3, r2
 8010d6c:	1a18      	subs	r0, r3, r0
 8010d6e:	b003      	add	sp, #12
 8010d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010d76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010d7a:	e7ed      	b.n	8010d58 <__exponent+0x4c>
 8010d7c:	2330      	movs	r3, #48	; 0x30
 8010d7e:	3130      	adds	r1, #48	; 0x30
 8010d80:	7083      	strb	r3, [r0, #2]
 8010d82:	70c1      	strb	r1, [r0, #3]
 8010d84:	1d03      	adds	r3, r0, #4
 8010d86:	e7f1      	b.n	8010d6c <__exponent+0x60>

08010d88 <_printf_float>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	ed2d 8b02 	vpush	{d8}
 8010d90:	b08d      	sub	sp, #52	; 0x34
 8010d92:	460c      	mov	r4, r1
 8010d94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010d98:	4616      	mov	r6, r2
 8010d9a:	461f      	mov	r7, r3
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	f001 f901 	bl	8011fa4 <_localeconv_r>
 8010da2:	f8d0 a000 	ldr.w	sl, [r0]
 8010da6:	4650      	mov	r0, sl
 8010da8:	f7ef fa62 	bl	8000270 <strlen>
 8010dac:	2300      	movs	r3, #0
 8010dae:	930a      	str	r3, [sp, #40]	; 0x28
 8010db0:	6823      	ldr	r3, [r4, #0]
 8010db2:	9305      	str	r3, [sp, #20]
 8010db4:	f8d8 3000 	ldr.w	r3, [r8]
 8010db8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010dbc:	3307      	adds	r3, #7
 8010dbe:	f023 0307 	bic.w	r3, r3, #7
 8010dc2:	f103 0208 	add.w	r2, r3, #8
 8010dc6:	f8c8 2000 	str.w	r2, [r8]
 8010dca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010dce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010dd2:	9307      	str	r3, [sp, #28]
 8010dd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8010dd8:	ee08 0a10 	vmov	s16, r0
 8010ddc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010de4:	4b9e      	ldr	r3, [pc, #632]	; (8011060 <_printf_float+0x2d8>)
 8010de6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dea:	f7ef fe9f 	bl	8000b2c <__aeabi_dcmpun>
 8010dee:	bb88      	cbnz	r0, 8010e54 <_printf_float+0xcc>
 8010df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010df4:	4b9a      	ldr	r3, [pc, #616]	; (8011060 <_printf_float+0x2d8>)
 8010df6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfa:	f7ef fe79 	bl	8000af0 <__aeabi_dcmple>
 8010dfe:	bb48      	cbnz	r0, 8010e54 <_printf_float+0xcc>
 8010e00:	2200      	movs	r2, #0
 8010e02:	2300      	movs	r3, #0
 8010e04:	4640      	mov	r0, r8
 8010e06:	4649      	mov	r1, r9
 8010e08:	f7ef fe68 	bl	8000adc <__aeabi_dcmplt>
 8010e0c:	b110      	cbz	r0, 8010e14 <_printf_float+0x8c>
 8010e0e:	232d      	movs	r3, #45	; 0x2d
 8010e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e14:	4a93      	ldr	r2, [pc, #588]	; (8011064 <_printf_float+0x2dc>)
 8010e16:	4b94      	ldr	r3, [pc, #592]	; (8011068 <_printf_float+0x2e0>)
 8010e18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e1c:	bf94      	ite	ls
 8010e1e:	4690      	movls	r8, r2
 8010e20:	4698      	movhi	r8, r3
 8010e22:	2303      	movs	r3, #3
 8010e24:	6123      	str	r3, [r4, #16]
 8010e26:	9b05      	ldr	r3, [sp, #20]
 8010e28:	f023 0304 	bic.w	r3, r3, #4
 8010e2c:	6023      	str	r3, [r4, #0]
 8010e2e:	f04f 0900 	mov.w	r9, #0
 8010e32:	9700      	str	r7, [sp, #0]
 8010e34:	4633      	mov	r3, r6
 8010e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e38:	4621      	mov	r1, r4
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f000 f9da 	bl	80111f4 <_printf_common>
 8010e40:	3001      	adds	r0, #1
 8010e42:	f040 8090 	bne.w	8010f66 <_printf_float+0x1de>
 8010e46:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4a:	b00d      	add	sp, #52	; 0x34
 8010e4c:	ecbd 8b02 	vpop	{d8}
 8010e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e54:	4642      	mov	r2, r8
 8010e56:	464b      	mov	r3, r9
 8010e58:	4640      	mov	r0, r8
 8010e5a:	4649      	mov	r1, r9
 8010e5c:	f7ef fe66 	bl	8000b2c <__aeabi_dcmpun>
 8010e60:	b140      	cbz	r0, 8010e74 <_printf_float+0xec>
 8010e62:	464b      	mov	r3, r9
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	bfbc      	itt	lt
 8010e68:	232d      	movlt	r3, #45	; 0x2d
 8010e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010e6e:	4a7f      	ldr	r2, [pc, #508]	; (801106c <_printf_float+0x2e4>)
 8010e70:	4b7f      	ldr	r3, [pc, #508]	; (8011070 <_printf_float+0x2e8>)
 8010e72:	e7d1      	b.n	8010e18 <_printf_float+0x90>
 8010e74:	6863      	ldr	r3, [r4, #4]
 8010e76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e7a:	9206      	str	r2, [sp, #24]
 8010e7c:	1c5a      	adds	r2, r3, #1
 8010e7e:	d13f      	bne.n	8010f00 <_printf_float+0x178>
 8010e80:	2306      	movs	r3, #6
 8010e82:	6063      	str	r3, [r4, #4]
 8010e84:	9b05      	ldr	r3, [sp, #20]
 8010e86:	6861      	ldr	r1, [r4, #4]
 8010e88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	9303      	str	r3, [sp, #12]
 8010e90:	ab0a      	add	r3, sp, #40	; 0x28
 8010e92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010e96:	ab09      	add	r3, sp, #36	; 0x24
 8010e98:	ec49 8b10 	vmov	d0, r8, r9
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	6022      	str	r2, [r4, #0]
 8010ea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f7ff fecf 	bl	8010c48 <__cvt>
 8010eaa:	9b06      	ldr	r3, [sp, #24]
 8010eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010eae:	2b47      	cmp	r3, #71	; 0x47
 8010eb0:	4680      	mov	r8, r0
 8010eb2:	d108      	bne.n	8010ec6 <_printf_float+0x13e>
 8010eb4:	1cc8      	adds	r0, r1, #3
 8010eb6:	db02      	blt.n	8010ebe <_printf_float+0x136>
 8010eb8:	6863      	ldr	r3, [r4, #4]
 8010eba:	4299      	cmp	r1, r3
 8010ebc:	dd41      	ble.n	8010f42 <_printf_float+0x1ba>
 8010ebe:	f1ab 0302 	sub.w	r3, fp, #2
 8010ec2:	fa5f fb83 	uxtb.w	fp, r3
 8010ec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010eca:	d820      	bhi.n	8010f0e <_printf_float+0x186>
 8010ecc:	3901      	subs	r1, #1
 8010ece:	465a      	mov	r2, fp
 8010ed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8010ed6:	f7ff ff19 	bl	8010d0c <__exponent>
 8010eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010edc:	1813      	adds	r3, r2, r0
 8010ede:	2a01      	cmp	r2, #1
 8010ee0:	4681      	mov	r9, r0
 8010ee2:	6123      	str	r3, [r4, #16]
 8010ee4:	dc02      	bgt.n	8010eec <_printf_float+0x164>
 8010ee6:	6822      	ldr	r2, [r4, #0]
 8010ee8:	07d2      	lsls	r2, r2, #31
 8010eea:	d501      	bpl.n	8010ef0 <_printf_float+0x168>
 8010eec:	3301      	adds	r3, #1
 8010eee:	6123      	str	r3, [r4, #16]
 8010ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d09c      	beq.n	8010e32 <_printf_float+0xaa>
 8010ef8:	232d      	movs	r3, #45	; 0x2d
 8010efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010efe:	e798      	b.n	8010e32 <_printf_float+0xaa>
 8010f00:	9a06      	ldr	r2, [sp, #24]
 8010f02:	2a47      	cmp	r2, #71	; 0x47
 8010f04:	d1be      	bne.n	8010e84 <_printf_float+0xfc>
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1bc      	bne.n	8010e84 <_printf_float+0xfc>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e7b9      	b.n	8010e82 <_printf_float+0xfa>
 8010f0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f12:	d118      	bne.n	8010f46 <_printf_float+0x1be>
 8010f14:	2900      	cmp	r1, #0
 8010f16:	6863      	ldr	r3, [r4, #4]
 8010f18:	dd0b      	ble.n	8010f32 <_printf_float+0x1aa>
 8010f1a:	6121      	str	r1, [r4, #16]
 8010f1c:	b913      	cbnz	r3, 8010f24 <_printf_float+0x19c>
 8010f1e:	6822      	ldr	r2, [r4, #0]
 8010f20:	07d0      	lsls	r0, r2, #31
 8010f22:	d502      	bpl.n	8010f2a <_printf_float+0x1a2>
 8010f24:	3301      	adds	r3, #1
 8010f26:	440b      	add	r3, r1
 8010f28:	6123      	str	r3, [r4, #16]
 8010f2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f2c:	f04f 0900 	mov.w	r9, #0
 8010f30:	e7de      	b.n	8010ef0 <_printf_float+0x168>
 8010f32:	b913      	cbnz	r3, 8010f3a <_printf_float+0x1b2>
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	07d2      	lsls	r2, r2, #31
 8010f38:	d501      	bpl.n	8010f3e <_printf_float+0x1b6>
 8010f3a:	3302      	adds	r3, #2
 8010f3c:	e7f4      	b.n	8010f28 <_printf_float+0x1a0>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e7f2      	b.n	8010f28 <_printf_float+0x1a0>
 8010f42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f48:	4299      	cmp	r1, r3
 8010f4a:	db05      	blt.n	8010f58 <_printf_float+0x1d0>
 8010f4c:	6823      	ldr	r3, [r4, #0]
 8010f4e:	6121      	str	r1, [r4, #16]
 8010f50:	07d8      	lsls	r0, r3, #31
 8010f52:	d5ea      	bpl.n	8010f2a <_printf_float+0x1a2>
 8010f54:	1c4b      	adds	r3, r1, #1
 8010f56:	e7e7      	b.n	8010f28 <_printf_float+0x1a0>
 8010f58:	2900      	cmp	r1, #0
 8010f5a:	bfd4      	ite	le
 8010f5c:	f1c1 0202 	rsble	r2, r1, #2
 8010f60:	2201      	movgt	r2, #1
 8010f62:	4413      	add	r3, r2
 8010f64:	e7e0      	b.n	8010f28 <_printf_float+0x1a0>
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	055a      	lsls	r2, r3, #21
 8010f6a:	d407      	bmi.n	8010f7c <_printf_float+0x1f4>
 8010f6c:	6923      	ldr	r3, [r4, #16]
 8010f6e:	4642      	mov	r2, r8
 8010f70:	4631      	mov	r1, r6
 8010f72:	4628      	mov	r0, r5
 8010f74:	47b8      	blx	r7
 8010f76:	3001      	adds	r0, #1
 8010f78:	d12c      	bne.n	8010fd4 <_printf_float+0x24c>
 8010f7a:	e764      	b.n	8010e46 <_printf_float+0xbe>
 8010f7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f80:	f240 80e0 	bls.w	8011144 <_printf_float+0x3bc>
 8010f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f88:	2200      	movs	r2, #0
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	f7ef fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f90:	2800      	cmp	r0, #0
 8010f92:	d034      	beq.n	8010ffe <_printf_float+0x276>
 8010f94:	4a37      	ldr	r2, [pc, #220]	; (8011074 <_printf_float+0x2ec>)
 8010f96:	2301      	movs	r3, #1
 8010f98:	4631      	mov	r1, r6
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	47b8      	blx	r7
 8010f9e:	3001      	adds	r0, #1
 8010fa0:	f43f af51 	beq.w	8010e46 <_printf_float+0xbe>
 8010fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	db02      	blt.n	8010fb2 <_printf_float+0x22a>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	07d8      	lsls	r0, r3, #31
 8010fb0:	d510      	bpl.n	8010fd4 <_printf_float+0x24c>
 8010fb2:	ee18 3a10 	vmov	r3, s16
 8010fb6:	4652      	mov	r2, sl
 8010fb8:	4631      	mov	r1, r6
 8010fba:	4628      	mov	r0, r5
 8010fbc:	47b8      	blx	r7
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f43f af41 	beq.w	8010e46 <_printf_float+0xbe>
 8010fc4:	f04f 0800 	mov.w	r8, #0
 8010fc8:	f104 091a 	add.w	r9, r4, #26
 8010fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	4543      	cmp	r3, r8
 8010fd2:	dc09      	bgt.n	8010fe8 <_printf_float+0x260>
 8010fd4:	6823      	ldr	r3, [r4, #0]
 8010fd6:	079b      	lsls	r3, r3, #30
 8010fd8:	f100 8107 	bmi.w	80111ea <_printf_float+0x462>
 8010fdc:	68e0      	ldr	r0, [r4, #12]
 8010fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fe0:	4298      	cmp	r0, r3
 8010fe2:	bfb8      	it	lt
 8010fe4:	4618      	movlt	r0, r3
 8010fe6:	e730      	b.n	8010e4a <_printf_float+0xc2>
 8010fe8:	2301      	movs	r3, #1
 8010fea:	464a      	mov	r2, r9
 8010fec:	4631      	mov	r1, r6
 8010fee:	4628      	mov	r0, r5
 8010ff0:	47b8      	blx	r7
 8010ff2:	3001      	adds	r0, #1
 8010ff4:	f43f af27 	beq.w	8010e46 <_printf_float+0xbe>
 8010ff8:	f108 0801 	add.w	r8, r8, #1
 8010ffc:	e7e6      	b.n	8010fcc <_printf_float+0x244>
 8010ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011000:	2b00      	cmp	r3, #0
 8011002:	dc39      	bgt.n	8011078 <_printf_float+0x2f0>
 8011004:	4a1b      	ldr	r2, [pc, #108]	; (8011074 <_printf_float+0x2ec>)
 8011006:	2301      	movs	r3, #1
 8011008:	4631      	mov	r1, r6
 801100a:	4628      	mov	r0, r5
 801100c:	47b8      	blx	r7
 801100e:	3001      	adds	r0, #1
 8011010:	f43f af19 	beq.w	8010e46 <_printf_float+0xbe>
 8011014:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011018:	4313      	orrs	r3, r2
 801101a:	d102      	bne.n	8011022 <_printf_float+0x29a>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	07d9      	lsls	r1, r3, #31
 8011020:	d5d8      	bpl.n	8010fd4 <_printf_float+0x24c>
 8011022:	ee18 3a10 	vmov	r3, s16
 8011026:	4652      	mov	r2, sl
 8011028:	4631      	mov	r1, r6
 801102a:	4628      	mov	r0, r5
 801102c:	47b8      	blx	r7
 801102e:	3001      	adds	r0, #1
 8011030:	f43f af09 	beq.w	8010e46 <_printf_float+0xbe>
 8011034:	f04f 0900 	mov.w	r9, #0
 8011038:	f104 0a1a 	add.w	sl, r4, #26
 801103c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801103e:	425b      	negs	r3, r3
 8011040:	454b      	cmp	r3, r9
 8011042:	dc01      	bgt.n	8011048 <_printf_float+0x2c0>
 8011044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011046:	e792      	b.n	8010f6e <_printf_float+0x1e6>
 8011048:	2301      	movs	r3, #1
 801104a:	4652      	mov	r2, sl
 801104c:	4631      	mov	r1, r6
 801104e:	4628      	mov	r0, r5
 8011050:	47b8      	blx	r7
 8011052:	3001      	adds	r0, #1
 8011054:	f43f aef7 	beq.w	8010e46 <_printf_float+0xbe>
 8011058:	f109 0901 	add.w	r9, r9, #1
 801105c:	e7ee      	b.n	801103c <_printf_float+0x2b4>
 801105e:	bf00      	nop
 8011060:	7fefffff 	.word	0x7fefffff
 8011064:	08016daf 	.word	0x08016daf
 8011068:	08016db3 	.word	0x08016db3
 801106c:	08016db7 	.word	0x08016db7
 8011070:	08016dbb 	.word	0x08016dbb
 8011074:	08016dbf 	.word	0x08016dbf
 8011078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801107a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801107c:	429a      	cmp	r2, r3
 801107e:	bfa8      	it	ge
 8011080:	461a      	movge	r2, r3
 8011082:	2a00      	cmp	r2, #0
 8011084:	4691      	mov	r9, r2
 8011086:	dc37      	bgt.n	80110f8 <_printf_float+0x370>
 8011088:	f04f 0b00 	mov.w	fp, #0
 801108c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011090:	f104 021a 	add.w	r2, r4, #26
 8011094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011096:	9305      	str	r3, [sp, #20]
 8011098:	eba3 0309 	sub.w	r3, r3, r9
 801109c:	455b      	cmp	r3, fp
 801109e:	dc33      	bgt.n	8011108 <_printf_float+0x380>
 80110a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110a4:	429a      	cmp	r2, r3
 80110a6:	db3b      	blt.n	8011120 <_printf_float+0x398>
 80110a8:	6823      	ldr	r3, [r4, #0]
 80110aa:	07da      	lsls	r2, r3, #31
 80110ac:	d438      	bmi.n	8011120 <_printf_float+0x398>
 80110ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80110b2:	eba2 0903 	sub.w	r9, r2, r3
 80110b6:	9b05      	ldr	r3, [sp, #20]
 80110b8:	1ad2      	subs	r2, r2, r3
 80110ba:	4591      	cmp	r9, r2
 80110bc:	bfa8      	it	ge
 80110be:	4691      	movge	r9, r2
 80110c0:	f1b9 0f00 	cmp.w	r9, #0
 80110c4:	dc35      	bgt.n	8011132 <_printf_float+0x3aa>
 80110c6:	f04f 0800 	mov.w	r8, #0
 80110ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110ce:	f104 0a1a 	add.w	sl, r4, #26
 80110d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110d6:	1a9b      	subs	r3, r3, r2
 80110d8:	eba3 0309 	sub.w	r3, r3, r9
 80110dc:	4543      	cmp	r3, r8
 80110de:	f77f af79 	ble.w	8010fd4 <_printf_float+0x24c>
 80110e2:	2301      	movs	r3, #1
 80110e4:	4652      	mov	r2, sl
 80110e6:	4631      	mov	r1, r6
 80110e8:	4628      	mov	r0, r5
 80110ea:	47b8      	blx	r7
 80110ec:	3001      	adds	r0, #1
 80110ee:	f43f aeaa 	beq.w	8010e46 <_printf_float+0xbe>
 80110f2:	f108 0801 	add.w	r8, r8, #1
 80110f6:	e7ec      	b.n	80110d2 <_printf_float+0x34a>
 80110f8:	4613      	mov	r3, r2
 80110fa:	4631      	mov	r1, r6
 80110fc:	4642      	mov	r2, r8
 80110fe:	4628      	mov	r0, r5
 8011100:	47b8      	blx	r7
 8011102:	3001      	adds	r0, #1
 8011104:	d1c0      	bne.n	8011088 <_printf_float+0x300>
 8011106:	e69e      	b.n	8010e46 <_printf_float+0xbe>
 8011108:	2301      	movs	r3, #1
 801110a:	4631      	mov	r1, r6
 801110c:	4628      	mov	r0, r5
 801110e:	9205      	str	r2, [sp, #20]
 8011110:	47b8      	blx	r7
 8011112:	3001      	adds	r0, #1
 8011114:	f43f ae97 	beq.w	8010e46 <_printf_float+0xbe>
 8011118:	9a05      	ldr	r2, [sp, #20]
 801111a:	f10b 0b01 	add.w	fp, fp, #1
 801111e:	e7b9      	b.n	8011094 <_printf_float+0x30c>
 8011120:	ee18 3a10 	vmov	r3, s16
 8011124:	4652      	mov	r2, sl
 8011126:	4631      	mov	r1, r6
 8011128:	4628      	mov	r0, r5
 801112a:	47b8      	blx	r7
 801112c:	3001      	adds	r0, #1
 801112e:	d1be      	bne.n	80110ae <_printf_float+0x326>
 8011130:	e689      	b.n	8010e46 <_printf_float+0xbe>
 8011132:	9a05      	ldr	r2, [sp, #20]
 8011134:	464b      	mov	r3, r9
 8011136:	4442      	add	r2, r8
 8011138:	4631      	mov	r1, r6
 801113a:	4628      	mov	r0, r5
 801113c:	47b8      	blx	r7
 801113e:	3001      	adds	r0, #1
 8011140:	d1c1      	bne.n	80110c6 <_printf_float+0x33e>
 8011142:	e680      	b.n	8010e46 <_printf_float+0xbe>
 8011144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011146:	2a01      	cmp	r2, #1
 8011148:	dc01      	bgt.n	801114e <_printf_float+0x3c6>
 801114a:	07db      	lsls	r3, r3, #31
 801114c:	d53a      	bpl.n	80111c4 <_printf_float+0x43c>
 801114e:	2301      	movs	r3, #1
 8011150:	4642      	mov	r2, r8
 8011152:	4631      	mov	r1, r6
 8011154:	4628      	mov	r0, r5
 8011156:	47b8      	blx	r7
 8011158:	3001      	adds	r0, #1
 801115a:	f43f ae74 	beq.w	8010e46 <_printf_float+0xbe>
 801115e:	ee18 3a10 	vmov	r3, s16
 8011162:	4652      	mov	r2, sl
 8011164:	4631      	mov	r1, r6
 8011166:	4628      	mov	r0, r5
 8011168:	47b8      	blx	r7
 801116a:	3001      	adds	r0, #1
 801116c:	f43f ae6b 	beq.w	8010e46 <_printf_float+0xbe>
 8011170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011174:	2200      	movs	r2, #0
 8011176:	2300      	movs	r3, #0
 8011178:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801117c:	f7ef fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011180:	b9d8      	cbnz	r0, 80111ba <_printf_float+0x432>
 8011182:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011186:	f108 0201 	add.w	r2, r8, #1
 801118a:	4631      	mov	r1, r6
 801118c:	4628      	mov	r0, r5
 801118e:	47b8      	blx	r7
 8011190:	3001      	adds	r0, #1
 8011192:	d10e      	bne.n	80111b2 <_printf_float+0x42a>
 8011194:	e657      	b.n	8010e46 <_printf_float+0xbe>
 8011196:	2301      	movs	r3, #1
 8011198:	4652      	mov	r2, sl
 801119a:	4631      	mov	r1, r6
 801119c:	4628      	mov	r0, r5
 801119e:	47b8      	blx	r7
 80111a0:	3001      	adds	r0, #1
 80111a2:	f43f ae50 	beq.w	8010e46 <_printf_float+0xbe>
 80111a6:	f108 0801 	add.w	r8, r8, #1
 80111aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111ac:	3b01      	subs	r3, #1
 80111ae:	4543      	cmp	r3, r8
 80111b0:	dcf1      	bgt.n	8011196 <_printf_float+0x40e>
 80111b2:	464b      	mov	r3, r9
 80111b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111b8:	e6da      	b.n	8010f70 <_printf_float+0x1e8>
 80111ba:	f04f 0800 	mov.w	r8, #0
 80111be:	f104 0a1a 	add.w	sl, r4, #26
 80111c2:	e7f2      	b.n	80111aa <_printf_float+0x422>
 80111c4:	2301      	movs	r3, #1
 80111c6:	4642      	mov	r2, r8
 80111c8:	e7df      	b.n	801118a <_printf_float+0x402>
 80111ca:	2301      	movs	r3, #1
 80111cc:	464a      	mov	r2, r9
 80111ce:	4631      	mov	r1, r6
 80111d0:	4628      	mov	r0, r5
 80111d2:	47b8      	blx	r7
 80111d4:	3001      	adds	r0, #1
 80111d6:	f43f ae36 	beq.w	8010e46 <_printf_float+0xbe>
 80111da:	f108 0801 	add.w	r8, r8, #1
 80111de:	68e3      	ldr	r3, [r4, #12]
 80111e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111e2:	1a5b      	subs	r3, r3, r1
 80111e4:	4543      	cmp	r3, r8
 80111e6:	dcf0      	bgt.n	80111ca <_printf_float+0x442>
 80111e8:	e6f8      	b.n	8010fdc <_printf_float+0x254>
 80111ea:	f04f 0800 	mov.w	r8, #0
 80111ee:	f104 0919 	add.w	r9, r4, #25
 80111f2:	e7f4      	b.n	80111de <_printf_float+0x456>

080111f4 <_printf_common>:
 80111f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111f8:	4616      	mov	r6, r2
 80111fa:	4699      	mov	r9, r3
 80111fc:	688a      	ldr	r2, [r1, #8]
 80111fe:	690b      	ldr	r3, [r1, #16]
 8011200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011204:	4293      	cmp	r3, r2
 8011206:	bfb8      	it	lt
 8011208:	4613      	movlt	r3, r2
 801120a:	6033      	str	r3, [r6, #0]
 801120c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011210:	4607      	mov	r7, r0
 8011212:	460c      	mov	r4, r1
 8011214:	b10a      	cbz	r2, 801121a <_printf_common+0x26>
 8011216:	3301      	adds	r3, #1
 8011218:	6033      	str	r3, [r6, #0]
 801121a:	6823      	ldr	r3, [r4, #0]
 801121c:	0699      	lsls	r1, r3, #26
 801121e:	bf42      	ittt	mi
 8011220:	6833      	ldrmi	r3, [r6, #0]
 8011222:	3302      	addmi	r3, #2
 8011224:	6033      	strmi	r3, [r6, #0]
 8011226:	6825      	ldr	r5, [r4, #0]
 8011228:	f015 0506 	ands.w	r5, r5, #6
 801122c:	d106      	bne.n	801123c <_printf_common+0x48>
 801122e:	f104 0a19 	add.w	sl, r4, #25
 8011232:	68e3      	ldr	r3, [r4, #12]
 8011234:	6832      	ldr	r2, [r6, #0]
 8011236:	1a9b      	subs	r3, r3, r2
 8011238:	42ab      	cmp	r3, r5
 801123a:	dc26      	bgt.n	801128a <_printf_common+0x96>
 801123c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011240:	1e13      	subs	r3, r2, #0
 8011242:	6822      	ldr	r2, [r4, #0]
 8011244:	bf18      	it	ne
 8011246:	2301      	movne	r3, #1
 8011248:	0692      	lsls	r2, r2, #26
 801124a:	d42b      	bmi.n	80112a4 <_printf_common+0xb0>
 801124c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011250:	4649      	mov	r1, r9
 8011252:	4638      	mov	r0, r7
 8011254:	47c0      	blx	r8
 8011256:	3001      	adds	r0, #1
 8011258:	d01e      	beq.n	8011298 <_printf_common+0xa4>
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	6922      	ldr	r2, [r4, #16]
 801125e:	f003 0306 	and.w	r3, r3, #6
 8011262:	2b04      	cmp	r3, #4
 8011264:	bf02      	ittt	eq
 8011266:	68e5      	ldreq	r5, [r4, #12]
 8011268:	6833      	ldreq	r3, [r6, #0]
 801126a:	1aed      	subeq	r5, r5, r3
 801126c:	68a3      	ldr	r3, [r4, #8]
 801126e:	bf0c      	ite	eq
 8011270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011274:	2500      	movne	r5, #0
 8011276:	4293      	cmp	r3, r2
 8011278:	bfc4      	itt	gt
 801127a:	1a9b      	subgt	r3, r3, r2
 801127c:	18ed      	addgt	r5, r5, r3
 801127e:	2600      	movs	r6, #0
 8011280:	341a      	adds	r4, #26
 8011282:	42b5      	cmp	r5, r6
 8011284:	d11a      	bne.n	80112bc <_printf_common+0xc8>
 8011286:	2000      	movs	r0, #0
 8011288:	e008      	b.n	801129c <_printf_common+0xa8>
 801128a:	2301      	movs	r3, #1
 801128c:	4652      	mov	r2, sl
 801128e:	4649      	mov	r1, r9
 8011290:	4638      	mov	r0, r7
 8011292:	47c0      	blx	r8
 8011294:	3001      	adds	r0, #1
 8011296:	d103      	bne.n	80112a0 <_printf_common+0xac>
 8011298:	f04f 30ff 	mov.w	r0, #4294967295
 801129c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112a0:	3501      	adds	r5, #1
 80112a2:	e7c6      	b.n	8011232 <_printf_common+0x3e>
 80112a4:	18e1      	adds	r1, r4, r3
 80112a6:	1c5a      	adds	r2, r3, #1
 80112a8:	2030      	movs	r0, #48	; 0x30
 80112aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112ae:	4422      	add	r2, r4
 80112b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112b8:	3302      	adds	r3, #2
 80112ba:	e7c7      	b.n	801124c <_printf_common+0x58>
 80112bc:	2301      	movs	r3, #1
 80112be:	4622      	mov	r2, r4
 80112c0:	4649      	mov	r1, r9
 80112c2:	4638      	mov	r0, r7
 80112c4:	47c0      	blx	r8
 80112c6:	3001      	adds	r0, #1
 80112c8:	d0e6      	beq.n	8011298 <_printf_common+0xa4>
 80112ca:	3601      	adds	r6, #1
 80112cc:	e7d9      	b.n	8011282 <_printf_common+0x8e>
	...

080112d0 <_printf_i>:
 80112d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112d4:	7e0f      	ldrb	r7, [r1, #24]
 80112d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112d8:	2f78      	cmp	r7, #120	; 0x78
 80112da:	4691      	mov	r9, r2
 80112dc:	4680      	mov	r8, r0
 80112de:	460c      	mov	r4, r1
 80112e0:	469a      	mov	sl, r3
 80112e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112e6:	d807      	bhi.n	80112f8 <_printf_i+0x28>
 80112e8:	2f62      	cmp	r7, #98	; 0x62
 80112ea:	d80a      	bhi.n	8011302 <_printf_i+0x32>
 80112ec:	2f00      	cmp	r7, #0
 80112ee:	f000 80d4 	beq.w	801149a <_printf_i+0x1ca>
 80112f2:	2f58      	cmp	r7, #88	; 0x58
 80112f4:	f000 80c0 	beq.w	8011478 <_printf_i+0x1a8>
 80112f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011300:	e03a      	b.n	8011378 <_printf_i+0xa8>
 8011302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011306:	2b15      	cmp	r3, #21
 8011308:	d8f6      	bhi.n	80112f8 <_printf_i+0x28>
 801130a:	a101      	add	r1, pc, #4	; (adr r1, 8011310 <_printf_i+0x40>)
 801130c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011310:	08011369 	.word	0x08011369
 8011314:	0801137d 	.word	0x0801137d
 8011318:	080112f9 	.word	0x080112f9
 801131c:	080112f9 	.word	0x080112f9
 8011320:	080112f9 	.word	0x080112f9
 8011324:	080112f9 	.word	0x080112f9
 8011328:	0801137d 	.word	0x0801137d
 801132c:	080112f9 	.word	0x080112f9
 8011330:	080112f9 	.word	0x080112f9
 8011334:	080112f9 	.word	0x080112f9
 8011338:	080112f9 	.word	0x080112f9
 801133c:	08011481 	.word	0x08011481
 8011340:	080113a9 	.word	0x080113a9
 8011344:	0801143b 	.word	0x0801143b
 8011348:	080112f9 	.word	0x080112f9
 801134c:	080112f9 	.word	0x080112f9
 8011350:	080114a3 	.word	0x080114a3
 8011354:	080112f9 	.word	0x080112f9
 8011358:	080113a9 	.word	0x080113a9
 801135c:	080112f9 	.word	0x080112f9
 8011360:	080112f9 	.word	0x080112f9
 8011364:	08011443 	.word	0x08011443
 8011368:	682b      	ldr	r3, [r5, #0]
 801136a:	1d1a      	adds	r2, r3, #4
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	602a      	str	r2, [r5, #0]
 8011370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011378:	2301      	movs	r3, #1
 801137a:	e09f      	b.n	80114bc <_printf_i+0x1ec>
 801137c:	6820      	ldr	r0, [r4, #0]
 801137e:	682b      	ldr	r3, [r5, #0]
 8011380:	0607      	lsls	r7, r0, #24
 8011382:	f103 0104 	add.w	r1, r3, #4
 8011386:	6029      	str	r1, [r5, #0]
 8011388:	d501      	bpl.n	801138e <_printf_i+0xbe>
 801138a:	681e      	ldr	r6, [r3, #0]
 801138c:	e003      	b.n	8011396 <_printf_i+0xc6>
 801138e:	0646      	lsls	r6, r0, #25
 8011390:	d5fb      	bpl.n	801138a <_printf_i+0xba>
 8011392:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011396:	2e00      	cmp	r6, #0
 8011398:	da03      	bge.n	80113a2 <_printf_i+0xd2>
 801139a:	232d      	movs	r3, #45	; 0x2d
 801139c:	4276      	negs	r6, r6
 801139e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113a2:	485a      	ldr	r0, [pc, #360]	; (801150c <_printf_i+0x23c>)
 80113a4:	230a      	movs	r3, #10
 80113a6:	e012      	b.n	80113ce <_printf_i+0xfe>
 80113a8:	682b      	ldr	r3, [r5, #0]
 80113aa:	6820      	ldr	r0, [r4, #0]
 80113ac:	1d19      	adds	r1, r3, #4
 80113ae:	6029      	str	r1, [r5, #0]
 80113b0:	0605      	lsls	r5, r0, #24
 80113b2:	d501      	bpl.n	80113b8 <_printf_i+0xe8>
 80113b4:	681e      	ldr	r6, [r3, #0]
 80113b6:	e002      	b.n	80113be <_printf_i+0xee>
 80113b8:	0641      	lsls	r1, r0, #25
 80113ba:	d5fb      	bpl.n	80113b4 <_printf_i+0xe4>
 80113bc:	881e      	ldrh	r6, [r3, #0]
 80113be:	4853      	ldr	r0, [pc, #332]	; (801150c <_printf_i+0x23c>)
 80113c0:	2f6f      	cmp	r7, #111	; 0x6f
 80113c2:	bf0c      	ite	eq
 80113c4:	2308      	moveq	r3, #8
 80113c6:	230a      	movne	r3, #10
 80113c8:	2100      	movs	r1, #0
 80113ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113ce:	6865      	ldr	r5, [r4, #4]
 80113d0:	60a5      	str	r5, [r4, #8]
 80113d2:	2d00      	cmp	r5, #0
 80113d4:	bfa2      	ittt	ge
 80113d6:	6821      	ldrge	r1, [r4, #0]
 80113d8:	f021 0104 	bicge.w	r1, r1, #4
 80113dc:	6021      	strge	r1, [r4, #0]
 80113de:	b90e      	cbnz	r6, 80113e4 <_printf_i+0x114>
 80113e0:	2d00      	cmp	r5, #0
 80113e2:	d04b      	beq.n	801147c <_printf_i+0x1ac>
 80113e4:	4615      	mov	r5, r2
 80113e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80113ea:	fb03 6711 	mls	r7, r3, r1, r6
 80113ee:	5dc7      	ldrb	r7, [r0, r7]
 80113f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80113f4:	4637      	mov	r7, r6
 80113f6:	42bb      	cmp	r3, r7
 80113f8:	460e      	mov	r6, r1
 80113fa:	d9f4      	bls.n	80113e6 <_printf_i+0x116>
 80113fc:	2b08      	cmp	r3, #8
 80113fe:	d10b      	bne.n	8011418 <_printf_i+0x148>
 8011400:	6823      	ldr	r3, [r4, #0]
 8011402:	07de      	lsls	r6, r3, #31
 8011404:	d508      	bpl.n	8011418 <_printf_i+0x148>
 8011406:	6923      	ldr	r3, [r4, #16]
 8011408:	6861      	ldr	r1, [r4, #4]
 801140a:	4299      	cmp	r1, r3
 801140c:	bfde      	ittt	le
 801140e:	2330      	movle	r3, #48	; 0x30
 8011410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011418:	1b52      	subs	r2, r2, r5
 801141a:	6122      	str	r2, [r4, #16]
 801141c:	f8cd a000 	str.w	sl, [sp]
 8011420:	464b      	mov	r3, r9
 8011422:	aa03      	add	r2, sp, #12
 8011424:	4621      	mov	r1, r4
 8011426:	4640      	mov	r0, r8
 8011428:	f7ff fee4 	bl	80111f4 <_printf_common>
 801142c:	3001      	adds	r0, #1
 801142e:	d14a      	bne.n	80114c6 <_printf_i+0x1f6>
 8011430:	f04f 30ff 	mov.w	r0, #4294967295
 8011434:	b004      	add	sp, #16
 8011436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	f043 0320 	orr.w	r3, r3, #32
 8011440:	6023      	str	r3, [r4, #0]
 8011442:	4833      	ldr	r0, [pc, #204]	; (8011510 <_printf_i+0x240>)
 8011444:	2778      	movs	r7, #120	; 0x78
 8011446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	6829      	ldr	r1, [r5, #0]
 801144e:	061f      	lsls	r7, r3, #24
 8011450:	f851 6b04 	ldr.w	r6, [r1], #4
 8011454:	d402      	bmi.n	801145c <_printf_i+0x18c>
 8011456:	065f      	lsls	r7, r3, #25
 8011458:	bf48      	it	mi
 801145a:	b2b6      	uxthmi	r6, r6
 801145c:	07df      	lsls	r7, r3, #31
 801145e:	bf48      	it	mi
 8011460:	f043 0320 	orrmi.w	r3, r3, #32
 8011464:	6029      	str	r1, [r5, #0]
 8011466:	bf48      	it	mi
 8011468:	6023      	strmi	r3, [r4, #0]
 801146a:	b91e      	cbnz	r6, 8011474 <_printf_i+0x1a4>
 801146c:	6823      	ldr	r3, [r4, #0]
 801146e:	f023 0320 	bic.w	r3, r3, #32
 8011472:	6023      	str	r3, [r4, #0]
 8011474:	2310      	movs	r3, #16
 8011476:	e7a7      	b.n	80113c8 <_printf_i+0xf8>
 8011478:	4824      	ldr	r0, [pc, #144]	; (801150c <_printf_i+0x23c>)
 801147a:	e7e4      	b.n	8011446 <_printf_i+0x176>
 801147c:	4615      	mov	r5, r2
 801147e:	e7bd      	b.n	80113fc <_printf_i+0x12c>
 8011480:	682b      	ldr	r3, [r5, #0]
 8011482:	6826      	ldr	r6, [r4, #0]
 8011484:	6961      	ldr	r1, [r4, #20]
 8011486:	1d18      	adds	r0, r3, #4
 8011488:	6028      	str	r0, [r5, #0]
 801148a:	0635      	lsls	r5, r6, #24
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	d501      	bpl.n	8011494 <_printf_i+0x1c4>
 8011490:	6019      	str	r1, [r3, #0]
 8011492:	e002      	b.n	801149a <_printf_i+0x1ca>
 8011494:	0670      	lsls	r0, r6, #25
 8011496:	d5fb      	bpl.n	8011490 <_printf_i+0x1c0>
 8011498:	8019      	strh	r1, [r3, #0]
 801149a:	2300      	movs	r3, #0
 801149c:	6123      	str	r3, [r4, #16]
 801149e:	4615      	mov	r5, r2
 80114a0:	e7bc      	b.n	801141c <_printf_i+0x14c>
 80114a2:	682b      	ldr	r3, [r5, #0]
 80114a4:	1d1a      	adds	r2, r3, #4
 80114a6:	602a      	str	r2, [r5, #0]
 80114a8:	681d      	ldr	r5, [r3, #0]
 80114aa:	6862      	ldr	r2, [r4, #4]
 80114ac:	2100      	movs	r1, #0
 80114ae:	4628      	mov	r0, r5
 80114b0:	f7ee fe8e 	bl	80001d0 <memchr>
 80114b4:	b108      	cbz	r0, 80114ba <_printf_i+0x1ea>
 80114b6:	1b40      	subs	r0, r0, r5
 80114b8:	6060      	str	r0, [r4, #4]
 80114ba:	6863      	ldr	r3, [r4, #4]
 80114bc:	6123      	str	r3, [r4, #16]
 80114be:	2300      	movs	r3, #0
 80114c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114c4:	e7aa      	b.n	801141c <_printf_i+0x14c>
 80114c6:	6923      	ldr	r3, [r4, #16]
 80114c8:	462a      	mov	r2, r5
 80114ca:	4649      	mov	r1, r9
 80114cc:	4640      	mov	r0, r8
 80114ce:	47d0      	blx	sl
 80114d0:	3001      	adds	r0, #1
 80114d2:	d0ad      	beq.n	8011430 <_printf_i+0x160>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	079b      	lsls	r3, r3, #30
 80114d8:	d413      	bmi.n	8011502 <_printf_i+0x232>
 80114da:	68e0      	ldr	r0, [r4, #12]
 80114dc:	9b03      	ldr	r3, [sp, #12]
 80114de:	4298      	cmp	r0, r3
 80114e0:	bfb8      	it	lt
 80114e2:	4618      	movlt	r0, r3
 80114e4:	e7a6      	b.n	8011434 <_printf_i+0x164>
 80114e6:	2301      	movs	r3, #1
 80114e8:	4632      	mov	r2, r6
 80114ea:	4649      	mov	r1, r9
 80114ec:	4640      	mov	r0, r8
 80114ee:	47d0      	blx	sl
 80114f0:	3001      	adds	r0, #1
 80114f2:	d09d      	beq.n	8011430 <_printf_i+0x160>
 80114f4:	3501      	adds	r5, #1
 80114f6:	68e3      	ldr	r3, [r4, #12]
 80114f8:	9903      	ldr	r1, [sp, #12]
 80114fa:	1a5b      	subs	r3, r3, r1
 80114fc:	42ab      	cmp	r3, r5
 80114fe:	dcf2      	bgt.n	80114e6 <_printf_i+0x216>
 8011500:	e7eb      	b.n	80114da <_printf_i+0x20a>
 8011502:	2500      	movs	r5, #0
 8011504:	f104 0619 	add.w	r6, r4, #25
 8011508:	e7f5      	b.n	80114f6 <_printf_i+0x226>
 801150a:	bf00      	nop
 801150c:	08016dc1 	.word	0x08016dc1
 8011510:	08016dd2 	.word	0x08016dd2

08011514 <_scanf_float>:
 8011514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011518:	b087      	sub	sp, #28
 801151a:	4617      	mov	r7, r2
 801151c:	9303      	str	r3, [sp, #12]
 801151e:	688b      	ldr	r3, [r1, #8]
 8011520:	1e5a      	subs	r2, r3, #1
 8011522:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011526:	bf83      	ittte	hi
 8011528:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801152c:	195b      	addhi	r3, r3, r5
 801152e:	9302      	strhi	r3, [sp, #8]
 8011530:	2300      	movls	r3, #0
 8011532:	bf86      	itte	hi
 8011534:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011538:	608b      	strhi	r3, [r1, #8]
 801153a:	9302      	strls	r3, [sp, #8]
 801153c:	680b      	ldr	r3, [r1, #0]
 801153e:	468b      	mov	fp, r1
 8011540:	2500      	movs	r5, #0
 8011542:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011546:	f84b 3b1c 	str.w	r3, [fp], #28
 801154a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801154e:	4680      	mov	r8, r0
 8011550:	460c      	mov	r4, r1
 8011552:	465e      	mov	r6, fp
 8011554:	46aa      	mov	sl, r5
 8011556:	46a9      	mov	r9, r5
 8011558:	9501      	str	r5, [sp, #4]
 801155a:	68a2      	ldr	r2, [r4, #8]
 801155c:	b152      	cbz	r2, 8011574 <_scanf_float+0x60>
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	2b4e      	cmp	r3, #78	; 0x4e
 8011564:	d864      	bhi.n	8011630 <_scanf_float+0x11c>
 8011566:	2b40      	cmp	r3, #64	; 0x40
 8011568:	d83c      	bhi.n	80115e4 <_scanf_float+0xd0>
 801156a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801156e:	b2c8      	uxtb	r0, r1
 8011570:	280e      	cmp	r0, #14
 8011572:	d93a      	bls.n	80115ea <_scanf_float+0xd6>
 8011574:	f1b9 0f00 	cmp.w	r9, #0
 8011578:	d003      	beq.n	8011582 <_scanf_float+0x6e>
 801157a:	6823      	ldr	r3, [r4, #0]
 801157c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011580:	6023      	str	r3, [r4, #0]
 8011582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011586:	f1ba 0f01 	cmp.w	sl, #1
 801158a:	f200 8113 	bhi.w	80117b4 <_scanf_float+0x2a0>
 801158e:	455e      	cmp	r6, fp
 8011590:	f200 8105 	bhi.w	801179e <_scanf_float+0x28a>
 8011594:	2501      	movs	r5, #1
 8011596:	4628      	mov	r0, r5
 8011598:	b007      	add	sp, #28
 801159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80115a2:	2a0d      	cmp	r2, #13
 80115a4:	d8e6      	bhi.n	8011574 <_scanf_float+0x60>
 80115a6:	a101      	add	r1, pc, #4	; (adr r1, 80115ac <_scanf_float+0x98>)
 80115a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80115ac:	080116eb 	.word	0x080116eb
 80115b0:	08011575 	.word	0x08011575
 80115b4:	08011575 	.word	0x08011575
 80115b8:	08011575 	.word	0x08011575
 80115bc:	0801174b 	.word	0x0801174b
 80115c0:	08011723 	.word	0x08011723
 80115c4:	08011575 	.word	0x08011575
 80115c8:	08011575 	.word	0x08011575
 80115cc:	080116f9 	.word	0x080116f9
 80115d0:	08011575 	.word	0x08011575
 80115d4:	08011575 	.word	0x08011575
 80115d8:	08011575 	.word	0x08011575
 80115dc:	08011575 	.word	0x08011575
 80115e0:	080116b1 	.word	0x080116b1
 80115e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80115e8:	e7db      	b.n	80115a2 <_scanf_float+0x8e>
 80115ea:	290e      	cmp	r1, #14
 80115ec:	d8c2      	bhi.n	8011574 <_scanf_float+0x60>
 80115ee:	a001      	add	r0, pc, #4	; (adr r0, 80115f4 <_scanf_float+0xe0>)
 80115f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80115f4:	080116a3 	.word	0x080116a3
 80115f8:	08011575 	.word	0x08011575
 80115fc:	080116a3 	.word	0x080116a3
 8011600:	08011737 	.word	0x08011737
 8011604:	08011575 	.word	0x08011575
 8011608:	08011651 	.word	0x08011651
 801160c:	0801168d 	.word	0x0801168d
 8011610:	0801168d 	.word	0x0801168d
 8011614:	0801168d 	.word	0x0801168d
 8011618:	0801168d 	.word	0x0801168d
 801161c:	0801168d 	.word	0x0801168d
 8011620:	0801168d 	.word	0x0801168d
 8011624:	0801168d 	.word	0x0801168d
 8011628:	0801168d 	.word	0x0801168d
 801162c:	0801168d 	.word	0x0801168d
 8011630:	2b6e      	cmp	r3, #110	; 0x6e
 8011632:	d809      	bhi.n	8011648 <_scanf_float+0x134>
 8011634:	2b60      	cmp	r3, #96	; 0x60
 8011636:	d8b2      	bhi.n	801159e <_scanf_float+0x8a>
 8011638:	2b54      	cmp	r3, #84	; 0x54
 801163a:	d077      	beq.n	801172c <_scanf_float+0x218>
 801163c:	2b59      	cmp	r3, #89	; 0x59
 801163e:	d199      	bne.n	8011574 <_scanf_float+0x60>
 8011640:	2d07      	cmp	r5, #7
 8011642:	d197      	bne.n	8011574 <_scanf_float+0x60>
 8011644:	2508      	movs	r5, #8
 8011646:	e029      	b.n	801169c <_scanf_float+0x188>
 8011648:	2b74      	cmp	r3, #116	; 0x74
 801164a:	d06f      	beq.n	801172c <_scanf_float+0x218>
 801164c:	2b79      	cmp	r3, #121	; 0x79
 801164e:	e7f6      	b.n	801163e <_scanf_float+0x12a>
 8011650:	6821      	ldr	r1, [r4, #0]
 8011652:	05c8      	lsls	r0, r1, #23
 8011654:	d51a      	bpl.n	801168c <_scanf_float+0x178>
 8011656:	9b02      	ldr	r3, [sp, #8]
 8011658:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801165c:	6021      	str	r1, [r4, #0]
 801165e:	f109 0901 	add.w	r9, r9, #1
 8011662:	b11b      	cbz	r3, 801166c <_scanf_float+0x158>
 8011664:	3b01      	subs	r3, #1
 8011666:	3201      	adds	r2, #1
 8011668:	9302      	str	r3, [sp, #8]
 801166a:	60a2      	str	r2, [r4, #8]
 801166c:	68a3      	ldr	r3, [r4, #8]
 801166e:	3b01      	subs	r3, #1
 8011670:	60a3      	str	r3, [r4, #8]
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	3301      	adds	r3, #1
 8011676:	6123      	str	r3, [r4, #16]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3b01      	subs	r3, #1
 801167c:	2b00      	cmp	r3, #0
 801167e:	607b      	str	r3, [r7, #4]
 8011680:	f340 8084 	ble.w	801178c <_scanf_float+0x278>
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	3301      	adds	r3, #1
 8011688:	603b      	str	r3, [r7, #0]
 801168a:	e766      	b.n	801155a <_scanf_float+0x46>
 801168c:	eb1a 0f05 	cmn.w	sl, r5
 8011690:	f47f af70 	bne.w	8011574 <_scanf_float+0x60>
 8011694:	6822      	ldr	r2, [r4, #0]
 8011696:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801169a:	6022      	str	r2, [r4, #0]
 801169c:	f806 3b01 	strb.w	r3, [r6], #1
 80116a0:	e7e4      	b.n	801166c <_scanf_float+0x158>
 80116a2:	6822      	ldr	r2, [r4, #0]
 80116a4:	0610      	lsls	r0, r2, #24
 80116a6:	f57f af65 	bpl.w	8011574 <_scanf_float+0x60>
 80116aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80116ae:	e7f4      	b.n	801169a <_scanf_float+0x186>
 80116b0:	f1ba 0f00 	cmp.w	sl, #0
 80116b4:	d10e      	bne.n	80116d4 <_scanf_float+0x1c0>
 80116b6:	f1b9 0f00 	cmp.w	r9, #0
 80116ba:	d10e      	bne.n	80116da <_scanf_float+0x1c6>
 80116bc:	6822      	ldr	r2, [r4, #0]
 80116be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80116c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80116c6:	d108      	bne.n	80116da <_scanf_float+0x1c6>
 80116c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80116cc:	6022      	str	r2, [r4, #0]
 80116ce:	f04f 0a01 	mov.w	sl, #1
 80116d2:	e7e3      	b.n	801169c <_scanf_float+0x188>
 80116d4:	f1ba 0f02 	cmp.w	sl, #2
 80116d8:	d055      	beq.n	8011786 <_scanf_float+0x272>
 80116da:	2d01      	cmp	r5, #1
 80116dc:	d002      	beq.n	80116e4 <_scanf_float+0x1d0>
 80116de:	2d04      	cmp	r5, #4
 80116e0:	f47f af48 	bne.w	8011574 <_scanf_float+0x60>
 80116e4:	3501      	adds	r5, #1
 80116e6:	b2ed      	uxtb	r5, r5
 80116e8:	e7d8      	b.n	801169c <_scanf_float+0x188>
 80116ea:	f1ba 0f01 	cmp.w	sl, #1
 80116ee:	f47f af41 	bne.w	8011574 <_scanf_float+0x60>
 80116f2:	f04f 0a02 	mov.w	sl, #2
 80116f6:	e7d1      	b.n	801169c <_scanf_float+0x188>
 80116f8:	b97d      	cbnz	r5, 801171a <_scanf_float+0x206>
 80116fa:	f1b9 0f00 	cmp.w	r9, #0
 80116fe:	f47f af3c 	bne.w	801157a <_scanf_float+0x66>
 8011702:	6822      	ldr	r2, [r4, #0]
 8011704:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011708:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801170c:	f47f af39 	bne.w	8011582 <_scanf_float+0x6e>
 8011710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011714:	6022      	str	r2, [r4, #0]
 8011716:	2501      	movs	r5, #1
 8011718:	e7c0      	b.n	801169c <_scanf_float+0x188>
 801171a:	2d03      	cmp	r5, #3
 801171c:	d0e2      	beq.n	80116e4 <_scanf_float+0x1d0>
 801171e:	2d05      	cmp	r5, #5
 8011720:	e7de      	b.n	80116e0 <_scanf_float+0x1cc>
 8011722:	2d02      	cmp	r5, #2
 8011724:	f47f af26 	bne.w	8011574 <_scanf_float+0x60>
 8011728:	2503      	movs	r5, #3
 801172a:	e7b7      	b.n	801169c <_scanf_float+0x188>
 801172c:	2d06      	cmp	r5, #6
 801172e:	f47f af21 	bne.w	8011574 <_scanf_float+0x60>
 8011732:	2507      	movs	r5, #7
 8011734:	e7b2      	b.n	801169c <_scanf_float+0x188>
 8011736:	6822      	ldr	r2, [r4, #0]
 8011738:	0591      	lsls	r1, r2, #22
 801173a:	f57f af1b 	bpl.w	8011574 <_scanf_float+0x60>
 801173e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011742:	6022      	str	r2, [r4, #0]
 8011744:	f8cd 9004 	str.w	r9, [sp, #4]
 8011748:	e7a8      	b.n	801169c <_scanf_float+0x188>
 801174a:	6822      	ldr	r2, [r4, #0]
 801174c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011750:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011754:	d006      	beq.n	8011764 <_scanf_float+0x250>
 8011756:	0550      	lsls	r0, r2, #21
 8011758:	f57f af0c 	bpl.w	8011574 <_scanf_float+0x60>
 801175c:	f1b9 0f00 	cmp.w	r9, #0
 8011760:	f43f af0f 	beq.w	8011582 <_scanf_float+0x6e>
 8011764:	0591      	lsls	r1, r2, #22
 8011766:	bf58      	it	pl
 8011768:	9901      	ldrpl	r1, [sp, #4]
 801176a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801176e:	bf58      	it	pl
 8011770:	eba9 0101 	subpl.w	r1, r9, r1
 8011774:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011778:	bf58      	it	pl
 801177a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801177e:	6022      	str	r2, [r4, #0]
 8011780:	f04f 0900 	mov.w	r9, #0
 8011784:	e78a      	b.n	801169c <_scanf_float+0x188>
 8011786:	f04f 0a03 	mov.w	sl, #3
 801178a:	e787      	b.n	801169c <_scanf_float+0x188>
 801178c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011790:	4639      	mov	r1, r7
 8011792:	4640      	mov	r0, r8
 8011794:	4798      	blx	r3
 8011796:	2800      	cmp	r0, #0
 8011798:	f43f aedf 	beq.w	801155a <_scanf_float+0x46>
 801179c:	e6ea      	b.n	8011574 <_scanf_float+0x60>
 801179e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80117a6:	463a      	mov	r2, r7
 80117a8:	4640      	mov	r0, r8
 80117aa:	4798      	blx	r3
 80117ac:	6923      	ldr	r3, [r4, #16]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	6123      	str	r3, [r4, #16]
 80117b2:	e6ec      	b.n	801158e <_scanf_float+0x7a>
 80117b4:	1e6b      	subs	r3, r5, #1
 80117b6:	2b06      	cmp	r3, #6
 80117b8:	d825      	bhi.n	8011806 <_scanf_float+0x2f2>
 80117ba:	2d02      	cmp	r5, #2
 80117bc:	d836      	bhi.n	801182c <_scanf_float+0x318>
 80117be:	455e      	cmp	r6, fp
 80117c0:	f67f aee8 	bls.w	8011594 <_scanf_float+0x80>
 80117c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80117cc:	463a      	mov	r2, r7
 80117ce:	4640      	mov	r0, r8
 80117d0:	4798      	blx	r3
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	3b01      	subs	r3, #1
 80117d6:	6123      	str	r3, [r4, #16]
 80117d8:	e7f1      	b.n	80117be <_scanf_float+0x2aa>
 80117da:	9802      	ldr	r0, [sp, #8]
 80117dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80117e4:	9002      	str	r0, [sp, #8]
 80117e6:	463a      	mov	r2, r7
 80117e8:	4640      	mov	r0, r8
 80117ea:	4798      	blx	r3
 80117ec:	6923      	ldr	r3, [r4, #16]
 80117ee:	3b01      	subs	r3, #1
 80117f0:	6123      	str	r3, [r4, #16]
 80117f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117f6:	fa5f fa8a 	uxtb.w	sl, sl
 80117fa:	f1ba 0f02 	cmp.w	sl, #2
 80117fe:	d1ec      	bne.n	80117da <_scanf_float+0x2c6>
 8011800:	3d03      	subs	r5, #3
 8011802:	b2ed      	uxtb	r5, r5
 8011804:	1b76      	subs	r6, r6, r5
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	05da      	lsls	r2, r3, #23
 801180a:	d52f      	bpl.n	801186c <_scanf_float+0x358>
 801180c:	055b      	lsls	r3, r3, #21
 801180e:	d510      	bpl.n	8011832 <_scanf_float+0x31e>
 8011810:	455e      	cmp	r6, fp
 8011812:	f67f aebf 	bls.w	8011594 <_scanf_float+0x80>
 8011816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801181a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801181e:	463a      	mov	r2, r7
 8011820:	4640      	mov	r0, r8
 8011822:	4798      	blx	r3
 8011824:	6923      	ldr	r3, [r4, #16]
 8011826:	3b01      	subs	r3, #1
 8011828:	6123      	str	r3, [r4, #16]
 801182a:	e7f1      	b.n	8011810 <_scanf_float+0x2fc>
 801182c:	46aa      	mov	sl, r5
 801182e:	9602      	str	r6, [sp, #8]
 8011830:	e7df      	b.n	80117f2 <_scanf_float+0x2de>
 8011832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011836:	6923      	ldr	r3, [r4, #16]
 8011838:	2965      	cmp	r1, #101	; 0x65
 801183a:	f103 33ff 	add.w	r3, r3, #4294967295
 801183e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011842:	6123      	str	r3, [r4, #16]
 8011844:	d00c      	beq.n	8011860 <_scanf_float+0x34c>
 8011846:	2945      	cmp	r1, #69	; 0x45
 8011848:	d00a      	beq.n	8011860 <_scanf_float+0x34c>
 801184a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801184e:	463a      	mov	r2, r7
 8011850:	4640      	mov	r0, r8
 8011852:	4798      	blx	r3
 8011854:	6923      	ldr	r3, [r4, #16]
 8011856:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801185a:	3b01      	subs	r3, #1
 801185c:	1eb5      	subs	r5, r6, #2
 801185e:	6123      	str	r3, [r4, #16]
 8011860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011864:	463a      	mov	r2, r7
 8011866:	4640      	mov	r0, r8
 8011868:	4798      	blx	r3
 801186a:	462e      	mov	r6, r5
 801186c:	6825      	ldr	r5, [r4, #0]
 801186e:	f015 0510 	ands.w	r5, r5, #16
 8011872:	d158      	bne.n	8011926 <_scanf_float+0x412>
 8011874:	7035      	strb	r5, [r6, #0]
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011880:	d11c      	bne.n	80118bc <_scanf_float+0x3a8>
 8011882:	9b01      	ldr	r3, [sp, #4]
 8011884:	454b      	cmp	r3, r9
 8011886:	eba3 0209 	sub.w	r2, r3, r9
 801188a:	d124      	bne.n	80118d6 <_scanf_float+0x3c2>
 801188c:	2200      	movs	r2, #0
 801188e:	4659      	mov	r1, fp
 8011890:	4640      	mov	r0, r8
 8011892:	f002 fe51 	bl	8014538 <_strtod_r>
 8011896:	9b03      	ldr	r3, [sp, #12]
 8011898:	6821      	ldr	r1, [r4, #0]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f011 0f02 	tst.w	r1, #2
 80118a0:	ec57 6b10 	vmov	r6, r7, d0
 80118a4:	f103 0204 	add.w	r2, r3, #4
 80118a8:	d020      	beq.n	80118ec <_scanf_float+0x3d8>
 80118aa:	9903      	ldr	r1, [sp, #12]
 80118ac:	600a      	str	r2, [r1, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	e9c3 6700 	strd	r6, r7, [r3]
 80118b4:	68e3      	ldr	r3, [r4, #12]
 80118b6:	3301      	adds	r3, #1
 80118b8:	60e3      	str	r3, [r4, #12]
 80118ba:	e66c      	b.n	8011596 <_scanf_float+0x82>
 80118bc:	9b04      	ldr	r3, [sp, #16]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d0e4      	beq.n	801188c <_scanf_float+0x378>
 80118c2:	9905      	ldr	r1, [sp, #20]
 80118c4:	230a      	movs	r3, #10
 80118c6:	462a      	mov	r2, r5
 80118c8:	3101      	adds	r1, #1
 80118ca:	4640      	mov	r0, r8
 80118cc:	f002 febc 	bl	8014648 <_strtol_r>
 80118d0:	9b04      	ldr	r3, [sp, #16]
 80118d2:	9e05      	ldr	r6, [sp, #20]
 80118d4:	1ac2      	subs	r2, r0, r3
 80118d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80118da:	429e      	cmp	r6, r3
 80118dc:	bf28      	it	cs
 80118de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80118e2:	4912      	ldr	r1, [pc, #72]	; (801192c <_scanf_float+0x418>)
 80118e4:	4630      	mov	r0, r6
 80118e6:	f000 f99b 	bl	8011c20 <siprintf>
 80118ea:	e7cf      	b.n	801188c <_scanf_float+0x378>
 80118ec:	f011 0f04 	tst.w	r1, #4
 80118f0:	9903      	ldr	r1, [sp, #12]
 80118f2:	600a      	str	r2, [r1, #0]
 80118f4:	d1db      	bne.n	80118ae <_scanf_float+0x39a>
 80118f6:	f8d3 8000 	ldr.w	r8, [r3]
 80118fa:	ee10 2a10 	vmov	r2, s0
 80118fe:	ee10 0a10 	vmov	r0, s0
 8011902:	463b      	mov	r3, r7
 8011904:	4639      	mov	r1, r7
 8011906:	f7ef f911 	bl	8000b2c <__aeabi_dcmpun>
 801190a:	b128      	cbz	r0, 8011918 <_scanf_float+0x404>
 801190c:	4808      	ldr	r0, [pc, #32]	; (8011930 <_scanf_float+0x41c>)
 801190e:	f000 fbcf 	bl	80120b0 <nanf>
 8011912:	ed88 0a00 	vstr	s0, [r8]
 8011916:	e7cd      	b.n	80118b4 <_scanf_float+0x3a0>
 8011918:	4630      	mov	r0, r6
 801191a:	4639      	mov	r1, r7
 801191c:	f7ef f964 	bl	8000be8 <__aeabi_d2f>
 8011920:	f8c8 0000 	str.w	r0, [r8]
 8011924:	e7c6      	b.n	80118b4 <_scanf_float+0x3a0>
 8011926:	2500      	movs	r5, #0
 8011928:	e635      	b.n	8011596 <_scanf_float+0x82>
 801192a:	bf00      	nop
 801192c:	08016de3 	.word	0x08016de3
 8011930:	08016dae 	.word	0x08016dae

08011934 <std>:
 8011934:	2300      	movs	r3, #0
 8011936:	b510      	push	{r4, lr}
 8011938:	4604      	mov	r4, r0
 801193a:	e9c0 3300 	strd	r3, r3, [r0]
 801193e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011942:	6083      	str	r3, [r0, #8]
 8011944:	8181      	strh	r1, [r0, #12]
 8011946:	6643      	str	r3, [r0, #100]	; 0x64
 8011948:	81c2      	strh	r2, [r0, #14]
 801194a:	6183      	str	r3, [r0, #24]
 801194c:	4619      	mov	r1, r3
 801194e:	2208      	movs	r2, #8
 8011950:	305c      	adds	r0, #92	; 0x5c
 8011952:	f000 fa87 	bl	8011e64 <memset>
 8011956:	4b0d      	ldr	r3, [pc, #52]	; (801198c <std+0x58>)
 8011958:	6263      	str	r3, [r4, #36]	; 0x24
 801195a:	4b0d      	ldr	r3, [pc, #52]	; (8011990 <std+0x5c>)
 801195c:	62a3      	str	r3, [r4, #40]	; 0x28
 801195e:	4b0d      	ldr	r3, [pc, #52]	; (8011994 <std+0x60>)
 8011960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011962:	4b0d      	ldr	r3, [pc, #52]	; (8011998 <std+0x64>)
 8011964:	6323      	str	r3, [r4, #48]	; 0x30
 8011966:	4b0d      	ldr	r3, [pc, #52]	; (801199c <std+0x68>)
 8011968:	6224      	str	r4, [r4, #32]
 801196a:	429c      	cmp	r4, r3
 801196c:	d006      	beq.n	801197c <std+0x48>
 801196e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011972:	4294      	cmp	r4, r2
 8011974:	d002      	beq.n	801197c <std+0x48>
 8011976:	33d0      	adds	r3, #208	; 0xd0
 8011978:	429c      	cmp	r4, r3
 801197a:	d105      	bne.n	8011988 <std+0x54>
 801197c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011984:	f000 bb82 	b.w	801208c <__retarget_lock_init_recursive>
 8011988:	bd10      	pop	{r4, pc}
 801198a:	bf00      	nop
 801198c:	08011c61 	.word	0x08011c61
 8011990:	08011c83 	.word	0x08011c83
 8011994:	08011cbb 	.word	0x08011cbb
 8011998:	08011cdf 	.word	0x08011cdf
 801199c:	20003a54 	.word	0x20003a54

080119a0 <stdio_exit_handler>:
 80119a0:	4a02      	ldr	r2, [pc, #8]	; (80119ac <stdio_exit_handler+0xc>)
 80119a2:	4903      	ldr	r1, [pc, #12]	; (80119b0 <stdio_exit_handler+0x10>)
 80119a4:	4803      	ldr	r0, [pc, #12]	; (80119b4 <stdio_exit_handler+0x14>)
 80119a6:	f000 b87b 	b.w	8011aa0 <_fwalk_sglue>
 80119aa:	bf00      	nop
 80119ac:	20000114 	.word	0x20000114
 80119b0:	08014c91 	.word	0x08014c91
 80119b4:	20000120 	.word	0x20000120

080119b8 <cleanup_stdio>:
 80119b8:	6841      	ldr	r1, [r0, #4]
 80119ba:	4b0c      	ldr	r3, [pc, #48]	; (80119ec <cleanup_stdio+0x34>)
 80119bc:	4299      	cmp	r1, r3
 80119be:	b510      	push	{r4, lr}
 80119c0:	4604      	mov	r4, r0
 80119c2:	d001      	beq.n	80119c8 <cleanup_stdio+0x10>
 80119c4:	f003 f964 	bl	8014c90 <_fflush_r>
 80119c8:	68a1      	ldr	r1, [r4, #8]
 80119ca:	4b09      	ldr	r3, [pc, #36]	; (80119f0 <cleanup_stdio+0x38>)
 80119cc:	4299      	cmp	r1, r3
 80119ce:	d002      	beq.n	80119d6 <cleanup_stdio+0x1e>
 80119d0:	4620      	mov	r0, r4
 80119d2:	f003 f95d 	bl	8014c90 <_fflush_r>
 80119d6:	68e1      	ldr	r1, [r4, #12]
 80119d8:	4b06      	ldr	r3, [pc, #24]	; (80119f4 <cleanup_stdio+0x3c>)
 80119da:	4299      	cmp	r1, r3
 80119dc:	d004      	beq.n	80119e8 <cleanup_stdio+0x30>
 80119de:	4620      	mov	r0, r4
 80119e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119e4:	f003 b954 	b.w	8014c90 <_fflush_r>
 80119e8:	bd10      	pop	{r4, pc}
 80119ea:	bf00      	nop
 80119ec:	20003a54 	.word	0x20003a54
 80119f0:	20003abc 	.word	0x20003abc
 80119f4:	20003b24 	.word	0x20003b24

080119f8 <global_stdio_init.part.0>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	4b0b      	ldr	r3, [pc, #44]	; (8011a28 <global_stdio_init.part.0+0x30>)
 80119fc:	4c0b      	ldr	r4, [pc, #44]	; (8011a2c <global_stdio_init.part.0+0x34>)
 80119fe:	4a0c      	ldr	r2, [pc, #48]	; (8011a30 <global_stdio_init.part.0+0x38>)
 8011a00:	601a      	str	r2, [r3, #0]
 8011a02:	4620      	mov	r0, r4
 8011a04:	2200      	movs	r2, #0
 8011a06:	2104      	movs	r1, #4
 8011a08:	f7ff ff94 	bl	8011934 <std>
 8011a0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a10:	2201      	movs	r2, #1
 8011a12:	2109      	movs	r1, #9
 8011a14:	f7ff ff8e 	bl	8011934 <std>
 8011a18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a22:	2112      	movs	r1, #18
 8011a24:	f7ff bf86 	b.w	8011934 <std>
 8011a28:	20003b8c 	.word	0x20003b8c
 8011a2c:	20003a54 	.word	0x20003a54
 8011a30:	080119a1 	.word	0x080119a1

08011a34 <__sfp_lock_acquire>:
 8011a34:	4801      	ldr	r0, [pc, #4]	; (8011a3c <__sfp_lock_acquire+0x8>)
 8011a36:	f000 bb2a 	b.w	801208e <__retarget_lock_acquire_recursive>
 8011a3a:	bf00      	nop
 8011a3c:	20003b95 	.word	0x20003b95

08011a40 <__sfp_lock_release>:
 8011a40:	4801      	ldr	r0, [pc, #4]	; (8011a48 <__sfp_lock_release+0x8>)
 8011a42:	f000 bb25 	b.w	8012090 <__retarget_lock_release_recursive>
 8011a46:	bf00      	nop
 8011a48:	20003b95 	.word	0x20003b95

08011a4c <__sinit>:
 8011a4c:	b510      	push	{r4, lr}
 8011a4e:	4604      	mov	r4, r0
 8011a50:	f7ff fff0 	bl	8011a34 <__sfp_lock_acquire>
 8011a54:	6a23      	ldr	r3, [r4, #32]
 8011a56:	b11b      	cbz	r3, 8011a60 <__sinit+0x14>
 8011a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a5c:	f7ff bff0 	b.w	8011a40 <__sfp_lock_release>
 8011a60:	4b04      	ldr	r3, [pc, #16]	; (8011a74 <__sinit+0x28>)
 8011a62:	6223      	str	r3, [r4, #32]
 8011a64:	4b04      	ldr	r3, [pc, #16]	; (8011a78 <__sinit+0x2c>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1f5      	bne.n	8011a58 <__sinit+0xc>
 8011a6c:	f7ff ffc4 	bl	80119f8 <global_stdio_init.part.0>
 8011a70:	e7f2      	b.n	8011a58 <__sinit+0xc>
 8011a72:	bf00      	nop
 8011a74:	080119b9 	.word	0x080119b9
 8011a78:	20003b8c 	.word	0x20003b8c

08011a7c <fiprintf>:
 8011a7c:	b40e      	push	{r1, r2, r3}
 8011a7e:	b503      	push	{r0, r1, lr}
 8011a80:	4601      	mov	r1, r0
 8011a82:	ab03      	add	r3, sp, #12
 8011a84:	4805      	ldr	r0, [pc, #20]	; (8011a9c <fiprintf+0x20>)
 8011a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a8a:	6800      	ldr	r0, [r0, #0]
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	f002 ff5f 	bl	8014950 <_vfiprintf_r>
 8011a92:	b002      	add	sp, #8
 8011a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a98:	b003      	add	sp, #12
 8011a9a:	4770      	bx	lr
 8011a9c:	2000016c 	.word	0x2000016c

08011aa0 <_fwalk_sglue>:
 8011aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa4:	4607      	mov	r7, r0
 8011aa6:	4688      	mov	r8, r1
 8011aa8:	4614      	mov	r4, r2
 8011aaa:	2600      	movs	r6, #0
 8011aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ab4:	d505      	bpl.n	8011ac2 <_fwalk_sglue+0x22>
 8011ab6:	6824      	ldr	r4, [r4, #0]
 8011ab8:	2c00      	cmp	r4, #0
 8011aba:	d1f7      	bne.n	8011aac <_fwalk_sglue+0xc>
 8011abc:	4630      	mov	r0, r6
 8011abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac2:	89ab      	ldrh	r3, [r5, #12]
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d907      	bls.n	8011ad8 <_fwalk_sglue+0x38>
 8011ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011acc:	3301      	adds	r3, #1
 8011ace:	d003      	beq.n	8011ad8 <_fwalk_sglue+0x38>
 8011ad0:	4629      	mov	r1, r5
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	47c0      	blx	r8
 8011ad6:	4306      	orrs	r6, r0
 8011ad8:	3568      	adds	r5, #104	; 0x68
 8011ada:	e7e9      	b.n	8011ab0 <_fwalk_sglue+0x10>

08011adc <iprintf>:
 8011adc:	b40f      	push	{r0, r1, r2, r3}
 8011ade:	b507      	push	{r0, r1, r2, lr}
 8011ae0:	4906      	ldr	r1, [pc, #24]	; (8011afc <iprintf+0x20>)
 8011ae2:	ab04      	add	r3, sp, #16
 8011ae4:	6808      	ldr	r0, [r1, #0]
 8011ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aea:	6881      	ldr	r1, [r0, #8]
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	f002 ff2f 	bl	8014950 <_vfiprintf_r>
 8011af2:	b003      	add	sp, #12
 8011af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011af8:	b004      	add	sp, #16
 8011afa:	4770      	bx	lr
 8011afc:	2000016c 	.word	0x2000016c

08011b00 <_puts_r>:
 8011b00:	6a03      	ldr	r3, [r0, #32]
 8011b02:	b570      	push	{r4, r5, r6, lr}
 8011b04:	6884      	ldr	r4, [r0, #8]
 8011b06:	4605      	mov	r5, r0
 8011b08:	460e      	mov	r6, r1
 8011b0a:	b90b      	cbnz	r3, 8011b10 <_puts_r+0x10>
 8011b0c:	f7ff ff9e 	bl	8011a4c <__sinit>
 8011b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b12:	07db      	lsls	r3, r3, #31
 8011b14:	d405      	bmi.n	8011b22 <_puts_r+0x22>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	0598      	lsls	r0, r3, #22
 8011b1a:	d402      	bmi.n	8011b22 <_puts_r+0x22>
 8011b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b1e:	f000 fab6 	bl	801208e <__retarget_lock_acquire_recursive>
 8011b22:	89a3      	ldrh	r3, [r4, #12]
 8011b24:	0719      	lsls	r1, r3, #28
 8011b26:	d513      	bpl.n	8011b50 <_puts_r+0x50>
 8011b28:	6923      	ldr	r3, [r4, #16]
 8011b2a:	b18b      	cbz	r3, 8011b50 <_puts_r+0x50>
 8011b2c:	3e01      	subs	r6, #1
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b34:	3b01      	subs	r3, #1
 8011b36:	60a3      	str	r3, [r4, #8]
 8011b38:	b9e9      	cbnz	r1, 8011b76 <_puts_r+0x76>
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	da2e      	bge.n	8011b9c <_puts_r+0x9c>
 8011b3e:	4622      	mov	r2, r4
 8011b40:	210a      	movs	r1, #10
 8011b42:	4628      	mov	r0, r5
 8011b44:	f000 f8cf 	bl	8011ce6 <__swbuf_r>
 8011b48:	3001      	adds	r0, #1
 8011b4a:	d007      	beq.n	8011b5c <_puts_r+0x5c>
 8011b4c:	250a      	movs	r5, #10
 8011b4e:	e007      	b.n	8011b60 <_puts_r+0x60>
 8011b50:	4621      	mov	r1, r4
 8011b52:	4628      	mov	r0, r5
 8011b54:	f000 f904 	bl	8011d60 <__swsetup_r>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	d0e7      	beq.n	8011b2c <_puts_r+0x2c>
 8011b5c:	f04f 35ff 	mov.w	r5, #4294967295
 8011b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b62:	07da      	lsls	r2, r3, #31
 8011b64:	d405      	bmi.n	8011b72 <_puts_r+0x72>
 8011b66:	89a3      	ldrh	r3, [r4, #12]
 8011b68:	059b      	lsls	r3, r3, #22
 8011b6a:	d402      	bmi.n	8011b72 <_puts_r+0x72>
 8011b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b6e:	f000 fa8f 	bl	8012090 <__retarget_lock_release_recursive>
 8011b72:	4628      	mov	r0, r5
 8011b74:	bd70      	pop	{r4, r5, r6, pc}
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	da04      	bge.n	8011b84 <_puts_r+0x84>
 8011b7a:	69a2      	ldr	r2, [r4, #24]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	dc06      	bgt.n	8011b8e <_puts_r+0x8e>
 8011b80:	290a      	cmp	r1, #10
 8011b82:	d004      	beq.n	8011b8e <_puts_r+0x8e>
 8011b84:	6823      	ldr	r3, [r4, #0]
 8011b86:	1c5a      	adds	r2, r3, #1
 8011b88:	6022      	str	r2, [r4, #0]
 8011b8a:	7019      	strb	r1, [r3, #0]
 8011b8c:	e7cf      	b.n	8011b2e <_puts_r+0x2e>
 8011b8e:	4622      	mov	r2, r4
 8011b90:	4628      	mov	r0, r5
 8011b92:	f000 f8a8 	bl	8011ce6 <__swbuf_r>
 8011b96:	3001      	adds	r0, #1
 8011b98:	d1c9      	bne.n	8011b2e <_puts_r+0x2e>
 8011b9a:	e7df      	b.n	8011b5c <_puts_r+0x5c>
 8011b9c:	6823      	ldr	r3, [r4, #0]
 8011b9e:	250a      	movs	r5, #10
 8011ba0:	1c5a      	adds	r2, r3, #1
 8011ba2:	6022      	str	r2, [r4, #0]
 8011ba4:	701d      	strb	r5, [r3, #0]
 8011ba6:	e7db      	b.n	8011b60 <_puts_r+0x60>

08011ba8 <puts>:
 8011ba8:	4b02      	ldr	r3, [pc, #8]	; (8011bb4 <puts+0xc>)
 8011baa:	4601      	mov	r1, r0
 8011bac:	6818      	ldr	r0, [r3, #0]
 8011bae:	f7ff bfa7 	b.w	8011b00 <_puts_r>
 8011bb2:	bf00      	nop
 8011bb4:	2000016c 	.word	0x2000016c

08011bb8 <sniprintf>:
 8011bb8:	b40c      	push	{r2, r3}
 8011bba:	b530      	push	{r4, r5, lr}
 8011bbc:	4b17      	ldr	r3, [pc, #92]	; (8011c1c <sniprintf+0x64>)
 8011bbe:	1e0c      	subs	r4, r1, #0
 8011bc0:	681d      	ldr	r5, [r3, #0]
 8011bc2:	b09d      	sub	sp, #116	; 0x74
 8011bc4:	da08      	bge.n	8011bd8 <sniprintf+0x20>
 8011bc6:	238b      	movs	r3, #139	; 0x8b
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	f04f 30ff 	mov.w	r0, #4294967295
 8011bce:	b01d      	add	sp, #116	; 0x74
 8011bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bd4:	b002      	add	sp, #8
 8011bd6:	4770      	bx	lr
 8011bd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011bdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011be0:	bf14      	ite	ne
 8011be2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011be6:	4623      	moveq	r3, r4
 8011be8:	9304      	str	r3, [sp, #16]
 8011bea:	9307      	str	r3, [sp, #28]
 8011bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011bf0:	9002      	str	r0, [sp, #8]
 8011bf2:	9006      	str	r0, [sp, #24]
 8011bf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011bf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011bfa:	ab21      	add	r3, sp, #132	; 0x84
 8011bfc:	a902      	add	r1, sp, #8
 8011bfe:	4628      	mov	r0, r5
 8011c00:	9301      	str	r3, [sp, #4]
 8011c02:	f002 fd7d 	bl	8014700 <_svfiprintf_r>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	bfbc      	itt	lt
 8011c0a:	238b      	movlt	r3, #139	; 0x8b
 8011c0c:	602b      	strlt	r3, [r5, #0]
 8011c0e:	2c00      	cmp	r4, #0
 8011c10:	d0dd      	beq.n	8011bce <sniprintf+0x16>
 8011c12:	9b02      	ldr	r3, [sp, #8]
 8011c14:	2200      	movs	r2, #0
 8011c16:	701a      	strb	r2, [r3, #0]
 8011c18:	e7d9      	b.n	8011bce <sniprintf+0x16>
 8011c1a:	bf00      	nop
 8011c1c:	2000016c 	.word	0x2000016c

08011c20 <siprintf>:
 8011c20:	b40e      	push	{r1, r2, r3}
 8011c22:	b500      	push	{lr}
 8011c24:	b09c      	sub	sp, #112	; 0x70
 8011c26:	ab1d      	add	r3, sp, #116	; 0x74
 8011c28:	9002      	str	r0, [sp, #8]
 8011c2a:	9006      	str	r0, [sp, #24]
 8011c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c30:	4809      	ldr	r0, [pc, #36]	; (8011c58 <siprintf+0x38>)
 8011c32:	9107      	str	r1, [sp, #28]
 8011c34:	9104      	str	r1, [sp, #16]
 8011c36:	4909      	ldr	r1, [pc, #36]	; (8011c5c <siprintf+0x3c>)
 8011c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c3c:	9105      	str	r1, [sp, #20]
 8011c3e:	6800      	ldr	r0, [r0, #0]
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	a902      	add	r1, sp, #8
 8011c44:	f002 fd5c 	bl	8014700 <_svfiprintf_r>
 8011c48:	9b02      	ldr	r3, [sp, #8]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	b01c      	add	sp, #112	; 0x70
 8011c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c54:	b003      	add	sp, #12
 8011c56:	4770      	bx	lr
 8011c58:	2000016c 	.word	0x2000016c
 8011c5c:	ffff0208 	.word	0xffff0208

08011c60 <__sread>:
 8011c60:	b510      	push	{r4, lr}
 8011c62:	460c      	mov	r4, r1
 8011c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c68:	f000 f9c2 	bl	8011ff0 <_read_r>
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	bfab      	itete	ge
 8011c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c72:	89a3      	ldrhlt	r3, [r4, #12]
 8011c74:	181b      	addge	r3, r3, r0
 8011c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c7a:	bfac      	ite	ge
 8011c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c7e:	81a3      	strhlt	r3, [r4, #12]
 8011c80:	bd10      	pop	{r4, pc}

08011c82 <__swrite>:
 8011c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c86:	461f      	mov	r7, r3
 8011c88:	898b      	ldrh	r3, [r1, #12]
 8011c8a:	05db      	lsls	r3, r3, #23
 8011c8c:	4605      	mov	r5, r0
 8011c8e:	460c      	mov	r4, r1
 8011c90:	4616      	mov	r6, r2
 8011c92:	d505      	bpl.n	8011ca0 <__swrite+0x1e>
 8011c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c98:	2302      	movs	r3, #2
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f000 f996 	bl	8011fcc <_lseek_r>
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011caa:	81a3      	strh	r3, [r4, #12]
 8011cac:	4632      	mov	r2, r6
 8011cae:	463b      	mov	r3, r7
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb6:	f000 b9ad 	b.w	8012014 <_write_r>

08011cba <__sseek>:
 8011cba:	b510      	push	{r4, lr}
 8011cbc:	460c      	mov	r4, r1
 8011cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cc2:	f000 f983 	bl	8011fcc <_lseek_r>
 8011cc6:	1c43      	adds	r3, r0, #1
 8011cc8:	89a3      	ldrh	r3, [r4, #12]
 8011cca:	bf15      	itete	ne
 8011ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8011cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011cd6:	81a3      	strheq	r3, [r4, #12]
 8011cd8:	bf18      	it	ne
 8011cda:	81a3      	strhne	r3, [r4, #12]
 8011cdc:	bd10      	pop	{r4, pc}

08011cde <__sclose>:
 8011cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce2:	f000 b963 	b.w	8011fac <_close_r>

08011ce6 <__swbuf_r>:
 8011ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce8:	460e      	mov	r6, r1
 8011cea:	4614      	mov	r4, r2
 8011cec:	4605      	mov	r5, r0
 8011cee:	b118      	cbz	r0, 8011cf8 <__swbuf_r+0x12>
 8011cf0:	6a03      	ldr	r3, [r0, #32]
 8011cf2:	b90b      	cbnz	r3, 8011cf8 <__swbuf_r+0x12>
 8011cf4:	f7ff feaa 	bl	8011a4c <__sinit>
 8011cf8:	69a3      	ldr	r3, [r4, #24]
 8011cfa:	60a3      	str	r3, [r4, #8]
 8011cfc:	89a3      	ldrh	r3, [r4, #12]
 8011cfe:	071a      	lsls	r2, r3, #28
 8011d00:	d525      	bpl.n	8011d4e <__swbuf_r+0x68>
 8011d02:	6923      	ldr	r3, [r4, #16]
 8011d04:	b31b      	cbz	r3, 8011d4e <__swbuf_r+0x68>
 8011d06:	6823      	ldr	r3, [r4, #0]
 8011d08:	6922      	ldr	r2, [r4, #16]
 8011d0a:	1a98      	subs	r0, r3, r2
 8011d0c:	6963      	ldr	r3, [r4, #20]
 8011d0e:	b2f6      	uxtb	r6, r6
 8011d10:	4283      	cmp	r3, r0
 8011d12:	4637      	mov	r7, r6
 8011d14:	dc04      	bgt.n	8011d20 <__swbuf_r+0x3a>
 8011d16:	4621      	mov	r1, r4
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f002 ffb9 	bl	8014c90 <_fflush_r>
 8011d1e:	b9e0      	cbnz	r0, 8011d5a <__swbuf_r+0x74>
 8011d20:	68a3      	ldr	r3, [r4, #8]
 8011d22:	3b01      	subs	r3, #1
 8011d24:	60a3      	str	r3, [r4, #8]
 8011d26:	6823      	ldr	r3, [r4, #0]
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	6022      	str	r2, [r4, #0]
 8011d2c:	701e      	strb	r6, [r3, #0]
 8011d2e:	6962      	ldr	r2, [r4, #20]
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d004      	beq.n	8011d40 <__swbuf_r+0x5a>
 8011d36:	89a3      	ldrh	r3, [r4, #12]
 8011d38:	07db      	lsls	r3, r3, #31
 8011d3a:	d506      	bpl.n	8011d4a <__swbuf_r+0x64>
 8011d3c:	2e0a      	cmp	r6, #10
 8011d3e:	d104      	bne.n	8011d4a <__swbuf_r+0x64>
 8011d40:	4621      	mov	r1, r4
 8011d42:	4628      	mov	r0, r5
 8011d44:	f002 ffa4 	bl	8014c90 <_fflush_r>
 8011d48:	b938      	cbnz	r0, 8011d5a <__swbuf_r+0x74>
 8011d4a:	4638      	mov	r0, r7
 8011d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d4e:	4621      	mov	r1, r4
 8011d50:	4628      	mov	r0, r5
 8011d52:	f000 f805 	bl	8011d60 <__swsetup_r>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d0d5      	beq.n	8011d06 <__swbuf_r+0x20>
 8011d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8011d5e:	e7f4      	b.n	8011d4a <__swbuf_r+0x64>

08011d60 <__swsetup_r>:
 8011d60:	b538      	push	{r3, r4, r5, lr}
 8011d62:	4b2a      	ldr	r3, [pc, #168]	; (8011e0c <__swsetup_r+0xac>)
 8011d64:	4605      	mov	r5, r0
 8011d66:	6818      	ldr	r0, [r3, #0]
 8011d68:	460c      	mov	r4, r1
 8011d6a:	b118      	cbz	r0, 8011d74 <__swsetup_r+0x14>
 8011d6c:	6a03      	ldr	r3, [r0, #32]
 8011d6e:	b90b      	cbnz	r3, 8011d74 <__swsetup_r+0x14>
 8011d70:	f7ff fe6c 	bl	8011a4c <__sinit>
 8011d74:	89a3      	ldrh	r3, [r4, #12]
 8011d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d7a:	0718      	lsls	r0, r3, #28
 8011d7c:	d422      	bmi.n	8011dc4 <__swsetup_r+0x64>
 8011d7e:	06d9      	lsls	r1, r3, #27
 8011d80:	d407      	bmi.n	8011d92 <__swsetup_r+0x32>
 8011d82:	2309      	movs	r3, #9
 8011d84:	602b      	str	r3, [r5, #0]
 8011d86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d8a:	81a3      	strh	r3, [r4, #12]
 8011d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d90:	e034      	b.n	8011dfc <__swsetup_r+0x9c>
 8011d92:	0758      	lsls	r0, r3, #29
 8011d94:	d512      	bpl.n	8011dbc <__swsetup_r+0x5c>
 8011d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d98:	b141      	cbz	r1, 8011dac <__swsetup_r+0x4c>
 8011d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d9e:	4299      	cmp	r1, r3
 8011da0:	d002      	beq.n	8011da8 <__swsetup_r+0x48>
 8011da2:	4628      	mov	r0, r5
 8011da4:	f001 f80e 	bl	8012dc4 <_free_r>
 8011da8:	2300      	movs	r3, #0
 8011daa:	6363      	str	r3, [r4, #52]	; 0x34
 8011dac:	89a3      	ldrh	r3, [r4, #12]
 8011dae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011db2:	81a3      	strh	r3, [r4, #12]
 8011db4:	2300      	movs	r3, #0
 8011db6:	6063      	str	r3, [r4, #4]
 8011db8:	6923      	ldr	r3, [r4, #16]
 8011dba:	6023      	str	r3, [r4, #0]
 8011dbc:	89a3      	ldrh	r3, [r4, #12]
 8011dbe:	f043 0308 	orr.w	r3, r3, #8
 8011dc2:	81a3      	strh	r3, [r4, #12]
 8011dc4:	6923      	ldr	r3, [r4, #16]
 8011dc6:	b94b      	cbnz	r3, 8011ddc <__swsetup_r+0x7c>
 8011dc8:	89a3      	ldrh	r3, [r4, #12]
 8011dca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dd2:	d003      	beq.n	8011ddc <__swsetup_r+0x7c>
 8011dd4:	4621      	mov	r1, r4
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	f002 ffa8 	bl	8014d2c <__smakebuf_r>
 8011ddc:	89a0      	ldrh	r0, [r4, #12]
 8011dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011de2:	f010 0301 	ands.w	r3, r0, #1
 8011de6:	d00a      	beq.n	8011dfe <__swsetup_r+0x9e>
 8011de8:	2300      	movs	r3, #0
 8011dea:	60a3      	str	r3, [r4, #8]
 8011dec:	6963      	ldr	r3, [r4, #20]
 8011dee:	425b      	negs	r3, r3
 8011df0:	61a3      	str	r3, [r4, #24]
 8011df2:	6923      	ldr	r3, [r4, #16]
 8011df4:	b943      	cbnz	r3, 8011e08 <__swsetup_r+0xa8>
 8011df6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011dfa:	d1c4      	bne.n	8011d86 <__swsetup_r+0x26>
 8011dfc:	bd38      	pop	{r3, r4, r5, pc}
 8011dfe:	0781      	lsls	r1, r0, #30
 8011e00:	bf58      	it	pl
 8011e02:	6963      	ldrpl	r3, [r4, #20]
 8011e04:	60a3      	str	r3, [r4, #8]
 8011e06:	e7f4      	b.n	8011df2 <__swsetup_r+0x92>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	e7f7      	b.n	8011dfc <__swsetup_r+0x9c>
 8011e0c:	2000016c 	.word	0x2000016c

08011e10 <memcmp>:
 8011e10:	b510      	push	{r4, lr}
 8011e12:	3901      	subs	r1, #1
 8011e14:	4402      	add	r2, r0
 8011e16:	4290      	cmp	r0, r2
 8011e18:	d101      	bne.n	8011e1e <memcmp+0xe>
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	e005      	b.n	8011e2a <memcmp+0x1a>
 8011e1e:	7803      	ldrb	r3, [r0, #0]
 8011e20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e24:	42a3      	cmp	r3, r4
 8011e26:	d001      	beq.n	8011e2c <memcmp+0x1c>
 8011e28:	1b18      	subs	r0, r3, r4
 8011e2a:	bd10      	pop	{r4, pc}
 8011e2c:	3001      	adds	r0, #1
 8011e2e:	e7f2      	b.n	8011e16 <memcmp+0x6>

08011e30 <memmove>:
 8011e30:	4288      	cmp	r0, r1
 8011e32:	b510      	push	{r4, lr}
 8011e34:	eb01 0402 	add.w	r4, r1, r2
 8011e38:	d902      	bls.n	8011e40 <memmove+0x10>
 8011e3a:	4284      	cmp	r4, r0
 8011e3c:	4623      	mov	r3, r4
 8011e3e:	d807      	bhi.n	8011e50 <memmove+0x20>
 8011e40:	1e43      	subs	r3, r0, #1
 8011e42:	42a1      	cmp	r1, r4
 8011e44:	d008      	beq.n	8011e58 <memmove+0x28>
 8011e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e4e:	e7f8      	b.n	8011e42 <memmove+0x12>
 8011e50:	4402      	add	r2, r0
 8011e52:	4601      	mov	r1, r0
 8011e54:	428a      	cmp	r2, r1
 8011e56:	d100      	bne.n	8011e5a <memmove+0x2a>
 8011e58:	bd10      	pop	{r4, pc}
 8011e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e62:	e7f7      	b.n	8011e54 <memmove+0x24>

08011e64 <memset>:
 8011e64:	4402      	add	r2, r0
 8011e66:	4603      	mov	r3, r0
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d100      	bne.n	8011e6e <memset+0xa>
 8011e6c:	4770      	bx	lr
 8011e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8011e72:	e7f9      	b.n	8011e68 <memset+0x4>

08011e74 <strncmp>:
 8011e74:	b510      	push	{r4, lr}
 8011e76:	b16a      	cbz	r2, 8011e94 <strncmp+0x20>
 8011e78:	3901      	subs	r1, #1
 8011e7a:	1884      	adds	r4, r0, r2
 8011e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d103      	bne.n	8011e90 <strncmp+0x1c>
 8011e88:	42a0      	cmp	r0, r4
 8011e8a:	d001      	beq.n	8011e90 <strncmp+0x1c>
 8011e8c:	2a00      	cmp	r2, #0
 8011e8e:	d1f5      	bne.n	8011e7c <strncmp+0x8>
 8011e90:	1ad0      	subs	r0, r2, r3
 8011e92:	bd10      	pop	{r4, pc}
 8011e94:	4610      	mov	r0, r2
 8011e96:	e7fc      	b.n	8011e92 <strncmp+0x1e>

08011e98 <strncpy>:
 8011e98:	b510      	push	{r4, lr}
 8011e9a:	3901      	subs	r1, #1
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	b132      	cbz	r2, 8011eae <strncpy+0x16>
 8011ea0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ea4:	f803 4b01 	strb.w	r4, [r3], #1
 8011ea8:	3a01      	subs	r2, #1
 8011eaa:	2c00      	cmp	r4, #0
 8011eac:	d1f7      	bne.n	8011e9e <strncpy+0x6>
 8011eae:	441a      	add	r2, r3
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d100      	bne.n	8011eb8 <strncpy+0x20>
 8011eb6:	bd10      	pop	{r4, pc}
 8011eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8011ebc:	e7f9      	b.n	8011eb2 <strncpy+0x1a>
	...

08011ec0 <strtok>:
 8011ec0:	4b16      	ldr	r3, [pc, #88]	; (8011f1c <strtok+0x5c>)
 8011ec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ec4:	681e      	ldr	r6, [r3, #0]
 8011ec6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011ec8:	4605      	mov	r5, r0
 8011eca:	b9fc      	cbnz	r4, 8011f0c <strtok+0x4c>
 8011ecc:	2050      	movs	r0, #80	; 0x50
 8011ece:	9101      	str	r1, [sp, #4]
 8011ed0:	f000 ffc4 	bl	8012e5c <malloc>
 8011ed4:	9901      	ldr	r1, [sp, #4]
 8011ed6:	6470      	str	r0, [r6, #68]	; 0x44
 8011ed8:	4602      	mov	r2, r0
 8011eda:	b920      	cbnz	r0, 8011ee6 <strtok+0x26>
 8011edc:	4b10      	ldr	r3, [pc, #64]	; (8011f20 <strtok+0x60>)
 8011ede:	4811      	ldr	r0, [pc, #68]	; (8011f24 <strtok+0x64>)
 8011ee0:	215b      	movs	r1, #91	; 0x5b
 8011ee2:	f7fe fe93 	bl	8010c0c <__assert_func>
 8011ee6:	e9c0 4400 	strd	r4, r4, [r0]
 8011eea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011eee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011ef2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011ef6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011efa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011efe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011f02:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011f06:	6184      	str	r4, [r0, #24]
 8011f08:	7704      	strb	r4, [r0, #28]
 8011f0a:	6244      	str	r4, [r0, #36]	; 0x24
 8011f0c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8011f0e:	2301      	movs	r3, #1
 8011f10:	4628      	mov	r0, r5
 8011f12:	b002      	add	sp, #8
 8011f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f18:	f000 b806 	b.w	8011f28 <__strtok_r>
 8011f1c:	2000016c 	.word	0x2000016c
 8011f20:	08016de8 	.word	0x08016de8
 8011f24:	08016dff 	.word	0x08016dff

08011f28 <__strtok_r>:
 8011f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2a:	b908      	cbnz	r0, 8011f30 <__strtok_r+0x8>
 8011f2c:	6810      	ldr	r0, [r2, #0]
 8011f2e:	b188      	cbz	r0, 8011f54 <__strtok_r+0x2c>
 8011f30:	4604      	mov	r4, r0
 8011f32:	4620      	mov	r0, r4
 8011f34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011f38:	460f      	mov	r7, r1
 8011f3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011f3e:	b91e      	cbnz	r6, 8011f48 <__strtok_r+0x20>
 8011f40:	b965      	cbnz	r5, 8011f5c <__strtok_r+0x34>
 8011f42:	6015      	str	r5, [r2, #0]
 8011f44:	4628      	mov	r0, r5
 8011f46:	e005      	b.n	8011f54 <__strtok_r+0x2c>
 8011f48:	42b5      	cmp	r5, r6
 8011f4a:	d1f6      	bne.n	8011f3a <__strtok_r+0x12>
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d1f0      	bne.n	8011f32 <__strtok_r+0xa>
 8011f50:	6014      	str	r4, [r2, #0]
 8011f52:	7003      	strb	r3, [r0, #0]
 8011f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f56:	461c      	mov	r4, r3
 8011f58:	e00c      	b.n	8011f74 <__strtok_r+0x4c>
 8011f5a:	b915      	cbnz	r5, 8011f62 <__strtok_r+0x3a>
 8011f5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f60:	460e      	mov	r6, r1
 8011f62:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011f66:	42ab      	cmp	r3, r5
 8011f68:	d1f7      	bne.n	8011f5a <__strtok_r+0x32>
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d0f3      	beq.n	8011f56 <__strtok_r+0x2e>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011f74:	6014      	str	r4, [r2, #0]
 8011f76:	e7ed      	b.n	8011f54 <__strtok_r+0x2c>

08011f78 <strstr>:
 8011f78:	780a      	ldrb	r2, [r1, #0]
 8011f7a:	b570      	push	{r4, r5, r6, lr}
 8011f7c:	b96a      	cbnz	r2, 8011f9a <strstr+0x22>
 8011f7e:	bd70      	pop	{r4, r5, r6, pc}
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d109      	bne.n	8011f98 <strstr+0x20>
 8011f84:	460c      	mov	r4, r1
 8011f86:	4605      	mov	r5, r0
 8011f88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d0f6      	beq.n	8011f7e <strstr+0x6>
 8011f90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011f94:	429e      	cmp	r6, r3
 8011f96:	d0f7      	beq.n	8011f88 <strstr+0x10>
 8011f98:	3001      	adds	r0, #1
 8011f9a:	7803      	ldrb	r3, [r0, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1ef      	bne.n	8011f80 <strstr+0x8>
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	e7ec      	b.n	8011f7e <strstr+0x6>

08011fa4 <_localeconv_r>:
 8011fa4:	4800      	ldr	r0, [pc, #0]	; (8011fa8 <_localeconv_r+0x4>)
 8011fa6:	4770      	bx	lr
 8011fa8:	20000260 	.word	0x20000260

08011fac <_close_r>:
 8011fac:	b538      	push	{r3, r4, r5, lr}
 8011fae:	4d06      	ldr	r5, [pc, #24]	; (8011fc8 <_close_r+0x1c>)
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	4608      	mov	r0, r1
 8011fb6:	602b      	str	r3, [r5, #0]
 8011fb8:	f7f0 feaa 	bl	8002d10 <_close>
 8011fbc:	1c43      	adds	r3, r0, #1
 8011fbe:	d102      	bne.n	8011fc6 <_close_r+0x1a>
 8011fc0:	682b      	ldr	r3, [r5, #0]
 8011fc2:	b103      	cbz	r3, 8011fc6 <_close_r+0x1a>
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	bd38      	pop	{r3, r4, r5, pc}
 8011fc8:	20003b90 	.word	0x20003b90

08011fcc <_lseek_r>:
 8011fcc:	b538      	push	{r3, r4, r5, lr}
 8011fce:	4d07      	ldr	r5, [pc, #28]	; (8011fec <_lseek_r+0x20>)
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	4608      	mov	r0, r1
 8011fd4:	4611      	mov	r1, r2
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	602a      	str	r2, [r5, #0]
 8011fda:	461a      	mov	r2, r3
 8011fdc:	f7f0 febf 	bl	8002d5e <_lseek>
 8011fe0:	1c43      	adds	r3, r0, #1
 8011fe2:	d102      	bne.n	8011fea <_lseek_r+0x1e>
 8011fe4:	682b      	ldr	r3, [r5, #0]
 8011fe6:	b103      	cbz	r3, 8011fea <_lseek_r+0x1e>
 8011fe8:	6023      	str	r3, [r4, #0]
 8011fea:	bd38      	pop	{r3, r4, r5, pc}
 8011fec:	20003b90 	.word	0x20003b90

08011ff0 <_read_r>:
 8011ff0:	b538      	push	{r3, r4, r5, lr}
 8011ff2:	4d07      	ldr	r5, [pc, #28]	; (8012010 <_read_r+0x20>)
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	4608      	mov	r0, r1
 8011ff8:	4611      	mov	r1, r2
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	602a      	str	r2, [r5, #0]
 8011ffe:	461a      	mov	r2, r3
 8012000:	f7f0 fe69 	bl	8002cd6 <_read>
 8012004:	1c43      	adds	r3, r0, #1
 8012006:	d102      	bne.n	801200e <_read_r+0x1e>
 8012008:	682b      	ldr	r3, [r5, #0]
 801200a:	b103      	cbz	r3, 801200e <_read_r+0x1e>
 801200c:	6023      	str	r3, [r4, #0]
 801200e:	bd38      	pop	{r3, r4, r5, pc}
 8012010:	20003b90 	.word	0x20003b90

08012014 <_write_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4d07      	ldr	r5, [pc, #28]	; (8012034 <_write_r+0x20>)
 8012018:	4604      	mov	r4, r0
 801201a:	4608      	mov	r0, r1
 801201c:	4611      	mov	r1, r2
 801201e:	2200      	movs	r2, #0
 8012020:	602a      	str	r2, [r5, #0]
 8012022:	461a      	mov	r2, r3
 8012024:	f7ef f80b 	bl	800103e <_write>
 8012028:	1c43      	adds	r3, r0, #1
 801202a:	d102      	bne.n	8012032 <_write_r+0x1e>
 801202c:	682b      	ldr	r3, [r5, #0]
 801202e:	b103      	cbz	r3, 8012032 <_write_r+0x1e>
 8012030:	6023      	str	r3, [r4, #0]
 8012032:	bd38      	pop	{r3, r4, r5, pc}
 8012034:	20003b90 	.word	0x20003b90

08012038 <__errno>:
 8012038:	4b01      	ldr	r3, [pc, #4]	; (8012040 <__errno+0x8>)
 801203a:	6818      	ldr	r0, [r3, #0]
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	2000016c 	.word	0x2000016c

08012044 <__libc_init_array>:
 8012044:	b570      	push	{r4, r5, r6, lr}
 8012046:	4d0d      	ldr	r5, [pc, #52]	; (801207c <__libc_init_array+0x38>)
 8012048:	4c0d      	ldr	r4, [pc, #52]	; (8012080 <__libc_init_array+0x3c>)
 801204a:	1b64      	subs	r4, r4, r5
 801204c:	10a4      	asrs	r4, r4, #2
 801204e:	2600      	movs	r6, #0
 8012050:	42a6      	cmp	r6, r4
 8012052:	d109      	bne.n	8012068 <__libc_init_array+0x24>
 8012054:	4d0b      	ldr	r5, [pc, #44]	; (8012084 <__libc_init_array+0x40>)
 8012056:	4c0c      	ldr	r4, [pc, #48]	; (8012088 <__libc_init_array+0x44>)
 8012058:	f003 fae6 	bl	8015628 <_init>
 801205c:	1b64      	subs	r4, r4, r5
 801205e:	10a4      	asrs	r4, r4, #2
 8012060:	2600      	movs	r6, #0
 8012062:	42a6      	cmp	r6, r4
 8012064:	d105      	bne.n	8012072 <__libc_init_array+0x2e>
 8012066:	bd70      	pop	{r4, r5, r6, pc}
 8012068:	f855 3b04 	ldr.w	r3, [r5], #4
 801206c:	4798      	blx	r3
 801206e:	3601      	adds	r6, #1
 8012070:	e7ee      	b.n	8012050 <__libc_init_array+0xc>
 8012072:	f855 3b04 	ldr.w	r3, [r5], #4
 8012076:	4798      	blx	r3
 8012078:	3601      	adds	r6, #1
 801207a:	e7f2      	b.n	8012062 <__libc_init_array+0x1e>
 801207c:	080171fc 	.word	0x080171fc
 8012080:	080171fc 	.word	0x080171fc
 8012084:	080171fc 	.word	0x080171fc
 8012088:	08017200 	.word	0x08017200

0801208c <__retarget_lock_init_recursive>:
 801208c:	4770      	bx	lr

0801208e <__retarget_lock_acquire_recursive>:
 801208e:	4770      	bx	lr

08012090 <__retarget_lock_release_recursive>:
 8012090:	4770      	bx	lr

08012092 <memcpy>:
 8012092:	440a      	add	r2, r1
 8012094:	4291      	cmp	r1, r2
 8012096:	f100 33ff 	add.w	r3, r0, #4294967295
 801209a:	d100      	bne.n	801209e <memcpy+0xc>
 801209c:	4770      	bx	lr
 801209e:	b510      	push	{r4, lr}
 80120a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120a8:	4291      	cmp	r1, r2
 80120aa:	d1f9      	bne.n	80120a0 <memcpy+0xe>
 80120ac:	bd10      	pop	{r4, pc}
	...

080120b0 <nanf>:
 80120b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80120b8 <nanf+0x8>
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop
 80120b8:	7fc00000 	.word	0x7fc00000

080120bc <abort>:
 80120bc:	b508      	push	{r3, lr}
 80120be:	2006      	movs	r0, #6
 80120c0:	f002 fe98 	bl	8014df4 <raise>
 80120c4:	2001      	movs	r0, #1
 80120c6:	f7f0 fdfc 	bl	8002cc2 <_exit>

080120ca <quorem>:
 80120ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ce:	6903      	ldr	r3, [r0, #16]
 80120d0:	690c      	ldr	r4, [r1, #16]
 80120d2:	42a3      	cmp	r3, r4
 80120d4:	4607      	mov	r7, r0
 80120d6:	db7e      	blt.n	80121d6 <quorem+0x10c>
 80120d8:	3c01      	subs	r4, #1
 80120da:	f101 0814 	add.w	r8, r1, #20
 80120de:	f100 0514 	add.w	r5, r0, #20
 80120e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120e6:	9301      	str	r3, [sp, #4]
 80120e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80120ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120f0:	3301      	adds	r3, #1
 80120f2:	429a      	cmp	r2, r3
 80120f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80120f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80120fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8012100:	d331      	bcc.n	8012166 <quorem+0x9c>
 8012102:	f04f 0e00 	mov.w	lr, #0
 8012106:	4640      	mov	r0, r8
 8012108:	46ac      	mov	ip, r5
 801210a:	46f2      	mov	sl, lr
 801210c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012110:	b293      	uxth	r3, r2
 8012112:	fb06 e303 	mla	r3, r6, r3, lr
 8012116:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801211a:	0c1a      	lsrs	r2, r3, #16
 801211c:	b29b      	uxth	r3, r3
 801211e:	ebaa 0303 	sub.w	r3, sl, r3
 8012122:	f8dc a000 	ldr.w	sl, [ip]
 8012126:	fa13 f38a 	uxtah	r3, r3, sl
 801212a:	fb06 220e 	mla	r2, r6, lr, r2
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	9b00      	ldr	r3, [sp, #0]
 8012132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012136:	b292      	uxth	r2, r2
 8012138:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801213c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012140:	f8bd 3000 	ldrh.w	r3, [sp]
 8012144:	4581      	cmp	r9, r0
 8012146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801214a:	f84c 3b04 	str.w	r3, [ip], #4
 801214e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012152:	d2db      	bcs.n	801210c <quorem+0x42>
 8012154:	f855 300b 	ldr.w	r3, [r5, fp]
 8012158:	b92b      	cbnz	r3, 8012166 <quorem+0x9c>
 801215a:	9b01      	ldr	r3, [sp, #4]
 801215c:	3b04      	subs	r3, #4
 801215e:	429d      	cmp	r5, r3
 8012160:	461a      	mov	r2, r3
 8012162:	d32c      	bcc.n	80121be <quorem+0xf4>
 8012164:	613c      	str	r4, [r7, #16]
 8012166:	4638      	mov	r0, r7
 8012168:	f001 f9f2 	bl	8013550 <__mcmp>
 801216c:	2800      	cmp	r0, #0
 801216e:	db22      	blt.n	80121b6 <quorem+0xec>
 8012170:	3601      	adds	r6, #1
 8012172:	4629      	mov	r1, r5
 8012174:	2000      	movs	r0, #0
 8012176:	f858 2b04 	ldr.w	r2, [r8], #4
 801217a:	f8d1 c000 	ldr.w	ip, [r1]
 801217e:	b293      	uxth	r3, r2
 8012180:	1ac3      	subs	r3, r0, r3
 8012182:	0c12      	lsrs	r2, r2, #16
 8012184:	fa13 f38c 	uxtah	r3, r3, ip
 8012188:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801218c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012190:	b29b      	uxth	r3, r3
 8012192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012196:	45c1      	cmp	r9, r8
 8012198:	f841 3b04 	str.w	r3, [r1], #4
 801219c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80121a0:	d2e9      	bcs.n	8012176 <quorem+0xac>
 80121a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121aa:	b922      	cbnz	r2, 80121b6 <quorem+0xec>
 80121ac:	3b04      	subs	r3, #4
 80121ae:	429d      	cmp	r5, r3
 80121b0:	461a      	mov	r2, r3
 80121b2:	d30a      	bcc.n	80121ca <quorem+0x100>
 80121b4:	613c      	str	r4, [r7, #16]
 80121b6:	4630      	mov	r0, r6
 80121b8:	b003      	add	sp, #12
 80121ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121be:	6812      	ldr	r2, [r2, #0]
 80121c0:	3b04      	subs	r3, #4
 80121c2:	2a00      	cmp	r2, #0
 80121c4:	d1ce      	bne.n	8012164 <quorem+0x9a>
 80121c6:	3c01      	subs	r4, #1
 80121c8:	e7c9      	b.n	801215e <quorem+0x94>
 80121ca:	6812      	ldr	r2, [r2, #0]
 80121cc:	3b04      	subs	r3, #4
 80121ce:	2a00      	cmp	r2, #0
 80121d0:	d1f0      	bne.n	80121b4 <quorem+0xea>
 80121d2:	3c01      	subs	r4, #1
 80121d4:	e7eb      	b.n	80121ae <quorem+0xe4>
 80121d6:	2000      	movs	r0, #0
 80121d8:	e7ee      	b.n	80121b8 <quorem+0xee>
 80121da:	0000      	movs	r0, r0
 80121dc:	0000      	movs	r0, r0
	...

080121e0 <_dtoa_r>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	ed2d 8b04 	vpush	{d8-d9}
 80121e8:	69c5      	ldr	r5, [r0, #28]
 80121ea:	b093      	sub	sp, #76	; 0x4c
 80121ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80121f0:	ec57 6b10 	vmov	r6, r7, d0
 80121f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80121f8:	9107      	str	r1, [sp, #28]
 80121fa:	4604      	mov	r4, r0
 80121fc:	920a      	str	r2, [sp, #40]	; 0x28
 80121fe:	930d      	str	r3, [sp, #52]	; 0x34
 8012200:	b975      	cbnz	r5, 8012220 <_dtoa_r+0x40>
 8012202:	2010      	movs	r0, #16
 8012204:	f000 fe2a 	bl	8012e5c <malloc>
 8012208:	4602      	mov	r2, r0
 801220a:	61e0      	str	r0, [r4, #28]
 801220c:	b920      	cbnz	r0, 8012218 <_dtoa_r+0x38>
 801220e:	4bae      	ldr	r3, [pc, #696]	; (80124c8 <_dtoa_r+0x2e8>)
 8012210:	21ef      	movs	r1, #239	; 0xef
 8012212:	48ae      	ldr	r0, [pc, #696]	; (80124cc <_dtoa_r+0x2ec>)
 8012214:	f7fe fcfa 	bl	8010c0c <__assert_func>
 8012218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801221c:	6005      	str	r5, [r0, #0]
 801221e:	60c5      	str	r5, [r0, #12]
 8012220:	69e3      	ldr	r3, [r4, #28]
 8012222:	6819      	ldr	r1, [r3, #0]
 8012224:	b151      	cbz	r1, 801223c <_dtoa_r+0x5c>
 8012226:	685a      	ldr	r2, [r3, #4]
 8012228:	604a      	str	r2, [r1, #4]
 801222a:	2301      	movs	r3, #1
 801222c:	4093      	lsls	r3, r2
 801222e:	608b      	str	r3, [r1, #8]
 8012230:	4620      	mov	r0, r4
 8012232:	f000 ff07 	bl	8013044 <_Bfree>
 8012236:	69e3      	ldr	r3, [r4, #28]
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]
 801223c:	1e3b      	subs	r3, r7, #0
 801223e:	bfbb      	ittet	lt
 8012240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012244:	9303      	strlt	r3, [sp, #12]
 8012246:	2300      	movge	r3, #0
 8012248:	2201      	movlt	r2, #1
 801224a:	bfac      	ite	ge
 801224c:	f8c8 3000 	strge.w	r3, [r8]
 8012250:	f8c8 2000 	strlt.w	r2, [r8]
 8012254:	4b9e      	ldr	r3, [pc, #632]	; (80124d0 <_dtoa_r+0x2f0>)
 8012256:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801225a:	ea33 0308 	bics.w	r3, r3, r8
 801225e:	d11b      	bne.n	8012298 <_dtoa_r+0xb8>
 8012260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012262:	f242 730f 	movw	r3, #9999	; 0x270f
 8012266:	6013      	str	r3, [r2, #0]
 8012268:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801226c:	4333      	orrs	r3, r6
 801226e:	f000 8593 	beq.w	8012d98 <_dtoa_r+0xbb8>
 8012272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012274:	b963      	cbnz	r3, 8012290 <_dtoa_r+0xb0>
 8012276:	4b97      	ldr	r3, [pc, #604]	; (80124d4 <_dtoa_r+0x2f4>)
 8012278:	e027      	b.n	80122ca <_dtoa_r+0xea>
 801227a:	4b97      	ldr	r3, [pc, #604]	; (80124d8 <_dtoa_r+0x2f8>)
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	3308      	adds	r3, #8
 8012280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012282:	6013      	str	r3, [r2, #0]
 8012284:	9800      	ldr	r0, [sp, #0]
 8012286:	b013      	add	sp, #76	; 0x4c
 8012288:	ecbd 8b04 	vpop	{d8-d9}
 801228c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012290:	4b90      	ldr	r3, [pc, #576]	; (80124d4 <_dtoa_r+0x2f4>)
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	3303      	adds	r3, #3
 8012296:	e7f3      	b.n	8012280 <_dtoa_r+0xa0>
 8012298:	ed9d 7b02 	vldr	d7, [sp, #8]
 801229c:	2200      	movs	r2, #0
 801229e:	ec51 0b17 	vmov	r0, r1, d7
 80122a2:	eeb0 8a47 	vmov.f32	s16, s14
 80122a6:	eef0 8a67 	vmov.f32	s17, s15
 80122aa:	2300      	movs	r3, #0
 80122ac:	f7ee fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80122b0:	4681      	mov	r9, r0
 80122b2:	b160      	cbz	r0, 80122ce <_dtoa_r+0xee>
 80122b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122b6:	2301      	movs	r3, #1
 80122b8:	6013      	str	r3, [r2, #0]
 80122ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122bc:	2b00      	cmp	r3, #0
 80122be:	f000 8568 	beq.w	8012d92 <_dtoa_r+0xbb2>
 80122c2:	4b86      	ldr	r3, [pc, #536]	; (80124dc <_dtoa_r+0x2fc>)
 80122c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122c6:	6013      	str	r3, [r2, #0]
 80122c8:	3b01      	subs	r3, #1
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	e7da      	b.n	8012284 <_dtoa_r+0xa4>
 80122ce:	aa10      	add	r2, sp, #64	; 0x40
 80122d0:	a911      	add	r1, sp, #68	; 0x44
 80122d2:	4620      	mov	r0, r4
 80122d4:	eeb0 0a48 	vmov.f32	s0, s16
 80122d8:	eef0 0a68 	vmov.f32	s1, s17
 80122dc:	f001 fa4e 	bl	801377c <__d2b>
 80122e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80122e4:	4682      	mov	sl, r0
 80122e6:	2d00      	cmp	r5, #0
 80122e8:	d07f      	beq.n	80123ea <_dtoa_r+0x20a>
 80122ea:	ee18 3a90 	vmov	r3, s17
 80122ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80122f6:	ec51 0b18 	vmov	r0, r1, d8
 80122fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80122fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012302:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012306:	4619      	mov	r1, r3
 8012308:	2200      	movs	r2, #0
 801230a:	4b75      	ldr	r3, [pc, #468]	; (80124e0 <_dtoa_r+0x300>)
 801230c:	f7ed ffbc 	bl	8000288 <__aeabi_dsub>
 8012310:	a367      	add	r3, pc, #412	; (adr r3, 80124b0 <_dtoa_r+0x2d0>)
 8012312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012316:	f7ee f96f 	bl	80005f8 <__aeabi_dmul>
 801231a:	a367      	add	r3, pc, #412	; (adr r3, 80124b8 <_dtoa_r+0x2d8>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f7ed ffb4 	bl	800028c <__adddf3>
 8012324:	4606      	mov	r6, r0
 8012326:	4628      	mov	r0, r5
 8012328:	460f      	mov	r7, r1
 801232a:	f7ee f8fb 	bl	8000524 <__aeabi_i2d>
 801232e:	a364      	add	r3, pc, #400	; (adr r3, 80124c0 <_dtoa_r+0x2e0>)
 8012330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012334:	f7ee f960 	bl	80005f8 <__aeabi_dmul>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4630      	mov	r0, r6
 801233e:	4639      	mov	r1, r7
 8012340:	f7ed ffa4 	bl	800028c <__adddf3>
 8012344:	4606      	mov	r6, r0
 8012346:	460f      	mov	r7, r1
 8012348:	f7ee fc06 	bl	8000b58 <__aeabi_d2iz>
 801234c:	2200      	movs	r2, #0
 801234e:	4683      	mov	fp, r0
 8012350:	2300      	movs	r3, #0
 8012352:	4630      	mov	r0, r6
 8012354:	4639      	mov	r1, r7
 8012356:	f7ee fbc1 	bl	8000adc <__aeabi_dcmplt>
 801235a:	b148      	cbz	r0, 8012370 <_dtoa_r+0x190>
 801235c:	4658      	mov	r0, fp
 801235e:	f7ee f8e1 	bl	8000524 <__aeabi_i2d>
 8012362:	4632      	mov	r2, r6
 8012364:	463b      	mov	r3, r7
 8012366:	f7ee fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 801236a:	b908      	cbnz	r0, 8012370 <_dtoa_r+0x190>
 801236c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012370:	f1bb 0f16 	cmp.w	fp, #22
 8012374:	d857      	bhi.n	8012426 <_dtoa_r+0x246>
 8012376:	4b5b      	ldr	r3, [pc, #364]	; (80124e4 <_dtoa_r+0x304>)
 8012378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012380:	ec51 0b18 	vmov	r0, r1, d8
 8012384:	f7ee fbaa 	bl	8000adc <__aeabi_dcmplt>
 8012388:	2800      	cmp	r0, #0
 801238a:	d04e      	beq.n	801242a <_dtoa_r+0x24a>
 801238c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012390:	2300      	movs	r3, #0
 8012392:	930c      	str	r3, [sp, #48]	; 0x30
 8012394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012396:	1b5b      	subs	r3, r3, r5
 8012398:	1e5a      	subs	r2, r3, #1
 801239a:	bf45      	ittet	mi
 801239c:	f1c3 0301 	rsbmi	r3, r3, #1
 80123a0:	9305      	strmi	r3, [sp, #20]
 80123a2:	2300      	movpl	r3, #0
 80123a4:	2300      	movmi	r3, #0
 80123a6:	9206      	str	r2, [sp, #24]
 80123a8:	bf54      	ite	pl
 80123aa:	9305      	strpl	r3, [sp, #20]
 80123ac:	9306      	strmi	r3, [sp, #24]
 80123ae:	f1bb 0f00 	cmp.w	fp, #0
 80123b2:	db3c      	blt.n	801242e <_dtoa_r+0x24e>
 80123b4:	9b06      	ldr	r3, [sp, #24]
 80123b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80123ba:	445b      	add	r3, fp
 80123bc:	9306      	str	r3, [sp, #24]
 80123be:	2300      	movs	r3, #0
 80123c0:	9308      	str	r3, [sp, #32]
 80123c2:	9b07      	ldr	r3, [sp, #28]
 80123c4:	2b09      	cmp	r3, #9
 80123c6:	d868      	bhi.n	801249a <_dtoa_r+0x2ba>
 80123c8:	2b05      	cmp	r3, #5
 80123ca:	bfc4      	itt	gt
 80123cc:	3b04      	subgt	r3, #4
 80123ce:	9307      	strgt	r3, [sp, #28]
 80123d0:	9b07      	ldr	r3, [sp, #28]
 80123d2:	f1a3 0302 	sub.w	r3, r3, #2
 80123d6:	bfcc      	ite	gt
 80123d8:	2500      	movgt	r5, #0
 80123da:	2501      	movle	r5, #1
 80123dc:	2b03      	cmp	r3, #3
 80123de:	f200 8085 	bhi.w	80124ec <_dtoa_r+0x30c>
 80123e2:	e8df f003 	tbb	[pc, r3]
 80123e6:	3b2e      	.short	0x3b2e
 80123e8:	5839      	.short	0x5839
 80123ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80123ee:	441d      	add	r5, r3
 80123f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80123f4:	2b20      	cmp	r3, #32
 80123f6:	bfc1      	itttt	gt
 80123f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80123fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8012400:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012404:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012408:	bfd6      	itet	le
 801240a:	f1c3 0320 	rsble	r3, r3, #32
 801240e:	ea48 0003 	orrgt.w	r0, r8, r3
 8012412:	fa06 f003 	lslle.w	r0, r6, r3
 8012416:	f7ee f875 	bl	8000504 <__aeabi_ui2d>
 801241a:	2201      	movs	r2, #1
 801241c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012420:	3d01      	subs	r5, #1
 8012422:	920e      	str	r2, [sp, #56]	; 0x38
 8012424:	e76f      	b.n	8012306 <_dtoa_r+0x126>
 8012426:	2301      	movs	r3, #1
 8012428:	e7b3      	b.n	8012392 <_dtoa_r+0x1b2>
 801242a:	900c      	str	r0, [sp, #48]	; 0x30
 801242c:	e7b2      	b.n	8012394 <_dtoa_r+0x1b4>
 801242e:	9b05      	ldr	r3, [sp, #20]
 8012430:	eba3 030b 	sub.w	r3, r3, fp
 8012434:	9305      	str	r3, [sp, #20]
 8012436:	f1cb 0300 	rsb	r3, fp, #0
 801243a:	9308      	str	r3, [sp, #32]
 801243c:	2300      	movs	r3, #0
 801243e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012440:	e7bf      	b.n	80123c2 <_dtoa_r+0x1e2>
 8012442:	2300      	movs	r3, #0
 8012444:	9309      	str	r3, [sp, #36]	; 0x24
 8012446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012448:	2b00      	cmp	r3, #0
 801244a:	dc52      	bgt.n	80124f2 <_dtoa_r+0x312>
 801244c:	2301      	movs	r3, #1
 801244e:	9301      	str	r3, [sp, #4]
 8012450:	9304      	str	r3, [sp, #16]
 8012452:	461a      	mov	r2, r3
 8012454:	920a      	str	r2, [sp, #40]	; 0x28
 8012456:	e00b      	b.n	8012470 <_dtoa_r+0x290>
 8012458:	2301      	movs	r3, #1
 801245a:	e7f3      	b.n	8012444 <_dtoa_r+0x264>
 801245c:	2300      	movs	r3, #0
 801245e:	9309      	str	r3, [sp, #36]	; 0x24
 8012460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012462:	445b      	add	r3, fp
 8012464:	9301      	str	r3, [sp, #4]
 8012466:	3301      	adds	r3, #1
 8012468:	2b01      	cmp	r3, #1
 801246a:	9304      	str	r3, [sp, #16]
 801246c:	bfb8      	it	lt
 801246e:	2301      	movlt	r3, #1
 8012470:	69e0      	ldr	r0, [r4, #28]
 8012472:	2100      	movs	r1, #0
 8012474:	2204      	movs	r2, #4
 8012476:	f102 0614 	add.w	r6, r2, #20
 801247a:	429e      	cmp	r6, r3
 801247c:	d93d      	bls.n	80124fa <_dtoa_r+0x31a>
 801247e:	6041      	str	r1, [r0, #4]
 8012480:	4620      	mov	r0, r4
 8012482:	f000 fd9f 	bl	8012fc4 <_Balloc>
 8012486:	9000      	str	r0, [sp, #0]
 8012488:	2800      	cmp	r0, #0
 801248a:	d139      	bne.n	8012500 <_dtoa_r+0x320>
 801248c:	4b16      	ldr	r3, [pc, #88]	; (80124e8 <_dtoa_r+0x308>)
 801248e:	4602      	mov	r2, r0
 8012490:	f240 11af 	movw	r1, #431	; 0x1af
 8012494:	e6bd      	b.n	8012212 <_dtoa_r+0x32>
 8012496:	2301      	movs	r3, #1
 8012498:	e7e1      	b.n	801245e <_dtoa_r+0x27e>
 801249a:	2501      	movs	r5, #1
 801249c:	2300      	movs	r3, #0
 801249e:	9307      	str	r3, [sp, #28]
 80124a0:	9509      	str	r5, [sp, #36]	; 0x24
 80124a2:	f04f 33ff 	mov.w	r3, #4294967295
 80124a6:	9301      	str	r3, [sp, #4]
 80124a8:	9304      	str	r3, [sp, #16]
 80124aa:	2200      	movs	r2, #0
 80124ac:	2312      	movs	r3, #18
 80124ae:	e7d1      	b.n	8012454 <_dtoa_r+0x274>
 80124b0:	636f4361 	.word	0x636f4361
 80124b4:	3fd287a7 	.word	0x3fd287a7
 80124b8:	8b60c8b3 	.word	0x8b60c8b3
 80124bc:	3fc68a28 	.word	0x3fc68a28
 80124c0:	509f79fb 	.word	0x509f79fb
 80124c4:	3fd34413 	.word	0x3fd34413
 80124c8:	08016de8 	.word	0x08016de8
 80124cc:	08016e66 	.word	0x08016e66
 80124d0:	7ff00000 	.word	0x7ff00000
 80124d4:	08016e62 	.word	0x08016e62
 80124d8:	08016e59 	.word	0x08016e59
 80124dc:	08016dc0 	.word	0x08016dc0
 80124e0:	3ff80000 	.word	0x3ff80000
 80124e4:	08016f50 	.word	0x08016f50
 80124e8:	08016ebe 	.word	0x08016ebe
 80124ec:	2301      	movs	r3, #1
 80124ee:	9309      	str	r3, [sp, #36]	; 0x24
 80124f0:	e7d7      	b.n	80124a2 <_dtoa_r+0x2c2>
 80124f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	9304      	str	r3, [sp, #16]
 80124f8:	e7ba      	b.n	8012470 <_dtoa_r+0x290>
 80124fa:	3101      	adds	r1, #1
 80124fc:	0052      	lsls	r2, r2, #1
 80124fe:	e7ba      	b.n	8012476 <_dtoa_r+0x296>
 8012500:	69e3      	ldr	r3, [r4, #28]
 8012502:	9a00      	ldr	r2, [sp, #0]
 8012504:	601a      	str	r2, [r3, #0]
 8012506:	9b04      	ldr	r3, [sp, #16]
 8012508:	2b0e      	cmp	r3, #14
 801250a:	f200 80a8 	bhi.w	801265e <_dtoa_r+0x47e>
 801250e:	2d00      	cmp	r5, #0
 8012510:	f000 80a5 	beq.w	801265e <_dtoa_r+0x47e>
 8012514:	f1bb 0f00 	cmp.w	fp, #0
 8012518:	dd38      	ble.n	801258c <_dtoa_r+0x3ac>
 801251a:	4bc0      	ldr	r3, [pc, #768]	; (801281c <_dtoa_r+0x63c>)
 801251c:	f00b 020f 	and.w	r2, fp, #15
 8012520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012524:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012528:	e9d3 6700 	ldrd	r6, r7, [r3]
 801252c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012530:	d019      	beq.n	8012566 <_dtoa_r+0x386>
 8012532:	4bbb      	ldr	r3, [pc, #748]	; (8012820 <_dtoa_r+0x640>)
 8012534:	ec51 0b18 	vmov	r0, r1, d8
 8012538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801253c:	f7ee f986 	bl	800084c <__aeabi_ddiv>
 8012540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012544:	f008 080f 	and.w	r8, r8, #15
 8012548:	2503      	movs	r5, #3
 801254a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012820 <_dtoa_r+0x640>
 801254e:	f1b8 0f00 	cmp.w	r8, #0
 8012552:	d10a      	bne.n	801256a <_dtoa_r+0x38a>
 8012554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012558:	4632      	mov	r2, r6
 801255a:	463b      	mov	r3, r7
 801255c:	f7ee f976 	bl	800084c <__aeabi_ddiv>
 8012560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012564:	e02b      	b.n	80125be <_dtoa_r+0x3de>
 8012566:	2502      	movs	r5, #2
 8012568:	e7ef      	b.n	801254a <_dtoa_r+0x36a>
 801256a:	f018 0f01 	tst.w	r8, #1
 801256e:	d008      	beq.n	8012582 <_dtoa_r+0x3a2>
 8012570:	4630      	mov	r0, r6
 8012572:	4639      	mov	r1, r7
 8012574:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012578:	f7ee f83e 	bl	80005f8 <__aeabi_dmul>
 801257c:	3501      	adds	r5, #1
 801257e:	4606      	mov	r6, r0
 8012580:	460f      	mov	r7, r1
 8012582:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012586:	f109 0908 	add.w	r9, r9, #8
 801258a:	e7e0      	b.n	801254e <_dtoa_r+0x36e>
 801258c:	f000 809f 	beq.w	80126ce <_dtoa_r+0x4ee>
 8012590:	f1cb 0600 	rsb	r6, fp, #0
 8012594:	4ba1      	ldr	r3, [pc, #644]	; (801281c <_dtoa_r+0x63c>)
 8012596:	4fa2      	ldr	r7, [pc, #648]	; (8012820 <_dtoa_r+0x640>)
 8012598:	f006 020f 	and.w	r2, r6, #15
 801259c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a4:	ec51 0b18 	vmov	r0, r1, d8
 80125a8:	f7ee f826 	bl	80005f8 <__aeabi_dmul>
 80125ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125b0:	1136      	asrs	r6, r6, #4
 80125b2:	2300      	movs	r3, #0
 80125b4:	2502      	movs	r5, #2
 80125b6:	2e00      	cmp	r6, #0
 80125b8:	d17e      	bne.n	80126b8 <_dtoa_r+0x4d8>
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1d0      	bne.n	8012560 <_dtoa_r+0x380>
 80125be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f000 8084 	beq.w	80126d2 <_dtoa_r+0x4f2>
 80125ca:	4b96      	ldr	r3, [pc, #600]	; (8012824 <_dtoa_r+0x644>)
 80125cc:	2200      	movs	r2, #0
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ee fa83 	bl	8000adc <__aeabi_dcmplt>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d07b      	beq.n	80126d2 <_dtoa_r+0x4f2>
 80125da:	9b04      	ldr	r3, [sp, #16]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d078      	beq.n	80126d2 <_dtoa_r+0x4f2>
 80125e0:	9b01      	ldr	r3, [sp, #4]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	dd39      	ble.n	801265a <_dtoa_r+0x47a>
 80125e6:	4b90      	ldr	r3, [pc, #576]	; (8012828 <_dtoa_r+0x648>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	4640      	mov	r0, r8
 80125ec:	4649      	mov	r1, r9
 80125ee:	f7ee f803 	bl	80005f8 <__aeabi_dmul>
 80125f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125f6:	9e01      	ldr	r6, [sp, #4]
 80125f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80125fc:	3501      	adds	r5, #1
 80125fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012602:	4628      	mov	r0, r5
 8012604:	f7ed ff8e 	bl	8000524 <__aeabi_i2d>
 8012608:	4642      	mov	r2, r8
 801260a:	464b      	mov	r3, r9
 801260c:	f7ed fff4 	bl	80005f8 <__aeabi_dmul>
 8012610:	4b86      	ldr	r3, [pc, #536]	; (801282c <_dtoa_r+0x64c>)
 8012612:	2200      	movs	r2, #0
 8012614:	f7ed fe3a 	bl	800028c <__adddf3>
 8012618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801261c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012620:	9303      	str	r3, [sp, #12]
 8012622:	2e00      	cmp	r6, #0
 8012624:	d158      	bne.n	80126d8 <_dtoa_r+0x4f8>
 8012626:	4b82      	ldr	r3, [pc, #520]	; (8012830 <_dtoa_r+0x650>)
 8012628:	2200      	movs	r2, #0
 801262a:	4640      	mov	r0, r8
 801262c:	4649      	mov	r1, r9
 801262e:	f7ed fe2b 	bl	8000288 <__aeabi_dsub>
 8012632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012636:	4680      	mov	r8, r0
 8012638:	4689      	mov	r9, r1
 801263a:	f7ee fa6d 	bl	8000b18 <__aeabi_dcmpgt>
 801263e:	2800      	cmp	r0, #0
 8012640:	f040 8296 	bne.w	8012b70 <_dtoa_r+0x990>
 8012644:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012648:	4640      	mov	r0, r8
 801264a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801264e:	4649      	mov	r1, r9
 8012650:	f7ee fa44 	bl	8000adc <__aeabi_dcmplt>
 8012654:	2800      	cmp	r0, #0
 8012656:	f040 8289 	bne.w	8012b6c <_dtoa_r+0x98c>
 801265a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801265e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012660:	2b00      	cmp	r3, #0
 8012662:	f2c0 814e 	blt.w	8012902 <_dtoa_r+0x722>
 8012666:	f1bb 0f0e 	cmp.w	fp, #14
 801266a:	f300 814a 	bgt.w	8012902 <_dtoa_r+0x722>
 801266e:	4b6b      	ldr	r3, [pc, #428]	; (801281c <_dtoa_r+0x63c>)
 8012670:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801267a:	2b00      	cmp	r3, #0
 801267c:	f280 80dc 	bge.w	8012838 <_dtoa_r+0x658>
 8012680:	9b04      	ldr	r3, [sp, #16]
 8012682:	2b00      	cmp	r3, #0
 8012684:	f300 80d8 	bgt.w	8012838 <_dtoa_r+0x658>
 8012688:	f040 826f 	bne.w	8012b6a <_dtoa_r+0x98a>
 801268c:	4b68      	ldr	r3, [pc, #416]	; (8012830 <_dtoa_r+0x650>)
 801268e:	2200      	movs	r2, #0
 8012690:	4640      	mov	r0, r8
 8012692:	4649      	mov	r1, r9
 8012694:	f7ed ffb0 	bl	80005f8 <__aeabi_dmul>
 8012698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801269c:	f7ee fa32 	bl	8000b04 <__aeabi_dcmpge>
 80126a0:	9e04      	ldr	r6, [sp, #16]
 80126a2:	4637      	mov	r7, r6
 80126a4:	2800      	cmp	r0, #0
 80126a6:	f040 8245 	bne.w	8012b34 <_dtoa_r+0x954>
 80126aa:	9d00      	ldr	r5, [sp, #0]
 80126ac:	2331      	movs	r3, #49	; 0x31
 80126ae:	f805 3b01 	strb.w	r3, [r5], #1
 80126b2:	f10b 0b01 	add.w	fp, fp, #1
 80126b6:	e241      	b.n	8012b3c <_dtoa_r+0x95c>
 80126b8:	07f2      	lsls	r2, r6, #31
 80126ba:	d505      	bpl.n	80126c8 <_dtoa_r+0x4e8>
 80126bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126c0:	f7ed ff9a 	bl	80005f8 <__aeabi_dmul>
 80126c4:	3501      	adds	r5, #1
 80126c6:	2301      	movs	r3, #1
 80126c8:	1076      	asrs	r6, r6, #1
 80126ca:	3708      	adds	r7, #8
 80126cc:	e773      	b.n	80125b6 <_dtoa_r+0x3d6>
 80126ce:	2502      	movs	r5, #2
 80126d0:	e775      	b.n	80125be <_dtoa_r+0x3de>
 80126d2:	9e04      	ldr	r6, [sp, #16]
 80126d4:	465f      	mov	r7, fp
 80126d6:	e792      	b.n	80125fe <_dtoa_r+0x41e>
 80126d8:	9900      	ldr	r1, [sp, #0]
 80126da:	4b50      	ldr	r3, [pc, #320]	; (801281c <_dtoa_r+0x63c>)
 80126dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126e0:	4431      	add	r1, r6
 80126e2:	9102      	str	r1, [sp, #8]
 80126e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126e6:	eeb0 9a47 	vmov.f32	s18, s14
 80126ea:	eef0 9a67 	vmov.f32	s19, s15
 80126ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80126f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80126f6:	2900      	cmp	r1, #0
 80126f8:	d044      	beq.n	8012784 <_dtoa_r+0x5a4>
 80126fa:	494e      	ldr	r1, [pc, #312]	; (8012834 <_dtoa_r+0x654>)
 80126fc:	2000      	movs	r0, #0
 80126fe:	f7ee f8a5 	bl	800084c <__aeabi_ddiv>
 8012702:	ec53 2b19 	vmov	r2, r3, d9
 8012706:	f7ed fdbf 	bl	8000288 <__aeabi_dsub>
 801270a:	9d00      	ldr	r5, [sp, #0]
 801270c:	ec41 0b19 	vmov	d9, r0, r1
 8012710:	4649      	mov	r1, r9
 8012712:	4640      	mov	r0, r8
 8012714:	f7ee fa20 	bl	8000b58 <__aeabi_d2iz>
 8012718:	4606      	mov	r6, r0
 801271a:	f7ed ff03 	bl	8000524 <__aeabi_i2d>
 801271e:	4602      	mov	r2, r0
 8012720:	460b      	mov	r3, r1
 8012722:	4640      	mov	r0, r8
 8012724:	4649      	mov	r1, r9
 8012726:	f7ed fdaf 	bl	8000288 <__aeabi_dsub>
 801272a:	3630      	adds	r6, #48	; 0x30
 801272c:	f805 6b01 	strb.w	r6, [r5], #1
 8012730:	ec53 2b19 	vmov	r2, r3, d9
 8012734:	4680      	mov	r8, r0
 8012736:	4689      	mov	r9, r1
 8012738:	f7ee f9d0 	bl	8000adc <__aeabi_dcmplt>
 801273c:	2800      	cmp	r0, #0
 801273e:	d164      	bne.n	801280a <_dtoa_r+0x62a>
 8012740:	4642      	mov	r2, r8
 8012742:	464b      	mov	r3, r9
 8012744:	4937      	ldr	r1, [pc, #220]	; (8012824 <_dtoa_r+0x644>)
 8012746:	2000      	movs	r0, #0
 8012748:	f7ed fd9e 	bl	8000288 <__aeabi_dsub>
 801274c:	ec53 2b19 	vmov	r2, r3, d9
 8012750:	f7ee f9c4 	bl	8000adc <__aeabi_dcmplt>
 8012754:	2800      	cmp	r0, #0
 8012756:	f040 80b6 	bne.w	80128c6 <_dtoa_r+0x6e6>
 801275a:	9b02      	ldr	r3, [sp, #8]
 801275c:	429d      	cmp	r5, r3
 801275e:	f43f af7c 	beq.w	801265a <_dtoa_r+0x47a>
 8012762:	4b31      	ldr	r3, [pc, #196]	; (8012828 <_dtoa_r+0x648>)
 8012764:	ec51 0b19 	vmov	r0, r1, d9
 8012768:	2200      	movs	r2, #0
 801276a:	f7ed ff45 	bl	80005f8 <__aeabi_dmul>
 801276e:	4b2e      	ldr	r3, [pc, #184]	; (8012828 <_dtoa_r+0x648>)
 8012770:	ec41 0b19 	vmov	d9, r0, r1
 8012774:	2200      	movs	r2, #0
 8012776:	4640      	mov	r0, r8
 8012778:	4649      	mov	r1, r9
 801277a:	f7ed ff3d 	bl	80005f8 <__aeabi_dmul>
 801277e:	4680      	mov	r8, r0
 8012780:	4689      	mov	r9, r1
 8012782:	e7c5      	b.n	8012710 <_dtoa_r+0x530>
 8012784:	ec51 0b17 	vmov	r0, r1, d7
 8012788:	f7ed ff36 	bl	80005f8 <__aeabi_dmul>
 801278c:	9b02      	ldr	r3, [sp, #8]
 801278e:	9d00      	ldr	r5, [sp, #0]
 8012790:	930f      	str	r3, [sp, #60]	; 0x3c
 8012792:	ec41 0b19 	vmov	d9, r0, r1
 8012796:	4649      	mov	r1, r9
 8012798:	4640      	mov	r0, r8
 801279a:	f7ee f9dd 	bl	8000b58 <__aeabi_d2iz>
 801279e:	4606      	mov	r6, r0
 80127a0:	f7ed fec0 	bl	8000524 <__aeabi_i2d>
 80127a4:	3630      	adds	r6, #48	; 0x30
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	4640      	mov	r0, r8
 80127ac:	4649      	mov	r1, r9
 80127ae:	f7ed fd6b 	bl	8000288 <__aeabi_dsub>
 80127b2:	f805 6b01 	strb.w	r6, [r5], #1
 80127b6:	9b02      	ldr	r3, [sp, #8]
 80127b8:	429d      	cmp	r5, r3
 80127ba:	4680      	mov	r8, r0
 80127bc:	4689      	mov	r9, r1
 80127be:	f04f 0200 	mov.w	r2, #0
 80127c2:	d124      	bne.n	801280e <_dtoa_r+0x62e>
 80127c4:	4b1b      	ldr	r3, [pc, #108]	; (8012834 <_dtoa_r+0x654>)
 80127c6:	ec51 0b19 	vmov	r0, r1, d9
 80127ca:	f7ed fd5f 	bl	800028c <__adddf3>
 80127ce:	4602      	mov	r2, r0
 80127d0:	460b      	mov	r3, r1
 80127d2:	4640      	mov	r0, r8
 80127d4:	4649      	mov	r1, r9
 80127d6:	f7ee f99f 	bl	8000b18 <__aeabi_dcmpgt>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d173      	bne.n	80128c6 <_dtoa_r+0x6e6>
 80127de:	ec53 2b19 	vmov	r2, r3, d9
 80127e2:	4914      	ldr	r1, [pc, #80]	; (8012834 <_dtoa_r+0x654>)
 80127e4:	2000      	movs	r0, #0
 80127e6:	f7ed fd4f 	bl	8000288 <__aeabi_dsub>
 80127ea:	4602      	mov	r2, r0
 80127ec:	460b      	mov	r3, r1
 80127ee:	4640      	mov	r0, r8
 80127f0:	4649      	mov	r1, r9
 80127f2:	f7ee f973 	bl	8000adc <__aeabi_dcmplt>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	f43f af2f 	beq.w	801265a <_dtoa_r+0x47a>
 80127fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80127fe:	1e6b      	subs	r3, r5, #1
 8012800:	930f      	str	r3, [sp, #60]	; 0x3c
 8012802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012806:	2b30      	cmp	r3, #48	; 0x30
 8012808:	d0f8      	beq.n	80127fc <_dtoa_r+0x61c>
 801280a:	46bb      	mov	fp, r7
 801280c:	e04a      	b.n	80128a4 <_dtoa_r+0x6c4>
 801280e:	4b06      	ldr	r3, [pc, #24]	; (8012828 <_dtoa_r+0x648>)
 8012810:	f7ed fef2 	bl	80005f8 <__aeabi_dmul>
 8012814:	4680      	mov	r8, r0
 8012816:	4689      	mov	r9, r1
 8012818:	e7bd      	b.n	8012796 <_dtoa_r+0x5b6>
 801281a:	bf00      	nop
 801281c:	08016f50 	.word	0x08016f50
 8012820:	08016f28 	.word	0x08016f28
 8012824:	3ff00000 	.word	0x3ff00000
 8012828:	40240000 	.word	0x40240000
 801282c:	401c0000 	.word	0x401c0000
 8012830:	40140000 	.word	0x40140000
 8012834:	3fe00000 	.word	0x3fe00000
 8012838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801283c:	9d00      	ldr	r5, [sp, #0]
 801283e:	4642      	mov	r2, r8
 8012840:	464b      	mov	r3, r9
 8012842:	4630      	mov	r0, r6
 8012844:	4639      	mov	r1, r7
 8012846:	f7ee f801 	bl	800084c <__aeabi_ddiv>
 801284a:	f7ee f985 	bl	8000b58 <__aeabi_d2iz>
 801284e:	9001      	str	r0, [sp, #4]
 8012850:	f7ed fe68 	bl	8000524 <__aeabi_i2d>
 8012854:	4642      	mov	r2, r8
 8012856:	464b      	mov	r3, r9
 8012858:	f7ed fece 	bl	80005f8 <__aeabi_dmul>
 801285c:	4602      	mov	r2, r0
 801285e:	460b      	mov	r3, r1
 8012860:	4630      	mov	r0, r6
 8012862:	4639      	mov	r1, r7
 8012864:	f7ed fd10 	bl	8000288 <__aeabi_dsub>
 8012868:	9e01      	ldr	r6, [sp, #4]
 801286a:	9f04      	ldr	r7, [sp, #16]
 801286c:	3630      	adds	r6, #48	; 0x30
 801286e:	f805 6b01 	strb.w	r6, [r5], #1
 8012872:	9e00      	ldr	r6, [sp, #0]
 8012874:	1bae      	subs	r6, r5, r6
 8012876:	42b7      	cmp	r7, r6
 8012878:	4602      	mov	r2, r0
 801287a:	460b      	mov	r3, r1
 801287c:	d134      	bne.n	80128e8 <_dtoa_r+0x708>
 801287e:	f7ed fd05 	bl	800028c <__adddf3>
 8012882:	4642      	mov	r2, r8
 8012884:	464b      	mov	r3, r9
 8012886:	4606      	mov	r6, r0
 8012888:	460f      	mov	r7, r1
 801288a:	f7ee f945 	bl	8000b18 <__aeabi_dcmpgt>
 801288e:	b9c8      	cbnz	r0, 80128c4 <_dtoa_r+0x6e4>
 8012890:	4642      	mov	r2, r8
 8012892:	464b      	mov	r3, r9
 8012894:	4630      	mov	r0, r6
 8012896:	4639      	mov	r1, r7
 8012898:	f7ee f916 	bl	8000ac8 <__aeabi_dcmpeq>
 801289c:	b110      	cbz	r0, 80128a4 <_dtoa_r+0x6c4>
 801289e:	9b01      	ldr	r3, [sp, #4]
 80128a0:	07db      	lsls	r3, r3, #31
 80128a2:	d40f      	bmi.n	80128c4 <_dtoa_r+0x6e4>
 80128a4:	4651      	mov	r1, sl
 80128a6:	4620      	mov	r0, r4
 80128a8:	f000 fbcc 	bl	8013044 <_Bfree>
 80128ac:	2300      	movs	r3, #0
 80128ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128b0:	702b      	strb	r3, [r5, #0]
 80128b2:	f10b 0301 	add.w	r3, fp, #1
 80128b6:	6013      	str	r3, [r2, #0]
 80128b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f43f ace2 	beq.w	8012284 <_dtoa_r+0xa4>
 80128c0:	601d      	str	r5, [r3, #0]
 80128c2:	e4df      	b.n	8012284 <_dtoa_r+0xa4>
 80128c4:	465f      	mov	r7, fp
 80128c6:	462b      	mov	r3, r5
 80128c8:	461d      	mov	r5, r3
 80128ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128ce:	2a39      	cmp	r2, #57	; 0x39
 80128d0:	d106      	bne.n	80128e0 <_dtoa_r+0x700>
 80128d2:	9a00      	ldr	r2, [sp, #0]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d1f7      	bne.n	80128c8 <_dtoa_r+0x6e8>
 80128d8:	9900      	ldr	r1, [sp, #0]
 80128da:	2230      	movs	r2, #48	; 0x30
 80128dc:	3701      	adds	r7, #1
 80128de:	700a      	strb	r2, [r1, #0]
 80128e0:	781a      	ldrb	r2, [r3, #0]
 80128e2:	3201      	adds	r2, #1
 80128e4:	701a      	strb	r2, [r3, #0]
 80128e6:	e790      	b.n	801280a <_dtoa_r+0x62a>
 80128e8:	4ba3      	ldr	r3, [pc, #652]	; (8012b78 <_dtoa_r+0x998>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	f7ed fe84 	bl	80005f8 <__aeabi_dmul>
 80128f0:	2200      	movs	r2, #0
 80128f2:	2300      	movs	r3, #0
 80128f4:	4606      	mov	r6, r0
 80128f6:	460f      	mov	r7, r1
 80128f8:	f7ee f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d09e      	beq.n	801283e <_dtoa_r+0x65e>
 8012900:	e7d0      	b.n	80128a4 <_dtoa_r+0x6c4>
 8012902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012904:	2a00      	cmp	r2, #0
 8012906:	f000 80ca 	beq.w	8012a9e <_dtoa_r+0x8be>
 801290a:	9a07      	ldr	r2, [sp, #28]
 801290c:	2a01      	cmp	r2, #1
 801290e:	f300 80ad 	bgt.w	8012a6c <_dtoa_r+0x88c>
 8012912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012914:	2a00      	cmp	r2, #0
 8012916:	f000 80a5 	beq.w	8012a64 <_dtoa_r+0x884>
 801291a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801291e:	9e08      	ldr	r6, [sp, #32]
 8012920:	9d05      	ldr	r5, [sp, #20]
 8012922:	9a05      	ldr	r2, [sp, #20]
 8012924:	441a      	add	r2, r3
 8012926:	9205      	str	r2, [sp, #20]
 8012928:	9a06      	ldr	r2, [sp, #24]
 801292a:	2101      	movs	r1, #1
 801292c:	441a      	add	r2, r3
 801292e:	4620      	mov	r0, r4
 8012930:	9206      	str	r2, [sp, #24]
 8012932:	f000 fc87 	bl	8013244 <__i2b>
 8012936:	4607      	mov	r7, r0
 8012938:	b165      	cbz	r5, 8012954 <_dtoa_r+0x774>
 801293a:	9b06      	ldr	r3, [sp, #24]
 801293c:	2b00      	cmp	r3, #0
 801293e:	dd09      	ble.n	8012954 <_dtoa_r+0x774>
 8012940:	42ab      	cmp	r3, r5
 8012942:	9a05      	ldr	r2, [sp, #20]
 8012944:	bfa8      	it	ge
 8012946:	462b      	movge	r3, r5
 8012948:	1ad2      	subs	r2, r2, r3
 801294a:	9205      	str	r2, [sp, #20]
 801294c:	9a06      	ldr	r2, [sp, #24]
 801294e:	1aed      	subs	r5, r5, r3
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	9306      	str	r3, [sp, #24]
 8012954:	9b08      	ldr	r3, [sp, #32]
 8012956:	b1f3      	cbz	r3, 8012996 <_dtoa_r+0x7b6>
 8012958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801295a:	2b00      	cmp	r3, #0
 801295c:	f000 80a3 	beq.w	8012aa6 <_dtoa_r+0x8c6>
 8012960:	2e00      	cmp	r6, #0
 8012962:	dd10      	ble.n	8012986 <_dtoa_r+0x7a6>
 8012964:	4639      	mov	r1, r7
 8012966:	4632      	mov	r2, r6
 8012968:	4620      	mov	r0, r4
 801296a:	f000 fd2b 	bl	80133c4 <__pow5mult>
 801296e:	4652      	mov	r2, sl
 8012970:	4601      	mov	r1, r0
 8012972:	4607      	mov	r7, r0
 8012974:	4620      	mov	r0, r4
 8012976:	f000 fc7b 	bl	8013270 <__multiply>
 801297a:	4651      	mov	r1, sl
 801297c:	4680      	mov	r8, r0
 801297e:	4620      	mov	r0, r4
 8012980:	f000 fb60 	bl	8013044 <_Bfree>
 8012984:	46c2      	mov	sl, r8
 8012986:	9b08      	ldr	r3, [sp, #32]
 8012988:	1b9a      	subs	r2, r3, r6
 801298a:	d004      	beq.n	8012996 <_dtoa_r+0x7b6>
 801298c:	4651      	mov	r1, sl
 801298e:	4620      	mov	r0, r4
 8012990:	f000 fd18 	bl	80133c4 <__pow5mult>
 8012994:	4682      	mov	sl, r0
 8012996:	2101      	movs	r1, #1
 8012998:	4620      	mov	r0, r4
 801299a:	f000 fc53 	bl	8013244 <__i2b>
 801299e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	4606      	mov	r6, r0
 80129a4:	f340 8081 	ble.w	8012aaa <_dtoa_r+0x8ca>
 80129a8:	461a      	mov	r2, r3
 80129aa:	4601      	mov	r1, r0
 80129ac:	4620      	mov	r0, r4
 80129ae:	f000 fd09 	bl	80133c4 <__pow5mult>
 80129b2:	9b07      	ldr	r3, [sp, #28]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	4606      	mov	r6, r0
 80129b8:	dd7a      	ble.n	8012ab0 <_dtoa_r+0x8d0>
 80129ba:	f04f 0800 	mov.w	r8, #0
 80129be:	6933      	ldr	r3, [r6, #16]
 80129c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80129c4:	6918      	ldr	r0, [r3, #16]
 80129c6:	f000 fbef 	bl	80131a8 <__hi0bits>
 80129ca:	f1c0 0020 	rsb	r0, r0, #32
 80129ce:	9b06      	ldr	r3, [sp, #24]
 80129d0:	4418      	add	r0, r3
 80129d2:	f010 001f 	ands.w	r0, r0, #31
 80129d6:	f000 8094 	beq.w	8012b02 <_dtoa_r+0x922>
 80129da:	f1c0 0320 	rsb	r3, r0, #32
 80129de:	2b04      	cmp	r3, #4
 80129e0:	f340 8085 	ble.w	8012aee <_dtoa_r+0x90e>
 80129e4:	9b05      	ldr	r3, [sp, #20]
 80129e6:	f1c0 001c 	rsb	r0, r0, #28
 80129ea:	4403      	add	r3, r0
 80129ec:	9305      	str	r3, [sp, #20]
 80129ee:	9b06      	ldr	r3, [sp, #24]
 80129f0:	4403      	add	r3, r0
 80129f2:	4405      	add	r5, r0
 80129f4:	9306      	str	r3, [sp, #24]
 80129f6:	9b05      	ldr	r3, [sp, #20]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	dd05      	ble.n	8012a08 <_dtoa_r+0x828>
 80129fc:	4651      	mov	r1, sl
 80129fe:	461a      	mov	r2, r3
 8012a00:	4620      	mov	r0, r4
 8012a02:	f000 fd39 	bl	8013478 <__lshift>
 8012a06:	4682      	mov	sl, r0
 8012a08:	9b06      	ldr	r3, [sp, #24]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	dd05      	ble.n	8012a1a <_dtoa_r+0x83a>
 8012a0e:	4631      	mov	r1, r6
 8012a10:	461a      	mov	r2, r3
 8012a12:	4620      	mov	r0, r4
 8012a14:	f000 fd30 	bl	8013478 <__lshift>
 8012a18:	4606      	mov	r6, r0
 8012a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d072      	beq.n	8012b06 <_dtoa_r+0x926>
 8012a20:	4631      	mov	r1, r6
 8012a22:	4650      	mov	r0, sl
 8012a24:	f000 fd94 	bl	8013550 <__mcmp>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	da6c      	bge.n	8012b06 <_dtoa_r+0x926>
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	4651      	mov	r1, sl
 8012a30:	220a      	movs	r2, #10
 8012a32:	4620      	mov	r0, r4
 8012a34:	f000 fb28 	bl	8013088 <__multadd>
 8012a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012a3e:	4682      	mov	sl, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	f000 81b0 	beq.w	8012da6 <_dtoa_r+0xbc6>
 8012a46:	2300      	movs	r3, #0
 8012a48:	4639      	mov	r1, r7
 8012a4a:	220a      	movs	r2, #10
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f000 fb1b 	bl	8013088 <__multadd>
 8012a52:	9b01      	ldr	r3, [sp, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	4607      	mov	r7, r0
 8012a58:	f300 8096 	bgt.w	8012b88 <_dtoa_r+0x9a8>
 8012a5c:	9b07      	ldr	r3, [sp, #28]
 8012a5e:	2b02      	cmp	r3, #2
 8012a60:	dc59      	bgt.n	8012b16 <_dtoa_r+0x936>
 8012a62:	e091      	b.n	8012b88 <_dtoa_r+0x9a8>
 8012a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012a6a:	e758      	b.n	801291e <_dtoa_r+0x73e>
 8012a6c:	9b04      	ldr	r3, [sp, #16]
 8012a6e:	1e5e      	subs	r6, r3, #1
 8012a70:	9b08      	ldr	r3, [sp, #32]
 8012a72:	42b3      	cmp	r3, r6
 8012a74:	bfbf      	itttt	lt
 8012a76:	9b08      	ldrlt	r3, [sp, #32]
 8012a78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012a7a:	9608      	strlt	r6, [sp, #32]
 8012a7c:	1af3      	sublt	r3, r6, r3
 8012a7e:	bfb4      	ite	lt
 8012a80:	18d2      	addlt	r2, r2, r3
 8012a82:	1b9e      	subge	r6, r3, r6
 8012a84:	9b04      	ldr	r3, [sp, #16]
 8012a86:	bfbc      	itt	lt
 8012a88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012a8a:	2600      	movlt	r6, #0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	bfb7      	itett	lt
 8012a90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012a94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012a98:	1a9d      	sublt	r5, r3, r2
 8012a9a:	2300      	movlt	r3, #0
 8012a9c:	e741      	b.n	8012922 <_dtoa_r+0x742>
 8012a9e:	9e08      	ldr	r6, [sp, #32]
 8012aa0:	9d05      	ldr	r5, [sp, #20]
 8012aa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012aa4:	e748      	b.n	8012938 <_dtoa_r+0x758>
 8012aa6:	9a08      	ldr	r2, [sp, #32]
 8012aa8:	e770      	b.n	801298c <_dtoa_r+0x7ac>
 8012aaa:	9b07      	ldr	r3, [sp, #28]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	dc19      	bgt.n	8012ae4 <_dtoa_r+0x904>
 8012ab0:	9b02      	ldr	r3, [sp, #8]
 8012ab2:	b9bb      	cbnz	r3, 8012ae4 <_dtoa_r+0x904>
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012aba:	b99b      	cbnz	r3, 8012ae4 <_dtoa_r+0x904>
 8012abc:	9b03      	ldr	r3, [sp, #12]
 8012abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ac2:	0d1b      	lsrs	r3, r3, #20
 8012ac4:	051b      	lsls	r3, r3, #20
 8012ac6:	b183      	cbz	r3, 8012aea <_dtoa_r+0x90a>
 8012ac8:	9b05      	ldr	r3, [sp, #20]
 8012aca:	3301      	adds	r3, #1
 8012acc:	9305      	str	r3, [sp, #20]
 8012ace:	9b06      	ldr	r3, [sp, #24]
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	9306      	str	r3, [sp, #24]
 8012ad4:	f04f 0801 	mov.w	r8, #1
 8012ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f47f af6f 	bne.w	80129be <_dtoa_r+0x7de>
 8012ae0:	2001      	movs	r0, #1
 8012ae2:	e774      	b.n	80129ce <_dtoa_r+0x7ee>
 8012ae4:	f04f 0800 	mov.w	r8, #0
 8012ae8:	e7f6      	b.n	8012ad8 <_dtoa_r+0x8f8>
 8012aea:	4698      	mov	r8, r3
 8012aec:	e7f4      	b.n	8012ad8 <_dtoa_r+0x8f8>
 8012aee:	d082      	beq.n	80129f6 <_dtoa_r+0x816>
 8012af0:	9a05      	ldr	r2, [sp, #20]
 8012af2:	331c      	adds	r3, #28
 8012af4:	441a      	add	r2, r3
 8012af6:	9205      	str	r2, [sp, #20]
 8012af8:	9a06      	ldr	r2, [sp, #24]
 8012afa:	441a      	add	r2, r3
 8012afc:	441d      	add	r5, r3
 8012afe:	9206      	str	r2, [sp, #24]
 8012b00:	e779      	b.n	80129f6 <_dtoa_r+0x816>
 8012b02:	4603      	mov	r3, r0
 8012b04:	e7f4      	b.n	8012af0 <_dtoa_r+0x910>
 8012b06:	9b04      	ldr	r3, [sp, #16]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	dc37      	bgt.n	8012b7c <_dtoa_r+0x99c>
 8012b0c:	9b07      	ldr	r3, [sp, #28]
 8012b0e:	2b02      	cmp	r3, #2
 8012b10:	dd34      	ble.n	8012b7c <_dtoa_r+0x99c>
 8012b12:	9b04      	ldr	r3, [sp, #16]
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	9b01      	ldr	r3, [sp, #4]
 8012b18:	b963      	cbnz	r3, 8012b34 <_dtoa_r+0x954>
 8012b1a:	4631      	mov	r1, r6
 8012b1c:	2205      	movs	r2, #5
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f000 fab2 	bl	8013088 <__multadd>
 8012b24:	4601      	mov	r1, r0
 8012b26:	4606      	mov	r6, r0
 8012b28:	4650      	mov	r0, sl
 8012b2a:	f000 fd11 	bl	8013550 <__mcmp>
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	f73f adbb 	bgt.w	80126aa <_dtoa_r+0x4ca>
 8012b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b36:	9d00      	ldr	r5, [sp, #0]
 8012b38:	ea6f 0b03 	mvn.w	fp, r3
 8012b3c:	f04f 0800 	mov.w	r8, #0
 8012b40:	4631      	mov	r1, r6
 8012b42:	4620      	mov	r0, r4
 8012b44:	f000 fa7e 	bl	8013044 <_Bfree>
 8012b48:	2f00      	cmp	r7, #0
 8012b4a:	f43f aeab 	beq.w	80128a4 <_dtoa_r+0x6c4>
 8012b4e:	f1b8 0f00 	cmp.w	r8, #0
 8012b52:	d005      	beq.n	8012b60 <_dtoa_r+0x980>
 8012b54:	45b8      	cmp	r8, r7
 8012b56:	d003      	beq.n	8012b60 <_dtoa_r+0x980>
 8012b58:	4641      	mov	r1, r8
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	f000 fa72 	bl	8013044 <_Bfree>
 8012b60:	4639      	mov	r1, r7
 8012b62:	4620      	mov	r0, r4
 8012b64:	f000 fa6e 	bl	8013044 <_Bfree>
 8012b68:	e69c      	b.n	80128a4 <_dtoa_r+0x6c4>
 8012b6a:	2600      	movs	r6, #0
 8012b6c:	4637      	mov	r7, r6
 8012b6e:	e7e1      	b.n	8012b34 <_dtoa_r+0x954>
 8012b70:	46bb      	mov	fp, r7
 8012b72:	4637      	mov	r7, r6
 8012b74:	e599      	b.n	80126aa <_dtoa_r+0x4ca>
 8012b76:	bf00      	nop
 8012b78:	40240000 	.word	0x40240000
 8012b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f000 80c8 	beq.w	8012d14 <_dtoa_r+0xb34>
 8012b84:	9b04      	ldr	r3, [sp, #16]
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	2d00      	cmp	r5, #0
 8012b8a:	dd05      	ble.n	8012b98 <_dtoa_r+0x9b8>
 8012b8c:	4639      	mov	r1, r7
 8012b8e:	462a      	mov	r2, r5
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 fc71 	bl	8013478 <__lshift>
 8012b96:	4607      	mov	r7, r0
 8012b98:	f1b8 0f00 	cmp.w	r8, #0
 8012b9c:	d05b      	beq.n	8012c56 <_dtoa_r+0xa76>
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f000 fa0f 	bl	8012fc4 <_Balloc>
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	b928      	cbnz	r0, 8012bb6 <_dtoa_r+0x9d6>
 8012baa:	4b83      	ldr	r3, [pc, #524]	; (8012db8 <_dtoa_r+0xbd8>)
 8012bac:	4602      	mov	r2, r0
 8012bae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012bb2:	f7ff bb2e 	b.w	8012212 <_dtoa_r+0x32>
 8012bb6:	693a      	ldr	r2, [r7, #16]
 8012bb8:	3202      	adds	r2, #2
 8012bba:	0092      	lsls	r2, r2, #2
 8012bbc:	f107 010c 	add.w	r1, r7, #12
 8012bc0:	300c      	adds	r0, #12
 8012bc2:	f7ff fa66 	bl	8012092 <memcpy>
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	4629      	mov	r1, r5
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f000 fc54 	bl	8013478 <__lshift>
 8012bd0:	9b00      	ldr	r3, [sp, #0]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	9304      	str	r3, [sp, #16]
 8012bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bda:	4413      	add	r3, r2
 8012bdc:	9308      	str	r3, [sp, #32]
 8012bde:	9b02      	ldr	r3, [sp, #8]
 8012be0:	f003 0301 	and.w	r3, r3, #1
 8012be4:	46b8      	mov	r8, r7
 8012be6:	9306      	str	r3, [sp, #24]
 8012be8:	4607      	mov	r7, r0
 8012bea:	9b04      	ldr	r3, [sp, #16]
 8012bec:	4631      	mov	r1, r6
 8012bee:	3b01      	subs	r3, #1
 8012bf0:	4650      	mov	r0, sl
 8012bf2:	9301      	str	r3, [sp, #4]
 8012bf4:	f7ff fa69 	bl	80120ca <quorem>
 8012bf8:	4641      	mov	r1, r8
 8012bfa:	9002      	str	r0, [sp, #8]
 8012bfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012c00:	4650      	mov	r0, sl
 8012c02:	f000 fca5 	bl	8013550 <__mcmp>
 8012c06:	463a      	mov	r2, r7
 8012c08:	9005      	str	r0, [sp, #20]
 8012c0a:	4631      	mov	r1, r6
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f000 fcbb 	bl	8013588 <__mdiff>
 8012c12:	68c2      	ldr	r2, [r0, #12]
 8012c14:	4605      	mov	r5, r0
 8012c16:	bb02      	cbnz	r2, 8012c5a <_dtoa_r+0xa7a>
 8012c18:	4601      	mov	r1, r0
 8012c1a:	4650      	mov	r0, sl
 8012c1c:	f000 fc98 	bl	8013550 <__mcmp>
 8012c20:	4602      	mov	r2, r0
 8012c22:	4629      	mov	r1, r5
 8012c24:	4620      	mov	r0, r4
 8012c26:	9209      	str	r2, [sp, #36]	; 0x24
 8012c28:	f000 fa0c 	bl	8013044 <_Bfree>
 8012c2c:	9b07      	ldr	r3, [sp, #28]
 8012c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c30:	9d04      	ldr	r5, [sp, #16]
 8012c32:	ea43 0102 	orr.w	r1, r3, r2
 8012c36:	9b06      	ldr	r3, [sp, #24]
 8012c38:	4319      	orrs	r1, r3
 8012c3a:	d110      	bne.n	8012c5e <_dtoa_r+0xa7e>
 8012c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012c40:	d029      	beq.n	8012c96 <_dtoa_r+0xab6>
 8012c42:	9b05      	ldr	r3, [sp, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	dd02      	ble.n	8012c4e <_dtoa_r+0xa6e>
 8012c48:	9b02      	ldr	r3, [sp, #8]
 8012c4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012c4e:	9b01      	ldr	r3, [sp, #4]
 8012c50:	f883 9000 	strb.w	r9, [r3]
 8012c54:	e774      	b.n	8012b40 <_dtoa_r+0x960>
 8012c56:	4638      	mov	r0, r7
 8012c58:	e7ba      	b.n	8012bd0 <_dtoa_r+0x9f0>
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	e7e1      	b.n	8012c22 <_dtoa_r+0xa42>
 8012c5e:	9b05      	ldr	r3, [sp, #20]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	db04      	blt.n	8012c6e <_dtoa_r+0xa8e>
 8012c64:	9907      	ldr	r1, [sp, #28]
 8012c66:	430b      	orrs	r3, r1
 8012c68:	9906      	ldr	r1, [sp, #24]
 8012c6a:	430b      	orrs	r3, r1
 8012c6c:	d120      	bne.n	8012cb0 <_dtoa_r+0xad0>
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	dded      	ble.n	8012c4e <_dtoa_r+0xa6e>
 8012c72:	4651      	mov	r1, sl
 8012c74:	2201      	movs	r2, #1
 8012c76:	4620      	mov	r0, r4
 8012c78:	f000 fbfe 	bl	8013478 <__lshift>
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4682      	mov	sl, r0
 8012c80:	f000 fc66 	bl	8013550 <__mcmp>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	dc03      	bgt.n	8012c90 <_dtoa_r+0xab0>
 8012c88:	d1e1      	bne.n	8012c4e <_dtoa_r+0xa6e>
 8012c8a:	f019 0f01 	tst.w	r9, #1
 8012c8e:	d0de      	beq.n	8012c4e <_dtoa_r+0xa6e>
 8012c90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012c94:	d1d8      	bne.n	8012c48 <_dtoa_r+0xa68>
 8012c96:	9a01      	ldr	r2, [sp, #4]
 8012c98:	2339      	movs	r3, #57	; 0x39
 8012c9a:	7013      	strb	r3, [r2, #0]
 8012c9c:	462b      	mov	r3, r5
 8012c9e:	461d      	mov	r5, r3
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ca6:	2a39      	cmp	r2, #57	; 0x39
 8012ca8:	d06c      	beq.n	8012d84 <_dtoa_r+0xba4>
 8012caa:	3201      	adds	r2, #1
 8012cac:	701a      	strb	r2, [r3, #0]
 8012cae:	e747      	b.n	8012b40 <_dtoa_r+0x960>
 8012cb0:	2a00      	cmp	r2, #0
 8012cb2:	dd07      	ble.n	8012cc4 <_dtoa_r+0xae4>
 8012cb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012cb8:	d0ed      	beq.n	8012c96 <_dtoa_r+0xab6>
 8012cba:	9a01      	ldr	r2, [sp, #4]
 8012cbc:	f109 0301 	add.w	r3, r9, #1
 8012cc0:	7013      	strb	r3, [r2, #0]
 8012cc2:	e73d      	b.n	8012b40 <_dtoa_r+0x960>
 8012cc4:	9b04      	ldr	r3, [sp, #16]
 8012cc6:	9a08      	ldr	r2, [sp, #32]
 8012cc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d043      	beq.n	8012d58 <_dtoa_r+0xb78>
 8012cd0:	4651      	mov	r1, sl
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	220a      	movs	r2, #10
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f000 f9d6 	bl	8013088 <__multadd>
 8012cdc:	45b8      	cmp	r8, r7
 8012cde:	4682      	mov	sl, r0
 8012ce0:	f04f 0300 	mov.w	r3, #0
 8012ce4:	f04f 020a 	mov.w	r2, #10
 8012ce8:	4641      	mov	r1, r8
 8012cea:	4620      	mov	r0, r4
 8012cec:	d107      	bne.n	8012cfe <_dtoa_r+0xb1e>
 8012cee:	f000 f9cb 	bl	8013088 <__multadd>
 8012cf2:	4680      	mov	r8, r0
 8012cf4:	4607      	mov	r7, r0
 8012cf6:	9b04      	ldr	r3, [sp, #16]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	9304      	str	r3, [sp, #16]
 8012cfc:	e775      	b.n	8012bea <_dtoa_r+0xa0a>
 8012cfe:	f000 f9c3 	bl	8013088 <__multadd>
 8012d02:	4639      	mov	r1, r7
 8012d04:	4680      	mov	r8, r0
 8012d06:	2300      	movs	r3, #0
 8012d08:	220a      	movs	r2, #10
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	f000 f9bc 	bl	8013088 <__multadd>
 8012d10:	4607      	mov	r7, r0
 8012d12:	e7f0      	b.n	8012cf6 <_dtoa_r+0xb16>
 8012d14:	9b04      	ldr	r3, [sp, #16]
 8012d16:	9301      	str	r3, [sp, #4]
 8012d18:	9d00      	ldr	r5, [sp, #0]
 8012d1a:	4631      	mov	r1, r6
 8012d1c:	4650      	mov	r0, sl
 8012d1e:	f7ff f9d4 	bl	80120ca <quorem>
 8012d22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012d26:	9b00      	ldr	r3, [sp, #0]
 8012d28:	f805 9b01 	strb.w	r9, [r5], #1
 8012d2c:	1aea      	subs	r2, r5, r3
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	4293      	cmp	r3, r2
 8012d32:	dd07      	ble.n	8012d44 <_dtoa_r+0xb64>
 8012d34:	4651      	mov	r1, sl
 8012d36:	2300      	movs	r3, #0
 8012d38:	220a      	movs	r2, #10
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f000 f9a4 	bl	8013088 <__multadd>
 8012d40:	4682      	mov	sl, r0
 8012d42:	e7ea      	b.n	8012d1a <_dtoa_r+0xb3a>
 8012d44:	9b01      	ldr	r3, [sp, #4]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	bfc8      	it	gt
 8012d4a:	461d      	movgt	r5, r3
 8012d4c:	9b00      	ldr	r3, [sp, #0]
 8012d4e:	bfd8      	it	le
 8012d50:	2501      	movle	r5, #1
 8012d52:	441d      	add	r5, r3
 8012d54:	f04f 0800 	mov.w	r8, #0
 8012d58:	4651      	mov	r1, sl
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f000 fb8b 	bl	8013478 <__lshift>
 8012d62:	4631      	mov	r1, r6
 8012d64:	4682      	mov	sl, r0
 8012d66:	f000 fbf3 	bl	8013550 <__mcmp>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	dc96      	bgt.n	8012c9c <_dtoa_r+0xabc>
 8012d6e:	d102      	bne.n	8012d76 <_dtoa_r+0xb96>
 8012d70:	f019 0f01 	tst.w	r9, #1
 8012d74:	d192      	bne.n	8012c9c <_dtoa_r+0xabc>
 8012d76:	462b      	mov	r3, r5
 8012d78:	461d      	mov	r5, r3
 8012d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d7e:	2a30      	cmp	r2, #48	; 0x30
 8012d80:	d0fa      	beq.n	8012d78 <_dtoa_r+0xb98>
 8012d82:	e6dd      	b.n	8012b40 <_dtoa_r+0x960>
 8012d84:	9a00      	ldr	r2, [sp, #0]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d189      	bne.n	8012c9e <_dtoa_r+0xabe>
 8012d8a:	f10b 0b01 	add.w	fp, fp, #1
 8012d8e:	2331      	movs	r3, #49	; 0x31
 8012d90:	e796      	b.n	8012cc0 <_dtoa_r+0xae0>
 8012d92:	4b0a      	ldr	r3, [pc, #40]	; (8012dbc <_dtoa_r+0xbdc>)
 8012d94:	f7ff ba99 	b.w	80122ca <_dtoa_r+0xea>
 8012d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	f47f aa6d 	bne.w	801227a <_dtoa_r+0x9a>
 8012da0:	4b07      	ldr	r3, [pc, #28]	; (8012dc0 <_dtoa_r+0xbe0>)
 8012da2:	f7ff ba92 	b.w	80122ca <_dtoa_r+0xea>
 8012da6:	9b01      	ldr	r3, [sp, #4]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	dcb5      	bgt.n	8012d18 <_dtoa_r+0xb38>
 8012dac:	9b07      	ldr	r3, [sp, #28]
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	f73f aeb1 	bgt.w	8012b16 <_dtoa_r+0x936>
 8012db4:	e7b0      	b.n	8012d18 <_dtoa_r+0xb38>
 8012db6:	bf00      	nop
 8012db8:	08016ebe 	.word	0x08016ebe
 8012dbc:	08016dbf 	.word	0x08016dbf
 8012dc0:	08016e59 	.word	0x08016e59

08012dc4 <_free_r>:
 8012dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dc6:	2900      	cmp	r1, #0
 8012dc8:	d044      	beq.n	8012e54 <_free_r+0x90>
 8012dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dce:	9001      	str	r0, [sp, #4]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8012dd6:	bfb8      	it	lt
 8012dd8:	18e4      	addlt	r4, r4, r3
 8012dda:	f000 f8e7 	bl	8012fac <__malloc_lock>
 8012dde:	4a1e      	ldr	r2, [pc, #120]	; (8012e58 <_free_r+0x94>)
 8012de0:	9801      	ldr	r0, [sp, #4]
 8012de2:	6813      	ldr	r3, [r2, #0]
 8012de4:	b933      	cbnz	r3, 8012df4 <_free_r+0x30>
 8012de6:	6063      	str	r3, [r4, #4]
 8012de8:	6014      	str	r4, [r2, #0]
 8012dea:	b003      	add	sp, #12
 8012dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012df0:	f000 b8e2 	b.w	8012fb8 <__malloc_unlock>
 8012df4:	42a3      	cmp	r3, r4
 8012df6:	d908      	bls.n	8012e0a <_free_r+0x46>
 8012df8:	6825      	ldr	r5, [r4, #0]
 8012dfa:	1961      	adds	r1, r4, r5
 8012dfc:	428b      	cmp	r3, r1
 8012dfe:	bf01      	itttt	eq
 8012e00:	6819      	ldreq	r1, [r3, #0]
 8012e02:	685b      	ldreq	r3, [r3, #4]
 8012e04:	1949      	addeq	r1, r1, r5
 8012e06:	6021      	streq	r1, [r4, #0]
 8012e08:	e7ed      	b.n	8012de6 <_free_r+0x22>
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	b10b      	cbz	r3, 8012e14 <_free_r+0x50>
 8012e10:	42a3      	cmp	r3, r4
 8012e12:	d9fa      	bls.n	8012e0a <_free_r+0x46>
 8012e14:	6811      	ldr	r1, [r2, #0]
 8012e16:	1855      	adds	r5, r2, r1
 8012e18:	42a5      	cmp	r5, r4
 8012e1a:	d10b      	bne.n	8012e34 <_free_r+0x70>
 8012e1c:	6824      	ldr	r4, [r4, #0]
 8012e1e:	4421      	add	r1, r4
 8012e20:	1854      	adds	r4, r2, r1
 8012e22:	42a3      	cmp	r3, r4
 8012e24:	6011      	str	r1, [r2, #0]
 8012e26:	d1e0      	bne.n	8012dea <_free_r+0x26>
 8012e28:	681c      	ldr	r4, [r3, #0]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	6053      	str	r3, [r2, #4]
 8012e2e:	440c      	add	r4, r1
 8012e30:	6014      	str	r4, [r2, #0]
 8012e32:	e7da      	b.n	8012dea <_free_r+0x26>
 8012e34:	d902      	bls.n	8012e3c <_free_r+0x78>
 8012e36:	230c      	movs	r3, #12
 8012e38:	6003      	str	r3, [r0, #0]
 8012e3a:	e7d6      	b.n	8012dea <_free_r+0x26>
 8012e3c:	6825      	ldr	r5, [r4, #0]
 8012e3e:	1961      	adds	r1, r4, r5
 8012e40:	428b      	cmp	r3, r1
 8012e42:	bf04      	itt	eq
 8012e44:	6819      	ldreq	r1, [r3, #0]
 8012e46:	685b      	ldreq	r3, [r3, #4]
 8012e48:	6063      	str	r3, [r4, #4]
 8012e4a:	bf04      	itt	eq
 8012e4c:	1949      	addeq	r1, r1, r5
 8012e4e:	6021      	streq	r1, [r4, #0]
 8012e50:	6054      	str	r4, [r2, #4]
 8012e52:	e7ca      	b.n	8012dea <_free_r+0x26>
 8012e54:	b003      	add	sp, #12
 8012e56:	bd30      	pop	{r4, r5, pc}
 8012e58:	20003b98 	.word	0x20003b98

08012e5c <malloc>:
 8012e5c:	4b02      	ldr	r3, [pc, #8]	; (8012e68 <malloc+0xc>)
 8012e5e:	4601      	mov	r1, r0
 8012e60:	6818      	ldr	r0, [r3, #0]
 8012e62:	f000 b823 	b.w	8012eac <_malloc_r>
 8012e66:	bf00      	nop
 8012e68:	2000016c 	.word	0x2000016c

08012e6c <sbrk_aligned>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	4e0e      	ldr	r6, [pc, #56]	; (8012ea8 <sbrk_aligned+0x3c>)
 8012e70:	460c      	mov	r4, r1
 8012e72:	6831      	ldr	r1, [r6, #0]
 8012e74:	4605      	mov	r5, r0
 8012e76:	b911      	cbnz	r1, 8012e7e <sbrk_aligned+0x12>
 8012e78:	f001 fffa 	bl	8014e70 <_sbrk_r>
 8012e7c:	6030      	str	r0, [r6, #0]
 8012e7e:	4621      	mov	r1, r4
 8012e80:	4628      	mov	r0, r5
 8012e82:	f001 fff5 	bl	8014e70 <_sbrk_r>
 8012e86:	1c43      	adds	r3, r0, #1
 8012e88:	d00a      	beq.n	8012ea0 <sbrk_aligned+0x34>
 8012e8a:	1cc4      	adds	r4, r0, #3
 8012e8c:	f024 0403 	bic.w	r4, r4, #3
 8012e90:	42a0      	cmp	r0, r4
 8012e92:	d007      	beq.n	8012ea4 <sbrk_aligned+0x38>
 8012e94:	1a21      	subs	r1, r4, r0
 8012e96:	4628      	mov	r0, r5
 8012e98:	f001 ffea 	bl	8014e70 <_sbrk_r>
 8012e9c:	3001      	adds	r0, #1
 8012e9e:	d101      	bne.n	8012ea4 <sbrk_aligned+0x38>
 8012ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	bd70      	pop	{r4, r5, r6, pc}
 8012ea8:	20003b9c 	.word	0x20003b9c

08012eac <_malloc_r>:
 8012eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eb0:	1ccd      	adds	r5, r1, #3
 8012eb2:	f025 0503 	bic.w	r5, r5, #3
 8012eb6:	3508      	adds	r5, #8
 8012eb8:	2d0c      	cmp	r5, #12
 8012eba:	bf38      	it	cc
 8012ebc:	250c      	movcc	r5, #12
 8012ebe:	2d00      	cmp	r5, #0
 8012ec0:	4607      	mov	r7, r0
 8012ec2:	db01      	blt.n	8012ec8 <_malloc_r+0x1c>
 8012ec4:	42a9      	cmp	r1, r5
 8012ec6:	d905      	bls.n	8012ed4 <_malloc_r+0x28>
 8012ec8:	230c      	movs	r3, #12
 8012eca:	603b      	str	r3, [r7, #0]
 8012ecc:	2600      	movs	r6, #0
 8012ece:	4630      	mov	r0, r6
 8012ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012fa8 <_malloc_r+0xfc>
 8012ed8:	f000 f868 	bl	8012fac <__malloc_lock>
 8012edc:	f8d8 3000 	ldr.w	r3, [r8]
 8012ee0:	461c      	mov	r4, r3
 8012ee2:	bb5c      	cbnz	r4, 8012f3c <_malloc_r+0x90>
 8012ee4:	4629      	mov	r1, r5
 8012ee6:	4638      	mov	r0, r7
 8012ee8:	f7ff ffc0 	bl	8012e6c <sbrk_aligned>
 8012eec:	1c43      	adds	r3, r0, #1
 8012eee:	4604      	mov	r4, r0
 8012ef0:	d155      	bne.n	8012f9e <_malloc_r+0xf2>
 8012ef2:	f8d8 4000 	ldr.w	r4, [r8]
 8012ef6:	4626      	mov	r6, r4
 8012ef8:	2e00      	cmp	r6, #0
 8012efa:	d145      	bne.n	8012f88 <_malloc_r+0xdc>
 8012efc:	2c00      	cmp	r4, #0
 8012efe:	d048      	beq.n	8012f92 <_malloc_r+0xe6>
 8012f00:	6823      	ldr	r3, [r4, #0]
 8012f02:	4631      	mov	r1, r6
 8012f04:	4638      	mov	r0, r7
 8012f06:	eb04 0903 	add.w	r9, r4, r3
 8012f0a:	f001 ffb1 	bl	8014e70 <_sbrk_r>
 8012f0e:	4581      	cmp	r9, r0
 8012f10:	d13f      	bne.n	8012f92 <_malloc_r+0xe6>
 8012f12:	6821      	ldr	r1, [r4, #0]
 8012f14:	1a6d      	subs	r5, r5, r1
 8012f16:	4629      	mov	r1, r5
 8012f18:	4638      	mov	r0, r7
 8012f1a:	f7ff ffa7 	bl	8012e6c <sbrk_aligned>
 8012f1e:	3001      	adds	r0, #1
 8012f20:	d037      	beq.n	8012f92 <_malloc_r+0xe6>
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	442b      	add	r3, r5
 8012f26:	6023      	str	r3, [r4, #0]
 8012f28:	f8d8 3000 	ldr.w	r3, [r8]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d038      	beq.n	8012fa2 <_malloc_r+0xf6>
 8012f30:	685a      	ldr	r2, [r3, #4]
 8012f32:	42a2      	cmp	r2, r4
 8012f34:	d12b      	bne.n	8012f8e <_malloc_r+0xe2>
 8012f36:	2200      	movs	r2, #0
 8012f38:	605a      	str	r2, [r3, #4]
 8012f3a:	e00f      	b.n	8012f5c <_malloc_r+0xb0>
 8012f3c:	6822      	ldr	r2, [r4, #0]
 8012f3e:	1b52      	subs	r2, r2, r5
 8012f40:	d41f      	bmi.n	8012f82 <_malloc_r+0xd6>
 8012f42:	2a0b      	cmp	r2, #11
 8012f44:	d917      	bls.n	8012f76 <_malloc_r+0xca>
 8012f46:	1961      	adds	r1, r4, r5
 8012f48:	42a3      	cmp	r3, r4
 8012f4a:	6025      	str	r5, [r4, #0]
 8012f4c:	bf18      	it	ne
 8012f4e:	6059      	strne	r1, [r3, #4]
 8012f50:	6863      	ldr	r3, [r4, #4]
 8012f52:	bf08      	it	eq
 8012f54:	f8c8 1000 	streq.w	r1, [r8]
 8012f58:	5162      	str	r2, [r4, r5]
 8012f5a:	604b      	str	r3, [r1, #4]
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	f104 060b 	add.w	r6, r4, #11
 8012f62:	f000 f829 	bl	8012fb8 <__malloc_unlock>
 8012f66:	f026 0607 	bic.w	r6, r6, #7
 8012f6a:	1d23      	adds	r3, r4, #4
 8012f6c:	1af2      	subs	r2, r6, r3
 8012f6e:	d0ae      	beq.n	8012ece <_malloc_r+0x22>
 8012f70:	1b9b      	subs	r3, r3, r6
 8012f72:	50a3      	str	r3, [r4, r2]
 8012f74:	e7ab      	b.n	8012ece <_malloc_r+0x22>
 8012f76:	42a3      	cmp	r3, r4
 8012f78:	6862      	ldr	r2, [r4, #4]
 8012f7a:	d1dd      	bne.n	8012f38 <_malloc_r+0x8c>
 8012f7c:	f8c8 2000 	str.w	r2, [r8]
 8012f80:	e7ec      	b.n	8012f5c <_malloc_r+0xb0>
 8012f82:	4623      	mov	r3, r4
 8012f84:	6864      	ldr	r4, [r4, #4]
 8012f86:	e7ac      	b.n	8012ee2 <_malloc_r+0x36>
 8012f88:	4634      	mov	r4, r6
 8012f8a:	6876      	ldr	r6, [r6, #4]
 8012f8c:	e7b4      	b.n	8012ef8 <_malloc_r+0x4c>
 8012f8e:	4613      	mov	r3, r2
 8012f90:	e7cc      	b.n	8012f2c <_malloc_r+0x80>
 8012f92:	230c      	movs	r3, #12
 8012f94:	603b      	str	r3, [r7, #0]
 8012f96:	4638      	mov	r0, r7
 8012f98:	f000 f80e 	bl	8012fb8 <__malloc_unlock>
 8012f9c:	e797      	b.n	8012ece <_malloc_r+0x22>
 8012f9e:	6025      	str	r5, [r4, #0]
 8012fa0:	e7dc      	b.n	8012f5c <_malloc_r+0xb0>
 8012fa2:	605b      	str	r3, [r3, #4]
 8012fa4:	deff      	udf	#255	; 0xff
 8012fa6:	bf00      	nop
 8012fa8:	20003b98 	.word	0x20003b98

08012fac <__malloc_lock>:
 8012fac:	4801      	ldr	r0, [pc, #4]	; (8012fb4 <__malloc_lock+0x8>)
 8012fae:	f7ff b86e 	b.w	801208e <__retarget_lock_acquire_recursive>
 8012fb2:	bf00      	nop
 8012fb4:	20003b94 	.word	0x20003b94

08012fb8 <__malloc_unlock>:
 8012fb8:	4801      	ldr	r0, [pc, #4]	; (8012fc0 <__malloc_unlock+0x8>)
 8012fba:	f7ff b869 	b.w	8012090 <__retarget_lock_release_recursive>
 8012fbe:	bf00      	nop
 8012fc0:	20003b94 	.word	0x20003b94

08012fc4 <_Balloc>:
 8012fc4:	b570      	push	{r4, r5, r6, lr}
 8012fc6:	69c6      	ldr	r6, [r0, #28]
 8012fc8:	4604      	mov	r4, r0
 8012fca:	460d      	mov	r5, r1
 8012fcc:	b976      	cbnz	r6, 8012fec <_Balloc+0x28>
 8012fce:	2010      	movs	r0, #16
 8012fd0:	f7ff ff44 	bl	8012e5c <malloc>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	61e0      	str	r0, [r4, #28]
 8012fd8:	b920      	cbnz	r0, 8012fe4 <_Balloc+0x20>
 8012fda:	4b18      	ldr	r3, [pc, #96]	; (801303c <_Balloc+0x78>)
 8012fdc:	4818      	ldr	r0, [pc, #96]	; (8013040 <_Balloc+0x7c>)
 8012fde:	216b      	movs	r1, #107	; 0x6b
 8012fe0:	f7fd fe14 	bl	8010c0c <__assert_func>
 8012fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fe8:	6006      	str	r6, [r0, #0]
 8012fea:	60c6      	str	r6, [r0, #12]
 8012fec:	69e6      	ldr	r6, [r4, #28]
 8012fee:	68f3      	ldr	r3, [r6, #12]
 8012ff0:	b183      	cbz	r3, 8013014 <_Balloc+0x50>
 8012ff2:	69e3      	ldr	r3, [r4, #28]
 8012ff4:	68db      	ldr	r3, [r3, #12]
 8012ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ffa:	b9b8      	cbnz	r0, 801302c <_Balloc+0x68>
 8012ffc:	2101      	movs	r1, #1
 8012ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8013002:	1d72      	adds	r2, r6, #5
 8013004:	0092      	lsls	r2, r2, #2
 8013006:	4620      	mov	r0, r4
 8013008:	f001 ff4a 	bl	8014ea0 <_calloc_r>
 801300c:	b160      	cbz	r0, 8013028 <_Balloc+0x64>
 801300e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013012:	e00e      	b.n	8013032 <_Balloc+0x6e>
 8013014:	2221      	movs	r2, #33	; 0x21
 8013016:	2104      	movs	r1, #4
 8013018:	4620      	mov	r0, r4
 801301a:	f001 ff41 	bl	8014ea0 <_calloc_r>
 801301e:	69e3      	ldr	r3, [r4, #28]
 8013020:	60f0      	str	r0, [r6, #12]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d1e4      	bne.n	8012ff2 <_Balloc+0x2e>
 8013028:	2000      	movs	r0, #0
 801302a:	bd70      	pop	{r4, r5, r6, pc}
 801302c:	6802      	ldr	r2, [r0, #0]
 801302e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013032:	2300      	movs	r3, #0
 8013034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013038:	e7f7      	b.n	801302a <_Balloc+0x66>
 801303a:	bf00      	nop
 801303c:	08016de8 	.word	0x08016de8
 8013040:	08016ecf 	.word	0x08016ecf

08013044 <_Bfree>:
 8013044:	b570      	push	{r4, r5, r6, lr}
 8013046:	69c6      	ldr	r6, [r0, #28]
 8013048:	4605      	mov	r5, r0
 801304a:	460c      	mov	r4, r1
 801304c:	b976      	cbnz	r6, 801306c <_Bfree+0x28>
 801304e:	2010      	movs	r0, #16
 8013050:	f7ff ff04 	bl	8012e5c <malloc>
 8013054:	4602      	mov	r2, r0
 8013056:	61e8      	str	r0, [r5, #28]
 8013058:	b920      	cbnz	r0, 8013064 <_Bfree+0x20>
 801305a:	4b09      	ldr	r3, [pc, #36]	; (8013080 <_Bfree+0x3c>)
 801305c:	4809      	ldr	r0, [pc, #36]	; (8013084 <_Bfree+0x40>)
 801305e:	218f      	movs	r1, #143	; 0x8f
 8013060:	f7fd fdd4 	bl	8010c0c <__assert_func>
 8013064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013068:	6006      	str	r6, [r0, #0]
 801306a:	60c6      	str	r6, [r0, #12]
 801306c:	b13c      	cbz	r4, 801307e <_Bfree+0x3a>
 801306e:	69eb      	ldr	r3, [r5, #28]
 8013070:	6862      	ldr	r2, [r4, #4]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013078:	6021      	str	r1, [r4, #0]
 801307a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801307e:	bd70      	pop	{r4, r5, r6, pc}
 8013080:	08016de8 	.word	0x08016de8
 8013084:	08016ecf 	.word	0x08016ecf

08013088 <__multadd>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	690d      	ldr	r5, [r1, #16]
 801308e:	4607      	mov	r7, r0
 8013090:	460c      	mov	r4, r1
 8013092:	461e      	mov	r6, r3
 8013094:	f101 0c14 	add.w	ip, r1, #20
 8013098:	2000      	movs	r0, #0
 801309a:	f8dc 3000 	ldr.w	r3, [ip]
 801309e:	b299      	uxth	r1, r3
 80130a0:	fb02 6101 	mla	r1, r2, r1, r6
 80130a4:	0c1e      	lsrs	r6, r3, #16
 80130a6:	0c0b      	lsrs	r3, r1, #16
 80130a8:	fb02 3306 	mla	r3, r2, r6, r3
 80130ac:	b289      	uxth	r1, r1
 80130ae:	3001      	adds	r0, #1
 80130b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80130b4:	4285      	cmp	r5, r0
 80130b6:	f84c 1b04 	str.w	r1, [ip], #4
 80130ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80130be:	dcec      	bgt.n	801309a <__multadd+0x12>
 80130c0:	b30e      	cbz	r6, 8013106 <__multadd+0x7e>
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	42ab      	cmp	r3, r5
 80130c6:	dc19      	bgt.n	80130fc <__multadd+0x74>
 80130c8:	6861      	ldr	r1, [r4, #4]
 80130ca:	4638      	mov	r0, r7
 80130cc:	3101      	adds	r1, #1
 80130ce:	f7ff ff79 	bl	8012fc4 <_Balloc>
 80130d2:	4680      	mov	r8, r0
 80130d4:	b928      	cbnz	r0, 80130e2 <__multadd+0x5a>
 80130d6:	4602      	mov	r2, r0
 80130d8:	4b0c      	ldr	r3, [pc, #48]	; (801310c <__multadd+0x84>)
 80130da:	480d      	ldr	r0, [pc, #52]	; (8013110 <__multadd+0x88>)
 80130dc:	21ba      	movs	r1, #186	; 0xba
 80130de:	f7fd fd95 	bl	8010c0c <__assert_func>
 80130e2:	6922      	ldr	r2, [r4, #16]
 80130e4:	3202      	adds	r2, #2
 80130e6:	f104 010c 	add.w	r1, r4, #12
 80130ea:	0092      	lsls	r2, r2, #2
 80130ec:	300c      	adds	r0, #12
 80130ee:	f7fe ffd0 	bl	8012092 <memcpy>
 80130f2:	4621      	mov	r1, r4
 80130f4:	4638      	mov	r0, r7
 80130f6:	f7ff ffa5 	bl	8013044 <_Bfree>
 80130fa:	4644      	mov	r4, r8
 80130fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013100:	3501      	adds	r5, #1
 8013102:	615e      	str	r6, [r3, #20]
 8013104:	6125      	str	r5, [r4, #16]
 8013106:	4620      	mov	r0, r4
 8013108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801310c:	08016ebe 	.word	0x08016ebe
 8013110:	08016ecf 	.word	0x08016ecf

08013114 <__s2b>:
 8013114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013118:	460c      	mov	r4, r1
 801311a:	4615      	mov	r5, r2
 801311c:	461f      	mov	r7, r3
 801311e:	2209      	movs	r2, #9
 8013120:	3308      	adds	r3, #8
 8013122:	4606      	mov	r6, r0
 8013124:	fb93 f3f2 	sdiv	r3, r3, r2
 8013128:	2100      	movs	r1, #0
 801312a:	2201      	movs	r2, #1
 801312c:	429a      	cmp	r2, r3
 801312e:	db09      	blt.n	8013144 <__s2b+0x30>
 8013130:	4630      	mov	r0, r6
 8013132:	f7ff ff47 	bl	8012fc4 <_Balloc>
 8013136:	b940      	cbnz	r0, 801314a <__s2b+0x36>
 8013138:	4602      	mov	r2, r0
 801313a:	4b19      	ldr	r3, [pc, #100]	; (80131a0 <__s2b+0x8c>)
 801313c:	4819      	ldr	r0, [pc, #100]	; (80131a4 <__s2b+0x90>)
 801313e:	21d3      	movs	r1, #211	; 0xd3
 8013140:	f7fd fd64 	bl	8010c0c <__assert_func>
 8013144:	0052      	lsls	r2, r2, #1
 8013146:	3101      	adds	r1, #1
 8013148:	e7f0      	b.n	801312c <__s2b+0x18>
 801314a:	9b08      	ldr	r3, [sp, #32]
 801314c:	6143      	str	r3, [r0, #20]
 801314e:	2d09      	cmp	r5, #9
 8013150:	f04f 0301 	mov.w	r3, #1
 8013154:	6103      	str	r3, [r0, #16]
 8013156:	dd16      	ble.n	8013186 <__s2b+0x72>
 8013158:	f104 0909 	add.w	r9, r4, #9
 801315c:	46c8      	mov	r8, r9
 801315e:	442c      	add	r4, r5
 8013160:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013164:	4601      	mov	r1, r0
 8013166:	3b30      	subs	r3, #48	; 0x30
 8013168:	220a      	movs	r2, #10
 801316a:	4630      	mov	r0, r6
 801316c:	f7ff ff8c 	bl	8013088 <__multadd>
 8013170:	45a0      	cmp	r8, r4
 8013172:	d1f5      	bne.n	8013160 <__s2b+0x4c>
 8013174:	f1a5 0408 	sub.w	r4, r5, #8
 8013178:	444c      	add	r4, r9
 801317a:	1b2d      	subs	r5, r5, r4
 801317c:	1963      	adds	r3, r4, r5
 801317e:	42bb      	cmp	r3, r7
 8013180:	db04      	blt.n	801318c <__s2b+0x78>
 8013182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013186:	340a      	adds	r4, #10
 8013188:	2509      	movs	r5, #9
 801318a:	e7f6      	b.n	801317a <__s2b+0x66>
 801318c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013190:	4601      	mov	r1, r0
 8013192:	3b30      	subs	r3, #48	; 0x30
 8013194:	220a      	movs	r2, #10
 8013196:	4630      	mov	r0, r6
 8013198:	f7ff ff76 	bl	8013088 <__multadd>
 801319c:	e7ee      	b.n	801317c <__s2b+0x68>
 801319e:	bf00      	nop
 80131a0:	08016ebe 	.word	0x08016ebe
 80131a4:	08016ecf 	.word	0x08016ecf

080131a8 <__hi0bits>:
 80131a8:	0c03      	lsrs	r3, r0, #16
 80131aa:	041b      	lsls	r3, r3, #16
 80131ac:	b9d3      	cbnz	r3, 80131e4 <__hi0bits+0x3c>
 80131ae:	0400      	lsls	r0, r0, #16
 80131b0:	2310      	movs	r3, #16
 80131b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80131b6:	bf04      	itt	eq
 80131b8:	0200      	lsleq	r0, r0, #8
 80131ba:	3308      	addeq	r3, #8
 80131bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80131c0:	bf04      	itt	eq
 80131c2:	0100      	lsleq	r0, r0, #4
 80131c4:	3304      	addeq	r3, #4
 80131c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80131ca:	bf04      	itt	eq
 80131cc:	0080      	lsleq	r0, r0, #2
 80131ce:	3302      	addeq	r3, #2
 80131d0:	2800      	cmp	r0, #0
 80131d2:	db05      	blt.n	80131e0 <__hi0bits+0x38>
 80131d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80131d8:	f103 0301 	add.w	r3, r3, #1
 80131dc:	bf08      	it	eq
 80131de:	2320      	moveq	r3, #32
 80131e0:	4618      	mov	r0, r3
 80131e2:	4770      	bx	lr
 80131e4:	2300      	movs	r3, #0
 80131e6:	e7e4      	b.n	80131b2 <__hi0bits+0xa>

080131e8 <__lo0bits>:
 80131e8:	6803      	ldr	r3, [r0, #0]
 80131ea:	f013 0207 	ands.w	r2, r3, #7
 80131ee:	d00c      	beq.n	801320a <__lo0bits+0x22>
 80131f0:	07d9      	lsls	r1, r3, #31
 80131f2:	d422      	bmi.n	801323a <__lo0bits+0x52>
 80131f4:	079a      	lsls	r2, r3, #30
 80131f6:	bf49      	itett	mi
 80131f8:	085b      	lsrmi	r3, r3, #1
 80131fa:	089b      	lsrpl	r3, r3, #2
 80131fc:	6003      	strmi	r3, [r0, #0]
 80131fe:	2201      	movmi	r2, #1
 8013200:	bf5c      	itt	pl
 8013202:	6003      	strpl	r3, [r0, #0]
 8013204:	2202      	movpl	r2, #2
 8013206:	4610      	mov	r0, r2
 8013208:	4770      	bx	lr
 801320a:	b299      	uxth	r1, r3
 801320c:	b909      	cbnz	r1, 8013212 <__lo0bits+0x2a>
 801320e:	0c1b      	lsrs	r3, r3, #16
 8013210:	2210      	movs	r2, #16
 8013212:	b2d9      	uxtb	r1, r3
 8013214:	b909      	cbnz	r1, 801321a <__lo0bits+0x32>
 8013216:	3208      	adds	r2, #8
 8013218:	0a1b      	lsrs	r3, r3, #8
 801321a:	0719      	lsls	r1, r3, #28
 801321c:	bf04      	itt	eq
 801321e:	091b      	lsreq	r3, r3, #4
 8013220:	3204      	addeq	r2, #4
 8013222:	0799      	lsls	r1, r3, #30
 8013224:	bf04      	itt	eq
 8013226:	089b      	lsreq	r3, r3, #2
 8013228:	3202      	addeq	r2, #2
 801322a:	07d9      	lsls	r1, r3, #31
 801322c:	d403      	bmi.n	8013236 <__lo0bits+0x4e>
 801322e:	085b      	lsrs	r3, r3, #1
 8013230:	f102 0201 	add.w	r2, r2, #1
 8013234:	d003      	beq.n	801323e <__lo0bits+0x56>
 8013236:	6003      	str	r3, [r0, #0]
 8013238:	e7e5      	b.n	8013206 <__lo0bits+0x1e>
 801323a:	2200      	movs	r2, #0
 801323c:	e7e3      	b.n	8013206 <__lo0bits+0x1e>
 801323e:	2220      	movs	r2, #32
 8013240:	e7e1      	b.n	8013206 <__lo0bits+0x1e>
	...

08013244 <__i2b>:
 8013244:	b510      	push	{r4, lr}
 8013246:	460c      	mov	r4, r1
 8013248:	2101      	movs	r1, #1
 801324a:	f7ff febb 	bl	8012fc4 <_Balloc>
 801324e:	4602      	mov	r2, r0
 8013250:	b928      	cbnz	r0, 801325e <__i2b+0x1a>
 8013252:	4b05      	ldr	r3, [pc, #20]	; (8013268 <__i2b+0x24>)
 8013254:	4805      	ldr	r0, [pc, #20]	; (801326c <__i2b+0x28>)
 8013256:	f240 1145 	movw	r1, #325	; 0x145
 801325a:	f7fd fcd7 	bl	8010c0c <__assert_func>
 801325e:	2301      	movs	r3, #1
 8013260:	6144      	str	r4, [r0, #20]
 8013262:	6103      	str	r3, [r0, #16]
 8013264:	bd10      	pop	{r4, pc}
 8013266:	bf00      	nop
 8013268:	08016ebe 	.word	0x08016ebe
 801326c:	08016ecf 	.word	0x08016ecf

08013270 <__multiply>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	4691      	mov	r9, r2
 8013276:	690a      	ldr	r2, [r1, #16]
 8013278:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801327c:	429a      	cmp	r2, r3
 801327e:	bfb8      	it	lt
 8013280:	460b      	movlt	r3, r1
 8013282:	460c      	mov	r4, r1
 8013284:	bfbc      	itt	lt
 8013286:	464c      	movlt	r4, r9
 8013288:	4699      	movlt	r9, r3
 801328a:	6927      	ldr	r7, [r4, #16]
 801328c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013290:	68a3      	ldr	r3, [r4, #8]
 8013292:	6861      	ldr	r1, [r4, #4]
 8013294:	eb07 060a 	add.w	r6, r7, sl
 8013298:	42b3      	cmp	r3, r6
 801329a:	b085      	sub	sp, #20
 801329c:	bfb8      	it	lt
 801329e:	3101      	addlt	r1, #1
 80132a0:	f7ff fe90 	bl	8012fc4 <_Balloc>
 80132a4:	b930      	cbnz	r0, 80132b4 <__multiply+0x44>
 80132a6:	4602      	mov	r2, r0
 80132a8:	4b44      	ldr	r3, [pc, #272]	; (80133bc <__multiply+0x14c>)
 80132aa:	4845      	ldr	r0, [pc, #276]	; (80133c0 <__multiply+0x150>)
 80132ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80132b0:	f7fd fcac 	bl	8010c0c <__assert_func>
 80132b4:	f100 0514 	add.w	r5, r0, #20
 80132b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80132bc:	462b      	mov	r3, r5
 80132be:	2200      	movs	r2, #0
 80132c0:	4543      	cmp	r3, r8
 80132c2:	d321      	bcc.n	8013308 <__multiply+0x98>
 80132c4:	f104 0314 	add.w	r3, r4, #20
 80132c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80132cc:	f109 0314 	add.w	r3, r9, #20
 80132d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80132d4:	9202      	str	r2, [sp, #8]
 80132d6:	1b3a      	subs	r2, r7, r4
 80132d8:	3a15      	subs	r2, #21
 80132da:	f022 0203 	bic.w	r2, r2, #3
 80132de:	3204      	adds	r2, #4
 80132e0:	f104 0115 	add.w	r1, r4, #21
 80132e4:	428f      	cmp	r7, r1
 80132e6:	bf38      	it	cc
 80132e8:	2204      	movcc	r2, #4
 80132ea:	9201      	str	r2, [sp, #4]
 80132ec:	9a02      	ldr	r2, [sp, #8]
 80132ee:	9303      	str	r3, [sp, #12]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d80c      	bhi.n	801330e <__multiply+0x9e>
 80132f4:	2e00      	cmp	r6, #0
 80132f6:	dd03      	ble.n	8013300 <__multiply+0x90>
 80132f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d05b      	beq.n	80133b8 <__multiply+0x148>
 8013300:	6106      	str	r6, [r0, #16]
 8013302:	b005      	add	sp, #20
 8013304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013308:	f843 2b04 	str.w	r2, [r3], #4
 801330c:	e7d8      	b.n	80132c0 <__multiply+0x50>
 801330e:	f8b3 a000 	ldrh.w	sl, [r3]
 8013312:	f1ba 0f00 	cmp.w	sl, #0
 8013316:	d024      	beq.n	8013362 <__multiply+0xf2>
 8013318:	f104 0e14 	add.w	lr, r4, #20
 801331c:	46a9      	mov	r9, r5
 801331e:	f04f 0c00 	mov.w	ip, #0
 8013322:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013326:	f8d9 1000 	ldr.w	r1, [r9]
 801332a:	fa1f fb82 	uxth.w	fp, r2
 801332e:	b289      	uxth	r1, r1
 8013330:	fb0a 110b 	mla	r1, sl, fp, r1
 8013334:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013338:	f8d9 2000 	ldr.w	r2, [r9]
 801333c:	4461      	add	r1, ip
 801333e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013342:	fb0a c20b 	mla	r2, sl, fp, ip
 8013346:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801334a:	b289      	uxth	r1, r1
 801334c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013350:	4577      	cmp	r7, lr
 8013352:	f849 1b04 	str.w	r1, [r9], #4
 8013356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801335a:	d8e2      	bhi.n	8013322 <__multiply+0xb2>
 801335c:	9a01      	ldr	r2, [sp, #4]
 801335e:	f845 c002 	str.w	ip, [r5, r2]
 8013362:	9a03      	ldr	r2, [sp, #12]
 8013364:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013368:	3304      	adds	r3, #4
 801336a:	f1b9 0f00 	cmp.w	r9, #0
 801336e:	d021      	beq.n	80133b4 <__multiply+0x144>
 8013370:	6829      	ldr	r1, [r5, #0]
 8013372:	f104 0c14 	add.w	ip, r4, #20
 8013376:	46ae      	mov	lr, r5
 8013378:	f04f 0a00 	mov.w	sl, #0
 801337c:	f8bc b000 	ldrh.w	fp, [ip]
 8013380:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013384:	fb09 220b 	mla	r2, r9, fp, r2
 8013388:	4452      	add	r2, sl
 801338a:	b289      	uxth	r1, r1
 801338c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013390:	f84e 1b04 	str.w	r1, [lr], #4
 8013394:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013398:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801339c:	f8be 1000 	ldrh.w	r1, [lr]
 80133a0:	fb09 110a 	mla	r1, r9, sl, r1
 80133a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80133a8:	4567      	cmp	r7, ip
 80133aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80133ae:	d8e5      	bhi.n	801337c <__multiply+0x10c>
 80133b0:	9a01      	ldr	r2, [sp, #4]
 80133b2:	50a9      	str	r1, [r5, r2]
 80133b4:	3504      	adds	r5, #4
 80133b6:	e799      	b.n	80132ec <__multiply+0x7c>
 80133b8:	3e01      	subs	r6, #1
 80133ba:	e79b      	b.n	80132f4 <__multiply+0x84>
 80133bc:	08016ebe 	.word	0x08016ebe
 80133c0:	08016ecf 	.word	0x08016ecf

080133c4 <__pow5mult>:
 80133c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133c8:	4615      	mov	r5, r2
 80133ca:	f012 0203 	ands.w	r2, r2, #3
 80133ce:	4606      	mov	r6, r0
 80133d0:	460f      	mov	r7, r1
 80133d2:	d007      	beq.n	80133e4 <__pow5mult+0x20>
 80133d4:	4c25      	ldr	r4, [pc, #148]	; (801346c <__pow5mult+0xa8>)
 80133d6:	3a01      	subs	r2, #1
 80133d8:	2300      	movs	r3, #0
 80133da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80133de:	f7ff fe53 	bl	8013088 <__multadd>
 80133e2:	4607      	mov	r7, r0
 80133e4:	10ad      	asrs	r5, r5, #2
 80133e6:	d03d      	beq.n	8013464 <__pow5mult+0xa0>
 80133e8:	69f4      	ldr	r4, [r6, #28]
 80133ea:	b97c      	cbnz	r4, 801340c <__pow5mult+0x48>
 80133ec:	2010      	movs	r0, #16
 80133ee:	f7ff fd35 	bl	8012e5c <malloc>
 80133f2:	4602      	mov	r2, r0
 80133f4:	61f0      	str	r0, [r6, #28]
 80133f6:	b928      	cbnz	r0, 8013404 <__pow5mult+0x40>
 80133f8:	4b1d      	ldr	r3, [pc, #116]	; (8013470 <__pow5mult+0xac>)
 80133fa:	481e      	ldr	r0, [pc, #120]	; (8013474 <__pow5mult+0xb0>)
 80133fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013400:	f7fd fc04 	bl	8010c0c <__assert_func>
 8013404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013408:	6004      	str	r4, [r0, #0]
 801340a:	60c4      	str	r4, [r0, #12]
 801340c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013414:	b94c      	cbnz	r4, 801342a <__pow5mult+0x66>
 8013416:	f240 2171 	movw	r1, #625	; 0x271
 801341a:	4630      	mov	r0, r6
 801341c:	f7ff ff12 	bl	8013244 <__i2b>
 8013420:	2300      	movs	r3, #0
 8013422:	f8c8 0008 	str.w	r0, [r8, #8]
 8013426:	4604      	mov	r4, r0
 8013428:	6003      	str	r3, [r0, #0]
 801342a:	f04f 0900 	mov.w	r9, #0
 801342e:	07eb      	lsls	r3, r5, #31
 8013430:	d50a      	bpl.n	8013448 <__pow5mult+0x84>
 8013432:	4639      	mov	r1, r7
 8013434:	4622      	mov	r2, r4
 8013436:	4630      	mov	r0, r6
 8013438:	f7ff ff1a 	bl	8013270 <__multiply>
 801343c:	4639      	mov	r1, r7
 801343e:	4680      	mov	r8, r0
 8013440:	4630      	mov	r0, r6
 8013442:	f7ff fdff 	bl	8013044 <_Bfree>
 8013446:	4647      	mov	r7, r8
 8013448:	106d      	asrs	r5, r5, #1
 801344a:	d00b      	beq.n	8013464 <__pow5mult+0xa0>
 801344c:	6820      	ldr	r0, [r4, #0]
 801344e:	b938      	cbnz	r0, 8013460 <__pow5mult+0x9c>
 8013450:	4622      	mov	r2, r4
 8013452:	4621      	mov	r1, r4
 8013454:	4630      	mov	r0, r6
 8013456:	f7ff ff0b 	bl	8013270 <__multiply>
 801345a:	6020      	str	r0, [r4, #0]
 801345c:	f8c0 9000 	str.w	r9, [r0]
 8013460:	4604      	mov	r4, r0
 8013462:	e7e4      	b.n	801342e <__pow5mult+0x6a>
 8013464:	4638      	mov	r0, r7
 8013466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801346a:	bf00      	nop
 801346c:	08017018 	.word	0x08017018
 8013470:	08016de8 	.word	0x08016de8
 8013474:	08016ecf 	.word	0x08016ecf

08013478 <__lshift>:
 8013478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801347c:	460c      	mov	r4, r1
 801347e:	6849      	ldr	r1, [r1, #4]
 8013480:	6923      	ldr	r3, [r4, #16]
 8013482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013486:	68a3      	ldr	r3, [r4, #8]
 8013488:	4607      	mov	r7, r0
 801348a:	4691      	mov	r9, r2
 801348c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013490:	f108 0601 	add.w	r6, r8, #1
 8013494:	42b3      	cmp	r3, r6
 8013496:	db0b      	blt.n	80134b0 <__lshift+0x38>
 8013498:	4638      	mov	r0, r7
 801349a:	f7ff fd93 	bl	8012fc4 <_Balloc>
 801349e:	4605      	mov	r5, r0
 80134a0:	b948      	cbnz	r0, 80134b6 <__lshift+0x3e>
 80134a2:	4602      	mov	r2, r0
 80134a4:	4b28      	ldr	r3, [pc, #160]	; (8013548 <__lshift+0xd0>)
 80134a6:	4829      	ldr	r0, [pc, #164]	; (801354c <__lshift+0xd4>)
 80134a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80134ac:	f7fd fbae 	bl	8010c0c <__assert_func>
 80134b0:	3101      	adds	r1, #1
 80134b2:	005b      	lsls	r3, r3, #1
 80134b4:	e7ee      	b.n	8013494 <__lshift+0x1c>
 80134b6:	2300      	movs	r3, #0
 80134b8:	f100 0114 	add.w	r1, r0, #20
 80134bc:	f100 0210 	add.w	r2, r0, #16
 80134c0:	4618      	mov	r0, r3
 80134c2:	4553      	cmp	r3, sl
 80134c4:	db33      	blt.n	801352e <__lshift+0xb6>
 80134c6:	6920      	ldr	r0, [r4, #16]
 80134c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80134cc:	f104 0314 	add.w	r3, r4, #20
 80134d0:	f019 091f 	ands.w	r9, r9, #31
 80134d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80134d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80134dc:	d02b      	beq.n	8013536 <__lshift+0xbe>
 80134de:	f1c9 0e20 	rsb	lr, r9, #32
 80134e2:	468a      	mov	sl, r1
 80134e4:	2200      	movs	r2, #0
 80134e6:	6818      	ldr	r0, [r3, #0]
 80134e8:	fa00 f009 	lsl.w	r0, r0, r9
 80134ec:	4310      	orrs	r0, r2
 80134ee:	f84a 0b04 	str.w	r0, [sl], #4
 80134f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80134f6:	459c      	cmp	ip, r3
 80134f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80134fc:	d8f3      	bhi.n	80134e6 <__lshift+0x6e>
 80134fe:	ebac 0304 	sub.w	r3, ip, r4
 8013502:	3b15      	subs	r3, #21
 8013504:	f023 0303 	bic.w	r3, r3, #3
 8013508:	3304      	adds	r3, #4
 801350a:	f104 0015 	add.w	r0, r4, #21
 801350e:	4584      	cmp	ip, r0
 8013510:	bf38      	it	cc
 8013512:	2304      	movcc	r3, #4
 8013514:	50ca      	str	r2, [r1, r3]
 8013516:	b10a      	cbz	r2, 801351c <__lshift+0xa4>
 8013518:	f108 0602 	add.w	r6, r8, #2
 801351c:	3e01      	subs	r6, #1
 801351e:	4638      	mov	r0, r7
 8013520:	612e      	str	r6, [r5, #16]
 8013522:	4621      	mov	r1, r4
 8013524:	f7ff fd8e 	bl	8013044 <_Bfree>
 8013528:	4628      	mov	r0, r5
 801352a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801352e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013532:	3301      	adds	r3, #1
 8013534:	e7c5      	b.n	80134c2 <__lshift+0x4a>
 8013536:	3904      	subs	r1, #4
 8013538:	f853 2b04 	ldr.w	r2, [r3], #4
 801353c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013540:	459c      	cmp	ip, r3
 8013542:	d8f9      	bhi.n	8013538 <__lshift+0xc0>
 8013544:	e7ea      	b.n	801351c <__lshift+0xa4>
 8013546:	bf00      	nop
 8013548:	08016ebe 	.word	0x08016ebe
 801354c:	08016ecf 	.word	0x08016ecf

08013550 <__mcmp>:
 8013550:	b530      	push	{r4, r5, lr}
 8013552:	6902      	ldr	r2, [r0, #16]
 8013554:	690c      	ldr	r4, [r1, #16]
 8013556:	1b12      	subs	r2, r2, r4
 8013558:	d10e      	bne.n	8013578 <__mcmp+0x28>
 801355a:	f100 0314 	add.w	r3, r0, #20
 801355e:	3114      	adds	r1, #20
 8013560:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013564:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013568:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801356c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013570:	42a5      	cmp	r5, r4
 8013572:	d003      	beq.n	801357c <__mcmp+0x2c>
 8013574:	d305      	bcc.n	8013582 <__mcmp+0x32>
 8013576:	2201      	movs	r2, #1
 8013578:	4610      	mov	r0, r2
 801357a:	bd30      	pop	{r4, r5, pc}
 801357c:	4283      	cmp	r3, r0
 801357e:	d3f3      	bcc.n	8013568 <__mcmp+0x18>
 8013580:	e7fa      	b.n	8013578 <__mcmp+0x28>
 8013582:	f04f 32ff 	mov.w	r2, #4294967295
 8013586:	e7f7      	b.n	8013578 <__mcmp+0x28>

08013588 <__mdiff>:
 8013588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358c:	460c      	mov	r4, r1
 801358e:	4606      	mov	r6, r0
 8013590:	4611      	mov	r1, r2
 8013592:	4620      	mov	r0, r4
 8013594:	4690      	mov	r8, r2
 8013596:	f7ff ffdb 	bl	8013550 <__mcmp>
 801359a:	1e05      	subs	r5, r0, #0
 801359c:	d110      	bne.n	80135c0 <__mdiff+0x38>
 801359e:	4629      	mov	r1, r5
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7ff fd0f 	bl	8012fc4 <_Balloc>
 80135a6:	b930      	cbnz	r0, 80135b6 <__mdiff+0x2e>
 80135a8:	4b3a      	ldr	r3, [pc, #232]	; (8013694 <__mdiff+0x10c>)
 80135aa:	4602      	mov	r2, r0
 80135ac:	f240 2137 	movw	r1, #567	; 0x237
 80135b0:	4839      	ldr	r0, [pc, #228]	; (8013698 <__mdiff+0x110>)
 80135b2:	f7fd fb2b 	bl	8010c0c <__assert_func>
 80135b6:	2301      	movs	r3, #1
 80135b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80135bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c0:	bfa4      	itt	ge
 80135c2:	4643      	movge	r3, r8
 80135c4:	46a0      	movge	r8, r4
 80135c6:	4630      	mov	r0, r6
 80135c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80135cc:	bfa6      	itte	ge
 80135ce:	461c      	movge	r4, r3
 80135d0:	2500      	movge	r5, #0
 80135d2:	2501      	movlt	r5, #1
 80135d4:	f7ff fcf6 	bl	8012fc4 <_Balloc>
 80135d8:	b920      	cbnz	r0, 80135e4 <__mdiff+0x5c>
 80135da:	4b2e      	ldr	r3, [pc, #184]	; (8013694 <__mdiff+0x10c>)
 80135dc:	4602      	mov	r2, r0
 80135de:	f240 2145 	movw	r1, #581	; 0x245
 80135e2:	e7e5      	b.n	80135b0 <__mdiff+0x28>
 80135e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80135e8:	6926      	ldr	r6, [r4, #16]
 80135ea:	60c5      	str	r5, [r0, #12]
 80135ec:	f104 0914 	add.w	r9, r4, #20
 80135f0:	f108 0514 	add.w	r5, r8, #20
 80135f4:	f100 0e14 	add.w	lr, r0, #20
 80135f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80135fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013600:	f108 0210 	add.w	r2, r8, #16
 8013604:	46f2      	mov	sl, lr
 8013606:	2100      	movs	r1, #0
 8013608:	f859 3b04 	ldr.w	r3, [r9], #4
 801360c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013610:	fa11 f88b 	uxtah	r8, r1, fp
 8013614:	b299      	uxth	r1, r3
 8013616:	0c1b      	lsrs	r3, r3, #16
 8013618:	eba8 0801 	sub.w	r8, r8, r1
 801361c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013620:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013624:	fa1f f888 	uxth.w	r8, r8
 8013628:	1419      	asrs	r1, r3, #16
 801362a:	454e      	cmp	r6, r9
 801362c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013630:	f84a 3b04 	str.w	r3, [sl], #4
 8013634:	d8e8      	bhi.n	8013608 <__mdiff+0x80>
 8013636:	1b33      	subs	r3, r6, r4
 8013638:	3b15      	subs	r3, #21
 801363a:	f023 0303 	bic.w	r3, r3, #3
 801363e:	3304      	adds	r3, #4
 8013640:	3415      	adds	r4, #21
 8013642:	42a6      	cmp	r6, r4
 8013644:	bf38      	it	cc
 8013646:	2304      	movcc	r3, #4
 8013648:	441d      	add	r5, r3
 801364a:	4473      	add	r3, lr
 801364c:	469e      	mov	lr, r3
 801364e:	462e      	mov	r6, r5
 8013650:	4566      	cmp	r6, ip
 8013652:	d30e      	bcc.n	8013672 <__mdiff+0xea>
 8013654:	f10c 0203 	add.w	r2, ip, #3
 8013658:	1b52      	subs	r2, r2, r5
 801365a:	f022 0203 	bic.w	r2, r2, #3
 801365e:	3d03      	subs	r5, #3
 8013660:	45ac      	cmp	ip, r5
 8013662:	bf38      	it	cc
 8013664:	2200      	movcc	r2, #0
 8013666:	4413      	add	r3, r2
 8013668:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801366c:	b17a      	cbz	r2, 801368e <__mdiff+0x106>
 801366e:	6107      	str	r7, [r0, #16]
 8013670:	e7a4      	b.n	80135bc <__mdiff+0x34>
 8013672:	f856 8b04 	ldr.w	r8, [r6], #4
 8013676:	fa11 f288 	uxtah	r2, r1, r8
 801367a:	1414      	asrs	r4, r2, #16
 801367c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013680:	b292      	uxth	r2, r2
 8013682:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013686:	f84e 2b04 	str.w	r2, [lr], #4
 801368a:	1421      	asrs	r1, r4, #16
 801368c:	e7e0      	b.n	8013650 <__mdiff+0xc8>
 801368e:	3f01      	subs	r7, #1
 8013690:	e7ea      	b.n	8013668 <__mdiff+0xe0>
 8013692:	bf00      	nop
 8013694:	08016ebe 	.word	0x08016ebe
 8013698:	08016ecf 	.word	0x08016ecf

0801369c <__ulp>:
 801369c:	b082      	sub	sp, #8
 801369e:	ed8d 0b00 	vstr	d0, [sp]
 80136a2:	9a01      	ldr	r2, [sp, #4]
 80136a4:	4b0f      	ldr	r3, [pc, #60]	; (80136e4 <__ulp+0x48>)
 80136a6:	4013      	ands	r3, r2
 80136a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	dc08      	bgt.n	80136c2 <__ulp+0x26>
 80136b0:	425b      	negs	r3, r3
 80136b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80136b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80136ba:	da04      	bge.n	80136c6 <__ulp+0x2a>
 80136bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80136c0:	4113      	asrs	r3, r2
 80136c2:	2200      	movs	r2, #0
 80136c4:	e008      	b.n	80136d8 <__ulp+0x3c>
 80136c6:	f1a2 0314 	sub.w	r3, r2, #20
 80136ca:	2b1e      	cmp	r3, #30
 80136cc:	bfda      	itte	le
 80136ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80136d2:	40da      	lsrle	r2, r3
 80136d4:	2201      	movgt	r2, #1
 80136d6:	2300      	movs	r3, #0
 80136d8:	4619      	mov	r1, r3
 80136da:	4610      	mov	r0, r2
 80136dc:	ec41 0b10 	vmov	d0, r0, r1
 80136e0:	b002      	add	sp, #8
 80136e2:	4770      	bx	lr
 80136e4:	7ff00000 	.word	0x7ff00000

080136e8 <__b2d>:
 80136e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ec:	6906      	ldr	r6, [r0, #16]
 80136ee:	f100 0814 	add.w	r8, r0, #20
 80136f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80136f6:	1f37      	subs	r7, r6, #4
 80136f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80136fc:	4610      	mov	r0, r2
 80136fe:	f7ff fd53 	bl	80131a8 <__hi0bits>
 8013702:	f1c0 0320 	rsb	r3, r0, #32
 8013706:	280a      	cmp	r0, #10
 8013708:	600b      	str	r3, [r1, #0]
 801370a:	491b      	ldr	r1, [pc, #108]	; (8013778 <__b2d+0x90>)
 801370c:	dc15      	bgt.n	801373a <__b2d+0x52>
 801370e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013712:	fa22 f30c 	lsr.w	r3, r2, ip
 8013716:	45b8      	cmp	r8, r7
 8013718:	ea43 0501 	orr.w	r5, r3, r1
 801371c:	bf34      	ite	cc
 801371e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013722:	2300      	movcs	r3, #0
 8013724:	3015      	adds	r0, #21
 8013726:	fa02 f000 	lsl.w	r0, r2, r0
 801372a:	fa23 f30c 	lsr.w	r3, r3, ip
 801372e:	4303      	orrs	r3, r0
 8013730:	461c      	mov	r4, r3
 8013732:	ec45 4b10 	vmov	d0, r4, r5
 8013736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801373a:	45b8      	cmp	r8, r7
 801373c:	bf3a      	itte	cc
 801373e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013742:	f1a6 0708 	subcc.w	r7, r6, #8
 8013746:	2300      	movcs	r3, #0
 8013748:	380b      	subs	r0, #11
 801374a:	d012      	beq.n	8013772 <__b2d+0x8a>
 801374c:	f1c0 0120 	rsb	r1, r0, #32
 8013750:	fa23 f401 	lsr.w	r4, r3, r1
 8013754:	4082      	lsls	r2, r0
 8013756:	4322      	orrs	r2, r4
 8013758:	4547      	cmp	r7, r8
 801375a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801375e:	bf8c      	ite	hi
 8013760:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013764:	2200      	movls	r2, #0
 8013766:	4083      	lsls	r3, r0
 8013768:	40ca      	lsrs	r2, r1
 801376a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801376e:	4313      	orrs	r3, r2
 8013770:	e7de      	b.n	8013730 <__b2d+0x48>
 8013772:	ea42 0501 	orr.w	r5, r2, r1
 8013776:	e7db      	b.n	8013730 <__b2d+0x48>
 8013778:	3ff00000 	.word	0x3ff00000

0801377c <__d2b>:
 801377c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013780:	460f      	mov	r7, r1
 8013782:	2101      	movs	r1, #1
 8013784:	ec59 8b10 	vmov	r8, r9, d0
 8013788:	4616      	mov	r6, r2
 801378a:	f7ff fc1b 	bl	8012fc4 <_Balloc>
 801378e:	4604      	mov	r4, r0
 8013790:	b930      	cbnz	r0, 80137a0 <__d2b+0x24>
 8013792:	4602      	mov	r2, r0
 8013794:	4b24      	ldr	r3, [pc, #144]	; (8013828 <__d2b+0xac>)
 8013796:	4825      	ldr	r0, [pc, #148]	; (801382c <__d2b+0xb0>)
 8013798:	f240 310f 	movw	r1, #783	; 0x30f
 801379c:	f7fd fa36 	bl	8010c0c <__assert_func>
 80137a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80137a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80137a8:	bb2d      	cbnz	r5, 80137f6 <__d2b+0x7a>
 80137aa:	9301      	str	r3, [sp, #4]
 80137ac:	f1b8 0300 	subs.w	r3, r8, #0
 80137b0:	d026      	beq.n	8013800 <__d2b+0x84>
 80137b2:	4668      	mov	r0, sp
 80137b4:	9300      	str	r3, [sp, #0]
 80137b6:	f7ff fd17 	bl	80131e8 <__lo0bits>
 80137ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80137be:	b1e8      	cbz	r0, 80137fc <__d2b+0x80>
 80137c0:	f1c0 0320 	rsb	r3, r0, #32
 80137c4:	fa02 f303 	lsl.w	r3, r2, r3
 80137c8:	430b      	orrs	r3, r1
 80137ca:	40c2      	lsrs	r2, r0
 80137cc:	6163      	str	r3, [r4, #20]
 80137ce:	9201      	str	r2, [sp, #4]
 80137d0:	9b01      	ldr	r3, [sp, #4]
 80137d2:	61a3      	str	r3, [r4, #24]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	bf14      	ite	ne
 80137d8:	2202      	movne	r2, #2
 80137da:	2201      	moveq	r2, #1
 80137dc:	6122      	str	r2, [r4, #16]
 80137de:	b1bd      	cbz	r5, 8013810 <__d2b+0x94>
 80137e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80137e4:	4405      	add	r5, r0
 80137e6:	603d      	str	r5, [r7, #0]
 80137e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80137ec:	6030      	str	r0, [r6, #0]
 80137ee:	4620      	mov	r0, r4
 80137f0:	b003      	add	sp, #12
 80137f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80137fa:	e7d6      	b.n	80137aa <__d2b+0x2e>
 80137fc:	6161      	str	r1, [r4, #20]
 80137fe:	e7e7      	b.n	80137d0 <__d2b+0x54>
 8013800:	a801      	add	r0, sp, #4
 8013802:	f7ff fcf1 	bl	80131e8 <__lo0bits>
 8013806:	9b01      	ldr	r3, [sp, #4]
 8013808:	6163      	str	r3, [r4, #20]
 801380a:	3020      	adds	r0, #32
 801380c:	2201      	movs	r2, #1
 801380e:	e7e5      	b.n	80137dc <__d2b+0x60>
 8013810:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013814:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013818:	6038      	str	r0, [r7, #0]
 801381a:	6918      	ldr	r0, [r3, #16]
 801381c:	f7ff fcc4 	bl	80131a8 <__hi0bits>
 8013820:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013824:	e7e2      	b.n	80137ec <__d2b+0x70>
 8013826:	bf00      	nop
 8013828:	08016ebe 	.word	0x08016ebe
 801382c:	08016ecf 	.word	0x08016ecf

08013830 <__ratio>:
 8013830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013834:	4688      	mov	r8, r1
 8013836:	4669      	mov	r1, sp
 8013838:	4681      	mov	r9, r0
 801383a:	f7ff ff55 	bl	80136e8 <__b2d>
 801383e:	a901      	add	r1, sp, #4
 8013840:	4640      	mov	r0, r8
 8013842:	ec55 4b10 	vmov	r4, r5, d0
 8013846:	f7ff ff4f 	bl	80136e8 <__b2d>
 801384a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801384e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013852:	eba3 0c02 	sub.w	ip, r3, r2
 8013856:	e9dd 3200 	ldrd	r3, r2, [sp]
 801385a:	1a9b      	subs	r3, r3, r2
 801385c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013860:	ec51 0b10 	vmov	r0, r1, d0
 8013864:	2b00      	cmp	r3, #0
 8013866:	bfd6      	itet	le
 8013868:	460a      	movle	r2, r1
 801386a:	462a      	movgt	r2, r5
 801386c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013870:	468b      	mov	fp, r1
 8013872:	462f      	mov	r7, r5
 8013874:	bfd4      	ite	le
 8013876:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801387a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801387e:	4620      	mov	r0, r4
 8013880:	ee10 2a10 	vmov	r2, s0
 8013884:	465b      	mov	r3, fp
 8013886:	4639      	mov	r1, r7
 8013888:	f7ec ffe0 	bl	800084c <__aeabi_ddiv>
 801388c:	ec41 0b10 	vmov	d0, r0, r1
 8013890:	b003      	add	sp, #12
 8013892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013896 <__copybits>:
 8013896:	3901      	subs	r1, #1
 8013898:	b570      	push	{r4, r5, r6, lr}
 801389a:	1149      	asrs	r1, r1, #5
 801389c:	6914      	ldr	r4, [r2, #16]
 801389e:	3101      	adds	r1, #1
 80138a0:	f102 0314 	add.w	r3, r2, #20
 80138a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80138a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80138ac:	1f05      	subs	r5, r0, #4
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	d30c      	bcc.n	80138cc <__copybits+0x36>
 80138b2:	1aa3      	subs	r3, r4, r2
 80138b4:	3b11      	subs	r3, #17
 80138b6:	f023 0303 	bic.w	r3, r3, #3
 80138ba:	3211      	adds	r2, #17
 80138bc:	42a2      	cmp	r2, r4
 80138be:	bf88      	it	hi
 80138c0:	2300      	movhi	r3, #0
 80138c2:	4418      	add	r0, r3
 80138c4:	2300      	movs	r3, #0
 80138c6:	4288      	cmp	r0, r1
 80138c8:	d305      	bcc.n	80138d6 <__copybits+0x40>
 80138ca:	bd70      	pop	{r4, r5, r6, pc}
 80138cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80138d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80138d4:	e7eb      	b.n	80138ae <__copybits+0x18>
 80138d6:	f840 3b04 	str.w	r3, [r0], #4
 80138da:	e7f4      	b.n	80138c6 <__copybits+0x30>

080138dc <__any_on>:
 80138dc:	f100 0214 	add.w	r2, r0, #20
 80138e0:	6900      	ldr	r0, [r0, #16]
 80138e2:	114b      	asrs	r3, r1, #5
 80138e4:	4298      	cmp	r0, r3
 80138e6:	b510      	push	{r4, lr}
 80138e8:	db11      	blt.n	801390e <__any_on+0x32>
 80138ea:	dd0a      	ble.n	8013902 <__any_on+0x26>
 80138ec:	f011 011f 	ands.w	r1, r1, #31
 80138f0:	d007      	beq.n	8013902 <__any_on+0x26>
 80138f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80138f6:	fa24 f001 	lsr.w	r0, r4, r1
 80138fa:	fa00 f101 	lsl.w	r1, r0, r1
 80138fe:	428c      	cmp	r4, r1
 8013900:	d10b      	bne.n	801391a <__any_on+0x3e>
 8013902:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013906:	4293      	cmp	r3, r2
 8013908:	d803      	bhi.n	8013912 <__any_on+0x36>
 801390a:	2000      	movs	r0, #0
 801390c:	bd10      	pop	{r4, pc}
 801390e:	4603      	mov	r3, r0
 8013910:	e7f7      	b.n	8013902 <__any_on+0x26>
 8013912:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013916:	2900      	cmp	r1, #0
 8013918:	d0f5      	beq.n	8013906 <__any_on+0x2a>
 801391a:	2001      	movs	r0, #1
 801391c:	e7f6      	b.n	801390c <__any_on+0x30>

0801391e <sulp>:
 801391e:	b570      	push	{r4, r5, r6, lr}
 8013920:	4604      	mov	r4, r0
 8013922:	460d      	mov	r5, r1
 8013924:	ec45 4b10 	vmov	d0, r4, r5
 8013928:	4616      	mov	r6, r2
 801392a:	f7ff feb7 	bl	801369c <__ulp>
 801392e:	ec51 0b10 	vmov	r0, r1, d0
 8013932:	b17e      	cbz	r6, 8013954 <sulp+0x36>
 8013934:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013938:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801393c:	2b00      	cmp	r3, #0
 801393e:	dd09      	ble.n	8013954 <sulp+0x36>
 8013940:	051b      	lsls	r3, r3, #20
 8013942:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013946:	2400      	movs	r4, #0
 8013948:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801394c:	4622      	mov	r2, r4
 801394e:	462b      	mov	r3, r5
 8013950:	f7ec fe52 	bl	80005f8 <__aeabi_dmul>
 8013954:	bd70      	pop	{r4, r5, r6, pc}
	...

08013958 <_strtod_l>:
 8013958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801395c:	ed2d 8b02 	vpush	{d8}
 8013960:	b09b      	sub	sp, #108	; 0x6c
 8013962:	4604      	mov	r4, r0
 8013964:	9213      	str	r2, [sp, #76]	; 0x4c
 8013966:	2200      	movs	r2, #0
 8013968:	9216      	str	r2, [sp, #88]	; 0x58
 801396a:	460d      	mov	r5, r1
 801396c:	f04f 0800 	mov.w	r8, #0
 8013970:	f04f 0900 	mov.w	r9, #0
 8013974:	460a      	mov	r2, r1
 8013976:	9215      	str	r2, [sp, #84]	; 0x54
 8013978:	7811      	ldrb	r1, [r2, #0]
 801397a:	292b      	cmp	r1, #43	; 0x2b
 801397c:	d04c      	beq.n	8013a18 <_strtod_l+0xc0>
 801397e:	d83a      	bhi.n	80139f6 <_strtod_l+0x9e>
 8013980:	290d      	cmp	r1, #13
 8013982:	d834      	bhi.n	80139ee <_strtod_l+0x96>
 8013984:	2908      	cmp	r1, #8
 8013986:	d834      	bhi.n	80139f2 <_strtod_l+0x9a>
 8013988:	2900      	cmp	r1, #0
 801398a:	d03d      	beq.n	8013a08 <_strtod_l+0xb0>
 801398c:	2200      	movs	r2, #0
 801398e:	920a      	str	r2, [sp, #40]	; 0x28
 8013990:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013992:	7832      	ldrb	r2, [r6, #0]
 8013994:	2a30      	cmp	r2, #48	; 0x30
 8013996:	f040 80b4 	bne.w	8013b02 <_strtod_l+0x1aa>
 801399a:	7872      	ldrb	r2, [r6, #1]
 801399c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80139a0:	2a58      	cmp	r2, #88	; 0x58
 80139a2:	d170      	bne.n	8013a86 <_strtod_l+0x12e>
 80139a4:	9302      	str	r3, [sp, #8]
 80139a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139a8:	9301      	str	r3, [sp, #4]
 80139aa:	ab16      	add	r3, sp, #88	; 0x58
 80139ac:	9300      	str	r3, [sp, #0]
 80139ae:	4a8e      	ldr	r2, [pc, #568]	; (8013be8 <_strtod_l+0x290>)
 80139b0:	ab17      	add	r3, sp, #92	; 0x5c
 80139b2:	a915      	add	r1, sp, #84	; 0x54
 80139b4:	4620      	mov	r0, r4
 80139b6:	f001 faf1 	bl	8014f9c <__gethex>
 80139ba:	f010 070f 	ands.w	r7, r0, #15
 80139be:	4605      	mov	r5, r0
 80139c0:	d005      	beq.n	80139ce <_strtod_l+0x76>
 80139c2:	2f06      	cmp	r7, #6
 80139c4:	d12a      	bne.n	8013a1c <_strtod_l+0xc4>
 80139c6:	3601      	adds	r6, #1
 80139c8:	2300      	movs	r3, #0
 80139ca:	9615      	str	r6, [sp, #84]	; 0x54
 80139cc:	930a      	str	r3, [sp, #40]	; 0x28
 80139ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f040 857f 	bne.w	80144d4 <_strtod_l+0xb7c>
 80139d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139d8:	b1db      	cbz	r3, 8013a12 <_strtod_l+0xba>
 80139da:	4642      	mov	r2, r8
 80139dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80139e0:	ec43 2b10 	vmov	d0, r2, r3
 80139e4:	b01b      	add	sp, #108	; 0x6c
 80139e6:	ecbd 8b02 	vpop	{d8}
 80139ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ee:	2920      	cmp	r1, #32
 80139f0:	d1cc      	bne.n	801398c <_strtod_l+0x34>
 80139f2:	3201      	adds	r2, #1
 80139f4:	e7bf      	b.n	8013976 <_strtod_l+0x1e>
 80139f6:	292d      	cmp	r1, #45	; 0x2d
 80139f8:	d1c8      	bne.n	801398c <_strtod_l+0x34>
 80139fa:	2101      	movs	r1, #1
 80139fc:	910a      	str	r1, [sp, #40]	; 0x28
 80139fe:	1c51      	adds	r1, r2, #1
 8013a00:	9115      	str	r1, [sp, #84]	; 0x54
 8013a02:	7852      	ldrb	r2, [r2, #1]
 8013a04:	2a00      	cmp	r2, #0
 8013a06:	d1c3      	bne.n	8013990 <_strtod_l+0x38>
 8013a08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a0a:	9515      	str	r5, [sp, #84]	; 0x54
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	f040 855f 	bne.w	80144d0 <_strtod_l+0xb78>
 8013a12:	4642      	mov	r2, r8
 8013a14:	464b      	mov	r3, r9
 8013a16:	e7e3      	b.n	80139e0 <_strtod_l+0x88>
 8013a18:	2100      	movs	r1, #0
 8013a1a:	e7ef      	b.n	80139fc <_strtod_l+0xa4>
 8013a1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013a1e:	b13a      	cbz	r2, 8013a30 <_strtod_l+0xd8>
 8013a20:	2135      	movs	r1, #53	; 0x35
 8013a22:	a818      	add	r0, sp, #96	; 0x60
 8013a24:	f7ff ff37 	bl	8013896 <__copybits>
 8013a28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f7ff fb0a 	bl	8013044 <_Bfree>
 8013a30:	3f01      	subs	r7, #1
 8013a32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013a34:	2f04      	cmp	r7, #4
 8013a36:	d806      	bhi.n	8013a46 <_strtod_l+0xee>
 8013a38:	e8df f007 	tbb	[pc, r7]
 8013a3c:	201d0314 	.word	0x201d0314
 8013a40:	14          	.byte	0x14
 8013a41:	00          	.byte	0x00
 8013a42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8013a46:	05e9      	lsls	r1, r5, #23
 8013a48:	bf48      	it	mi
 8013a4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013a4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013a52:	0d1b      	lsrs	r3, r3, #20
 8013a54:	051b      	lsls	r3, r3, #20
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1b9      	bne.n	80139ce <_strtod_l+0x76>
 8013a5a:	f7fe faed 	bl	8012038 <__errno>
 8013a5e:	2322      	movs	r3, #34	; 0x22
 8013a60:	6003      	str	r3, [r0, #0]
 8013a62:	e7b4      	b.n	80139ce <_strtod_l+0x76>
 8013a64:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013a68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013a70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013a74:	e7e7      	b.n	8013a46 <_strtod_l+0xee>
 8013a76:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013bf0 <_strtod_l+0x298>
 8013a7a:	e7e4      	b.n	8013a46 <_strtod_l+0xee>
 8013a7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013a80:	f04f 38ff 	mov.w	r8, #4294967295
 8013a84:	e7df      	b.n	8013a46 <_strtod_l+0xee>
 8013a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a88:	1c5a      	adds	r2, r3, #1
 8013a8a:	9215      	str	r2, [sp, #84]	; 0x54
 8013a8c:	785b      	ldrb	r3, [r3, #1]
 8013a8e:	2b30      	cmp	r3, #48	; 0x30
 8013a90:	d0f9      	beq.n	8013a86 <_strtod_l+0x12e>
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d09b      	beq.n	80139ce <_strtod_l+0x76>
 8013a96:	2301      	movs	r3, #1
 8013a98:	f04f 0a00 	mov.w	sl, #0
 8013a9c:	9304      	str	r3, [sp, #16]
 8013a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aa2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013aa6:	46d3      	mov	fp, sl
 8013aa8:	220a      	movs	r2, #10
 8013aaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013aac:	7806      	ldrb	r6, [r0, #0]
 8013aae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013ab2:	b2d9      	uxtb	r1, r3
 8013ab4:	2909      	cmp	r1, #9
 8013ab6:	d926      	bls.n	8013b06 <_strtod_l+0x1ae>
 8013ab8:	494c      	ldr	r1, [pc, #304]	; (8013bec <_strtod_l+0x294>)
 8013aba:	2201      	movs	r2, #1
 8013abc:	f7fe f9da 	bl	8011e74 <strncmp>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d030      	beq.n	8013b26 <_strtod_l+0x1ce>
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	4632      	mov	r2, r6
 8013ac8:	9005      	str	r0, [sp, #20]
 8013aca:	465e      	mov	r6, fp
 8013acc:	4603      	mov	r3, r0
 8013ace:	2a65      	cmp	r2, #101	; 0x65
 8013ad0:	d001      	beq.n	8013ad6 <_strtod_l+0x17e>
 8013ad2:	2a45      	cmp	r2, #69	; 0x45
 8013ad4:	d113      	bne.n	8013afe <_strtod_l+0x1a6>
 8013ad6:	b91e      	cbnz	r6, 8013ae0 <_strtod_l+0x188>
 8013ad8:	9a04      	ldr	r2, [sp, #16]
 8013ada:	4302      	orrs	r2, r0
 8013adc:	d094      	beq.n	8013a08 <_strtod_l+0xb0>
 8013ade:	2600      	movs	r6, #0
 8013ae0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013ae2:	1c6a      	adds	r2, r5, #1
 8013ae4:	9215      	str	r2, [sp, #84]	; 0x54
 8013ae6:	786a      	ldrb	r2, [r5, #1]
 8013ae8:	2a2b      	cmp	r2, #43	; 0x2b
 8013aea:	d074      	beq.n	8013bd6 <_strtod_l+0x27e>
 8013aec:	2a2d      	cmp	r2, #45	; 0x2d
 8013aee:	d078      	beq.n	8013be2 <_strtod_l+0x28a>
 8013af0:	f04f 0c00 	mov.w	ip, #0
 8013af4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013af8:	2909      	cmp	r1, #9
 8013afa:	d97f      	bls.n	8013bfc <_strtod_l+0x2a4>
 8013afc:	9515      	str	r5, [sp, #84]	; 0x54
 8013afe:	2700      	movs	r7, #0
 8013b00:	e09e      	b.n	8013c40 <_strtod_l+0x2e8>
 8013b02:	2300      	movs	r3, #0
 8013b04:	e7c8      	b.n	8013a98 <_strtod_l+0x140>
 8013b06:	f1bb 0f08 	cmp.w	fp, #8
 8013b0a:	bfd8      	it	le
 8013b0c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013b0e:	f100 0001 	add.w	r0, r0, #1
 8013b12:	bfda      	itte	le
 8013b14:	fb02 3301 	mlale	r3, r2, r1, r3
 8013b18:	9309      	strle	r3, [sp, #36]	; 0x24
 8013b1a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013b1e:	f10b 0b01 	add.w	fp, fp, #1
 8013b22:	9015      	str	r0, [sp, #84]	; 0x54
 8013b24:	e7c1      	b.n	8013aaa <_strtod_l+0x152>
 8013b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b28:	1c5a      	adds	r2, r3, #1
 8013b2a:	9215      	str	r2, [sp, #84]	; 0x54
 8013b2c:	785a      	ldrb	r2, [r3, #1]
 8013b2e:	f1bb 0f00 	cmp.w	fp, #0
 8013b32:	d037      	beq.n	8013ba4 <_strtod_l+0x24c>
 8013b34:	9005      	str	r0, [sp, #20]
 8013b36:	465e      	mov	r6, fp
 8013b38:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013b3c:	2b09      	cmp	r3, #9
 8013b3e:	d912      	bls.n	8013b66 <_strtod_l+0x20e>
 8013b40:	2301      	movs	r3, #1
 8013b42:	e7c4      	b.n	8013ace <_strtod_l+0x176>
 8013b44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b46:	1c5a      	adds	r2, r3, #1
 8013b48:	9215      	str	r2, [sp, #84]	; 0x54
 8013b4a:	785a      	ldrb	r2, [r3, #1]
 8013b4c:	3001      	adds	r0, #1
 8013b4e:	2a30      	cmp	r2, #48	; 0x30
 8013b50:	d0f8      	beq.n	8013b44 <_strtod_l+0x1ec>
 8013b52:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013b56:	2b08      	cmp	r3, #8
 8013b58:	f200 84c1 	bhi.w	80144de <_strtod_l+0xb86>
 8013b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b5e:	9005      	str	r0, [sp, #20]
 8013b60:	2000      	movs	r0, #0
 8013b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b64:	4606      	mov	r6, r0
 8013b66:	3a30      	subs	r2, #48	; 0x30
 8013b68:	f100 0301 	add.w	r3, r0, #1
 8013b6c:	d014      	beq.n	8013b98 <_strtod_l+0x240>
 8013b6e:	9905      	ldr	r1, [sp, #20]
 8013b70:	4419      	add	r1, r3
 8013b72:	9105      	str	r1, [sp, #20]
 8013b74:	4633      	mov	r3, r6
 8013b76:	eb00 0c06 	add.w	ip, r0, r6
 8013b7a:	210a      	movs	r1, #10
 8013b7c:	4563      	cmp	r3, ip
 8013b7e:	d113      	bne.n	8013ba8 <_strtod_l+0x250>
 8013b80:	1833      	adds	r3, r6, r0
 8013b82:	2b08      	cmp	r3, #8
 8013b84:	f106 0601 	add.w	r6, r6, #1
 8013b88:	4406      	add	r6, r0
 8013b8a:	dc1a      	bgt.n	8013bc2 <_strtod_l+0x26a>
 8013b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b8e:	230a      	movs	r3, #10
 8013b90:	fb03 2301 	mla	r3, r3, r1, r2
 8013b94:	9309      	str	r3, [sp, #36]	; 0x24
 8013b96:	2300      	movs	r3, #0
 8013b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013b9a:	1c51      	adds	r1, r2, #1
 8013b9c:	9115      	str	r1, [sp, #84]	; 0x54
 8013b9e:	7852      	ldrb	r2, [r2, #1]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	e7c9      	b.n	8013b38 <_strtod_l+0x1e0>
 8013ba4:	4658      	mov	r0, fp
 8013ba6:	e7d2      	b.n	8013b4e <_strtod_l+0x1f6>
 8013ba8:	2b08      	cmp	r3, #8
 8013baa:	f103 0301 	add.w	r3, r3, #1
 8013bae:	dc03      	bgt.n	8013bb8 <_strtod_l+0x260>
 8013bb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013bb2:	434f      	muls	r7, r1
 8013bb4:	9709      	str	r7, [sp, #36]	; 0x24
 8013bb6:	e7e1      	b.n	8013b7c <_strtod_l+0x224>
 8013bb8:	2b10      	cmp	r3, #16
 8013bba:	bfd8      	it	le
 8013bbc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013bc0:	e7dc      	b.n	8013b7c <_strtod_l+0x224>
 8013bc2:	2e10      	cmp	r6, #16
 8013bc4:	bfdc      	itt	le
 8013bc6:	230a      	movle	r3, #10
 8013bc8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013bcc:	e7e3      	b.n	8013b96 <_strtod_l+0x23e>
 8013bce:	2300      	movs	r3, #0
 8013bd0:	9305      	str	r3, [sp, #20]
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	e780      	b.n	8013ad8 <_strtod_l+0x180>
 8013bd6:	f04f 0c00 	mov.w	ip, #0
 8013bda:	1caa      	adds	r2, r5, #2
 8013bdc:	9215      	str	r2, [sp, #84]	; 0x54
 8013bde:	78aa      	ldrb	r2, [r5, #2]
 8013be0:	e788      	b.n	8013af4 <_strtod_l+0x19c>
 8013be2:	f04f 0c01 	mov.w	ip, #1
 8013be6:	e7f8      	b.n	8013bda <_strtod_l+0x282>
 8013be8:	08017028 	.word	0x08017028
 8013bec:	08017024 	.word	0x08017024
 8013bf0:	7ff00000 	.word	0x7ff00000
 8013bf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013bf6:	1c51      	adds	r1, r2, #1
 8013bf8:	9115      	str	r1, [sp, #84]	; 0x54
 8013bfa:	7852      	ldrb	r2, [r2, #1]
 8013bfc:	2a30      	cmp	r2, #48	; 0x30
 8013bfe:	d0f9      	beq.n	8013bf4 <_strtod_l+0x29c>
 8013c00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013c04:	2908      	cmp	r1, #8
 8013c06:	f63f af7a 	bhi.w	8013afe <_strtod_l+0x1a6>
 8013c0a:	3a30      	subs	r2, #48	; 0x30
 8013c0c:	9208      	str	r2, [sp, #32]
 8013c0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c10:	920c      	str	r2, [sp, #48]	; 0x30
 8013c12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c14:	1c57      	adds	r7, r2, #1
 8013c16:	9715      	str	r7, [sp, #84]	; 0x54
 8013c18:	7852      	ldrb	r2, [r2, #1]
 8013c1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013c1e:	f1be 0f09 	cmp.w	lr, #9
 8013c22:	d938      	bls.n	8013c96 <_strtod_l+0x33e>
 8013c24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013c26:	1a7f      	subs	r7, r7, r1
 8013c28:	2f08      	cmp	r7, #8
 8013c2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013c2e:	dc03      	bgt.n	8013c38 <_strtod_l+0x2e0>
 8013c30:	9908      	ldr	r1, [sp, #32]
 8013c32:	428f      	cmp	r7, r1
 8013c34:	bfa8      	it	ge
 8013c36:	460f      	movge	r7, r1
 8013c38:	f1bc 0f00 	cmp.w	ip, #0
 8013c3c:	d000      	beq.n	8013c40 <_strtod_l+0x2e8>
 8013c3e:	427f      	negs	r7, r7
 8013c40:	2e00      	cmp	r6, #0
 8013c42:	d14f      	bne.n	8013ce4 <_strtod_l+0x38c>
 8013c44:	9904      	ldr	r1, [sp, #16]
 8013c46:	4301      	orrs	r1, r0
 8013c48:	f47f aec1 	bne.w	80139ce <_strtod_l+0x76>
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f47f aedb 	bne.w	8013a08 <_strtod_l+0xb0>
 8013c52:	2a69      	cmp	r2, #105	; 0x69
 8013c54:	d029      	beq.n	8013caa <_strtod_l+0x352>
 8013c56:	dc26      	bgt.n	8013ca6 <_strtod_l+0x34e>
 8013c58:	2a49      	cmp	r2, #73	; 0x49
 8013c5a:	d026      	beq.n	8013caa <_strtod_l+0x352>
 8013c5c:	2a4e      	cmp	r2, #78	; 0x4e
 8013c5e:	f47f aed3 	bne.w	8013a08 <_strtod_l+0xb0>
 8013c62:	499b      	ldr	r1, [pc, #620]	; (8013ed0 <_strtod_l+0x578>)
 8013c64:	a815      	add	r0, sp, #84	; 0x54
 8013c66:	f001 fbd9 	bl	801541c <__match>
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	f43f aecc 	beq.w	8013a08 <_strtod_l+0xb0>
 8013c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	2b28      	cmp	r3, #40	; 0x28
 8013c76:	d12f      	bne.n	8013cd8 <_strtod_l+0x380>
 8013c78:	4996      	ldr	r1, [pc, #600]	; (8013ed4 <_strtod_l+0x57c>)
 8013c7a:	aa18      	add	r2, sp, #96	; 0x60
 8013c7c:	a815      	add	r0, sp, #84	; 0x54
 8013c7e:	f001 fbe1 	bl	8015444 <__hexnan>
 8013c82:	2805      	cmp	r0, #5
 8013c84:	d128      	bne.n	8013cd8 <_strtod_l+0x380>
 8013c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013c8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013c90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013c94:	e69b      	b.n	80139ce <_strtod_l+0x76>
 8013c96:	9f08      	ldr	r7, [sp, #32]
 8013c98:	210a      	movs	r1, #10
 8013c9a:	fb01 2107 	mla	r1, r1, r7, r2
 8013c9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013ca2:	9208      	str	r2, [sp, #32]
 8013ca4:	e7b5      	b.n	8013c12 <_strtod_l+0x2ba>
 8013ca6:	2a6e      	cmp	r2, #110	; 0x6e
 8013ca8:	e7d9      	b.n	8013c5e <_strtod_l+0x306>
 8013caa:	498b      	ldr	r1, [pc, #556]	; (8013ed8 <_strtod_l+0x580>)
 8013cac:	a815      	add	r0, sp, #84	; 0x54
 8013cae:	f001 fbb5 	bl	801541c <__match>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	f43f aea8 	beq.w	8013a08 <_strtod_l+0xb0>
 8013cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cba:	4988      	ldr	r1, [pc, #544]	; (8013edc <_strtod_l+0x584>)
 8013cbc:	3b01      	subs	r3, #1
 8013cbe:	a815      	add	r0, sp, #84	; 0x54
 8013cc0:	9315      	str	r3, [sp, #84]	; 0x54
 8013cc2:	f001 fbab 	bl	801541c <__match>
 8013cc6:	b910      	cbnz	r0, 8013cce <_strtod_l+0x376>
 8013cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cca:	3301      	adds	r3, #1
 8013ccc:	9315      	str	r3, [sp, #84]	; 0x54
 8013cce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013eec <_strtod_l+0x594>
 8013cd2:	f04f 0800 	mov.w	r8, #0
 8013cd6:	e67a      	b.n	80139ce <_strtod_l+0x76>
 8013cd8:	4881      	ldr	r0, [pc, #516]	; (8013ee0 <_strtod_l+0x588>)
 8013cda:	f001 f8d9 	bl	8014e90 <nan>
 8013cde:	ec59 8b10 	vmov	r8, r9, d0
 8013ce2:	e674      	b.n	80139ce <_strtod_l+0x76>
 8013ce4:	9b05      	ldr	r3, [sp, #20]
 8013ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ce8:	1afb      	subs	r3, r7, r3
 8013cea:	f1bb 0f00 	cmp.w	fp, #0
 8013cee:	bf08      	it	eq
 8013cf0:	46b3      	moveq	fp, r6
 8013cf2:	2e10      	cmp	r6, #16
 8013cf4:	9308      	str	r3, [sp, #32]
 8013cf6:	4635      	mov	r5, r6
 8013cf8:	bfa8      	it	ge
 8013cfa:	2510      	movge	r5, #16
 8013cfc:	f7ec fc02 	bl	8000504 <__aeabi_ui2d>
 8013d00:	2e09      	cmp	r6, #9
 8013d02:	4680      	mov	r8, r0
 8013d04:	4689      	mov	r9, r1
 8013d06:	dd13      	ble.n	8013d30 <_strtod_l+0x3d8>
 8013d08:	4b76      	ldr	r3, [pc, #472]	; (8013ee4 <_strtod_l+0x58c>)
 8013d0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013d0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013d12:	f7ec fc71 	bl	80005f8 <__aeabi_dmul>
 8013d16:	4680      	mov	r8, r0
 8013d18:	4650      	mov	r0, sl
 8013d1a:	4689      	mov	r9, r1
 8013d1c:	f7ec fbf2 	bl	8000504 <__aeabi_ui2d>
 8013d20:	4602      	mov	r2, r0
 8013d22:	460b      	mov	r3, r1
 8013d24:	4640      	mov	r0, r8
 8013d26:	4649      	mov	r1, r9
 8013d28:	f7ec fab0 	bl	800028c <__adddf3>
 8013d2c:	4680      	mov	r8, r0
 8013d2e:	4689      	mov	r9, r1
 8013d30:	2e0f      	cmp	r6, #15
 8013d32:	dc38      	bgt.n	8013da6 <_strtod_l+0x44e>
 8013d34:	9b08      	ldr	r3, [sp, #32]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f43f ae49 	beq.w	80139ce <_strtod_l+0x76>
 8013d3c:	dd24      	ble.n	8013d88 <_strtod_l+0x430>
 8013d3e:	2b16      	cmp	r3, #22
 8013d40:	dc0b      	bgt.n	8013d5a <_strtod_l+0x402>
 8013d42:	4968      	ldr	r1, [pc, #416]	; (8013ee4 <_strtod_l+0x58c>)
 8013d44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d4c:	4642      	mov	r2, r8
 8013d4e:	464b      	mov	r3, r9
 8013d50:	f7ec fc52 	bl	80005f8 <__aeabi_dmul>
 8013d54:	4680      	mov	r8, r0
 8013d56:	4689      	mov	r9, r1
 8013d58:	e639      	b.n	80139ce <_strtod_l+0x76>
 8013d5a:	9a08      	ldr	r2, [sp, #32]
 8013d5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013d60:	4293      	cmp	r3, r2
 8013d62:	db20      	blt.n	8013da6 <_strtod_l+0x44e>
 8013d64:	4c5f      	ldr	r4, [pc, #380]	; (8013ee4 <_strtod_l+0x58c>)
 8013d66:	f1c6 060f 	rsb	r6, r6, #15
 8013d6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013d6e:	4642      	mov	r2, r8
 8013d70:	464b      	mov	r3, r9
 8013d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d76:	f7ec fc3f 	bl	80005f8 <__aeabi_dmul>
 8013d7a:	9b08      	ldr	r3, [sp, #32]
 8013d7c:	1b9e      	subs	r6, r3, r6
 8013d7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013d82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013d86:	e7e3      	b.n	8013d50 <_strtod_l+0x3f8>
 8013d88:	9b08      	ldr	r3, [sp, #32]
 8013d8a:	3316      	adds	r3, #22
 8013d8c:	db0b      	blt.n	8013da6 <_strtod_l+0x44e>
 8013d8e:	9b05      	ldr	r3, [sp, #20]
 8013d90:	1bdf      	subs	r7, r3, r7
 8013d92:	4b54      	ldr	r3, [pc, #336]	; (8013ee4 <_strtod_l+0x58c>)
 8013d94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d9c:	4640      	mov	r0, r8
 8013d9e:	4649      	mov	r1, r9
 8013da0:	f7ec fd54 	bl	800084c <__aeabi_ddiv>
 8013da4:	e7d6      	b.n	8013d54 <_strtod_l+0x3fc>
 8013da6:	9b08      	ldr	r3, [sp, #32]
 8013da8:	1b75      	subs	r5, r6, r5
 8013daa:	441d      	add	r5, r3
 8013dac:	2d00      	cmp	r5, #0
 8013dae:	dd70      	ble.n	8013e92 <_strtod_l+0x53a>
 8013db0:	f015 030f 	ands.w	r3, r5, #15
 8013db4:	d00a      	beq.n	8013dcc <_strtod_l+0x474>
 8013db6:	494b      	ldr	r1, [pc, #300]	; (8013ee4 <_strtod_l+0x58c>)
 8013db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013dbc:	4642      	mov	r2, r8
 8013dbe:	464b      	mov	r3, r9
 8013dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dc4:	f7ec fc18 	bl	80005f8 <__aeabi_dmul>
 8013dc8:	4680      	mov	r8, r0
 8013dca:	4689      	mov	r9, r1
 8013dcc:	f035 050f 	bics.w	r5, r5, #15
 8013dd0:	d04d      	beq.n	8013e6e <_strtod_l+0x516>
 8013dd2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013dd6:	dd22      	ble.n	8013e1e <_strtod_l+0x4c6>
 8013dd8:	2500      	movs	r5, #0
 8013dda:	46ab      	mov	fp, r5
 8013ddc:	9509      	str	r5, [sp, #36]	; 0x24
 8013dde:	9505      	str	r5, [sp, #20]
 8013de0:	2322      	movs	r3, #34	; 0x22
 8013de2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013eec <_strtod_l+0x594>
 8013de6:	6023      	str	r3, [r4, #0]
 8013de8:	f04f 0800 	mov.w	r8, #0
 8013dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	f43f aded 	beq.w	80139ce <_strtod_l+0x76>
 8013df4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013df6:	4620      	mov	r0, r4
 8013df8:	f7ff f924 	bl	8013044 <_Bfree>
 8013dfc:	9905      	ldr	r1, [sp, #20]
 8013dfe:	4620      	mov	r0, r4
 8013e00:	f7ff f920 	bl	8013044 <_Bfree>
 8013e04:	4659      	mov	r1, fp
 8013e06:	4620      	mov	r0, r4
 8013e08:	f7ff f91c 	bl	8013044 <_Bfree>
 8013e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f7ff f918 	bl	8013044 <_Bfree>
 8013e14:	4629      	mov	r1, r5
 8013e16:	4620      	mov	r0, r4
 8013e18:	f7ff f914 	bl	8013044 <_Bfree>
 8013e1c:	e5d7      	b.n	80139ce <_strtod_l+0x76>
 8013e1e:	4b32      	ldr	r3, [pc, #200]	; (8013ee8 <_strtod_l+0x590>)
 8013e20:	9304      	str	r3, [sp, #16]
 8013e22:	2300      	movs	r3, #0
 8013e24:	112d      	asrs	r5, r5, #4
 8013e26:	4640      	mov	r0, r8
 8013e28:	4649      	mov	r1, r9
 8013e2a:	469a      	mov	sl, r3
 8013e2c:	2d01      	cmp	r5, #1
 8013e2e:	dc21      	bgt.n	8013e74 <_strtod_l+0x51c>
 8013e30:	b10b      	cbz	r3, 8013e36 <_strtod_l+0x4de>
 8013e32:	4680      	mov	r8, r0
 8013e34:	4689      	mov	r9, r1
 8013e36:	492c      	ldr	r1, [pc, #176]	; (8013ee8 <_strtod_l+0x590>)
 8013e38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013e3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013e40:	4642      	mov	r2, r8
 8013e42:	464b      	mov	r3, r9
 8013e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e48:	f7ec fbd6 	bl	80005f8 <__aeabi_dmul>
 8013e4c:	4b27      	ldr	r3, [pc, #156]	; (8013eec <_strtod_l+0x594>)
 8013e4e:	460a      	mov	r2, r1
 8013e50:	400b      	ands	r3, r1
 8013e52:	4927      	ldr	r1, [pc, #156]	; (8013ef0 <_strtod_l+0x598>)
 8013e54:	428b      	cmp	r3, r1
 8013e56:	4680      	mov	r8, r0
 8013e58:	d8be      	bhi.n	8013dd8 <_strtod_l+0x480>
 8013e5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013e5e:	428b      	cmp	r3, r1
 8013e60:	bf86      	itte	hi
 8013e62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013ef4 <_strtod_l+0x59c>
 8013e66:	f04f 38ff 	movhi.w	r8, #4294967295
 8013e6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013e6e:	2300      	movs	r3, #0
 8013e70:	9304      	str	r3, [sp, #16]
 8013e72:	e07b      	b.n	8013f6c <_strtod_l+0x614>
 8013e74:	07ea      	lsls	r2, r5, #31
 8013e76:	d505      	bpl.n	8013e84 <_strtod_l+0x52c>
 8013e78:	9b04      	ldr	r3, [sp, #16]
 8013e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7e:	f7ec fbbb 	bl	80005f8 <__aeabi_dmul>
 8013e82:	2301      	movs	r3, #1
 8013e84:	9a04      	ldr	r2, [sp, #16]
 8013e86:	3208      	adds	r2, #8
 8013e88:	f10a 0a01 	add.w	sl, sl, #1
 8013e8c:	106d      	asrs	r5, r5, #1
 8013e8e:	9204      	str	r2, [sp, #16]
 8013e90:	e7cc      	b.n	8013e2c <_strtod_l+0x4d4>
 8013e92:	d0ec      	beq.n	8013e6e <_strtod_l+0x516>
 8013e94:	426d      	negs	r5, r5
 8013e96:	f015 020f 	ands.w	r2, r5, #15
 8013e9a:	d00a      	beq.n	8013eb2 <_strtod_l+0x55a>
 8013e9c:	4b11      	ldr	r3, [pc, #68]	; (8013ee4 <_strtod_l+0x58c>)
 8013e9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ea2:	4640      	mov	r0, r8
 8013ea4:	4649      	mov	r1, r9
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	f7ec fccf 	bl	800084c <__aeabi_ddiv>
 8013eae:	4680      	mov	r8, r0
 8013eb0:	4689      	mov	r9, r1
 8013eb2:	112d      	asrs	r5, r5, #4
 8013eb4:	d0db      	beq.n	8013e6e <_strtod_l+0x516>
 8013eb6:	2d1f      	cmp	r5, #31
 8013eb8:	dd1e      	ble.n	8013ef8 <_strtod_l+0x5a0>
 8013eba:	2500      	movs	r5, #0
 8013ebc:	46ab      	mov	fp, r5
 8013ebe:	9509      	str	r5, [sp, #36]	; 0x24
 8013ec0:	9505      	str	r5, [sp, #20]
 8013ec2:	2322      	movs	r3, #34	; 0x22
 8013ec4:	f04f 0800 	mov.w	r8, #0
 8013ec8:	f04f 0900 	mov.w	r9, #0
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	e78d      	b.n	8013dec <_strtod_l+0x494>
 8013ed0:	08016dbc 	.word	0x08016dbc
 8013ed4:	0801703c 	.word	0x0801703c
 8013ed8:	08016db4 	.word	0x08016db4
 8013edc:	08016e5c 	.word	0x08016e5c
 8013ee0:	08016dae 	.word	0x08016dae
 8013ee4:	08016f50 	.word	0x08016f50
 8013ee8:	08016f28 	.word	0x08016f28
 8013eec:	7ff00000 	.word	0x7ff00000
 8013ef0:	7ca00000 	.word	0x7ca00000
 8013ef4:	7fefffff 	.word	0x7fefffff
 8013ef8:	f015 0310 	ands.w	r3, r5, #16
 8013efc:	bf18      	it	ne
 8013efe:	236a      	movne	r3, #106	; 0x6a
 8013f00:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80142a4 <_strtod_l+0x94c>
 8013f04:	9304      	str	r3, [sp, #16]
 8013f06:	4640      	mov	r0, r8
 8013f08:	4649      	mov	r1, r9
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	07ea      	lsls	r2, r5, #31
 8013f0e:	d504      	bpl.n	8013f1a <_strtod_l+0x5c2>
 8013f10:	e9da 2300 	ldrd	r2, r3, [sl]
 8013f14:	f7ec fb70 	bl	80005f8 <__aeabi_dmul>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	106d      	asrs	r5, r5, #1
 8013f1c:	f10a 0a08 	add.w	sl, sl, #8
 8013f20:	d1f4      	bne.n	8013f0c <_strtod_l+0x5b4>
 8013f22:	b10b      	cbz	r3, 8013f28 <_strtod_l+0x5d0>
 8013f24:	4680      	mov	r8, r0
 8013f26:	4689      	mov	r9, r1
 8013f28:	9b04      	ldr	r3, [sp, #16]
 8013f2a:	b1bb      	cbz	r3, 8013f5c <_strtod_l+0x604>
 8013f2c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013f30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	4649      	mov	r1, r9
 8013f38:	dd10      	ble.n	8013f5c <_strtod_l+0x604>
 8013f3a:	2b1f      	cmp	r3, #31
 8013f3c:	f340 811e 	ble.w	801417c <_strtod_l+0x824>
 8013f40:	2b34      	cmp	r3, #52	; 0x34
 8013f42:	bfde      	ittt	le
 8013f44:	f04f 33ff 	movle.w	r3, #4294967295
 8013f48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013f4c:	4093      	lslle	r3, r2
 8013f4e:	f04f 0800 	mov.w	r8, #0
 8013f52:	bfcc      	ite	gt
 8013f54:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013f58:	ea03 0901 	andle.w	r9, r3, r1
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	2300      	movs	r3, #0
 8013f60:	4640      	mov	r0, r8
 8013f62:	4649      	mov	r1, r9
 8013f64:	f7ec fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d1a6      	bne.n	8013eba <_strtod_l+0x562>
 8013f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f6e:	9300      	str	r3, [sp, #0]
 8013f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f72:	4633      	mov	r3, r6
 8013f74:	465a      	mov	r2, fp
 8013f76:	4620      	mov	r0, r4
 8013f78:	f7ff f8cc 	bl	8013114 <__s2b>
 8013f7c:	9009      	str	r0, [sp, #36]	; 0x24
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	f43f af2a 	beq.w	8013dd8 <_strtod_l+0x480>
 8013f84:	9a08      	ldr	r2, [sp, #32]
 8013f86:	9b05      	ldr	r3, [sp, #20]
 8013f88:	2a00      	cmp	r2, #0
 8013f8a:	eba3 0307 	sub.w	r3, r3, r7
 8013f8e:	bfa8      	it	ge
 8013f90:	2300      	movge	r3, #0
 8013f92:	930c      	str	r3, [sp, #48]	; 0x30
 8013f94:	2500      	movs	r5, #0
 8013f96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8013f9c:	46ab      	mov	fp, r5
 8013f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	6859      	ldr	r1, [r3, #4]
 8013fa4:	f7ff f80e 	bl	8012fc4 <_Balloc>
 8013fa8:	9005      	str	r0, [sp, #20]
 8013faa:	2800      	cmp	r0, #0
 8013fac:	f43f af18 	beq.w	8013de0 <_strtod_l+0x488>
 8013fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fb2:	691a      	ldr	r2, [r3, #16]
 8013fb4:	3202      	adds	r2, #2
 8013fb6:	f103 010c 	add.w	r1, r3, #12
 8013fba:	0092      	lsls	r2, r2, #2
 8013fbc:	300c      	adds	r0, #12
 8013fbe:	f7fe f868 	bl	8012092 <memcpy>
 8013fc2:	ec49 8b10 	vmov	d0, r8, r9
 8013fc6:	aa18      	add	r2, sp, #96	; 0x60
 8013fc8:	a917      	add	r1, sp, #92	; 0x5c
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f7ff fbd6 	bl	801377c <__d2b>
 8013fd0:	ec49 8b18 	vmov	d8, r8, r9
 8013fd4:	9016      	str	r0, [sp, #88]	; 0x58
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f43f af02 	beq.w	8013de0 <_strtod_l+0x488>
 8013fdc:	2101      	movs	r1, #1
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f7ff f930 	bl	8013244 <__i2b>
 8013fe4:	4683      	mov	fp, r0
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	f43f aefa 	beq.w	8013de0 <_strtod_l+0x488>
 8013fec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013fee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ff0:	2e00      	cmp	r6, #0
 8013ff2:	bfab      	itete	ge
 8013ff4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013ff6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013ff8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013ffa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013ffe:	bfac      	ite	ge
 8014000:	eb06 0a03 	addge.w	sl, r6, r3
 8014004:	1b9f      	sublt	r7, r3, r6
 8014006:	9b04      	ldr	r3, [sp, #16]
 8014008:	1af6      	subs	r6, r6, r3
 801400a:	4416      	add	r6, r2
 801400c:	4ba0      	ldr	r3, [pc, #640]	; (8014290 <_strtod_l+0x938>)
 801400e:	3e01      	subs	r6, #1
 8014010:	429e      	cmp	r6, r3
 8014012:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014016:	f280 80c4 	bge.w	80141a2 <_strtod_l+0x84a>
 801401a:	1b9b      	subs	r3, r3, r6
 801401c:	2b1f      	cmp	r3, #31
 801401e:	eba2 0203 	sub.w	r2, r2, r3
 8014022:	f04f 0101 	mov.w	r1, #1
 8014026:	f300 80b0 	bgt.w	801418a <_strtod_l+0x832>
 801402a:	fa01 f303 	lsl.w	r3, r1, r3
 801402e:	930e      	str	r3, [sp, #56]	; 0x38
 8014030:	2300      	movs	r3, #0
 8014032:	930d      	str	r3, [sp, #52]	; 0x34
 8014034:	eb0a 0602 	add.w	r6, sl, r2
 8014038:	9b04      	ldr	r3, [sp, #16]
 801403a:	45b2      	cmp	sl, r6
 801403c:	4417      	add	r7, r2
 801403e:	441f      	add	r7, r3
 8014040:	4653      	mov	r3, sl
 8014042:	bfa8      	it	ge
 8014044:	4633      	movge	r3, r6
 8014046:	42bb      	cmp	r3, r7
 8014048:	bfa8      	it	ge
 801404a:	463b      	movge	r3, r7
 801404c:	2b00      	cmp	r3, #0
 801404e:	bfc2      	ittt	gt
 8014050:	1af6      	subgt	r6, r6, r3
 8014052:	1aff      	subgt	r7, r7, r3
 8014054:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801405a:	2b00      	cmp	r3, #0
 801405c:	dd17      	ble.n	801408e <_strtod_l+0x736>
 801405e:	4659      	mov	r1, fp
 8014060:	461a      	mov	r2, r3
 8014062:	4620      	mov	r0, r4
 8014064:	f7ff f9ae 	bl	80133c4 <__pow5mult>
 8014068:	4683      	mov	fp, r0
 801406a:	2800      	cmp	r0, #0
 801406c:	f43f aeb8 	beq.w	8013de0 <_strtod_l+0x488>
 8014070:	4601      	mov	r1, r0
 8014072:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014074:	4620      	mov	r0, r4
 8014076:	f7ff f8fb 	bl	8013270 <__multiply>
 801407a:	900b      	str	r0, [sp, #44]	; 0x2c
 801407c:	2800      	cmp	r0, #0
 801407e:	f43f aeaf 	beq.w	8013de0 <_strtod_l+0x488>
 8014082:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014084:	4620      	mov	r0, r4
 8014086:	f7fe ffdd 	bl	8013044 <_Bfree>
 801408a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801408c:	9316      	str	r3, [sp, #88]	; 0x58
 801408e:	2e00      	cmp	r6, #0
 8014090:	f300 808c 	bgt.w	80141ac <_strtod_l+0x854>
 8014094:	9b08      	ldr	r3, [sp, #32]
 8014096:	2b00      	cmp	r3, #0
 8014098:	dd08      	ble.n	80140ac <_strtod_l+0x754>
 801409a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801409c:	9905      	ldr	r1, [sp, #20]
 801409e:	4620      	mov	r0, r4
 80140a0:	f7ff f990 	bl	80133c4 <__pow5mult>
 80140a4:	9005      	str	r0, [sp, #20]
 80140a6:	2800      	cmp	r0, #0
 80140a8:	f43f ae9a 	beq.w	8013de0 <_strtod_l+0x488>
 80140ac:	2f00      	cmp	r7, #0
 80140ae:	dd08      	ble.n	80140c2 <_strtod_l+0x76a>
 80140b0:	9905      	ldr	r1, [sp, #20]
 80140b2:	463a      	mov	r2, r7
 80140b4:	4620      	mov	r0, r4
 80140b6:	f7ff f9df 	bl	8013478 <__lshift>
 80140ba:	9005      	str	r0, [sp, #20]
 80140bc:	2800      	cmp	r0, #0
 80140be:	f43f ae8f 	beq.w	8013de0 <_strtod_l+0x488>
 80140c2:	f1ba 0f00 	cmp.w	sl, #0
 80140c6:	dd08      	ble.n	80140da <_strtod_l+0x782>
 80140c8:	4659      	mov	r1, fp
 80140ca:	4652      	mov	r2, sl
 80140cc:	4620      	mov	r0, r4
 80140ce:	f7ff f9d3 	bl	8013478 <__lshift>
 80140d2:	4683      	mov	fp, r0
 80140d4:	2800      	cmp	r0, #0
 80140d6:	f43f ae83 	beq.w	8013de0 <_strtod_l+0x488>
 80140da:	9a05      	ldr	r2, [sp, #20]
 80140dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80140de:	4620      	mov	r0, r4
 80140e0:	f7ff fa52 	bl	8013588 <__mdiff>
 80140e4:	4605      	mov	r5, r0
 80140e6:	2800      	cmp	r0, #0
 80140e8:	f43f ae7a 	beq.w	8013de0 <_strtod_l+0x488>
 80140ec:	68c3      	ldr	r3, [r0, #12]
 80140ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80140f0:	2300      	movs	r3, #0
 80140f2:	60c3      	str	r3, [r0, #12]
 80140f4:	4659      	mov	r1, fp
 80140f6:	f7ff fa2b 	bl	8013550 <__mcmp>
 80140fa:	2800      	cmp	r0, #0
 80140fc:	da60      	bge.n	80141c0 <_strtod_l+0x868>
 80140fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014100:	ea53 0308 	orrs.w	r3, r3, r8
 8014104:	f040 8084 	bne.w	8014210 <_strtod_l+0x8b8>
 8014108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801410c:	2b00      	cmp	r3, #0
 801410e:	d17f      	bne.n	8014210 <_strtod_l+0x8b8>
 8014110:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014114:	0d1b      	lsrs	r3, r3, #20
 8014116:	051b      	lsls	r3, r3, #20
 8014118:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801411c:	d978      	bls.n	8014210 <_strtod_l+0x8b8>
 801411e:	696b      	ldr	r3, [r5, #20]
 8014120:	b913      	cbnz	r3, 8014128 <_strtod_l+0x7d0>
 8014122:	692b      	ldr	r3, [r5, #16]
 8014124:	2b01      	cmp	r3, #1
 8014126:	dd73      	ble.n	8014210 <_strtod_l+0x8b8>
 8014128:	4629      	mov	r1, r5
 801412a:	2201      	movs	r2, #1
 801412c:	4620      	mov	r0, r4
 801412e:	f7ff f9a3 	bl	8013478 <__lshift>
 8014132:	4659      	mov	r1, fp
 8014134:	4605      	mov	r5, r0
 8014136:	f7ff fa0b 	bl	8013550 <__mcmp>
 801413a:	2800      	cmp	r0, #0
 801413c:	dd68      	ble.n	8014210 <_strtod_l+0x8b8>
 801413e:	9904      	ldr	r1, [sp, #16]
 8014140:	4a54      	ldr	r2, [pc, #336]	; (8014294 <_strtod_l+0x93c>)
 8014142:	464b      	mov	r3, r9
 8014144:	2900      	cmp	r1, #0
 8014146:	f000 8084 	beq.w	8014252 <_strtod_l+0x8fa>
 801414a:	ea02 0109 	and.w	r1, r2, r9
 801414e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014152:	dc7e      	bgt.n	8014252 <_strtod_l+0x8fa>
 8014154:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014158:	f77f aeb3 	ble.w	8013ec2 <_strtod_l+0x56a>
 801415c:	4b4e      	ldr	r3, [pc, #312]	; (8014298 <_strtod_l+0x940>)
 801415e:	4640      	mov	r0, r8
 8014160:	4649      	mov	r1, r9
 8014162:	2200      	movs	r2, #0
 8014164:	f7ec fa48 	bl	80005f8 <__aeabi_dmul>
 8014168:	4b4a      	ldr	r3, [pc, #296]	; (8014294 <_strtod_l+0x93c>)
 801416a:	400b      	ands	r3, r1
 801416c:	4680      	mov	r8, r0
 801416e:	4689      	mov	r9, r1
 8014170:	2b00      	cmp	r3, #0
 8014172:	f47f ae3f 	bne.w	8013df4 <_strtod_l+0x49c>
 8014176:	2322      	movs	r3, #34	; 0x22
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	e63b      	b.n	8013df4 <_strtod_l+0x49c>
 801417c:	f04f 32ff 	mov.w	r2, #4294967295
 8014180:	fa02 f303 	lsl.w	r3, r2, r3
 8014184:	ea03 0808 	and.w	r8, r3, r8
 8014188:	e6e8      	b.n	8013f5c <_strtod_l+0x604>
 801418a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801418e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014192:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014196:	36e2      	adds	r6, #226	; 0xe2
 8014198:	fa01 f306 	lsl.w	r3, r1, r6
 801419c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80141a0:	e748      	b.n	8014034 <_strtod_l+0x6dc>
 80141a2:	2100      	movs	r1, #0
 80141a4:	2301      	movs	r3, #1
 80141a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80141aa:	e743      	b.n	8014034 <_strtod_l+0x6dc>
 80141ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80141ae:	4632      	mov	r2, r6
 80141b0:	4620      	mov	r0, r4
 80141b2:	f7ff f961 	bl	8013478 <__lshift>
 80141b6:	9016      	str	r0, [sp, #88]	; 0x58
 80141b8:	2800      	cmp	r0, #0
 80141ba:	f47f af6b 	bne.w	8014094 <_strtod_l+0x73c>
 80141be:	e60f      	b.n	8013de0 <_strtod_l+0x488>
 80141c0:	46ca      	mov	sl, r9
 80141c2:	d171      	bne.n	80142a8 <_strtod_l+0x950>
 80141c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80141c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141ca:	b352      	cbz	r2, 8014222 <_strtod_l+0x8ca>
 80141cc:	4a33      	ldr	r2, [pc, #204]	; (801429c <_strtod_l+0x944>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d12a      	bne.n	8014228 <_strtod_l+0x8d0>
 80141d2:	9b04      	ldr	r3, [sp, #16]
 80141d4:	4641      	mov	r1, r8
 80141d6:	b1fb      	cbz	r3, 8014218 <_strtod_l+0x8c0>
 80141d8:	4b2e      	ldr	r3, [pc, #184]	; (8014294 <_strtod_l+0x93c>)
 80141da:	ea09 0303 	and.w	r3, r9, r3
 80141de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80141e2:	f04f 32ff 	mov.w	r2, #4294967295
 80141e6:	d81a      	bhi.n	801421e <_strtod_l+0x8c6>
 80141e8:	0d1b      	lsrs	r3, r3, #20
 80141ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80141ee:	fa02 f303 	lsl.w	r3, r2, r3
 80141f2:	4299      	cmp	r1, r3
 80141f4:	d118      	bne.n	8014228 <_strtod_l+0x8d0>
 80141f6:	4b2a      	ldr	r3, [pc, #168]	; (80142a0 <_strtod_l+0x948>)
 80141f8:	459a      	cmp	sl, r3
 80141fa:	d102      	bne.n	8014202 <_strtod_l+0x8aa>
 80141fc:	3101      	adds	r1, #1
 80141fe:	f43f adef 	beq.w	8013de0 <_strtod_l+0x488>
 8014202:	4b24      	ldr	r3, [pc, #144]	; (8014294 <_strtod_l+0x93c>)
 8014204:	ea0a 0303 	and.w	r3, sl, r3
 8014208:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801420c:	f04f 0800 	mov.w	r8, #0
 8014210:	9b04      	ldr	r3, [sp, #16]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d1a2      	bne.n	801415c <_strtod_l+0x804>
 8014216:	e5ed      	b.n	8013df4 <_strtod_l+0x49c>
 8014218:	f04f 33ff 	mov.w	r3, #4294967295
 801421c:	e7e9      	b.n	80141f2 <_strtod_l+0x89a>
 801421e:	4613      	mov	r3, r2
 8014220:	e7e7      	b.n	80141f2 <_strtod_l+0x89a>
 8014222:	ea53 0308 	orrs.w	r3, r3, r8
 8014226:	d08a      	beq.n	801413e <_strtod_l+0x7e6>
 8014228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801422a:	b1e3      	cbz	r3, 8014266 <_strtod_l+0x90e>
 801422c:	ea13 0f0a 	tst.w	r3, sl
 8014230:	d0ee      	beq.n	8014210 <_strtod_l+0x8b8>
 8014232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014234:	9a04      	ldr	r2, [sp, #16]
 8014236:	4640      	mov	r0, r8
 8014238:	4649      	mov	r1, r9
 801423a:	b1c3      	cbz	r3, 801426e <_strtod_l+0x916>
 801423c:	f7ff fb6f 	bl	801391e <sulp>
 8014240:	4602      	mov	r2, r0
 8014242:	460b      	mov	r3, r1
 8014244:	ec51 0b18 	vmov	r0, r1, d8
 8014248:	f7ec f820 	bl	800028c <__adddf3>
 801424c:	4680      	mov	r8, r0
 801424e:	4689      	mov	r9, r1
 8014250:	e7de      	b.n	8014210 <_strtod_l+0x8b8>
 8014252:	4013      	ands	r3, r2
 8014254:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014258:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801425c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014260:	f04f 38ff 	mov.w	r8, #4294967295
 8014264:	e7d4      	b.n	8014210 <_strtod_l+0x8b8>
 8014266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014268:	ea13 0f08 	tst.w	r3, r8
 801426c:	e7e0      	b.n	8014230 <_strtod_l+0x8d8>
 801426e:	f7ff fb56 	bl	801391e <sulp>
 8014272:	4602      	mov	r2, r0
 8014274:	460b      	mov	r3, r1
 8014276:	ec51 0b18 	vmov	r0, r1, d8
 801427a:	f7ec f805 	bl	8000288 <__aeabi_dsub>
 801427e:	2200      	movs	r2, #0
 8014280:	2300      	movs	r3, #0
 8014282:	4680      	mov	r8, r0
 8014284:	4689      	mov	r9, r1
 8014286:	f7ec fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801428a:	2800      	cmp	r0, #0
 801428c:	d0c0      	beq.n	8014210 <_strtod_l+0x8b8>
 801428e:	e618      	b.n	8013ec2 <_strtod_l+0x56a>
 8014290:	fffffc02 	.word	0xfffffc02
 8014294:	7ff00000 	.word	0x7ff00000
 8014298:	39500000 	.word	0x39500000
 801429c:	000fffff 	.word	0x000fffff
 80142a0:	7fefffff 	.word	0x7fefffff
 80142a4:	08017050 	.word	0x08017050
 80142a8:	4659      	mov	r1, fp
 80142aa:	4628      	mov	r0, r5
 80142ac:	f7ff fac0 	bl	8013830 <__ratio>
 80142b0:	ec57 6b10 	vmov	r6, r7, d0
 80142b4:	ee10 0a10 	vmov	r0, s0
 80142b8:	2200      	movs	r2, #0
 80142ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80142be:	4639      	mov	r1, r7
 80142c0:	f7ec fc16 	bl	8000af0 <__aeabi_dcmple>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d071      	beq.n	80143ac <_strtod_l+0xa54>
 80142c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d17c      	bne.n	80143c8 <_strtod_l+0xa70>
 80142ce:	f1b8 0f00 	cmp.w	r8, #0
 80142d2:	d15a      	bne.n	801438a <_strtod_l+0xa32>
 80142d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d15d      	bne.n	8014398 <_strtod_l+0xa40>
 80142dc:	4b90      	ldr	r3, [pc, #576]	; (8014520 <_strtod_l+0xbc8>)
 80142de:	2200      	movs	r2, #0
 80142e0:	4630      	mov	r0, r6
 80142e2:	4639      	mov	r1, r7
 80142e4:	f7ec fbfa 	bl	8000adc <__aeabi_dcmplt>
 80142e8:	2800      	cmp	r0, #0
 80142ea:	d15c      	bne.n	80143a6 <_strtod_l+0xa4e>
 80142ec:	4630      	mov	r0, r6
 80142ee:	4639      	mov	r1, r7
 80142f0:	4b8c      	ldr	r3, [pc, #560]	; (8014524 <_strtod_l+0xbcc>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	f7ec f980 	bl	80005f8 <__aeabi_dmul>
 80142f8:	4606      	mov	r6, r0
 80142fa:	460f      	mov	r7, r1
 80142fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014300:	9606      	str	r6, [sp, #24]
 8014302:	9307      	str	r3, [sp, #28]
 8014304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014308:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801430c:	4b86      	ldr	r3, [pc, #536]	; (8014528 <_strtod_l+0xbd0>)
 801430e:	ea0a 0303 	and.w	r3, sl, r3
 8014312:	930d      	str	r3, [sp, #52]	; 0x34
 8014314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014316:	4b85      	ldr	r3, [pc, #532]	; (801452c <_strtod_l+0xbd4>)
 8014318:	429a      	cmp	r2, r3
 801431a:	f040 8090 	bne.w	801443e <_strtod_l+0xae6>
 801431e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8014322:	ec49 8b10 	vmov	d0, r8, r9
 8014326:	f7ff f9b9 	bl	801369c <__ulp>
 801432a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801432e:	ec51 0b10 	vmov	r0, r1, d0
 8014332:	f7ec f961 	bl	80005f8 <__aeabi_dmul>
 8014336:	4642      	mov	r2, r8
 8014338:	464b      	mov	r3, r9
 801433a:	f7eb ffa7 	bl	800028c <__adddf3>
 801433e:	460b      	mov	r3, r1
 8014340:	4979      	ldr	r1, [pc, #484]	; (8014528 <_strtod_l+0xbd0>)
 8014342:	4a7b      	ldr	r2, [pc, #492]	; (8014530 <_strtod_l+0xbd8>)
 8014344:	4019      	ands	r1, r3
 8014346:	4291      	cmp	r1, r2
 8014348:	4680      	mov	r8, r0
 801434a:	d944      	bls.n	80143d6 <_strtod_l+0xa7e>
 801434c:	ee18 2a90 	vmov	r2, s17
 8014350:	4b78      	ldr	r3, [pc, #480]	; (8014534 <_strtod_l+0xbdc>)
 8014352:	429a      	cmp	r2, r3
 8014354:	d104      	bne.n	8014360 <_strtod_l+0xa08>
 8014356:	ee18 3a10 	vmov	r3, s16
 801435a:	3301      	adds	r3, #1
 801435c:	f43f ad40 	beq.w	8013de0 <_strtod_l+0x488>
 8014360:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8014534 <_strtod_l+0xbdc>
 8014364:	f04f 38ff 	mov.w	r8, #4294967295
 8014368:	9916      	ldr	r1, [sp, #88]	; 0x58
 801436a:	4620      	mov	r0, r4
 801436c:	f7fe fe6a 	bl	8013044 <_Bfree>
 8014370:	9905      	ldr	r1, [sp, #20]
 8014372:	4620      	mov	r0, r4
 8014374:	f7fe fe66 	bl	8013044 <_Bfree>
 8014378:	4659      	mov	r1, fp
 801437a:	4620      	mov	r0, r4
 801437c:	f7fe fe62 	bl	8013044 <_Bfree>
 8014380:	4629      	mov	r1, r5
 8014382:	4620      	mov	r0, r4
 8014384:	f7fe fe5e 	bl	8013044 <_Bfree>
 8014388:	e609      	b.n	8013f9e <_strtod_l+0x646>
 801438a:	f1b8 0f01 	cmp.w	r8, #1
 801438e:	d103      	bne.n	8014398 <_strtod_l+0xa40>
 8014390:	f1b9 0f00 	cmp.w	r9, #0
 8014394:	f43f ad95 	beq.w	8013ec2 <_strtod_l+0x56a>
 8014398:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80144f0 <_strtod_l+0xb98>
 801439c:	4f60      	ldr	r7, [pc, #384]	; (8014520 <_strtod_l+0xbc8>)
 801439e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80143a2:	2600      	movs	r6, #0
 80143a4:	e7ae      	b.n	8014304 <_strtod_l+0x9ac>
 80143a6:	4f5f      	ldr	r7, [pc, #380]	; (8014524 <_strtod_l+0xbcc>)
 80143a8:	2600      	movs	r6, #0
 80143aa:	e7a7      	b.n	80142fc <_strtod_l+0x9a4>
 80143ac:	4b5d      	ldr	r3, [pc, #372]	; (8014524 <_strtod_l+0xbcc>)
 80143ae:	4630      	mov	r0, r6
 80143b0:	4639      	mov	r1, r7
 80143b2:	2200      	movs	r2, #0
 80143b4:	f7ec f920 	bl	80005f8 <__aeabi_dmul>
 80143b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143ba:	4606      	mov	r6, r0
 80143bc:	460f      	mov	r7, r1
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d09c      	beq.n	80142fc <_strtod_l+0x9a4>
 80143c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80143c6:	e79d      	b.n	8014304 <_strtod_l+0x9ac>
 80143c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80144f8 <_strtod_l+0xba0>
 80143cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80143d0:	ec57 6b17 	vmov	r6, r7, d7
 80143d4:	e796      	b.n	8014304 <_strtod_l+0x9ac>
 80143d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80143da:	9b04      	ldr	r3, [sp, #16]
 80143dc:	46ca      	mov	sl, r9
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d1c2      	bne.n	8014368 <_strtod_l+0xa10>
 80143e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80143e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80143e8:	0d1b      	lsrs	r3, r3, #20
 80143ea:	051b      	lsls	r3, r3, #20
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d1bb      	bne.n	8014368 <_strtod_l+0xa10>
 80143f0:	4630      	mov	r0, r6
 80143f2:	4639      	mov	r1, r7
 80143f4:	f7ec fc60 	bl	8000cb8 <__aeabi_d2lz>
 80143f8:	f7ec f8d0 	bl	800059c <__aeabi_l2d>
 80143fc:	4602      	mov	r2, r0
 80143fe:	460b      	mov	r3, r1
 8014400:	4630      	mov	r0, r6
 8014402:	4639      	mov	r1, r7
 8014404:	f7eb ff40 	bl	8000288 <__aeabi_dsub>
 8014408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801440a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801440e:	ea43 0308 	orr.w	r3, r3, r8
 8014412:	4313      	orrs	r3, r2
 8014414:	4606      	mov	r6, r0
 8014416:	460f      	mov	r7, r1
 8014418:	d054      	beq.n	80144c4 <_strtod_l+0xb6c>
 801441a:	a339      	add	r3, pc, #228	; (adr r3, 8014500 <_strtod_l+0xba8>)
 801441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014420:	f7ec fb5c 	bl	8000adc <__aeabi_dcmplt>
 8014424:	2800      	cmp	r0, #0
 8014426:	f47f ace5 	bne.w	8013df4 <_strtod_l+0x49c>
 801442a:	a337      	add	r3, pc, #220	; (adr r3, 8014508 <_strtod_l+0xbb0>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	4630      	mov	r0, r6
 8014432:	4639      	mov	r1, r7
 8014434:	f7ec fb70 	bl	8000b18 <__aeabi_dcmpgt>
 8014438:	2800      	cmp	r0, #0
 801443a:	d095      	beq.n	8014368 <_strtod_l+0xa10>
 801443c:	e4da      	b.n	8013df4 <_strtod_l+0x49c>
 801443e:	9b04      	ldr	r3, [sp, #16]
 8014440:	b333      	cbz	r3, 8014490 <_strtod_l+0xb38>
 8014442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014444:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014448:	d822      	bhi.n	8014490 <_strtod_l+0xb38>
 801444a:	a331      	add	r3, pc, #196	; (adr r3, 8014510 <_strtod_l+0xbb8>)
 801444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014450:	4630      	mov	r0, r6
 8014452:	4639      	mov	r1, r7
 8014454:	f7ec fb4c 	bl	8000af0 <__aeabi_dcmple>
 8014458:	b1a0      	cbz	r0, 8014484 <_strtod_l+0xb2c>
 801445a:	4639      	mov	r1, r7
 801445c:	4630      	mov	r0, r6
 801445e:	f7ec fba3 	bl	8000ba8 <__aeabi_d2uiz>
 8014462:	2801      	cmp	r0, #1
 8014464:	bf38      	it	cc
 8014466:	2001      	movcc	r0, #1
 8014468:	f7ec f84c 	bl	8000504 <__aeabi_ui2d>
 801446c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801446e:	4606      	mov	r6, r0
 8014470:	460f      	mov	r7, r1
 8014472:	bb23      	cbnz	r3, 80144be <_strtod_l+0xb66>
 8014474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014478:	9010      	str	r0, [sp, #64]	; 0x40
 801447a:	9311      	str	r3, [sp, #68]	; 0x44
 801447c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014480:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8014484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014488:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801448c:	1a9b      	subs	r3, r3, r2
 801448e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014490:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014494:	eeb0 0a48 	vmov.f32	s0, s16
 8014498:	eef0 0a68 	vmov.f32	s1, s17
 801449c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80144a0:	f7ff f8fc 	bl	801369c <__ulp>
 80144a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80144a8:	ec53 2b10 	vmov	r2, r3, d0
 80144ac:	f7ec f8a4 	bl	80005f8 <__aeabi_dmul>
 80144b0:	ec53 2b18 	vmov	r2, r3, d8
 80144b4:	f7eb feea 	bl	800028c <__adddf3>
 80144b8:	4680      	mov	r8, r0
 80144ba:	4689      	mov	r9, r1
 80144bc:	e78d      	b.n	80143da <_strtod_l+0xa82>
 80144be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80144c2:	e7db      	b.n	801447c <_strtod_l+0xb24>
 80144c4:	a314      	add	r3, pc, #80	; (adr r3, 8014518 <_strtod_l+0xbc0>)
 80144c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ca:	f7ec fb07 	bl	8000adc <__aeabi_dcmplt>
 80144ce:	e7b3      	b.n	8014438 <_strtod_l+0xae0>
 80144d0:	2300      	movs	r3, #0
 80144d2:	930a      	str	r3, [sp, #40]	; 0x28
 80144d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80144d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144d8:	6013      	str	r3, [r2, #0]
 80144da:	f7ff ba7c 	b.w	80139d6 <_strtod_l+0x7e>
 80144de:	2a65      	cmp	r2, #101	; 0x65
 80144e0:	f43f ab75 	beq.w	8013bce <_strtod_l+0x276>
 80144e4:	2a45      	cmp	r2, #69	; 0x45
 80144e6:	f43f ab72 	beq.w	8013bce <_strtod_l+0x276>
 80144ea:	2301      	movs	r3, #1
 80144ec:	f7ff bbaa 	b.w	8013c44 <_strtod_l+0x2ec>
 80144f0:	00000000 	.word	0x00000000
 80144f4:	bff00000 	.word	0xbff00000
 80144f8:	00000000 	.word	0x00000000
 80144fc:	3ff00000 	.word	0x3ff00000
 8014500:	94a03595 	.word	0x94a03595
 8014504:	3fdfffff 	.word	0x3fdfffff
 8014508:	35afe535 	.word	0x35afe535
 801450c:	3fe00000 	.word	0x3fe00000
 8014510:	ffc00000 	.word	0xffc00000
 8014514:	41dfffff 	.word	0x41dfffff
 8014518:	94a03595 	.word	0x94a03595
 801451c:	3fcfffff 	.word	0x3fcfffff
 8014520:	3ff00000 	.word	0x3ff00000
 8014524:	3fe00000 	.word	0x3fe00000
 8014528:	7ff00000 	.word	0x7ff00000
 801452c:	7fe00000 	.word	0x7fe00000
 8014530:	7c9fffff 	.word	0x7c9fffff
 8014534:	7fefffff 	.word	0x7fefffff

08014538 <_strtod_r>:
 8014538:	4b01      	ldr	r3, [pc, #4]	; (8014540 <_strtod_r+0x8>)
 801453a:	f7ff ba0d 	b.w	8013958 <_strtod_l>
 801453e:	bf00      	nop
 8014540:	20000170 	.word	0x20000170

08014544 <_strtol_l.constprop.0>:
 8014544:	2b01      	cmp	r3, #1
 8014546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801454a:	d001      	beq.n	8014550 <_strtol_l.constprop.0+0xc>
 801454c:	2b24      	cmp	r3, #36	; 0x24
 801454e:	d906      	bls.n	801455e <_strtol_l.constprop.0+0x1a>
 8014550:	f7fd fd72 	bl	8012038 <__errno>
 8014554:	2316      	movs	r3, #22
 8014556:	6003      	str	r3, [r0, #0]
 8014558:	2000      	movs	r0, #0
 801455a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801455e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014644 <_strtol_l.constprop.0+0x100>
 8014562:	460d      	mov	r5, r1
 8014564:	462e      	mov	r6, r5
 8014566:	f815 4b01 	ldrb.w	r4, [r5], #1
 801456a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801456e:	f017 0708 	ands.w	r7, r7, #8
 8014572:	d1f7      	bne.n	8014564 <_strtol_l.constprop.0+0x20>
 8014574:	2c2d      	cmp	r4, #45	; 0x2d
 8014576:	d132      	bne.n	80145de <_strtol_l.constprop.0+0x9a>
 8014578:	782c      	ldrb	r4, [r5, #0]
 801457a:	2701      	movs	r7, #1
 801457c:	1cb5      	adds	r5, r6, #2
 801457e:	2b00      	cmp	r3, #0
 8014580:	d05b      	beq.n	801463a <_strtol_l.constprop.0+0xf6>
 8014582:	2b10      	cmp	r3, #16
 8014584:	d109      	bne.n	801459a <_strtol_l.constprop.0+0x56>
 8014586:	2c30      	cmp	r4, #48	; 0x30
 8014588:	d107      	bne.n	801459a <_strtol_l.constprop.0+0x56>
 801458a:	782c      	ldrb	r4, [r5, #0]
 801458c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014590:	2c58      	cmp	r4, #88	; 0x58
 8014592:	d14d      	bne.n	8014630 <_strtol_l.constprop.0+0xec>
 8014594:	786c      	ldrb	r4, [r5, #1]
 8014596:	2310      	movs	r3, #16
 8014598:	3502      	adds	r5, #2
 801459a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801459e:	f108 38ff 	add.w	r8, r8, #4294967295
 80145a2:	f04f 0e00 	mov.w	lr, #0
 80145a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80145aa:	4676      	mov	r6, lr
 80145ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80145b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80145b4:	f1bc 0f09 	cmp.w	ip, #9
 80145b8:	d816      	bhi.n	80145e8 <_strtol_l.constprop.0+0xa4>
 80145ba:	4664      	mov	r4, ip
 80145bc:	42a3      	cmp	r3, r4
 80145be:	dd24      	ble.n	801460a <_strtol_l.constprop.0+0xc6>
 80145c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80145c4:	d008      	beq.n	80145d8 <_strtol_l.constprop.0+0x94>
 80145c6:	45b1      	cmp	r9, r6
 80145c8:	d31c      	bcc.n	8014604 <_strtol_l.constprop.0+0xc0>
 80145ca:	d101      	bne.n	80145d0 <_strtol_l.constprop.0+0x8c>
 80145cc:	45a2      	cmp	sl, r4
 80145ce:	db19      	blt.n	8014604 <_strtol_l.constprop.0+0xc0>
 80145d0:	fb06 4603 	mla	r6, r6, r3, r4
 80145d4:	f04f 0e01 	mov.w	lr, #1
 80145d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80145dc:	e7e8      	b.n	80145b0 <_strtol_l.constprop.0+0x6c>
 80145de:	2c2b      	cmp	r4, #43	; 0x2b
 80145e0:	bf04      	itt	eq
 80145e2:	782c      	ldrbeq	r4, [r5, #0]
 80145e4:	1cb5      	addeq	r5, r6, #2
 80145e6:	e7ca      	b.n	801457e <_strtol_l.constprop.0+0x3a>
 80145e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80145ec:	f1bc 0f19 	cmp.w	ip, #25
 80145f0:	d801      	bhi.n	80145f6 <_strtol_l.constprop.0+0xb2>
 80145f2:	3c37      	subs	r4, #55	; 0x37
 80145f4:	e7e2      	b.n	80145bc <_strtol_l.constprop.0+0x78>
 80145f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80145fa:	f1bc 0f19 	cmp.w	ip, #25
 80145fe:	d804      	bhi.n	801460a <_strtol_l.constprop.0+0xc6>
 8014600:	3c57      	subs	r4, #87	; 0x57
 8014602:	e7db      	b.n	80145bc <_strtol_l.constprop.0+0x78>
 8014604:	f04f 3eff 	mov.w	lr, #4294967295
 8014608:	e7e6      	b.n	80145d8 <_strtol_l.constprop.0+0x94>
 801460a:	f1be 3fff 	cmp.w	lr, #4294967295
 801460e:	d105      	bne.n	801461c <_strtol_l.constprop.0+0xd8>
 8014610:	2322      	movs	r3, #34	; 0x22
 8014612:	6003      	str	r3, [r0, #0]
 8014614:	4646      	mov	r6, r8
 8014616:	b942      	cbnz	r2, 801462a <_strtol_l.constprop.0+0xe6>
 8014618:	4630      	mov	r0, r6
 801461a:	e79e      	b.n	801455a <_strtol_l.constprop.0+0x16>
 801461c:	b107      	cbz	r7, 8014620 <_strtol_l.constprop.0+0xdc>
 801461e:	4276      	negs	r6, r6
 8014620:	2a00      	cmp	r2, #0
 8014622:	d0f9      	beq.n	8014618 <_strtol_l.constprop.0+0xd4>
 8014624:	f1be 0f00 	cmp.w	lr, #0
 8014628:	d000      	beq.n	801462c <_strtol_l.constprop.0+0xe8>
 801462a:	1e69      	subs	r1, r5, #1
 801462c:	6011      	str	r1, [r2, #0]
 801462e:	e7f3      	b.n	8014618 <_strtol_l.constprop.0+0xd4>
 8014630:	2430      	movs	r4, #48	; 0x30
 8014632:	2b00      	cmp	r3, #0
 8014634:	d1b1      	bne.n	801459a <_strtol_l.constprop.0+0x56>
 8014636:	2308      	movs	r3, #8
 8014638:	e7af      	b.n	801459a <_strtol_l.constprop.0+0x56>
 801463a:	2c30      	cmp	r4, #48	; 0x30
 801463c:	d0a5      	beq.n	801458a <_strtol_l.constprop.0+0x46>
 801463e:	230a      	movs	r3, #10
 8014640:	e7ab      	b.n	801459a <_strtol_l.constprop.0+0x56>
 8014642:	bf00      	nop
 8014644:	08017079 	.word	0x08017079

08014648 <_strtol_r>:
 8014648:	f7ff bf7c 	b.w	8014544 <_strtol_l.constprop.0>

0801464c <__ssputs_r>:
 801464c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014650:	688e      	ldr	r6, [r1, #8]
 8014652:	461f      	mov	r7, r3
 8014654:	42be      	cmp	r6, r7
 8014656:	680b      	ldr	r3, [r1, #0]
 8014658:	4682      	mov	sl, r0
 801465a:	460c      	mov	r4, r1
 801465c:	4690      	mov	r8, r2
 801465e:	d82c      	bhi.n	80146ba <__ssputs_r+0x6e>
 8014660:	898a      	ldrh	r2, [r1, #12]
 8014662:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014666:	d026      	beq.n	80146b6 <__ssputs_r+0x6a>
 8014668:	6965      	ldr	r5, [r4, #20]
 801466a:	6909      	ldr	r1, [r1, #16]
 801466c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014670:	eba3 0901 	sub.w	r9, r3, r1
 8014674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014678:	1c7b      	adds	r3, r7, #1
 801467a:	444b      	add	r3, r9
 801467c:	106d      	asrs	r5, r5, #1
 801467e:	429d      	cmp	r5, r3
 8014680:	bf38      	it	cc
 8014682:	461d      	movcc	r5, r3
 8014684:	0553      	lsls	r3, r2, #21
 8014686:	d527      	bpl.n	80146d8 <__ssputs_r+0x8c>
 8014688:	4629      	mov	r1, r5
 801468a:	f7fe fc0f 	bl	8012eac <_malloc_r>
 801468e:	4606      	mov	r6, r0
 8014690:	b360      	cbz	r0, 80146ec <__ssputs_r+0xa0>
 8014692:	6921      	ldr	r1, [r4, #16]
 8014694:	464a      	mov	r2, r9
 8014696:	f7fd fcfc 	bl	8012092 <memcpy>
 801469a:	89a3      	ldrh	r3, [r4, #12]
 801469c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146a4:	81a3      	strh	r3, [r4, #12]
 80146a6:	6126      	str	r6, [r4, #16]
 80146a8:	6165      	str	r5, [r4, #20]
 80146aa:	444e      	add	r6, r9
 80146ac:	eba5 0509 	sub.w	r5, r5, r9
 80146b0:	6026      	str	r6, [r4, #0]
 80146b2:	60a5      	str	r5, [r4, #8]
 80146b4:	463e      	mov	r6, r7
 80146b6:	42be      	cmp	r6, r7
 80146b8:	d900      	bls.n	80146bc <__ssputs_r+0x70>
 80146ba:	463e      	mov	r6, r7
 80146bc:	6820      	ldr	r0, [r4, #0]
 80146be:	4632      	mov	r2, r6
 80146c0:	4641      	mov	r1, r8
 80146c2:	f7fd fbb5 	bl	8011e30 <memmove>
 80146c6:	68a3      	ldr	r3, [r4, #8]
 80146c8:	1b9b      	subs	r3, r3, r6
 80146ca:	60a3      	str	r3, [r4, #8]
 80146cc:	6823      	ldr	r3, [r4, #0]
 80146ce:	4433      	add	r3, r6
 80146d0:	6023      	str	r3, [r4, #0]
 80146d2:	2000      	movs	r0, #0
 80146d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146d8:	462a      	mov	r2, r5
 80146da:	f000 ff60 	bl	801559e <_realloc_r>
 80146de:	4606      	mov	r6, r0
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d1e0      	bne.n	80146a6 <__ssputs_r+0x5a>
 80146e4:	6921      	ldr	r1, [r4, #16]
 80146e6:	4650      	mov	r0, sl
 80146e8:	f7fe fb6c 	bl	8012dc4 <_free_r>
 80146ec:	230c      	movs	r3, #12
 80146ee:	f8ca 3000 	str.w	r3, [sl]
 80146f2:	89a3      	ldrh	r3, [r4, #12]
 80146f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146f8:	81a3      	strh	r3, [r4, #12]
 80146fa:	f04f 30ff 	mov.w	r0, #4294967295
 80146fe:	e7e9      	b.n	80146d4 <__ssputs_r+0x88>

08014700 <_svfiprintf_r>:
 8014700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014704:	4698      	mov	r8, r3
 8014706:	898b      	ldrh	r3, [r1, #12]
 8014708:	061b      	lsls	r3, r3, #24
 801470a:	b09d      	sub	sp, #116	; 0x74
 801470c:	4607      	mov	r7, r0
 801470e:	460d      	mov	r5, r1
 8014710:	4614      	mov	r4, r2
 8014712:	d50e      	bpl.n	8014732 <_svfiprintf_r+0x32>
 8014714:	690b      	ldr	r3, [r1, #16]
 8014716:	b963      	cbnz	r3, 8014732 <_svfiprintf_r+0x32>
 8014718:	2140      	movs	r1, #64	; 0x40
 801471a:	f7fe fbc7 	bl	8012eac <_malloc_r>
 801471e:	6028      	str	r0, [r5, #0]
 8014720:	6128      	str	r0, [r5, #16]
 8014722:	b920      	cbnz	r0, 801472e <_svfiprintf_r+0x2e>
 8014724:	230c      	movs	r3, #12
 8014726:	603b      	str	r3, [r7, #0]
 8014728:	f04f 30ff 	mov.w	r0, #4294967295
 801472c:	e0d0      	b.n	80148d0 <_svfiprintf_r+0x1d0>
 801472e:	2340      	movs	r3, #64	; 0x40
 8014730:	616b      	str	r3, [r5, #20]
 8014732:	2300      	movs	r3, #0
 8014734:	9309      	str	r3, [sp, #36]	; 0x24
 8014736:	2320      	movs	r3, #32
 8014738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801473c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014740:	2330      	movs	r3, #48	; 0x30
 8014742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80148e8 <_svfiprintf_r+0x1e8>
 8014746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801474a:	f04f 0901 	mov.w	r9, #1
 801474e:	4623      	mov	r3, r4
 8014750:	469a      	mov	sl, r3
 8014752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014756:	b10a      	cbz	r2, 801475c <_svfiprintf_r+0x5c>
 8014758:	2a25      	cmp	r2, #37	; 0x25
 801475a:	d1f9      	bne.n	8014750 <_svfiprintf_r+0x50>
 801475c:	ebba 0b04 	subs.w	fp, sl, r4
 8014760:	d00b      	beq.n	801477a <_svfiprintf_r+0x7a>
 8014762:	465b      	mov	r3, fp
 8014764:	4622      	mov	r2, r4
 8014766:	4629      	mov	r1, r5
 8014768:	4638      	mov	r0, r7
 801476a:	f7ff ff6f 	bl	801464c <__ssputs_r>
 801476e:	3001      	adds	r0, #1
 8014770:	f000 80a9 	beq.w	80148c6 <_svfiprintf_r+0x1c6>
 8014774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014776:	445a      	add	r2, fp
 8014778:	9209      	str	r2, [sp, #36]	; 0x24
 801477a:	f89a 3000 	ldrb.w	r3, [sl]
 801477e:	2b00      	cmp	r3, #0
 8014780:	f000 80a1 	beq.w	80148c6 <_svfiprintf_r+0x1c6>
 8014784:	2300      	movs	r3, #0
 8014786:	f04f 32ff 	mov.w	r2, #4294967295
 801478a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801478e:	f10a 0a01 	add.w	sl, sl, #1
 8014792:	9304      	str	r3, [sp, #16]
 8014794:	9307      	str	r3, [sp, #28]
 8014796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801479a:	931a      	str	r3, [sp, #104]	; 0x68
 801479c:	4654      	mov	r4, sl
 801479e:	2205      	movs	r2, #5
 80147a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147a4:	4850      	ldr	r0, [pc, #320]	; (80148e8 <_svfiprintf_r+0x1e8>)
 80147a6:	f7eb fd13 	bl	80001d0 <memchr>
 80147aa:	9a04      	ldr	r2, [sp, #16]
 80147ac:	b9d8      	cbnz	r0, 80147e6 <_svfiprintf_r+0xe6>
 80147ae:	06d0      	lsls	r0, r2, #27
 80147b0:	bf44      	itt	mi
 80147b2:	2320      	movmi	r3, #32
 80147b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147b8:	0711      	lsls	r1, r2, #28
 80147ba:	bf44      	itt	mi
 80147bc:	232b      	movmi	r3, #43	; 0x2b
 80147be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147c2:	f89a 3000 	ldrb.w	r3, [sl]
 80147c6:	2b2a      	cmp	r3, #42	; 0x2a
 80147c8:	d015      	beq.n	80147f6 <_svfiprintf_r+0xf6>
 80147ca:	9a07      	ldr	r2, [sp, #28]
 80147cc:	4654      	mov	r4, sl
 80147ce:	2000      	movs	r0, #0
 80147d0:	f04f 0c0a 	mov.w	ip, #10
 80147d4:	4621      	mov	r1, r4
 80147d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147da:	3b30      	subs	r3, #48	; 0x30
 80147dc:	2b09      	cmp	r3, #9
 80147de:	d94d      	bls.n	801487c <_svfiprintf_r+0x17c>
 80147e0:	b1b0      	cbz	r0, 8014810 <_svfiprintf_r+0x110>
 80147e2:	9207      	str	r2, [sp, #28]
 80147e4:	e014      	b.n	8014810 <_svfiprintf_r+0x110>
 80147e6:	eba0 0308 	sub.w	r3, r0, r8
 80147ea:	fa09 f303 	lsl.w	r3, r9, r3
 80147ee:	4313      	orrs	r3, r2
 80147f0:	9304      	str	r3, [sp, #16]
 80147f2:	46a2      	mov	sl, r4
 80147f4:	e7d2      	b.n	801479c <_svfiprintf_r+0x9c>
 80147f6:	9b03      	ldr	r3, [sp, #12]
 80147f8:	1d19      	adds	r1, r3, #4
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	9103      	str	r1, [sp, #12]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	bfbb      	ittet	lt
 8014802:	425b      	neglt	r3, r3
 8014804:	f042 0202 	orrlt.w	r2, r2, #2
 8014808:	9307      	strge	r3, [sp, #28]
 801480a:	9307      	strlt	r3, [sp, #28]
 801480c:	bfb8      	it	lt
 801480e:	9204      	strlt	r2, [sp, #16]
 8014810:	7823      	ldrb	r3, [r4, #0]
 8014812:	2b2e      	cmp	r3, #46	; 0x2e
 8014814:	d10c      	bne.n	8014830 <_svfiprintf_r+0x130>
 8014816:	7863      	ldrb	r3, [r4, #1]
 8014818:	2b2a      	cmp	r3, #42	; 0x2a
 801481a:	d134      	bne.n	8014886 <_svfiprintf_r+0x186>
 801481c:	9b03      	ldr	r3, [sp, #12]
 801481e:	1d1a      	adds	r2, r3, #4
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	9203      	str	r2, [sp, #12]
 8014824:	2b00      	cmp	r3, #0
 8014826:	bfb8      	it	lt
 8014828:	f04f 33ff 	movlt.w	r3, #4294967295
 801482c:	3402      	adds	r4, #2
 801482e:	9305      	str	r3, [sp, #20]
 8014830:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80148f8 <_svfiprintf_r+0x1f8>
 8014834:	7821      	ldrb	r1, [r4, #0]
 8014836:	2203      	movs	r2, #3
 8014838:	4650      	mov	r0, sl
 801483a:	f7eb fcc9 	bl	80001d0 <memchr>
 801483e:	b138      	cbz	r0, 8014850 <_svfiprintf_r+0x150>
 8014840:	9b04      	ldr	r3, [sp, #16]
 8014842:	eba0 000a 	sub.w	r0, r0, sl
 8014846:	2240      	movs	r2, #64	; 0x40
 8014848:	4082      	lsls	r2, r0
 801484a:	4313      	orrs	r3, r2
 801484c:	3401      	adds	r4, #1
 801484e:	9304      	str	r3, [sp, #16]
 8014850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014854:	4825      	ldr	r0, [pc, #148]	; (80148ec <_svfiprintf_r+0x1ec>)
 8014856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801485a:	2206      	movs	r2, #6
 801485c:	f7eb fcb8 	bl	80001d0 <memchr>
 8014860:	2800      	cmp	r0, #0
 8014862:	d038      	beq.n	80148d6 <_svfiprintf_r+0x1d6>
 8014864:	4b22      	ldr	r3, [pc, #136]	; (80148f0 <_svfiprintf_r+0x1f0>)
 8014866:	bb1b      	cbnz	r3, 80148b0 <_svfiprintf_r+0x1b0>
 8014868:	9b03      	ldr	r3, [sp, #12]
 801486a:	3307      	adds	r3, #7
 801486c:	f023 0307 	bic.w	r3, r3, #7
 8014870:	3308      	adds	r3, #8
 8014872:	9303      	str	r3, [sp, #12]
 8014874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014876:	4433      	add	r3, r6
 8014878:	9309      	str	r3, [sp, #36]	; 0x24
 801487a:	e768      	b.n	801474e <_svfiprintf_r+0x4e>
 801487c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014880:	460c      	mov	r4, r1
 8014882:	2001      	movs	r0, #1
 8014884:	e7a6      	b.n	80147d4 <_svfiprintf_r+0xd4>
 8014886:	2300      	movs	r3, #0
 8014888:	3401      	adds	r4, #1
 801488a:	9305      	str	r3, [sp, #20]
 801488c:	4619      	mov	r1, r3
 801488e:	f04f 0c0a 	mov.w	ip, #10
 8014892:	4620      	mov	r0, r4
 8014894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014898:	3a30      	subs	r2, #48	; 0x30
 801489a:	2a09      	cmp	r2, #9
 801489c:	d903      	bls.n	80148a6 <_svfiprintf_r+0x1a6>
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d0c6      	beq.n	8014830 <_svfiprintf_r+0x130>
 80148a2:	9105      	str	r1, [sp, #20]
 80148a4:	e7c4      	b.n	8014830 <_svfiprintf_r+0x130>
 80148a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80148aa:	4604      	mov	r4, r0
 80148ac:	2301      	movs	r3, #1
 80148ae:	e7f0      	b.n	8014892 <_svfiprintf_r+0x192>
 80148b0:	ab03      	add	r3, sp, #12
 80148b2:	9300      	str	r3, [sp, #0]
 80148b4:	462a      	mov	r2, r5
 80148b6:	4b0f      	ldr	r3, [pc, #60]	; (80148f4 <_svfiprintf_r+0x1f4>)
 80148b8:	a904      	add	r1, sp, #16
 80148ba:	4638      	mov	r0, r7
 80148bc:	f7fc fa64 	bl	8010d88 <_printf_float>
 80148c0:	1c42      	adds	r2, r0, #1
 80148c2:	4606      	mov	r6, r0
 80148c4:	d1d6      	bne.n	8014874 <_svfiprintf_r+0x174>
 80148c6:	89ab      	ldrh	r3, [r5, #12]
 80148c8:	065b      	lsls	r3, r3, #25
 80148ca:	f53f af2d 	bmi.w	8014728 <_svfiprintf_r+0x28>
 80148ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148d0:	b01d      	add	sp, #116	; 0x74
 80148d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d6:	ab03      	add	r3, sp, #12
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	462a      	mov	r2, r5
 80148dc:	4b05      	ldr	r3, [pc, #20]	; (80148f4 <_svfiprintf_r+0x1f4>)
 80148de:	a904      	add	r1, sp, #16
 80148e0:	4638      	mov	r0, r7
 80148e2:	f7fc fcf5 	bl	80112d0 <_printf_i>
 80148e6:	e7eb      	b.n	80148c0 <_svfiprintf_r+0x1c0>
 80148e8:	08017179 	.word	0x08017179
 80148ec:	08017183 	.word	0x08017183
 80148f0:	08010d89 	.word	0x08010d89
 80148f4:	0801464d 	.word	0x0801464d
 80148f8:	0801717f 	.word	0x0801717f

080148fc <__sfputc_r>:
 80148fc:	6893      	ldr	r3, [r2, #8]
 80148fe:	3b01      	subs	r3, #1
 8014900:	2b00      	cmp	r3, #0
 8014902:	b410      	push	{r4}
 8014904:	6093      	str	r3, [r2, #8]
 8014906:	da08      	bge.n	801491a <__sfputc_r+0x1e>
 8014908:	6994      	ldr	r4, [r2, #24]
 801490a:	42a3      	cmp	r3, r4
 801490c:	db01      	blt.n	8014912 <__sfputc_r+0x16>
 801490e:	290a      	cmp	r1, #10
 8014910:	d103      	bne.n	801491a <__sfputc_r+0x1e>
 8014912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014916:	f7fd b9e6 	b.w	8011ce6 <__swbuf_r>
 801491a:	6813      	ldr	r3, [r2, #0]
 801491c:	1c58      	adds	r0, r3, #1
 801491e:	6010      	str	r0, [r2, #0]
 8014920:	7019      	strb	r1, [r3, #0]
 8014922:	4608      	mov	r0, r1
 8014924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014928:	4770      	bx	lr

0801492a <__sfputs_r>:
 801492a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492c:	4606      	mov	r6, r0
 801492e:	460f      	mov	r7, r1
 8014930:	4614      	mov	r4, r2
 8014932:	18d5      	adds	r5, r2, r3
 8014934:	42ac      	cmp	r4, r5
 8014936:	d101      	bne.n	801493c <__sfputs_r+0x12>
 8014938:	2000      	movs	r0, #0
 801493a:	e007      	b.n	801494c <__sfputs_r+0x22>
 801493c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014940:	463a      	mov	r2, r7
 8014942:	4630      	mov	r0, r6
 8014944:	f7ff ffda 	bl	80148fc <__sfputc_r>
 8014948:	1c43      	adds	r3, r0, #1
 801494a:	d1f3      	bne.n	8014934 <__sfputs_r+0xa>
 801494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014950 <_vfiprintf_r>:
 8014950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014954:	460d      	mov	r5, r1
 8014956:	b09d      	sub	sp, #116	; 0x74
 8014958:	4614      	mov	r4, r2
 801495a:	4698      	mov	r8, r3
 801495c:	4606      	mov	r6, r0
 801495e:	b118      	cbz	r0, 8014968 <_vfiprintf_r+0x18>
 8014960:	6a03      	ldr	r3, [r0, #32]
 8014962:	b90b      	cbnz	r3, 8014968 <_vfiprintf_r+0x18>
 8014964:	f7fd f872 	bl	8011a4c <__sinit>
 8014968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801496a:	07d9      	lsls	r1, r3, #31
 801496c:	d405      	bmi.n	801497a <_vfiprintf_r+0x2a>
 801496e:	89ab      	ldrh	r3, [r5, #12]
 8014970:	059a      	lsls	r2, r3, #22
 8014972:	d402      	bmi.n	801497a <_vfiprintf_r+0x2a>
 8014974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014976:	f7fd fb8a 	bl	801208e <__retarget_lock_acquire_recursive>
 801497a:	89ab      	ldrh	r3, [r5, #12]
 801497c:	071b      	lsls	r3, r3, #28
 801497e:	d501      	bpl.n	8014984 <_vfiprintf_r+0x34>
 8014980:	692b      	ldr	r3, [r5, #16]
 8014982:	b99b      	cbnz	r3, 80149ac <_vfiprintf_r+0x5c>
 8014984:	4629      	mov	r1, r5
 8014986:	4630      	mov	r0, r6
 8014988:	f7fd f9ea 	bl	8011d60 <__swsetup_r>
 801498c:	b170      	cbz	r0, 80149ac <_vfiprintf_r+0x5c>
 801498e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014990:	07dc      	lsls	r4, r3, #31
 8014992:	d504      	bpl.n	801499e <_vfiprintf_r+0x4e>
 8014994:	f04f 30ff 	mov.w	r0, #4294967295
 8014998:	b01d      	add	sp, #116	; 0x74
 801499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499e:	89ab      	ldrh	r3, [r5, #12]
 80149a0:	0598      	lsls	r0, r3, #22
 80149a2:	d4f7      	bmi.n	8014994 <_vfiprintf_r+0x44>
 80149a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149a6:	f7fd fb73 	bl	8012090 <__retarget_lock_release_recursive>
 80149aa:	e7f3      	b.n	8014994 <_vfiprintf_r+0x44>
 80149ac:	2300      	movs	r3, #0
 80149ae:	9309      	str	r3, [sp, #36]	; 0x24
 80149b0:	2320      	movs	r3, #32
 80149b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80149ba:	2330      	movs	r3, #48	; 0x30
 80149bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014b70 <_vfiprintf_r+0x220>
 80149c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149c4:	f04f 0901 	mov.w	r9, #1
 80149c8:	4623      	mov	r3, r4
 80149ca:	469a      	mov	sl, r3
 80149cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149d0:	b10a      	cbz	r2, 80149d6 <_vfiprintf_r+0x86>
 80149d2:	2a25      	cmp	r2, #37	; 0x25
 80149d4:	d1f9      	bne.n	80149ca <_vfiprintf_r+0x7a>
 80149d6:	ebba 0b04 	subs.w	fp, sl, r4
 80149da:	d00b      	beq.n	80149f4 <_vfiprintf_r+0xa4>
 80149dc:	465b      	mov	r3, fp
 80149de:	4622      	mov	r2, r4
 80149e0:	4629      	mov	r1, r5
 80149e2:	4630      	mov	r0, r6
 80149e4:	f7ff ffa1 	bl	801492a <__sfputs_r>
 80149e8:	3001      	adds	r0, #1
 80149ea:	f000 80a9 	beq.w	8014b40 <_vfiprintf_r+0x1f0>
 80149ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149f0:	445a      	add	r2, fp
 80149f2:	9209      	str	r2, [sp, #36]	; 0x24
 80149f4:	f89a 3000 	ldrb.w	r3, [sl]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	f000 80a1 	beq.w	8014b40 <_vfiprintf_r+0x1f0>
 80149fe:	2300      	movs	r3, #0
 8014a00:	f04f 32ff 	mov.w	r2, #4294967295
 8014a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a08:	f10a 0a01 	add.w	sl, sl, #1
 8014a0c:	9304      	str	r3, [sp, #16]
 8014a0e:	9307      	str	r3, [sp, #28]
 8014a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a14:	931a      	str	r3, [sp, #104]	; 0x68
 8014a16:	4654      	mov	r4, sl
 8014a18:	2205      	movs	r2, #5
 8014a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a1e:	4854      	ldr	r0, [pc, #336]	; (8014b70 <_vfiprintf_r+0x220>)
 8014a20:	f7eb fbd6 	bl	80001d0 <memchr>
 8014a24:	9a04      	ldr	r2, [sp, #16]
 8014a26:	b9d8      	cbnz	r0, 8014a60 <_vfiprintf_r+0x110>
 8014a28:	06d1      	lsls	r1, r2, #27
 8014a2a:	bf44      	itt	mi
 8014a2c:	2320      	movmi	r3, #32
 8014a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a32:	0713      	lsls	r3, r2, #28
 8014a34:	bf44      	itt	mi
 8014a36:	232b      	movmi	r3, #43	; 0x2b
 8014a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a40:	2b2a      	cmp	r3, #42	; 0x2a
 8014a42:	d015      	beq.n	8014a70 <_vfiprintf_r+0x120>
 8014a44:	9a07      	ldr	r2, [sp, #28]
 8014a46:	4654      	mov	r4, sl
 8014a48:	2000      	movs	r0, #0
 8014a4a:	f04f 0c0a 	mov.w	ip, #10
 8014a4e:	4621      	mov	r1, r4
 8014a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a54:	3b30      	subs	r3, #48	; 0x30
 8014a56:	2b09      	cmp	r3, #9
 8014a58:	d94d      	bls.n	8014af6 <_vfiprintf_r+0x1a6>
 8014a5a:	b1b0      	cbz	r0, 8014a8a <_vfiprintf_r+0x13a>
 8014a5c:	9207      	str	r2, [sp, #28]
 8014a5e:	e014      	b.n	8014a8a <_vfiprintf_r+0x13a>
 8014a60:	eba0 0308 	sub.w	r3, r0, r8
 8014a64:	fa09 f303 	lsl.w	r3, r9, r3
 8014a68:	4313      	orrs	r3, r2
 8014a6a:	9304      	str	r3, [sp, #16]
 8014a6c:	46a2      	mov	sl, r4
 8014a6e:	e7d2      	b.n	8014a16 <_vfiprintf_r+0xc6>
 8014a70:	9b03      	ldr	r3, [sp, #12]
 8014a72:	1d19      	adds	r1, r3, #4
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	9103      	str	r1, [sp, #12]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	bfbb      	ittet	lt
 8014a7c:	425b      	neglt	r3, r3
 8014a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8014a82:	9307      	strge	r3, [sp, #28]
 8014a84:	9307      	strlt	r3, [sp, #28]
 8014a86:	bfb8      	it	lt
 8014a88:	9204      	strlt	r2, [sp, #16]
 8014a8a:	7823      	ldrb	r3, [r4, #0]
 8014a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8014a8e:	d10c      	bne.n	8014aaa <_vfiprintf_r+0x15a>
 8014a90:	7863      	ldrb	r3, [r4, #1]
 8014a92:	2b2a      	cmp	r3, #42	; 0x2a
 8014a94:	d134      	bne.n	8014b00 <_vfiprintf_r+0x1b0>
 8014a96:	9b03      	ldr	r3, [sp, #12]
 8014a98:	1d1a      	adds	r2, r3, #4
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	9203      	str	r2, [sp, #12]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	bfb8      	it	lt
 8014aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014aa6:	3402      	adds	r4, #2
 8014aa8:	9305      	str	r3, [sp, #20]
 8014aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014b80 <_vfiprintf_r+0x230>
 8014aae:	7821      	ldrb	r1, [r4, #0]
 8014ab0:	2203      	movs	r2, #3
 8014ab2:	4650      	mov	r0, sl
 8014ab4:	f7eb fb8c 	bl	80001d0 <memchr>
 8014ab8:	b138      	cbz	r0, 8014aca <_vfiprintf_r+0x17a>
 8014aba:	9b04      	ldr	r3, [sp, #16]
 8014abc:	eba0 000a 	sub.w	r0, r0, sl
 8014ac0:	2240      	movs	r2, #64	; 0x40
 8014ac2:	4082      	lsls	r2, r0
 8014ac4:	4313      	orrs	r3, r2
 8014ac6:	3401      	adds	r4, #1
 8014ac8:	9304      	str	r3, [sp, #16]
 8014aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ace:	4829      	ldr	r0, [pc, #164]	; (8014b74 <_vfiprintf_r+0x224>)
 8014ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ad4:	2206      	movs	r2, #6
 8014ad6:	f7eb fb7b 	bl	80001d0 <memchr>
 8014ada:	2800      	cmp	r0, #0
 8014adc:	d03f      	beq.n	8014b5e <_vfiprintf_r+0x20e>
 8014ade:	4b26      	ldr	r3, [pc, #152]	; (8014b78 <_vfiprintf_r+0x228>)
 8014ae0:	bb1b      	cbnz	r3, 8014b2a <_vfiprintf_r+0x1da>
 8014ae2:	9b03      	ldr	r3, [sp, #12]
 8014ae4:	3307      	adds	r3, #7
 8014ae6:	f023 0307 	bic.w	r3, r3, #7
 8014aea:	3308      	adds	r3, #8
 8014aec:	9303      	str	r3, [sp, #12]
 8014aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014af0:	443b      	add	r3, r7
 8014af2:	9309      	str	r3, [sp, #36]	; 0x24
 8014af4:	e768      	b.n	80149c8 <_vfiprintf_r+0x78>
 8014af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014afa:	460c      	mov	r4, r1
 8014afc:	2001      	movs	r0, #1
 8014afe:	e7a6      	b.n	8014a4e <_vfiprintf_r+0xfe>
 8014b00:	2300      	movs	r3, #0
 8014b02:	3401      	adds	r4, #1
 8014b04:	9305      	str	r3, [sp, #20]
 8014b06:	4619      	mov	r1, r3
 8014b08:	f04f 0c0a 	mov.w	ip, #10
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b12:	3a30      	subs	r2, #48	; 0x30
 8014b14:	2a09      	cmp	r2, #9
 8014b16:	d903      	bls.n	8014b20 <_vfiprintf_r+0x1d0>
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d0c6      	beq.n	8014aaa <_vfiprintf_r+0x15a>
 8014b1c:	9105      	str	r1, [sp, #20]
 8014b1e:	e7c4      	b.n	8014aaa <_vfiprintf_r+0x15a>
 8014b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b24:	4604      	mov	r4, r0
 8014b26:	2301      	movs	r3, #1
 8014b28:	e7f0      	b.n	8014b0c <_vfiprintf_r+0x1bc>
 8014b2a:	ab03      	add	r3, sp, #12
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	462a      	mov	r2, r5
 8014b30:	4b12      	ldr	r3, [pc, #72]	; (8014b7c <_vfiprintf_r+0x22c>)
 8014b32:	a904      	add	r1, sp, #16
 8014b34:	4630      	mov	r0, r6
 8014b36:	f7fc f927 	bl	8010d88 <_printf_float>
 8014b3a:	4607      	mov	r7, r0
 8014b3c:	1c78      	adds	r0, r7, #1
 8014b3e:	d1d6      	bne.n	8014aee <_vfiprintf_r+0x19e>
 8014b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b42:	07d9      	lsls	r1, r3, #31
 8014b44:	d405      	bmi.n	8014b52 <_vfiprintf_r+0x202>
 8014b46:	89ab      	ldrh	r3, [r5, #12]
 8014b48:	059a      	lsls	r2, r3, #22
 8014b4a:	d402      	bmi.n	8014b52 <_vfiprintf_r+0x202>
 8014b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b4e:	f7fd fa9f 	bl	8012090 <__retarget_lock_release_recursive>
 8014b52:	89ab      	ldrh	r3, [r5, #12]
 8014b54:	065b      	lsls	r3, r3, #25
 8014b56:	f53f af1d 	bmi.w	8014994 <_vfiprintf_r+0x44>
 8014b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b5c:	e71c      	b.n	8014998 <_vfiprintf_r+0x48>
 8014b5e:	ab03      	add	r3, sp, #12
 8014b60:	9300      	str	r3, [sp, #0]
 8014b62:	462a      	mov	r2, r5
 8014b64:	4b05      	ldr	r3, [pc, #20]	; (8014b7c <_vfiprintf_r+0x22c>)
 8014b66:	a904      	add	r1, sp, #16
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f7fc fbb1 	bl	80112d0 <_printf_i>
 8014b6e:	e7e4      	b.n	8014b3a <_vfiprintf_r+0x1ea>
 8014b70:	08017179 	.word	0x08017179
 8014b74:	08017183 	.word	0x08017183
 8014b78:	08010d89 	.word	0x08010d89
 8014b7c:	0801492b 	.word	0x0801492b
 8014b80:	0801717f 	.word	0x0801717f

08014b84 <__sflush_r>:
 8014b84:	898a      	ldrh	r2, [r1, #12]
 8014b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b8a:	4605      	mov	r5, r0
 8014b8c:	0710      	lsls	r0, r2, #28
 8014b8e:	460c      	mov	r4, r1
 8014b90:	d458      	bmi.n	8014c44 <__sflush_r+0xc0>
 8014b92:	684b      	ldr	r3, [r1, #4]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	dc05      	bgt.n	8014ba4 <__sflush_r+0x20>
 8014b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	dc02      	bgt.n	8014ba4 <__sflush_r+0x20>
 8014b9e:	2000      	movs	r0, #0
 8014ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ba6:	2e00      	cmp	r6, #0
 8014ba8:	d0f9      	beq.n	8014b9e <__sflush_r+0x1a>
 8014baa:	2300      	movs	r3, #0
 8014bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014bb0:	682f      	ldr	r7, [r5, #0]
 8014bb2:	6a21      	ldr	r1, [r4, #32]
 8014bb4:	602b      	str	r3, [r5, #0]
 8014bb6:	d032      	beq.n	8014c1e <__sflush_r+0x9a>
 8014bb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014bba:	89a3      	ldrh	r3, [r4, #12]
 8014bbc:	075a      	lsls	r2, r3, #29
 8014bbe:	d505      	bpl.n	8014bcc <__sflush_r+0x48>
 8014bc0:	6863      	ldr	r3, [r4, #4]
 8014bc2:	1ac0      	subs	r0, r0, r3
 8014bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014bc6:	b10b      	cbz	r3, 8014bcc <__sflush_r+0x48>
 8014bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014bca:	1ac0      	subs	r0, r0, r3
 8014bcc:	2300      	movs	r3, #0
 8014bce:	4602      	mov	r2, r0
 8014bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bd2:	6a21      	ldr	r1, [r4, #32]
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	47b0      	blx	r6
 8014bd8:	1c43      	adds	r3, r0, #1
 8014bda:	89a3      	ldrh	r3, [r4, #12]
 8014bdc:	d106      	bne.n	8014bec <__sflush_r+0x68>
 8014bde:	6829      	ldr	r1, [r5, #0]
 8014be0:	291d      	cmp	r1, #29
 8014be2:	d82b      	bhi.n	8014c3c <__sflush_r+0xb8>
 8014be4:	4a29      	ldr	r2, [pc, #164]	; (8014c8c <__sflush_r+0x108>)
 8014be6:	410a      	asrs	r2, r1
 8014be8:	07d6      	lsls	r6, r2, #31
 8014bea:	d427      	bmi.n	8014c3c <__sflush_r+0xb8>
 8014bec:	2200      	movs	r2, #0
 8014bee:	6062      	str	r2, [r4, #4]
 8014bf0:	04d9      	lsls	r1, r3, #19
 8014bf2:	6922      	ldr	r2, [r4, #16]
 8014bf4:	6022      	str	r2, [r4, #0]
 8014bf6:	d504      	bpl.n	8014c02 <__sflush_r+0x7e>
 8014bf8:	1c42      	adds	r2, r0, #1
 8014bfa:	d101      	bne.n	8014c00 <__sflush_r+0x7c>
 8014bfc:	682b      	ldr	r3, [r5, #0]
 8014bfe:	b903      	cbnz	r3, 8014c02 <__sflush_r+0x7e>
 8014c00:	6560      	str	r0, [r4, #84]	; 0x54
 8014c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c04:	602f      	str	r7, [r5, #0]
 8014c06:	2900      	cmp	r1, #0
 8014c08:	d0c9      	beq.n	8014b9e <__sflush_r+0x1a>
 8014c0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c0e:	4299      	cmp	r1, r3
 8014c10:	d002      	beq.n	8014c18 <__sflush_r+0x94>
 8014c12:	4628      	mov	r0, r5
 8014c14:	f7fe f8d6 	bl	8012dc4 <_free_r>
 8014c18:	2000      	movs	r0, #0
 8014c1a:	6360      	str	r0, [r4, #52]	; 0x34
 8014c1c:	e7c0      	b.n	8014ba0 <__sflush_r+0x1c>
 8014c1e:	2301      	movs	r3, #1
 8014c20:	4628      	mov	r0, r5
 8014c22:	47b0      	blx	r6
 8014c24:	1c41      	adds	r1, r0, #1
 8014c26:	d1c8      	bne.n	8014bba <__sflush_r+0x36>
 8014c28:	682b      	ldr	r3, [r5, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d0c5      	beq.n	8014bba <__sflush_r+0x36>
 8014c2e:	2b1d      	cmp	r3, #29
 8014c30:	d001      	beq.n	8014c36 <__sflush_r+0xb2>
 8014c32:	2b16      	cmp	r3, #22
 8014c34:	d101      	bne.n	8014c3a <__sflush_r+0xb6>
 8014c36:	602f      	str	r7, [r5, #0]
 8014c38:	e7b1      	b.n	8014b9e <__sflush_r+0x1a>
 8014c3a:	89a3      	ldrh	r3, [r4, #12]
 8014c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c40:	81a3      	strh	r3, [r4, #12]
 8014c42:	e7ad      	b.n	8014ba0 <__sflush_r+0x1c>
 8014c44:	690f      	ldr	r7, [r1, #16]
 8014c46:	2f00      	cmp	r7, #0
 8014c48:	d0a9      	beq.n	8014b9e <__sflush_r+0x1a>
 8014c4a:	0793      	lsls	r3, r2, #30
 8014c4c:	680e      	ldr	r6, [r1, #0]
 8014c4e:	bf08      	it	eq
 8014c50:	694b      	ldreq	r3, [r1, #20]
 8014c52:	600f      	str	r7, [r1, #0]
 8014c54:	bf18      	it	ne
 8014c56:	2300      	movne	r3, #0
 8014c58:	eba6 0807 	sub.w	r8, r6, r7
 8014c5c:	608b      	str	r3, [r1, #8]
 8014c5e:	f1b8 0f00 	cmp.w	r8, #0
 8014c62:	dd9c      	ble.n	8014b9e <__sflush_r+0x1a>
 8014c64:	6a21      	ldr	r1, [r4, #32]
 8014c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014c68:	4643      	mov	r3, r8
 8014c6a:	463a      	mov	r2, r7
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	47b0      	blx	r6
 8014c70:	2800      	cmp	r0, #0
 8014c72:	dc06      	bgt.n	8014c82 <__sflush_r+0xfe>
 8014c74:	89a3      	ldrh	r3, [r4, #12]
 8014c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c7a:	81a3      	strh	r3, [r4, #12]
 8014c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c80:	e78e      	b.n	8014ba0 <__sflush_r+0x1c>
 8014c82:	4407      	add	r7, r0
 8014c84:	eba8 0800 	sub.w	r8, r8, r0
 8014c88:	e7e9      	b.n	8014c5e <__sflush_r+0xda>
 8014c8a:	bf00      	nop
 8014c8c:	dfbffffe 	.word	0xdfbffffe

08014c90 <_fflush_r>:
 8014c90:	b538      	push	{r3, r4, r5, lr}
 8014c92:	690b      	ldr	r3, [r1, #16]
 8014c94:	4605      	mov	r5, r0
 8014c96:	460c      	mov	r4, r1
 8014c98:	b913      	cbnz	r3, 8014ca0 <_fflush_r+0x10>
 8014c9a:	2500      	movs	r5, #0
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ca0:	b118      	cbz	r0, 8014caa <_fflush_r+0x1a>
 8014ca2:	6a03      	ldr	r3, [r0, #32]
 8014ca4:	b90b      	cbnz	r3, 8014caa <_fflush_r+0x1a>
 8014ca6:	f7fc fed1 	bl	8011a4c <__sinit>
 8014caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d0f3      	beq.n	8014c9a <_fflush_r+0xa>
 8014cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014cb4:	07d0      	lsls	r0, r2, #31
 8014cb6:	d404      	bmi.n	8014cc2 <_fflush_r+0x32>
 8014cb8:	0599      	lsls	r1, r3, #22
 8014cba:	d402      	bmi.n	8014cc2 <_fflush_r+0x32>
 8014cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cbe:	f7fd f9e6 	bl	801208e <__retarget_lock_acquire_recursive>
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	4621      	mov	r1, r4
 8014cc6:	f7ff ff5d 	bl	8014b84 <__sflush_r>
 8014cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ccc:	07da      	lsls	r2, r3, #31
 8014cce:	4605      	mov	r5, r0
 8014cd0:	d4e4      	bmi.n	8014c9c <_fflush_r+0xc>
 8014cd2:	89a3      	ldrh	r3, [r4, #12]
 8014cd4:	059b      	lsls	r3, r3, #22
 8014cd6:	d4e1      	bmi.n	8014c9c <_fflush_r+0xc>
 8014cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cda:	f7fd f9d9 	bl	8012090 <__retarget_lock_release_recursive>
 8014cde:	e7dd      	b.n	8014c9c <_fflush_r+0xc>

08014ce0 <__swhatbuf_r>:
 8014ce0:	b570      	push	{r4, r5, r6, lr}
 8014ce2:	460c      	mov	r4, r1
 8014ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ce8:	2900      	cmp	r1, #0
 8014cea:	b096      	sub	sp, #88	; 0x58
 8014cec:	4615      	mov	r5, r2
 8014cee:	461e      	mov	r6, r3
 8014cf0:	da0d      	bge.n	8014d0e <__swhatbuf_r+0x2e>
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014cf8:	f04f 0100 	mov.w	r1, #0
 8014cfc:	bf0c      	ite	eq
 8014cfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014d02:	2340      	movne	r3, #64	; 0x40
 8014d04:	2000      	movs	r0, #0
 8014d06:	6031      	str	r1, [r6, #0]
 8014d08:	602b      	str	r3, [r5, #0]
 8014d0a:	b016      	add	sp, #88	; 0x58
 8014d0c:	bd70      	pop	{r4, r5, r6, pc}
 8014d0e:	466a      	mov	r2, sp
 8014d10:	f000 f878 	bl	8014e04 <_fstat_r>
 8014d14:	2800      	cmp	r0, #0
 8014d16:	dbec      	blt.n	8014cf2 <__swhatbuf_r+0x12>
 8014d18:	9901      	ldr	r1, [sp, #4]
 8014d1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014d1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014d22:	4259      	negs	r1, r3
 8014d24:	4159      	adcs	r1, r3
 8014d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d2a:	e7eb      	b.n	8014d04 <__swhatbuf_r+0x24>

08014d2c <__smakebuf_r>:
 8014d2c:	898b      	ldrh	r3, [r1, #12]
 8014d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d30:	079d      	lsls	r5, r3, #30
 8014d32:	4606      	mov	r6, r0
 8014d34:	460c      	mov	r4, r1
 8014d36:	d507      	bpl.n	8014d48 <__smakebuf_r+0x1c>
 8014d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d3c:	6023      	str	r3, [r4, #0]
 8014d3e:	6123      	str	r3, [r4, #16]
 8014d40:	2301      	movs	r3, #1
 8014d42:	6163      	str	r3, [r4, #20]
 8014d44:	b002      	add	sp, #8
 8014d46:	bd70      	pop	{r4, r5, r6, pc}
 8014d48:	ab01      	add	r3, sp, #4
 8014d4a:	466a      	mov	r2, sp
 8014d4c:	f7ff ffc8 	bl	8014ce0 <__swhatbuf_r>
 8014d50:	9900      	ldr	r1, [sp, #0]
 8014d52:	4605      	mov	r5, r0
 8014d54:	4630      	mov	r0, r6
 8014d56:	f7fe f8a9 	bl	8012eac <_malloc_r>
 8014d5a:	b948      	cbnz	r0, 8014d70 <__smakebuf_r+0x44>
 8014d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d60:	059a      	lsls	r2, r3, #22
 8014d62:	d4ef      	bmi.n	8014d44 <__smakebuf_r+0x18>
 8014d64:	f023 0303 	bic.w	r3, r3, #3
 8014d68:	f043 0302 	orr.w	r3, r3, #2
 8014d6c:	81a3      	strh	r3, [r4, #12]
 8014d6e:	e7e3      	b.n	8014d38 <__smakebuf_r+0xc>
 8014d70:	89a3      	ldrh	r3, [r4, #12]
 8014d72:	6020      	str	r0, [r4, #0]
 8014d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d78:	81a3      	strh	r3, [r4, #12]
 8014d7a:	9b00      	ldr	r3, [sp, #0]
 8014d7c:	6163      	str	r3, [r4, #20]
 8014d7e:	9b01      	ldr	r3, [sp, #4]
 8014d80:	6120      	str	r0, [r4, #16]
 8014d82:	b15b      	cbz	r3, 8014d9c <__smakebuf_r+0x70>
 8014d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d88:	4630      	mov	r0, r6
 8014d8a:	f000 f84d 	bl	8014e28 <_isatty_r>
 8014d8e:	b128      	cbz	r0, 8014d9c <__smakebuf_r+0x70>
 8014d90:	89a3      	ldrh	r3, [r4, #12]
 8014d92:	f023 0303 	bic.w	r3, r3, #3
 8014d96:	f043 0301 	orr.w	r3, r3, #1
 8014d9a:	81a3      	strh	r3, [r4, #12]
 8014d9c:	89a3      	ldrh	r3, [r4, #12]
 8014d9e:	431d      	orrs	r5, r3
 8014da0:	81a5      	strh	r5, [r4, #12]
 8014da2:	e7cf      	b.n	8014d44 <__smakebuf_r+0x18>

08014da4 <_raise_r>:
 8014da4:	291f      	cmp	r1, #31
 8014da6:	b538      	push	{r3, r4, r5, lr}
 8014da8:	4604      	mov	r4, r0
 8014daa:	460d      	mov	r5, r1
 8014dac:	d904      	bls.n	8014db8 <_raise_r+0x14>
 8014dae:	2316      	movs	r3, #22
 8014db0:	6003      	str	r3, [r0, #0]
 8014db2:	f04f 30ff 	mov.w	r0, #4294967295
 8014db6:	bd38      	pop	{r3, r4, r5, pc}
 8014db8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014dba:	b112      	cbz	r2, 8014dc2 <_raise_r+0x1e>
 8014dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014dc0:	b94b      	cbnz	r3, 8014dd6 <_raise_r+0x32>
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f000 f852 	bl	8014e6c <_getpid_r>
 8014dc8:	462a      	mov	r2, r5
 8014dca:	4601      	mov	r1, r0
 8014dcc:	4620      	mov	r0, r4
 8014dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014dd2:	f000 b839 	b.w	8014e48 <_kill_r>
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d00a      	beq.n	8014df0 <_raise_r+0x4c>
 8014dda:	1c59      	adds	r1, r3, #1
 8014ddc:	d103      	bne.n	8014de6 <_raise_r+0x42>
 8014dde:	2316      	movs	r3, #22
 8014de0:	6003      	str	r3, [r0, #0]
 8014de2:	2001      	movs	r0, #1
 8014de4:	e7e7      	b.n	8014db6 <_raise_r+0x12>
 8014de6:	2400      	movs	r4, #0
 8014de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014dec:	4628      	mov	r0, r5
 8014dee:	4798      	blx	r3
 8014df0:	2000      	movs	r0, #0
 8014df2:	e7e0      	b.n	8014db6 <_raise_r+0x12>

08014df4 <raise>:
 8014df4:	4b02      	ldr	r3, [pc, #8]	; (8014e00 <raise+0xc>)
 8014df6:	4601      	mov	r1, r0
 8014df8:	6818      	ldr	r0, [r3, #0]
 8014dfa:	f7ff bfd3 	b.w	8014da4 <_raise_r>
 8014dfe:	bf00      	nop
 8014e00:	2000016c 	.word	0x2000016c

08014e04 <_fstat_r>:
 8014e04:	b538      	push	{r3, r4, r5, lr}
 8014e06:	4d07      	ldr	r5, [pc, #28]	; (8014e24 <_fstat_r+0x20>)
 8014e08:	2300      	movs	r3, #0
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	4608      	mov	r0, r1
 8014e0e:	4611      	mov	r1, r2
 8014e10:	602b      	str	r3, [r5, #0]
 8014e12:	f7ed ff89 	bl	8002d28 <_fstat>
 8014e16:	1c43      	adds	r3, r0, #1
 8014e18:	d102      	bne.n	8014e20 <_fstat_r+0x1c>
 8014e1a:	682b      	ldr	r3, [r5, #0]
 8014e1c:	b103      	cbz	r3, 8014e20 <_fstat_r+0x1c>
 8014e1e:	6023      	str	r3, [r4, #0]
 8014e20:	bd38      	pop	{r3, r4, r5, pc}
 8014e22:	bf00      	nop
 8014e24:	20003b90 	.word	0x20003b90

08014e28 <_isatty_r>:
 8014e28:	b538      	push	{r3, r4, r5, lr}
 8014e2a:	4d06      	ldr	r5, [pc, #24]	; (8014e44 <_isatty_r+0x1c>)
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	4604      	mov	r4, r0
 8014e30:	4608      	mov	r0, r1
 8014e32:	602b      	str	r3, [r5, #0]
 8014e34:	f7ed ff88 	bl	8002d48 <_isatty>
 8014e38:	1c43      	adds	r3, r0, #1
 8014e3a:	d102      	bne.n	8014e42 <_isatty_r+0x1a>
 8014e3c:	682b      	ldr	r3, [r5, #0]
 8014e3e:	b103      	cbz	r3, 8014e42 <_isatty_r+0x1a>
 8014e40:	6023      	str	r3, [r4, #0]
 8014e42:	bd38      	pop	{r3, r4, r5, pc}
 8014e44:	20003b90 	.word	0x20003b90

08014e48 <_kill_r>:
 8014e48:	b538      	push	{r3, r4, r5, lr}
 8014e4a:	4d07      	ldr	r5, [pc, #28]	; (8014e68 <_kill_r+0x20>)
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	4604      	mov	r4, r0
 8014e50:	4608      	mov	r0, r1
 8014e52:	4611      	mov	r1, r2
 8014e54:	602b      	str	r3, [r5, #0]
 8014e56:	f7ed ff24 	bl	8002ca2 <_kill>
 8014e5a:	1c43      	adds	r3, r0, #1
 8014e5c:	d102      	bne.n	8014e64 <_kill_r+0x1c>
 8014e5e:	682b      	ldr	r3, [r5, #0]
 8014e60:	b103      	cbz	r3, 8014e64 <_kill_r+0x1c>
 8014e62:	6023      	str	r3, [r4, #0]
 8014e64:	bd38      	pop	{r3, r4, r5, pc}
 8014e66:	bf00      	nop
 8014e68:	20003b90 	.word	0x20003b90

08014e6c <_getpid_r>:
 8014e6c:	f7ed bf11 	b.w	8002c92 <_getpid>

08014e70 <_sbrk_r>:
 8014e70:	b538      	push	{r3, r4, r5, lr}
 8014e72:	4d06      	ldr	r5, [pc, #24]	; (8014e8c <_sbrk_r+0x1c>)
 8014e74:	2300      	movs	r3, #0
 8014e76:	4604      	mov	r4, r0
 8014e78:	4608      	mov	r0, r1
 8014e7a:	602b      	str	r3, [r5, #0]
 8014e7c:	f7ed ff7c 	bl	8002d78 <_sbrk>
 8014e80:	1c43      	adds	r3, r0, #1
 8014e82:	d102      	bne.n	8014e8a <_sbrk_r+0x1a>
 8014e84:	682b      	ldr	r3, [r5, #0]
 8014e86:	b103      	cbz	r3, 8014e8a <_sbrk_r+0x1a>
 8014e88:	6023      	str	r3, [r4, #0]
 8014e8a:	bd38      	pop	{r3, r4, r5, pc}
 8014e8c:	20003b90 	.word	0x20003b90

08014e90 <nan>:
 8014e90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014e98 <nan+0x8>
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop
 8014e98:	00000000 	.word	0x00000000
 8014e9c:	7ff80000 	.word	0x7ff80000

08014ea0 <_calloc_r>:
 8014ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ea2:	fba1 2402 	umull	r2, r4, r1, r2
 8014ea6:	b94c      	cbnz	r4, 8014ebc <_calloc_r+0x1c>
 8014ea8:	4611      	mov	r1, r2
 8014eaa:	9201      	str	r2, [sp, #4]
 8014eac:	f7fd fffe 	bl	8012eac <_malloc_r>
 8014eb0:	9a01      	ldr	r2, [sp, #4]
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	b930      	cbnz	r0, 8014ec4 <_calloc_r+0x24>
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	b003      	add	sp, #12
 8014eba:	bd30      	pop	{r4, r5, pc}
 8014ebc:	220c      	movs	r2, #12
 8014ebe:	6002      	str	r2, [r0, #0]
 8014ec0:	2500      	movs	r5, #0
 8014ec2:	e7f8      	b.n	8014eb6 <_calloc_r+0x16>
 8014ec4:	4621      	mov	r1, r4
 8014ec6:	f7fc ffcd 	bl	8011e64 <memset>
 8014eca:	e7f4      	b.n	8014eb6 <_calloc_r+0x16>

08014ecc <rshift>:
 8014ecc:	6903      	ldr	r3, [r0, #16]
 8014ece:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ed2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ed6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014eda:	f100 0414 	add.w	r4, r0, #20
 8014ede:	dd45      	ble.n	8014f6c <rshift+0xa0>
 8014ee0:	f011 011f 	ands.w	r1, r1, #31
 8014ee4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014ee8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014eec:	d10c      	bne.n	8014f08 <rshift+0x3c>
 8014eee:	f100 0710 	add.w	r7, r0, #16
 8014ef2:	4629      	mov	r1, r5
 8014ef4:	42b1      	cmp	r1, r6
 8014ef6:	d334      	bcc.n	8014f62 <rshift+0x96>
 8014ef8:	1a9b      	subs	r3, r3, r2
 8014efa:	009b      	lsls	r3, r3, #2
 8014efc:	1eea      	subs	r2, r5, #3
 8014efe:	4296      	cmp	r6, r2
 8014f00:	bf38      	it	cc
 8014f02:	2300      	movcc	r3, #0
 8014f04:	4423      	add	r3, r4
 8014f06:	e015      	b.n	8014f34 <rshift+0x68>
 8014f08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014f0c:	f1c1 0820 	rsb	r8, r1, #32
 8014f10:	40cf      	lsrs	r7, r1
 8014f12:	f105 0e04 	add.w	lr, r5, #4
 8014f16:	46a1      	mov	r9, r4
 8014f18:	4576      	cmp	r6, lr
 8014f1a:	46f4      	mov	ip, lr
 8014f1c:	d815      	bhi.n	8014f4a <rshift+0x7e>
 8014f1e:	1a9a      	subs	r2, r3, r2
 8014f20:	0092      	lsls	r2, r2, #2
 8014f22:	3a04      	subs	r2, #4
 8014f24:	3501      	adds	r5, #1
 8014f26:	42ae      	cmp	r6, r5
 8014f28:	bf38      	it	cc
 8014f2a:	2200      	movcc	r2, #0
 8014f2c:	18a3      	adds	r3, r4, r2
 8014f2e:	50a7      	str	r7, [r4, r2]
 8014f30:	b107      	cbz	r7, 8014f34 <rshift+0x68>
 8014f32:	3304      	adds	r3, #4
 8014f34:	1b1a      	subs	r2, r3, r4
 8014f36:	42a3      	cmp	r3, r4
 8014f38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014f3c:	bf08      	it	eq
 8014f3e:	2300      	moveq	r3, #0
 8014f40:	6102      	str	r2, [r0, #16]
 8014f42:	bf08      	it	eq
 8014f44:	6143      	streq	r3, [r0, #20]
 8014f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f4a:	f8dc c000 	ldr.w	ip, [ip]
 8014f4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014f52:	ea4c 0707 	orr.w	r7, ip, r7
 8014f56:	f849 7b04 	str.w	r7, [r9], #4
 8014f5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014f5e:	40cf      	lsrs	r7, r1
 8014f60:	e7da      	b.n	8014f18 <rshift+0x4c>
 8014f62:	f851 cb04 	ldr.w	ip, [r1], #4
 8014f66:	f847 cf04 	str.w	ip, [r7, #4]!
 8014f6a:	e7c3      	b.n	8014ef4 <rshift+0x28>
 8014f6c:	4623      	mov	r3, r4
 8014f6e:	e7e1      	b.n	8014f34 <rshift+0x68>

08014f70 <__hexdig_fun>:
 8014f70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014f74:	2b09      	cmp	r3, #9
 8014f76:	d802      	bhi.n	8014f7e <__hexdig_fun+0xe>
 8014f78:	3820      	subs	r0, #32
 8014f7a:	b2c0      	uxtb	r0, r0
 8014f7c:	4770      	bx	lr
 8014f7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014f82:	2b05      	cmp	r3, #5
 8014f84:	d801      	bhi.n	8014f8a <__hexdig_fun+0x1a>
 8014f86:	3847      	subs	r0, #71	; 0x47
 8014f88:	e7f7      	b.n	8014f7a <__hexdig_fun+0xa>
 8014f8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014f8e:	2b05      	cmp	r3, #5
 8014f90:	d801      	bhi.n	8014f96 <__hexdig_fun+0x26>
 8014f92:	3827      	subs	r0, #39	; 0x27
 8014f94:	e7f1      	b.n	8014f7a <__hexdig_fun+0xa>
 8014f96:	2000      	movs	r0, #0
 8014f98:	4770      	bx	lr
	...

08014f9c <__gethex>:
 8014f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa0:	4617      	mov	r7, r2
 8014fa2:	680a      	ldr	r2, [r1, #0]
 8014fa4:	b085      	sub	sp, #20
 8014fa6:	f102 0b02 	add.w	fp, r2, #2
 8014faa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014fae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014fb2:	4681      	mov	r9, r0
 8014fb4:	468a      	mov	sl, r1
 8014fb6:	9302      	str	r3, [sp, #8]
 8014fb8:	32fe      	adds	r2, #254	; 0xfe
 8014fba:	eb02 030b 	add.w	r3, r2, fp
 8014fbe:	46d8      	mov	r8, fp
 8014fc0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014fc4:	9301      	str	r3, [sp, #4]
 8014fc6:	2830      	cmp	r0, #48	; 0x30
 8014fc8:	d0f7      	beq.n	8014fba <__gethex+0x1e>
 8014fca:	f7ff ffd1 	bl	8014f70 <__hexdig_fun>
 8014fce:	4604      	mov	r4, r0
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	d138      	bne.n	8015046 <__gethex+0xaa>
 8014fd4:	49a7      	ldr	r1, [pc, #668]	; (8015274 <__gethex+0x2d8>)
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	4640      	mov	r0, r8
 8014fda:	f7fc ff4b 	bl	8011e74 <strncmp>
 8014fde:	4606      	mov	r6, r0
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d169      	bne.n	80150b8 <__gethex+0x11c>
 8014fe4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014fe8:	465d      	mov	r5, fp
 8014fea:	f7ff ffc1 	bl	8014f70 <__hexdig_fun>
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	d064      	beq.n	80150bc <__gethex+0x120>
 8014ff2:	465a      	mov	r2, fp
 8014ff4:	7810      	ldrb	r0, [r2, #0]
 8014ff6:	2830      	cmp	r0, #48	; 0x30
 8014ff8:	4690      	mov	r8, r2
 8014ffa:	f102 0201 	add.w	r2, r2, #1
 8014ffe:	d0f9      	beq.n	8014ff4 <__gethex+0x58>
 8015000:	f7ff ffb6 	bl	8014f70 <__hexdig_fun>
 8015004:	2301      	movs	r3, #1
 8015006:	fab0 f480 	clz	r4, r0
 801500a:	0964      	lsrs	r4, r4, #5
 801500c:	465e      	mov	r6, fp
 801500e:	9301      	str	r3, [sp, #4]
 8015010:	4642      	mov	r2, r8
 8015012:	4615      	mov	r5, r2
 8015014:	3201      	adds	r2, #1
 8015016:	7828      	ldrb	r0, [r5, #0]
 8015018:	f7ff ffaa 	bl	8014f70 <__hexdig_fun>
 801501c:	2800      	cmp	r0, #0
 801501e:	d1f8      	bne.n	8015012 <__gethex+0x76>
 8015020:	4994      	ldr	r1, [pc, #592]	; (8015274 <__gethex+0x2d8>)
 8015022:	2201      	movs	r2, #1
 8015024:	4628      	mov	r0, r5
 8015026:	f7fc ff25 	bl	8011e74 <strncmp>
 801502a:	b978      	cbnz	r0, 801504c <__gethex+0xb0>
 801502c:	b946      	cbnz	r6, 8015040 <__gethex+0xa4>
 801502e:	1c6e      	adds	r6, r5, #1
 8015030:	4632      	mov	r2, r6
 8015032:	4615      	mov	r5, r2
 8015034:	3201      	adds	r2, #1
 8015036:	7828      	ldrb	r0, [r5, #0]
 8015038:	f7ff ff9a 	bl	8014f70 <__hexdig_fun>
 801503c:	2800      	cmp	r0, #0
 801503e:	d1f8      	bne.n	8015032 <__gethex+0x96>
 8015040:	1b73      	subs	r3, r6, r5
 8015042:	009e      	lsls	r6, r3, #2
 8015044:	e004      	b.n	8015050 <__gethex+0xb4>
 8015046:	2400      	movs	r4, #0
 8015048:	4626      	mov	r6, r4
 801504a:	e7e1      	b.n	8015010 <__gethex+0x74>
 801504c:	2e00      	cmp	r6, #0
 801504e:	d1f7      	bne.n	8015040 <__gethex+0xa4>
 8015050:	782b      	ldrb	r3, [r5, #0]
 8015052:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015056:	2b50      	cmp	r3, #80	; 0x50
 8015058:	d13d      	bne.n	80150d6 <__gethex+0x13a>
 801505a:	786b      	ldrb	r3, [r5, #1]
 801505c:	2b2b      	cmp	r3, #43	; 0x2b
 801505e:	d02f      	beq.n	80150c0 <__gethex+0x124>
 8015060:	2b2d      	cmp	r3, #45	; 0x2d
 8015062:	d031      	beq.n	80150c8 <__gethex+0x12c>
 8015064:	1c69      	adds	r1, r5, #1
 8015066:	f04f 0b00 	mov.w	fp, #0
 801506a:	7808      	ldrb	r0, [r1, #0]
 801506c:	f7ff ff80 	bl	8014f70 <__hexdig_fun>
 8015070:	1e42      	subs	r2, r0, #1
 8015072:	b2d2      	uxtb	r2, r2
 8015074:	2a18      	cmp	r2, #24
 8015076:	d82e      	bhi.n	80150d6 <__gethex+0x13a>
 8015078:	f1a0 0210 	sub.w	r2, r0, #16
 801507c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015080:	f7ff ff76 	bl	8014f70 <__hexdig_fun>
 8015084:	f100 3cff 	add.w	ip, r0, #4294967295
 8015088:	fa5f fc8c 	uxtb.w	ip, ip
 801508c:	f1bc 0f18 	cmp.w	ip, #24
 8015090:	d91d      	bls.n	80150ce <__gethex+0x132>
 8015092:	f1bb 0f00 	cmp.w	fp, #0
 8015096:	d000      	beq.n	801509a <__gethex+0xfe>
 8015098:	4252      	negs	r2, r2
 801509a:	4416      	add	r6, r2
 801509c:	f8ca 1000 	str.w	r1, [sl]
 80150a0:	b1dc      	cbz	r4, 80150da <__gethex+0x13e>
 80150a2:	9b01      	ldr	r3, [sp, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	bf14      	ite	ne
 80150a8:	f04f 0800 	movne.w	r8, #0
 80150ac:	f04f 0806 	moveq.w	r8, #6
 80150b0:	4640      	mov	r0, r8
 80150b2:	b005      	add	sp, #20
 80150b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150b8:	4645      	mov	r5, r8
 80150ba:	4626      	mov	r6, r4
 80150bc:	2401      	movs	r4, #1
 80150be:	e7c7      	b.n	8015050 <__gethex+0xb4>
 80150c0:	f04f 0b00 	mov.w	fp, #0
 80150c4:	1ca9      	adds	r1, r5, #2
 80150c6:	e7d0      	b.n	801506a <__gethex+0xce>
 80150c8:	f04f 0b01 	mov.w	fp, #1
 80150cc:	e7fa      	b.n	80150c4 <__gethex+0x128>
 80150ce:	230a      	movs	r3, #10
 80150d0:	fb03 0002 	mla	r0, r3, r2, r0
 80150d4:	e7d0      	b.n	8015078 <__gethex+0xdc>
 80150d6:	4629      	mov	r1, r5
 80150d8:	e7e0      	b.n	801509c <__gethex+0x100>
 80150da:	eba5 0308 	sub.w	r3, r5, r8
 80150de:	3b01      	subs	r3, #1
 80150e0:	4621      	mov	r1, r4
 80150e2:	2b07      	cmp	r3, #7
 80150e4:	dc0a      	bgt.n	80150fc <__gethex+0x160>
 80150e6:	4648      	mov	r0, r9
 80150e8:	f7fd ff6c 	bl	8012fc4 <_Balloc>
 80150ec:	4604      	mov	r4, r0
 80150ee:	b940      	cbnz	r0, 8015102 <__gethex+0x166>
 80150f0:	4b61      	ldr	r3, [pc, #388]	; (8015278 <__gethex+0x2dc>)
 80150f2:	4602      	mov	r2, r0
 80150f4:	21e4      	movs	r1, #228	; 0xe4
 80150f6:	4861      	ldr	r0, [pc, #388]	; (801527c <__gethex+0x2e0>)
 80150f8:	f7fb fd88 	bl	8010c0c <__assert_func>
 80150fc:	3101      	adds	r1, #1
 80150fe:	105b      	asrs	r3, r3, #1
 8015100:	e7ef      	b.n	80150e2 <__gethex+0x146>
 8015102:	f100 0a14 	add.w	sl, r0, #20
 8015106:	2300      	movs	r3, #0
 8015108:	495a      	ldr	r1, [pc, #360]	; (8015274 <__gethex+0x2d8>)
 801510a:	f8cd a004 	str.w	sl, [sp, #4]
 801510e:	469b      	mov	fp, r3
 8015110:	45a8      	cmp	r8, r5
 8015112:	d342      	bcc.n	801519a <__gethex+0x1fe>
 8015114:	9801      	ldr	r0, [sp, #4]
 8015116:	f840 bb04 	str.w	fp, [r0], #4
 801511a:	eba0 000a 	sub.w	r0, r0, sl
 801511e:	1080      	asrs	r0, r0, #2
 8015120:	6120      	str	r0, [r4, #16]
 8015122:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015126:	4658      	mov	r0, fp
 8015128:	f7fe f83e 	bl	80131a8 <__hi0bits>
 801512c:	683d      	ldr	r5, [r7, #0]
 801512e:	eba8 0000 	sub.w	r0, r8, r0
 8015132:	42a8      	cmp	r0, r5
 8015134:	dd59      	ble.n	80151ea <__gethex+0x24e>
 8015136:	eba0 0805 	sub.w	r8, r0, r5
 801513a:	4641      	mov	r1, r8
 801513c:	4620      	mov	r0, r4
 801513e:	f7fe fbcd 	bl	80138dc <__any_on>
 8015142:	4683      	mov	fp, r0
 8015144:	b1b8      	cbz	r0, 8015176 <__gethex+0x1da>
 8015146:	f108 33ff 	add.w	r3, r8, #4294967295
 801514a:	1159      	asrs	r1, r3, #5
 801514c:	f003 021f 	and.w	r2, r3, #31
 8015150:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015154:	f04f 0b01 	mov.w	fp, #1
 8015158:	fa0b f202 	lsl.w	r2, fp, r2
 801515c:	420a      	tst	r2, r1
 801515e:	d00a      	beq.n	8015176 <__gethex+0x1da>
 8015160:	455b      	cmp	r3, fp
 8015162:	dd06      	ble.n	8015172 <__gethex+0x1d6>
 8015164:	f1a8 0102 	sub.w	r1, r8, #2
 8015168:	4620      	mov	r0, r4
 801516a:	f7fe fbb7 	bl	80138dc <__any_on>
 801516e:	2800      	cmp	r0, #0
 8015170:	d138      	bne.n	80151e4 <__gethex+0x248>
 8015172:	f04f 0b02 	mov.w	fp, #2
 8015176:	4641      	mov	r1, r8
 8015178:	4620      	mov	r0, r4
 801517a:	f7ff fea7 	bl	8014ecc <rshift>
 801517e:	4446      	add	r6, r8
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	42b3      	cmp	r3, r6
 8015184:	da41      	bge.n	801520a <__gethex+0x26e>
 8015186:	4621      	mov	r1, r4
 8015188:	4648      	mov	r0, r9
 801518a:	f7fd ff5b 	bl	8013044 <_Bfree>
 801518e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015190:	2300      	movs	r3, #0
 8015192:	6013      	str	r3, [r2, #0]
 8015194:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015198:	e78a      	b.n	80150b0 <__gethex+0x114>
 801519a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801519e:	2a2e      	cmp	r2, #46	; 0x2e
 80151a0:	d014      	beq.n	80151cc <__gethex+0x230>
 80151a2:	2b20      	cmp	r3, #32
 80151a4:	d106      	bne.n	80151b4 <__gethex+0x218>
 80151a6:	9b01      	ldr	r3, [sp, #4]
 80151a8:	f843 bb04 	str.w	fp, [r3], #4
 80151ac:	f04f 0b00 	mov.w	fp, #0
 80151b0:	9301      	str	r3, [sp, #4]
 80151b2:	465b      	mov	r3, fp
 80151b4:	7828      	ldrb	r0, [r5, #0]
 80151b6:	9303      	str	r3, [sp, #12]
 80151b8:	f7ff feda 	bl	8014f70 <__hexdig_fun>
 80151bc:	9b03      	ldr	r3, [sp, #12]
 80151be:	f000 000f 	and.w	r0, r0, #15
 80151c2:	4098      	lsls	r0, r3
 80151c4:	ea4b 0b00 	orr.w	fp, fp, r0
 80151c8:	3304      	adds	r3, #4
 80151ca:	e7a1      	b.n	8015110 <__gethex+0x174>
 80151cc:	45a8      	cmp	r8, r5
 80151ce:	d8e8      	bhi.n	80151a2 <__gethex+0x206>
 80151d0:	2201      	movs	r2, #1
 80151d2:	4628      	mov	r0, r5
 80151d4:	9303      	str	r3, [sp, #12]
 80151d6:	f7fc fe4d 	bl	8011e74 <strncmp>
 80151da:	4926      	ldr	r1, [pc, #152]	; (8015274 <__gethex+0x2d8>)
 80151dc:	9b03      	ldr	r3, [sp, #12]
 80151de:	2800      	cmp	r0, #0
 80151e0:	d1df      	bne.n	80151a2 <__gethex+0x206>
 80151e2:	e795      	b.n	8015110 <__gethex+0x174>
 80151e4:	f04f 0b03 	mov.w	fp, #3
 80151e8:	e7c5      	b.n	8015176 <__gethex+0x1da>
 80151ea:	da0b      	bge.n	8015204 <__gethex+0x268>
 80151ec:	eba5 0800 	sub.w	r8, r5, r0
 80151f0:	4621      	mov	r1, r4
 80151f2:	4642      	mov	r2, r8
 80151f4:	4648      	mov	r0, r9
 80151f6:	f7fe f93f 	bl	8013478 <__lshift>
 80151fa:	eba6 0608 	sub.w	r6, r6, r8
 80151fe:	4604      	mov	r4, r0
 8015200:	f100 0a14 	add.w	sl, r0, #20
 8015204:	f04f 0b00 	mov.w	fp, #0
 8015208:	e7ba      	b.n	8015180 <__gethex+0x1e4>
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	42b3      	cmp	r3, r6
 801520e:	dd73      	ble.n	80152f8 <__gethex+0x35c>
 8015210:	1b9e      	subs	r6, r3, r6
 8015212:	42b5      	cmp	r5, r6
 8015214:	dc34      	bgt.n	8015280 <__gethex+0x2e4>
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	2b02      	cmp	r3, #2
 801521a:	d023      	beq.n	8015264 <__gethex+0x2c8>
 801521c:	2b03      	cmp	r3, #3
 801521e:	d025      	beq.n	801526c <__gethex+0x2d0>
 8015220:	2b01      	cmp	r3, #1
 8015222:	d115      	bne.n	8015250 <__gethex+0x2b4>
 8015224:	42b5      	cmp	r5, r6
 8015226:	d113      	bne.n	8015250 <__gethex+0x2b4>
 8015228:	2d01      	cmp	r5, #1
 801522a:	d10b      	bne.n	8015244 <__gethex+0x2a8>
 801522c:	9a02      	ldr	r2, [sp, #8]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6013      	str	r3, [r2, #0]
 8015232:	2301      	movs	r3, #1
 8015234:	6123      	str	r3, [r4, #16]
 8015236:	f8ca 3000 	str.w	r3, [sl]
 801523a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801523c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015240:	601c      	str	r4, [r3, #0]
 8015242:	e735      	b.n	80150b0 <__gethex+0x114>
 8015244:	1e69      	subs	r1, r5, #1
 8015246:	4620      	mov	r0, r4
 8015248:	f7fe fb48 	bl	80138dc <__any_on>
 801524c:	2800      	cmp	r0, #0
 801524e:	d1ed      	bne.n	801522c <__gethex+0x290>
 8015250:	4621      	mov	r1, r4
 8015252:	4648      	mov	r0, r9
 8015254:	f7fd fef6 	bl	8013044 <_Bfree>
 8015258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801525a:	2300      	movs	r3, #0
 801525c:	6013      	str	r3, [r2, #0]
 801525e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015262:	e725      	b.n	80150b0 <__gethex+0x114>
 8015264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015266:	2b00      	cmp	r3, #0
 8015268:	d1f2      	bne.n	8015250 <__gethex+0x2b4>
 801526a:	e7df      	b.n	801522c <__gethex+0x290>
 801526c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801526e:	2b00      	cmp	r3, #0
 8015270:	d1dc      	bne.n	801522c <__gethex+0x290>
 8015272:	e7ed      	b.n	8015250 <__gethex+0x2b4>
 8015274:	08017024 	.word	0x08017024
 8015278:	08016ebe 	.word	0x08016ebe
 801527c:	08017192 	.word	0x08017192
 8015280:	f106 38ff 	add.w	r8, r6, #4294967295
 8015284:	f1bb 0f00 	cmp.w	fp, #0
 8015288:	d133      	bne.n	80152f2 <__gethex+0x356>
 801528a:	f1b8 0f00 	cmp.w	r8, #0
 801528e:	d004      	beq.n	801529a <__gethex+0x2fe>
 8015290:	4641      	mov	r1, r8
 8015292:	4620      	mov	r0, r4
 8015294:	f7fe fb22 	bl	80138dc <__any_on>
 8015298:	4683      	mov	fp, r0
 801529a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801529e:	2301      	movs	r3, #1
 80152a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80152a4:	f008 081f 	and.w	r8, r8, #31
 80152a8:	fa03 f308 	lsl.w	r3, r3, r8
 80152ac:	4213      	tst	r3, r2
 80152ae:	4631      	mov	r1, r6
 80152b0:	4620      	mov	r0, r4
 80152b2:	bf18      	it	ne
 80152b4:	f04b 0b02 	orrne.w	fp, fp, #2
 80152b8:	1bad      	subs	r5, r5, r6
 80152ba:	f7ff fe07 	bl	8014ecc <rshift>
 80152be:	687e      	ldr	r6, [r7, #4]
 80152c0:	f04f 0802 	mov.w	r8, #2
 80152c4:	f1bb 0f00 	cmp.w	fp, #0
 80152c8:	d04a      	beq.n	8015360 <__gethex+0x3c4>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	2b02      	cmp	r3, #2
 80152ce:	d016      	beq.n	80152fe <__gethex+0x362>
 80152d0:	2b03      	cmp	r3, #3
 80152d2:	d018      	beq.n	8015306 <__gethex+0x36a>
 80152d4:	2b01      	cmp	r3, #1
 80152d6:	d109      	bne.n	80152ec <__gethex+0x350>
 80152d8:	f01b 0f02 	tst.w	fp, #2
 80152dc:	d006      	beq.n	80152ec <__gethex+0x350>
 80152de:	f8da 3000 	ldr.w	r3, [sl]
 80152e2:	ea4b 0b03 	orr.w	fp, fp, r3
 80152e6:	f01b 0f01 	tst.w	fp, #1
 80152ea:	d10f      	bne.n	801530c <__gethex+0x370>
 80152ec:	f048 0810 	orr.w	r8, r8, #16
 80152f0:	e036      	b.n	8015360 <__gethex+0x3c4>
 80152f2:	f04f 0b01 	mov.w	fp, #1
 80152f6:	e7d0      	b.n	801529a <__gethex+0x2fe>
 80152f8:	f04f 0801 	mov.w	r8, #1
 80152fc:	e7e2      	b.n	80152c4 <__gethex+0x328>
 80152fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015300:	f1c3 0301 	rsb	r3, r3, #1
 8015304:	930f      	str	r3, [sp, #60]	; 0x3c
 8015306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015308:	2b00      	cmp	r3, #0
 801530a:	d0ef      	beq.n	80152ec <__gethex+0x350>
 801530c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015310:	f104 0214 	add.w	r2, r4, #20
 8015314:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015318:	9301      	str	r3, [sp, #4]
 801531a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801531e:	2300      	movs	r3, #0
 8015320:	4694      	mov	ip, r2
 8015322:	f852 1b04 	ldr.w	r1, [r2], #4
 8015326:	f1b1 3fff 	cmp.w	r1, #4294967295
 801532a:	d01e      	beq.n	801536a <__gethex+0x3ce>
 801532c:	3101      	adds	r1, #1
 801532e:	f8cc 1000 	str.w	r1, [ip]
 8015332:	f1b8 0f02 	cmp.w	r8, #2
 8015336:	f104 0214 	add.w	r2, r4, #20
 801533a:	d13d      	bne.n	80153b8 <__gethex+0x41c>
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	3b01      	subs	r3, #1
 8015340:	42ab      	cmp	r3, r5
 8015342:	d10b      	bne.n	801535c <__gethex+0x3c0>
 8015344:	1169      	asrs	r1, r5, #5
 8015346:	2301      	movs	r3, #1
 8015348:	f005 051f 	and.w	r5, r5, #31
 801534c:	fa03 f505 	lsl.w	r5, r3, r5
 8015350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015354:	421d      	tst	r5, r3
 8015356:	bf18      	it	ne
 8015358:	f04f 0801 	movne.w	r8, #1
 801535c:	f048 0820 	orr.w	r8, r8, #32
 8015360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015362:	601c      	str	r4, [r3, #0]
 8015364:	9b02      	ldr	r3, [sp, #8]
 8015366:	601e      	str	r6, [r3, #0]
 8015368:	e6a2      	b.n	80150b0 <__gethex+0x114>
 801536a:	4290      	cmp	r0, r2
 801536c:	f842 3c04 	str.w	r3, [r2, #-4]
 8015370:	d8d6      	bhi.n	8015320 <__gethex+0x384>
 8015372:	68a2      	ldr	r2, [r4, #8]
 8015374:	4593      	cmp	fp, r2
 8015376:	db17      	blt.n	80153a8 <__gethex+0x40c>
 8015378:	6861      	ldr	r1, [r4, #4]
 801537a:	4648      	mov	r0, r9
 801537c:	3101      	adds	r1, #1
 801537e:	f7fd fe21 	bl	8012fc4 <_Balloc>
 8015382:	4682      	mov	sl, r0
 8015384:	b918      	cbnz	r0, 801538e <__gethex+0x3f2>
 8015386:	4b1b      	ldr	r3, [pc, #108]	; (80153f4 <__gethex+0x458>)
 8015388:	4602      	mov	r2, r0
 801538a:	2184      	movs	r1, #132	; 0x84
 801538c:	e6b3      	b.n	80150f6 <__gethex+0x15a>
 801538e:	6922      	ldr	r2, [r4, #16]
 8015390:	3202      	adds	r2, #2
 8015392:	f104 010c 	add.w	r1, r4, #12
 8015396:	0092      	lsls	r2, r2, #2
 8015398:	300c      	adds	r0, #12
 801539a:	f7fc fe7a 	bl	8012092 <memcpy>
 801539e:	4621      	mov	r1, r4
 80153a0:	4648      	mov	r0, r9
 80153a2:	f7fd fe4f 	bl	8013044 <_Bfree>
 80153a6:	4654      	mov	r4, sl
 80153a8:	6922      	ldr	r2, [r4, #16]
 80153aa:	1c51      	adds	r1, r2, #1
 80153ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80153b0:	6121      	str	r1, [r4, #16]
 80153b2:	2101      	movs	r1, #1
 80153b4:	6151      	str	r1, [r2, #20]
 80153b6:	e7bc      	b.n	8015332 <__gethex+0x396>
 80153b8:	6921      	ldr	r1, [r4, #16]
 80153ba:	4559      	cmp	r1, fp
 80153bc:	dd0b      	ble.n	80153d6 <__gethex+0x43a>
 80153be:	2101      	movs	r1, #1
 80153c0:	4620      	mov	r0, r4
 80153c2:	f7ff fd83 	bl	8014ecc <rshift>
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	3601      	adds	r6, #1
 80153ca:	42b3      	cmp	r3, r6
 80153cc:	f6ff aedb 	blt.w	8015186 <__gethex+0x1ea>
 80153d0:	f04f 0801 	mov.w	r8, #1
 80153d4:	e7c2      	b.n	801535c <__gethex+0x3c0>
 80153d6:	f015 051f 	ands.w	r5, r5, #31
 80153da:	d0f9      	beq.n	80153d0 <__gethex+0x434>
 80153dc:	9b01      	ldr	r3, [sp, #4]
 80153de:	441a      	add	r2, r3
 80153e0:	f1c5 0520 	rsb	r5, r5, #32
 80153e4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80153e8:	f7fd fede 	bl	80131a8 <__hi0bits>
 80153ec:	42a8      	cmp	r0, r5
 80153ee:	dbe6      	blt.n	80153be <__gethex+0x422>
 80153f0:	e7ee      	b.n	80153d0 <__gethex+0x434>
 80153f2:	bf00      	nop
 80153f4:	08016ebe 	.word	0x08016ebe

080153f8 <L_shift>:
 80153f8:	f1c2 0208 	rsb	r2, r2, #8
 80153fc:	0092      	lsls	r2, r2, #2
 80153fe:	b570      	push	{r4, r5, r6, lr}
 8015400:	f1c2 0620 	rsb	r6, r2, #32
 8015404:	6843      	ldr	r3, [r0, #4]
 8015406:	6804      	ldr	r4, [r0, #0]
 8015408:	fa03 f506 	lsl.w	r5, r3, r6
 801540c:	432c      	orrs	r4, r5
 801540e:	40d3      	lsrs	r3, r2
 8015410:	6004      	str	r4, [r0, #0]
 8015412:	f840 3f04 	str.w	r3, [r0, #4]!
 8015416:	4288      	cmp	r0, r1
 8015418:	d3f4      	bcc.n	8015404 <L_shift+0xc>
 801541a:	bd70      	pop	{r4, r5, r6, pc}

0801541c <__match>:
 801541c:	b530      	push	{r4, r5, lr}
 801541e:	6803      	ldr	r3, [r0, #0]
 8015420:	3301      	adds	r3, #1
 8015422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015426:	b914      	cbnz	r4, 801542e <__match+0x12>
 8015428:	6003      	str	r3, [r0, #0]
 801542a:	2001      	movs	r0, #1
 801542c:	bd30      	pop	{r4, r5, pc}
 801542e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015432:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015436:	2d19      	cmp	r5, #25
 8015438:	bf98      	it	ls
 801543a:	3220      	addls	r2, #32
 801543c:	42a2      	cmp	r2, r4
 801543e:	d0f0      	beq.n	8015422 <__match+0x6>
 8015440:	2000      	movs	r0, #0
 8015442:	e7f3      	b.n	801542c <__match+0x10>

08015444 <__hexnan>:
 8015444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015448:	680b      	ldr	r3, [r1, #0]
 801544a:	6801      	ldr	r1, [r0, #0]
 801544c:	115e      	asrs	r6, r3, #5
 801544e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015452:	f013 031f 	ands.w	r3, r3, #31
 8015456:	b087      	sub	sp, #28
 8015458:	bf18      	it	ne
 801545a:	3604      	addne	r6, #4
 801545c:	2500      	movs	r5, #0
 801545e:	1f37      	subs	r7, r6, #4
 8015460:	4682      	mov	sl, r0
 8015462:	4690      	mov	r8, r2
 8015464:	9301      	str	r3, [sp, #4]
 8015466:	f846 5c04 	str.w	r5, [r6, #-4]
 801546a:	46b9      	mov	r9, r7
 801546c:	463c      	mov	r4, r7
 801546e:	9502      	str	r5, [sp, #8]
 8015470:	46ab      	mov	fp, r5
 8015472:	784a      	ldrb	r2, [r1, #1]
 8015474:	1c4b      	adds	r3, r1, #1
 8015476:	9303      	str	r3, [sp, #12]
 8015478:	b342      	cbz	r2, 80154cc <__hexnan+0x88>
 801547a:	4610      	mov	r0, r2
 801547c:	9105      	str	r1, [sp, #20]
 801547e:	9204      	str	r2, [sp, #16]
 8015480:	f7ff fd76 	bl	8014f70 <__hexdig_fun>
 8015484:	2800      	cmp	r0, #0
 8015486:	d14f      	bne.n	8015528 <__hexnan+0xe4>
 8015488:	9a04      	ldr	r2, [sp, #16]
 801548a:	9905      	ldr	r1, [sp, #20]
 801548c:	2a20      	cmp	r2, #32
 801548e:	d818      	bhi.n	80154c2 <__hexnan+0x7e>
 8015490:	9b02      	ldr	r3, [sp, #8]
 8015492:	459b      	cmp	fp, r3
 8015494:	dd13      	ble.n	80154be <__hexnan+0x7a>
 8015496:	454c      	cmp	r4, r9
 8015498:	d206      	bcs.n	80154a8 <__hexnan+0x64>
 801549a:	2d07      	cmp	r5, #7
 801549c:	dc04      	bgt.n	80154a8 <__hexnan+0x64>
 801549e:	462a      	mov	r2, r5
 80154a0:	4649      	mov	r1, r9
 80154a2:	4620      	mov	r0, r4
 80154a4:	f7ff ffa8 	bl	80153f8 <L_shift>
 80154a8:	4544      	cmp	r4, r8
 80154aa:	d950      	bls.n	801554e <__hexnan+0x10a>
 80154ac:	2300      	movs	r3, #0
 80154ae:	f1a4 0904 	sub.w	r9, r4, #4
 80154b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80154b6:	f8cd b008 	str.w	fp, [sp, #8]
 80154ba:	464c      	mov	r4, r9
 80154bc:	461d      	mov	r5, r3
 80154be:	9903      	ldr	r1, [sp, #12]
 80154c0:	e7d7      	b.n	8015472 <__hexnan+0x2e>
 80154c2:	2a29      	cmp	r2, #41	; 0x29
 80154c4:	d155      	bne.n	8015572 <__hexnan+0x12e>
 80154c6:	3102      	adds	r1, #2
 80154c8:	f8ca 1000 	str.w	r1, [sl]
 80154cc:	f1bb 0f00 	cmp.w	fp, #0
 80154d0:	d04f      	beq.n	8015572 <__hexnan+0x12e>
 80154d2:	454c      	cmp	r4, r9
 80154d4:	d206      	bcs.n	80154e4 <__hexnan+0xa0>
 80154d6:	2d07      	cmp	r5, #7
 80154d8:	dc04      	bgt.n	80154e4 <__hexnan+0xa0>
 80154da:	462a      	mov	r2, r5
 80154dc:	4649      	mov	r1, r9
 80154de:	4620      	mov	r0, r4
 80154e0:	f7ff ff8a 	bl	80153f8 <L_shift>
 80154e4:	4544      	cmp	r4, r8
 80154e6:	d934      	bls.n	8015552 <__hexnan+0x10e>
 80154e8:	f1a8 0204 	sub.w	r2, r8, #4
 80154ec:	4623      	mov	r3, r4
 80154ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80154f2:	f842 1f04 	str.w	r1, [r2, #4]!
 80154f6:	429f      	cmp	r7, r3
 80154f8:	d2f9      	bcs.n	80154ee <__hexnan+0xaa>
 80154fa:	1b3b      	subs	r3, r7, r4
 80154fc:	f023 0303 	bic.w	r3, r3, #3
 8015500:	3304      	adds	r3, #4
 8015502:	3e03      	subs	r6, #3
 8015504:	3401      	adds	r4, #1
 8015506:	42a6      	cmp	r6, r4
 8015508:	bf38      	it	cc
 801550a:	2304      	movcc	r3, #4
 801550c:	4443      	add	r3, r8
 801550e:	2200      	movs	r2, #0
 8015510:	f843 2b04 	str.w	r2, [r3], #4
 8015514:	429f      	cmp	r7, r3
 8015516:	d2fb      	bcs.n	8015510 <__hexnan+0xcc>
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	b91b      	cbnz	r3, 8015524 <__hexnan+0xe0>
 801551c:	4547      	cmp	r7, r8
 801551e:	d126      	bne.n	801556e <__hexnan+0x12a>
 8015520:	2301      	movs	r3, #1
 8015522:	603b      	str	r3, [r7, #0]
 8015524:	2005      	movs	r0, #5
 8015526:	e025      	b.n	8015574 <__hexnan+0x130>
 8015528:	3501      	adds	r5, #1
 801552a:	2d08      	cmp	r5, #8
 801552c:	f10b 0b01 	add.w	fp, fp, #1
 8015530:	dd06      	ble.n	8015540 <__hexnan+0xfc>
 8015532:	4544      	cmp	r4, r8
 8015534:	d9c3      	bls.n	80154be <__hexnan+0x7a>
 8015536:	2300      	movs	r3, #0
 8015538:	f844 3c04 	str.w	r3, [r4, #-4]
 801553c:	2501      	movs	r5, #1
 801553e:	3c04      	subs	r4, #4
 8015540:	6822      	ldr	r2, [r4, #0]
 8015542:	f000 000f 	and.w	r0, r0, #15
 8015546:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801554a:	6020      	str	r0, [r4, #0]
 801554c:	e7b7      	b.n	80154be <__hexnan+0x7a>
 801554e:	2508      	movs	r5, #8
 8015550:	e7b5      	b.n	80154be <__hexnan+0x7a>
 8015552:	9b01      	ldr	r3, [sp, #4]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d0df      	beq.n	8015518 <__hexnan+0xd4>
 8015558:	f1c3 0320 	rsb	r3, r3, #32
 801555c:	f04f 32ff 	mov.w	r2, #4294967295
 8015560:	40da      	lsrs	r2, r3
 8015562:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015566:	4013      	ands	r3, r2
 8015568:	f846 3c04 	str.w	r3, [r6, #-4]
 801556c:	e7d4      	b.n	8015518 <__hexnan+0xd4>
 801556e:	3f04      	subs	r7, #4
 8015570:	e7d2      	b.n	8015518 <__hexnan+0xd4>
 8015572:	2004      	movs	r0, #4
 8015574:	b007      	add	sp, #28
 8015576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801557a <__ascii_mbtowc>:
 801557a:	b082      	sub	sp, #8
 801557c:	b901      	cbnz	r1, 8015580 <__ascii_mbtowc+0x6>
 801557e:	a901      	add	r1, sp, #4
 8015580:	b142      	cbz	r2, 8015594 <__ascii_mbtowc+0x1a>
 8015582:	b14b      	cbz	r3, 8015598 <__ascii_mbtowc+0x1e>
 8015584:	7813      	ldrb	r3, [r2, #0]
 8015586:	600b      	str	r3, [r1, #0]
 8015588:	7812      	ldrb	r2, [r2, #0]
 801558a:	1e10      	subs	r0, r2, #0
 801558c:	bf18      	it	ne
 801558e:	2001      	movne	r0, #1
 8015590:	b002      	add	sp, #8
 8015592:	4770      	bx	lr
 8015594:	4610      	mov	r0, r2
 8015596:	e7fb      	b.n	8015590 <__ascii_mbtowc+0x16>
 8015598:	f06f 0001 	mvn.w	r0, #1
 801559c:	e7f8      	b.n	8015590 <__ascii_mbtowc+0x16>

0801559e <_realloc_r>:
 801559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a2:	4680      	mov	r8, r0
 80155a4:	4614      	mov	r4, r2
 80155a6:	460e      	mov	r6, r1
 80155a8:	b921      	cbnz	r1, 80155b4 <_realloc_r+0x16>
 80155aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155ae:	4611      	mov	r1, r2
 80155b0:	f7fd bc7c 	b.w	8012eac <_malloc_r>
 80155b4:	b92a      	cbnz	r2, 80155c2 <_realloc_r+0x24>
 80155b6:	f7fd fc05 	bl	8012dc4 <_free_r>
 80155ba:	4625      	mov	r5, r4
 80155bc:	4628      	mov	r0, r5
 80155be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c2:	f000 f828 	bl	8015616 <_malloc_usable_size_r>
 80155c6:	4284      	cmp	r4, r0
 80155c8:	4607      	mov	r7, r0
 80155ca:	d802      	bhi.n	80155d2 <_realloc_r+0x34>
 80155cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80155d0:	d812      	bhi.n	80155f8 <_realloc_r+0x5a>
 80155d2:	4621      	mov	r1, r4
 80155d4:	4640      	mov	r0, r8
 80155d6:	f7fd fc69 	bl	8012eac <_malloc_r>
 80155da:	4605      	mov	r5, r0
 80155dc:	2800      	cmp	r0, #0
 80155de:	d0ed      	beq.n	80155bc <_realloc_r+0x1e>
 80155e0:	42bc      	cmp	r4, r7
 80155e2:	4622      	mov	r2, r4
 80155e4:	4631      	mov	r1, r6
 80155e6:	bf28      	it	cs
 80155e8:	463a      	movcs	r2, r7
 80155ea:	f7fc fd52 	bl	8012092 <memcpy>
 80155ee:	4631      	mov	r1, r6
 80155f0:	4640      	mov	r0, r8
 80155f2:	f7fd fbe7 	bl	8012dc4 <_free_r>
 80155f6:	e7e1      	b.n	80155bc <_realloc_r+0x1e>
 80155f8:	4635      	mov	r5, r6
 80155fa:	e7df      	b.n	80155bc <_realloc_r+0x1e>

080155fc <__ascii_wctomb>:
 80155fc:	b149      	cbz	r1, 8015612 <__ascii_wctomb+0x16>
 80155fe:	2aff      	cmp	r2, #255	; 0xff
 8015600:	bf85      	ittet	hi
 8015602:	238a      	movhi	r3, #138	; 0x8a
 8015604:	6003      	strhi	r3, [r0, #0]
 8015606:	700a      	strbls	r2, [r1, #0]
 8015608:	f04f 30ff 	movhi.w	r0, #4294967295
 801560c:	bf98      	it	ls
 801560e:	2001      	movls	r0, #1
 8015610:	4770      	bx	lr
 8015612:	4608      	mov	r0, r1
 8015614:	4770      	bx	lr

08015616 <_malloc_usable_size_r>:
 8015616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801561a:	1f18      	subs	r0, r3, #4
 801561c:	2b00      	cmp	r3, #0
 801561e:	bfbc      	itt	lt
 8015620:	580b      	ldrlt	r3, [r1, r0]
 8015622:	18c0      	addlt	r0, r0, r3
 8015624:	4770      	bx	lr
	...

08015628 <_init>:
 8015628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801562a:	bf00      	nop
 801562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801562e:	bc08      	pop	{r3}
 8015630:	469e      	mov	lr, r3
 8015632:	4770      	bx	lr

08015634 <_fini>:
 8015634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015636:	bf00      	nop
 8015638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801563a:	bc08      	pop	{r3}
 801563c:	469e      	mov	lr, r3
 801563e:	4770      	bx	lr
